; ModuleID = 'Top'

@gl_MaxLights = internal global i32 8
@gl_MaxClipPlanes = internal global i32 8
@gl_MaxTextureUnits = internal global i32 2
@gl_MaxTextureCoords = internal global i32 4
@gl_MaxVertexAttribs = internal global i32 16
@gl_MaxVertexUniformComponents = internal global i32 512
@gl_MaxVaryingFloats = internal global i32 32
@gl_MaxVertexTextureImageUnits = internal global i32 0
@gl_MaxCombinedTextureImageUnits = internal global i32 2
@gl_MaxTextureImageUnits = internal global i32 2
@gl_MaxFragmentUniformComponents = internal global i32 64
@gl_MaxDrawBuffers = internal global i32 2
@"sampler2D texSampler2D" = external addrspace(1) constant i32
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %texture2D_retval = alloca <4 x float>
  %texColor = alloca <4 x float>
  %0 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %"gl_TexCoord[4]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %"gl_TexCoord[5]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 0)
  %1 = fadd <4 x float> %"gl_TexCoord[4]", %"gl_TexCoord[5]"
  %2 = extractelement <4 x float> %1, i32 0
  %3 = insertelement <2 x float> undef, float %2, i32 0
  %4 = extractelement <4 x float> %1, i32 1
  %5 = insertelement <2 x float> %3, float %4, i32 1
  %texture2D_retval1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %5)
  store <4 x float> %texture2D_retval1, <4 x float>* %texture2D_retval
  %6 = load <4 x float>* %texture2D_retval
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 0)
  %texColor2 = fadd <4 x float> %6, %color
  store <4 x float> %texColor2, <4 x float>* %texColor
  %alpha = call float @llvm.gla.fReadInterpolant.f32(i32 3, i32 0)
  %7 = load <4 x float>* %texColor
  %texColor3 = insertelement <4 x float> %7, float %alpha, i32 3
  store <4 x float> %texColor3, <4 x float>* %texColor
  %"gl_TexCoord[0]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 4, i32 0)
  %"gl_TexCoord[4]4" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %8 = fadd <4 x float> %"gl_TexCoord[0]", %"gl_TexCoord[4]4"
  %9 = load <4 x float>* %texColor
  %gl_FragColor = fadd <4 x float> %8, %9
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %10 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %10)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@"sampler2D texSampler2D" = external addrspace(1) constant i32

define void @main() {
entry:
  %0 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %"gl_TexCoord[4]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %"gl_TexCoord[5]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 0)
  %1 = fadd <4 x float> %"gl_TexCoord[4]", %"gl_TexCoord[5]"
  %2 = call <2 x float> @llvm.gla.fMultiInsert.v2f32.v2f32.v4f32.v4f32.f32.f32(<2 x float> undef, i32 3, <4 x float> %1, i32 0, <4 x float> %1, i32 1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  %texture2D_retval1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %2)
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 0)
  %texColor2 = fadd <4 x float> %texture2D_retval1, %color
  %alpha = call float @llvm.gla.fReadInterpolant.f32(i32 3, i32 0)
  %3 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %texColor2, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %alpha, i32 -1)
  %"gl_TexCoord[0]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 4, i32 0)
  %4 = fadd <4 x float> %"gl_TexCoord[0]", %"gl_TexCoord[4]"
  %gl_FragColor = fadd <4 x float> %4, %3
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %gl_FragColor)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <2 x float> @llvm.gla.fMultiInsert.v2f32.v2f32.v4f32.v4f32.f32.f32(<2 x float>, i32, <4 x float>, i32, <4 x float>, i32, float, i32, float, i32) nounwind readnone
compiling varyingArray.frag...
uniform sampler2D texSampler2D ; 
varying vec4 color ; 
varying float alpha ; 
void  main (){
vec4 texColor = texture2D ( texSampler2D , vec2 ( gl_TexCoord [ 4 ] + gl_TexCoord [ 5 ] ) ) ; texColor += color ; texColor . a = alpha ; gl_FragColor = gl_TexCoord [ 0 ] + gl_TexCoord [ 4 ] + texColor ; }



(
(declare (in ) float alpha)
(declare (in ) vec4 color)
(declare (uniform ) sampler2D texSampler2D)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 texColor)
      (declare (temporary ) vec4 texture2D_retval)
      (assign (constant bool (1)) (xyzw) (var_ref texture2D_retval)  (call texture2D ((var_ref texSampler2D) (swiz xy (expression vec4 + (array_ref (var_ref gl_TexCoord) (constant int (4)) ) (array_ref (var_ref gl_TexCoord) (constant int (5)) ) ) )))
) 
      (assign (constant bool (1)) (xyzw) (var_ref texColor)  (expression vec4 + (var_ref texture2D_retval) (var_ref color) ) ) 
      (assign (constant bool (1)) (w) (var_ref texColor)  (var_ref alpha) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 + (expression vec4 + (array_ref (var_ref gl_TexCoord) (constant int (0)) ) (array_ref (var_ref gl_TexCoord) (constant int (4)) ) ) (var_ref texColor) ) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform sampler2D texSampler2D;
in vec4 color;
in float alpha;

void main()
{
    vec4 temp21 = gl_TexCoord[4] + gl_TexCoord[5];
    vec2 temp22;
    temp22.xy = temp21.xy;
    vec4 texture2D_retval1 = texture2D(texSampler2D, temp22);
    vec4 texColor2 = texture2D_retval1 + color;
    vec4 temp25 = texColor2;
    temp25.w = alpha.x;
    vec4 temp26 = gl_TexCoord[0] + gl_TexCoord[4];
    gl_FragColor = temp26 + temp25;
    gl_FragColor = gl_FragColor;
    
}
