
Top IR:
; ModuleID = 'Top'

@"sampler3D texSampler3D" = external addrspace(1) constant i32
@scale = external addrspace(1) constant <2 x float>
@"sampler2D texSampler2D" = external addrspace(1) constant i32
@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %mix_retval = alloca <4 x float>
  %coords = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 1)
  %0 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %0, i32 0, <3 x float> %coords)
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1, i32 1)
  %2 = load <2 x float> addrspace(1)* @scale
  %3 = fadd <2 x float> %t, %2
  %4 = load <2 x float> addrspace(1)* @scale
  %5 = fdiv <2 x float> %3, %4
  %6 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %7 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %6, i32 0, <2 x float> %5)
  %8 = extractelement <4 x float> %7, i32 3
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = extractelement <4 x float> %7, i32 2
  %11 = insertelement <4 x float> %9, float %10, i32 1
  %12 = extractelement <4 x float> %7, i32 1
  %13 = insertelement <4 x float> %11, float %12, i32 2
  %14 = extractelement <4 x float> %7, i32 0
  %15 = insertelement <4 x float> %13, float %14, i32 3
  %16 = fadd <4 x float> %1, %15
  %17 = load <4 x float> addrspace(1)* @u
  %18 = load float addrspace(1)* @blend
  %19 = fmul float %18, 0x3FFC9FBE80000000
  %mix_retval1 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %16, <4 x float> %17, float %19)
  store <4 x float> %mix_retval1, <4 x float>* %mix_retval
  %gl_FragColor = load <4 x float>* %mix_retval
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %main-copy-out

main-copy-out:                                    ; preds = %entry
  %20 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %20)
  br label %main-exit

main-exit:                                        ; preds = %main-copy-out
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@"sampler3D texSampler3D" = external addrspace(1) constant i32
@scale = external addrspace(1) constant <2 x float>
@"sampler2D texSampler2D" = external addrspace(1) constant i32
@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float

define fastcc void @main() {
entry:
  %coords = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 1)
  %0 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %0, i32 0, <3 x float> %coords)
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1, i32 1)
  %2 = load <2 x float> addrspace(1)* @scale
  %3 = fadd <2 x float> %t, %2
  %4 = fdiv <2 x float> %3, %2
  %5 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %5, i32 0, <2 x float> %4)
  %7 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v4f32.v4f32.v4f32.v4f32(<4 x float> undef, i32 15, <4 x float> %6, i32 3, <4 x float> %6, i32 2, <4 x float> %6, i32 1, <4 x float> %6, i32 0)
  %8 = fadd <4 x float> %1, %7
  %9 = load <4 x float> addrspace(1)* @u
  %10 = load float addrspace(1)* @blend
  %11 = fmul float %10, 0x3FFC9FBE80000000
  %mix_retval1 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %8, <4 x float> %9, float %11)
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %mix_retval1)
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v4f32.v4f32.v4f32.v4f32(<4 x float>, i32, <4 x float>, i32, <4 x float>, i32, <4 x float>, i32, <4 x float>, i32) nounwind readnone
compiling test.frag...
uniform sampler2D texSampler2D ; 
uniform sampler3D texSampler3D ; 
uniform float blend ; 
uniform vec2 scale ; 
uniform vec4 u ; 
varying vec2 t ; 
varying vec3 coords ; 
void  main (){
float blendscale = 1.789000 ; vec4 v = texture2D ( texSampler2D , t + scale / scale ) . wzyx ; vec4 w = texture3D ( texSampler3D , coords ) + v ; gl_FragColor = mix ( w , u , blend * blendscale ) ; }



(
(declare (in ) vec3 coords)
(declare (in ) vec2 t)
(declare (uniform ) vec4 u)
(declare (uniform ) vec2 scale)
(declare (uniform ) float blend)
(declare (uniform ) sampler3D texSampler3D)
(declare (uniform ) sampler2D texSampler2D)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((expression vec4 + (tex (var_ref texSampler3D)  (var_ref coords)  (0 0 0) 1 () )(swiz wzyx (tex (var_ref texSampler2D)  (expression vec2 / (expression vec2 + (var_ref t) (var_ref scale) ) (var_ref scale) )  (0 0 0) 1 () ))) (var_ref u) (expression float * (var_ref blend) (constant float (1.789000)) ) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref mix_retval) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform sampler3D texSampler3D;
uniform vec2 scale;
uniform sampler2D texSampler2D;
uniform vec4 u;
uniform float blend;
in vec3 coords;
in vec2 t;
const float const28 = 1.789;

void main()
{
    vec4 temp21 = texture3D(texSampler3D, coords);
    vec2 temp22 = t + scale;
    vec2 temp23 = temp22 / scale;
    vec4 temp24 = texture2D(texSampler2D, temp23);
    vec4 temp25 = temp24.wzyx;
    vec4 temp26 = temp21 + temp25;
    float temp27 = blend * const28;
    vec4 mix_retval1 = mix(temp26, u, temp27);
    gl_FragColor = mix_retval1;
    
}
