
Top IR:
; ModuleID = 'Top'

@gl_MaxLights = internal global i32 8
@gl_MaxClipPlanes = internal global i32 8
@gl_MaxTextureUnits = internal global i32 2
@gl_MaxTextureCoords = internal global i32 4
@gl_MaxVertexAttribs = internal global i32 16
@gl_MaxVertexUniformComponents = internal global i32 512
@gl_MaxVaryingFloats = internal global i32 32
@gl_MaxVertexTextureImageUnits = internal global i32 0
@gl_MaxCombinedTextureImageUnits = internal global i32 2
@gl_MaxTextureImageUnits = internal global i32 2
@gl_MaxFragmentUniformComponents = internal global i32 64
@gl_MaxDrawBuffers = internal global i32 2
@color = external addrspace(1) constant [6 x <4 x float>]
@inColor = external addrspace(1) constant <3 x float>
@alpha = external addrspace(1) constant [16 x float]
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %assignment_tmp = alloca <4 x float>
  %texColor = alloca <4 x float>
  %0 = load <4 x float> addrspace(1)* getelementptr inbounds ([6 x <4 x float>] addrspace(1)* @color, i32 0, i32 1)
  %1 = load <4 x float> addrspace(1)* getelementptr inbounds ([6 x <4 x float>] addrspace(1)* @color, i32 0, i32 1)
  %assignment_tmp1 = fadd <4 x float> %0, %1
  store <4 x float> %assignment_tmp1, <4 x float>* %assignment_tmp
  %texColor2 = load <4 x float>* %assignment_tmp
  store <4 x float> %texColor2, <4 x float>* %texColor
  %2 = load <4 x float>* %assignment_tmp
  %3 = extractelement <4 x float> %2, i32 0
  %4 = insertelement <3 x float> undef, float %3, i32 0
  %5 = extractelement <4 x float> %2, i32 1
  %6 = insertelement <3 x float> %4, float %5, i32 1
  %7 = extractelement <4 x float> %2, i32 2
  %8 = insertelement <3 x float> %6, float %7, i32 2
  %9 = load <3 x float> addrspace(1)* @inColor
  %10 = fadd <3 x float> %8, %9
  %11 = load <4 x float>* %texColor
  %12 = extractelement <3 x float> %10, i32 0
  %13 = insertelement <4 x float> %11, float %12, i32 0
  %14 = extractelement <3 x float> %10, i32 1
  %15 = insertelement <4 x float> %13, float %14, i32 1
  %16 = extractelement <3 x float> %10, i32 2
  %texColor3 = insertelement <4 x float> %15, float %16, i32 2
  store <4 x float> %texColor3, <4 x float>* %texColor
  %17 = load <4 x float>* %texColor
  %18 = extractelement <4 x float> %17, i32 3
  %19 = load float addrspace(1)* getelementptr inbounds ([16 x float] addrspace(1)* @alpha, i32 0, i32 12)
  %20 = fadd float %18, %19
  %21 = load <4 x float>* %texColor
  %texColor4 = insertelement <4 x float> %21, float %20, i32 3
  store <4 x float> %texColor4, <4 x float>* %texColor
  %gl_FragColor = load <4 x float>* %texColor
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %22 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %22)
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@color = external addrspace(1) constant [6 x <4 x float>]
@inColor = external addrspace(1) constant <3 x float>
@alpha = external addrspace(1) constant [16 x float]

define fastcc void @main() {
entry:
  %0 = load <4 x float> addrspace(1)* getelementptr inbounds ([6 x <4 x float>] addrspace(1)* @color, i32 0, i32 1)
  %assignment_tmp1 = fadd <4 x float> %0, %0
  %1 = call <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.v4f32.v4f32.v4f32.f32(<3 x float> undef, i32 7, <4 x float> %assignment_tmp1, i32 0, <4 x float> %assignment_tmp1, i32 1, <4 x float> %assignment_tmp1, i32 2, float 0.000000e+00, i32 -1)
  %2 = load <3 x float> addrspace(1)* @inColor
  %3 = fadd <3 x float> %1, %2
  %4 = extractelement <3 x float> %3, i32 0
  %5 = insertelement <4 x float> %assignment_tmp1, float %4, i32 0
  %6 = extractelement <3 x float> %3, i32 1
  %7 = insertelement <4 x float> %5, float %6, i32 1
  %8 = extractelement <3 x float> %3, i32 2
  %texColor3 = insertelement <4 x float> %7, float %8, i32 2
  %9 = extractelement <4 x float> %texColor3, i32 3
  %10 = load float addrspace(1)* getelementptr inbounds ([16 x float] addrspace(1)* @alpha, i32 0, i32 12)
  %11 = fadd float %9, %10
  %12 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float> %assignment_tmp1, i32 15, <3 x float> %3, i32 0, <3 x float> %3, i32 1, <3 x float> %3, i32 2, float %11, i32 -1)
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %12)
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, float, i32) nounwind readnone

declare <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.v4f32.v4f32.v4f32.f32(<3 x float>, i32, <4 x float>, i32, <4 x float>, i32, <4 x float>, i32, float, i32) nounwind readnone

***Unsupported functionality: Basic Type in Bottom IR
compiling uniformArray.frag...
uniform sampler2D texSampler2D ; 
uniform vec3 inColor ; 
uniform vec4 color [ 6 ] ; 
uniform float alpha [ 16 ] ; 
void  main (){
vec4 texColor = color [ 1 ] + color [ 1 ] ; texColor . xyz += inColor ; texColor . a += alpha [ 12 ] ; gl_FragColor = texColor ; }



(
(declare (uniform ) (array float 16) alpha)
(declare (uniform ) (array vec4 6) color)
(declare (uniform ) vec3 inColor)
(declare (uniform ) sampler2D texSampler2D)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 texColor)
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (array_ref (var_ref color) (constant int (1)) ) (array_ref (var_ref color) (constant int (1)) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref texColor)  (var_ref assignment_tmp) ) 
      (assign (constant bool (1)) (xyz) (var_ref texColor)  (expression vec3 + (swiz xyz (var_ref assignment_tmp) )(var_ref inColor) ) ) 
      (assign (constant bool (1)) (w) (var_ref texColor)  (expression float + (swiz w (var_ref texColor) )(array_ref (var_ref alpha) (constant int (12)) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref texColor) ) 
    ))

)


)