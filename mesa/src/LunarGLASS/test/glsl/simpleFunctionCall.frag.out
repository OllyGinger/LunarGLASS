; ModuleID = 'Top'

@gl_MaxLights = internal constant i32 8
@gl_MaxClipPlanes = internal constant i32 8
@gl_MaxTextureUnits = internal constant i32 2
@gl_MaxTextureCoords = internal constant i32 4
@gl_MaxVertexAttribs = internal constant i32 16
@gl_MaxVertexUniformComponents = internal constant i32 512
@gl_MaxVaryingFloats = internal constant i32 32
@gl_MaxVertexTextureImageUnits = internal constant i32 0
@gl_MaxCombinedTextureImageUnits = internal constant i32 2
@gl_MaxTextureImageUnits = internal constant i32 2
@gl_MaxFragmentUniformComponents = internal constant i32 64
@gl_MaxDrawBuffers = internal constant i32 2
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %foo_retval = alloca <4 x float>
  %0 = call <4 x float> @foo()
  store <4 x float> %0, <4 x float>* %foo_retval
  %1 = load <4 x float>* %foo_retval
  store <4 x float> %1, <4 x float>* @gl_FragColor
  %2 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %2)
  ret void
}

define fastcc <4 x float> @foo() {
foo:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  ret <4 x float> %BaseColor
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@gl_MaxLights = internal constant i32 8
@gl_MaxClipPlanes = internal constant i32 8
@gl_MaxTextureUnits = internal constant i32 2
@gl_MaxTextureCoords = internal constant i32 4
@gl_MaxVertexAttribs = internal constant i32 16
@gl_MaxVertexUniformComponents = internal constant i32 512
@gl_MaxVaryingFloats = internal constant i32 32
@gl_MaxVertexTextureImageUnits = internal constant i32 0
@gl_MaxCombinedTextureImageUnits = internal constant i32 2
@gl_MaxTextureImageUnits = internal constant i32 2
@gl_MaxFragmentUniformComponents = internal constant i32 64
@gl_MaxDrawBuffers = internal constant i32 2

define void @main() {
entry:
  %0 = call <4 x float> @foo()
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %0)
  ret void
}

define fastcc <4 x float> @foo() {
foo:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  ret <4 x float> %BaseColor
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
compiling simpleFunctionCall.frag...
uniform vec4 bigColor ; 
varying vec4 BaseColor ; 
uniform float d ; 
vec4  foo (){
return BaseColor ; }

void  main (){
gl_FragColor = foo ( ) ; }



(
(declare (uniform ) float d)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(function foo
  (signature vec4
    (parameters
    )
    (
      (return (var_ref BaseColor) )
    ))

)

(function main
  (signature void
    (parameters
    )
    (
      (declare (temporary ) vec4 foo_retval)
      (assign (constant bool (1)) (xyzw) (var_ref foo_retval)  (call foo ())
) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref foo_retval) ) 
    ))

)


)
// LunarGOO output
#version 130
in vec4 BaseColor;

void main()
{
    vec4 temp21 = foo();
    gl_FragColor = temp21;
    
}

vec4 foo()
{
    return BaseColor;
}
