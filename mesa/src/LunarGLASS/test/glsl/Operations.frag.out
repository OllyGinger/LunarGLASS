; ModuleID = 'Top'

@gl_MaxLights = internal constant i32 8
@gl_MaxClipPlanes = internal constant i32 8
@gl_MaxTextureUnits = internal constant i32 2
@gl_MaxTextureCoords = internal constant i32 4
@gl_MaxVertexAttribs = internal constant i32 16
@gl_MaxVertexUniformComponents = internal constant i32 512
@gl_MaxVaryingFloats = internal constant i32 32
@gl_MaxVertexTextureImageUnits = internal constant i32 0
@gl_MaxCombinedTextureImageUnits = internal constant i32 2
@gl_MaxTextureImageUnits = internal constant i32 2
@gl_MaxFragmentUniformComponents = internal constant i32 64
@gl_MaxDrawBuffers = internal constant i32 2
@uv4 = external addrspace(1) constant <4 x float>
@ub = external addrspace(1) constant i1
@uf = external addrspace(1) constant float
@ui = external addrspace(1) constant i32
@ub41 = external addrspace(1) constant <4 x i1>
@ub42 = external addrspace(1) constant <4 x i1>
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %conditional_tmp = alloca <4 x float>
  %assignment_tmp282 = alloca i1
  %assignment_tmp279 = alloca i32
  %and_tmp269 = alloca i1
  %or_tmp266 = alloca i1
  %assignment_tmp263 = alloca float
  %cross_retval = alloca <3 x float>
  %dot_retval = alloca float
  %distance_retval = alloca float
  %length_retval = alloca float
  %and_tmp245 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp240 = alloca i32
  %any_retval234 = alloca i1
  %not_retval = alloca <4 x i1>
  %and_tmp231 = alloca i1
  %all_retval = alloca i1
  %and_tmp224 = alloca i1
  %any_retval218 = alloca i1
  %and_tmp216 = alloca i1
  %any_retval210 = alloca i1
  %notEqual_retval = alloca <4 x i1>
  %and_tmp207 = alloca i1
  %any_retval201 = alloca i1
  %equal_retval = alloca <4 x i1>
  %and_tmp198 = alloca i1
  %any_retval192 = alloca i1
  %greaterThanEqual_retval = alloca <4 x i1>
  %and_tmp189 = alloca i1
  %any_retval183 = alloca i1
  %greaterThan_retval = alloca <4 x i1>
  %and_tmp180 = alloca i1
  %any_retval176 = alloca i1
  %lessThanEqual_retval = alloca <4 x i1>
  %and_tmp = alloca i1
  %any_retval = alloca i1
  %lessThan_retval = alloca <4 x i1>
  %clamp_retval169 = alloca i32
  %assignment_tmp166 = alloca i32
  %max_retval164 = alloca i32
  %assignment_tmp161 = alloca i32
  %min_retval159 = alloca i32
  %assignment_tmp156 = alloca i32
  %abs_retval154 = alloca i32
  %fwidth_retval = alloca <4 x float>
  %assignment_tmp149 = alloca <4 x float>
  %dFdy_retval = alloca <4 x float>
  %assignment_tmp145 = alloca <4 x float>
  %dFdx_retval = alloca <4 x float>
  %assignment_tmp141 = alloca <4 x float>
  %refract_retval = alloca <4 x float>
  %assignment_tmp137 = alloca <4 x float>
  %reflect_retval = alloca <4 x float>
  %assignment_tmp133 = alloca <4 x float>
  %faceforward_retval = alloca <4 x float>
  %assignment_tmp129 = alloca <4 x float>
  %normalize_retval = alloca <4 x float>
  %assignment_tmp125 = alloca <4 x float>
  %smoothstep_retval = alloca <4 x float>
  %assignment_tmp121 = alloca <4 x float>
  %step_retval = alloca <4 x float>
  %assignment_tmp117 = alloca <4 x float>
  %mix_retval115 = alloca <4 x float>
  %assignment_tmp112 = alloca <4 x float>
  %mix_retval = alloca <4 x float>
  %assignment_tmp108 = alloca <4 x float>
  %clamp_retval = alloca <4 x float>
  %assignment_tmp104 = alloca <4 x float>
  %max_retval = alloca <4 x float>
  %assignment_tmp100 = alloca <4 x float>
  %min_retval = alloca <4 x float>
  %assignment_tmp96 = alloca <4 x float>
  %mod_retval94 = alloca <4 x float>
  %assignment_tmp91 = alloca <4 x float>
  %mod_retval = alloca <4 x float>
  %assignment_tmp87 = alloca <4 x float>
  %fract_retval = alloca <4 x float>
  %assignment_tmp83 = alloca <4 x float>
  %ceil_retval = alloca <4 x float>
  %assignment_tmp79 = alloca <4 x float>
  %floor_retval = alloca <4 x float>
  %assignment_tmp75 = alloca <4 x float>
  %sign_retval = alloca <4 x float>
  %assignment_tmp71 = alloca <4 x float>
  %abs_retval = alloca <4 x float>
  %assignment_tmp67 = alloca <4 x float>
  %inversesqrt_retval = alloca <4 x float>
  %assignment_tmp63 = alloca <4 x float>
  %sqrt_retval = alloca <4 x float>
  %assignment_tmp59 = alloca <4 x float>
  %log2_retval = alloca <4 x float>
  %assignment_tmp55 = alloca <4 x float>
  %exp2_retval = alloca <4 x float>
  %assignment_tmp51 = alloca <4 x float>
  %log_retval = alloca <4 x float>
  %assignment_tmp47 = alloca <4 x float>
  %exp_retval = alloca <4 x float>
  %assignment_tmp43 = alloca <4 x float>
  %pow_retval = alloca <4 x float>
  %assignment_tmp39 = alloca <4 x float>
  %tanh_retval = alloca <4 x float>
  %assignment_tmp35 = alloca <4 x float>
  %cosh_retval = alloca <4 x float>
  %assignment_tmp31 = alloca <4 x float>
  %sinh_retval = alloca <4 x float>
  %assignment_tmp27 = alloca <4 x float>
  %atan_retval = alloca <4 x float>
  %assignment_tmp23 = alloca <4 x float>
  %acos_retval = alloca <4 x float>
  %assignment_tmp19 = alloca <4 x float>
  %asin_retval = alloca <4 x float>
  %assignment_tmp15 = alloca <4 x float>
  %tan_retval = alloca <4 x float>
  %assignment_tmp11 = alloca <4 x float>
  %cos_retval = alloca <4 x float>
  %assignment_tmp7 = alloca <4 x float>
  %sin_retval = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %degrees_retval = alloca <4 x float>
  %radians_retval = alloca <4 x float>
  %v = alloca <4 x float>
  %f = alloca float
  %b = alloca i1
  %i = alloca i32
  %0 = load <4 x float> addrspace(1)* @uv4
  %radians_retval1 = call <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float> %0)
  store <4 x float> %radians_retval1, <4 x float>* %radians_retval
  %v2 = load <4 x float>* %radians_retval
  store <4 x float> %v2, <4 x float>* %v
  %1 = load <4 x float>* %radians_retval
  %degrees_retval3 = call <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float> %1)
  store <4 x float> %degrees_retval3, <4 x float>* %degrees_retval
  %2 = load <4 x float>* %v
  %3 = load <4 x float>* %degrees_retval
  %assignment_tmp4 = fadd <4 x float> %2, %3
  store <4 x float> %assignment_tmp4, <4 x float>* %assignment_tmp
  %v5 = load <4 x float>* %assignment_tmp
  store <4 x float> %v5, <4 x float>* %v
  %4 = load <4 x float>* %assignment_tmp
  %sin_retval6 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %4)
  store <4 x float> %sin_retval6, <4 x float>* %sin_retval
  %5 = load <4 x float>* %v
  %6 = load <4 x float>* %sin_retval
  %assignment_tmp78 = fadd <4 x float> %5, %6
  store <4 x float> %assignment_tmp78, <4 x float>* %assignment_tmp7
  %v9 = load <4 x float>* %assignment_tmp7
  store <4 x float> %v9, <4 x float>* %v
  %7 = load <4 x float>* %assignment_tmp7
  %cos_retval10 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %7)
  store <4 x float> %cos_retval10, <4 x float>* %cos_retval
  %8 = load <4 x float>* %v
  %9 = load <4 x float>* %cos_retval
  %assignment_tmp1112 = fadd <4 x float> %8, %9
  store <4 x float> %assignment_tmp1112, <4 x float>* %assignment_tmp11
  %v13 = load <4 x float>* %assignment_tmp11
  store <4 x float> %v13, <4 x float>* %v
  %10 = load <4 x float>* %assignment_tmp11
  %tan_retval14 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %10)
  store <4 x float> %tan_retval14, <4 x float>* %tan_retval
  %11 = load <4 x float>* %v
  %12 = load <4 x float>* %tan_retval
  %assignment_tmp1516 = fadd <4 x float> %11, %12
  store <4 x float> %assignment_tmp1516, <4 x float>* %assignment_tmp15
  %v17 = load <4 x float>* %assignment_tmp15
  store <4 x float> %v17, <4 x float>* %v
  %13 = load <4 x float>* %assignment_tmp15
  %asin_retval18 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %13)
  store <4 x float> %asin_retval18, <4 x float>* %asin_retval
  %14 = load <4 x float>* %v
  %15 = load <4 x float>* %asin_retval
  %assignment_tmp1920 = fadd <4 x float> %14, %15
  store <4 x float> %assignment_tmp1920, <4 x float>* %assignment_tmp19
  %v21 = load <4 x float>* %assignment_tmp19
  store <4 x float> %v21, <4 x float>* %v
  %16 = load <4 x float>* %assignment_tmp19
  %acos_retval22 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %16)
  store <4 x float> %acos_retval22, <4 x float>* %acos_retval
  %17 = load <4 x float>* %v
  %18 = load <4 x float>* %acos_retval
  %assignment_tmp2324 = fadd <4 x float> %17, %18
  store <4 x float> %assignment_tmp2324, <4 x float>* %assignment_tmp23
  %v25 = load <4 x float>* %assignment_tmp23
  store <4 x float> %v25, <4 x float>* %v
  %19 = load <4 x float>* %assignment_tmp23
  %atan_retval26 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %19)
  store <4 x float> %atan_retval26, <4 x float>* %atan_retval
  %20 = load <4 x float>* %v
  %21 = load <4 x float>* %atan_retval
  %assignment_tmp2728 = fadd <4 x float> %20, %21
  store <4 x float> %assignment_tmp2728, <4 x float>* %assignment_tmp27
  %v29 = load <4 x float>* %assignment_tmp27
  store <4 x float> %v29, <4 x float>* %v
  %22 = load <4 x float>* %assignment_tmp27
  %sinh_retval30 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %22)
  store <4 x float> %sinh_retval30, <4 x float>* %sinh_retval
  %23 = load <4 x float>* %v
  %24 = load <4 x float>* %sinh_retval
  %assignment_tmp3132 = fadd <4 x float> %23, %24
  store <4 x float> %assignment_tmp3132, <4 x float>* %assignment_tmp31
  %v33 = load <4 x float>* %assignment_tmp31
  store <4 x float> %v33, <4 x float>* %v
  %25 = load <4 x float>* %assignment_tmp31
  %cosh_retval34 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %25)
  store <4 x float> %cosh_retval34, <4 x float>* %cosh_retval
  %26 = load <4 x float>* %v
  %27 = load <4 x float>* %cosh_retval
  %assignment_tmp3536 = fadd <4 x float> %26, %27
  store <4 x float> %assignment_tmp3536, <4 x float>* %assignment_tmp35
  %v37 = load <4 x float>* %assignment_tmp35
  store <4 x float> %v37, <4 x float>* %v
  %28 = load <4 x float>* %assignment_tmp35
  %tanh_retval38 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %28)
  store <4 x float> %tanh_retval38, <4 x float>* %tanh_retval
  %29 = load <4 x float>* %v
  %30 = load <4 x float>* %tanh_retval
  %assignment_tmp3940 = fadd <4 x float> %29, %30
  store <4 x float> %assignment_tmp3940, <4 x float>* %assignment_tmp39
  %v41 = load <4 x float>* %assignment_tmp39
  store <4 x float> %v41, <4 x float>* %v
  %31 = load <4 x float>* %assignment_tmp39
  %32 = load <4 x float>* %assignment_tmp39
  %pow_retval42 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %31, <4 x float> %32)
  store <4 x float> %pow_retval42, <4 x float>* %pow_retval
  %33 = load <4 x float>* %v
  %34 = load <4 x float>* %pow_retval
  %assignment_tmp4344 = fadd <4 x float> %33, %34
  store <4 x float> %assignment_tmp4344, <4 x float>* %assignment_tmp43
  %v45 = load <4 x float>* %assignment_tmp43
  store <4 x float> %v45, <4 x float>* %v
  %35 = load <4 x float>* %assignment_tmp43
  %exp_retval46 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %35)
  store <4 x float> %exp_retval46, <4 x float>* %exp_retval
  %36 = load <4 x float>* %v
  %37 = load <4 x float>* %exp_retval
  %assignment_tmp4748 = fadd <4 x float> %36, %37
  store <4 x float> %assignment_tmp4748, <4 x float>* %assignment_tmp47
  %v49 = load <4 x float>* %assignment_tmp47
  store <4 x float> %v49, <4 x float>* %v
  %38 = load <4 x float>* %assignment_tmp47
  %log_retval50 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %38)
  store <4 x float> %log_retval50, <4 x float>* %log_retval
  %39 = load <4 x float>* %v
  %40 = load <4 x float>* %log_retval
  %assignment_tmp5152 = fadd <4 x float> %39, %40
  store <4 x float> %assignment_tmp5152, <4 x float>* %assignment_tmp51
  %v53 = load <4 x float>* %assignment_tmp51
  store <4 x float> %v53, <4 x float>* %v
  %41 = load <4 x float>* %assignment_tmp51
  %exp2_retval54 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %41)
  store <4 x float> %exp2_retval54, <4 x float>* %exp2_retval
  %42 = load <4 x float>* %v
  %43 = load <4 x float>* %exp2_retval
  %assignment_tmp5556 = fadd <4 x float> %42, %43
  store <4 x float> %assignment_tmp5556, <4 x float>* %assignment_tmp55
  %v57 = load <4 x float>* %assignment_tmp55
  store <4 x float> %v57, <4 x float>* %v
  %44 = load <4 x float>* %assignment_tmp55
  %log2_retval58 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %44)
  store <4 x float> %log2_retval58, <4 x float>* %log2_retval
  %45 = load <4 x float>* %v
  %46 = load <4 x float>* %log2_retval
  %assignment_tmp5960 = fadd <4 x float> %45, %46
  store <4 x float> %assignment_tmp5960, <4 x float>* %assignment_tmp59
  %v61 = load <4 x float>* %assignment_tmp59
  store <4 x float> %v61, <4 x float>* %v
  %47 = load <4 x float>* %assignment_tmp59
  %sqrt_retval62 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %47)
  store <4 x float> %sqrt_retval62, <4 x float>* %sqrt_retval
  %48 = load <4 x float>* %v
  %49 = load <4 x float>* %sqrt_retval
  %assignment_tmp6364 = fadd <4 x float> %48, %49
  store <4 x float> %assignment_tmp6364, <4 x float>* %assignment_tmp63
  %v65 = load <4 x float>* %assignment_tmp63
  store <4 x float> %v65, <4 x float>* %v
  %50 = load <4 x float>* %assignment_tmp63
  %inversesqrt_retval66 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %50)
  store <4 x float> %inversesqrt_retval66, <4 x float>* %inversesqrt_retval
  %51 = load <4 x float>* %v
  %52 = load <4 x float>* %inversesqrt_retval
  %assignment_tmp6768 = fadd <4 x float> %51, %52
  store <4 x float> %assignment_tmp6768, <4 x float>* %assignment_tmp67
  %v69 = load <4 x float>* %assignment_tmp67
  store <4 x float> %v69, <4 x float>* %v
  %53 = load <4 x float>* %assignment_tmp67
  %abs_retval70 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %53)
  store <4 x float> %abs_retval70, <4 x float>* %abs_retval
  %54 = load <4 x float>* %v
  %55 = load <4 x float>* %abs_retval
  %assignment_tmp7172 = fadd <4 x float> %54, %55
  store <4 x float> %assignment_tmp7172, <4 x float>* %assignment_tmp71
  %v73 = load <4 x float>* %assignment_tmp71
  store <4 x float> %v73, <4 x float>* %v
  %56 = load <4 x float>* %assignment_tmp71
  %sign_retval74 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %56)
  store <4 x float> %sign_retval74, <4 x float>* %sign_retval
  %57 = load <4 x float>* %v
  %58 = load <4 x float>* %sign_retval
  %assignment_tmp7576 = fadd <4 x float> %57, %58
  store <4 x float> %assignment_tmp7576, <4 x float>* %assignment_tmp75
  %v77 = load <4 x float>* %assignment_tmp75
  store <4 x float> %v77, <4 x float>* %v
  %59 = load <4 x float>* %assignment_tmp75
  %floor_retval78 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %59)
  store <4 x float> %floor_retval78, <4 x float>* %floor_retval
  %60 = load <4 x float>* %v
  %61 = load <4 x float>* %floor_retval
  %assignment_tmp7980 = fadd <4 x float> %60, %61
  store <4 x float> %assignment_tmp7980, <4 x float>* %assignment_tmp79
  %v81 = load <4 x float>* %assignment_tmp79
  store <4 x float> %v81, <4 x float>* %v
  %62 = load <4 x float>* %assignment_tmp79
  %ceil_retval82 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %62)
  store <4 x float> %ceil_retval82, <4 x float>* %ceil_retval
  %63 = load <4 x float>* %v
  %64 = load <4 x float>* %ceil_retval
  %assignment_tmp8384 = fadd <4 x float> %63, %64
  store <4 x float> %assignment_tmp8384, <4 x float>* %assignment_tmp83
  %v85 = load <4 x float>* %assignment_tmp83
  store <4 x float> %v85, <4 x float>* %v
  %65 = load <4 x float>* %assignment_tmp83
  %fract_retval86 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %65)
  store <4 x float> %fract_retval86, <4 x float>* %fract_retval
  %66 = load <4 x float>* %v
  %67 = load <4 x float>* %fract_retval
  %assignment_tmp8788 = fadd <4 x float> %66, %67
  store <4 x float> %assignment_tmp8788, <4 x float>* %assignment_tmp87
  %v89 = load <4 x float>* %assignment_tmp87
  store <4 x float> %v89, <4 x float>* %v
  %68 = load <4 x float>* %assignment_tmp87
  %69 = load <4 x float>* %assignment_tmp87
  %mod_retval90 = frem <4 x float> %68, %69
  store <4 x float> %mod_retval90, <4 x float>* %mod_retval
  %70 = load <4 x float>* %v
  %71 = load <4 x float>* %mod_retval
  %assignment_tmp9192 = fadd <4 x float> %70, %71
  store <4 x float> %assignment_tmp9192, <4 x float>* %assignment_tmp91
  %v93 = load <4 x float>* %assignment_tmp91
  store <4 x float> %v93, <4 x float>* %v
  %72 = load <4 x float>* %assignment_tmp91
  %73 = load <4 x float>* %assignment_tmp91
  %74 = extractelement <4 x float> %73, i32 0
  %75 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %74, i32 0)
  %mod_retval9495 = frem <4 x float> %72, %75
  store <4 x float> %mod_retval9495, <4 x float>* %mod_retval94
  %76 = load <4 x float>* %v
  %77 = load <4 x float>* %mod_retval94
  %assignment_tmp9697 = fadd <4 x float> %76, %77
  store <4 x float> %assignment_tmp9697, <4 x float>* %assignment_tmp96
  %v98 = load <4 x float>* %assignment_tmp96
  store <4 x float> %v98, <4 x float>* %v
  %78 = load <4 x float>* %assignment_tmp96
  %79 = load <4 x float> addrspace(1)* @uv4
  %min_retval99 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %78, <4 x float> %79)
  store <4 x float> %min_retval99, <4 x float>* %min_retval
  %80 = load <4 x float>* %v
  %81 = load <4 x float>* %min_retval
  %assignment_tmp100101 = fadd <4 x float> %80, %81
  store <4 x float> %assignment_tmp100101, <4 x float>* %assignment_tmp100
  %v102 = load <4 x float>* %assignment_tmp100
  store <4 x float> %v102, <4 x float>* %v
  %82 = load <4 x float>* %assignment_tmp100
  %83 = load <4 x float> addrspace(1)* @uv4
  %max_retval103 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %82, <4 x float> %83)
  store <4 x float> %max_retval103, <4 x float>* %max_retval
  %84 = load <4 x float>* %v
  %85 = load <4 x float>* %max_retval
  %assignment_tmp104105 = fadd <4 x float> %84, %85
  store <4 x float> %assignment_tmp104105, <4 x float>* %assignment_tmp104
  %v106 = load <4 x float>* %assignment_tmp104
  store <4 x float> %v106, <4 x float>* %v
  %86 = load <4 x float>* %assignment_tmp104
  %87 = load <4 x float> addrspace(1)* @uv4
  %88 = load <4 x float> addrspace(1)* @uv4
  %clamp_retval107 = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %86, <4 x float> %87, <4 x float> %88)
  store <4 x float> %clamp_retval107, <4 x float>* %clamp_retval
  %89 = load <4 x float>* %v
  %90 = load <4 x float>* %clamp_retval
  %assignment_tmp108109 = fadd <4 x float> %89, %90
  store <4 x float> %assignment_tmp108109, <4 x float>* %assignment_tmp108
  %v110 = load <4 x float>* %assignment_tmp108
  store <4 x float> %v110, <4 x float>* %v
  %91 = load <4 x float>* %assignment_tmp108
  %92 = load <4 x float>* %assignment_tmp108
  %93 = load <4 x float>* %assignment_tmp108
  %mix_retval111 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %91, <4 x float> %92, <4 x float> %93)
  store <4 x float> %mix_retval111, <4 x float>* %mix_retval
  %94 = load <4 x float>* %v
  %95 = load <4 x float>* %mix_retval
  %assignment_tmp112113 = fadd <4 x float> %94, %95
  store <4 x float> %assignment_tmp112113, <4 x float>* %assignment_tmp112
  %v114 = load <4 x float>* %assignment_tmp112
  store <4 x float> %v114, <4 x float>* %v
  %96 = load <4 x float>* %assignment_tmp112
  %97 = load <4 x float>* %assignment_tmp112
  %98 = load i1 addrspace(1)* @ub
  %99 = uitofp i1 %98 to float
  %mix_retval115116 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %96, <4 x float> %97, float %99)
  store <4 x float> %mix_retval115116, <4 x float>* %mix_retval115
  %100 = load <4 x float>* %v
  %101 = load <4 x float>* %mix_retval115
  %assignment_tmp117118 = fadd <4 x float> %100, %101
  store <4 x float> %assignment_tmp117118, <4 x float>* %assignment_tmp117
  %v119 = load <4 x float>* %assignment_tmp117
  store <4 x float> %v119, <4 x float>* %v
  %102 = load <4 x float>* %assignment_tmp117
  %103 = load <4 x float>* %assignment_tmp117
  %step_retval120 = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %102, <4 x float> %103)
  store <4 x float> %step_retval120, <4 x float>* %step_retval
  %104 = load <4 x float>* %v
  %105 = load <4 x float>* %step_retval
  %assignment_tmp121122 = fadd <4 x float> %104, %105
  store <4 x float> %assignment_tmp121122, <4 x float>* %assignment_tmp121
  %v123 = load <4 x float>* %assignment_tmp121
  store <4 x float> %v123, <4 x float>* %v
  %106 = load <4 x float>* %assignment_tmp121
  %107 = load <4 x float>* %assignment_tmp121
  %108 = load <4 x float>* %assignment_tmp121
  %smoothstep_retval124 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %106, <4 x float> %107, <4 x float> %108)
  store <4 x float> %smoothstep_retval124, <4 x float>* %smoothstep_retval
  %109 = load <4 x float>* %v
  %110 = load <4 x float>* %smoothstep_retval
  %assignment_tmp125126 = fadd <4 x float> %109, %110
  store <4 x float> %assignment_tmp125126, <4 x float>* %assignment_tmp125
  %v127 = load <4 x float>* %assignment_tmp125
  store <4 x float> %v127, <4 x float>* %v
  %111 = load <4 x float>* %assignment_tmp125
  %normalize_retval128 = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %111)
  store <4 x float> %normalize_retval128, <4 x float>* %normalize_retval
  %112 = load <4 x float>* %v
  %113 = load <4 x float>* %normalize_retval
  %assignment_tmp129130 = fadd <4 x float> %112, %113
  store <4 x float> %assignment_tmp129130, <4 x float>* %assignment_tmp129
  %v131 = load <4 x float>* %assignment_tmp129
  store <4 x float> %v131, <4 x float>* %v
  %114 = load <4 x float>* %assignment_tmp129
  %115 = load <4 x float>* %assignment_tmp129
  %116 = load <4 x float>* %assignment_tmp129
  %faceforward_retval132 = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %114, <4 x float> %115, <4 x float> %116)
  store <4 x float> %faceforward_retval132, <4 x float>* %faceforward_retval
  %117 = load <4 x float>* %v
  %118 = load <4 x float>* %faceforward_retval
  %assignment_tmp133134 = fadd <4 x float> %117, %118
  store <4 x float> %assignment_tmp133134, <4 x float>* %assignment_tmp133
  %v135 = load <4 x float>* %assignment_tmp133
  store <4 x float> %v135, <4 x float>* %v
  %119 = load <4 x float>* %assignment_tmp133
  %120 = load <4 x float>* %assignment_tmp133
  %reflect_retval136 = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %119, <4 x float> %120)
  store <4 x float> %reflect_retval136, <4 x float>* %reflect_retval
  %121 = load <4 x float>* %v
  %122 = load <4 x float>* %reflect_retval
  %assignment_tmp137138 = fadd <4 x float> %121, %122
  store <4 x float> %assignment_tmp137138, <4 x float>* %assignment_tmp137
  %v139 = load <4 x float>* %assignment_tmp137
  store <4 x float> %v139, <4 x float>* %v
  %123 = load <4 x float>* %assignment_tmp137
  %124 = load <4 x float>* %assignment_tmp137
  %125 = load float addrspace(1)* @uf
  %refract_retval140 = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %123, <4 x float> %124, float %125)
  store <4 x float> %refract_retval140, <4 x float>* %refract_retval
  %126 = load <4 x float>* %v
  %127 = load <4 x float>* %refract_retval
  %assignment_tmp141142 = fadd <4 x float> %126, %127
  store <4 x float> %assignment_tmp141142, <4 x float>* %assignment_tmp141
  %v143 = load <4 x float>* %assignment_tmp141
  store <4 x float> %v143, <4 x float>* %v
  %128 = load <4 x float>* %assignment_tmp141
  %dFdx_retval144 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %128)
  store <4 x float> %dFdx_retval144, <4 x float>* %dFdx_retval
  %129 = load <4 x float>* %v
  %130 = load <4 x float>* %dFdx_retval
  %assignment_tmp145146 = fadd <4 x float> %129, %130
  store <4 x float> %assignment_tmp145146, <4 x float>* %assignment_tmp145
  %v147 = load <4 x float>* %assignment_tmp145
  store <4 x float> %v147, <4 x float>* %v
  %131 = load <4 x float>* %assignment_tmp145
  %dFdy_retval148 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %131)
  store <4 x float> %dFdy_retval148, <4 x float>* %dFdy_retval
  %132 = load <4 x float>* %v
  %133 = load <4 x float>* %dFdy_retval
  %assignment_tmp149150 = fadd <4 x float> %132, %133
  store <4 x float> %assignment_tmp149150, <4 x float>* %assignment_tmp149
  %v151 = load <4 x float>* %assignment_tmp149
  store <4 x float> %v151, <4 x float>* %v
  %134 = load <4 x float>* %assignment_tmp149
  %fwidth_retval152 = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %134)
  store <4 x float> %fwidth_retval152, <4 x float>* %fwidth_retval
  %135 = load <4 x float>* %v
  %136 = load <4 x float>* %fwidth_retval
  %v153 = fadd <4 x float> %135, %136
  store <4 x float> %v153, <4 x float>* %v
  store i32 0, i32* %i
  %137 = load i32 addrspace(1)* @ui
  %abs_retval154155 = call i32 @llvm.gla.abs.i32.i32(i32 %137)
  store i32 %abs_retval154155, i32* %abs_retval154
  %138 = load i32* %i
  %139 = load i32* %abs_retval154
  %assignment_tmp156157 = add i32 %138, %139
  store i32 %assignment_tmp156157, i32* %assignment_tmp156
  %i158 = load i32* %assignment_tmp156
  store i32 %i158, i32* %i
  %140 = load i32* %assignment_tmp156
  %141 = load i32 addrspace(1)* @ui
  %min_retval159160 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %140, i32 %141)
  store i32 %min_retval159160, i32* %min_retval159
  %142 = load i32* %i
  %143 = load i32* %min_retval159
  %assignment_tmp161162 = add i32 %142, %143
  store i32 %assignment_tmp161162, i32* %assignment_tmp161
  %i163 = load i32* %assignment_tmp161
  store i32 %i163, i32* %i
  %144 = load i32* %assignment_tmp161
  %145 = load i32 addrspace(1)* @ui
  %max_retval164165 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %144, i32 %145)
  store i32 %max_retval164165, i32* %max_retval164
  %146 = load i32* %i
  %147 = load i32* %max_retval164
  %assignment_tmp166167 = add i32 %146, %147
  store i32 %assignment_tmp166167, i32* %assignment_tmp166
  %i168 = load i32* %assignment_tmp166
  store i32 %i168, i32* %i
  %148 = load i32* %assignment_tmp166
  %149 = load i32 addrspace(1)* @ui
  %150 = load i32 addrspace(1)* @ui
  %clamp_retval169170 = call i32 @llvm.gla.sClamp.i32.i32.i32.i32(i32 %148, i32 %149, i32 %150)
  store i32 %clamp_retval169170, i32* %clamp_retval169
  %151 = load i32* %i
  %152 = load i32* %clamp_retval169
  %i171 = add i32 %151, %152
  store i32 %i171, i32* %i
  %153 = load <4 x float>* %v
  %154 = load <4 x float>* %v
  %lessThan_retval172 = fcmp olt <4 x float> %153, %154
  store <4 x i1> %lessThan_retval172, <4 x i1>* %lessThan_retval
  %155 = load <4 x i1>* %lessThan_retval
  %any_retval173 = call i1 @llvm.gla.any.v4i1(<4 x i1> %155)
  store i1 %any_retval173, i1* %any_retval
  %b174 = load i1* %any_retval
  store i1 %b174, i1* %b
  %156 = load i1* %any_retval
  br i1 %156, label %then, label %else

then:                                             ; preds = %entry
  %157 = load <4 x float>* %v
  %158 = load <4 x float>* %v
  %lessThanEqual_retval175 = fcmp ole <4 x float> %157, %158
  store <4 x i1> %lessThanEqual_retval175, <4 x i1>* %lessThanEqual_retval
  %159 = load <4 x i1>* %lessThanEqual_retval
  %any_retval176177 = call i1 @llvm.gla.any.v4i1(<4 x i1> %159)
  store i1 %any_retval176177, i1* %any_retval176
  %and_tmp178 = load i1* %any_retval176
  store i1 %and_tmp178, i1* %and_tmp
  br label %ifmerge

else:                                             ; preds = %entry
  store i1 false, i1* %and_tmp
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %b179 = load i1* %and_tmp
  store i1 %b179, i1* %b
  %160 = load i1* %and_tmp
  br i1 %160, label %then181, label %else186

then181:                                          ; preds = %ifmerge
  %161 = load <4 x float>* %v
  %162 = load <4 x float>* %v
  %greaterThan_retval182 = fcmp ogt <4 x float> %161, %162
  store <4 x i1> %greaterThan_retval182, <4 x i1>* %greaterThan_retval
  %163 = load <4 x i1>* %greaterThan_retval
  %any_retval183184 = call i1 @llvm.gla.any.v4i1(<4 x i1> %163)
  store i1 %any_retval183184, i1* %any_retval183
  %and_tmp180185 = load i1* %any_retval183
  store i1 %and_tmp180185, i1* %and_tmp180
  br label %ifmerge187

else186:                                          ; preds = %ifmerge
  store i1 false, i1* %and_tmp180
  br label %ifmerge187

ifmerge187:                                       ; preds = %else186, %then181
  %b188 = load i1* %and_tmp180
  store i1 %b188, i1* %b
  %164 = load i1* %and_tmp180
  br i1 %164, label %then190, label %else195

then190:                                          ; preds = %ifmerge187
  %165 = load <4 x float>* %v
  %166 = load <4 x float>* %v
  %greaterThanEqual_retval191 = fcmp oge <4 x float> %165, %166
  store <4 x i1> %greaterThanEqual_retval191, <4 x i1>* %greaterThanEqual_retval
  %167 = load <4 x i1>* %greaterThanEqual_retval
  %any_retval192193 = call i1 @llvm.gla.any.v4i1(<4 x i1> %167)
  store i1 %any_retval192193, i1* %any_retval192
  %and_tmp189194 = load i1* %any_retval192
  store i1 %and_tmp189194, i1* %and_tmp189
  br label %ifmerge196

else195:                                          ; preds = %ifmerge187
  store i1 false, i1* %and_tmp189
  br label %ifmerge196

ifmerge196:                                       ; preds = %else195, %then190
  %b197 = load i1* %and_tmp189
  store i1 %b197, i1* %b
  %168 = load i1* %and_tmp189
  br i1 %168, label %then199, label %else204

then199:                                          ; preds = %ifmerge196
  %169 = load <4 x i1> addrspace(1)* @ub41
  %170 = load <4 x i1> addrspace(1)* @ub42
  %equal_retval200 = icmp eq <4 x i1> %169, %170
  store <4 x i1> %equal_retval200, <4 x i1>* %equal_retval
  %171 = load <4 x i1>* %equal_retval
  %any_retval201202 = call i1 @llvm.gla.any.v4i1(<4 x i1> %171)
  store i1 %any_retval201202, i1* %any_retval201
  %and_tmp198203 = load i1* %any_retval201
  store i1 %and_tmp198203, i1* %and_tmp198
  br label %ifmerge205

else204:                                          ; preds = %ifmerge196
  store i1 false, i1* %and_tmp198
  br label %ifmerge205

ifmerge205:                                       ; preds = %else204, %then199
  %b206 = load i1* %and_tmp198
  store i1 %b206, i1* %b
  %172 = load i1* %and_tmp198
  br i1 %172, label %then208, label %else213

then208:                                          ; preds = %ifmerge205
  %173 = load <4 x i1> addrspace(1)* @ub41
  %174 = load <4 x i1> addrspace(1)* @ub42
  %notEqual_retval209 = icmp ne <4 x i1> %173, %174
  store <4 x i1> %notEqual_retval209, <4 x i1>* %notEqual_retval
  %175 = load <4 x i1>* %notEqual_retval
  %any_retval210211 = call i1 @llvm.gla.any.v4i1(<4 x i1> %175)
  store i1 %any_retval210211, i1* %any_retval210
  %and_tmp207212 = load i1* %any_retval210
  store i1 %and_tmp207212, i1* %and_tmp207
  br label %ifmerge214

else213:                                          ; preds = %ifmerge205
  store i1 false, i1* %and_tmp207
  br label %ifmerge214

ifmerge214:                                       ; preds = %else213, %then208
  %b215 = load i1* %and_tmp207
  store i1 %b215, i1* %b
  %176 = load i1* %and_tmp207
  br i1 %176, label %then217, label %else221

then217:                                          ; preds = %ifmerge214
  %177 = load <4 x i1> addrspace(1)* @ub41
  %any_retval218219 = call i1 @llvm.gla.any.v4i1(<4 x i1> %177)
  store i1 %any_retval218219, i1* %any_retval218
  %and_tmp216220 = load i1* %any_retval218
  store i1 %and_tmp216220, i1* %and_tmp216
  br label %ifmerge222

else221:                                          ; preds = %ifmerge214
  store i1 false, i1* %and_tmp216
  br label %ifmerge222

ifmerge222:                                       ; preds = %else221, %then217
  %b223 = load i1* %and_tmp216
  store i1 %b223, i1* %b
  %178 = load i1* %and_tmp216
  br i1 %178, label %then225, label %else228

then225:                                          ; preds = %ifmerge222
  %179 = load <4 x i1> addrspace(1)* @ub41
  %all_retval226 = call i1 @llvm.gla.all.v4i1(<4 x i1> %179)
  store i1 %all_retval226, i1* %all_retval
  %and_tmp224227 = load i1* %all_retval
  store i1 %and_tmp224227, i1* %and_tmp224
  br label %ifmerge229

else228:                                          ; preds = %ifmerge222
  store i1 false, i1* %and_tmp224
  br label %ifmerge229

ifmerge229:                                       ; preds = %else228, %then225
  %b230 = load i1* %and_tmp224
  store i1 %b230, i1* %b
  %180 = load i1* %and_tmp224
  br i1 %180, label %then232, label %else237

then232:                                          ; preds = %ifmerge229
  %181 = load <4 x i1> addrspace(1)* @ub41
  %not_retval233 = xor <4 x i1> %181, <i1 true, i1 true, i1 true, i1 true>
  store <4 x i1> %not_retval233, <4 x i1>* %not_retval
  %182 = load <4 x i1>* %not_retval
  %any_retval234235 = call i1 @llvm.gla.any.v4i1(<4 x i1> %182)
  store i1 %any_retval234235, i1* %any_retval234
  %and_tmp231236 = load i1* %any_retval234
  store i1 %and_tmp231236, i1* %and_tmp231
  br label %ifmerge238

else237:                                          ; preds = %ifmerge229
  store i1 false, i1* %and_tmp231
  br label %ifmerge238

ifmerge238:                                       ; preds = %else237, %then232
  %b239 = load i1* %and_tmp231
  store i1 %b239, i1* %b
  %183 = load i32* %i
  %184 = load i32 addrspace(1)* @ui
  %185 = add i32 %183, %184
  %186 = load i32* %i
  %187 = mul i32 %185, %186
  %188 = load i32 addrspace(1)* @ui
  %189 = sub i32 %187, %188
  %190 = load i32* %i
  %191 = sdiv i32 %189, %190
  %192 = load i32 addrspace(1)* @ui
  %assignment_tmp240241 = srem i32 %191, %192
  store i32 %assignment_tmp240241, i32* %assignment_tmp240
  %i242 = load i32* %assignment_tmp240
  store i32 %i242, i32* %i
  %193 = load i32* %assignment_tmp240
  %194 = load i32 addrspace(1)* @ui
  %195 = icmp eq i32 %193, %194
  br i1 %195, label %then243, label %else244

then243:                                          ; preds = %ifmerge238
  store i1 true, i1* %or_tmp
  br label %ifmerge251

else244:                                          ; preds = %ifmerge238
  %196 = load i32* %assignment_tmp240
  %197 = load i32 addrspace(1)* @ui
  %198 = icmp ne i32 %196, %197
  br i1 %198, label %then246, label %else248

then246:                                          ; preds = %else244
  %199 = load i32* %assignment_tmp240
  %200 = load i32 addrspace(1)* @ui
  %and_tmp245247 = icmp eq i32 %199, %200
  store i1 %and_tmp245247, i1* %and_tmp245
  br label %ifmerge249

else248:                                          ; preds = %else244
  store i1 false, i1* %and_tmp245
  br label %ifmerge249

ifmerge249:                                       ; preds = %else248, %then246
  %201 = load i1* %and_tmp245
  %202 = load i32* %assignment_tmp240
  %203 = icmp ne i32 %202, 2
  %or_tmp250 = xor i1 %201, %203
  store i1 %or_tmp250, i1* %or_tmp
  br label %ifmerge251

ifmerge251:                                       ; preds = %ifmerge249, %then243
  %204 = load i1* %or_tmp
  br i1 %204, label %then252, label %ifmerge254

then252:                                          ; preds = %ifmerge251
  %205 = load i32* %assignment_tmp240
  %i253 = add i32 %205, 1
  store i32 %i253, i32* %i
  br label %ifmerge254

ifmerge254:                                       ; preds = %then252, %ifmerge251
  %206 = load float addrspace(1)* @uf
  %207 = load float addrspace(1)* @uf
  %208 = fadd float %206, %207
  %209 = load float addrspace(1)* @uf
  %210 = fmul float %208, %209
  %211 = load float addrspace(1)* @uf
  %212 = fsub float %210, %211
  %213 = load float addrspace(1)* @uf
  %f255 = fdiv float %212, %213
  store float %f255, float* %f
  %214 = load <4 x float>* %v
  %length_retval256 = call float @llvm.gla.fLength.v4f32(<4 x float> %214)
  store float %length_retval256, float* %length_retval
  %215 = load float* %f
  %216 = load float* %length_retval
  %f257 = fadd float %215, %216
  store float %f257, float* %f
  %217 = load <4 x float>* %v
  %218 = load <4 x float>* %v
  %distance_retval258 = call float @llvm.gla.fDistance.v4f32.v4f32(<4 x float> %217, <4 x float> %218)
  store float %distance_retval258, float* %distance_retval
  %219 = load float* %f
  %220 = load float* %distance_retval
  %f259 = fadd float %219, %220
  store float %f259, float* %f
  %221 = load <4 x float>* %v
  %222 = load <4 x float>* %v
  %dot_retval260 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %221, <4 x float> %222)
  store float %dot_retval260, float* %dot_retval
  %223 = load float* %f
  %224 = load float* %dot_retval
  %f261 = fadd float %223, %224
  store float %f261, float* %f
  %225 = load <4 x float>* %v
  %226 = extractelement <4 x float> %225, i32 0
  %227 = insertelement <3 x float> undef, float %226, i32 0
  %228 = extractelement <4 x float> %225, i32 1
  %229 = insertelement <3 x float> %227, float %228, i32 1
  %230 = extractelement <4 x float> %225, i32 2
  %231 = insertelement <3 x float> %229, float %230, i32 2
  %232 = load <4 x float>* %v
  %233 = extractelement <4 x float> %232, i32 0
  %234 = insertelement <3 x float> undef, float %233, i32 0
  %235 = extractelement <4 x float> %232, i32 1
  %236 = insertelement <3 x float> %234, float %235, i32 1
  %237 = extractelement <4 x float> %232, i32 2
  %238 = insertelement <3 x float> %236, float %237, i32 2
  %cross_retval262 = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %231, <3 x float> %238)
  store <3 x float> %cross_retval262, <3 x float>* %cross_retval
  %239 = load float* %f
  %240 = load <3 x float>* %cross_retval
  %241 = extractelement <3 x float> %240, i32 0
  %assignment_tmp263264 = fadd float %239, %241
  store float %assignment_tmp263264, float* %assignment_tmp263
  %f265 = load float* %assignment_tmp263
  store float %f265, float* %f
  %242 = load float* %assignment_tmp263
  %243 = load float addrspace(1)* @uf
  %244 = fcmp oeq float %242, %243
  br i1 %244, label %then267, label %else268

then267:                                          ; preds = %ifmerge254
  store i1 true, i1* %or_tmp266
  br label %ifmerge275

else268:                                          ; preds = %ifmerge254
  %245 = load float* %assignment_tmp263
  %246 = load float addrspace(1)* @uf
  %247 = fcmp one float %245, %246
  br i1 %247, label %then270, label %else272

then270:                                          ; preds = %else268
  %248 = load float* %assignment_tmp263
  %and_tmp269271 = fcmp one float %248, 2.000000e+00
  store i1 %and_tmp269271, i1* %and_tmp269
  br label %ifmerge273

else272:                                          ; preds = %else268
  store i1 false, i1* %and_tmp269
  br label %ifmerge273

ifmerge273:                                       ; preds = %else272, %then270
  %or_tmp266274 = load i1* %and_tmp269
  store i1 %or_tmp266274, i1* %or_tmp266
  br label %ifmerge275

ifmerge275:                                       ; preds = %ifmerge273, %then267
  %249 = load i1* %or_tmp266
  br i1 %249, label %then276, label %ifmerge278

then276:                                          ; preds = %ifmerge275
  %250 = load float* %assignment_tmp263
  %f277 = fadd float %250, 1.000000e+00
  store float %f277, float* %f
  br label %ifmerge278

ifmerge278:                                       ; preds = %then276, %ifmerge275
  %251 = load i32* %i
  %252 = load i32 addrspace(1)* @ui
  %253 = and i32 %251, %252
  %254 = or i32 %253, 66
  %255 = load i32 addrspace(1)* @ui
  %256 = xor i32 %254, %255
  %257 = srem i32 %256, 17
  %258 = lshr i32 %257, 2
  %259 = load i32 addrspace(1)* @ui
  %260 = shl i32 %258, %259
  %assignment_tmp279280 = xor i32 %260, -1
  store i32 %assignment_tmp279280, i32* %assignment_tmp279
  %i281 = load i32* %assignment_tmp279
  store i32 %i281, i32* %i
  %261 = load i1* %b
  %assignment_tmp282283 = xor i1 %261, true
  store i1 %assignment_tmp282283, i1* %assignment_tmp282
  %b284 = load i1* %assignment_tmp282
  store i1 %b284, i1* %b
  %262 = load i1* %assignment_tmp282
  br i1 %262, label %then285, label %else287

then285:                                          ; preds = %ifmerge278
  %263 = load i32* %assignment_tmp279
  %264 = sitofp i32 %263 to float
  %265 = insertelement <4 x float> undef, float %264, i32 0
  %266 = insertelement <4 x float> %265, float %264, i32 1
  %267 = insertelement <4 x float> %266, float %264, i32 2
  %268 = insertelement <4 x float> %267, float %264, i32 3
  %269 = load float* %f
  %270 = insertelement <4 x float> undef, float %269, i32 0
  %271 = insertelement <4 x float> %270, float %269, i32 1
  %272 = insertelement <4 x float> %271, float %269, i32 2
  %273 = insertelement <4 x float> %272, float %269, i32 3
  %274 = fadd <4 x float> %268, %273
  %275 = load <4 x float>* %v
  %conditional_tmp286 = fadd <4 x float> %274, %275
  store <4 x float> %conditional_tmp286, <4 x float>* %conditional_tmp
  br label %ifmerge289

else287:                                          ; preds = %ifmerge278
  %conditional_tmp288 = load <4 x float>* %v
  store <4 x float> %conditional_tmp288, <4 x float>* %conditional_tmp
  br label %ifmerge289

ifmerge289:                                       ; preds = %else287, %then285
  %gl_FragColor = load <4 x float>* %conditional_tmp
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %276 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %276)
  ret void
}

declare <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sClamp.i32.i32.i32.i32(i32, i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare float @llvm.gla.fLength.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fDistance.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fDot.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@gl_MaxLights = internal constant i32 8
@gl_MaxClipPlanes = internal constant i32 8
@gl_MaxTextureUnits = internal constant i32 2
@gl_MaxTextureCoords = internal constant i32 4
@gl_MaxVertexAttribs = internal constant i32 16
@gl_MaxVertexUniformComponents = internal constant i32 512
@gl_MaxVaryingFloats = internal constant i32 32
@gl_MaxVertexTextureImageUnits = internal constant i32 0
@gl_MaxCombinedTextureImageUnits = internal constant i32 2
@gl_MaxTextureImageUnits = internal constant i32 2
@gl_MaxFragmentUniformComponents = internal constant i32 64
@gl_MaxDrawBuffers = internal constant i32 2
@uv4 = external addrspace(1) constant <4 x float>
@ub = external addrspace(1) constant i1
@uf = external addrspace(1) constant float
@ui = external addrspace(1) constant i32
@ub41 = external addrspace(1) constant <4 x i1>
@ub42 = external addrspace(1) constant <4 x i1>

define void @main() {
entry:
  %0 = load <4 x float> addrspace(1)* @uv4
  %radians_retval1 = call <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float> %0)
  %degrees_retval3 = call <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float> %radians_retval1)
  %assignment_tmp4 = fadd <4 x float> %radians_retval1, %degrees_retval3
  %sin_retval6 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %assignment_tmp4)
  %assignment_tmp78 = fadd <4 x float> %assignment_tmp4, %sin_retval6
  %cos_retval10 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %assignment_tmp78)
  %assignment_tmp1112 = fadd <4 x float> %assignment_tmp78, %cos_retval10
  %tan_retval14 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %assignment_tmp1112)
  %assignment_tmp1516 = fadd <4 x float> %assignment_tmp1112, %tan_retval14
  %asin_retval18 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %assignment_tmp1516)
  %assignment_tmp1920 = fadd <4 x float> %assignment_tmp1516, %asin_retval18
  %acos_retval22 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %assignment_tmp1920)
  %assignment_tmp2324 = fadd <4 x float> %assignment_tmp1920, %acos_retval22
  %atan_retval26 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %assignment_tmp2324)
  %assignment_tmp2728 = fadd <4 x float> %assignment_tmp2324, %atan_retval26
  %sinh_retval30 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %assignment_tmp2728)
  %assignment_tmp3132 = fadd <4 x float> %assignment_tmp2728, %sinh_retval30
  %cosh_retval34 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %assignment_tmp3132)
  %assignment_tmp3536 = fadd <4 x float> %assignment_tmp3132, %cosh_retval34
  %tanh_retval38 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %assignment_tmp3536)
  %assignment_tmp3940 = fadd <4 x float> %assignment_tmp3536, %tanh_retval38
  %pow_retval42 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp3940, <4 x float> %assignment_tmp3940)
  %assignment_tmp4344 = fadd <4 x float> %assignment_tmp3940, %pow_retval42
  %exp_retval46 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %assignment_tmp4344)
  %assignment_tmp4748 = fadd <4 x float> %assignment_tmp4344, %exp_retval46
  %log_retval50 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %assignment_tmp4748)
  %assignment_tmp5152 = fadd <4 x float> %assignment_tmp4748, %log_retval50
  %exp2_retval54 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %assignment_tmp5152)
  %assignment_tmp5556 = fadd <4 x float> %assignment_tmp5152, %exp2_retval54
  %log2_retval58 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %assignment_tmp5556)
  %assignment_tmp5960 = fadd <4 x float> %assignment_tmp5556, %log2_retval58
  %sqrt_retval62 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %assignment_tmp5960)
  %assignment_tmp6364 = fadd <4 x float> %assignment_tmp5960, %sqrt_retval62
  %inversesqrt_retval66 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %assignment_tmp6364)
  %assignment_tmp6768 = fadd <4 x float> %assignment_tmp6364, %inversesqrt_retval66
  %abs_retval70 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %assignment_tmp6768)
  %assignment_tmp7172 = fadd <4 x float> %assignment_tmp6768, %abs_retval70
  %sign_retval74 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %assignment_tmp7172)
  %assignment_tmp7576 = fadd <4 x float> %assignment_tmp7172, %sign_retval74
  %floor_retval78 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %assignment_tmp7576)
  %assignment_tmp7980 = fadd <4 x float> %assignment_tmp7576, %floor_retval78
  %ceil_retval82 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %assignment_tmp7980)
  %assignment_tmp8384 = fadd <4 x float> %assignment_tmp7980, %ceil_retval82
  %fract_retval86 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %assignment_tmp8384)
  %assignment_tmp8788 = fadd <4 x float> %assignment_tmp8384, %fract_retval86
  %mod_retval90 = frem <4 x float> %assignment_tmp8788, %assignment_tmp8788
  %assignment_tmp9192 = fadd <4 x float> %assignment_tmp8788, %mod_retval90
  %1 = extractelement <4 x float> %assignment_tmp9192, i32 0
  %2 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %1, i32 0)
  %mod_retval9495 = frem <4 x float> %assignment_tmp9192, %2
  %assignment_tmp9697 = fadd <4 x float> %assignment_tmp9192, %mod_retval9495
  %min_retval99 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp9697, <4 x float> %0)
  %assignment_tmp100101 = fadd <4 x float> %assignment_tmp9697, %min_retval99
  %max_retval103 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp100101, <4 x float> %0)
  %assignment_tmp104105 = fadd <4 x float> %assignment_tmp100101, %max_retval103
  %clamp_retval107 = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp104105, <4 x float> %0, <4 x float> %0)
  %assignment_tmp108109 = fadd <4 x float> %assignment_tmp104105, %clamp_retval107
  %mix_retval111 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp108109, <4 x float> %assignment_tmp108109, <4 x float> %assignment_tmp108109)
  %assignment_tmp112113 = fadd <4 x float> %assignment_tmp108109, %mix_retval111
  %3 = load i1 addrspace(1)* @ub
  %4 = uitofp i1 %3 to float
  %mix_retval115116 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %assignment_tmp112113, <4 x float> %assignment_tmp112113, float %4)
  %assignment_tmp117118 = fadd <4 x float> %assignment_tmp112113, %mix_retval115116
  %step_retval120 = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp117118, <4 x float> %assignment_tmp117118)
  %assignment_tmp121122 = fadd <4 x float> %assignment_tmp117118, %step_retval120
  %smoothstep_retval124 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp121122, <4 x float> %assignment_tmp121122, <4 x float> %assignment_tmp121122)
  %assignment_tmp125126 = fadd <4 x float> %assignment_tmp121122, %smoothstep_retval124
  %normalize_retval128 = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %assignment_tmp125126)
  %assignment_tmp129130 = fadd <4 x float> %assignment_tmp125126, %normalize_retval128
  %faceforward_retval132 = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp129130, <4 x float> %assignment_tmp129130, <4 x float> %assignment_tmp129130)
  %assignment_tmp133134 = fadd <4 x float> %assignment_tmp129130, %faceforward_retval132
  %reflect_retval136 = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp133134, <4 x float> %assignment_tmp133134)
  %assignment_tmp137138 = fadd <4 x float> %assignment_tmp133134, %reflect_retval136
  %5 = load float addrspace(1)* @uf
  %refract_retval140 = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %assignment_tmp137138, <4 x float> %assignment_tmp137138, float %5)
  %assignment_tmp141142 = fadd <4 x float> %assignment_tmp137138, %refract_retval140
  %dFdx_retval144 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %assignment_tmp141142)
  %assignment_tmp145146 = fadd <4 x float> %assignment_tmp141142, %dFdx_retval144
  %dFdy_retval148 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %assignment_tmp145146)
  %assignment_tmp149150 = fadd <4 x float> %assignment_tmp145146, %dFdy_retval148
  %fwidth_retval152 = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %assignment_tmp149150)
  %v153 = fadd <4 x float> %assignment_tmp149150, %fwidth_retval152
  %6 = load i32 addrspace(1)* @ui
  %abs_retval154155 = call i32 @llvm.gla.abs.i32.i32(i32 %6)
  %min_retval159160 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %abs_retval154155, i32 %6)
  %assignment_tmp161162 = add i32 %min_retval159160, %abs_retval154155
  %max_retval164165 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %assignment_tmp161162, i32 %6)
  %assignment_tmp166167 = add i32 %max_retval164165, %assignment_tmp161162
  %clamp_retval169170 = call i32 @llvm.gla.sClamp.i32.i32.i32.i32(i32 %assignment_tmp166167, i32 %6, i32 %6)
  %i171 = add i32 %clamp_retval169170, %assignment_tmp166167
  %lessThan_retval172 = fcmp olt <4 x float> %v153, %v153
  %any_retval173 = call i1 @llvm.gla.any.v4i1(<4 x i1> %lessThan_retval172)
  br i1 %any_retval173, label %then, label %else

then:                                             ; preds = %entry
  %lessThanEqual_retval175 = fcmp ole <4 x float> %v153, %v153
  %any_retval176177 = call i1 @llvm.gla.any.v4i1(<4 x i1> %lessThanEqual_retval175)
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %and_tmp.0 = phi i1 [ %any_retval176177, %then ], [ false, %else ]
  br i1 %and_tmp.0, label %then181, label %else186

then181:                                          ; preds = %ifmerge
  %greaterThan_retval182 = fcmp ogt <4 x float> %v153, %v153
  %any_retval183184 = call i1 @llvm.gla.any.v4i1(<4 x i1> %greaterThan_retval182)
  br label %ifmerge187

else186:                                          ; preds = %ifmerge
  br label %ifmerge187

ifmerge187:                                       ; preds = %else186, %then181
  %and_tmp180.0 = phi i1 [ %any_retval183184, %then181 ], [ false, %else186 ]
  br i1 %and_tmp180.0, label %then190, label %else195

then190:                                          ; preds = %ifmerge187
  %greaterThanEqual_retval191 = fcmp oge <4 x float> %v153, %v153
  %any_retval192193 = call i1 @llvm.gla.any.v4i1(<4 x i1> %greaterThanEqual_retval191)
  br label %ifmerge196

else195:                                          ; preds = %ifmerge187
  br label %ifmerge196

ifmerge196:                                       ; preds = %else195, %then190
  %and_tmp189.0 = phi i1 [ %any_retval192193, %then190 ], [ false, %else195 ]
  br i1 %and_tmp189.0, label %then199, label %else204

then199:                                          ; preds = %ifmerge196
  %7 = load <4 x i1> addrspace(1)* @ub41
  %8 = load <4 x i1> addrspace(1)* @ub42
  %equal_retval200 = icmp eq <4 x i1> %7, %8
  %any_retval201202 = call i1 @llvm.gla.any.v4i1(<4 x i1> %equal_retval200)
  br label %ifmerge205

else204:                                          ; preds = %ifmerge196
  br label %ifmerge205

ifmerge205:                                       ; preds = %else204, %then199
  %and_tmp198.0 = phi i1 [ %any_retval201202, %then199 ], [ false, %else204 ]
  br i1 %and_tmp198.0, label %then208, label %else213

then208:                                          ; preds = %ifmerge205
  %9 = load <4 x i1> addrspace(1)* @ub41
  %10 = load <4 x i1> addrspace(1)* @ub42
  %notEqual_retval209 = icmp ne <4 x i1> %9, %10
  %any_retval210211 = call i1 @llvm.gla.any.v4i1(<4 x i1> %notEqual_retval209)
  br label %ifmerge214

else213:                                          ; preds = %ifmerge205
  br label %ifmerge214

ifmerge214:                                       ; preds = %else213, %then208
  %and_tmp207.0 = phi i1 [ %any_retval210211, %then208 ], [ false, %else213 ]
  br i1 %and_tmp207.0, label %then217, label %else221

then217:                                          ; preds = %ifmerge214
  %11 = load <4 x i1> addrspace(1)* @ub41
  %any_retval218219 = call i1 @llvm.gla.any.v4i1(<4 x i1> %11)
  br label %ifmerge222

else221:                                          ; preds = %ifmerge214
  br label %ifmerge222

ifmerge222:                                       ; preds = %else221, %then217
  %and_tmp216.0 = phi i1 [ %any_retval218219, %then217 ], [ false, %else221 ]
  br i1 %and_tmp216.0, label %then225, label %else228

then225:                                          ; preds = %ifmerge222
  %12 = load <4 x i1> addrspace(1)* @ub41
  %all_retval226 = call i1 @llvm.gla.all.v4i1(<4 x i1> %12)
  br label %ifmerge229

else228:                                          ; preds = %ifmerge222
  br label %ifmerge229

ifmerge229:                                       ; preds = %else228, %then225
  %and_tmp224.0 = phi i1 [ %all_retval226, %then225 ], [ false, %else228 ]
  br i1 %and_tmp224.0, label %then232, label %else237

then232:                                          ; preds = %ifmerge229
  %13 = load <4 x i1> addrspace(1)* @ub41
  %not_retval233 = xor <4 x i1> %13, <i1 true, i1 true, i1 true, i1 true>
  %any_retval234235 = call i1 @llvm.gla.any.v4i1(<4 x i1> %not_retval233)
  br label %ifmerge238

else237:                                          ; preds = %ifmerge229
  br label %ifmerge238

ifmerge238:                                       ; preds = %else237, %then232
  %and_tmp231.0 = phi i1 [ %any_retval234235, %then232 ], [ false, %else237 ]
  %14 = add i32 %6, %i171
  %15 = mul i32 %14, %i171
  %16 = sub i32 %15, %6
  %17 = sdiv i32 %16, %i171
  %assignment_tmp240241 = srem i32 %17, %6
  %18 = icmp eq i32 %assignment_tmp240241, %6
  br i1 %18, label %then243, label %else244

then243:                                          ; preds = %ifmerge238
  br label %ifmerge251

else244:                                          ; preds = %ifmerge238
  %19 = icmp ne i32 %assignment_tmp240241, %6
  br i1 %19, label %then246, label %else248

then246:                                          ; preds = %else244
  br label %ifmerge249

else248:                                          ; preds = %else244
  br label %ifmerge249

ifmerge249:                                       ; preds = %else248, %then246
  %20 = icmp ne i32 %assignment_tmp240241, 2
  %or_tmp250 = xor i1 false, %20
  br label %ifmerge251

ifmerge251:                                       ; preds = %ifmerge249, %then243
  %or_tmp.0 = phi i1 [ true, %then243 ], [ %or_tmp250, %ifmerge249 ]
  br i1 %or_tmp.0, label %then252, label %ifmerge254

then252:                                          ; preds = %ifmerge251
  %i253 = add i32 %assignment_tmp240241, 1
  br label %ifmerge254

ifmerge254:                                       ; preds = %then252, %ifmerge251
  %i.0 = phi i32 [ %i253, %then252 ], [ %assignment_tmp240241, %ifmerge251 ]
  %21 = fadd float %5, %5
  %22 = fmul float %21, %5
  %23 = fsub float %22, %5
  %f255 = fdiv float %23, %5
  %length_retval256 = call float @llvm.gla.fLength.v4f32(<4 x float> %v153)
  %f257 = fadd float %f255, %length_retval256
  %distance_retval258 = call float @llvm.gla.fDistance.v4f32.v4f32(<4 x float> %v153, <4 x float> %v153)
  %f259 = fadd float %f257, %distance_retval258
  %dot_retval260 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %v153, <4 x float> %v153)
  %f261 = fadd float %f259, %dot_retval260
  %24 = call <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.v4f32.v4f32.v4f32.f32(<3 x float> undef, i32 7, <4 x float> %v153, i32 0, <4 x float> %v153, i32 1, <4 x float> %v153, i32 2, float 0.000000e+00, i32 -1)
  %cross_retval262 = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %24, <3 x float> %24)
  %25 = extractelement <3 x float> %cross_retval262, i32 0
  %assignment_tmp263264 = fadd float %f261, %25
  %26 = fcmp oeq float %assignment_tmp263264, %5
  br i1 %26, label %then267, label %else268

then267:                                          ; preds = %ifmerge254
  br label %ifmerge275

else268:                                          ; preds = %ifmerge254
  %27 = fcmp one float %assignment_tmp263264, %5
  br i1 %27, label %then270, label %else272

then270:                                          ; preds = %else268
  %and_tmp269271 = fcmp one float %assignment_tmp263264, 2.000000e+00
  br label %ifmerge273

else272:                                          ; preds = %else268
  br label %ifmerge273

ifmerge273:                                       ; preds = %else272, %then270
  %and_tmp269.0 = phi i1 [ %and_tmp269271, %then270 ], [ false, %else272 ]
  br label %ifmerge275

ifmerge275:                                       ; preds = %ifmerge273, %then267
  %or_tmp266.0 = phi i1 [ true, %then267 ], [ %and_tmp269.0, %ifmerge273 ]
  br i1 %or_tmp266.0, label %then276, label %ifmerge278

then276:                                          ; preds = %ifmerge275
  %f277 = fadd float %assignment_tmp263264, 1.000000e+00
  br label %ifmerge278

ifmerge278:                                       ; preds = %then276, %ifmerge275
  %f.0 = phi float [ %f277, %then276 ], [ %assignment_tmp263264, %ifmerge275 ]
  %28 = and i32 %6, %i.0
  %29 = or i32 %28, 66
  %30 = xor i32 %29, %6
  %31 = srem i32 %30, 17
  %32 = lshr i32 %31, 2
  %33 = shl i32 %32, %6
  %assignment_tmp279280 = xor i32 %33, -1
  %assignment_tmp282283 = xor i1 %and_tmp231.0, true
  br i1 %assignment_tmp282283, label %then285, label %else287

then285:                                          ; preds = %ifmerge278
  %34 = sitofp i32 %assignment_tmp279280 to float
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %34, i32 -1, float %34, i32 -1, float %34, i32 -1, float %34, i32 -1)
  %36 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %f.0, i32 -1, float %f.0, i32 -1, float %f.0, i32 -1, float %f.0, i32 -1)
  %37 = fadd <4 x float> %35, %36
  %conditional_tmp286 = fadd <4 x float> %37, %v153
  br label %ifmerge289

else287:                                          ; preds = %ifmerge278
  br label %ifmerge289

ifmerge289:                                       ; preds = %else287, %then285
  %conditional_tmp.0 = phi <4 x float> [ %conditional_tmp286, %then285 ], [ %v153, %else287 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %conditional_tmp.0)
  ret void
}

declare <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sClamp.i32.i32.i32.i32(i32, i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare float @llvm.gla.fLength.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fDistance.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fDot.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.v4f32.v4f32.v4f32.f32(<3 x float>, i32, <4 x float>, i32, <4 x float>, i32, <4 x float>, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone
compiling Operations.frag...
uniform ivec4 uiv4 ; 
uniform vec4 uv4 ; 
uniform bool ub ; 
uniform bvec4 ub41 , ub42 ; 
uniform float uf ; 
uniform int ui ; 
void  main (){
vec4 v ; float f ; bool b ; bvec4 bv4 ; int i ; v = radians ( uv4 ) ; v += degrees ( v ) ; v += sin ( v ) ; v += cos ( v ) ; v += tan ( v ) ; v += asin ( v ) ; v += acos ( v ) ; v += atan ( v ) ; v += sinh ( v ) ; v += cosh ( v ) ; v += tanh ( v ) ; v += pow ( v , v ) ; v += exp ( v ) ; v += log ( v ) ; v += exp2 ( v ) ; v += log2 ( v ) ; v += sqrt ( v ) ; v += inversesqrt ( v ) ; v += abs ( v ) ; v += sign ( v ) ; v += floor ( v ) ; v += ceil ( v ) ; v += fract ( v ) ; v += mod ( v , v ) ; v += mod ( v , v . x ) ; v += min ( v , uv4 ) ; v += max ( v , uv4 ) ; v += clamp ( v , uv4 , uv4 ) ; v += mix ( v , v , v ) ; v += mix ( v , v , ub ) ; v += step ( v , v ) ; v += smoothstep ( v , v , v ) ; v += normalize ( v ) ; v += faceforward ( v , v , v ) ; v += reflect ( v , v ) ; v += refract ( v , v , uf ) ; v += dFdx ( v ) ; v += dFdy ( v ) ; v += fwidth ( v ) ; i = 0 ; i += abs ( ui ) ; i += min ( i , ui ) ; i += max ( i , ui ) ; i += clamp ( i , ui , ui ) ; b = any ( lessThan ( v , v ) ) ; b = b && any ( lessThanEqual ( v , v ) ) ; b = b && any ( greaterThan ( v , v ) ) ; b = b && any ( greaterThanEqual ( v , v ) ) ; b = b && any ( equal ( ub41 , ub42 ) ) ; b = b && any ( notEqual ( ub41 , ub42 ) ) ; b = b && any ( ub41 ) ; b = b && all ( ub41 ) ; b = b && any ( not ( ub41 ) ) ; i = i + ui * i - ui / i ; i = i % ui ; if ( i == ui || i != ui && i == ui ^^ i != 2 ) ++ i ; f = uf + uf * uf - uf / uf ; f += length ( v ) ; f += distance ( v , v ) ; f += dot ( v , v ) ; f += cross ( v . xyz , v . xyz ) . x ; if ( f == uf || f != uf && f != 2.000000 ) ++ f ; i &= ui ; i |= 66 ; i ^= ui ; i %= 17 ; i >>= 2 ; i <<= ui ; i = ~ i ; b = ! b ; gl_FragColor = b ? vec4 ( i ) + vec4 ( f ) + v : vec4 ( i ) + vec4 ( f ) + v ; }



(
(declare (uniform ) int ui)
(declare (uniform ) float uf)
(declare (uniform ) bvec4 ub42)
(declare (uniform ) bvec4 ub41)
(declare (uniform ) bool ub)
(declare (uniform ) vec4 uv4)
(declare (uniform ) ivec4 uiv4)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () bool b)
      (declare () float f)
      (declare () vec4 v)
      (declare (temporary ) vec4 radians_retval)
      (assign (constant bool (1)) (xyzw) (var_ref radians_retval)  (call radians ((var_ref uv4) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref radians_retval) ) 
      (declare (temporary ) vec4 degrees_retval)
      (assign (constant bool (1)) (xyzw) (var_ref degrees_retval)  (call degrees ((var_ref radians_retval) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref degrees_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sin_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sin_retval)  (call sin ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sin_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 cos_retval)
      (assign (constant bool (1)) (xyzw) (var_ref cos_retval)  (call cos ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref cos_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 tan_retval)
      (assign (constant bool (1)) (xyzw) (var_ref tan_retval)  (call tan ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref tan_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 asin_retval)
      (assign (constant bool (1)) (xyzw) (var_ref asin_retval)  (call asin ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref asin_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 acos_retval)
      (assign (constant bool (1)) (xyzw) (var_ref acos_retval)  (call acos ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref acos_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 atan_retval)
      (assign (constant bool (1)) (xyzw) (var_ref atan_retval)  (call atan ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref atan_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sinh_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sinh_retval)  (call sinh ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sinh_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 cosh_retval)
      (assign (constant bool (1)) (xyzw) (var_ref cosh_retval)  (call cosh ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref cosh_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 tanh_retval)
      (assign (constant bool (1)) (xyzw) (var_ref tanh_retval)  (call tanh ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref tanh_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 pow_retval)
      (assign (constant bool (1)) (xyzw) (var_ref pow_retval)  (call pow ((var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref pow_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 exp_retval)
      (assign (constant bool (1)) (xyzw) (var_ref exp_retval)  (call exp ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref exp_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 log_retval)
      (assign (constant bool (1)) (xyzw) (var_ref log_retval)  (call log ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref log_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 exp2_retval)
      (assign (constant bool (1)) (xyzw) (var_ref exp2_retval)  (call exp2 ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref exp2_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 log2_retval)
      (assign (constant bool (1)) (xyzw) (var_ref log2_retval)  (call log2 ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref log2_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sqrt_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sqrt_retval)  (call sqrt ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sqrt_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 inversesqrt_retval)
      (assign (constant bool (1)) (xyzw) (var_ref inversesqrt_retval)  (call inversesqrt ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref inversesqrt_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 abs_retval)
      (assign (constant bool (1)) (xyzw) (var_ref abs_retval)  (call abs ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref abs_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sign_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sign_retval)  (call sign ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sign_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 floor_retval)
      (assign (constant bool (1)) (xyzw) (var_ref floor_retval)  (call floor ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref floor_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 ceil_retval)
      (assign (constant bool (1)) (xyzw) (var_ref ceil_retval)  (call ceil ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref ceil_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 fract_retval)
      (assign (constant bool (1)) (xyzw) (var_ref fract_retval)  (call fract ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref fract_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mod_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mod_retval)  (call mod ((var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mod_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mod_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mod_retval)  (call mod ((var_ref assignment_tmp) (swiz x (var_ref assignment_tmp) )))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mod_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 min_retval)
      (assign (constant bool (1)) (xyzw) (var_ref min_retval)  (call min ((var_ref assignment_tmp) (var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref min_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 max_retval)
      (assign (constant bool (1)) (xyzw) (var_ref max_retval)  (call max ((var_ref assignment_tmp) (var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref max_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 clamp_retval)
      (assign (constant bool (1)) (xyzw) (var_ref clamp_retval)  (call clamp ((var_ref assignment_tmp) (var_ref uv4) (var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref clamp_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (expression float b2f (var_ref ub) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 step_retval)
      (assign (constant bool (1)) (xyzw) (var_ref step_retval)  (call step ((var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref step_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 smoothstep_retval)
      (assign (constant bool (1)) (xyzw) (var_ref smoothstep_retval)  (call smoothstep ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref smoothstep_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 normalize_retval)
      (assign (constant bool (1)) (xyzw) (var_ref normalize_retval)  (call normalize ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref normalize_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 faceforward_retval)
      (assign (constant bool (1)) (xyzw) (var_ref faceforward_retval)  (call faceforward ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref faceforward_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 reflect_retval)
      (assign (constant bool (1)) (xyzw) (var_ref reflect_retval)  (call reflect ((var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref reflect_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 refract_retval)
      (assign (constant bool (1)) (xyzw) (var_ref refract_retval)  (call refract ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref uf) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref refract_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 dFdx_retval)
      (assign (constant bool (1)) (xyzw) (var_ref dFdx_retval)  (call dFdx ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref dFdx_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 dFdy_retval)
      (assign (constant bool (1)) (xyzw) (var_ref dFdy_retval)  (call dFdy ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref dFdy_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 fwidth_retval)
      (assign (constant bool (1)) (xyzw) (var_ref fwidth_retval)  (call fwidth ((var_ref assignment_tmp) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (expression vec4 + (var_ref v) (var_ref fwidth_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (declare (temporary ) int abs_retval)
      (assign (constant bool (1)) (x) (var_ref abs_retval)  (call abs ((var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref abs_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int min_retval)
      (assign (constant bool (1)) (x) (var_ref min_retval)  (call min ((var_ref assignment_tmp) (var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref min_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int max_retval)
      (assign (constant bool (1)) (x) (var_ref max_retval)  (call max ((var_ref assignment_tmp) (var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref max_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int clamp_retval)
      (assign (constant bool (1)) (x) (var_ref clamp_retval)  (call clamp ((var_ref assignment_tmp) (var_ref ui) (var_ref ui) ))
) 
      (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (var_ref clamp_retval) ) ) 
      (declare (temporary ) bvec4 lessThan_retval)
      (assign (constant bool (1)) (xyzw) (var_ref lessThan_retval)  (call lessThan ((var_ref v) (var_ref v) ))
) 
      (declare (temporary ) bool any_retval)
      (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref lessThan_retval) ))
) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref any_retval) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref any_retval) (
        (declare (temporary ) bvec4 lessThanEqual_retval)
        (assign (constant bool (1)) (xyzw) (var_ref lessThanEqual_retval)  (call lessThanEqual ((var_ref v) (var_ref v) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref lessThanEqual_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 greaterThan_retval)
        (assign (constant bool (1)) (xyzw) (var_ref greaterThan_retval)  (call greaterThan ((var_ref v) (var_ref v) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref greaterThan_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 greaterThanEqual_retval)
        (assign (constant bool (1)) (xyzw) (var_ref greaterThanEqual_retval)  (call greaterThanEqual ((var_ref v) (var_ref v) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref greaterThanEqual_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 equal_retval)
        (assign (constant bool (1)) (xyzw) (var_ref equal_retval)  (call equal ((var_ref ub41) (var_ref ub42) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref equal_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 notEqual_retval)
        (assign (constant bool (1)) (xyzw) (var_ref notEqual_retval)  (call notEqual ((var_ref ub41) (var_ref ub42) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref notEqual_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref ub41) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bool all_retval)
        (assign (constant bool (1)) (x) (var_ref all_retval)  (call all ((var_ref ub41) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref all_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 not_retval)
        (assign (constant bool (1)) (xyzw) (var_ref not_retval)  (call not ((var_ref ub41) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref not_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int % (expression int / (expression int - (expression int * (expression int + (var_ref i) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref ui) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (expression bool ^^ (var_ref and_tmp) (expression bool any_nequal (var_ref assignment_tmp) (constant int (2)) ) ) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref assignment_tmp) (constant int (1)) ) ) 
      )
      ())

      (assign (constant bool (1)) (x) (var_ref f)  (expression float / (expression float - (expression float * (expression float + (var_ref uf) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) ) 
      (declare (temporary ) float length_retval)
      (assign (constant bool (1)) (x) (var_ref length_retval)  (call length ((var_ref v) ))
) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (var_ref length_retval) ) ) 
      (declare (temporary ) float distance_retval)
      (assign (constant bool (1)) (x) (var_ref distance_retval)  (call distance ((var_ref v) (var_ref v) ))
) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (var_ref distance_retval) ) ) 
      (declare (temporary ) float dot_retval)
      (assign (constant bool (1)) (x) (var_ref dot_retval)  (call dot ((var_ref v) (var_ref v) ))
) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (var_ref dot_retval) ) ) 
      (declare (temporary ) vec3 cross_retval)
      (assign (constant bool (1)) (xyz) (var_ref cross_retval)  (call cross ((swiz xyz (var_ref v) )(swiz xyz (var_ref v) )))
) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (swiz x (var_ref cross_retval) )) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref uf) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref uf) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any_nequal (var_ref assignment_tmp) (constant float (2.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (var_ref and_tmp) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref assignment_tmp) (constant float (1.000000)) ) ) 
      )
      ())

      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int ~ (expression int << (expression int >> (expression int % (expression int ^ (expression int | (expression int & (var_ref i) (var_ref ui) ) (constant int (66)) ) (var_ref ui) ) (constant int (17)) ) (constant int (2)) ) (var_ref ui) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression bool ! (var_ref b) ) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 conditional_tmp)
      (if (var_ref assignment_tmp) (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (expression vec4 + (expression vec4 + (swiz xxxx (expression float i2f (var_ref assignment_tmp) ) )(swiz xxxx (var_ref f) )) (var_ref v) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (var_ref v) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref conditional_tmp) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform vec4 uv4;
uniform bool ub;
uniform float uf;
uniform int ui;
uniform bvec4 ub41;
uniform bvec4 ub42;
const bool const125 = false;
const bool const144 = true;
const int const147 = 2;
const int const150 = 1;
const float const167 = 2;
const float const169 = 1;
const int const172 = 66;
const int const175 = 17;

void main()
{
    bool and_tmp_0;
    bool and_tmp180_0;
    bool and_tmp189_0;
    bool and_tmp198_0;
    bool and_tmp207_0;
    bool and_tmp216_0;
    bool and_tmp224_0;
    bool and_tmp231_0;
    bool or_tmp_0;
    int i_0;
    bool and_tmp269_0;
    bool or_tmp266_0;
    float f_0;
    vec4 conditional_tmp_0;
    vec4 radians_retval1 = radians(uv4);
    vec4 degrees_retval3 = degrees(radians_retval1);
    vec4 assignment_tmp4 = radians_retval1 + degrees_retval3;
    vec4 sin_retval6 = sin(assignment_tmp4);
    vec4 assignment_tmp78 = assignment_tmp4 + sin_retval6;
    vec4 cos_retval10 = cos(assignment_tmp78);
    vec4 assignment_tmp1112 = assignment_tmp78 + cos_retval10;
    vec4 tan_retval14 = tan(assignment_tmp1112);
    vec4 assignment_tmp1516 = assignment_tmp1112 + tan_retval14;
    vec4 asin_retval18 = asin(assignment_tmp1516);
    vec4 assignment_tmp1920 = assignment_tmp1516 + asin_retval18;
    vec4 acos_retval22 = acos(assignment_tmp1920);
    vec4 assignment_tmp2324 = assignment_tmp1920 + acos_retval22;
    vec4 atan_retval26 = atan(assignment_tmp2324);
    vec4 assignment_tmp2728 = assignment_tmp2324 + atan_retval26;
    vec4 sinh_retval30 = sinh(assignment_tmp2728);
    vec4 assignment_tmp3132 = assignment_tmp2728 + sinh_retval30;
    vec4 cosh_retval34 = cosh(assignment_tmp3132);
    vec4 assignment_tmp3536 = assignment_tmp3132 + cosh_retval34;
    vec4 tanh_retval38 = tanh(assignment_tmp3536);
    vec4 assignment_tmp3940 = assignment_tmp3536 + tanh_retval38;
    vec4 pow_retval42 = pow(assignment_tmp3940, assignment_tmp3940);
    vec4 assignment_tmp4344 = assignment_tmp3940 + pow_retval42;
    vec4 exp_retval46 = exp(assignment_tmp4344);
    vec4 assignment_tmp4748 = assignment_tmp4344 + exp_retval46;
    vec4 log_retval50 = log(assignment_tmp4748);
    vec4 assignment_tmp5152 = assignment_tmp4748 + log_retval50;
    vec4 exp2_retval54 = exp2(assignment_tmp5152);
    vec4 assignment_tmp5556 = assignment_tmp5152 + exp2_retval54;
    vec4 log2_retval58 = log2(assignment_tmp5556);
    vec4 assignment_tmp5960 = assignment_tmp5556 + log2_retval58;
    vec4 sqrt_retval62 = sqrt(assignment_tmp5960);
    vec4 assignment_tmp6364 = assignment_tmp5960 + sqrt_retval62;
    vec4 inversesqrt_retval66 = inversesqrt(assignment_tmp6364);
    vec4 assignment_tmp6768 = assignment_tmp6364 + inversesqrt_retval66;
    vec4 abs_retval70 = abs(assignment_tmp6768);
    vec4 assignment_tmp7172 = assignment_tmp6768 + abs_retval70;
    vec4 sign_retval74 = sign(assignment_tmp7172);
    vec4 assignment_tmp7576 = assignment_tmp7172 + sign_retval74;
    vec4 floor_retval78 = floor(assignment_tmp7576);
    vec4 assignment_tmp7980 = assignment_tmp7576 + floor_retval78;
    vec4 ceil_retval82 = ceil(assignment_tmp7980);
    vec4 assignment_tmp8384 = assignment_tmp7980 + ceil_retval82;
    vec4 fract_retval86 = fract(assignment_tmp8384);
    vec4 assignment_tmp8788 = assignment_tmp8384 + fract_retval86;
    vec4 mod_retval90 = mod(assignment_tmp8788, assignment_tmp8788);
    vec4 assignment_tmp9192 = assignment_tmp8788 + mod_retval90;
    vec4 temp82 = vec4(assignment_tmp9192.x);
    vec4 mod_retval9495 = mod(assignment_tmp9192, temp82);
    vec4 assignment_tmp9697 = assignment_tmp9192 + mod_retval9495;
    vec4 min_retval99 = min(assignment_tmp9697, uv4);
    vec4 assignment_tmp100101 = assignment_tmp9697 + min_retval99;
    vec4 max_retval103 = max(assignment_tmp100101, uv4);
    vec4 assignment_tmp104105 = assignment_tmp100101 + max_retval103;
    vec4 clamp_retval107 = clamp(assignment_tmp104105, uv4, uv4);
    vec4 assignment_tmp108109 = assignment_tmp104105 + clamp_retval107;
    vec4 mix_retval111 = mix(assignment_tmp108109, assignment_tmp108109, assignment_tmp108109);
    vec4 assignment_tmp112113 = assignment_tmp108109 + mix_retval111;
    float temp93 = float(ub);
    vec4 mix_retval115116 = mix(assignment_tmp112113, assignment_tmp112113, temp93);
    vec4 assignment_tmp117118 = assignment_tmp112113 + mix_retval115116;
    vec4 step_retval120 = step(assignment_tmp117118, assignment_tmp117118);
    vec4 assignment_tmp121122 = assignment_tmp117118 + step_retval120;
    vec4 smoothstep_retval124 = smoothstep(assignment_tmp121122, assignment_tmp121122, assignment_tmp121122);
    vec4 assignment_tmp125126 = assignment_tmp121122 + smoothstep_retval124;
    vec4 normalize_retval128 = normalize(assignment_tmp125126);
    vec4 assignment_tmp129130 = assignment_tmp125126 + normalize_retval128;
    vec4 faceforward_retval132 = faceforward(assignment_tmp129130, assignment_tmp129130, assignment_tmp129130);
    vec4 assignment_tmp133134 = assignment_tmp129130 + faceforward_retval132;
    vec4 reflect_retval136 = reflect(assignment_tmp133134, assignment_tmp133134);
    vec4 assignment_tmp137138 = assignment_tmp133134 + reflect_retval136;
    vec4 refract_retval140 = refract(assignment_tmp137138, assignment_tmp137138, uf);
    vec4 assignment_tmp141142 = assignment_tmp137138 + refract_retval140;
    vec4 dFdx_retval144 = dFdx(assignment_tmp141142);
    vec4 assignment_tmp145146 = assignment_tmp141142 + dFdx_retval144;
    vec4 dFdy_retval148 = dFdy(assignment_tmp145146);
    vec4 assignment_tmp149150 = assignment_tmp145146 + dFdy_retval148;
    vec4 fwidth_retval152 = fwidth(assignment_tmp149150);
    vec4 temp113 = assignment_tmp149150 + fwidth_retval152;
    int abs_retval154155 = abs(ui);
    int min_retval159160 = min(abs_retval154155, ui);
    int assignment_tmp161162 = min_retval159160 + abs_retval154155;
    int max_retval164165 = max(assignment_tmp161162, ui);
    int assignment_tmp166167 = max_retval164165 + assignment_tmp161162;
    int clamp_retval169170 = clamp(assignment_tmp166167, ui, ui);
    int temp120 = clamp_retval169170 + assignment_tmp166167;
    bvec4 lessThan_retval172 = lessThan(temp113, temp113);
    bool any_retval173 = any(lessThan_retval172);
    if (any_retval173) {
        bvec4 lessThanEqual_retval175 = lessThanEqual(temp113, temp113);
        bool any_retval176177 = any(lessThanEqual_retval175);
        and_tmp_0 = any_retval176177;
    }
    else {
        and_tmp_0 = const125;
    }
    
    if (and_tmp_0) {
        bvec4 greaterThan_retval182 = greaterThan(temp113, temp113);
        bool any_retval183184 = any(greaterThan_retval182);
        and_tmp180_0 = any_retval183184;
    }
    else {
        and_tmp180_0 = const125;
    }
    
    if (and_tmp180_0) {
        bvec4 greaterThanEqual_retval191 = greaterThanEqual(temp113, temp113);
        bool any_retval192193 = any(greaterThanEqual_retval191);
        and_tmp189_0 = any_retval192193;
    }
    else {
        and_tmp189_0 = const125;
    }
    
    if (and_tmp189_0) {
        bvec4 equal_retval200 = equal(ub41, ub42);
        bool any_retval201202 = any(equal_retval200);
        and_tmp198_0 = any_retval201202;
    }
    else {
        and_tmp198_0 = const125;
    }
    
    if (and_tmp198_0) {
        bvec4 notEqual_retval209 = notEqual(ub41, ub42);
        bool any_retval210211 = any(notEqual_retval209);
        and_tmp207_0 = any_retval210211;
    }
    else {
        and_tmp207_0 = const125;
    }
    
    if (and_tmp207_0) {
        bool any_retval218219 = any(ub41);
        and_tmp216_0 = any_retval218219;
    }
    else {
        and_tmp216_0 = const125;
    }
    
    if (and_tmp216_0) {
        bool all_retval226 = all(ub41);
        and_tmp224_0 = all_retval226;
    }
    else {
        and_tmp224_0 = const125;
    }
    
    if (and_tmp224_0) {
        bvec4 not_retval233 = not(ub41);
        bool any_retval234235 = any(not_retval233);
        and_tmp231_0 = any_retval234235;
    }
    else {
        and_tmp231_0 = const125;
    }
    
    int temp138 = ui + temp120;
    int temp139 = temp138 * temp120;
    int temp140 = temp139 - ui;
    int temp141 = temp140 / temp120;
    int assignment_tmp240241 = temp141 % ui;
    bool temp143 = assignment_tmp240241 == ui;
    if (temp143) {
        or_tmp_0 = const144;
    }
    else {
        bool temp145 = assignment_tmp240241 != ui;
        if (temp145) {
        }
        else {
        }
        
        bool temp146 = assignment_tmp240241 != const147;
        bool or_tmp250 = const125 ^^ temp146;
        or_tmp_0 = or_tmp250;
    }
    
    i_0 = assignment_tmp240241;
    if (or_tmp_0) {
        int temp149 = assignment_tmp240241 + const150;
        i_0 = temp149;
    }
    
    float temp151 = uf + uf;
    float temp152 = temp151 * uf;
    float temp153 = temp152 - uf;
    float temp154 = temp153 / uf;
    float length_retval256 = length(temp113);
    float temp156 = temp154 + length_retval256;
    float distance_retval258 = distance(temp113, temp113);
    float temp158 = temp156 + distance_retval258;
    float dot_retval260 = dot(temp113, temp113);
    float temp160 = temp158 + dot_retval260;
    vec3 temp161;
    temp161.xyz = temp113.xyz;
    vec3 cross_retval262 = cross(temp161, temp161);
    float assignment_tmp263264 = temp160 + cross_retval262.x;
    bool temp164 = assignment_tmp263264 == uf;
    if (temp164) {
        or_tmp266_0 = const144;
    }
    else {
        bool temp165 = assignment_tmp263264 != uf;
        if (temp165) {
            bool and_tmp269271 = assignment_tmp263264 != const167;
            and_tmp269_0 = and_tmp269271;
        }
        else {
            and_tmp269_0 = const125;
        }
        
        or_tmp266_0 = and_tmp269_0;
    }
    
    f_0 = assignment_tmp263264;
    if (or_tmp266_0) {
        float temp168 = assignment_tmp263264 + const169;
        f_0 = temp168;
    }
    
    int temp170 = ui & i_0;
    int temp171 = temp170 | const172;
    int temp173 = temp171 ^ ui;
    int temp174 = temp173 % const175;
    int temp176 = temp174 >> const147;
    int temp177 = temp176 << ui;
    int assignment_tmp279280 = ~ temp177;
    bool assignment_tmp282283 = ! and_tmp231_0;
    if (assignment_tmp282283) {
        float temp180 = float(assignment_tmp279280);
        vec4 temp181 = vec4(temp180, temp180, temp180, temp180);
        vec4 temp182 = vec4(f_0, f_0, f_0, f_0);
        vec4 temp183 = temp181 + temp182;
        vec4 conditional_tmp286 = temp183 + temp113;
        conditional_tmp_0 = conditional_tmp286;
    }
    else {
        conditional_tmp_0 = temp113;
    }
    
    gl_FragColor = conditional_tmp_0;
    
}
