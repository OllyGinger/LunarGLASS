; ModuleID = 'Top'

@uv4 = external addrspace(1) constant <4 x float>
@ub = external addrspace(1) constant i1
@uf = external addrspace(1) constant float
@ui = external addrspace(1) constant i32
@ub41 = external addrspace(1) constant <4 x i1>
@ub42 = external addrspace(1) constant <4 x i1>
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %assignment_tmp143 = alloca <4 x float>
  %conditional_tmp = alloca <4 x float>
  %vec_ctor139 = alloca <4 x float>
  %vec_ctor = alloca <4 x float>
  %assignment_tmp135 = alloca float
  %and_tmp130 = alloca i1
  %or_tmp127 = alloca i1
  %assignment_tmp124 = alloca float
  %cross_retval = alloca <3 x float>
  %assignment_tmp122 = alloca float
  %dot_retval = alloca float
  %assignment_tmp121 = alloca float
  %distance_retval = alloca float
  %assignment_tmp120 = alloca float
  %length_retval = alloca float
  %f = alloca float
  %assignment_tmp119 = alloca float
  %assignment_tmp117 = alloca i32
  %and_tmp112 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp108 = alloca i32
  %assignment_tmp107 = alloca i32
  %assignment_tmp106 = alloca i1
  %and_tmp103 = alloca i1
  %any_retval101 = alloca i1
  %not_retval = alloca <4 x i1>
  %assignment_tmp99 = alloca i1
  %and_tmp96 = alloca i1
  %all_retval = alloca i1
  %assignment_tmp94 = alloca i1
  %and_tmp91 = alloca i1
  %any_retval89 = alloca i1
  %assignment_tmp87 = alloca i1
  %and_tmp84 = alloca i1
  %any_retval82 = alloca i1
  %notEqual_retval = alloca <4 x i1>
  %assignment_tmp80 = alloca i1
  %and_tmp77 = alloca i1
  %any_retval75 = alloca i1
  %equal_retval = alloca <4 x i1>
  %assignment_tmp73 = alloca i1
  %and_tmp70 = alloca i1
  %any_retval68 = alloca i1
  %greaterThanEqual_retval = alloca <4 x i1>
  %assignment_tmp66 = alloca i1
  %and_tmp63 = alloca i1
  %any_retval61 = alloca i1
  %greaterThan_retval = alloca <4 x i1>
  %assignment_tmp59 = alloca i1
  %and_tmp = alloca i1
  %any_retval57 = alloca i1
  %lessThanEqual_retval = alloca <4 x i1>
  %b = alloca i1
  %assignment_tmp56 = alloca i1
  %any_retval = alloca i1
  %lessThan_retval = alloca <4 x i1>
  %assignment_tmp55 = alloca i32
  %clamp_retval53 = alloca i32
  %assignment_tmp52 = alloca i32
  %max_retval50 = alloca i32
  %assignment_tmp49 = alloca i32
  %min_retval47 = alloca i32
  %assignment_tmp46 = alloca i32
  %sign_retval44 = alloca i32
  %assignment_tmp43 = alloca i32
  %abs_retval41 = alloca i32
  %i = alloca i32
  %assignment_tmp40 = alloca i32
  %assignment_tmp39 = alloca <4 x float>
  %fwidth_retval = alloca <4 x float>
  %assignment_tmp38 = alloca <4 x float>
  %dFdy_retval = alloca <4 x float>
  %assignment_tmp37 = alloca <4 x float>
  %dFdx_retval = alloca <4 x float>
  %assignment_tmp36 = alloca <4 x float>
  %refract_retval = alloca <4 x float>
  %assignment_tmp35 = alloca <4 x float>
  %reflect_retval = alloca <4 x float>
  %assignment_tmp34 = alloca <4 x float>
  %faceforward_retval = alloca <4 x float>
  %assignment_tmp33 = alloca <4 x float>
  %normalize_retval = alloca <4 x float>
  %assignment_tmp32 = alloca <4 x float>
  %smoothstep_retval = alloca <4 x float>
  %assignment_tmp31 = alloca <4 x float>
  %step_retval = alloca <4 x float>
  %assignment_tmp30 = alloca <4 x float>
  %mix_retval28 = alloca <4 x float>
  %assignment_tmp27 = alloca <4 x float>
  %mix_retval = alloca <4 x float>
  %assignment_tmp26 = alloca <4 x float>
  %clamp_retval = alloca <4 x float>
  %assignment_tmp25 = alloca <4 x float>
  %max_retval = alloca <4 x float>
  %assignment_tmp24 = alloca <4 x float>
  %min_retval = alloca <4 x float>
  %assignment_tmp23 = alloca <4 x float>
  %mod_retval = alloca <4 x float>
  %assignment_tmp22 = alloca <4 x float>
  %fract_retval = alloca <4 x float>
  %assignment_tmp21 = alloca <4 x float>
  %ceil_retval = alloca <4 x float>
  %assignment_tmp20 = alloca <4 x float>
  %floor_retval = alloca <4 x float>
  %assignment_tmp19 = alloca <4 x float>
  %sign_retval = alloca <4 x float>
  %assignment_tmp18 = alloca <4 x float>
  %abs_retval = alloca <4 x float>
  %assignment_tmp17 = alloca <4 x float>
  %inversesqrt_retval = alloca <4 x float>
  %assignment_tmp16 = alloca <4 x float>
  %sqrt_retval = alloca <4 x float>
  %assignment_tmp15 = alloca <4 x float>
  %log2_retval = alloca <4 x float>
  %assignment_tmp14 = alloca <4 x float>
  %exp2_retval = alloca <4 x float>
  %assignment_tmp13 = alloca <4 x float>
  %log_retval = alloca <4 x float>
  %assignment_tmp12 = alloca <4 x float>
  %exp_retval = alloca <4 x float>
  %assignment_tmp11 = alloca <4 x float>
  %pow_retval = alloca <4 x float>
  %assignment_tmp10 = alloca <4 x float>
  %tanh_retval = alloca <4 x float>
  %assignment_tmp9 = alloca <4 x float>
  %cosh_retval = alloca <4 x float>
  %assignment_tmp8 = alloca <4 x float>
  %sinh_retval = alloca <4 x float>
  %assignment_tmp7 = alloca <4 x float>
  %atan_retval = alloca <4 x float>
  %assignment_tmp6 = alloca <4 x float>
  %acos_retval = alloca <4 x float>
  %assignment_tmp5 = alloca <4 x float>
  %asin_retval = alloca <4 x float>
  %assignment_tmp4 = alloca <4 x float>
  %tan_retval = alloca <4 x float>
  %assignment_tmp3 = alloca <4 x float>
  %cos_retval = alloca <4 x float>
  %assignment_tmp2 = alloca <4 x float>
  %sin_retval = alloca <4 x float>
  %assignment_tmp1 = alloca <4 x float>
  %degrees_retval = alloca <4 x float>
  %v = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %radians_retval = alloca <4 x float>
  %0 = load <4 x float> addrspace(1)* @uv4
  %radians = call <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float> %0)
  store <4 x float> %radians, <4 x float>* %radians_retval
  %1 = load <4 x float>* %radians_retval
  store <4 x float> %1, <4 x float>* %assignment_tmp
  %2 = load <4 x float>* %assignment_tmp
  store <4 x float> %2, <4 x float>* %v
  %3 = load <4 x float>* %v
  %degrees = call <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float> %3)
  store <4 x float> %degrees, <4 x float>* %degrees_retval
  %4 = load <4 x float>* %v
  %5 = load <4 x float>* %degrees_retval
  %6 = fadd <4 x float> %4, %5
  store <4 x float> %6, <4 x float>* %assignment_tmp1
  %7 = load <4 x float>* %assignment_tmp1
  store <4 x float> %7, <4 x float>* %v
  %8 = load <4 x float>* %v
  %sin = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %8)
  store <4 x float> %sin, <4 x float>* %sin_retval
  %9 = load <4 x float>* %v
  %10 = load <4 x float>* %sin_retval
  %11 = fadd <4 x float> %9, %10
  store <4 x float> %11, <4 x float>* %assignment_tmp2
  %12 = load <4 x float>* %assignment_tmp2
  store <4 x float> %12, <4 x float>* %v
  %13 = load <4 x float>* %v
  %cos = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %13)
  store <4 x float> %cos, <4 x float>* %cos_retval
  %14 = load <4 x float>* %v
  %15 = load <4 x float>* %cos_retval
  %16 = fadd <4 x float> %14, %15
  store <4 x float> %16, <4 x float>* %assignment_tmp3
  %17 = load <4 x float>* %assignment_tmp3
  store <4 x float> %17, <4 x float>* %v
  %18 = load <4 x float>* %v
  %tan = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %18)
  store <4 x float> %tan, <4 x float>* %tan_retval
  %19 = load <4 x float>* %v
  %20 = load <4 x float>* %tan_retval
  %21 = fadd <4 x float> %19, %20
  store <4 x float> %21, <4 x float>* %assignment_tmp4
  %22 = load <4 x float>* %assignment_tmp4
  store <4 x float> %22, <4 x float>* %v
  %23 = load <4 x float>* %v
  %asin = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %23)
  store <4 x float> %asin, <4 x float>* %asin_retval
  %24 = load <4 x float>* %v
  %25 = load <4 x float>* %asin_retval
  %26 = fadd <4 x float> %24, %25
  store <4 x float> %26, <4 x float>* %assignment_tmp5
  %27 = load <4 x float>* %assignment_tmp5
  store <4 x float> %27, <4 x float>* %v
  %28 = load <4 x float>* %v
  %acos = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %28)
  store <4 x float> %acos, <4 x float>* %acos_retval
  %29 = load <4 x float>* %v
  %30 = load <4 x float>* %acos_retval
  %31 = fadd <4 x float> %29, %30
  store <4 x float> %31, <4 x float>* %assignment_tmp6
  %32 = load <4 x float>* %assignment_tmp6
  store <4 x float> %32, <4 x float>* %v
  %33 = load <4 x float>* %v
  %atan = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %33)
  store <4 x float> %atan, <4 x float>* %atan_retval
  %34 = load <4 x float>* %v
  %35 = load <4 x float>* %atan_retval
  %36 = fadd <4 x float> %34, %35
  store <4 x float> %36, <4 x float>* %assignment_tmp7
  %37 = load <4 x float>* %assignment_tmp7
  store <4 x float> %37, <4 x float>* %v
  %38 = load <4 x float>* %v
  %sinh = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %38)
  store <4 x float> %sinh, <4 x float>* %sinh_retval
  %39 = load <4 x float>* %v
  %40 = load <4 x float>* %sinh_retval
  %41 = fadd <4 x float> %39, %40
  store <4 x float> %41, <4 x float>* %assignment_tmp8
  %42 = load <4 x float>* %assignment_tmp8
  store <4 x float> %42, <4 x float>* %v
  %43 = load <4 x float>* %v
  %cosh = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %43)
  store <4 x float> %cosh, <4 x float>* %cosh_retval
  %44 = load <4 x float>* %v
  %45 = load <4 x float>* %cosh_retval
  %46 = fadd <4 x float> %44, %45
  store <4 x float> %46, <4 x float>* %assignment_tmp9
  %47 = load <4 x float>* %assignment_tmp9
  store <4 x float> %47, <4 x float>* %v
  %48 = load <4 x float>* %v
  %tanh = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %48)
  store <4 x float> %tanh, <4 x float>* %tanh_retval
  %49 = load <4 x float>* %v
  %50 = load <4 x float>* %tanh_retval
  %51 = fadd <4 x float> %49, %50
  store <4 x float> %51, <4 x float>* %assignment_tmp10
  %52 = load <4 x float>* %assignment_tmp10
  store <4 x float> %52, <4 x float>* %v
  %53 = load <4 x float>* %v
  %54 = load <4 x float>* %v
  %pow = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %53, <4 x float> %54)
  store <4 x float> %pow, <4 x float>* %pow_retval
  %55 = load <4 x float>* %v
  %56 = load <4 x float>* %pow_retval
  %57 = fadd <4 x float> %55, %56
  store <4 x float> %57, <4 x float>* %assignment_tmp11
  %58 = load <4 x float>* %assignment_tmp11
  store <4 x float> %58, <4 x float>* %v
  %59 = load <4 x float>* %v
  %exp = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %59)
  store <4 x float> %exp, <4 x float>* %exp_retval
  %60 = load <4 x float>* %v
  %61 = load <4 x float>* %exp_retval
  %62 = fadd <4 x float> %60, %61
  store <4 x float> %62, <4 x float>* %assignment_tmp12
  %63 = load <4 x float>* %assignment_tmp12
  store <4 x float> %63, <4 x float>* %v
  %64 = load <4 x float>* %v
  %log = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %64)
  store <4 x float> %log, <4 x float>* %log_retval
  %65 = load <4 x float>* %v
  %66 = load <4 x float>* %log_retval
  %67 = fadd <4 x float> %65, %66
  store <4 x float> %67, <4 x float>* %assignment_tmp13
  %68 = load <4 x float>* %assignment_tmp13
  store <4 x float> %68, <4 x float>* %v
  %69 = load <4 x float>* %v
  %exp2 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %69)
  store <4 x float> %exp2, <4 x float>* %exp2_retval
  %70 = load <4 x float>* %v
  %71 = load <4 x float>* %exp2_retval
  %72 = fadd <4 x float> %70, %71
  store <4 x float> %72, <4 x float>* %assignment_tmp14
  %73 = load <4 x float>* %assignment_tmp14
  store <4 x float> %73, <4 x float>* %v
  %74 = load <4 x float>* %v
  %log2 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %74)
  store <4 x float> %log2, <4 x float>* %log2_retval
  %75 = load <4 x float>* %v
  %76 = load <4 x float>* %log2_retval
  %77 = fadd <4 x float> %75, %76
  store <4 x float> %77, <4 x float>* %assignment_tmp15
  %78 = load <4 x float>* %assignment_tmp15
  store <4 x float> %78, <4 x float>* %v
  %79 = load <4 x float>* %v
  %sqrt = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %79)
  store <4 x float> %sqrt, <4 x float>* %sqrt_retval
  %80 = load <4 x float>* %v
  %81 = load <4 x float>* %sqrt_retval
  %82 = fadd <4 x float> %80, %81
  store <4 x float> %82, <4 x float>* %assignment_tmp16
  %83 = load <4 x float>* %assignment_tmp16
  store <4 x float> %83, <4 x float>* %v
  %84 = load <4 x float>* %v
  %inversesqrt = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %84)
  store <4 x float> %inversesqrt, <4 x float>* %inversesqrt_retval
  %85 = load <4 x float>* %v
  %86 = load <4 x float>* %inversesqrt_retval
  %87 = fadd <4 x float> %85, %86
  store <4 x float> %87, <4 x float>* %assignment_tmp17
  %88 = load <4 x float>* %assignment_tmp17
  store <4 x float> %88, <4 x float>* %v
  %89 = load <4 x float>* %v
  %abs = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %89)
  store <4 x float> %abs, <4 x float>* %abs_retval
  %90 = load <4 x float>* %v
  %91 = load <4 x float>* %abs_retval
  %92 = fadd <4 x float> %90, %91
  store <4 x float> %92, <4 x float>* %assignment_tmp18
  %93 = load <4 x float>* %assignment_tmp18
  store <4 x float> %93, <4 x float>* %v
  %94 = load <4 x float>* %v
  %sign = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %94)
  store <4 x float> %sign, <4 x float>* %sign_retval
  %95 = load <4 x float>* %v
  %96 = load <4 x float>* %sign_retval
  %97 = fadd <4 x float> %95, %96
  store <4 x float> %97, <4 x float>* %assignment_tmp19
  %98 = load <4 x float>* %assignment_tmp19
  store <4 x float> %98, <4 x float>* %v
  %99 = load <4 x float>* %v
  %floor = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %99)
  store <4 x float> %floor, <4 x float>* %floor_retval
  %100 = load <4 x float>* %v
  %101 = load <4 x float>* %floor_retval
  %102 = fadd <4 x float> %100, %101
  store <4 x float> %102, <4 x float>* %assignment_tmp20
  %103 = load <4 x float>* %assignment_tmp20
  store <4 x float> %103, <4 x float>* %v
  %104 = load <4 x float>* %v
  %ceil = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %104)
  store <4 x float> %ceil, <4 x float>* %ceil_retval
  %105 = load <4 x float>* %v
  %106 = load <4 x float>* %ceil_retval
  %107 = fadd <4 x float> %105, %106
  store <4 x float> %107, <4 x float>* %assignment_tmp21
  %108 = load <4 x float>* %assignment_tmp21
  store <4 x float> %108, <4 x float>* %v
  %109 = load <4 x float>* %v
  %fract = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %109)
  store <4 x float> %fract, <4 x float>* %fract_retval
  %110 = load <4 x float>* %v
  %111 = load <4 x float>* %fract_retval
  %112 = fadd <4 x float> %110, %111
  store <4 x float> %112, <4 x float>* %assignment_tmp22
  %113 = load <4 x float>* %assignment_tmp22
  store <4 x float> %113, <4 x float>* %v
  %114 = load <4 x float>* %v
  %115 = load <4 x float>* %v
  %116 = frem <4 x float> %114, %115
  store <4 x float> %116, <4 x float>* %mod_retval
  %117 = load <4 x float>* %v
  %118 = load <4 x float>* %mod_retval
  %119 = fadd <4 x float> %117, %118
  store <4 x float> %119, <4 x float>* %assignment_tmp23
  %120 = load <4 x float>* %assignment_tmp23
  store <4 x float> %120, <4 x float>* %v
  %121 = load <4 x float>* %v
  %122 = load <4 x float> addrspace(1)* @uv4
  %min = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %121, <4 x float> %122)
  store <4 x float> %min, <4 x float>* %min_retval
  %123 = load <4 x float>* %v
  %124 = load <4 x float>* %min_retval
  %125 = fadd <4 x float> %123, %124
  store <4 x float> %125, <4 x float>* %assignment_tmp24
  %126 = load <4 x float>* %assignment_tmp24
  store <4 x float> %126, <4 x float>* %v
  %127 = load <4 x float>* %v
  %128 = load <4 x float> addrspace(1)* @uv4
  %max = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %127, <4 x float> %128)
  store <4 x float> %max, <4 x float>* %max_retval
  %129 = load <4 x float>* %v
  %130 = load <4 x float>* %max_retval
  %131 = fadd <4 x float> %129, %130
  store <4 x float> %131, <4 x float>* %assignment_tmp25
  %132 = load <4 x float>* %assignment_tmp25
  store <4 x float> %132, <4 x float>* %v
  %133 = load <4 x float>* %v
  %134 = load <4 x float> addrspace(1)* @uv4
  %135 = load <4 x float> addrspace(1)* @uv4
  %clamp = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %133, <4 x float> %134, <4 x float> %135)
  store <4 x float> %clamp, <4 x float>* %clamp_retval
  %136 = load <4 x float>* %v
  %137 = load <4 x float>* %clamp_retval
  %138 = fadd <4 x float> %136, %137
  store <4 x float> %138, <4 x float>* %assignment_tmp26
  %139 = load <4 x float>* %assignment_tmp26
  store <4 x float> %139, <4 x float>* %v
  %140 = load <4 x float>* %v
  %141 = load <4 x float>* %v
  %142 = load <4 x float>* %v
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %140, <4 x float> %141, <4 x float> %142)
  store <4 x float> %mix, <4 x float>* %mix_retval
  %143 = load <4 x float>* %v
  %144 = load <4 x float>* %mix_retval
  %145 = fadd <4 x float> %143, %144
  store <4 x float> %145, <4 x float>* %assignment_tmp27
  %146 = load <4 x float>* %assignment_tmp27
  store <4 x float> %146, <4 x float>* %v
  %147 = load <4 x float>* %v
  %148 = load <4 x float>* %v
  %149 = load i1 addrspace(1)* @ub
  %mix29 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.i1(<4 x float> %147, <4 x float> %148, i1 %149)
  store <4 x float> %mix29, <4 x float>* %mix_retval28
  %150 = load <4 x float>* %v
  %151 = load <4 x float>* %mix_retval28
  %152 = fadd <4 x float> %150, %151
  store <4 x float> %152, <4 x float>* %assignment_tmp30
  %153 = load <4 x float>* %assignment_tmp30
  store <4 x float> %153, <4 x float>* %v
  %154 = load <4 x float>* %v
  %155 = load <4 x float>* %v
  %step = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %154, <4 x float> %155)
  store <4 x float> %step, <4 x float>* %step_retval
  %156 = load <4 x float>* %v
  %157 = load <4 x float>* %step_retval
  %158 = fadd <4 x float> %156, %157
  store <4 x float> %158, <4 x float>* %assignment_tmp31
  %159 = load <4 x float>* %assignment_tmp31
  store <4 x float> %159, <4 x float>* %v
  %160 = load <4 x float>* %v
  %161 = load <4 x float>* %v
  %162 = load <4 x float>* %v
  %smoothstep = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %160, <4 x float> %161, <4 x float> %162)
  store <4 x float> %smoothstep, <4 x float>* %smoothstep_retval
  %163 = load <4 x float>* %v
  %164 = load <4 x float>* %smoothstep_retval
  %165 = fadd <4 x float> %163, %164
  store <4 x float> %165, <4 x float>* %assignment_tmp32
  %166 = load <4 x float>* %assignment_tmp32
  store <4 x float> %166, <4 x float>* %v
  %167 = load <4 x float>* %v
  %normalize = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %167)
  store <4 x float> %normalize, <4 x float>* %normalize_retval
  %168 = load <4 x float>* %v
  %169 = load <4 x float>* %normalize_retval
  %170 = fadd <4 x float> %168, %169
  store <4 x float> %170, <4 x float>* %assignment_tmp33
  %171 = load <4 x float>* %assignment_tmp33
  store <4 x float> %171, <4 x float>* %v
  %172 = load <4 x float>* %v
  %173 = load <4 x float>* %v
  %174 = load <4 x float>* %v
  %faceforward = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %172, <4 x float> %173, <4 x float> %174)
  store <4 x float> %faceforward, <4 x float>* %faceforward_retval
  %175 = load <4 x float>* %v
  %176 = load <4 x float>* %faceforward_retval
  %177 = fadd <4 x float> %175, %176
  store <4 x float> %177, <4 x float>* %assignment_tmp34
  %178 = load <4 x float>* %assignment_tmp34
  store <4 x float> %178, <4 x float>* %v
  %179 = load <4 x float>* %v
  %180 = load <4 x float>* %v
  %reflect = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %179, <4 x float> %180)
  store <4 x float> %reflect, <4 x float>* %reflect_retval
  %181 = load <4 x float>* %v
  %182 = load <4 x float>* %reflect_retval
  %183 = fadd <4 x float> %181, %182
  store <4 x float> %183, <4 x float>* %assignment_tmp35
  %184 = load <4 x float>* %assignment_tmp35
  store <4 x float> %184, <4 x float>* %v
  %185 = load <4 x float>* %v
  %186 = load <4 x float>* %v
  %187 = load float addrspace(1)* @uf
  %refract = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %185, <4 x float> %186, float %187)
  store <4 x float> %refract, <4 x float>* %refract_retval
  %188 = load <4 x float>* %v
  %189 = load <4 x float>* %refract_retval
  %190 = fadd <4 x float> %188, %189
  store <4 x float> %190, <4 x float>* %assignment_tmp36
  %191 = load <4 x float>* %assignment_tmp36
  store <4 x float> %191, <4 x float>* %v
  %192 = load <4 x float>* %v
  %dFdx = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %192)
  store <4 x float> %dFdx, <4 x float>* %dFdx_retval
  %193 = load <4 x float>* %v
  %194 = load <4 x float>* %dFdx_retval
  %195 = fadd <4 x float> %193, %194
  store <4 x float> %195, <4 x float>* %assignment_tmp37
  %196 = load <4 x float>* %assignment_tmp37
  store <4 x float> %196, <4 x float>* %v
  %197 = load <4 x float>* %v
  %dFdy = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %197)
  store <4 x float> %dFdy, <4 x float>* %dFdy_retval
  %198 = load <4 x float>* %v
  %199 = load <4 x float>* %dFdy_retval
  %200 = fadd <4 x float> %198, %199
  store <4 x float> %200, <4 x float>* %assignment_tmp38
  %201 = load <4 x float>* %assignment_tmp38
  store <4 x float> %201, <4 x float>* %v
  %202 = load <4 x float>* %v
  %fwidth = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %202)
  store <4 x float> %fwidth, <4 x float>* %fwidth_retval
  %203 = load <4 x float>* %v
  %204 = load <4 x float>* %fwidth_retval
  %205 = fadd <4 x float> %203, %204
  store <4 x float> %205, <4 x float>* %assignment_tmp39
  %206 = load <4 x float>* %assignment_tmp39
  store <4 x float> %206, <4 x float>* %v
  store i32 0, i32* %assignment_tmp40
  %207 = load i32* %assignment_tmp40
  store i32 %207, i32* %i
  %208 = load i32 addrspace(1)* @ui
  %abs42 = call i32 @llvm.gla.fAbs.i32.i32(i32 %208)
  store i32 %abs42, i32* %abs_retval41
  %209 = load i32* %i
  %210 = load i32* %abs_retval41
  %211 = add i32 %209, %210
  store i32 %211, i32* %assignment_tmp43
  %212 = load i32* %assignment_tmp43
  store i32 %212, i32* %i
  %213 = load i32* %i
  %sign45 = call i32 @llvm.gla.fSign.i32.i32(i32 %213)
  store i32 %sign45, i32* %sign_retval44
  %214 = load i32* %i
  %215 = load i32* %sign_retval44
  %216 = add i32 %214, %215
  store i32 %216, i32* %assignment_tmp46
  %217 = load i32* %assignment_tmp46
  store i32 %217, i32* %i
  %218 = load i32* %i
  %219 = load i32 addrspace(1)* @ui
  %min48 = call i32 @llvm.gla.fMin.i32.i32.i32(i32 %218, i32 %219)
  store i32 %min48, i32* %min_retval47
  %220 = load i32* %i
  %221 = load i32* %min_retval47
  %222 = add i32 %220, %221
  store i32 %222, i32* %assignment_tmp49
  %223 = load i32* %assignment_tmp49
  store i32 %223, i32* %i
  %224 = load i32* %i
  %225 = load i32 addrspace(1)* @ui
  %max51 = call i32 @llvm.gla.fMax.i32.i32.i32(i32 %224, i32 %225)
  store i32 %max51, i32* %max_retval50
  %226 = load i32* %i
  %227 = load i32* %max_retval50
  %228 = add i32 %226, %227
  store i32 %228, i32* %assignment_tmp52
  %229 = load i32* %assignment_tmp52
  store i32 %229, i32* %i
  %230 = load i32* %i
  %231 = load i32 addrspace(1)* @ui
  %232 = load i32 addrspace(1)* @ui
  %clamp54 = call i32 @llvm.gla.fClamp.i32.i32.i32.i32(i32 %230, i32 %231, i32 %232)
  store i32 %clamp54, i32* %clamp_retval53
  %233 = load i32* %i
  %234 = load i32* %clamp_retval53
  %235 = add i32 %233, %234
  store i32 %235, i32* %assignment_tmp55
  %236 = load i32* %assignment_tmp55
  store i32 %236, i32* %i
  %237 = load <4 x float>* %v
  %238 = load <4 x float>* %v
  %239 = fcmp olt <4 x float> %237, %238
  store <4 x i1> %239, <4 x i1>* %lessThan_retval
  %240 = load <4 x i1>* %lessThan_retval
  %any = call i1 @llvm.gla.any.v4i1(<4 x i1> %240)
  store i1 %any, i1* %any_retval
  %241 = load i1* %any_retval
  store i1 %241, i1* %assignment_tmp56
  %242 = load i1* %assignment_tmp56
  store i1 %242, i1* %b
  %243 = load i1* %b
  br i1 %243, label %then, label %else

then:                                             ; preds = %entry
  %244 = load <4 x float>* %v
  %245 = load <4 x float>* %v
  %246 = fcmp ole <4 x float> %244, %245
  store <4 x i1> %246, <4 x i1>* %lessThanEqual_retval
  %247 = load <4 x i1>* %lessThanEqual_retval
  %any58 = call i1 @llvm.gla.any.v4i1(<4 x i1> %247)
  store i1 %any58, i1* %any_retval57
  %248 = load i1* %any_retval57
  store i1 %248, i1* %and_tmp
  br label %ifmerge

else:                                             ; preds = %entry
  store i1 false, i1* %and_tmp
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %249 = load i1* %and_tmp
  store i1 %249, i1* %assignment_tmp59
  %250 = load i1* %assignment_tmp59
  store i1 %250, i1* %b
  %251 = load i1* %b
  br i1 %251, label %then60, label %else64

then60:                                           ; preds = %ifmerge
  %252 = load <4 x float>* %v
  %253 = load <4 x float>* %v
  %254 = fcmp ogt <4 x float> %252, %253
  store <4 x i1> %254, <4 x i1>* %greaterThan_retval
  %255 = load <4 x i1>* %greaterThan_retval
  %any62 = call i1 @llvm.gla.any.v4i1(<4 x i1> %255)
  store i1 %any62, i1* %any_retval61
  %256 = load i1* %any_retval61
  store i1 %256, i1* %and_tmp63
  br label %ifmerge65

else64:                                           ; preds = %ifmerge
  store i1 false, i1* %and_tmp63
  br label %ifmerge65

ifmerge65:                                        ; preds = %else64, %then60
  %257 = load i1* %and_tmp63
  store i1 %257, i1* %assignment_tmp66
  %258 = load i1* %assignment_tmp66
  store i1 %258, i1* %b
  %259 = load i1* %b
  br i1 %259, label %then67, label %else71

then67:                                           ; preds = %ifmerge65
  %260 = load <4 x float>* %v
  %261 = load <4 x float>* %v
  %262 = fcmp oge <4 x float> %260, %261
  store <4 x i1> %262, <4 x i1>* %greaterThanEqual_retval
  %263 = load <4 x i1>* %greaterThanEqual_retval
  %any69 = call i1 @llvm.gla.any.v4i1(<4 x i1> %263)
  store i1 %any69, i1* %any_retval68
  %264 = load i1* %any_retval68
  store i1 %264, i1* %and_tmp70
  br label %ifmerge72

else71:                                           ; preds = %ifmerge65
  store i1 false, i1* %and_tmp70
  br label %ifmerge72

ifmerge72:                                        ; preds = %else71, %then67
  %265 = load i1* %and_tmp70
  store i1 %265, i1* %assignment_tmp73
  %266 = load i1* %assignment_tmp73
  store i1 %266, i1* %b
  %267 = load i1* %b
  br i1 %267, label %then74, label %else78

then74:                                           ; preds = %ifmerge72
  %268 = load <4 x i1> addrspace(1)* @ub41
  %269 = load <4 x i1> addrspace(1)* @ub42
  %270 = icmp eq <4 x i1> %268, %269
  store <4 x i1> %270, <4 x i1>* %equal_retval
  %271 = load <4 x i1>* %equal_retval
  %any76 = call i1 @llvm.gla.any.v4i1(<4 x i1> %271)
  store i1 %any76, i1* %any_retval75
  %272 = load i1* %any_retval75
  store i1 %272, i1* %and_tmp77
  br label %ifmerge79

else78:                                           ; preds = %ifmerge72
  store i1 false, i1* %and_tmp77
  br label %ifmerge79

ifmerge79:                                        ; preds = %else78, %then74
  %273 = load i1* %and_tmp77
  store i1 %273, i1* %assignment_tmp80
  %274 = load i1* %assignment_tmp80
  store i1 %274, i1* %b
  %275 = load i1* %b
  br i1 %275, label %then81, label %else85

then81:                                           ; preds = %ifmerge79
  %276 = load <4 x i1> addrspace(1)* @ub41
  %277 = load <4 x i1> addrspace(1)* @ub42
  %278 = icmp ne <4 x i1> %276, %277
  store <4 x i1> %278, <4 x i1>* %notEqual_retval
  %279 = load <4 x i1>* %notEqual_retval
  %any83 = call i1 @llvm.gla.any.v4i1(<4 x i1> %279)
  store i1 %any83, i1* %any_retval82
  %280 = load i1* %any_retval82
  store i1 %280, i1* %and_tmp84
  br label %ifmerge86

else85:                                           ; preds = %ifmerge79
  store i1 false, i1* %and_tmp84
  br label %ifmerge86

ifmerge86:                                        ; preds = %else85, %then81
  %281 = load i1* %and_tmp84
  store i1 %281, i1* %assignment_tmp87
  %282 = load i1* %assignment_tmp87
  store i1 %282, i1* %b
  %283 = load i1* %b
  br i1 %283, label %then88, label %else92

then88:                                           ; preds = %ifmerge86
  %284 = load <4 x i1> addrspace(1)* @ub41
  %any90 = call i1 @llvm.gla.any.v4i1(<4 x i1> %284)
  store i1 %any90, i1* %any_retval89
  %285 = load i1* %any_retval89
  store i1 %285, i1* %and_tmp91
  br label %ifmerge93

else92:                                           ; preds = %ifmerge86
  store i1 false, i1* %and_tmp91
  br label %ifmerge93

ifmerge93:                                        ; preds = %else92, %then88
  %286 = load i1* %and_tmp91
  store i1 %286, i1* %assignment_tmp94
  %287 = load i1* %assignment_tmp94
  store i1 %287, i1* %b
  %288 = load i1* %b
  br i1 %288, label %then95, label %else97

then95:                                           ; preds = %ifmerge93
  %289 = load <4 x i1> addrspace(1)* @ub41
  %all = call i1 @llvm.gla.all.v4i1(<4 x i1> %289)
  store i1 %all, i1* %all_retval
  %290 = load i1* %all_retval
  store i1 %290, i1* %and_tmp96
  br label %ifmerge98

else97:                                           ; preds = %ifmerge93
  store i1 false, i1* %and_tmp96
  br label %ifmerge98

ifmerge98:                                        ; preds = %else97, %then95
  %291 = load i1* %and_tmp96
  store i1 %291, i1* %assignment_tmp99
  %292 = load i1* %assignment_tmp99
  store i1 %292, i1* %b
  %293 = load i1* %b
  br i1 %293, label %then100, label %else104

then100:                                          ; preds = %ifmerge98
  %294 = load <4 x i1> addrspace(1)* @ub41
  %295 = xor <4 x i1> %294, <i1 true, i1 true, i1 true, i1 true>
  store <4 x i1> %295, <4 x i1>* %not_retval
  %296 = load <4 x i1>* %not_retval
  %any102 = call i1 @llvm.gla.any.v4i1(<4 x i1> %296)
  store i1 %any102, i1* %any_retval101
  %297 = load i1* %any_retval101
  store i1 %297, i1* %and_tmp103
  br label %ifmerge105

else104:                                          ; preds = %ifmerge98
  store i1 false, i1* %and_tmp103
  br label %ifmerge105

ifmerge105:                                       ; preds = %else104, %then100
  %298 = load i1* %and_tmp103
  store i1 %298, i1* %assignment_tmp106
  %299 = load i1* %assignment_tmp106
  store i1 %299, i1* %b
  %300 = load i32* %i
  %301 = load i32 addrspace(1)* @ui
  %302 = add i32 %300, %301
  %303 = load i32* %i
  %304 = mul i32 %302, %303
  %305 = load i32 addrspace(1)* @ui
  %306 = sub i32 %304, %305
  %307 = load i32* %i
  %308 = sdiv i32 %306, %307
  store i32 %308, i32* %assignment_tmp107
  %309 = load i32* %assignment_tmp107
  store i32 %309, i32* %i
  %310 = load i32* %i
  %311 = load i32 addrspace(1)* @ui
  %312 = srem i32 %310, %311
  store i32 %312, i32* %assignment_tmp108
  %313 = load i32* %assignment_tmp108
  store i32 %313, i32* %i
  %314 = load i32* %i
  %315 = load i32 addrspace(1)* @ui
  %316 = icmp eq i32 %314, %315
  br i1 %316, label %then109, label %else110

then109:                                          ; preds = %ifmerge105
  store i1 true, i1* %or_tmp
  br label %ifmerge115

else110:                                          ; preds = %ifmerge105
  %317 = load i32* %i
  %318 = load i32 addrspace(1)* @ui
  %319 = icmp ne i32 %317, %318
  br i1 %319, label %then111, label %else113

then111:                                          ; preds = %else110
  %320 = load i32* %i
  %321 = load i32 addrspace(1)* @ui
  %322 = icmp eq i32 %320, %321
  store i1 %322, i1* %and_tmp112
  br label %ifmerge114

else113:                                          ; preds = %else110
  store i1 false, i1* %and_tmp112
  br label %ifmerge114

ifmerge114:                                       ; preds = %else113, %then111
  %323 = load i1* %and_tmp112
  %324 = load i32* %i
  %325 = icmp ne i32 %324, 2
  %326 = xor i1 %323, %325
  store i1 %326, i1* %or_tmp
  br label %ifmerge115

ifmerge115:                                       ; preds = %ifmerge114, %then109
  %327 = load i1* %or_tmp
  br i1 %327, label %then116, label %ifmerge118

then116:                                          ; preds = %ifmerge115
  %328 = load i32* %i
  %329 = add i32 %328, 1
  store i32 %329, i32* %assignment_tmp117
  %330 = load i32* %assignment_tmp117
  store i32 %330, i32* %i
  br label %ifmerge118

ifmerge118:                                       ; preds = %then116, %ifmerge115
  %331 = load float* %f
  %332 = load float addrspace(1)* @uf
  %333 = fadd float %331, %332
  %334 = load float* %f
  %335 = fmul float %333, %334
  %336 = load float addrspace(1)* @uf
  %337 = fsub float %335, %336
  %338 = load float* %f
  %339 = fdiv float %337, %338
  store float %339, float* %assignment_tmp119
  %340 = load float* %assignment_tmp119
  store float %340, float* %f
  %341 = load <4 x float>* %v
  %length = call float @llvm.gla.fLength.v4f32(<4 x float> %341)
  store float %length, float* %length_retval
  %342 = load float* %f
  %343 = load float* %length_retval
  %344 = fadd float %342, %343
  store float %344, float* %assignment_tmp120
  %345 = load float* %assignment_tmp120
  store float %345, float* %f
  %346 = load <4 x float>* %v
  %347 = load <4 x float>* %v
  %distance = call float @llvm.gla.fDistance.v4f32.v4f32(<4 x float> %346, <4 x float> %347)
  store float %distance, float* %distance_retval
  %348 = load float* %f
  %349 = load float* %distance_retval
  %350 = fadd float %348, %349
  store float %350, float* %assignment_tmp121
  %351 = load float* %assignment_tmp121
  store float %351, float* %f
  %352 = load <4 x float>* %v
  %353 = load <4 x float>* %v
  %dot = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %352, <4 x float> %353)
  store float %dot, float* %dot_retval
  %354 = load float* %f
  %355 = load float* %dot_retval
  %356 = fadd float %354, %355
  store float %356, float* %assignment_tmp122
  %357 = load float* %assignment_tmp122
  store float %357, float* %f
  %358 = load <4 x float>* %v
  %swizzleTmp = call <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32(<4 x float> %358, i32 36)
  %359 = load <4 x float>* %v
  %swizzleTmp123 = call <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32(<4 x float> %359, i32 36)
  %cross = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %swizzleTmp, <3 x float> %swizzleTmp123)
  store <3 x float> %cross, <3 x float>* %cross_retval
  %360 = load float* %f
  %361 = load <3 x float>* %cross_retval
  %swizzleTmp125 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %361, i32 0)
  %362 = fadd float %360, %swizzleTmp125
  store float %362, float* %assignment_tmp124
  %363 = load float* %assignment_tmp124
  store float %363, float* %f
  %364 = load float* %f
  %365 = load float addrspace(1)* @uf
  %366 = fcmp oeq float %364, %365
  br i1 %366, label %then126, label %else128

then126:                                          ; preds = %ifmerge118
  store i1 true, i1* %or_tmp127
  br label %ifmerge133

else128:                                          ; preds = %ifmerge118
  %367 = load float* %f
  %368 = load float addrspace(1)* @uf
  %369 = fcmp one float %367, %368
  br i1 %369, label %then129, label %else131

then129:                                          ; preds = %else128
  %370 = load float* %f
  %371 = load float addrspace(1)* @uf
  %372 = fcmp oeq float %370, %371
  store i1 %372, i1* %and_tmp130
  br label %ifmerge132

else131:                                          ; preds = %else128
  store i1 false, i1* %and_tmp130
  br label %ifmerge132

ifmerge132:                                       ; preds = %else131, %then129
  %373 = load i1* %and_tmp130
  %374 = load float* %f
  %375 = fcmp one float %374, 2.000000e+000
  %376 = xor i1 %373, %375
  store i1 %376, i1* %or_tmp127
  br label %ifmerge133

ifmerge133:                                       ; preds = %ifmerge132, %then126
  %377 = load i1* %or_tmp127
  br i1 %377, label %then134, label %ifmerge136

then134:                                          ; preds = %ifmerge133
  %378 = load float* %f
  %379 = fadd float %378, 1.000000e+000
  store float %379, float* %assignment_tmp135
  %380 = load float* %assignment_tmp135
  store float %380, float* %f
  br label %ifmerge136

ifmerge136:                                       ; preds = %then134, %ifmerge133
  %381 = load i1* %b
  br i1 %381, label %then137, label %else141

then137:                                          ; preds = %ifmerge136
  %382 = load i32* %i
  %swizzleTmp138 = call <4 x float> @llvm.gla.fSwizzle.v4f32.i32(i32 %382, i32 0)
  store <4 x float> %swizzleTmp138, <4 x float>* %vec_ctor
  %383 = load float* %f
  %swizzleTmp140 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %383, i32 0)
  store <4 x float> %swizzleTmp140, <4 x float>* %vec_ctor139
  %384 = load <4 x float>* %vec_ctor
  %385 = load <4 x float>* %vec_ctor139
  %386 = fadd <4 x float> %384, %385
  %387 = load <4 x float>* %v
  %388 = fadd <4 x float> %386, %387
  store <4 x float> %388, <4 x float>* %conditional_tmp
  br label %ifmerge142

else141:                                          ; preds = %ifmerge136
  %389 = load <4 x float>* %v
  store <4 x float> %389, <4 x float>* %conditional_tmp
  br label %ifmerge142

ifmerge142:                                       ; preds = %else141, %then137
  %390 = load <4 x float>* %conditional_tmp
  store <4 x float> %390, <4 x float>* %assignment_tmp143
  %391 = load <4 x float>* %assignment_tmp143
  store <4 x float> %391, <4 x float>* @gl_FragColor
  %392 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %392)
  ret void
}

declare <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.i1(<4 x float>, <4 x float>, i1) nounwind readnone

declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.fAbs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.fSign.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.fMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.fMax.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.fClamp.i32.i32.i32.i32(i32, i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare float @llvm.gla.fLength.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fDistance.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fDot.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32(<4 x float>, i32) nounwind readnone

declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v3f32(<3 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.i32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@uv4 = external addrspace(1) constant <4 x float>
@ub = external addrspace(1) constant i1
@uf = external addrspace(1) constant float
@ui = external addrspace(1) constant i32
@ub41 = external addrspace(1) constant <4 x i1>
@ub42 = external addrspace(1) constant <4 x i1>

define void @main() {
entry:
  %0 = load <4 x float> addrspace(1)* @uv4
  %radians = call <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float> %0)
  %degrees = call <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float> %radians)
  %1 = fadd <4 x float> %radians, %degrees
  %sin = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %1)
  %2 = fadd <4 x float> %1, %sin
  %cos = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %2)
  %3 = fadd <4 x float> %2, %cos
  %tan = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %3)
  %4 = fadd <4 x float> %3, %tan
  %asin = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %4)
  %5 = fadd <4 x float> %4, %asin
  %acos = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %5)
  %6 = fadd <4 x float> %5, %acos
  %atan = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %6)
  %7 = fadd <4 x float> %6, %atan
  %sinh = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %7)
  %8 = fadd <4 x float> %7, %sinh
  %cosh = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %8)
  %9 = fadd <4 x float> %8, %cosh
  %tanh = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %9)
  %10 = fadd <4 x float> %9, %tanh
  %pow = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %10, <4 x float> %10)
  %11 = fadd <4 x float> %10, %pow
  %exp = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %11)
  %12 = fadd <4 x float> %11, %exp
  %log = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %12)
  %13 = fadd <4 x float> %12, %log
  %exp2 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %13)
  %14 = fadd <4 x float> %13, %exp2
  %log2 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %14)
  %15 = fadd <4 x float> %14, %log2
  %sqrt = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %15)
  %16 = fadd <4 x float> %15, %sqrt
  %inversesqrt = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %16)
  %17 = fadd <4 x float> %16, %inversesqrt
  %abs = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %17)
  %18 = fadd <4 x float> %17, %abs
  %sign = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %18)
  %19 = fadd <4 x float> %18, %sign
  %floor = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %19)
  %20 = fadd <4 x float> %19, %floor
  %ceil = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %20)
  %21 = fadd <4 x float> %20, %ceil
  %fract = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %21)
  %22 = fadd <4 x float> %21, %fract
  %23 = frem <4 x float> %22, %22
  %24 = fadd <4 x float> %22, %23
  %min = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %24, <4 x float> %0)
  %25 = fadd <4 x float> %24, %min
  %max = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %25, <4 x float> %0)
  %26 = fadd <4 x float> %25, %max
  %clamp = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %26, <4 x float> %0, <4 x float> %0)
  %27 = fadd <4 x float> %26, %clamp
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %27, <4 x float> %27, <4 x float> %27)
  %28 = fadd <4 x float> %27, %mix
  %29 = load i1 addrspace(1)* @ub
  %mix29 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.i1(<4 x float> %28, <4 x float> %28, i1 %29)
  %30 = fadd <4 x float> %28, %mix29
  %step = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %30, <4 x float> %30)
  %31 = fadd <4 x float> %30, %step
  %smoothstep = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %31, <4 x float> %31, <4 x float> %31)
  %32 = fadd <4 x float> %31, %smoothstep
  %normalize = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %32)
  %33 = fadd <4 x float> %32, %normalize
  %faceforward = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %33, <4 x float> %33, <4 x float> %33)
  %34 = fadd <4 x float> %33, %faceforward
  %reflect = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %34, <4 x float> %34)
  %35 = fadd <4 x float> %34, %reflect
  %36 = load float addrspace(1)* @uf
  %refract = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %35, <4 x float> %35, float %36)
  %37 = fadd <4 x float> %35, %refract
  %dFdx = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %37)
  %38 = fadd <4 x float> %37, %dFdx
  %dFdy = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %38)
  %39 = fadd <4 x float> %38, %dFdy
  %fwidth = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %39)
  %40 = fadd <4 x float> %39, %fwidth
  %41 = load i32 addrspace(1)* @ui
  %abs42 = call i32 @llvm.gla.fAbs.i32.i32(i32 %41)
  %sign45 = call i32 @llvm.gla.fSign.i32.i32(i32 %abs42)
  %42 = add i32 %sign45, %abs42
  %min48 = call i32 @llvm.gla.fMin.i32.i32.i32(i32 %42, i32 %41)
  %43 = add i32 %min48, %42
  %max51 = call i32 @llvm.gla.fMax.i32.i32.i32(i32 %43, i32 %41)
  %44 = add i32 %max51, %43
  %clamp54 = call i32 @llvm.gla.fClamp.i32.i32.i32.i32(i32 %44, i32 %41, i32 %41)
  %45 = add i32 %clamp54, %44
  %46 = fcmp olt <4 x float> %40, %40
  %any = call i1 @llvm.gla.any.v4i1(<4 x i1> %46)
  br i1 %any, label %then, label %else

then:                                             ; preds = %entry
  %47 = fcmp ole <4 x float> %40, %40
  %any58 = call i1 @llvm.gla.any.v4i1(<4 x i1> %47)
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %and_tmp.0 = phi i1 [ %any58, %then ], [ false, %else ]
  br i1 %and_tmp.0, label %then60, label %else64

then60:                                           ; preds = %ifmerge
  %48 = fcmp ogt <4 x float> %40, %40
  %any62 = call i1 @llvm.gla.any.v4i1(<4 x i1> %48)
  br label %ifmerge65

else64:                                           ; preds = %ifmerge
  br label %ifmerge65

ifmerge65:                                        ; preds = %else64, %then60
  %and_tmp63.0 = phi i1 [ %any62, %then60 ], [ false, %else64 ]
  br i1 %and_tmp63.0, label %then67, label %else71

then67:                                           ; preds = %ifmerge65
  %49 = fcmp oge <4 x float> %40, %40
  %any69 = call i1 @llvm.gla.any.v4i1(<4 x i1> %49)
  br label %ifmerge72

else71:                                           ; preds = %ifmerge65
  br label %ifmerge72

ifmerge72:                                        ; preds = %else71, %then67
  %and_tmp70.0 = phi i1 [ %any69, %then67 ], [ false, %else71 ]
  br i1 %and_tmp70.0, label %then74, label %else78

then74:                                           ; preds = %ifmerge72
  %50 = load <4 x i1> addrspace(1)* @ub41
  %51 = load <4 x i1> addrspace(1)* @ub42
  %52 = icmp eq <4 x i1> %50, %51
  %any76 = call i1 @llvm.gla.any.v4i1(<4 x i1> %52)
  br label %ifmerge79

else78:                                           ; preds = %ifmerge72
  br label %ifmerge79

ifmerge79:                                        ; preds = %else78, %then74
  %and_tmp77.0 = phi i1 [ %any76, %then74 ], [ false, %else78 ]
  br i1 %and_tmp77.0, label %then81, label %else85

then81:                                           ; preds = %ifmerge79
  %53 = load <4 x i1> addrspace(1)* @ub41
  %54 = load <4 x i1> addrspace(1)* @ub42
  %55 = icmp ne <4 x i1> %53, %54
  %any83 = call i1 @llvm.gla.any.v4i1(<4 x i1> %55)
  br label %ifmerge86

else85:                                           ; preds = %ifmerge79
  br label %ifmerge86

ifmerge86:                                        ; preds = %else85, %then81
  %and_tmp84.0 = phi i1 [ %any83, %then81 ], [ false, %else85 ]
  br i1 %and_tmp84.0, label %then88, label %else92

then88:                                           ; preds = %ifmerge86
  %56 = load <4 x i1> addrspace(1)* @ub41
  %any90 = call i1 @llvm.gla.any.v4i1(<4 x i1> %56)
  br label %ifmerge93

else92:                                           ; preds = %ifmerge86
  br label %ifmerge93

ifmerge93:                                        ; preds = %else92, %then88
  %and_tmp91.0 = phi i1 [ %any90, %then88 ], [ false, %else92 ]
  br i1 %and_tmp91.0, label %then95, label %else97

then95:                                           ; preds = %ifmerge93
  %57 = load <4 x i1> addrspace(1)* @ub41
  %all = call i1 @llvm.gla.all.v4i1(<4 x i1> %57)
  br label %ifmerge98

else97:                                           ; preds = %ifmerge93
  br label %ifmerge98

ifmerge98:                                        ; preds = %else97, %then95
  %and_tmp96.0 = phi i1 [ %all, %then95 ], [ false, %else97 ]
  br i1 %and_tmp96.0, label %then100, label %else104

then100:                                          ; preds = %ifmerge98
  %58 = load <4 x i1> addrspace(1)* @ub41
  %59 = xor <4 x i1> %58, <i1 true, i1 true, i1 true, i1 true>
  %any102 = call i1 @llvm.gla.any.v4i1(<4 x i1> %59)
  br label %ifmerge105

else104:                                          ; preds = %ifmerge98
  br label %ifmerge105

ifmerge105:                                       ; preds = %else104, %then100
  %and_tmp103.0 = phi i1 [ %any102, %then100 ], [ false, %else104 ]
  %60 = add i32 %41, %45
  %61 = mul i32 %60, %45
  %62 = sub i32 %61, %41
  %63 = sdiv i32 %62, %45
  %64 = srem i32 %63, %41
  %65 = icmp eq i32 %64, %41
  br i1 %65, label %then109, label %else110

then109:                                          ; preds = %ifmerge105
  br label %ifmerge115

else110:                                          ; preds = %ifmerge105
  %66 = icmp ne i32 %64, %41
  br i1 %66, label %then111, label %else113

then111:                                          ; preds = %else110
  br label %ifmerge114

else113:                                          ; preds = %else110
  br label %ifmerge114

ifmerge114:                                       ; preds = %else113, %then111
  %67 = icmp ne i32 %64, 2
  %68 = xor i1 false, %67
  br label %ifmerge115

ifmerge115:                                       ; preds = %ifmerge114, %then109
  %or_tmp.0 = phi i1 [ true, %then109 ], [ %68, %ifmerge114 ]
  br i1 %or_tmp.0, label %then116, label %ifmerge118

then116:                                          ; preds = %ifmerge115
  %69 = add i32 %64, 1
  br label %ifmerge118

ifmerge118:                                       ; preds = %then116, %ifmerge115
  %i.0 = phi i32 [ %69, %then116 ], [ %64, %ifmerge115 ]
  %70 = fadd float undef, %36
  %71 = fmul float %70, undef
  %72 = fsub float %71, %36
  %73 = fdiv float %72, undef
  %length = call float @llvm.gla.fLength.v4f32(<4 x float> %40)
  %74 = fadd float %73, %length
  %distance = call float @llvm.gla.fDistance.v4f32.v4f32(<4 x float> %40, <4 x float> %40)
  %75 = fadd float %74, %distance
  %dot = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %40, <4 x float> %40)
  %76 = fadd float %75, %dot
  %swizzleTmp = call <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32(<4 x float> %40, i32 36)
  %cross = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %swizzleTmp, <3 x float> %swizzleTmp)
  %swizzleTmp125 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %cross, i32 0)
  %77 = fadd float %76, %swizzleTmp125
  %78 = fcmp oeq float %77, %36
  br i1 %78, label %then126, label %else128

then126:                                          ; preds = %ifmerge118
  br label %ifmerge133

else128:                                          ; preds = %ifmerge118
  %79 = fcmp one float %77, %36
  br i1 %79, label %then129, label %else131

then129:                                          ; preds = %else128
  br label %ifmerge132

else131:                                          ; preds = %else128
  br label %ifmerge132

ifmerge132:                                       ; preds = %else131, %then129
  %80 = fcmp one float %77, 2.000000e+000
  %81 = xor i1 false, %80
  br label %ifmerge133

ifmerge133:                                       ; preds = %ifmerge132, %then126
  %or_tmp127.0 = phi i1 [ true, %then126 ], [ %81, %ifmerge132 ]
  br i1 %or_tmp127.0, label %then134, label %ifmerge136

then134:                                          ; preds = %ifmerge133
  %82 = fadd float %77, 1.000000e+000
  br label %ifmerge136

ifmerge136:                                       ; preds = %then134, %ifmerge133
  %f.0 = phi float [ %82, %then134 ], [ %77, %ifmerge133 ]
  br i1 %and_tmp103.0, label %then137, label %else141

then137:                                          ; preds = %ifmerge136
  %swizzleTmp138 = call <4 x float> @llvm.gla.fSwizzle.v4f32.i32(i32 %i.0, i32 0)
  %swizzleTmp140 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %f.0, i32 0)
  %83 = fadd <4 x float> %swizzleTmp138, %swizzleTmp140
  %84 = fadd <4 x float> %83, %40
  br label %ifmerge142

else141:                                          ; preds = %ifmerge136
  br label %ifmerge142

ifmerge142:                                       ; preds = %else141, %then137
  %conditional_tmp.0 = phi <4 x float> [ %84, %then137 ], [ %40, %else141 ]
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %conditional_tmp.0)
  ret void
}

declare <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.i1(<4 x float>, <4 x float>, i1) nounwind readnone

declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.fAbs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.fSign.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.fMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.fMax.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.fClamp.i32.i32.i32.i32(i32, i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare float @llvm.gla.fLength.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fDistance.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fDot.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32(<4 x float>, i32) nounwind readnone

declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v3f32(<3 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.i32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 3

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 3

***Unsupported functionality: Intrinsic argument count: 3

***Unsupported functionality: Intrinsic argument count: 4

***Unsupported functionality: Intrinsic argument count: 4

***Unsupported functionality: Intrinsic argument count: 4

***Unsupported functionality: Intrinsic argument count: 3

***Unsupported functionality: Intrinsic argument count: 4

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 4

***Unsupported functionality: Intrinsic argument count: 3

***Unsupported functionality: Intrinsic argument count: 4

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 3

***Unsupported functionality: Intrinsic argument count: 3

***Unsupported functionality: Intrinsic argument count: 4

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Opcode in Bottom IR: 42

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Opcode in Bottom IR: 42

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Opcode in Bottom IR: 42

***Unsupported functionality: Opcode in Bottom IR: 42

***Unsupported functionality: Opcode in Bottom IR: 42

***Unsupported functionality: Intrinsic argument count: 2

***Unsupported functionality: Intrinsic argument count: 3

***Unsupported functionality: Intrinsic argument count: 3

***Unsupported functionality: Intrinsic argument count: 3
compiling Operations.frag...
uniform ivec4 uiv4 ; 
uniform vec4 uv4 ; 
uniform bool ub ; 
uniform bvec4 ub41 , ub42 ; 
uniform float uf ; 
uniform int ui ; 
void  main (){
vec4 v ; float f ; bool b ; bvec4 bv4 ; int i ; v = radians ( uv4 ) ; v += degrees ( v ) ; v += sin ( v ) ; v += cos ( v ) ; v += tan ( v ) ; v += asin ( v ) ; v += acos ( v ) ; v += atan ( v ) ; v += sinh ( v ) ; v += cosh ( v ) ; v += tanh ( v ) ; v += pow ( v , v ) ; v += exp ( v ) ; v += log ( v ) ; v += exp2 ( v ) ; v += log2 ( v ) ; v += sqrt ( v ) ; v += inversesqrt ( v ) ; v += abs ( v ) ; v += sign ( v ) ; v += floor ( v ) ; v += ceil ( v ) ; v += fract ( v ) ; v += mod ( v , v ) ; v += min ( v , uv4 ) ; v += max ( v , uv4 ) ; v += clamp ( v , uv4 , uv4 ) ; v += mix ( v , v , v ) ; v += mix ( v , v , ub ) ; v += step ( v , v ) ; v += smoothstep ( v , v , v ) ; v += normalize ( v ) ; v += faceforward ( v , v , v ) ; v += reflect ( v , v ) ; v += refract ( v , v , uf ) ; v += dFdx ( v ) ; v += dFdy ( v ) ; v += fwidth ( v ) ; i = 0 ; i += abs ( ui ) ; i += sign ( i ) ; i += min ( i , ui ) ; i += max ( i , ui ) ; i += clamp ( i , ui , ui ) ; b = any ( lessThan ( v , v ) ) ; b = b && any ( lessThanEqual ( v , v ) ) ; b = b && any ( greaterThan ( v , v ) ) ; b = b && any ( greaterThanEqual ( v , v ) ) ; b = b && any ( equal ( ub41 , ub42 ) ) ; b = b && any ( notEqual ( ub41 , ub42 ) ) ; b = b && any ( ub41 ) ; b = b && all ( ub41 ) ; b = b && any ( not ( ub41 ) ) ; i = i + ui * i - ui / i ; i = i % ui ; if ( i == ui || i != ui && i == ui ^^ i != 2 ) ++ i ; f = f + uf * f - uf / f ; f += length ( v ) ; f += distance ( v , v ) ; f += dot ( v , v ) ; f += cross ( v . xyz , v . xyz ) . x ; if ( f == uf || f != uf && f == uf ^^ f != 2.000000 ) ++ f ; gl_FragColor = b ? vec4 ( i ) + vec4 ( f ) + v : vec4 ( i ) + vec4 ( f ) + v ; }



Info log for linking:
error: unresolved reference to function `abs'

(
(declare (uniform ) int ui)
(declare (uniform ) float uf)
(declare (uniform ) bvec4 ub42)
(declare (uniform ) bvec4 ub41)
(declare (uniform ) bool ub)
(declare (uniform ) vec4 uv4)
(declare (uniform ) ivec4 uiv4)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () bvec4 bv4)
      (declare () bool b)
      (declare () float f)
      (declare () vec4 v)
      (declare (temporary ) vec4 radians_retval)
      (assign (constant bool (1)) (xyzw) (var_ref radians_retval)  (call radians ((var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (var_ref radians_retval) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 degrees_retval)
      (assign (constant bool (1)) (xyzw) (var_ref degrees_retval)  (call degrees ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref degrees_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sin_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sin_retval)  (call sin ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sin_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 cos_retval)
      (assign (constant bool (1)) (xyzw) (var_ref cos_retval)  (call cos ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref cos_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 tan_retval)
      (assign (constant bool (1)) (xyzw) (var_ref tan_retval)  (call tan ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref tan_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 asin_retval)
      (assign (constant bool (1)) (xyzw) (var_ref asin_retval)  (call asin ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref asin_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 acos_retval)
      (assign (constant bool (1)) (xyzw) (var_ref acos_retval)  (call acos ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref acos_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 atan_retval)
      (assign (constant bool (1)) (xyzw) (var_ref atan_retval)  (call atan ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref atan_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sinh_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sinh_retval)  (call sinh ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sinh_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 cosh_retval)
      (assign (constant bool (1)) (xyzw) (var_ref cosh_retval)  (call cosh ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref cosh_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 tanh_retval)
      (assign (constant bool (1)) (xyzw) (var_ref tanh_retval)  (call tanh ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref tanh_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 pow_retval)
      (assign (constant bool (1)) (xyzw) (var_ref pow_retval)  (call pow ((var_ref v) (var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref pow_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 exp_retval)
      (assign (constant bool (1)) (xyzw) (var_ref exp_retval)  (call exp ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref exp_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 log_retval)
      (assign (constant bool (1)) (xyzw) (var_ref log_retval)  (call log ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref log_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 exp2_retval)
      (assign (constant bool (1)) (xyzw) (var_ref exp2_retval)  (call exp2 ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref exp2_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 log2_retval)
      (assign (constant bool (1)) (xyzw) (var_ref log2_retval)  (call log2 ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref log2_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sqrt_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sqrt_retval)  (call sqrt ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sqrt_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 inversesqrt_retval)
      (assign (constant bool (1)) (xyzw) (var_ref inversesqrt_retval)  (call inversesqrt ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref inversesqrt_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 abs_retval)
      (assign (constant bool (1)) (xyzw) (var_ref abs_retval)  (call abs ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref abs_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sign_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sign_retval)  (call sign ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sign_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 floor_retval)
      (assign (constant bool (1)) (xyzw) (var_ref floor_retval)  (call floor ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref floor_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 ceil_retval)
      (assign (constant bool (1)) (xyzw) (var_ref ceil_retval)  (call ceil ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref ceil_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 fract_retval)
      (assign (constant bool (1)) (xyzw) (var_ref fract_retval)  (call fract ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref fract_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mod_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mod_retval)  (call mod ((var_ref v) (var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mod_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 min_retval)
      (assign (constant bool (1)) (xyzw) (var_ref min_retval)  (call min ((var_ref v) (var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref min_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 max_retval)
      (assign (constant bool (1)) (xyzw) (var_ref max_retval)  (call max ((var_ref v) (var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref max_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 clamp_retval)
      (assign (constant bool (1)) (xyzw) (var_ref clamp_retval)  (call clamp ((var_ref v) (var_ref uv4) (var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref clamp_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref v) (var_ref v) (var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref v) (var_ref v) (expression float b2f (var_ref ub) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 step_retval)
      (assign (constant bool (1)) (xyzw) (var_ref step_retval)  (call step ((var_ref v) (var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref step_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 smoothstep_retval)
      (assign (constant bool (1)) (xyzw) (var_ref smoothstep_retval)  (call smoothstep ((var_ref v) (var_ref v) (var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref smoothstep_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 normalize_retval)
      (assign (constant bool (1)) (xyzw) (var_ref normalize_retval)  (call normalize ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref normalize_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 faceforward_retval)
      (assign (constant bool (1)) (xyzw) (var_ref faceforward_retval)  (call faceforward ((var_ref v) (var_ref v) (var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref faceforward_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 reflect_retval)
      (assign (constant bool (1)) (xyzw) (var_ref reflect_retval)  (call reflect ((var_ref v) (var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref reflect_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 refract_retval)
      (assign (constant bool (1)) (xyzw) (var_ref refract_retval)  (call refract ((var_ref v) (var_ref v) (var_ref uf) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref refract_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 dFdx_retval)
      (assign (constant bool (1)) (xyzw) (var_ref dFdx_retval)  (call dFdx ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref dFdx_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 dFdy_retval)
      (assign (constant bool (1)) (xyzw) (var_ref dFdy_retval)  (call dFdy ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref dFdy_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 fwidth_retval)
      (assign (constant bool (1)) (xyzw) (var_ref fwidth_retval)  (call fwidth ((var_ref v) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref fwidth_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (constant int (0)) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int abs_retval)
      (assign (constant bool (1)) (x) (var_ref abs_retval)  (call abs ((var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref abs_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int sign_retval)
      (assign (constant bool (1)) (x) (var_ref sign_retval)  (call sign ((var_ref i) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref sign_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int min_retval)
      (assign (constant bool (1)) (x) (var_ref min_retval)  (call min ((var_ref i) (var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref min_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int max_retval)
      (assign (constant bool (1)) (x) (var_ref max_retval)  (call max ((var_ref i) (var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref max_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int clamp_retval)
      (assign (constant bool (1)) (x) (var_ref clamp_retval)  (call clamp ((var_ref i) (var_ref ui) (var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref clamp_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bvec4 lessThan_retval)
      (assign (constant bool (1)) (xyzw) (var_ref lessThan_retval)  (call lessThan ((var_ref v) (var_ref v) ))
) 
      (declare (temporary ) bool any_retval)
      (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref lessThan_retval) ))
) 
      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (var_ref any_retval) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref b) (
        (declare (temporary ) bvec4 lessThanEqual_retval)
        (assign (constant bool (1)) (xyzw) (var_ref lessThanEqual_retval)  (call lessThanEqual ((var_ref v) (var_ref v) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref lessThanEqual_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (var_ref and_tmp) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref b) (
        (declare (temporary ) bvec4 greaterThan_retval)
        (assign (constant bool (1)) (xyzw) (var_ref greaterThan_retval)  (call greaterThan ((var_ref v) (var_ref v) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref greaterThan_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (var_ref and_tmp) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref b) (
        (declare (temporary ) bvec4 greaterThanEqual_retval)
        (assign (constant bool (1)) (xyzw) (var_ref greaterThanEqual_retval)  (call greaterThanEqual ((var_ref v) (var_ref v) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref greaterThanEqual_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (var_ref and_tmp) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref b) (
        (declare (temporary ) bvec4 equal_retval)
        (assign (constant bool (1)) (xyzw) (var_ref equal_retval)  (call equal ((var_ref ub41) (var_ref ub42) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref equal_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (var_ref and_tmp) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref b) (
        (declare (temporary ) bvec4 notEqual_retval)
        (assign (constant bool (1)) (xyzw) (var_ref notEqual_retval)  (call notEqual ((var_ref ub41) (var_ref ub42) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref notEqual_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (var_ref and_tmp) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref b) (
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref ub41) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (var_ref and_tmp) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref b) (
        (declare (temporary ) bool all_retval)
        (assign (constant bool (1)) (x) (var_ref all_retval)  (call all ((var_ref ub41) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref all_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (var_ref and_tmp) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref b) (
        (declare (temporary ) bvec4 not_retval)
        (assign (constant bool (1)) (xyzw) (var_ref not_retval)  (call not ((var_ref ub41) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref not_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (var_ref and_tmp) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int / (expression int - (expression int * (expression int + (var_ref i) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) (var_ref i) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int % (var_ref i) (var_ref ui) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref i) (var_ref ui) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref i) (var_ref ui) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all_equal (var_ref i) (var_ref ui) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (expression bool ^^ (var_ref and_tmp) (expression bool any_nequal (var_ref i) (constant int (2)) ) ) ) 
      ))

      (if (var_ref or_tmp) (
        (declare (temporary ) int assignment_tmp)
        (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (constant int (1)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      )
      ())

      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float / (expression float - (expression float * (expression float + (var_ref f) (var_ref uf) ) (var_ref f) ) (var_ref uf) ) (var_ref f) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) float length_retval)
      (assign (constant bool (1)) (x) (var_ref length_retval)  (call length ((var_ref v) ))
) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (var_ref length_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) float distance_retval)
      (assign (constant bool (1)) (x) (var_ref distance_retval)  (call distance ((var_ref v) (var_ref v) ))
) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (var_ref distance_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) float dot_retval)
      (assign (constant bool (1)) (x) (var_ref dot_retval)  (call dot ((var_ref v) (var_ref v) ))
) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (var_ref dot_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec3 cross_retval)
      (assign (constant bool (1)) (xyz) (var_ref cross_retval)  (call cross ((swiz xyz (var_ref v) )(swiz xyz (var_ref v) )))
) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (swiz x (var_ref cross_retval) )) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref f) (var_ref uf) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref f) (var_ref uf) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all_equal (var_ref f) (var_ref uf) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (expression bool ^^ (var_ref and_tmp) (expression bool any_nequal (var_ref f) (constant float (2.000000)) ) ) ) 
      ))

      (if (var_ref or_tmp) (
        (declare (temporary ) float assignment_tmp)
        (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      )
      ())

      (declare (temporary ) vec4 conditional_tmp)
      (if (var_ref b) (
        (declare (temporary ) vec4 vec_ctor)
        (assign (constant bool (1)) (xyzw) (var_ref vec_ctor)  (swiz xxxx (expression float i2f (var_ref i) ) )) 
        (declare (temporary ) vec4 vec_ctor)
        (assign (constant bool (1)) (xyzw) (var_ref vec_ctor)  (swiz xxxx (var_ref f) )) 
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (expression vec4 + (expression vec4 + (var_ref vec_ctor) (var_ref vec_ctor) ) (var_ref v) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (var_ref v) ) 
      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (var_ref conditional_tmp) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
    ))

)


)
LunarGoo
#version 130
uniform vec4 uv4;
uniform bool ub;
uniform float uf;
uniform int ui;
uniform bvec4 ub41;
uniform bvec4 ub42;
const bool const122;
const bvec4 const134;
const bool const142;
const int const147;
const float const149;
const float const166;
const float const169;

void main()
{
    bool temp21;
    bool temp22;
    bool temp23;
    bool temp24;
    bool temp25;
    bool temp26;
    bool temp27;
    bool temp28;
    bool temp29;
    int temp30;
    bool temp31;
    float temp32;
    vec4 temp33;
    vec4 temp34 = radians(uv4);
    vec4 temp35 = degrees(temp34);
    vec4 temp36 = temp34 + temp35;
    vec4 temp37 = sin(temp36);
    vec4 temp38 = temp36 + temp37;
    vec4 temp39 = cos(temp38);
    vec4 temp40 = temp38 + temp39;
    vec4 temp41 = tan(temp40);
    vec4 temp42 = temp40 + temp41;
    vec4 temp43 = asin(temp42);
    vec4 temp44 = temp42 + temp43;
    vec4 temp45 = acos(temp44);
    vec4 temp46 = temp44 + temp45;
    vec4 temp47 = atan(temp46);
    vec4 temp48 = temp46 + temp47;
    vec4 temp49 = sinh(temp48);
    vec4 temp50 = temp48 + temp49;
    vec4 temp51 = cosh(temp50);
    vec4 temp52 = temp50 + temp51;
    vec4 temp53 = tanh(temp52);
    vec4 temp54 = temp52 + temp53;
    vec4 temp55 = pow(temp54, temp54);
    vec4 temp56 = temp54 + temp55;
    vec4 temp57 = exp(temp56);
    vec4 temp58 = temp56 + temp57;
    vec4 temp59 = log(temp58);
    vec4 temp60 = temp58 + temp59;
    vec4 temp61 = exp2(temp60);
    vec4 temp62 = temp60 + temp61;
    vec4 temp63 = log2(temp62);
    vec4 temp64 = temp62 + temp63;
    vec4 temp65 = sqrt(temp64);
    vec4 temp66 = temp64 + temp65;
    vec4 temp67 = inversesqrt(temp66);
    vec4 temp68 = temp66 + temp67;
    vec4 temp69 = abs(temp68);
    vec4 temp70 = temp68 + temp69;
    vec4 temp71 = sign(temp70);
    vec4 temp72 = temp70 + temp71;
    vec4 temp73 = floor(temp72);
    vec4 temp74 = temp72 + temp73;
    vec4 temp75 = ceiling(temp74);
    vec4 temp76 = temp74 + temp75;
    vec4 temp77 = fract(temp76);
    vec4 temp78 = temp76 + temp77;
    vec4 temp79 = temp78 % temp78;
    vec4 temp80 = temp78 + temp79;
    vec4 temp81 = min(temp80, uv4);
    vec4 temp82 = temp80 + temp81;
    vec4 temp83 = max(temp82, uv4);
    vec4 temp84 = temp82 + temp83;
    vec4 temp85 = clamp(temp84, uv4, uv4);
    vec4 temp86 = temp84 + temp85;
    vec4 temp87 = mix(temp86, temp86, temp86);
    vec4 temp88 = temp86 + temp87;
    vec4 temp89 = mix(temp88, temp88, ub);
    vec4 temp90 = temp88 + temp89;
    vec4 temp91 = step(temp90, temp90);
    vec4 temp92 = temp90 + temp91;
    vec4 temp93 = smoothStep(temp92, temp92, temp92);
    vec4 temp94 = temp92 + temp93;
    vec4 temp95 = normalize(temp94);
    vec4 temp96 = temp94 + temp95;
    vec4 temp97 = faceforward(temp96, temp96, temp96);
    vec4 temp98 = temp96 + temp97;
    vec4 temp99 = reflect(temp98, temp98);
    vec4 temp100 = temp98 + temp99;
    vec4 temp101 = refract(temp100, temp100, uf);
    vec4 temp102 = temp100 + temp101;
    vec4 temp103 = dFdx(temp102);
    vec4 temp104 = temp102 + temp103;
    vec4 temp105 = dFdy(temp104);
    vec4 temp106 = temp104 + temp105;
    vec4 temp107 = fwidth(temp106);
    vec4 temp108 = temp106 + temp107;
    int temp109 = abs(ui);
    int temp110 = sign(temp109);
    int temp111 = temp110 + temp109;
    int temp112 = min(temp111, ui);
    int temp113 = temp112 + temp111;
    int temp114 = max(temp113, ui);
    int temp115 = temp114 + temp113;
    int temp116 = clamp(temp115, ui, ui);
    int temp117 = temp116 + temp115;
    bvec4 temp118 = temp108 < temp108;
    bool temp119 = any(temp118);
    if (temp119) {
        bvec4 temp120 = temp108 <= temp108;
        bool temp121 = any(temp120);
        temp21 = temp121;
    }
    else {
        temp21 = const122;
    }
    
    if (temp21) {
        bvec4 temp123 = temp108 > temp108;
        bool temp124 = any(temp123);
        temp22 = temp124;
    }
    else {
        temp22 = const122;
    }
    
    if (temp22) {
        bvec4 temp125 = temp108 >= temp108;
        bool temp126 = any(temp125);
        temp23 = temp126;
    }
    else {
        temp23 = const122;
    }
    
    if (temp23) {
        bool temp127 = any(bvec4 temp128);
        temp24 = temp127;
    }
    else {
        temp24 = const122;
    }
    
    if (temp24) {
        bool temp129 = any(bvec4 temp130);
        temp25 = temp129;
    }
    else {
        temp25 = const122;
    }
    
    if (temp25) {
        bool temp131 = any(ub41);
        temp26 = temp131;
    }
    else {
        temp26 = const122;
    }
    
    if (temp26) {
        bool temp132 = all(ub41);
        temp27 = temp132;
    }
    else {
        temp27 = const122;
    }
    
    if (temp27) {
        bvec4 temp133 = ub41 ^ const134;
        bool temp135 = any(temp133);
        temp28 = temp135;
    }
    else {
        temp28 = const122;
    }
    
    int temp136 = ui + temp117;
    int temp137 = temp136 * temp117;
    int temp138 = temp137 - ui;
    int temp139 = temp138 / temp117;
    int temp140 = temp139 % ui;
    if (bool temp141) {
        temp29 = const142;
    }
    else {
        if (bool temp143) {
        }
        else {
        }
        
        bool temp144 = const122 ^ bool temp145;
        temp29 = temp144;
    }
    
    temp30 = temp140;
    if (temp29) {
        int temp146 = temp140 + const147;
        temp30 = temp146;
    }
    
    float temp148 = const149 + uf;
    float temp150 = temp148 * const149;
    float temp151 = temp150 - uf;
    float temp152 = temp151 / const149;
    float temp153 = length(temp108);
    float temp154 = temp152 + temp153;
    float temp155 = distance(temp108, temp108);
    float temp156 = temp154 + temp155;
    float temp157 = dot(temp108, temp108);
    float temp158 = temp156 + temp157;
    vec3 temp159 = temp108.xyzx;
    vec3 temp160 = cross(temp159, temp159);
    float temp161 = temp160.xxxx;
    float temp162 = temp158 + temp161;
    bool temp163 = temp162 == uf;
    if (temp163) {
        temp31 = const142;
    }
    else {
        bool temp164 = temp162 != uf;
        if (temp164) {
        }
        else {
        }
        
        bool temp165 = temp162 != const166;
        bool temp167 = const122 ^ temp165;
        temp31 = temp167;
    }
    
    temp32 = temp162;
    if (temp31) {
        float temp168 = temp162 + const169;
        temp32 = temp168;
    }
    
    if (temp28) {
        vec4 temp170 = temp30.xxxx;
        vec4 temp171 = temp32.xxxx;
        vec4 temp172 = temp170 + temp171;
        vec4 temp173 = temp172 + temp108;
        temp33 = temp173;
    }
    else {
        temp33 = temp108;
    }
    
    gl_FragColor = temp33;
    return;
}
