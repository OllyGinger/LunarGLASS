
Top IR:
; ModuleID = 'Top'

%s1 = type { i32, float }
%s2 = type { i32, float, %s1, <4 x float> }
%s3 = type { %s2, i32, float, %s1 }

@gl_MaxLights = internal global i32 8
@gl_MaxClipPlanes = internal global i32 8
@gl_MaxTextureUnits = internal global i32 2
@gl_MaxTextureCoords = internal global i32 4
@gl_MaxVertexAttribs = internal global i32 16
@gl_MaxVertexUniformComponents = internal global i32 512
@gl_MaxVaryingFloats = internal global i32 32
@gl_MaxVertexTextureImageUnits = internal global i32 0
@gl_MaxCombinedTextureImageUnits = internal global i32 2
@gl_MaxTextureImageUnits = internal global i32 2
@gl_MaxFragmentUniformComponents = internal global i32 64
@gl_MaxDrawBuffers = internal global i32 2
@foo3 = external addrspace(1) constant %s3
@condition = external addrspace(1) constant i32
@uFloatArray = external addrspace(1) constant [16 x float]
@"sampler2D sampler" = external addrspace(1) constant i32
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %texture2D_retval = alloca <4 x float>
  %locals2 = alloca %s2
  %localFArray = alloca [16 x float]
  %localIArray = alloca [8 x i32]
  %localArray = alloca [16 x float]
  %locals21 = load %s2 addrspace(1)* getelementptr inbounds (%s3 addrspace(1)* @foo3, i32 0, i32 0)
  store %s2 %locals21, %s2* %locals2
  %0 = load i32 addrspace(1)* getelementptr inbounds (%s3 addrspace(1)* @foo3, i32 0, i32 0, i32 0)
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load %s2* %locals2
  %3 = insertvalue %s2 %2, float 1.000000e+00, 2, 1
  store %s2 %3, %s2* %locals2
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %localFArray2 = extractelement <2 x float> %coord, i32 0
  %4 = load [16 x float]* %localFArray
  %5 = insertvalue [16 x float] %4, float %localFArray2, 4
  store [16 x float] %5, [16 x float]* %localFArray
  %localIArray3 = load i32 addrspace(1)* getelementptr inbounds (%s3 addrspace(1)* @foo3, i32 0, i32 0, i32 0)
  %6 = load [8 x i32]* %localIArray
  %7 = insertvalue [8 x i32] %6, i32 %localIArray3, 2
  store [8 x i32] %7, [8 x i32]* %localIArray
  br label %ifmerge

else:                                             ; preds = %entry
  %coord4 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %locals25 = extractelement <2 x float> %coord4, i32 0
  %8 = load %s2* %locals2
  %9 = insertvalue %s2 %8, float %locals25, 2, 1
  store %s2 %9, %s2* %locals2
  %10 = load [16 x float]* %localFArray
  %11 = insertvalue [16 x float] %10, float 1.000000e+00, 4
  store [16 x float] %11, [16 x float]* %localFArray
  %12 = load [8 x i32]* %localIArray
  %13 = insertvalue [8 x i32] %12, i32 0, 2
  store [8 x i32] %13, [8 x i32]* %localIArray
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %14 = load [8 x i32]* %localIArray
  %15 = extractvalue [8 x i32] %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %then6, label %ifmerge8

then6:                                            ; preds = %ifmerge
  %17 = load [16 x float]* %localFArray
  %18 = extractvalue [16 x float] %17, 4
  %localFArray7 = fadd float %18, 1.000000e+00
  %19 = load [16 x float]* %localFArray
  %20 = insertvalue [16 x float] %19, float %localFArray7, 4
  store [16 x float] %20, [16 x float]* %localFArray
  br label %ifmerge8

ifmerge8:                                         ; preds = %then6, %ifmerge
  %coord9 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %localArray10 = extractelement <2 x float> %coord9, i32 0
  %21 = load [16 x float]* %localArray
  %22 = insertvalue [16 x float] %21, float %localArray10, 5
  store [16 x float] %22, [16 x float]* %localArray
  %23 = load i32 addrspace(1)* @condition
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %then11, label %ifmerge13

then11:                                           ; preds = %ifmerge8
  %localArray12 = load [16 x float] addrspace(1)* @uFloatArray
  store [16 x float] %localArray12, [16 x float]* %localArray
  br label %ifmerge13

ifmerge13:                                        ; preds = %then11, %ifmerge8
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 1)
  %25 = load %s2* %locals2
  %26 = extractvalue %s2 %25, 3
  %27 = extractelement <4 x float> %color, i32 0
  %28 = insertelement <4 x float> %26, float %27, i32 0
  %29 = extractelement <4 x float> %color, i32 1
  %30 = insertelement <4 x float> %28, float %29, i32 1
  %31 = extractelement <4 x float> %color, i32 2
  %32 = insertelement <4 x float> %30, float %31, i32 2
  %33 = extractelement <4 x float> %color, i32 3
  %locals214 = insertelement <4 x float> %32, float %33, i32 3
  %34 = insertvalue %s2 %25, <4 x float> %locals214, 3
  store %s2 %34, %s2* %locals2
  %coord15 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %35 = extractelement <2 x float> %coord15, i32 1
  %36 = load %s2* %locals2
  %37 = extractvalue %s2 %36, 3
  %locals216 = insertelement <4 x float> %37, float %35, i32 2
  %38 = insertvalue %s2 %36, <4 x float> %locals216, 3
  store %s2 %38, %s2* %locals2
  %39 = load i32 addrspace(1)* @"sampler2D sampler"
  %coord17 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %texture2D_retval18 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %39, i32 0, <2 x float> %coord17)
  store <4 x float> %texture2D_retval18, <4 x float>* %texture2D_retval
  %40 = load %s2* %locals2
  %41 = extractvalue %s2 %40, 3
  %42 = load [16 x float]* %localFArray
  %43 = extractvalue [16 x float] %42, 4
  %44 = load %s2* %locals2
  %45 = extractvalue %s2 %44, 2, 1
  %46 = fadd float %43, %45
  %47 = load [16 x float]* %localArray
  %48 = extractvalue [16 x float] %47, 5
  %49 = fadd float %46, %48
  %50 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %49, i32 0)
  %51 = fmul <4 x float> %41, %50
  %52 = load <4 x float>* %texture2D_retval
  %gl_FragColor = fmul <4 x float> %51, %52
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %53 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %53)
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

%s1 = type { i32, float }
%s2 = type { i32, float, %s1, <4 x float> }
%s3 = type { %s2, i32, float, %s1 }

@foo3 = external addrspace(1) constant %s3
@condition = external addrspace(1) constant i32
@uFloatArray = external addrspace(1) constant [16 x float]
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %locals21 = load %s2 addrspace(1)* getelementptr inbounds (%s3 addrspace(1)* @foo3, i32 0, i32 0)
  %0 = load i32 addrspace(1)* getelementptr inbounds (%s3 addrspace(1)* @foo3, i32 0, i32 0, i32 0)
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = insertvalue %s2 %locals21, float 1.000000e+00, 2, 1
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %localFArray2 = extractelement <2 x float> %coord, i32 0
  %3 = insertvalue [16 x float] undef, float %localFArray2, 4
  %4 = insertvalue [8 x i32] undef, i32 %0, 2
  br label %ifmerge

else:                                             ; preds = %entry
  %coord4 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %locals25 = extractelement <2 x float> %coord4, i32 0
  %5 = insertvalue %s2 %locals21, float %locals25, 2, 1
  %6 = insertvalue [16 x float] undef, float 1.000000e+00, 4
  %7 = insertvalue [8 x i32] undef, i32 0, 2
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %localIArray.0 = phi [8 x i32] [ %4, %then ], [ %7, %else ]
  %localFArray.0 = phi [16 x float] [ %3, %then ], [ %6, %else ]
  %locals2.0 = phi %s2 [ %2, %then ], [ %5, %else ]
  %8 = extractvalue [8 x i32] %localIArray.0, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %then6, label %ifmerge8

then6:                                            ; preds = %ifmerge
  %10 = extractvalue [16 x float] %localFArray.0, 4
  %localFArray7 = fadd float %10, 1.000000e+00
  %11 = insertvalue [16 x float] %localFArray.0, float %localFArray7, 4
  br label %ifmerge8

ifmerge8:                                         ; preds = %then6, %ifmerge
  %localFArray.1 = phi [16 x float] [ %11, %then6 ], [ %localFArray.0, %ifmerge ]
  %coord9 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %localArray10 = extractelement <2 x float> %coord9, i32 0
  %12 = insertvalue [16 x float] undef, float %localArray10, 5
  %13 = load i32 addrspace(1)* @condition
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %then11, label %ifmerge13

then11:                                           ; preds = %ifmerge8
  %localArray12 = load [16 x float] addrspace(1)* @uFloatArray
  br label %ifmerge13

ifmerge13:                                        ; preds = %then11, %ifmerge8
  %localArray.0 = phi [16 x float] [ %localArray12, %then11 ], [ %12, %ifmerge8 ]
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 1)
  %15 = extractvalue %s2 %locals2.0, 3
  %16 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v4f32.v4f32.v4f32.v4f32(<4 x float> %15, i32 15, <4 x float> %color, i32 0, <4 x float> %color, i32 1, <4 x float> %color, i32 2, <4 x float> %color, i32 3)
  %17 = insertvalue %s2 %locals2.0, <4 x float> %16, 3
  %18 = extractvalue %s2 %17, 3
  %19 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.v2f32.f32(<4 x float> %18, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, <2 x float> %coord9, i32 1, float 0.000000e+00, i32 -1)
  %20 = insertvalue %s2 %17, <4 x float> %19, 3
  %21 = load i32 addrspace(1)* @"sampler2D sampler"
  %texture2D_retval18 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %21, i32 0, <2 x float> %coord9)
  %22 = extractvalue %s2 %20, 3
  %23 = extractvalue [16 x float] %localFArray.1, 4
  %24 = extractvalue %s2 %20, 2, 1
  %25 = fadd float %23, %24
  %26 = extractvalue [16 x float] %localArray.0, 5
  %27 = fadd float %25, %26
  %28 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %27, i32 0)
  %29 = fmul <4 x float> %22, %28
  %gl_FragColor = fmul <4 x float> %29, %texture2D_retval18
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %gl_FragColor)
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.v2f32.f32(<4 x float>, i32, float, i32, float, i32, <2 x float>, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v4f32.v4f32.v4f32.v4f32(<4 x float>, i32, <4 x float>, i32, <4 x float>, i32, <4 x float>, i32, <4 x float>, i32) nounwind readnone

***Unsupported functionality: Basic Type in Bottom IR
compiling localAggregates.frag...
uniform sampler2D sampler ; 
varying vec2 coord ; 
varying vec4 color ; 
struct s1 { int i ; float f ; } ; 
struct s2 { int i ; float f ; s1 s1_1 ; vec4 bleh ; } ; 
struct s3 { s2 s2_1 ; int i ; float f ; s1 s1_1 ; } ; 
uniform s1 foo ; 
uniform s2 foo2 ; 
uniform s3 foo3 ; 
uniform float [ 16 ] uFloatArray ; 
uniform int condition ; 
void  main (){
s2 locals2 ; s3 locals3 ; float localFArray [ 16 ] ; int localIArray [ 8 ] ; locals2 = foo3 . s2_1 ; if ( foo3 . s2_1 . i > 0 ) {
locals2 . s1_1 . f = 1.000000 ; localFArray [ 4 ] = coord . x ; localIArray [ 2 ] = foo3 . s2_1 . i ; }
else {
locals2 . s1_1 . f = coord . x ; localFArray [ 4 ] = 1.000000 ; localIArray [ 2 ] = 0 ; }
if ( localIArray [ 2 ] == 0 ) ++ localFArray [ 4 ] ; float localArray [ 16 ] ; int x = 5 ; localArray [ x ] = coord . x ; if ( condition == 1 ) localArray = uFloatArray ; locals2 . bleh = color ; locals2 . bleh . z = coord . y ; gl_FragColor = locals2 . bleh * localFArray [ 4 ] + locals2 . s1_1 . f + localArray [ x ] * texture2D ( sampler , coord ) ; }



(
(declare (uniform ) int condition)
(declare (uniform ) (array float 16) uFloatArray)
(declare (uniform ) s3 foo3)
(declare (uniform ) s2 foo2)
(declare (uniform ) s1 foo)
(declare (in ) vec4 color)
(declare (in ) vec2 coord)
(declare (uniform ) sampler2D sampler)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () (array float 16) localArray)
      (declare () (array int 8) localIArray)
      (declare () (array float 16) localFArray)
      (declare () s2 locals2)
      (assign (constant bool (1)) () (var_ref locals2)  (record_ref (var_ref foo3)  s2_1) ) 
      (if (expression bool > (record_ref (record_ref (var_ref foo3)  s2_1)  i) (constant int (0)) ) (
        (assign (constant bool (1)) (x) (record_ref (record_ref (var_ref locals2)  s1_1)  f)  (constant float (1.000000)) ) 
        (assign (constant bool (1)) (x) (array_ref (var_ref localFArray) (constant int (4)) )  (swiz x (var_ref coord) )) 
        (assign (constant bool (1)) (x) (array_ref (var_ref localIArray) (constant int (2)) )  (record_ref (record_ref (var_ref foo3)  s2_1)  i) ) 
      )
      (
        (assign (constant bool (1)) (x) (record_ref (record_ref (var_ref locals2)  s1_1)  f)  (swiz x (var_ref coord) )) 
        (assign (constant bool (1)) (x) (array_ref (var_ref localFArray) (constant int (4)) )  (constant float (1.000000)) ) 
        (assign (constant bool (1)) (x) (array_ref (var_ref localIArray) (constant int (2)) )  (constant int (0)) ) 
      ))

      (if (expression bool all_equal (array_ref (var_ref localIArray) (constant int (2)) ) (constant int (0)) ) (
        (assign (constant bool (1)) (x) (array_ref (var_ref localFArray) (constant int (4)) )  (expression float + (array_ref (var_ref localFArray) (constant int (4)) ) (constant float (1.000000)) ) ) 
      )
      ())

      (assign (constant bool (1)) (x) (array_ref (var_ref localArray) (constant int (5)) )  (swiz x (var_ref coord) )) 
      (if (expression bool all_equal (var_ref condition) (constant int (1)) ) (
        (assign (constant bool (1)) () (var_ref localArray)  (var_ref uFloatArray) ) 
      )
      ())

      (assign (constant bool (1)) (xyzw) (record_ref (var_ref locals2)  bleh)  (var_ref color) ) 
      (assign (constant bool (1)) (z) (record_ref (var_ref locals2)  bleh)  (swiz y (var_ref coord) )) 
      (declare (temporary ) vec4 texture2D_retval)
      (assign (constant bool (1)) (xyzw) (var_ref texture2D_retval)  (call texture2D ((var_ref sampler) (var_ref coord) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (expression vec4 * (record_ref (var_ref locals2)  bleh) (expression float + (expression float + (array_ref (var_ref localFArray) (constant int (4)) ) (record_ref (record_ref (var_ref locals2)  s1_1)  f) ) (array_ref (var_ref localArray) (constant int (5)) ) ) ) (var_ref texture2D_retval) ) ) 
    ))

)


)