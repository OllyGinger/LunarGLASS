; ModuleID = 'Top'

@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %mix_retval = alloca <4 x float>
  %w = alloca <4 x float>
  %0 = load <4 x float> addrspace(1)* @u
  store <4 x float> %0, <4 x float>* %w
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %swizzleTmp = call <2 x float> @llvm.gla.fSwizzle.v2f32.v2f32(<2 x float> %t, i32 1)
  %1 = load <4 x float>* %w
  %2 = extractelement <2 x float> %swizzleTmp, i32 0
  %3 = insertelement <4 x float> %1, float %2, i32 1
  %4 = extractelement <2 x float> %swizzleTmp, i32 1
  %5 = insertelement <4 x float> %3, float %4, i32 3
  store <4 x float> %5, <4 x float>* %w
  %6 = load <4 x float>* %w
  %7 = load <4 x float> addrspace(1)* @u
  %8 = load float addrspace(1)* @blend
  %9 = fmul float %8, 0x3FFC9FBE80000000
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %6, <4 x float> %7, float %9)
  store <4 x float> %mix, <4 x float>* %mix_retval
  %10 = load <4 x float>* %mix_retval
  store <4 x float> %10, <4 x float>* @gl_FragColor
  %11 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %11)
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v2f32(<2 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float

define void @main() {
entry:
  %0 = load <4 x float> addrspace(1)* @u
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %swizzleTmp = call <2 x float> @llvm.gla.fSwizzle.v2f32.v2f32(<2 x float> %t, i32 1)
  %1 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v2f32.f32.v2f32(<4 x float> %0, i32 10, float 0.000000e+00, i32 -1, <2 x float> %swizzleTmp, i32 0, float 0.000000e+00, i32 -1, <2 x float> %swizzleTmp, i32 1)
  %2 = load float addrspace(1)* @blend
  %3 = fmul float %2, 0x3FFC9FBE80000000
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %1, <4 x float> %0, float %3)
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %mix)
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v2f32(<2 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v2f32.f32.v2f32(<4 x float>, i32, float, i32, <2 x float>, i32, float, i32, <2 x float>, i32) nounwind readnone
compiling swizzle.frag...
uniform float blend ; 
uniform vec4 u ; 
varying vec2 t ; 
void  main (){
float blendscale = 1.789000 ; vec4 w = u ; w . wy = t ; gl_FragColor = mix ( w , u , blend * blendscale ) ; }



(
(declare (in ) vec2 t)
(declare (uniform ) vec4 u)
(declare (uniform ) float blend)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 w)
      (assign (constant bool (1)) (xyzw) (var_ref w)  (var_ref u) ) 
      (assign (constant bool (1)) (yw) (var_ref w)  (swiz yx (var_ref t) )) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref w) (var_ref u) (expression float * (var_ref blend) (constant float (1.789000)) ) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref mix_retval) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform vec4 u;
uniform float blend;
in vec2 t;
const float const24 = 1.789;

void main()
{
    vec2 temp21 = t.yx;
    vec4 temp22 = u;
    temp22.yw = temp21
    float temp23 = blend * const24;
    vec4 temp25 = mix(temp22, u, temp23);
    gl_FragColor = temp25;
    return;
}
