
Top IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, float }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }

@gl_MaxLights = internal global i32 8
@gl_MaxClipPlanes = internal global i32 8
@gl_MaxTextureUnits = internal global i32 2
@gl_MaxTextureCoords = internal global i32 4
@gl_MaxVertexAttribs = internal global i32 16
@gl_MaxVertexUniformComponents = internal global i32 512
@gl_MaxVaryingFloats = internal global i32 32
@gl_MaxVertexTextureImageUnits = internal global i32 0
@gl_MaxCombinedTextureImageUnits = internal global i32 2
@gl_MaxTextureImageUnits = internal global i32 2
@gl_MaxFragmentUniformComponents = internal global i32 64
@gl_MaxDrawBuffers = internal global i32 2
@Count = external addrspace(1) constant i32
@foo3 = external addrspace(1) constant %lunarStruct3
@foo = external addrspace(1) constant %lunarStruct1
@foo2 = external addrspace(1) constant [5 x %lunarStruct2]
@"sampler2D sampler" = external addrspace(1) constant i32
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %texture2D_retval = alloca <4 x float>
  %assignment_tmp = alloca i32
  %scale = alloca float
  %iLocal = alloca i32
  %i = alloca i32
  %iLocal1 = load i32 addrspace(1)* @Count
  store i32 %iLocal1, i32* %iLocal
  %0 = load i32 addrspace(1)* getelementptr inbounds (%lunarStruct3 addrspace(1)* @foo3, i32 0, i32 0, i32 1, i32 0)
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32 addrspace(1)* @Count
  %assignment_tmp2 = add i32 %2, 1
  store i32 %assignment_tmp2, i32* %assignment_tmp
  %iLocal3 = load i32* %assignment_tmp
  store i32 %iLocal3, i32* %iLocal
  %3 = load i32 addrspace(1)* getelementptr inbounds (%lunarStruct1 addrspace(1)* @foo, i32 0, i32 0)
  %4 = getelementptr %lunarStruct3 addrspace(1)* @foo3, i32 0, i32 0, i32 %3, i32 0
  %5 = load i32 addrspace(1)* %4
  %6 = add i32 %5, 2
  %7 = load i32* %assignment_tmp
  %8 = add i32 %6, %7
  %9 = getelementptr [5 x %lunarStruct2] addrspace(1)* @foo2, i32 0, i32 %8, i32 2, i32 1
  %scale4 = load float addrspace(1)* %9
  store float %scale4, float* %scale
  br label %ifmerge

else:                                             ; preds = %entry
  %scale5 = load float addrspace(1)* getelementptr inbounds (%lunarStruct3 addrspace(1)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1)
  store float %scale5, float* %scale
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  store i32 0, i32* %i
  br label %loop-header

loop-header:                                      ; preds = %ifmerge7, %ifmerge
  %10 = load i32* %i
  %11 = load i32* %iLocal
  %12 = icmp sge i32 %10, %11
  br i1 %12, label %then6, label %ifmerge7

then6:                                            ; preds = %loop-header
  br label %loop-merge

post-loopjump:                                    ; No predecessors!
  br label %ifmerge7

ifmerge7:                                         ; preds = %post-loopjump, %loop-header
  %13 = load float* %scale
  %14 = load i32* %i
  %15 = getelementptr [5 x %lunarStruct2] addrspace(1)* @foo2, i32 0, i32 %14, i32 1
  %16 = load float addrspace(1)* %15
  %scale8 = fadd float %13, %16
  store float %scale8, float* %scale
  %17 = load i32* %i
  %i9 = add i32 %17, 1
  store i32 %i9, i32* %i
  br label %loop-header

loop-merge:                                       ; preds = %then6
  %18 = load i32 addrspace(1)* @"sampler2D sampler"
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %texture2D_retval10 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %18, i32 0, <2 x float> %coord)
  store <4 x float> %texture2D_retval10, <4 x float>* %texture2D_retval
  %19 = load float* %scale
  %20 = load <4 x float>* %texture2D_retval
  %21 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %19, i32 0)
  %gl_FragColor = fmul <4 x float> %21, %20
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %22 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %22)
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, float }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }

@Count = external addrspace(1) constant i32
@foo3 = external addrspace(1) constant %lunarStruct3
@foo = external addrspace(1) constant %lunarStruct1
@foo2 = external addrspace(1) constant [5 x %lunarStruct2]
@"sampler2D sampler" = external addrspace(1) constant i32

define void @main() {
entry:
  %iLocal1 = load i32 addrspace(1)* @Count
  %0 = load i32 addrspace(1)* getelementptr inbounds (%lunarStruct3 addrspace(1)* @foo3, i32 0, i32 0, i32 1, i32 0)
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %assignment_tmp2 = add i32 %iLocal1, 1
  %2 = load i32 addrspace(1)* getelementptr inbounds (%lunarStruct1 addrspace(1)* @foo, i32 0, i32 0)
  %3 = getelementptr %lunarStruct3 addrspace(1)* @foo3, i32 0, i32 0, i32 %2, i32 0
  %4 = load i32 addrspace(1)* %3
  %5 = add i32 %assignment_tmp2, 2
  %6 = add i32 %5, %4
  %7 = getelementptr [5 x %lunarStruct2] addrspace(1)* @foo2, i32 0, i32 %6, i32 2, i32 1
  %scale4 = load float addrspace(1)* %7
  br label %ifmerge

else:                                             ; preds = %entry
  %scale5 = load float addrspace(1)* getelementptr inbounds (%lunarStruct3 addrspace(1)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1)
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %scale.0 = phi float [ %scale4, %then ], [ %scale5, %else ]
  %iLocal.0 = phi i32 [ %assignment_tmp2, %then ], [ %iLocal1, %else ]
  %tmp = icmp sgt i32 %iLocal.0, 0
  %smax = select i1 %tmp, i32 %iLocal.0, i32 0
  %tmp21 = zext i32 %smax to i64
  br label %loop-header

loop-header:                                      ; preds = %ifmerge7, %ifmerge
  %indvar = phi i64 [ %indvar.next, %ifmerge7 ], [ 0, %ifmerge ]
  %scale.1 = phi float [ %scale.0, %ifmerge ], [ %scale8, %ifmerge7 ]
  %tmp23 = mul i64 %indvar, ptrtoint (i8* getelementptr (i8* null, i32 1) to i64)
  %lsr.iv14 = getelementptr [5 x %lunarStruct2] addrspace(1)* @foo2, i64 0, i64 %tmp23, i32 1
  %exitcond22 = icmp eq i64 %indvar, %tmp21
  br i1 %exitcond22, label %then6, label %ifmerge7

then6:                                            ; preds = %loop-header
  %8 = load i32 addrspace(1)* @"sampler2D sampler"
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %texture2D_retval10 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %8, i32 0, <2 x float> %coord)
  %9 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %scale.1, i32 0)
  %gl_FragColor = fmul <4 x float> %9, %texture2D_retval10
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %gl_FragColor)
  ret void

ifmerge7:                                         ; preds = %loop-header
  %10 = load float addrspace(1)* %lsr.iv14
  %scale8 = fadd float %scale.1, %10
  %indvar.next = add i64 %indvar, 1
  br label %loop-header
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

***Unsupported functionality: Basic Type in Bottom IR
compiling variableArrayIndex.frag...
uniform sampler2D sampler ; 
varying vec2 coord ; 
struct lunarStruct1 { int i ; float f ; } ; 
struct lunarStruct2 { int i ; float f ; lunarStruct1 s1_1 ; } ; 
struct lunarStruct3 { lunarStruct2 s2_1 [ 3 ] ; int i ; float f ; lunarStruct1 s1_1 ; } ; 
uniform lunarStruct1 foo ; 
uniform lunarStruct2 foo2 [ 5 ] ; 
uniform lunarStruct3 foo3 ; 
uniform int Count ; 
void  main (){
float scale ; int iLocal = Count ; if ( foo3 . s2_1 [ 1 ] . i > 0 ) scale = foo2 [ foo3 . s2_1 [ foo . i ] . i + 2 + ++ iLocal ] . s1_1 . f ; else scale = foo3 . s2_1 [ 0 ] . s1_1 . f ; for( int i = 0 ; ; i < iLocal ; ++ i ) {
scale += foo2 [ i ] . f ; }
gl_FragColor = scale * texture2D ( sampler , coord ) ; }



(
(declare (uniform ) int Count)
(declare (uniform ) lunarStruct3 foo3)
(declare (uniform ) (array lunarStruct2 5) foo2)
(declare (uniform ) lunarStruct1 foo)
(declare (in ) vec2 coord)
(declare (uniform ) sampler2D sampler)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () int iLocal)
      (declare () float scale)
      (assign (constant bool (1)) (x) (var_ref iLocal)  (var_ref Count) ) 
      (if (expression bool > (record_ref (array_ref (record_ref (var_ref foo3)  s2_1) (constant int (1)) )  i) (constant int (0)) ) (
        (declare (temporary ) int assignment_tmp)
        (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref Count) (constant int (1)) ) ) 
        (assign (constant bool (1)) (x) (var_ref iLocal)  (var_ref assignment_tmp) ) 
        (assign (constant bool (1)) (x) (var_ref scale)  (record_ref (record_ref (array_ref (var_ref foo2) (expression int + (expression int + (record_ref (array_ref (record_ref (var_ref foo3)  s2_1) (record_ref (var_ref foo)  i) )  i) (constant int (2)) ) (var_ref assignment_tmp) ) )  s1_1)  f) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref scale)  (record_ref (record_ref (array_ref (record_ref (var_ref foo3)  s2_1) (constant int (0)) )  s1_1)  f) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (var_ref iLocal) ) (
          break
        )
        ())

        (assign (constant bool (1)) (x) (var_ref scale)  (expression float + (var_ref scale) (record_ref (array_ref (var_ref foo2) (var_ref i) )  f) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (declare (temporary ) vec4 texture2D_retval)
      (assign (constant bool (1)) (xyzw) (var_ref texture2D_retval)  (call texture2D ((var_ref sampler) (var_ref coord) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (var_ref scale) (var_ref texture2D_retval) ) ) 
    ))

)


)