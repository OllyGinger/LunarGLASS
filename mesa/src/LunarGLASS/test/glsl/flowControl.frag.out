; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@smallColor = external addrspace(1) constant <4 x float>
@gl_FragColor = internal global <4 x float> zeroinitializer
@otherColor = external addrspace(1) constant <4 x float>

define void @main() {
entry:
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.getInterpolant.v4f32(i32 0)
  store <4 x float> %BaseColor, <4 x float>* %color
  %c = call float @llvm.gla.getInterpolant.f32(i32 0)
  %0 = load float addrspace(1)* @d
  %1 = fcmp ogt float %c, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %BaseColor1 = call <4 x float> @llvm.gla.getInterpolant.v4f32(i32 0)
  %2 = load <4 x float> addrspace(1)* @bigColor
  %3 = fadd <4 x float> %BaseColor1, %2
  store <4 x float> %3, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %entry
  %4 = load <4 x float>* %color
  %5 = load <4 x float> addrspace(1)* @smallColor
  %6 = fadd <4 x float> %4, %5
  store <4 x float> %6, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %7 = load <4 x float>* %color
  %8 = load <4 x float> addrspace(1)* @otherColor
  %9 = fmul <4 x float> %7, %8
  store <4 x float> %9, <4 x float>* @gl_FragColor
  %10 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %10)
  ret void
}

declare <4 x float> @llvm.gla.getInterpolant.v4f32(i32) nounwind readonly

declare float @llvm.gla.getInterpolant.f32(i32) nounwind readonly

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@smallColor = external addrspace(1) constant <4 x float>
@otherColor = external addrspace(1) constant <4 x float>

define void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.getInterpolant.v4f32(i32 0)
  %c = call float @llvm.gla.getInterpolant.f32(i32 0)
  %0 = load float addrspace(1)* @d
  %1 = fcmp ogt float %c, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load <4 x float> addrspace(1)* @bigColor
  %3 = fadd <4 x float> %BaseColor, %2
  br label %ifmerge

else:                                             ; preds = %entry
  %4 = load <4 x float> addrspace(1)* @smallColor
  %5 = fadd <4 x float> %BaseColor, %4
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %color.0 = phi <4 x float> [ %3, %then ], [ %5, %else ]
  %6 = load <4 x float> addrspace(1)* @otherColor
  %7 = fmul <4 x float> %color.0, %6
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %7)
  ret void
}

declare <4 x float> @llvm.gla.getInterpolant.v4f32(i32) nounwind readonly

declare float @llvm.gla.getInterpolant.f32(i32) nounwind readonly

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind
compiling flowControl.frag...
uniform float d ; 
uniform vec4 bigColor , smallColor ; 
uniform vec4 otherColor ; 
varying float c ; 
varying vec4 BaseColor ; 
void  main (){
vec4 color = BaseColor ; vec4 color2 ; color2 = otherColor ; if ( c > d ) color += bigColor ; else color += smallColor ; gl_FragColor = color * color2 ; }



(
(declare (in ) vec4 BaseColor)
(declare (in ) float c)
(declare (uniform ) vec4 otherColor)
(declare (uniform ) vec4 smallColor)
(declare (uniform ) vec4 bigColor)
(declare (uniform ) float d)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (if (expression bool > (var_ref c) (var_ref d) ) (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref BaseColor) (var_ref bigColor) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref smallColor) ) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (var_ref color) (var_ref otherColor) ) ) 
    ))

)


)
// LunarGoo output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform vec4 otherColor;
in vec4 BaseColor;
in float c;

void main()
{
    vec4 temp21;
    bool temp22 = c > d;
    if (temp22) {
        vec4 temp23 = BaseColor + bigColor;
        temp21 = temp23;
    }
    else {
        vec4 temp24 = BaseColor + smallColor;
        temp21 = temp24;
    }
    
    vec4 temp25 = temp21 * otherColor;
    gl_FragColor = temp25;
    return;
}
