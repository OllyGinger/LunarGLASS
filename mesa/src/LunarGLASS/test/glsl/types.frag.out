; ModuleID = 'Top'

@u_b2 = external addrspace(1) constant <2 x i1>
@u_b3 = external addrspace(1) constant <3 x i1>
@u_b4 = external addrspace(1) constant <4 x i1>
@u_i = external addrspace(1) constant i32
@u_i2 = external addrspace(1) constant <2 x i32>
@u_i3 = external addrspace(1) constant <3 x i32>
@u_i4 = external addrspace(1) constant <4 x i32>
@u_f = external addrspace(1) constant float
@u_f2 = external addrspace(1) constant <2 x float>
@u_f3 = external addrspace(1) constant <3 x float>
@u_f4 = external addrspace(1) constant <4 x float>
@u_b = external addrspace(1) constant i1
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %conditional_tmp = alloca <4 x float>
  %or_tmp73 = alloca i1
  %or_tmp68 = alloca i1
  %or_tmp63 = alloca i1
  %or_tmp58 = alloca i1
  %or_tmp53 = alloca i1
  %or_tmp48 = alloca i1
  %or_tmp43 = alloca i1
  %or_tmp38 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp35 = alloca <4 x float>
  %assignment_tmp34 = alloca <3 x float>
  %assignment_tmp33 = alloca <2 x float>
  %assignment_tmp32 = alloca float
  %assignment_tmp31 = alloca <4 x i32>
  %assignment_tmp30 = alloca <3 x i32>
  %assignment_tmp29 = alloca <2 x i32>
  %assignment_tmp = alloca i32
  %vec_ctor16 = alloca <4 x i1>
  %vec_ctor6 = alloca <3 x i1>
  %vec_ctor = alloca <2 x i1>
  %0 = load <2 x i1> addrspace(1)* @u_b2
  %swizzleTmp = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %0, i32 0)
  %i_b2 = call <2 x i1> @llvm.gla.readData.v2i1(i32 0)
  %swizzleTmp1 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %i_b2, i32 0)
  %1 = xor i1 %swizzleTmp, %swizzleTmp1
  %2 = load <2 x i1> addrspace(1)* @u_b2
  %swizzleTmp2 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %2, i32 1)
  %3 = xor i1 %1, %swizzleTmp2
  %i_b23 = call <2 x i1> @llvm.gla.readData.v2i1(i32 0)
  %swizzleTmp4 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %i_b23, i32 1)
  %4 = xor i1 %3, %swizzleTmp4
  %swizzleTmp5 = call <2 x i1> @llvm.gla.swizzle.v2i1.i1(i1 %4, i32 0)
  store <2 x i1> %swizzleTmp5, <2 x i1>* %vec_ctor
  %5 = load <3 x i1> addrspace(1)* @u_b3
  %swizzleTmp7 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %5, i32 0)
  %i_b3 = call <3 x i1> @llvm.gla.readData.v3i1(i32 0)
  %swizzleTmp8 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b3, i32 0)
  %6 = xor i1 %swizzleTmp7, %swizzleTmp8
  %7 = load <3 x i1> addrspace(1)* @u_b3
  %swizzleTmp9 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %7, i32 1)
  %8 = xor i1 %6, %swizzleTmp9
  %i_b310 = call <3 x i1> @llvm.gla.readData.v3i1(i32 0)
  %swizzleTmp11 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b310, i32 1)
  %9 = xor i1 %8, %swizzleTmp11
  %10 = load <3 x i1> addrspace(1)* @u_b3
  %swizzleTmp12 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %10, i32 2)
  %11 = xor i1 %9, %swizzleTmp12
  %i_b313 = call <3 x i1> @llvm.gla.readData.v3i1(i32 0)
  %swizzleTmp14 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b313, i32 2)
  %12 = xor i1 %11, %swizzleTmp14
  %swizzleTmp15 = call <3 x i1> @llvm.gla.swizzle.v3i1.i1(i1 %12, i32 0)
  store <3 x i1> %swizzleTmp15, <3 x i1>* %vec_ctor6
  %13 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp17 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %13, i32 0)
  %i_b4 = call <4 x i1> @llvm.gla.readData.v4i1(i32 0)
  %swizzleTmp18 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b4, i32 0)
  %14 = xor i1 %swizzleTmp17, %swizzleTmp18
  %15 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp19 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %15, i32 1)
  %16 = xor i1 %14, %swizzleTmp19
  %i_b420 = call <4 x i1> @llvm.gla.readData.v4i1(i32 0)
  %swizzleTmp21 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b420, i32 1)
  %17 = xor i1 %16, %swizzleTmp21
  %18 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp22 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %18, i32 2)
  %19 = xor i1 %17, %swizzleTmp22
  %i_b423 = call <4 x i1> @llvm.gla.readData.v4i1(i32 0)
  %swizzleTmp24 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b423, i32 2)
  %20 = xor i1 %19, %swizzleTmp24
  %21 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp25 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %21, i32 3)
  %22 = xor i1 %20, %swizzleTmp25
  %i_b426 = call <4 x i1> @llvm.gla.readData.v4i1(i32 0)
  %swizzleTmp27 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b426, i32 3)
  %23 = xor i1 %22, %swizzleTmp27
  %swizzleTmp28 = call <4 x i1> @llvm.gla.swizzle.v4i1.i1(i1 %23, i32 0)
  store <4 x i1> %swizzleTmp28, <4 x i1>* %vec_ctor16
  %24 = load i32 addrspace(1)* @u_i
  %i_i = call i32 @llvm.gla.readData.i32(i32 0)
  %25 = add i32 %24, %i_i
  store i32 %25, i32* %assignment_tmp
  %26 = load <2 x i32> addrspace(1)* @u_i2
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 0)
  %27 = add <2 x i32> %26, %i_i2
  store <2 x i32> %27, <2 x i32>* %assignment_tmp29
  %28 = load <3 x i32> addrspace(1)* @u_i3
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 0)
  %29 = add <3 x i32> %28, %i_i3
  store <3 x i32> %29, <3 x i32>* %assignment_tmp30
  %30 = load <4 x i32> addrspace(1)* @u_i4
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 0)
  %31 = add <4 x i32> %30, %i_i4
  store <4 x i32> %31, <4 x i32>* %assignment_tmp31
  %32 = load float addrspace(1)* @u_f
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 0, i32 0)
  %33 = fadd float %32, %i_f
  store float %33, float* %assignment_tmp32
  %34 = load <2 x float> addrspace(1)* @u_f2
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %35 = fadd <2 x float> %34, %i_f2
  store <2 x float> %35, <2 x float>* %assignment_tmp33
  %36 = load <3 x float> addrspace(1)* @u_f3
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 0)
  %37 = fadd <3 x float> %36, %i_f3
  store <3 x float> %37, <3 x float>* %assignment_tmp34
  %38 = load <4 x float> addrspace(1)* @u_f4
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %39 = fadd <4 x float> %38, %i_f4
  store <4 x float> %39, <4 x float>* %assignment_tmp35
  %40 = load i1 addrspace(1)* @u_b
  %i_b = call i1 @llvm.gla.readData.i1(i32 0)
  %41 = xor i1 %40, %i_b
  br i1 %41, label %then, label %else

then:                                             ; preds = %entry
  store i1 true, i1* %or_tmp
  br label %ifmerge

else:                                             ; preds = %entry
  %42 = load <2 x i1>* %vec_ctor
  %swizzleTmp36 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %42, i32 0)
  store i1 %swizzleTmp36, i1* %or_tmp
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %43 = load i1* %or_tmp
  br i1 %43, label %then37, label %else39

then37:                                           ; preds = %ifmerge
  store i1 true, i1* %or_tmp38
  br label %ifmerge41

else39:                                           ; preds = %ifmerge
  %44 = load <2 x i1>* %vec_ctor
  %swizzleTmp40 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %44, i32 1)
  store i1 %swizzleTmp40, i1* %or_tmp38
  br label %ifmerge41

ifmerge41:                                        ; preds = %else39, %then37
  %45 = load i1* %or_tmp38
  br i1 %45, label %then42, label %else44

then42:                                           ; preds = %ifmerge41
  store i1 true, i1* %or_tmp43
  br label %ifmerge46

else44:                                           ; preds = %ifmerge41
  %46 = load <3 x i1>* %vec_ctor6
  %swizzleTmp45 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %46, i32 0)
  store i1 %swizzleTmp45, i1* %or_tmp43
  br label %ifmerge46

ifmerge46:                                        ; preds = %else44, %then42
  %47 = load i1* %or_tmp43
  br i1 %47, label %then47, label %else49

then47:                                           ; preds = %ifmerge46
  store i1 true, i1* %or_tmp48
  br label %ifmerge51

else49:                                           ; preds = %ifmerge46
  %48 = load <3 x i1>* %vec_ctor6
  %swizzleTmp50 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %48, i32 1)
  store i1 %swizzleTmp50, i1* %or_tmp48
  br label %ifmerge51

ifmerge51:                                        ; preds = %else49, %then47
  %49 = load i1* %or_tmp48
  br i1 %49, label %then52, label %else54

then52:                                           ; preds = %ifmerge51
  store i1 true, i1* %or_tmp53
  br label %ifmerge56

else54:                                           ; preds = %ifmerge51
  %50 = load <3 x i1>* %vec_ctor6
  %swizzleTmp55 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %50, i32 2)
  store i1 %swizzleTmp55, i1* %or_tmp53
  br label %ifmerge56

ifmerge56:                                        ; preds = %else54, %then52
  %51 = load i1* %or_tmp53
  br i1 %51, label %then57, label %else59

then57:                                           ; preds = %ifmerge56
  store i1 true, i1* %or_tmp58
  br label %ifmerge61

else59:                                           ; preds = %ifmerge56
  %52 = load <4 x i1>* %vec_ctor16
  %swizzleTmp60 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %52, i32 0)
  store i1 %swizzleTmp60, i1* %or_tmp58
  br label %ifmerge61

ifmerge61:                                        ; preds = %else59, %then57
  %53 = load i1* %or_tmp58
  br i1 %53, label %then62, label %else64

then62:                                           ; preds = %ifmerge61
  store i1 true, i1* %or_tmp63
  br label %ifmerge66

else64:                                           ; preds = %ifmerge61
  %54 = load <4 x i1>* %vec_ctor16
  %swizzleTmp65 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %54, i32 1)
  store i1 %swizzleTmp65, i1* %or_tmp63
  br label %ifmerge66

ifmerge66:                                        ; preds = %else64, %then62
  %55 = load i1* %or_tmp63
  br i1 %55, label %then67, label %else69

then67:                                           ; preds = %ifmerge66
  store i1 true, i1* %or_tmp68
  br label %ifmerge71

else69:                                           ; preds = %ifmerge66
  %56 = load <4 x i1>* %vec_ctor16
  %swizzleTmp70 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %56, i32 2)
  store i1 %swizzleTmp70, i1* %or_tmp68
  br label %ifmerge71

ifmerge71:                                        ; preds = %else69, %then67
  %57 = load i1* %or_tmp68
  br i1 %57, label %then72, label %else74

then72:                                           ; preds = %ifmerge71
  store i1 true, i1* %or_tmp73
  br label %ifmerge76

else74:                                           ; preds = %ifmerge71
  %58 = load <4 x i1>* %vec_ctor16
  %swizzleTmp75 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %58, i32 3)
  store i1 %swizzleTmp75, i1* %or_tmp73
  br label %ifmerge76

ifmerge76:                                        ; preds = %else74, %then72
  %59 = load i1* %or_tmp73
  br i1 %59, label %then77, label %else97

then77:                                           ; preds = %ifmerge76
  %60 = load i32* %assignment_tmp
  %61 = load <2 x i32>* %assignment_tmp29
  %swizzleTmp78 = call i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32> %61, i32 0)
  %62 = add i32 %60, %swizzleTmp78
  %63 = load <2 x i32>* %assignment_tmp29
  %swizzleTmp79 = call i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32> %63, i32 1)
  %64 = add i32 %62, %swizzleTmp79
  %65 = load <3 x i32>* %assignment_tmp30
  %swizzleTmp80 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %65, i32 0)
  %66 = add i32 %64, %swizzleTmp80
  %67 = load <3 x i32>* %assignment_tmp30
  %swizzleTmp81 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %67, i32 1)
  %68 = add i32 %66, %swizzleTmp81
  %69 = load <3 x i32>* %assignment_tmp30
  %swizzleTmp82 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %69, i32 2)
  %70 = add i32 %68, %swizzleTmp82
  %71 = load <4 x i32>* %assignment_tmp31
  %swizzleTmp83 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %71, i32 0)
  %72 = add i32 %70, %swizzleTmp83
  %73 = load <4 x i32>* %assignment_tmp31
  %swizzleTmp84 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %73, i32 1)
  %74 = add i32 %72, %swizzleTmp84
  %75 = load <4 x i32>* %assignment_tmp31
  %swizzleTmp85 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %75, i32 2)
  %76 = add i32 %74, %swizzleTmp85
  %77 = load <4 x i32>* %assignment_tmp31
  %swizzleTmp86 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %77, i32 3)
  %78 = add i32 %76, %swizzleTmp86
  %79 = sitofp i32 %78 to float
  %80 = load float* %assignment_tmp32
  %81 = fadd float %79, %80
  %82 = load <2 x float>* %assignment_tmp33
  %swizzleTmp87 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %82, i32 0)
  %83 = fadd float %81, %swizzleTmp87
  %84 = load <2 x float>* %assignment_tmp33
  %swizzleTmp88 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %84, i32 1)
  %85 = fadd float %83, %swizzleTmp88
  %86 = load <3 x float>* %assignment_tmp34
  %swizzleTmp89 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %86, i32 0)
  %87 = fadd float %85, %swizzleTmp89
  %88 = load <3 x float>* %assignment_tmp34
  %swizzleTmp90 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %88, i32 1)
  %89 = fadd float %87, %swizzleTmp90
  %90 = load <3 x float>* %assignment_tmp34
  %swizzleTmp91 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %90, i32 2)
  %91 = fadd float %89, %swizzleTmp91
  %92 = load <4 x float>* %assignment_tmp35
  %swizzleTmp92 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %92, i32 0)
  %93 = fadd float %91, %swizzleTmp92
  %94 = load <4 x float>* %assignment_tmp35
  %swizzleTmp93 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %94, i32 1)
  %95 = fadd float %93, %swizzleTmp93
  %96 = load <4 x float>* %assignment_tmp35
  %swizzleTmp94 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %96, i32 2)
  %97 = fadd float %95, %swizzleTmp94
  %98 = load <4 x float>* %assignment_tmp35
  %swizzleTmp95 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %98, i32 3)
  %99 = fadd float %97, %swizzleTmp95
  %swizzleTmp96 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %99, i32 0)
  store <4 x float> %swizzleTmp96, <4 x float>* %conditional_tmp
  br label %ifmerge98

else97:                                           ; preds = %ifmerge76
  store <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float>* %conditional_tmp
  br label %ifmerge98

ifmerge98:                                        ; preds = %else97, %then77
  %100 = load <4 x float>* %conditional_tmp
  store <4 x float> %100, <4 x float>* @gl_FragColor
  %101 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %101)
  ret void
}

declare i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1>, i32) nounwind readnone

declare <2 x i1> @llvm.gla.readData.v2i1(i32) nounwind readonly

declare <2 x i1> @llvm.gla.swizzle.v2i1.i1(i1, i32) nounwind readnone

declare i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1>, i32) nounwind readnone

declare <3 x i1> @llvm.gla.readData.v3i1(i32) nounwind readonly

declare <3 x i1> @llvm.gla.swizzle.v3i1.i1(i1, i32) nounwind readnone

declare i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1>, i32) nounwind readnone

declare <4 x i1> @llvm.gla.readData.v4i1(i32) nounwind readonly

declare <4 x i1> @llvm.gla.swizzle.v4i1.i1(i1, i32) nounwind readnone

declare i32 @llvm.gla.readData.i32(i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare i1 @llvm.gla.readData.i1(i32) nounwind readonly

declare i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32>, i32) nounwind readnone

declare i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32>, i32) nounwind readnone

declare i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v2f32(<2 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v3f32(<3 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v4f32(<4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@u_b2 = external addrspace(1) constant <2 x i1>
@u_b3 = external addrspace(1) constant <3 x i1>
@u_b4 = external addrspace(1) constant <4 x i1>
@u_i = external addrspace(1) constant i32
@u_i2 = external addrspace(1) constant <2 x i32>
@u_i3 = external addrspace(1) constant <3 x i32>
@u_i4 = external addrspace(1) constant <4 x i32>
@u_f = external addrspace(1) constant float
@u_f2 = external addrspace(1) constant <2 x float>
@u_f3 = external addrspace(1) constant <3 x float>
@u_f4 = external addrspace(1) constant <4 x float>
@u_b = external addrspace(1) constant i1

define void @main() {
entry:
  %0 = load <2 x i1> addrspace(1)* @u_b2
  %swizzleTmp = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %0, i32 0)
  %i_b2 = call <2 x i1> @llvm.gla.readData.v2i1(i32 0)
  %swizzleTmp1 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %i_b2, i32 0)
  %1 = xor i1 %swizzleTmp, %swizzleTmp1
  %swizzleTmp2 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %0, i32 1)
  %2 = xor i1 %1, %swizzleTmp2
  %swizzleTmp4 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %i_b2, i32 1)
  %3 = xor i1 %2, %swizzleTmp4
  %swizzleTmp5 = call <2 x i1> @llvm.gla.swizzle.v2i1.i1(i1 %3, i32 0)
  %4 = load <3 x i1> addrspace(1)* @u_b3
  %swizzleTmp7 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %4, i32 0)
  %i_b3 = call <3 x i1> @llvm.gla.readData.v3i1(i32 0)
  %swizzleTmp8 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b3, i32 0)
  %5 = xor i1 %swizzleTmp7, %swizzleTmp8
  %swizzleTmp9 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %4, i32 1)
  %6 = xor i1 %5, %swizzleTmp9
  %swizzleTmp11 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b3, i32 1)
  %7 = xor i1 %6, %swizzleTmp11
  %swizzleTmp12 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %4, i32 2)
  %8 = xor i1 %7, %swizzleTmp12
  %swizzleTmp14 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b3, i32 2)
  %9 = xor i1 %8, %swizzleTmp14
  %swizzleTmp15 = call <3 x i1> @llvm.gla.swizzle.v3i1.i1(i1 %9, i32 0)
  %10 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp17 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %10, i32 0)
  %i_b4 = call <4 x i1> @llvm.gla.readData.v4i1(i32 0)
  %swizzleTmp18 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b4, i32 0)
  %11 = xor i1 %swizzleTmp17, %swizzleTmp18
  %swizzleTmp19 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %10, i32 1)
  %12 = xor i1 %11, %swizzleTmp19
  %swizzleTmp21 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b4, i32 1)
  %13 = xor i1 %12, %swizzleTmp21
  %swizzleTmp22 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %10, i32 2)
  %14 = xor i1 %13, %swizzleTmp22
  %swizzleTmp24 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b4, i32 2)
  %15 = xor i1 %14, %swizzleTmp24
  %swizzleTmp25 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %10, i32 3)
  %16 = xor i1 %15, %swizzleTmp25
  %swizzleTmp27 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b4, i32 3)
  %17 = xor i1 %16, %swizzleTmp27
  %swizzleTmp28 = call <4 x i1> @llvm.gla.swizzle.v4i1.i1(i1 %17, i32 0)
  %18 = load i32 addrspace(1)* @u_i
  %i_i = call i32 @llvm.gla.readData.i32(i32 0)
  %19 = load <2 x i32> addrspace(1)* @u_i2
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 0)
  %20 = add <2 x i32> %19, %i_i2
  %21 = load <3 x i32> addrspace(1)* @u_i3
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 0)
  %22 = add <3 x i32> %21, %i_i3
  %23 = load <4 x i32> addrspace(1)* @u_i4
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 0)
  %24 = add <4 x i32> %23, %i_i4
  %25 = load float addrspace(1)* @u_f
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 0, i32 0)
  %26 = fadd float %25, %i_f
  %27 = load <2 x float> addrspace(1)* @u_f2
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %28 = fadd <2 x float> %27, %i_f2
  %29 = load <3 x float> addrspace(1)* @u_f3
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 0)
  %30 = fadd <3 x float> %29, %i_f3
  %31 = load <4 x float> addrspace(1)* @u_f4
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %32 = fadd <4 x float> %31, %i_f4
  %33 = load i1 addrspace(1)* @u_b
  %i_b = call i1 @llvm.gla.readData.i1(i32 0)
  %34 = xor i1 %33, %i_b
  br i1 %34, label %then, label %else

then:                                             ; preds = %entry
  br label %ifmerge

else:                                             ; preds = %entry
  %swizzleTmp36 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %swizzleTmp5, i32 0)
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %or_tmp.0 = phi i1 [ true, %then ], [ %swizzleTmp36, %else ]
  br i1 %or_tmp.0, label %then37, label %else39

then37:                                           ; preds = %ifmerge
  br label %ifmerge41

else39:                                           ; preds = %ifmerge
  %swizzleTmp40 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %swizzleTmp5, i32 1)
  br label %ifmerge41

ifmerge41:                                        ; preds = %else39, %then37
  %or_tmp38.0 = phi i1 [ true, %then37 ], [ %swizzleTmp40, %else39 ]
  br i1 %or_tmp38.0, label %then42, label %else44

then42:                                           ; preds = %ifmerge41
  br label %ifmerge46

else44:                                           ; preds = %ifmerge41
  %swizzleTmp45 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %swizzleTmp15, i32 0)
  br label %ifmerge46

ifmerge46:                                        ; preds = %else44, %then42
  %or_tmp43.0 = phi i1 [ true, %then42 ], [ %swizzleTmp45, %else44 ]
  br i1 %or_tmp43.0, label %then47, label %else49

then47:                                           ; preds = %ifmerge46
  br label %ifmerge51

else49:                                           ; preds = %ifmerge46
  %swizzleTmp50 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %swizzleTmp15, i32 1)
  br label %ifmerge51

ifmerge51:                                        ; preds = %else49, %then47
  %or_tmp48.0 = phi i1 [ true, %then47 ], [ %swizzleTmp50, %else49 ]
  br i1 %or_tmp48.0, label %then52, label %else54

then52:                                           ; preds = %ifmerge51
  br label %ifmerge56

else54:                                           ; preds = %ifmerge51
  %swizzleTmp55 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %swizzleTmp15, i32 2)
  br label %ifmerge56

ifmerge56:                                        ; preds = %else54, %then52
  %or_tmp53.0 = phi i1 [ true, %then52 ], [ %swizzleTmp55, %else54 ]
  br i1 %or_tmp53.0, label %then57, label %else59

then57:                                           ; preds = %ifmerge56
  br label %ifmerge61

else59:                                           ; preds = %ifmerge56
  %swizzleTmp60 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %swizzleTmp28, i32 0)
  br label %ifmerge61

ifmerge61:                                        ; preds = %else59, %then57
  %or_tmp58.0 = phi i1 [ true, %then57 ], [ %swizzleTmp60, %else59 ]
  br i1 %or_tmp58.0, label %then62, label %else64

then62:                                           ; preds = %ifmerge61
  br label %ifmerge66

else64:                                           ; preds = %ifmerge61
  %swizzleTmp65 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %swizzleTmp28, i32 1)
  br label %ifmerge66

ifmerge66:                                        ; preds = %else64, %then62
  %or_tmp63.0 = phi i1 [ true, %then62 ], [ %swizzleTmp65, %else64 ]
  br i1 %or_tmp63.0, label %then67, label %else69

then67:                                           ; preds = %ifmerge66
  br label %ifmerge71

else69:                                           ; preds = %ifmerge66
  %swizzleTmp70 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %swizzleTmp28, i32 2)
  br label %ifmerge71

ifmerge71:                                        ; preds = %else69, %then67
  %or_tmp68.0 = phi i1 [ true, %then67 ], [ %swizzleTmp70, %else69 ]
  br i1 %or_tmp68.0, label %then72, label %else74

then72:                                           ; preds = %ifmerge71
  br label %ifmerge76

else74:                                           ; preds = %ifmerge71
  %swizzleTmp75 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %swizzleTmp28, i32 3)
  br label %ifmerge76

ifmerge76:                                        ; preds = %else74, %then72
  %or_tmp73.0 = phi i1 [ true, %then72 ], [ %swizzleTmp75, %else74 ]
  br i1 %or_tmp73.0, label %then77, label %else97

then77:                                           ; preds = %ifmerge76
  %swizzleTmp78 = call i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32> %20, i32 0)
  %swizzleTmp79 = call i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32> %20, i32 1)
  %swizzleTmp80 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %22, i32 0)
  %swizzleTmp81 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %22, i32 1)
  %swizzleTmp82 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %22, i32 2)
  %swizzleTmp83 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %24, i32 0)
  %swizzleTmp84 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %24, i32 1)
  %swizzleTmp85 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %24, i32 2)
  %swizzleTmp86 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %24, i32 3)
  %35 = add i32 %i_i, %18
  %36 = add i32 %35, %swizzleTmp78
  %37 = add i32 %36, %swizzleTmp79
  %38 = add i32 %37, %swizzleTmp80
  %39 = add i32 %38, %swizzleTmp81
  %40 = add i32 %39, %swizzleTmp82
  %41 = add i32 %40, %swizzleTmp83
  %42 = add i32 %41, %swizzleTmp84
  %43 = add i32 %42, %swizzleTmp85
  %44 = add i32 %43, %swizzleTmp86
  %45 = sitofp i32 %44 to float
  %46 = fadd float %45, %26
  %swizzleTmp87 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %28, i32 0)
  %47 = fadd float %46, %swizzleTmp87
  %swizzleTmp88 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %28, i32 1)
  %48 = fadd float %47, %swizzleTmp88
  %swizzleTmp89 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %30, i32 0)
  %49 = fadd float %48, %swizzleTmp89
  %swizzleTmp90 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %30, i32 1)
  %50 = fadd float %49, %swizzleTmp90
  %swizzleTmp91 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %30, i32 2)
  %51 = fadd float %50, %swizzleTmp91
  %swizzleTmp92 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %32, i32 0)
  %52 = fadd float %51, %swizzleTmp92
  %swizzleTmp93 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %32, i32 1)
  %53 = fadd float %52, %swizzleTmp93
  %swizzleTmp94 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %32, i32 2)
  %54 = fadd float %53, %swizzleTmp94
  %swizzleTmp95 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %32, i32 3)
  %55 = fadd float %54, %swizzleTmp95
  %swizzleTmp96 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %55, i32 0)
  br label %ifmerge98

else97:                                           ; preds = %ifmerge76
  br label %ifmerge98

ifmerge98:                                        ; preds = %else97, %then77
  %conditional_tmp.0 = phi <4 x float> [ %swizzleTmp96, %then77 ], [ <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %else97 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %conditional_tmp.0)
  ret void
}

declare i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1>, i32) nounwind readnone

declare <2 x i1> @llvm.gla.readData.v2i1(i32) nounwind readonly

declare <2 x i1> @llvm.gla.swizzle.v2i1.i1(i1, i32) nounwind readnone

declare i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1>, i32) nounwind readnone

declare <3 x i1> @llvm.gla.readData.v3i1(i32) nounwind readonly

declare <3 x i1> @llvm.gla.swizzle.v3i1.i1(i1, i32) nounwind readnone

declare i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1>, i32) nounwind readnone

declare <4 x i1> @llvm.gla.readData.v4i1(i32) nounwind readonly

declare <4 x i1> @llvm.gla.swizzle.v4i1.i1(i1, i32) nounwind readnone

declare i32 @llvm.gla.readData.i32(i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare i1 @llvm.gla.readData.i1(i32) nounwind readonly

declare i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32>, i32) nounwind readnone

declare i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32>, i32) nounwind readnone

declare i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v2f32(<2 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v3f32(<3 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v4f32(<4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
compiling types.frag...
uniform bool u_b ; 
uniform bvec2 u_b2 ; 
uniform bvec3 u_b3 ; 
uniform bvec4 u_b4 ; 
uniform int u_i ; 
uniform ivec2 u_i2 ; 
uniform ivec3 u_i3 ; 
uniform ivec4 u_i4 ; 
uniform float u_f ; 
uniform vec2 u_f2 ; 
uniform vec3 u_f3 ; 
uniform vec4 u_f4 ; 
in bool i_b ; 
in bvec2 i_b2 ; 
in bvec3 i_b3 ; 
in bvec4 i_b4 ; 
in int i_i ; 
in ivec2 i_i2 ; 
in ivec3 i_i3 ; 
in ivec4 i_i4 ; 
in float i_f ; 
in vec2 i_f2 ; 
in vec3 i_f3 ; 
in vec4 i_f4 ; 
void  main (){
bool b = u_b ^^ i_b ; bvec2 b2 = bvec2 ( u_b2 . x ^^ i_b2 . x ^^ u_b2 . y ^^ i_b2 . y ) ; bvec3 b3 = bvec3 ( u_b3 . x ^^ i_b3 . x ^^ u_b3 . y ^^ i_b3 . y ^^ u_b3 . z ^^ i_b3 . z ) ; bvec4 b4 = bvec4 ( u_b4 . x ^^ i_b4 . x ^^ u_b4 . y ^^ i_b4 . y ^^ u_b4 . z ^^ i_b4 . z ^^ u_b4 . w ^^ i_b4 . w ) ; int i = u_i + i_i ; ivec2 i2 = u_i2 + i_i2 ; ivec3 i3 = u_i3 + i_i3 ; ivec4 i4 = u_i4 + i_i4 ; float f = u_f + i_f ; vec2 f2 = u_f2 + i_f2 ; vec3 f3 = u_f3 + i_f3 ; vec4 f4 = u_f4 + i_f4 ; gl_FragColor = b || b2 . x || b2 . y || b3 . x || b3 . y || b3 . z || b4 . x || b4 . y || b4 . z || b4 . w ? vec4 ( i + i2 . x + i2 . y + i3 . x + i3 . y + i3 . z + i4 . x + i4 . y + i4 . z + i4 . w + f + f2 . x + f2 . y + f3 . x + f3 . y + f3 . z + f4 . x + f4 . y + f4 . z + f4 . w ) : vec4 ( i + i2 . x + i2 . y + i3 . x + i3 . y + i3 . z + i4 . x + i4 . y + i4 . z + i4 . w + f + f2 . x + f2 . y + f3 . x + f3 . y + f3 . z + f4 . x + f4 . y + f4 . z + f4 . w ) ; }



(
(declare (in ) vec4 i_f4)
(declare (in ) vec3 i_f3)
(declare (in ) vec2 i_f2)
(declare (in ) float i_f)
(declare (in ) ivec4 i_i4)
(declare (in ) ivec3 i_i3)
(declare (in ) ivec2 i_i2)
(declare (in ) int i_i)
(declare (in ) bvec4 i_b4)
(declare (in ) bvec3 i_b3)
(declare (in ) bvec2 i_b2)
(declare (in ) bool i_b)
(declare (uniform ) vec4 u_f4)
(declare (uniform ) vec3 u_f3)
(declare (uniform ) vec2 u_f2)
(declare (uniform ) float u_f)
(declare (uniform ) ivec4 u_i4)
(declare (uniform ) ivec3 u_i3)
(declare (uniform ) ivec2 u_i2)
(declare (uniform ) int u_i)
(declare (uniform ) bvec4 u_b4)
(declare (uniform ) bvec3 u_b3)
(declare (uniform ) bvec2 u_b2)
(declare (uniform ) bool u_b)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare (temporary ) bvec2 vec_ctor)
      (assign (constant bool (1)) (xy) (var_ref vec_ctor)  (swiz xx (expression bool ^^ (expression bool ^^ (expression bool ^^ (swiz x (var_ref u_b2) )(swiz x (var_ref i_b2) )) (swiz y (var_ref u_b2) )) (swiz y (var_ref i_b2) )) )) 
      (declare (temporary ) bvec3 vec_ctor)
      (assign (constant bool (1)) (xyz) (var_ref vec_ctor)  (swiz xxx (expression bool ^^ (expression bool ^^ (expression bool ^^ (expression bool ^^ (expression bool ^^ (swiz x (var_ref u_b3) )(swiz x (var_ref i_b3) )) (swiz y (var_ref u_b3) )) (swiz y (var_ref i_b3) )) (swiz z (var_ref u_b3) )) (swiz z (var_ref i_b3) )) )) 
      (declare (temporary ) bvec4 vec_ctor)
      (assign (constant bool (1)) (xyzw) (var_ref vec_ctor)  (swiz xxxx (expression bool ^^ (expression bool ^^ (expression bool ^^ (expression bool ^^ (expression bool ^^ (expression bool ^^ (expression bool ^^ (swiz x (var_ref u_b4) )(swiz x (var_ref i_b4) )) (swiz y (var_ref u_b4) )) (swiz y (var_ref i_b4) )) (swiz z (var_ref u_b4) )) (swiz z (var_ref i_b4) )) (swiz w (var_ref u_b4) )) (swiz w (var_ref i_b4) )) )) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref u_i) (var_ref i_i) ) ) 
      (declare (temporary ) ivec2 assignment_tmp)
      (assign (constant bool (1)) (xy) (var_ref assignment_tmp)  (expression ivec2 + (var_ref u_i2) (var_ref i_i2) ) ) 
      (declare (temporary ) ivec3 assignment_tmp)
      (assign (constant bool (1)) (xyz) (var_ref assignment_tmp)  (expression ivec3 + (var_ref u_i3) (var_ref i_i3) ) ) 
      (declare (temporary ) ivec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression ivec4 + (var_ref u_i4) (var_ref i_i4) ) ) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref u_f) (var_ref i_f) ) ) 
      (declare (temporary ) vec2 assignment_tmp)
      (assign (constant bool (1)) (xy) (var_ref assignment_tmp)  (expression vec2 + (var_ref u_f2) (var_ref i_f2) ) ) 
      (declare (temporary ) vec3 assignment_tmp)
      (assign (constant bool (1)) (xyz) (var_ref assignment_tmp)  (expression vec3 + (var_ref u_f3) (var_ref i_f3) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref u_f4) (var_ref i_f4) ) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool ^^ (var_ref u_b) (var_ref i_b) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz z (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz z (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz w (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) vec4 conditional_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (swiz xxxx (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float i2f (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (var_ref assignment_tmp) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz w (var_ref assignment_tmp) )) ) (var_ref assignment_tmp) ) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz w (var_ref assignment_tmp) )) )) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (constant vec4 (1.000000 1.000000 1.000000 1.000000)) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref conditional_tmp) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform bvec2 u_b2;
uniform bvec3 u_b3;
uniform bvec4 u_b4;
uniform int u_i;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform float u_f;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
uniform bool u_b;
in bvec2 i_b2;
in bvec3 i_b3;
in bvec4 i_b4;
in int i_i;
in ivec2 i_i2;
in ivec3 i_i3;
in ivec4 i_i4;
in float i_f;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
in bool i_b;
const bool const75;
const vec4 const125;

void main()
{
    bool temp21;
    bool temp22;
    bool temp23;
    bool temp24;
    bool temp25;
    bool temp26;
    bool temp27;
    bool temp28;
    bool temp29;
    vec4 temp30;
    bool temp31 = u_b2.x;
    bool temp32 = i_b2.x;
    bool temp33 = temp31 ^ temp32;
    bool temp34 = u_b2.y;
    bool temp35 = temp33 ^ temp34;
    bool temp36 = i_b2.y;
    bool temp37 = temp35 ^ temp36;
    bvec2 temp38 = bvec2(temp37);
    bool temp39 = u_b3.x;
    bool temp40 = i_b3.x;
    bool temp41 = temp39 ^ temp40;
    bool temp42 = u_b3.y;
    bool temp43 = temp41 ^ temp42;
    bool temp44 = i_b3.y;
    bool temp45 = temp43 ^ temp44;
    bool temp46 = u_b3.z;
    bool temp47 = temp45 ^ temp46;
    bool temp48 = i_b3.z;
    bool temp49 = temp47 ^ temp48;
    bvec3 temp50 = bvec3(temp49);
    bool temp51 = u_b4.x;
    bool temp52 = i_b4.x;
    bool temp53 = temp51 ^ temp52;
    bool temp54 = u_b4.y;
    bool temp55 = temp53 ^ temp54;
    bool temp56 = i_b4.y;
    bool temp57 = temp55 ^ temp56;
    bool temp58 = u_b4.z;
    bool temp59 = temp57 ^ temp58;
    bool temp60 = i_b4.z;
    bool temp61 = temp59 ^ temp60;
    bool temp62 = u_b4.w;
    bool temp63 = temp61 ^ temp62;
    bool temp64 = i_b4.w;
    bool temp65 = temp63 ^ temp64;
    bvec4 temp66 = bvec4(temp65);
    ivec2 temp67 = u_i2 + i_i2;
    ivec3 temp68 = u_i3 + i_i3;
    ivec4 temp69 = u_i4 + i_i4;
    float temp70 = u_f + i_f;
    vec2 temp71 = u_f2 + i_f2;
    vec3 temp72 = u_f3 + i_f3;
    vec4 temp73 = u_f4 + i_f4;
    bool temp74 = u_b ^ i_b;
    if (temp74) {
        temp21 = const75;
    }
    else {
        bool temp76 = temp38.x;
        temp21 = temp76;
    }
    
    if (temp21) {
        temp22 = const75;
    }
    else {
        bool temp77 = temp38.y;
        temp22 = temp77;
    }
    
    if (temp22) {
        temp23 = const75;
    }
    else {
        bool temp78 = temp50.x;
        temp23 = temp78;
    }
    
    if (temp23) {
        temp24 = const75;
    }
    else {
        bool temp79 = temp50.y;
        temp24 = temp79;
    }
    
    if (temp24) {
        temp25 = const75;
    }
    else {
        bool temp80 = temp50.z;
        temp25 = temp80;
    }
    
    if (temp25) {
        temp26 = const75;
    }
    else {
        bool temp81 = temp66.x;
        temp26 = temp81;
    }
    
    if (temp26) {
        temp27 = const75;
    }
    else {
        bool temp82 = temp66.y;
        temp27 = temp82;
    }
    
    if (temp27) {
        temp28 = const75;
    }
    else {
        bool temp83 = temp66.z;
        temp28 = temp83;
    }
    
    if (temp28) {
        temp29 = const75;
    }
    else {
        bool temp84 = temp66.w;
        temp29 = temp84;
    }
    
    if (temp29) {
        int temp85 = temp67.x;
        int temp86 = temp67.y;
        int temp87 = temp68.x;
        int temp88 = temp68.y;
        int temp89 = temp68.z;
        int temp90 = temp69.x;
        int temp91 = temp69.y;
        int temp92 = temp69.z;
        int temp93 = temp69.w;
        int temp94 = i_i + u_i;
        int temp95 = temp94 + temp85;
        int temp96 = temp95 + temp86;
        int temp97 = temp96 + temp87;
        int temp98 = temp97 + temp88;
        int temp99 = temp98 + temp89;
        int temp100 = temp99 + temp90;
        int temp101 = temp100 + temp91;
        int temp102 = temp101 + temp92;
        int temp103 = temp102 + temp93;
        float temp104 = float(temp103);
        float temp105 = temp104 + temp70;
        float temp106 = temp71.x;
        float temp107 = temp105 + temp106;
        float temp108 = temp71.y;
        float temp109 = temp107 + temp108;
        float temp110 = temp72.x;
        float temp111 = temp109 + temp110;
        float temp112 = temp72.y;
        float temp113 = temp111 + temp112;
        float temp114 = temp72.z;
        float temp115 = temp113 + temp114;
        float temp116 = temp73.x;
        float temp117 = temp115 + temp116;
        float temp118 = temp73.y;
        float temp119 = temp117 + temp118;
        float temp120 = temp73.z;
        float temp121 = temp119 + temp120;
        float temp122 = temp73.w;
        float temp123 = temp121 + temp122;
        vec4 temp124 = vec4(temp123);
        temp30 = temp124;
    }
    else {
        temp30 = const125;
    }
    
    gl_FragColor = temp30;
    return;
}
