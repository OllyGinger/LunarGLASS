; ModuleID = 'Top'

@u_b = external addrspace(1) constant i1
@u_b2 = external addrspace(1) constant <2 x i1>
@u_b3 = external addrspace(1) constant <3 x i1>
@u_b4 = external addrspace(1) constant <4 x i1>
@u_i = external addrspace(1) constant i32
@u_i2 = external addrspace(1) constant <2 x i32>
@u_i3 = external addrspace(1) constant <3 x i32>
@u_i4 = external addrspace(1) constant <4 x i32>
@u_f = external addrspace(1) constant float
@u_f2 = external addrspace(1) constant <2 x float>
@u_f3 = external addrspace(1) constant <3 x float>
@u_f4 = external addrspace(1) constant <4 x float>
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %conditional_tmp = alloca <4 x float>
  %or_tmp136 = alloca i1
  %or_tmp131 = alloca i1
  %or_tmp126 = alloca i1
  %or_tmp121 = alloca i1
  %or_tmp116 = alloca i1
  %or_tmp111 = alloca i1
  %or_tmp106 = alloca i1
  %or_tmp101 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp95 = alloca <4 x float>
  %assignment_tmp94 = alloca <3 x float>
  %assignment_tmp93 = alloca <2 x float>
  %assignment_tmp92 = alloca float
  %assignment_tmp91 = alloca <4 x i32>
  %assignment_tmp90 = alloca <3 x i32>
  %assignment_tmp89 = alloca <2 x i32>
  %assignment_tmp = alloca i32
  %vec_ctor87 = alloca <4 x i1>
  %and_tmp82 = alloca i1
  %and_tmp77 = alloca i1
  %and_tmp71 = alloca i1
  %and_tmp66 = alloca i1
  %and_tmp60 = alloca i1
  %and_tmp55 = alloca i1
  %and_tmp50 = alloca i1
  %vec_ctor46 = alloca <3 x i1>
  %and_tmp41 = alloca i1
  %and_tmp36 = alloca i1
  %and_tmp30 = alloca i1
  %and_tmp25 = alloca i1
  %and_tmp20 = alloca i1
  %vec_ctor = alloca <2 x i1>
  %and_tmp12 = alloca i1
  %and_tmp7 = alloca i1
  %and_tmp2 = alloca i1
  %and_tmp = alloca i1
  %0 = load i1 addrspace(1)* @u_b
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %i_b = call i1 @llvm.gla.readData.i1(i32 0)
  store i1 %i_b, i1* %and_tmp
  br label %ifmerge

else:                                             ; preds = %entry
  store i1 false, i1* %and_tmp
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %1 = load <2 x i1> addrspace(1)* @u_b2
  %swizzleTmp = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %1, i32 0)
  br i1 %swizzleTmp, label %then1, label %else4

then1:                                            ; preds = %ifmerge
  %i_b2 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %swizzleTmp3 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %i_b2, i32 0)
  store i1 %swizzleTmp3, i1* %and_tmp2
  br label %ifmerge5

else4:                                            ; preds = %ifmerge
  store i1 false, i1* %and_tmp2
  br label %ifmerge5

ifmerge5:                                         ; preds = %else4, %then1
  %2 = load i1* %and_tmp2
  br i1 %2, label %then6, label %else9

then6:                                            ; preds = %ifmerge5
  %3 = load <2 x i1> addrspace(1)* @u_b2
  %swizzleTmp8 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %3, i32 1)
  store i1 %swizzleTmp8, i1* %and_tmp7
  br label %ifmerge10

else9:                                            ; preds = %ifmerge5
  store i1 false, i1* %and_tmp7
  br label %ifmerge10

ifmerge10:                                        ; preds = %else9, %then6
  %4 = load i1* %and_tmp7
  br i1 %4, label %then11, label %else15

then11:                                           ; preds = %ifmerge10
  %i_b213 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %swizzleTmp14 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %i_b213, i32 1)
  store i1 %swizzleTmp14, i1* %and_tmp12
  br label %ifmerge16

else15:                                           ; preds = %ifmerge10
  store i1 false, i1* %and_tmp12
  br label %ifmerge16

ifmerge16:                                        ; preds = %else15, %then11
  %5 = load i1* %and_tmp12
  %swizzleTmp17 = call <2 x i1> @llvm.gla.swizzle.v2i1.i1(i1 %5, i32 0)
  store <2 x i1> %swizzleTmp17, <2 x i1>* %vec_ctor
  %6 = load <3 x i1> addrspace(1)* @u_b3
  %swizzleTmp18 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %6, i32 0)
  br i1 %swizzleTmp18, label %then19, label %else22

then19:                                           ; preds = %ifmerge16
  %i_b3 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %swizzleTmp21 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b3, i32 0)
  store i1 %swizzleTmp21, i1* %and_tmp20
  br label %ifmerge23

else22:                                           ; preds = %ifmerge16
  store i1 false, i1* %and_tmp20
  br label %ifmerge23

ifmerge23:                                        ; preds = %else22, %then19
  %7 = load i1* %and_tmp20
  br i1 %7, label %then24, label %else27

then24:                                           ; preds = %ifmerge23
  %8 = load <3 x i1> addrspace(1)* @u_b3
  %swizzleTmp26 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %8, i32 1)
  store i1 %swizzleTmp26, i1* %and_tmp25
  br label %ifmerge28

else27:                                           ; preds = %ifmerge23
  store i1 false, i1* %and_tmp25
  br label %ifmerge28

ifmerge28:                                        ; preds = %else27, %then24
  %9 = load i1* %and_tmp25
  br i1 %9, label %then29, label %else33

then29:                                           ; preds = %ifmerge28
  %i_b331 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %swizzleTmp32 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b331, i32 1)
  store i1 %swizzleTmp32, i1* %and_tmp30
  br label %ifmerge34

else33:                                           ; preds = %ifmerge28
  store i1 false, i1* %and_tmp30
  br label %ifmerge34

ifmerge34:                                        ; preds = %else33, %then29
  %10 = load i1* %and_tmp30
  br i1 %10, label %then35, label %else38

then35:                                           ; preds = %ifmerge34
  %11 = load <3 x i1> addrspace(1)* @u_b3
  %swizzleTmp37 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %11, i32 2)
  store i1 %swizzleTmp37, i1* %and_tmp36
  br label %ifmerge39

else38:                                           ; preds = %ifmerge34
  store i1 false, i1* %and_tmp36
  br label %ifmerge39

ifmerge39:                                        ; preds = %else38, %then35
  %12 = load i1* %and_tmp36
  br i1 %12, label %then40, label %else44

then40:                                           ; preds = %ifmerge39
  %i_b342 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %swizzleTmp43 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b342, i32 2)
  store i1 %swizzleTmp43, i1* %and_tmp41
  br label %ifmerge45

else44:                                           ; preds = %ifmerge39
  store i1 false, i1* %and_tmp41
  br label %ifmerge45

ifmerge45:                                        ; preds = %else44, %then40
  %13 = load i1* %and_tmp41
  %swizzleTmp47 = call <3 x i1> @llvm.gla.swizzle.v3i1.i1(i1 %13, i32 0)
  store <3 x i1> %swizzleTmp47, <3 x i1>* %vec_ctor46
  %14 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp48 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %14, i32 0)
  br i1 %swizzleTmp48, label %then49, label %else52

then49:                                           ; preds = %ifmerge45
  %i_b4 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %swizzleTmp51 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b4, i32 0)
  store i1 %swizzleTmp51, i1* %and_tmp50
  br label %ifmerge53

else52:                                           ; preds = %ifmerge45
  store i1 false, i1* %and_tmp50
  br label %ifmerge53

ifmerge53:                                        ; preds = %else52, %then49
  %15 = load i1* %and_tmp50
  br i1 %15, label %then54, label %else57

then54:                                           ; preds = %ifmerge53
  %16 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp56 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %16, i32 1)
  store i1 %swizzleTmp56, i1* %and_tmp55
  br label %ifmerge58

else57:                                           ; preds = %ifmerge53
  store i1 false, i1* %and_tmp55
  br label %ifmerge58

ifmerge58:                                        ; preds = %else57, %then54
  %17 = load i1* %and_tmp55
  br i1 %17, label %then59, label %else63

then59:                                           ; preds = %ifmerge58
  %i_b461 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %swizzleTmp62 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b461, i32 1)
  store i1 %swizzleTmp62, i1* %and_tmp60
  br label %ifmerge64

else63:                                           ; preds = %ifmerge58
  store i1 false, i1* %and_tmp60
  br label %ifmerge64

ifmerge64:                                        ; preds = %else63, %then59
  %18 = load i1* %and_tmp60
  br i1 %18, label %then65, label %else68

then65:                                           ; preds = %ifmerge64
  %19 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp67 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %19, i32 2)
  store i1 %swizzleTmp67, i1* %and_tmp66
  br label %ifmerge69

else68:                                           ; preds = %ifmerge64
  store i1 false, i1* %and_tmp66
  br label %ifmerge69

ifmerge69:                                        ; preds = %else68, %then65
  %20 = load i1* %and_tmp66
  br i1 %20, label %then70, label %else74

then70:                                           ; preds = %ifmerge69
  %i_b472 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %swizzleTmp73 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b472, i32 2)
  store i1 %swizzleTmp73, i1* %and_tmp71
  br label %ifmerge75

else74:                                           ; preds = %ifmerge69
  store i1 false, i1* %and_tmp71
  br label %ifmerge75

ifmerge75:                                        ; preds = %else74, %then70
  %21 = load i1* %and_tmp71
  br i1 %21, label %then76, label %else79

then76:                                           ; preds = %ifmerge75
  %22 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp78 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %22, i32 3)
  store i1 %swizzleTmp78, i1* %and_tmp77
  br label %ifmerge80

else79:                                           ; preds = %ifmerge75
  store i1 false, i1* %and_tmp77
  br label %ifmerge80

ifmerge80:                                        ; preds = %else79, %then76
  %23 = load i1* %and_tmp77
  br i1 %23, label %then81, label %else85

then81:                                           ; preds = %ifmerge80
  %i_b483 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %swizzleTmp84 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b483, i32 3)
  store i1 %swizzleTmp84, i1* %and_tmp82
  br label %ifmerge86

else85:                                           ; preds = %ifmerge80
  store i1 false, i1* %and_tmp82
  br label %ifmerge86

ifmerge86:                                        ; preds = %else85, %then81
  %24 = load i1* %and_tmp82
  %swizzleTmp88 = call <4 x i1> @llvm.gla.swizzle.v4i1.i1(i1 %24, i32 0)
  store <4 x i1> %swizzleTmp88, <4 x i1>* %vec_ctor87
  %25 = load i32 addrspace(1)* @u_i
  %i_i = call i32 @llvm.gla.readData.i32(i32 4)
  %26 = add i32 %25, %i_i
  store i32 %26, i32* %assignment_tmp
  %27 = load <2 x i32> addrspace(1)* @u_i2
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 5)
  %28 = add <2 x i32> %27, %i_i2
  store <2 x i32> %28, <2 x i32>* %assignment_tmp89
  %29 = load <3 x i32> addrspace(1)* @u_i3
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 6)
  %30 = add <3 x i32> %29, %i_i3
  store <3 x i32> %30, <3 x i32>* %assignment_tmp90
  %31 = load <4 x i32> addrspace(1)* @u_i4
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 7)
  %32 = add <4 x i32> %31, %i_i4
  store <4 x i32> %32, <4 x i32>* %assignment_tmp91
  %33 = load float addrspace(1)* @u_f
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 8, i32 0)
  %34 = fadd float %33, %i_f
  store float %34, float* %assignment_tmp92
  %35 = load <2 x float> addrspace(1)* @u_f2
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 9, i32 0)
  %36 = fadd <2 x float> %35, %i_f2
  store <2 x float> %36, <2 x float>* %assignment_tmp93
  %37 = load <3 x float> addrspace(1)* @u_f3
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 10, i32 0)
  %38 = fadd <3 x float> %37, %i_f3
  store <3 x float> %38, <3 x float>* %assignment_tmp94
  %39 = load <4 x float> addrspace(1)* @u_f4
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 11, i32 0)
  %40 = fadd <4 x float> %39, %i_f4
  store <4 x float> %40, <4 x float>* %assignment_tmp95
  %41 = load i1* %and_tmp
  br i1 %41, label %then96, label %else97

then96:                                           ; preds = %ifmerge86
  store i1 true, i1* %or_tmp
  br label %ifmerge99

else97:                                           ; preds = %ifmerge86
  %42 = load <2 x i1>* %vec_ctor
  %swizzleTmp98 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %42, i32 0)
  store i1 %swizzleTmp98, i1* %or_tmp
  br label %ifmerge99

ifmerge99:                                        ; preds = %else97, %then96
  %43 = load i1* %or_tmp
  br i1 %43, label %then100, label %else102

then100:                                          ; preds = %ifmerge99
  store i1 true, i1* %or_tmp101
  br label %ifmerge104

else102:                                          ; preds = %ifmerge99
  %44 = load <2 x i1>* %vec_ctor
  %swizzleTmp103 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %44, i32 1)
  store i1 %swizzleTmp103, i1* %or_tmp101
  br label %ifmerge104

ifmerge104:                                       ; preds = %else102, %then100
  %45 = load i1* %or_tmp101
  br i1 %45, label %then105, label %else107

then105:                                          ; preds = %ifmerge104
  store i1 true, i1* %or_tmp106
  br label %ifmerge109

else107:                                          ; preds = %ifmerge104
  %46 = load <3 x i1>* %vec_ctor46
  %swizzleTmp108 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %46, i32 0)
  store i1 %swizzleTmp108, i1* %or_tmp106
  br label %ifmerge109

ifmerge109:                                       ; preds = %else107, %then105
  %47 = load i1* %or_tmp106
  br i1 %47, label %then110, label %else112

then110:                                          ; preds = %ifmerge109
  store i1 true, i1* %or_tmp111
  br label %ifmerge114

else112:                                          ; preds = %ifmerge109
  %48 = load <3 x i1>* %vec_ctor46
  %swizzleTmp113 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %48, i32 1)
  store i1 %swizzleTmp113, i1* %or_tmp111
  br label %ifmerge114

ifmerge114:                                       ; preds = %else112, %then110
  %49 = load i1* %or_tmp111
  br i1 %49, label %then115, label %else117

then115:                                          ; preds = %ifmerge114
  store i1 true, i1* %or_tmp116
  br label %ifmerge119

else117:                                          ; preds = %ifmerge114
  %50 = load <3 x i1>* %vec_ctor46
  %swizzleTmp118 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %50, i32 2)
  store i1 %swizzleTmp118, i1* %or_tmp116
  br label %ifmerge119

ifmerge119:                                       ; preds = %else117, %then115
  %51 = load i1* %or_tmp116
  br i1 %51, label %then120, label %else122

then120:                                          ; preds = %ifmerge119
  store i1 true, i1* %or_tmp121
  br label %ifmerge124

else122:                                          ; preds = %ifmerge119
  %52 = load <4 x i1>* %vec_ctor87
  %swizzleTmp123 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %52, i32 0)
  store i1 %swizzleTmp123, i1* %or_tmp121
  br label %ifmerge124

ifmerge124:                                       ; preds = %else122, %then120
  %53 = load i1* %or_tmp121
  br i1 %53, label %then125, label %else127

then125:                                          ; preds = %ifmerge124
  store i1 true, i1* %or_tmp126
  br label %ifmerge129

else127:                                          ; preds = %ifmerge124
  %54 = load <4 x i1>* %vec_ctor87
  %swizzleTmp128 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %54, i32 1)
  store i1 %swizzleTmp128, i1* %or_tmp126
  br label %ifmerge129

ifmerge129:                                       ; preds = %else127, %then125
  %55 = load i1* %or_tmp126
  br i1 %55, label %then130, label %else132

then130:                                          ; preds = %ifmerge129
  store i1 true, i1* %or_tmp131
  br label %ifmerge134

else132:                                          ; preds = %ifmerge129
  %56 = load <4 x i1>* %vec_ctor87
  %swizzleTmp133 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %56, i32 2)
  store i1 %swizzleTmp133, i1* %or_tmp131
  br label %ifmerge134

ifmerge134:                                       ; preds = %else132, %then130
  %57 = load i1* %or_tmp131
  br i1 %57, label %then135, label %else137

then135:                                          ; preds = %ifmerge134
  store i1 true, i1* %or_tmp136
  br label %ifmerge139

else137:                                          ; preds = %ifmerge134
  %58 = load <4 x i1>* %vec_ctor87
  %swizzleTmp138 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %58, i32 3)
  store i1 %swizzleTmp138, i1* %or_tmp136
  br label %ifmerge139

ifmerge139:                                       ; preds = %else137, %then135
  %59 = load i1* %or_tmp136
  br i1 %59, label %then140, label %else160

then140:                                          ; preds = %ifmerge139
  %60 = load i32* %assignment_tmp
  %61 = load <2 x i32>* %assignment_tmp89
  %swizzleTmp141 = call i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32> %61, i32 0)
  %62 = add i32 %60, %swizzleTmp141
  %63 = load <2 x i32>* %assignment_tmp89
  %swizzleTmp142 = call i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32> %63, i32 1)
  %64 = add i32 %62, %swizzleTmp142
  %65 = load <3 x i32>* %assignment_tmp90
  %swizzleTmp143 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %65, i32 0)
  %66 = add i32 %64, %swizzleTmp143
  %67 = load <3 x i32>* %assignment_tmp90
  %swizzleTmp144 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %67, i32 1)
  %68 = add i32 %66, %swizzleTmp144
  %69 = load <3 x i32>* %assignment_tmp90
  %swizzleTmp145 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %69, i32 2)
  %70 = add i32 %68, %swizzleTmp145
  %71 = load <4 x i32>* %assignment_tmp91
  %swizzleTmp146 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %71, i32 0)
  %72 = add i32 %70, %swizzleTmp146
  %73 = load <4 x i32>* %assignment_tmp91
  %swizzleTmp147 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %73, i32 1)
  %74 = add i32 %72, %swizzleTmp147
  %75 = load <4 x i32>* %assignment_tmp91
  %swizzleTmp148 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %75, i32 2)
  %76 = add i32 %74, %swizzleTmp148
  %77 = load <4 x i32>* %assignment_tmp91
  %swizzleTmp149 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %77, i32 3)
  %78 = add i32 %76, %swizzleTmp149
  %79 = sitofp i32 %78 to float
  %80 = load float* %assignment_tmp92
  %81 = fadd float %79, %80
  %82 = load <2 x float>* %assignment_tmp93
  %swizzleTmp150 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %82, i32 0)
  %83 = fadd float %81, %swizzleTmp150
  %84 = load <2 x float>* %assignment_tmp93
  %swizzleTmp151 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %84, i32 1)
  %85 = fadd float %83, %swizzleTmp151
  %86 = load <3 x float>* %assignment_tmp94
  %swizzleTmp152 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %86, i32 0)
  %87 = fadd float %85, %swizzleTmp152
  %88 = load <3 x float>* %assignment_tmp94
  %swizzleTmp153 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %88, i32 1)
  %89 = fadd float %87, %swizzleTmp153
  %90 = load <3 x float>* %assignment_tmp94
  %swizzleTmp154 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %90, i32 2)
  %91 = fadd float %89, %swizzleTmp154
  %92 = load <4 x float>* %assignment_tmp95
  %swizzleTmp155 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %92, i32 0)
  %93 = fadd float %91, %swizzleTmp155
  %94 = load <4 x float>* %assignment_tmp95
  %swizzleTmp156 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %94, i32 1)
  %95 = fadd float %93, %swizzleTmp156
  %96 = load <4 x float>* %assignment_tmp95
  %swizzleTmp157 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %96, i32 2)
  %97 = fadd float %95, %swizzleTmp157
  %98 = load <4 x float>* %assignment_tmp95
  %swizzleTmp158 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %98, i32 3)
  %99 = fadd float %97, %swizzleTmp158
  %swizzleTmp159 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %99, i32 0)
  store <4 x float> %swizzleTmp159, <4 x float>* %conditional_tmp
  br label %ifmerge161

else160:                                          ; preds = %ifmerge139
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %conditional_tmp
  br label %ifmerge161

ifmerge161:                                       ; preds = %else160, %then140
  %100 = load <4 x float>* %conditional_tmp
  store <4 x float> %100, <4 x float>* @gl_FragColor
  %101 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %101)
  ret void
}

declare i1 @llvm.gla.readData.i1(i32) nounwind readonly

declare i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1>, i32) nounwind readnone

declare <2 x i1> @llvm.gla.readData.v2i1(i32) nounwind readonly

declare <2 x i1> @llvm.gla.swizzle.v2i1.i1(i1, i32) nounwind readnone

declare i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1>, i32) nounwind readnone

declare <3 x i1> @llvm.gla.readData.v3i1(i32) nounwind readonly

declare <3 x i1> @llvm.gla.swizzle.v3i1.i1(i1, i32) nounwind readnone

declare i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1>, i32) nounwind readnone

declare <4 x i1> @llvm.gla.readData.v4i1(i32) nounwind readonly

declare <4 x i1> @llvm.gla.swizzle.v4i1.i1(i1, i32) nounwind readnone

declare i32 @llvm.gla.readData.i32(i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32>, i32) nounwind readnone

declare i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32>, i32) nounwind readnone

declare i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v2f32(<2 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v3f32(<3 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v4f32(<4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@u_b = external addrspace(1) constant i1
@u_b2 = external addrspace(1) constant <2 x i1>
@u_b3 = external addrspace(1) constant <3 x i1>
@u_b4 = external addrspace(1) constant <4 x i1>
@u_i = external addrspace(1) constant i32
@u_i2 = external addrspace(1) constant <2 x i32>
@u_i3 = external addrspace(1) constant <3 x i32>
@u_i4 = external addrspace(1) constant <4 x i32>
@u_f = external addrspace(1) constant float
@u_f2 = external addrspace(1) constant <2 x float>
@u_f3 = external addrspace(1) constant <3 x float>
@u_f4 = external addrspace(1) constant <4 x float>

define void @main() {
entry:
  %0 = load i1 addrspace(1)* @u_b
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %i_b = call i1 @llvm.gla.readData.i1(i32 0)
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %and_tmp.0 = phi i1 [ %i_b, %then ], [ false, %else ]
  %1 = load <2 x i1> addrspace(1)* @u_b2
  %swizzleTmp = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %1, i32 0)
  br i1 %swizzleTmp, label %then1, label %else4

then1:                                            ; preds = %ifmerge
  %i_b2 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %swizzleTmp3 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %i_b2, i32 0)
  br label %ifmerge5

else4:                                            ; preds = %ifmerge
  br label %ifmerge5

ifmerge5:                                         ; preds = %else4, %then1
  %and_tmp2.0 = phi i1 [ %swizzleTmp3, %then1 ], [ false, %else4 ]
  br i1 %and_tmp2.0, label %then6, label %else9

then6:                                            ; preds = %ifmerge5
  %swizzleTmp8 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %1, i32 1)
  br label %ifmerge10

else9:                                            ; preds = %ifmerge5
  br label %ifmerge10

ifmerge10:                                        ; preds = %else9, %then6
  %and_tmp7.0 = phi i1 [ %swizzleTmp8, %then6 ], [ false, %else9 ]
  br i1 %and_tmp7.0, label %then11, label %else15

then11:                                           ; preds = %ifmerge10
  %i_b213 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %swizzleTmp14 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %i_b213, i32 1)
  br label %ifmerge16

else15:                                           ; preds = %ifmerge10
  br label %ifmerge16

ifmerge16:                                        ; preds = %else15, %then11
  %and_tmp12.0 = phi i1 [ %swizzleTmp14, %then11 ], [ false, %else15 ]
  %swizzleTmp17 = call <2 x i1> @llvm.gla.swizzle.v2i1.i1(i1 %and_tmp12.0, i32 0)
  %2 = load <3 x i1> addrspace(1)* @u_b3
  %swizzleTmp18 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %2, i32 0)
  br i1 %swizzleTmp18, label %then19, label %else22

then19:                                           ; preds = %ifmerge16
  %i_b3 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %swizzleTmp21 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b3, i32 0)
  br label %ifmerge23

else22:                                           ; preds = %ifmerge16
  br label %ifmerge23

ifmerge23:                                        ; preds = %else22, %then19
  %and_tmp20.0 = phi i1 [ %swizzleTmp21, %then19 ], [ false, %else22 ]
  br i1 %and_tmp20.0, label %then24, label %else27

then24:                                           ; preds = %ifmerge23
  %swizzleTmp26 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %2, i32 1)
  br label %ifmerge28

else27:                                           ; preds = %ifmerge23
  br label %ifmerge28

ifmerge28:                                        ; preds = %else27, %then24
  %and_tmp25.0 = phi i1 [ %swizzleTmp26, %then24 ], [ false, %else27 ]
  br i1 %and_tmp25.0, label %then29, label %else33

then29:                                           ; preds = %ifmerge28
  %i_b331 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %swizzleTmp32 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b331, i32 1)
  br label %ifmerge34

else33:                                           ; preds = %ifmerge28
  br label %ifmerge34

ifmerge34:                                        ; preds = %else33, %then29
  %and_tmp30.0 = phi i1 [ %swizzleTmp32, %then29 ], [ false, %else33 ]
  br i1 %and_tmp30.0, label %then35, label %else38

then35:                                           ; preds = %ifmerge34
  %swizzleTmp37 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %2, i32 2)
  br label %ifmerge39

else38:                                           ; preds = %ifmerge34
  br label %ifmerge39

ifmerge39:                                        ; preds = %else38, %then35
  %and_tmp36.0 = phi i1 [ %swizzleTmp37, %then35 ], [ false, %else38 ]
  br i1 %and_tmp36.0, label %then40, label %else44

then40:                                           ; preds = %ifmerge39
  %i_b342 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %swizzleTmp43 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %i_b342, i32 2)
  br label %ifmerge45

else44:                                           ; preds = %ifmerge39
  br label %ifmerge45

ifmerge45:                                        ; preds = %else44, %then40
  %and_tmp41.0 = phi i1 [ %swizzleTmp43, %then40 ], [ false, %else44 ]
  %swizzleTmp47 = call <3 x i1> @llvm.gla.swizzle.v3i1.i1(i1 %and_tmp41.0, i32 0)
  %3 = load <4 x i1> addrspace(1)* @u_b4
  %swizzleTmp48 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %3, i32 0)
  br i1 %swizzleTmp48, label %then49, label %else52

then49:                                           ; preds = %ifmerge45
  %i_b4 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %swizzleTmp51 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b4, i32 0)
  br label %ifmerge53

else52:                                           ; preds = %ifmerge45
  br label %ifmerge53

ifmerge53:                                        ; preds = %else52, %then49
  %and_tmp50.0 = phi i1 [ %swizzleTmp51, %then49 ], [ false, %else52 ]
  br i1 %and_tmp50.0, label %then54, label %else57

then54:                                           ; preds = %ifmerge53
  %swizzleTmp56 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %3, i32 1)
  br label %ifmerge58

else57:                                           ; preds = %ifmerge53
  br label %ifmerge58

ifmerge58:                                        ; preds = %else57, %then54
  %and_tmp55.0 = phi i1 [ %swizzleTmp56, %then54 ], [ false, %else57 ]
  br i1 %and_tmp55.0, label %then59, label %else63

then59:                                           ; preds = %ifmerge58
  %i_b461 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %swizzleTmp62 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b461, i32 1)
  br label %ifmerge64

else63:                                           ; preds = %ifmerge58
  br label %ifmerge64

ifmerge64:                                        ; preds = %else63, %then59
  %and_tmp60.0 = phi i1 [ %swizzleTmp62, %then59 ], [ false, %else63 ]
  br i1 %and_tmp60.0, label %then65, label %else68

then65:                                           ; preds = %ifmerge64
  %swizzleTmp67 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %3, i32 2)
  br label %ifmerge69

else68:                                           ; preds = %ifmerge64
  br label %ifmerge69

ifmerge69:                                        ; preds = %else68, %then65
  %and_tmp66.0 = phi i1 [ %swizzleTmp67, %then65 ], [ false, %else68 ]
  br i1 %and_tmp66.0, label %then70, label %else74

then70:                                           ; preds = %ifmerge69
  %i_b472 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %swizzleTmp73 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b472, i32 2)
  br label %ifmerge75

else74:                                           ; preds = %ifmerge69
  br label %ifmerge75

ifmerge75:                                        ; preds = %else74, %then70
  %and_tmp71.0 = phi i1 [ %swizzleTmp73, %then70 ], [ false, %else74 ]
  br i1 %and_tmp71.0, label %then76, label %else79

then76:                                           ; preds = %ifmerge75
  %swizzleTmp78 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %3, i32 3)
  br label %ifmerge80

else79:                                           ; preds = %ifmerge75
  br label %ifmerge80

ifmerge80:                                        ; preds = %else79, %then76
  %and_tmp77.0 = phi i1 [ %swizzleTmp78, %then76 ], [ false, %else79 ]
  br i1 %and_tmp77.0, label %then81, label %else85

then81:                                           ; preds = %ifmerge80
  %i_b483 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %swizzleTmp84 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %i_b483, i32 3)
  br label %ifmerge86

else85:                                           ; preds = %ifmerge80
  br label %ifmerge86

ifmerge86:                                        ; preds = %else85, %then81
  %and_tmp82.0 = phi i1 [ %swizzleTmp84, %then81 ], [ false, %else85 ]
  %swizzleTmp88 = call <4 x i1> @llvm.gla.swizzle.v4i1.i1(i1 %and_tmp82.0, i32 0)
  %4 = load i32 addrspace(1)* @u_i
  %i_i = call i32 @llvm.gla.readData.i32(i32 4)
  %5 = load <2 x i32> addrspace(1)* @u_i2
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 5)
  %6 = add <2 x i32> %5, %i_i2
  %7 = load <3 x i32> addrspace(1)* @u_i3
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 6)
  %8 = add <3 x i32> %7, %i_i3
  %9 = load <4 x i32> addrspace(1)* @u_i4
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 7)
  %10 = add <4 x i32> %9, %i_i4
  %11 = load float addrspace(1)* @u_f
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 8, i32 0)
  %12 = fadd float %11, %i_f
  %13 = load <2 x float> addrspace(1)* @u_f2
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 9, i32 0)
  %14 = fadd <2 x float> %13, %i_f2
  %15 = load <3 x float> addrspace(1)* @u_f3
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 10, i32 0)
  %16 = fadd <3 x float> %15, %i_f3
  %17 = load <4 x float> addrspace(1)* @u_f4
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 11, i32 0)
  %18 = fadd <4 x float> %17, %i_f4
  br i1 %and_tmp.0, label %then96, label %else97

then96:                                           ; preds = %ifmerge86
  br label %ifmerge99

else97:                                           ; preds = %ifmerge86
  %swizzleTmp98 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %swizzleTmp17, i32 0)
  br label %ifmerge99

ifmerge99:                                        ; preds = %else97, %then96
  %or_tmp.0 = phi i1 [ true, %then96 ], [ %swizzleTmp98, %else97 ]
  br i1 %or_tmp.0, label %then100, label %else102

then100:                                          ; preds = %ifmerge99
  br label %ifmerge104

else102:                                          ; preds = %ifmerge99
  %swizzleTmp103 = call i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1> %swizzleTmp17, i32 1)
  br label %ifmerge104

ifmerge104:                                       ; preds = %else102, %then100
  %or_tmp101.0 = phi i1 [ true, %then100 ], [ %swizzleTmp103, %else102 ]
  br i1 %or_tmp101.0, label %then105, label %else107

then105:                                          ; preds = %ifmerge104
  br label %ifmerge109

else107:                                          ; preds = %ifmerge104
  %swizzleTmp108 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %swizzleTmp47, i32 0)
  br label %ifmerge109

ifmerge109:                                       ; preds = %else107, %then105
  %or_tmp106.0 = phi i1 [ true, %then105 ], [ %swizzleTmp108, %else107 ]
  br i1 %or_tmp106.0, label %then110, label %else112

then110:                                          ; preds = %ifmerge109
  br label %ifmerge114

else112:                                          ; preds = %ifmerge109
  %swizzleTmp113 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %swizzleTmp47, i32 1)
  br label %ifmerge114

ifmerge114:                                       ; preds = %else112, %then110
  %or_tmp111.0 = phi i1 [ true, %then110 ], [ %swizzleTmp113, %else112 ]
  br i1 %or_tmp111.0, label %then115, label %else117

then115:                                          ; preds = %ifmerge114
  br label %ifmerge119

else117:                                          ; preds = %ifmerge114
  %swizzleTmp118 = call i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1> %swizzleTmp47, i32 2)
  br label %ifmerge119

ifmerge119:                                       ; preds = %else117, %then115
  %or_tmp116.0 = phi i1 [ true, %then115 ], [ %swizzleTmp118, %else117 ]
  br i1 %or_tmp116.0, label %then120, label %else122

then120:                                          ; preds = %ifmerge119
  br label %ifmerge124

else122:                                          ; preds = %ifmerge119
  %swizzleTmp123 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %swizzleTmp88, i32 0)
  br label %ifmerge124

ifmerge124:                                       ; preds = %else122, %then120
  %or_tmp121.0 = phi i1 [ true, %then120 ], [ %swizzleTmp123, %else122 ]
  br i1 %or_tmp121.0, label %then125, label %else127

then125:                                          ; preds = %ifmerge124
  br label %ifmerge129

else127:                                          ; preds = %ifmerge124
  %swizzleTmp128 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %swizzleTmp88, i32 1)
  br label %ifmerge129

ifmerge129:                                       ; preds = %else127, %then125
  %or_tmp126.0 = phi i1 [ true, %then125 ], [ %swizzleTmp128, %else127 ]
  br i1 %or_tmp126.0, label %then130, label %else132

then130:                                          ; preds = %ifmerge129
  br label %ifmerge134

else132:                                          ; preds = %ifmerge129
  %swizzleTmp133 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %swizzleTmp88, i32 2)
  br label %ifmerge134

ifmerge134:                                       ; preds = %else132, %then130
  %or_tmp131.0 = phi i1 [ true, %then130 ], [ %swizzleTmp133, %else132 ]
  br i1 %or_tmp131.0, label %then135, label %else137

then135:                                          ; preds = %ifmerge134
  br label %ifmerge139

else137:                                          ; preds = %ifmerge134
  %swizzleTmp138 = call i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1> %swizzleTmp88, i32 3)
  br label %ifmerge139

ifmerge139:                                       ; preds = %else137, %then135
  %or_tmp136.0 = phi i1 [ true, %then135 ], [ %swizzleTmp138, %else137 ]
  br i1 %or_tmp136.0, label %then140, label %else160

then140:                                          ; preds = %ifmerge139
  %swizzleTmp141 = call i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32> %6, i32 0)
  %swizzleTmp142 = call i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32> %6, i32 1)
  %swizzleTmp143 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %8, i32 0)
  %swizzleTmp144 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %8, i32 1)
  %swizzleTmp145 = call i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32> %8, i32 2)
  %swizzleTmp146 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %10, i32 0)
  %swizzleTmp147 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %10, i32 1)
  %swizzleTmp148 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %10, i32 2)
  %swizzleTmp149 = call i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32> %10, i32 3)
  %19 = add i32 %i_i, %4
  %20 = add i32 %19, %swizzleTmp141
  %21 = add i32 %20, %swizzleTmp142
  %22 = add i32 %21, %swizzleTmp143
  %23 = add i32 %22, %swizzleTmp144
  %24 = add i32 %23, %swizzleTmp145
  %25 = add i32 %24, %swizzleTmp146
  %26 = add i32 %25, %swizzleTmp147
  %27 = add i32 %26, %swizzleTmp148
  %28 = add i32 %27, %swizzleTmp149
  %29 = sitofp i32 %28 to float
  %30 = fadd float %29, %12
  %swizzleTmp150 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %14, i32 0)
  %31 = fadd float %30, %swizzleTmp150
  %swizzleTmp151 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %14, i32 1)
  %32 = fadd float %31, %swizzleTmp151
  %swizzleTmp152 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %16, i32 0)
  %33 = fadd float %32, %swizzleTmp152
  %swizzleTmp153 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %16, i32 1)
  %34 = fadd float %33, %swizzleTmp153
  %swizzleTmp154 = call float @llvm.gla.fSwizzle.f32.v3f32(<3 x float> %16, i32 2)
  %35 = fadd float %34, %swizzleTmp154
  %swizzleTmp155 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %18, i32 0)
  %36 = fadd float %35, %swizzleTmp155
  %swizzleTmp156 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %18, i32 1)
  %37 = fadd float %36, %swizzleTmp156
  %swizzleTmp157 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %18, i32 2)
  %38 = fadd float %37, %swizzleTmp157
  %swizzleTmp158 = call float @llvm.gla.fSwizzle.f32.v4f32(<4 x float> %18, i32 3)
  %39 = fadd float %38, %swizzleTmp158
  %swizzleTmp159 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %39, i32 0)
  br label %ifmerge161

else160:                                          ; preds = %ifmerge139
  br label %ifmerge161

ifmerge161:                                       ; preds = %else160, %then140
  %conditional_tmp.0 = phi <4 x float> [ %swizzleTmp159, %then140 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %else160 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %conditional_tmp.0)
  ret void
}

declare i1 @llvm.gla.readData.i1(i32) nounwind readonly

declare i1 @llvm.gla.swizzle.i1.v2i1(<2 x i1>, i32) nounwind readnone

declare <2 x i1> @llvm.gla.readData.v2i1(i32) nounwind readonly

declare <2 x i1> @llvm.gla.swizzle.v2i1.i1(i1, i32) nounwind readnone

declare i1 @llvm.gla.swizzle.i1.v3i1(<3 x i1>, i32) nounwind readnone

declare <3 x i1> @llvm.gla.readData.v3i1(i32) nounwind readonly

declare <3 x i1> @llvm.gla.swizzle.v3i1.i1(i1, i32) nounwind readnone

declare i1 @llvm.gla.swizzle.i1.v4i1(<4 x i1>, i32) nounwind readnone

declare <4 x i1> @llvm.gla.readData.v4i1(i32) nounwind readonly

declare <4 x i1> @llvm.gla.swizzle.v4i1.i1(i1, i32) nounwind readnone

declare i32 @llvm.gla.readData.i32(i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare i32 @llvm.gla.swizzle.i32.v2i32(<2 x i32>, i32) nounwind readnone

declare i32 @llvm.gla.swizzle.i32.v3i32(<3 x i32>, i32) nounwind readnone

declare i32 @llvm.gla.swizzle.i32.v4i32(<4 x i32>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v2f32(<2 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v3f32(<3 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v4f32(<4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
compiling types.frag...
uniform bool u_b ; 
uniform bvec2 u_b2 ; 
uniform bvec3 u_b3 ; 
uniform bvec4 u_b4 ; 
uniform int u_i ; 
uniform ivec2 u_i2 ; 
uniform ivec3 u_i3 ; 
uniform ivec4 u_i4 ; 
uniform float u_f ; 
uniform vec2 u_f2 ; 
uniform vec3 u_f3 ; 
uniform vec4 u_f4 ; 
in bool i_b ; 
in bvec2 i_b2 ; 
in bvec3 i_b3 ; 
in bvec4 i_b4 ; 
in int i_i ; 
in ivec2 i_i2 ; 
in ivec3 i_i3 ; 
in ivec4 i_i4 ; 
in float i_f ; 
in vec2 i_f2 ; 
in vec3 i_f3 ; 
in vec4 i_f4 ; 
void  main (){
bool b = u_b && i_b ; bvec2 b2 = bvec2 ( u_b2 . x && i_b2 . x && u_b2 . y && i_b2 . y ) ; bvec3 b3 = bvec3 ( u_b3 . x && i_b3 . x && u_b3 . y && i_b3 . y && u_b3 . z && i_b3 . z ) ; bvec4 b4 = bvec4 ( u_b4 . x && i_b4 . x && u_b4 . y && i_b4 . y && u_b4 . z && i_b4 . z && u_b4 . w && i_b4 . w ) ; int i = u_i + i_i ; ivec2 i2 = u_i2 + i_i2 ; ivec3 i3 = u_i3 + i_i3 ; ivec4 i4 = u_i4 + i_i4 ; float f = u_f + i_f ; vec2 f2 = u_f2 + i_f2 ; vec3 f3 = u_f3 + i_f3 ; vec4 f4 = u_f4 + i_f4 ; gl_FragColor = b || b2 . x || b2 . y || b3 . x || b3 . y || b3 . z || b4 . x || b4 . y || b4 . z || b4 . w ? vec4 ( i + i2 . x + i2 . y + i3 . x + i3 . y + i3 . z + i4 . x + i4 . y + i4 . z + i4 . w + f + f2 . x + f2 . y + f3 . x + f3 . y + f3 . z + f4 . x + f4 . y + f4 . z + f4 . w ) : vec4 ( i + i2 . x + i2 . y + i3 . x + i3 . y + i3 . z + i4 . x + i4 . y + i4 . z + i4 . w + f + f2 . x + f2 . y + f3 . x + f3 . y + f3 . z + f4 . x + f4 . y + f4 . z + f4 . w ) ; }



(
(declare (in ) vec4 i_f4)
(declare (in ) vec3 i_f3)
(declare (in ) vec2 i_f2)
(declare (in ) float i_f)
(declare (in ) ivec4 i_i4)
(declare (in ) ivec3 i_i3)
(declare (in ) ivec2 i_i2)
(declare (in ) int i_i)
(declare (in ) bvec4 i_b4)
(declare (in ) bvec3 i_b3)
(declare (in ) bvec2 i_b2)
(declare (in ) bool i_b)
(declare (uniform ) vec4 u_f4)
(declare (uniform ) vec3 u_f3)
(declare (uniform ) vec2 u_f2)
(declare (uniform ) float u_f)
(declare (uniform ) ivec4 u_i4)
(declare (uniform ) ivec3 u_i3)
(declare (uniform ) ivec2 u_i2)
(declare (uniform ) int u_i)
(declare (uniform ) bvec4 u_b4)
(declare (uniform ) bvec3 u_b3)
(declare (uniform ) bvec2 u_b2)
(declare (uniform ) bool u_b)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare (temporary ) bool and_tmp)
      (if (var_ref u_b) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref i_b) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (swiz x (var_ref u_b2) )(
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz x (var_ref i_b2) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref u_b2) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref i_b2) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bvec2 vec_ctor)
      (assign (constant bool (1)) (xy) (var_ref vec_ctor)  (swiz xx (var_ref and_tmp) )) 
      (declare (temporary ) bool and_tmp)
      (if (swiz x (var_ref u_b3) )(
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz x (var_ref i_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref u_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref i_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref u_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref i_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bvec3 vec_ctor)
      (assign (constant bool (1)) (xyz) (var_ref vec_ctor)  (swiz xxx (var_ref and_tmp) )) 
      (declare (temporary ) bool and_tmp)
      (if (swiz x (var_ref u_b4) )(
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz x (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref u_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref u_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz w (var_ref u_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz w (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bvec4 vec_ctor)
      (assign (constant bool (1)) (xyzw) (var_ref vec_ctor)  (swiz xxxx (var_ref and_tmp) )) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref u_i) (var_ref i_i) ) ) 
      (declare (temporary ) ivec2 assignment_tmp)
      (assign (constant bool (1)) (xy) (var_ref assignment_tmp)  (expression ivec2 + (var_ref u_i2) (var_ref i_i2) ) ) 
      (declare (temporary ) ivec3 assignment_tmp)
      (assign (constant bool (1)) (xyz) (var_ref assignment_tmp)  (expression ivec3 + (var_ref u_i3) (var_ref i_i3) ) ) 
      (declare (temporary ) ivec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression ivec4 + (var_ref u_i4) (var_ref i_i4) ) ) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref u_f) (var_ref i_f) ) ) 
      (declare (temporary ) vec2 assignment_tmp)
      (assign (constant bool (1)) (xy) (var_ref assignment_tmp)  (expression vec2 + (var_ref u_f2) (var_ref i_f2) ) ) 
      (declare (temporary ) vec3 assignment_tmp)
      (assign (constant bool (1)) (xyz) (var_ref assignment_tmp)  (expression vec3 + (var_ref u_f3) (var_ref i_f3) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref u_f4) (var_ref i_f4) ) ) 
      (declare (temporary ) bool or_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz z (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz z (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz w (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) vec4 conditional_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (swiz xxxx (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float i2f (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (var_ref assignment_tmp) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz w (var_ref assignment_tmp) )) ) (var_ref assignment_tmp) ) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz w (var_ref assignment_tmp) )) )) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (constant vec4 (1.000000 1.000000 1.000000 1.000000)) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref conditional_tmp) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform bool u_b;
uniform bvec2 u_b2;
uniform bvec3 u_b3;
uniform bvec4 u_b4;
uniform int u_i;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform float u_f;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
in bool i_b;
const bool const47 = false;
in bvec2 i_b2;
in bvec2 i_b213;
in bvec3 i_b3;
in bvec3 i_b331;
in bvec3 i_b342;
in bvec4 i_b4;
in bvec4 i_b461;
in bvec4 i_b472;
in bvec4 i_b483;
in int i_i;
in ivec2 i_i2;
in ivec3 i_i3;
in ivec4 i_i4;
in float i_f;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
const bool const76 = true;
const vec4 const126 = vec4(1);

void main()
{
    bool temp21;
    bool temp22;
    bool temp23;
    bool temp24;
    bool temp25;
    bool temp26;
    bool temp27;
    bool temp28;
    bool temp29;
    bool temp30;
    bool temp31;
    bool temp32;
    bool temp33;
    bool temp34;
    bool temp35;
    bool temp36;
    bool temp37;
    bool temp38;
    bool temp39;
    bool temp40;
    bool temp41;
    bool temp42;
    bool temp43;
    bool temp44;
    bool temp45;
    vec4 temp46;
    if (u_b) {
        temp21 = i_b;
    }
    else {
        temp21 = const47;
    }
    
    bool temp48 = u_b2.x;
    if (temp48) {
        bool temp49 = i_b2.x;
        temp22 = temp49;
    }
    else {
        temp22 = const47;
    }
    
    if (temp22) {
        bool temp50 = u_b2.y;
        temp23 = temp50;
    }
    else {
        temp23 = const47;
    }
    
    if (temp23) {
        bool temp51 = i_b213.y;
        temp24 = temp51;
    }
    else {
        temp24 = const47;
    }
    
    bvec2 temp52 = bvec2(temp24);
    bool temp53 = u_b3.x;
    if (temp53) {
        bool temp54 = i_b3.x;
        temp25 = temp54;
    }
    else {
        temp25 = const47;
    }
    
    if (temp25) {
        bool temp55 = u_b3.y;
        temp26 = temp55;
    }
    else {
        temp26 = const47;
    }
    
    if (temp26) {
        bool temp56 = i_b331.y;
        temp27 = temp56;
    }
    else {
        temp27 = const47;
    }
    
    if (temp27) {
        bool temp57 = u_b3.z;
        temp28 = temp57;
    }
    else {
        temp28 = const47;
    }
    
    if (temp28) {
        bool temp58 = i_b342.z;
        temp29 = temp58;
    }
    else {
        temp29 = const47;
    }
    
    bvec3 temp59 = bvec3(temp29);
    bool temp60 = u_b4.x;
    if (temp60) {
        bool temp61 = i_b4.x;
        temp30 = temp61;
    }
    else {
        temp30 = const47;
    }
    
    if (temp30) {
        bool temp62 = u_b4.y;
        temp31 = temp62;
    }
    else {
        temp31 = const47;
    }
    
    if (temp31) {
        bool temp63 = i_b461.y;
        temp32 = temp63;
    }
    else {
        temp32 = const47;
    }
    
    if (temp32) {
        bool temp64 = u_b4.z;
        temp33 = temp64;
    }
    else {
        temp33 = const47;
    }
    
    if (temp33) {
        bool temp65 = i_b472.z;
        temp34 = temp65;
    }
    else {
        temp34 = const47;
    }
    
    if (temp34) {
        bool temp66 = u_b4.w;
        temp35 = temp66;
    }
    else {
        temp35 = const47;
    }
    
    if (temp35) {
        bool temp67 = i_b483.w;
        temp36 = temp67;
    }
    else {
        temp36 = const47;
    }
    
    bvec4 temp68 = bvec4(temp36);
    ivec2 temp69 = u_i2 + i_i2;
    ivec3 temp70 = u_i3 + i_i3;
    ivec4 temp71 = u_i4 + i_i4;
    float temp72 = u_f + i_f;
    vec2 temp73 = u_f2 + i_f2;
    vec3 temp74 = u_f3 + i_f3;
    vec4 temp75 = u_f4 + i_f4;
    if (temp21) {
        temp37 = const76;
    }
    else {
        bool temp77 = temp52.x;
        temp37 = temp77;
    }
    
    if (temp37) {
        temp38 = const76;
    }
    else {
        bool temp78 = temp52.y;
        temp38 = temp78;
    }
    
    if (temp38) {
        temp39 = const76;
    }
    else {
        bool temp79 = temp59.x;
        temp39 = temp79;
    }
    
    if (temp39) {
        temp40 = const76;
    }
    else {
        bool temp80 = temp59.y;
        temp40 = temp80;
    }
    
    if (temp40) {
        temp41 = const76;
    }
    else {
        bool temp81 = temp59.z;
        temp41 = temp81;
    }
    
    if (temp41) {
        temp42 = const76;
    }
    else {
        bool temp82 = temp68.x;
        temp42 = temp82;
    }
    
    if (temp42) {
        temp43 = const76;
    }
    else {
        bool temp83 = temp68.y;
        temp43 = temp83;
    }
    
    if (temp43) {
        temp44 = const76;
    }
    else {
        bool temp84 = temp68.z;
        temp44 = temp84;
    }
    
    if (temp44) {
        temp45 = const76;
    }
    else {
        bool temp85 = temp68.w;
        temp45 = temp85;
    }
    
    if (temp45) {
        int temp86 = temp69.x;
        int temp87 = temp69.y;
        int temp88 = temp70.x;
        int temp89 = temp70.y;
        int temp90 = temp70.z;
        int temp91 = temp71.x;
        int temp92 = temp71.y;
        int temp93 = temp71.z;
        int temp94 = temp71.w;
        int temp95 = i_i + u_i;
        int temp96 = temp95 + temp86;
        int temp97 = temp96 + temp87;
        int temp98 = temp97 + temp88;
        int temp99 = temp98 + temp89;
        int temp100 = temp99 + temp90;
        int temp101 = temp100 + temp91;
        int temp102 = temp101 + temp92;
        int temp103 = temp102 + temp93;
        int temp104 = temp103 + temp94;
        float temp105 = float(temp104);
        float temp106 = temp105 + temp72;
        float temp107 = temp73.x;
        float temp108 = temp106 + temp107;
        float temp109 = temp73.y;
        float temp110 = temp108 + temp109;
        float temp111 = temp74.x;
        float temp112 = temp110 + temp111;
        float temp113 = temp74.y;
        float temp114 = temp112 + temp113;
        float temp115 = temp74.z;
        float temp116 = temp114 + temp115;
        float temp117 = temp75.x;
        float temp118 = temp116 + temp117;
        float temp119 = temp75.y;
        float temp120 = temp118 + temp119;
        float temp121 = temp75.z;
        float temp122 = temp120 + temp121;
        float temp123 = temp75.w;
        float temp124 = temp122 + temp123;
        vec4 temp125 = vec4(temp124);
        temp46 = temp125;
    }
    else {
        temp46 = const126;
    }
    
    gl_FragColor = temp46;
    return;
}
