
Top IR:
; ModuleID = 'Top'

@u_b = external addrspace(1) constant i1
@u_b2 = external addrspace(1) constant <2 x i1>
@u_b3 = external addrspace(1) constant <3 x i1>
@u_b4 = external addrspace(1) constant <4 x i1>
@u_i = external addrspace(1) constant i32
@u_i2 = external addrspace(1) constant <2 x i32>
@u_i3 = external addrspace(1) constant <3 x i32>
@u_i4 = external addrspace(1) constant <4 x i32>
@u_f = external addrspace(1) constant float
@u_f2 = external addrspace(1) constant <2 x float>
@u_f3 = external addrspace(1) constant <3 x float>
@u_f4 = external addrspace(1) constant <4 x float>
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %conditional_tmp = alloca <4 x float>
  %or_tmp142 = alloca i1
  %or_tmp137 = alloca i1
  %or_tmp132 = alloca i1
  %or_tmp127 = alloca i1
  %or_tmp122 = alloca i1
  %or_tmp117 = alloca i1
  %or_tmp112 = alloca i1
  %or_tmp107 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp101 = alloca <4 x float>
  %assignment_tmp99 = alloca <3 x float>
  %assignment_tmp97 = alloca <2 x float>
  %assignment_tmp95 = alloca float
  %assignment_tmp93 = alloca <4 x i32>
  %assignment_tmp91 = alloca <3 x i32>
  %assignment_tmp89 = alloca <2 x i32>
  %assignment_tmp = alloca i32
  %vec_ctor86 = alloca <4 x i1>
  %and_tmp80 = alloca i1
  %and_tmp75 = alloca i1
  %and_tmp69 = alloca i1
  %and_tmp63 = alloca i1
  %and_tmp57 = alloca i1
  %and_tmp52 = alloca i1
  %and_tmp47 = alloca i1
  %vec_ctor45 = alloca <3 x i1>
  %and_tmp39 = alloca i1
  %and_tmp34 = alloca i1
  %and_tmp28 = alloca i1
  %and_tmp23 = alloca i1
  %and_tmp18 = alloca i1
  %vec_ctor = alloca <2 x i1>
  %and_tmp11 = alloca i1
  %and_tmp6 = alloca i1
  %and_tmp1 = alloca i1
  %and_tmp = alloca i1
  %0 = load i1 addrspace(1)* @u_b
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %i_b = call i1 @llvm.gla.readData.i1(i32 0)
  store i1 %i_b, i1* %and_tmp
  br label %ifmerge

else:                                             ; preds = %entry
  store i1 false, i1* %and_tmp
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %1 = load <2 x i1> addrspace(1)* @u_b2
  %2 = extractelement <2 x i1> %1, i32 0
  br i1 %2, label %then2, label %else4

then2:                                            ; preds = %ifmerge
  %i_b2 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %and_tmp13 = extractelement <2 x i1> %i_b2, i32 0
  store i1 %and_tmp13, i1* %and_tmp1
  br label %ifmerge5

else4:                                            ; preds = %ifmerge
  store i1 false, i1* %and_tmp1
  br label %ifmerge5

ifmerge5:                                         ; preds = %else4, %then2
  %3 = load i1* %and_tmp1
  br i1 %3, label %then7, label %else9

then7:                                            ; preds = %ifmerge5
  %4 = load <2 x i1> addrspace(1)* @u_b2
  %and_tmp68 = extractelement <2 x i1> %4, i32 1
  store i1 %and_tmp68, i1* %and_tmp6
  br label %ifmerge10

else9:                                            ; preds = %ifmerge5
  store i1 false, i1* %and_tmp6
  br label %ifmerge10

ifmerge10:                                        ; preds = %else9, %then7
  %5 = load i1* %and_tmp6
  br i1 %5, label %then12, label %else15

then12:                                           ; preds = %ifmerge10
  %i_b213 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %and_tmp1114 = extractelement <2 x i1> %i_b213, i32 1
  store i1 %and_tmp1114, i1* %and_tmp11
  br label %ifmerge16

else15:                                           ; preds = %ifmerge10
  store i1 false, i1* %and_tmp11
  br label %ifmerge16

ifmerge16:                                        ; preds = %else15, %then12
  %6 = load i1* %and_tmp11
  %7 = insertelement <2 x i1> undef, i1 %6, i32 0
  %vec_ctor17 = insertelement <2 x i1> %7, i1 %6, i32 1
  store <2 x i1> %vec_ctor17, <2 x i1>* %vec_ctor
  %8 = load <3 x i1> addrspace(1)* @u_b3
  %9 = extractelement <3 x i1> %8, i32 0
  br i1 %9, label %then19, label %else21

then19:                                           ; preds = %ifmerge16
  %i_b3 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %and_tmp1820 = extractelement <3 x i1> %i_b3, i32 0
  store i1 %and_tmp1820, i1* %and_tmp18
  br label %ifmerge22

else21:                                           ; preds = %ifmerge16
  store i1 false, i1* %and_tmp18
  br label %ifmerge22

ifmerge22:                                        ; preds = %else21, %then19
  %10 = load i1* %and_tmp18
  br i1 %10, label %then24, label %else26

then24:                                           ; preds = %ifmerge22
  %11 = load <3 x i1> addrspace(1)* @u_b3
  %and_tmp2325 = extractelement <3 x i1> %11, i32 1
  store i1 %and_tmp2325, i1* %and_tmp23
  br label %ifmerge27

else26:                                           ; preds = %ifmerge22
  store i1 false, i1* %and_tmp23
  br label %ifmerge27

ifmerge27:                                        ; preds = %else26, %then24
  %12 = load i1* %and_tmp23
  br i1 %12, label %then29, label %else32

then29:                                           ; preds = %ifmerge27
  %i_b330 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %and_tmp2831 = extractelement <3 x i1> %i_b330, i32 1
  store i1 %and_tmp2831, i1* %and_tmp28
  br label %ifmerge33

else32:                                           ; preds = %ifmerge27
  store i1 false, i1* %and_tmp28
  br label %ifmerge33

ifmerge33:                                        ; preds = %else32, %then29
  %13 = load i1* %and_tmp28
  br i1 %13, label %then35, label %else37

then35:                                           ; preds = %ifmerge33
  %14 = load <3 x i1> addrspace(1)* @u_b3
  %and_tmp3436 = extractelement <3 x i1> %14, i32 2
  store i1 %and_tmp3436, i1* %and_tmp34
  br label %ifmerge38

else37:                                           ; preds = %ifmerge33
  store i1 false, i1* %and_tmp34
  br label %ifmerge38

ifmerge38:                                        ; preds = %else37, %then35
  %15 = load i1* %and_tmp34
  br i1 %15, label %then40, label %else43

then40:                                           ; preds = %ifmerge38
  %i_b341 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %and_tmp3942 = extractelement <3 x i1> %i_b341, i32 2
  store i1 %and_tmp3942, i1* %and_tmp39
  br label %ifmerge44

else43:                                           ; preds = %ifmerge38
  store i1 false, i1* %and_tmp39
  br label %ifmerge44

ifmerge44:                                        ; preds = %else43, %then40
  %16 = load i1* %and_tmp39
  %17 = insertelement <3 x i1> undef, i1 %16, i32 0
  %18 = insertelement <3 x i1> %17, i1 %16, i32 1
  %vec_ctor4546 = insertelement <3 x i1> %18, i1 %16, i32 2
  store <3 x i1> %vec_ctor4546, <3 x i1>* %vec_ctor45
  %19 = load <4 x i1> addrspace(1)* @u_b4
  %20 = extractelement <4 x i1> %19, i32 0
  br i1 %20, label %then48, label %else50

then48:                                           ; preds = %ifmerge44
  %i_b4 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %and_tmp4749 = extractelement <4 x i1> %i_b4, i32 0
  store i1 %and_tmp4749, i1* %and_tmp47
  br label %ifmerge51

else50:                                           ; preds = %ifmerge44
  store i1 false, i1* %and_tmp47
  br label %ifmerge51

ifmerge51:                                        ; preds = %else50, %then48
  %21 = load i1* %and_tmp47
  br i1 %21, label %then53, label %else55

then53:                                           ; preds = %ifmerge51
  %22 = load <4 x i1> addrspace(1)* @u_b4
  %and_tmp5254 = extractelement <4 x i1> %22, i32 1
  store i1 %and_tmp5254, i1* %and_tmp52
  br label %ifmerge56

else55:                                           ; preds = %ifmerge51
  store i1 false, i1* %and_tmp52
  br label %ifmerge56

ifmerge56:                                        ; preds = %else55, %then53
  %23 = load i1* %and_tmp52
  br i1 %23, label %then58, label %else61

then58:                                           ; preds = %ifmerge56
  %i_b459 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %and_tmp5760 = extractelement <4 x i1> %i_b459, i32 1
  store i1 %and_tmp5760, i1* %and_tmp57
  br label %ifmerge62

else61:                                           ; preds = %ifmerge56
  store i1 false, i1* %and_tmp57
  br label %ifmerge62

ifmerge62:                                        ; preds = %else61, %then58
  %24 = load i1* %and_tmp57
  br i1 %24, label %then64, label %else66

then64:                                           ; preds = %ifmerge62
  %25 = load <4 x i1> addrspace(1)* @u_b4
  %and_tmp6365 = extractelement <4 x i1> %25, i32 2
  store i1 %and_tmp6365, i1* %and_tmp63
  br label %ifmerge67

else66:                                           ; preds = %ifmerge62
  store i1 false, i1* %and_tmp63
  br label %ifmerge67

ifmerge67:                                        ; preds = %else66, %then64
  %26 = load i1* %and_tmp63
  br i1 %26, label %then70, label %else73

then70:                                           ; preds = %ifmerge67
  %i_b471 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %and_tmp6972 = extractelement <4 x i1> %i_b471, i32 2
  store i1 %and_tmp6972, i1* %and_tmp69
  br label %ifmerge74

else73:                                           ; preds = %ifmerge67
  store i1 false, i1* %and_tmp69
  br label %ifmerge74

ifmerge74:                                        ; preds = %else73, %then70
  %27 = load i1* %and_tmp69
  br i1 %27, label %then76, label %else78

then76:                                           ; preds = %ifmerge74
  %28 = load <4 x i1> addrspace(1)* @u_b4
  %and_tmp7577 = extractelement <4 x i1> %28, i32 3
  store i1 %and_tmp7577, i1* %and_tmp75
  br label %ifmerge79

else78:                                           ; preds = %ifmerge74
  store i1 false, i1* %and_tmp75
  br label %ifmerge79

ifmerge79:                                        ; preds = %else78, %then76
  %29 = load i1* %and_tmp75
  br i1 %29, label %then81, label %else84

then81:                                           ; preds = %ifmerge79
  %i_b482 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %and_tmp8083 = extractelement <4 x i1> %i_b482, i32 3
  store i1 %and_tmp8083, i1* %and_tmp80
  br label %ifmerge85

else84:                                           ; preds = %ifmerge79
  store i1 false, i1* %and_tmp80
  br label %ifmerge85

ifmerge85:                                        ; preds = %else84, %then81
  %30 = load i1* %and_tmp80
  %31 = insertelement <4 x i1> undef, i1 %30, i32 0
  %32 = insertelement <4 x i1> %31, i1 %30, i32 1
  %33 = insertelement <4 x i1> %32, i1 %30, i32 2
  %vec_ctor8687 = insertelement <4 x i1> %33, i1 %30, i32 3
  store <4 x i1> %vec_ctor8687, <4 x i1>* %vec_ctor86
  %34 = load i32 addrspace(1)* @u_i
  %i_i = call i32 @llvm.gla.readData.i32(i32 4)
  %assignment_tmp88 = add i32 %34, %i_i
  store i32 %assignment_tmp88, i32* %assignment_tmp
  %35 = load <2 x i32> addrspace(1)* @u_i2
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 5)
  %assignment_tmp8990 = add <2 x i32> %35, %i_i2
  store <2 x i32> %assignment_tmp8990, <2 x i32>* %assignment_tmp89
  %36 = load <3 x i32> addrspace(1)* @u_i3
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 6)
  %assignment_tmp9192 = add <3 x i32> %36, %i_i3
  store <3 x i32> %assignment_tmp9192, <3 x i32>* %assignment_tmp91
  %37 = load <4 x i32> addrspace(1)* @u_i4
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 7)
  %assignment_tmp9394 = add <4 x i32> %37, %i_i4
  store <4 x i32> %assignment_tmp9394, <4 x i32>* %assignment_tmp93
  %38 = load float addrspace(1)* @u_f
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 8, i32 1)
  %assignment_tmp9596 = fadd float %38, %i_f
  store float %assignment_tmp9596, float* %assignment_tmp95
  %39 = load <2 x float> addrspace(1)* @u_f2
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 9, i32 1)
  %assignment_tmp9798 = fadd <2 x float> %39, %i_f2
  store <2 x float> %assignment_tmp9798, <2 x float>* %assignment_tmp97
  %40 = load <3 x float> addrspace(1)* @u_f3
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 10, i32 1)
  %assignment_tmp99100 = fadd <3 x float> %40, %i_f3
  store <3 x float> %assignment_tmp99100, <3 x float>* %assignment_tmp99
  %41 = load <4 x float> addrspace(1)* @u_f4
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 11, i32 1)
  %assignment_tmp101102 = fadd <4 x float> %41, %i_f4
  store <4 x float> %assignment_tmp101102, <4 x float>* %assignment_tmp101
  %42 = load i1* %and_tmp
  br i1 %42, label %then103, label %else104

then103:                                          ; preds = %ifmerge85
  store i1 true, i1* %or_tmp
  br label %ifmerge106

else104:                                          ; preds = %ifmerge85
  %43 = load <2 x i1>* %vec_ctor
  %or_tmp105 = extractelement <2 x i1> %43, i32 0
  store i1 %or_tmp105, i1* %or_tmp
  br label %ifmerge106

ifmerge106:                                       ; preds = %else104, %then103
  %44 = load i1* %or_tmp
  br i1 %44, label %then108, label %else109

then108:                                          ; preds = %ifmerge106
  store i1 true, i1* %or_tmp107
  br label %ifmerge111

else109:                                          ; preds = %ifmerge106
  %45 = load <2 x i1>* %vec_ctor
  %or_tmp107110 = extractelement <2 x i1> %45, i32 1
  store i1 %or_tmp107110, i1* %or_tmp107
  br label %ifmerge111

ifmerge111:                                       ; preds = %else109, %then108
  %46 = load i1* %or_tmp107
  br i1 %46, label %then113, label %else114

then113:                                          ; preds = %ifmerge111
  store i1 true, i1* %or_tmp112
  br label %ifmerge116

else114:                                          ; preds = %ifmerge111
  %47 = load <3 x i1>* %vec_ctor45
  %or_tmp112115 = extractelement <3 x i1> %47, i32 0
  store i1 %or_tmp112115, i1* %or_tmp112
  br label %ifmerge116

ifmerge116:                                       ; preds = %else114, %then113
  %48 = load i1* %or_tmp112
  br i1 %48, label %then118, label %else119

then118:                                          ; preds = %ifmerge116
  store i1 true, i1* %or_tmp117
  br label %ifmerge121

else119:                                          ; preds = %ifmerge116
  %49 = load <3 x i1>* %vec_ctor45
  %or_tmp117120 = extractelement <3 x i1> %49, i32 1
  store i1 %or_tmp117120, i1* %or_tmp117
  br label %ifmerge121

ifmerge121:                                       ; preds = %else119, %then118
  %50 = load i1* %or_tmp117
  br i1 %50, label %then123, label %else124

then123:                                          ; preds = %ifmerge121
  store i1 true, i1* %or_tmp122
  br label %ifmerge126

else124:                                          ; preds = %ifmerge121
  %51 = load <3 x i1>* %vec_ctor45
  %or_tmp122125 = extractelement <3 x i1> %51, i32 2
  store i1 %or_tmp122125, i1* %or_tmp122
  br label %ifmerge126

ifmerge126:                                       ; preds = %else124, %then123
  %52 = load i1* %or_tmp122
  br i1 %52, label %then128, label %else129

then128:                                          ; preds = %ifmerge126
  store i1 true, i1* %or_tmp127
  br label %ifmerge131

else129:                                          ; preds = %ifmerge126
  %53 = load <4 x i1>* %vec_ctor86
  %or_tmp127130 = extractelement <4 x i1> %53, i32 0
  store i1 %or_tmp127130, i1* %or_tmp127
  br label %ifmerge131

ifmerge131:                                       ; preds = %else129, %then128
  %54 = load i1* %or_tmp127
  br i1 %54, label %then133, label %else134

then133:                                          ; preds = %ifmerge131
  store i1 true, i1* %or_tmp132
  br label %ifmerge136

else134:                                          ; preds = %ifmerge131
  %55 = load <4 x i1>* %vec_ctor86
  %or_tmp132135 = extractelement <4 x i1> %55, i32 1
  store i1 %or_tmp132135, i1* %or_tmp132
  br label %ifmerge136

ifmerge136:                                       ; preds = %else134, %then133
  %56 = load i1* %or_tmp132
  br i1 %56, label %then138, label %else139

then138:                                          ; preds = %ifmerge136
  store i1 true, i1* %or_tmp137
  br label %ifmerge141

else139:                                          ; preds = %ifmerge136
  %57 = load <4 x i1>* %vec_ctor86
  %or_tmp137140 = extractelement <4 x i1> %57, i32 2
  store i1 %or_tmp137140, i1* %or_tmp137
  br label %ifmerge141

ifmerge141:                                       ; preds = %else139, %then138
  %58 = load i1* %or_tmp137
  br i1 %58, label %then143, label %else144

then143:                                          ; preds = %ifmerge141
  store i1 true, i1* %or_tmp142
  br label %ifmerge146

else144:                                          ; preds = %ifmerge141
  %59 = load <4 x i1>* %vec_ctor86
  %or_tmp142145 = extractelement <4 x i1> %59, i32 3
  store i1 %or_tmp142145, i1* %or_tmp142
  br label %ifmerge146

ifmerge146:                                       ; preds = %else144, %then143
  %60 = load i1* %or_tmp142
  br i1 %60, label %then147, label %else149

then147:                                          ; preds = %ifmerge146
  %61 = load i32* %assignment_tmp
  %62 = load <2 x i32>* %assignment_tmp89
  %63 = extractelement <2 x i32> %62, i32 0
  %64 = add i32 %61, %63
  %65 = load <2 x i32>* %assignment_tmp89
  %66 = extractelement <2 x i32> %65, i32 1
  %67 = add i32 %64, %66
  %68 = load <3 x i32>* %assignment_tmp91
  %69 = extractelement <3 x i32> %68, i32 0
  %70 = add i32 %67, %69
  %71 = load <3 x i32>* %assignment_tmp91
  %72 = extractelement <3 x i32> %71, i32 1
  %73 = add i32 %70, %72
  %74 = load <3 x i32>* %assignment_tmp91
  %75 = extractelement <3 x i32> %74, i32 2
  %76 = add i32 %73, %75
  %77 = load <4 x i32>* %assignment_tmp93
  %78 = extractelement <4 x i32> %77, i32 0
  %79 = add i32 %76, %78
  %80 = load <4 x i32>* %assignment_tmp93
  %81 = extractelement <4 x i32> %80, i32 1
  %82 = add i32 %79, %81
  %83 = load <4 x i32>* %assignment_tmp93
  %84 = extractelement <4 x i32> %83, i32 2
  %85 = add i32 %82, %84
  %86 = load <4 x i32>* %assignment_tmp93
  %87 = extractelement <4 x i32> %86, i32 3
  %88 = add i32 %85, %87
  %89 = sitofp i32 %88 to float
  %90 = load float* %assignment_tmp95
  %91 = fadd float %89, %90
  %92 = load <2 x float>* %assignment_tmp97
  %93 = extractelement <2 x float> %92, i32 0
  %94 = fadd float %91, %93
  %95 = load <2 x float>* %assignment_tmp97
  %96 = extractelement <2 x float> %95, i32 1
  %97 = fadd float %94, %96
  %98 = load <3 x float>* %assignment_tmp99
  %99 = extractelement <3 x float> %98, i32 0
  %100 = fadd float %97, %99
  %101 = load <3 x float>* %assignment_tmp99
  %102 = extractelement <3 x float> %101, i32 1
  %103 = fadd float %100, %102
  %104 = load <3 x float>* %assignment_tmp99
  %105 = extractelement <3 x float> %104, i32 2
  %106 = fadd float %103, %105
  %107 = load <4 x float>* %assignment_tmp101
  %108 = extractelement <4 x float> %107, i32 0
  %109 = fadd float %106, %108
  %110 = load <4 x float>* %assignment_tmp101
  %111 = extractelement <4 x float> %110, i32 1
  %112 = fadd float %109, %111
  %113 = load <4 x float>* %assignment_tmp101
  %114 = extractelement <4 x float> %113, i32 2
  %115 = fadd float %112, %114
  %116 = load <4 x float>* %assignment_tmp101
  %117 = extractelement <4 x float> %116, i32 3
  %118 = fadd float %115, %117
  %119 = insertelement <4 x float> undef, float %118, i32 0
  %120 = insertelement <4 x float> %119, float %118, i32 1
  %121 = insertelement <4 x float> %120, float %118, i32 2
  %conditional_tmp148 = insertelement <4 x float> %121, float %118, i32 3
  store <4 x float> %conditional_tmp148, <4 x float>* %conditional_tmp
  br label %ifmerge150

else149:                                          ; preds = %ifmerge146
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %conditional_tmp
  br label %ifmerge150

ifmerge150:                                       ; preds = %else149, %then147
  %gl_FragColor = load <4 x float>* %conditional_tmp
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge150
  %122 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %122)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare i1 @llvm.gla.readData.i1(i32) nounwind readonly

declare <2 x i1> @llvm.gla.readData.v2i1(i32) nounwind readonly

declare <3 x i1> @llvm.gla.readData.v3i1(i32) nounwind readonly

declare <4 x i1> @llvm.gla.readData.v4i1(i32) nounwind readonly

declare i32 @llvm.gla.readData.i32(i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@u_b = external addrspace(1) constant i1
@u_b2 = external addrspace(1) constant <2 x i1>
@u_b3 = external addrspace(1) constant <3 x i1>
@u_b4 = external addrspace(1) constant <4 x i1>
@u_i = external addrspace(1) constant i32
@u_i2 = external addrspace(1) constant <2 x i32>
@u_i3 = external addrspace(1) constant <3 x i32>
@u_i4 = external addrspace(1) constant <4 x i32>
@u_f = external addrspace(1) constant float
@u_f2 = external addrspace(1) constant <2 x float>
@u_f3 = external addrspace(1) constant <3 x float>
@u_f4 = external addrspace(1) constant <4 x float>

define fastcc void @main() {
entry:
  %0 = load i1 addrspace(1)* @u_b
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %i_b = call i1 @llvm.gla.readData.i1(i32 0)
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %and_tmp.0 = phi i1 [ %i_b, %then ], [ false, %else ]
  %1 = load <2 x i1> addrspace(1)* @u_b2
  %2 = extractelement <2 x i1> %1, i32 0
  br i1 %2, label %then2, label %else4

then2:                                            ; preds = %ifmerge
  %i_b2 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %and_tmp13 = extractelement <2 x i1> %i_b2, i32 0
  br label %ifmerge5

else4:                                            ; preds = %ifmerge
  br label %ifmerge5

ifmerge5:                                         ; preds = %else4, %then2
  %and_tmp1.0 = phi i1 [ %and_tmp13, %then2 ], [ false, %else4 ]
  br i1 %and_tmp1.0, label %then7, label %else9

then7:                                            ; preds = %ifmerge5
  %and_tmp68 = extractelement <2 x i1> %1, i32 1
  br label %ifmerge10

else9:                                            ; preds = %ifmerge5
  br label %ifmerge10

ifmerge10:                                        ; preds = %else9, %then7
  %and_tmp6.0 = phi i1 [ %and_tmp68, %then7 ], [ false, %else9 ]
  br i1 %and_tmp6.0, label %then12, label %else15

then12:                                           ; preds = %ifmerge10
  %i_b213 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %and_tmp1114 = extractelement <2 x i1> %i_b213, i32 1
  br label %ifmerge16

else15:                                           ; preds = %ifmerge10
  br label %ifmerge16

ifmerge16:                                        ; preds = %else15, %then12
  %and_tmp11.0 = phi i1 [ %and_tmp1114, %then12 ], [ false, %else15 ]
  %3 = call <2 x i1> @llvm.gla.multiInsert.v2i1.v2i1.i1.i1.i1.i1(<2 x i1> undef, i32 3, i1 %and_tmp11.0, i32 -1, i1 %and_tmp11.0, i32 -1, i1 false, i32 -1, i1 false, i32 -1)
  %4 = load <3 x i1> addrspace(1)* @u_b3
  %5 = extractelement <3 x i1> %4, i32 0
  br i1 %5, label %then19, label %else21

then19:                                           ; preds = %ifmerge16
  %i_b3 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %and_tmp1820 = extractelement <3 x i1> %i_b3, i32 0
  br label %ifmerge22

else21:                                           ; preds = %ifmerge16
  br label %ifmerge22

ifmerge22:                                        ; preds = %else21, %then19
  %and_tmp18.0 = phi i1 [ %and_tmp1820, %then19 ], [ false, %else21 ]
  br i1 %and_tmp18.0, label %then24, label %else26

then24:                                           ; preds = %ifmerge22
  %and_tmp2325 = extractelement <3 x i1> %4, i32 1
  br label %ifmerge27

else26:                                           ; preds = %ifmerge22
  br label %ifmerge27

ifmerge27:                                        ; preds = %else26, %then24
  %and_tmp23.0 = phi i1 [ %and_tmp2325, %then24 ], [ false, %else26 ]
  br i1 %and_tmp23.0, label %then29, label %else32

then29:                                           ; preds = %ifmerge27
  %i_b330 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %and_tmp2831 = extractelement <3 x i1> %i_b330, i32 1
  br label %ifmerge33

else32:                                           ; preds = %ifmerge27
  br label %ifmerge33

ifmerge33:                                        ; preds = %else32, %then29
  %and_tmp28.0 = phi i1 [ %and_tmp2831, %then29 ], [ false, %else32 ]
  br i1 %and_tmp28.0, label %then35, label %else37

then35:                                           ; preds = %ifmerge33
  %and_tmp3436 = extractelement <3 x i1> %4, i32 2
  br label %ifmerge38

else37:                                           ; preds = %ifmerge33
  br label %ifmerge38

ifmerge38:                                        ; preds = %else37, %then35
  %and_tmp34.0 = phi i1 [ %and_tmp3436, %then35 ], [ false, %else37 ]
  br i1 %and_tmp34.0, label %then40, label %else43

then40:                                           ; preds = %ifmerge38
  %i_b341 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %and_tmp3942 = extractelement <3 x i1> %i_b341, i32 2
  br label %ifmerge44

else43:                                           ; preds = %ifmerge38
  br label %ifmerge44

ifmerge44:                                        ; preds = %else43, %then40
  %and_tmp39.0 = phi i1 [ %and_tmp3942, %then40 ], [ false, %else43 ]
  %6 = call <3 x i1> @llvm.gla.multiInsert.v3i1.v3i1.i1.i1.i1.i1(<3 x i1> undef, i32 7, i1 %and_tmp39.0, i32 -1, i1 %and_tmp39.0, i32 -1, i1 %and_tmp39.0, i32 -1, i1 false, i32 -1)
  %7 = load <4 x i1> addrspace(1)* @u_b4
  %8 = extractelement <4 x i1> %7, i32 0
  br i1 %8, label %then48, label %else50

then48:                                           ; preds = %ifmerge44
  %i_b4 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %and_tmp4749 = extractelement <4 x i1> %i_b4, i32 0
  br label %ifmerge51

else50:                                           ; preds = %ifmerge44
  br label %ifmerge51

ifmerge51:                                        ; preds = %else50, %then48
  %and_tmp47.0 = phi i1 [ %and_tmp4749, %then48 ], [ false, %else50 ]
  br i1 %and_tmp47.0, label %then53, label %else55

then53:                                           ; preds = %ifmerge51
  %and_tmp5254 = extractelement <4 x i1> %7, i32 1
  br label %ifmerge56

else55:                                           ; preds = %ifmerge51
  br label %ifmerge56

ifmerge56:                                        ; preds = %else55, %then53
  %and_tmp52.0 = phi i1 [ %and_tmp5254, %then53 ], [ false, %else55 ]
  br i1 %and_tmp52.0, label %then58, label %else61

then58:                                           ; preds = %ifmerge56
  %i_b459 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %and_tmp5760 = extractelement <4 x i1> %i_b459, i32 1
  br label %ifmerge62

else61:                                           ; preds = %ifmerge56
  br label %ifmerge62

ifmerge62:                                        ; preds = %else61, %then58
  %and_tmp57.0 = phi i1 [ %and_tmp5760, %then58 ], [ false, %else61 ]
  br i1 %and_tmp57.0, label %then64, label %else66

then64:                                           ; preds = %ifmerge62
  %and_tmp6365 = extractelement <4 x i1> %7, i32 2
  br label %ifmerge67

else66:                                           ; preds = %ifmerge62
  br label %ifmerge67

ifmerge67:                                        ; preds = %else66, %then64
  %and_tmp63.0 = phi i1 [ %and_tmp6365, %then64 ], [ false, %else66 ]
  br i1 %and_tmp63.0, label %then70, label %else73

then70:                                           ; preds = %ifmerge67
  %i_b471 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %and_tmp6972 = extractelement <4 x i1> %i_b471, i32 2
  br label %ifmerge74

else73:                                           ; preds = %ifmerge67
  br label %ifmerge74

ifmerge74:                                        ; preds = %else73, %then70
  %and_tmp69.0 = phi i1 [ %and_tmp6972, %then70 ], [ false, %else73 ]
  br i1 %and_tmp69.0, label %then76, label %else78

then76:                                           ; preds = %ifmerge74
  %and_tmp7577 = extractelement <4 x i1> %7, i32 3
  br label %ifmerge79

else78:                                           ; preds = %ifmerge74
  br label %ifmerge79

ifmerge79:                                        ; preds = %else78, %then76
  %and_tmp75.0 = phi i1 [ %and_tmp7577, %then76 ], [ false, %else78 ]
  br i1 %and_tmp75.0, label %then81, label %else84

then81:                                           ; preds = %ifmerge79
  %i_b482 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %and_tmp8083 = extractelement <4 x i1> %i_b482, i32 3
  br label %ifmerge85

else84:                                           ; preds = %ifmerge79
  br label %ifmerge85

ifmerge85:                                        ; preds = %else84, %then81
  %and_tmp80.0 = phi i1 [ %and_tmp8083, %then81 ], [ false, %else84 ]
  %9 = call <4 x i1> @llvm.gla.multiInsert.v4i1.v4i1.i1.i1.i1.i1(<4 x i1> undef, i32 15, i1 %and_tmp80.0, i32 -1, i1 %and_tmp80.0, i32 -1, i1 %and_tmp80.0, i32 -1, i1 %and_tmp80.0, i32 -1)
  %10 = load i32 addrspace(1)* @u_i
  %i_i = call i32 @llvm.gla.readData.i32(i32 4)
  %11 = load <2 x i32> addrspace(1)* @u_i2
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 5)
  %assignment_tmp8990 = add <2 x i32> %11, %i_i2
  %12 = load <3 x i32> addrspace(1)* @u_i3
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 6)
  %assignment_tmp9192 = add <3 x i32> %12, %i_i3
  %13 = load <4 x i32> addrspace(1)* @u_i4
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 7)
  %assignment_tmp9394 = add <4 x i32> %13, %i_i4
  %14 = load float addrspace(1)* @u_f
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 8, i32 1)
  %assignment_tmp9596 = fadd float %14, %i_f
  %15 = load <2 x float> addrspace(1)* @u_f2
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 9, i32 1)
  %assignment_tmp9798 = fadd <2 x float> %15, %i_f2
  %16 = load <3 x float> addrspace(1)* @u_f3
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 10, i32 1)
  %assignment_tmp99100 = fadd <3 x float> %16, %i_f3
  %17 = load <4 x float> addrspace(1)* @u_f4
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 11, i32 1)
  %assignment_tmp101102 = fadd <4 x float> %17, %i_f4
  br i1 %and_tmp.0, label %then103, label %else104

then103:                                          ; preds = %ifmerge85
  br label %ifmerge106

else104:                                          ; preds = %ifmerge85
  %or_tmp105 = extractelement <2 x i1> %3, i32 0
  br label %ifmerge106

ifmerge106:                                       ; preds = %else104, %then103
  %or_tmp.0 = phi i1 [ true, %then103 ], [ %or_tmp105, %else104 ]
  br i1 %or_tmp.0, label %then108, label %else109

then108:                                          ; preds = %ifmerge106
  br label %ifmerge111

else109:                                          ; preds = %ifmerge106
  %or_tmp107110 = extractelement <2 x i1> %3, i32 1
  br label %ifmerge111

ifmerge111:                                       ; preds = %else109, %then108
  %or_tmp107.0 = phi i1 [ true, %then108 ], [ %or_tmp107110, %else109 ]
  br i1 %or_tmp107.0, label %then113, label %else114

then113:                                          ; preds = %ifmerge111
  br label %ifmerge116

else114:                                          ; preds = %ifmerge111
  %or_tmp112115 = extractelement <3 x i1> %6, i32 0
  br label %ifmerge116

ifmerge116:                                       ; preds = %else114, %then113
  %or_tmp112.0 = phi i1 [ true, %then113 ], [ %or_tmp112115, %else114 ]
  br i1 %or_tmp112.0, label %then118, label %else119

then118:                                          ; preds = %ifmerge116
  br label %ifmerge121

else119:                                          ; preds = %ifmerge116
  %or_tmp117120 = extractelement <3 x i1> %6, i32 1
  br label %ifmerge121

ifmerge121:                                       ; preds = %else119, %then118
  %or_tmp117.0 = phi i1 [ true, %then118 ], [ %or_tmp117120, %else119 ]
  br i1 %or_tmp117.0, label %then123, label %else124

then123:                                          ; preds = %ifmerge121
  br label %ifmerge126

else124:                                          ; preds = %ifmerge121
  %or_tmp122125 = extractelement <3 x i1> %6, i32 2
  br label %ifmerge126

ifmerge126:                                       ; preds = %else124, %then123
  %or_tmp122.0 = phi i1 [ true, %then123 ], [ %or_tmp122125, %else124 ]
  br i1 %or_tmp122.0, label %then128, label %else129

then128:                                          ; preds = %ifmerge126
  br label %ifmerge131

else129:                                          ; preds = %ifmerge126
  %or_tmp127130 = extractelement <4 x i1> %9, i32 0
  br label %ifmerge131

ifmerge131:                                       ; preds = %else129, %then128
  %or_tmp127.0 = phi i1 [ true, %then128 ], [ %or_tmp127130, %else129 ]
  br i1 %or_tmp127.0, label %then133, label %else134

then133:                                          ; preds = %ifmerge131
  br label %ifmerge136

else134:                                          ; preds = %ifmerge131
  %or_tmp132135 = extractelement <4 x i1> %9, i32 1
  br label %ifmerge136

ifmerge136:                                       ; preds = %else134, %then133
  %or_tmp132.0 = phi i1 [ true, %then133 ], [ %or_tmp132135, %else134 ]
  br i1 %or_tmp132.0, label %then138, label %else139

then138:                                          ; preds = %ifmerge136
  br label %ifmerge141

else139:                                          ; preds = %ifmerge136
  %or_tmp137140 = extractelement <4 x i1> %9, i32 2
  br label %ifmerge141

ifmerge141:                                       ; preds = %else139, %then138
  %or_tmp137.0 = phi i1 [ true, %then138 ], [ %or_tmp137140, %else139 ]
  br i1 %or_tmp137.0, label %then143, label %else144

then143:                                          ; preds = %ifmerge141
  br label %ifmerge146

else144:                                          ; preds = %ifmerge141
  %or_tmp142145 = extractelement <4 x i1> %9, i32 3
  br label %ifmerge146

ifmerge146:                                       ; preds = %else144, %then143
  %or_tmp142.0 = phi i1 [ true, %then143 ], [ %or_tmp142145, %else144 ]
  br i1 %or_tmp142.0, label %then147, label %else149

then147:                                          ; preds = %ifmerge146
  %18 = extractelement <2 x i32> %assignment_tmp8990, i32 0
  %19 = extractelement <2 x i32> %assignment_tmp8990, i32 1
  %20 = extractelement <3 x i32> %assignment_tmp9192, i32 0
  %21 = extractelement <3 x i32> %assignment_tmp9192, i32 1
  %22 = extractelement <3 x i32> %assignment_tmp9192, i32 2
  %23 = extractelement <4 x i32> %assignment_tmp9394, i32 0
  %24 = extractelement <4 x i32> %assignment_tmp9394, i32 1
  %25 = extractelement <4 x i32> %assignment_tmp9394, i32 2
  %26 = extractelement <4 x i32> %assignment_tmp9394, i32 3
  %assignment_tmp88 = add i32 %i_i, %10
  %27 = add i32 %assignment_tmp88, %19
  %28 = add i32 %27, %18
  %29 = add i32 %28, %22
  %30 = add i32 %29, %21
  %31 = add i32 %30, %20
  %32 = add i32 %31, %26
  %33 = add i32 %32, %25
  %34 = add i32 %33, %24
  %35 = add i32 %34, %23
  %36 = sitofp i32 %35 to float
  %37 = fadd float %36, %assignment_tmp9596
  %38 = extractelement <2 x float> %assignment_tmp9798, i32 0
  %39 = fadd float %37, %38
  %40 = extractelement <2 x float> %assignment_tmp9798, i32 1
  %41 = fadd float %39, %40
  %42 = extractelement <3 x float> %assignment_tmp99100, i32 0
  %43 = fadd float %41, %42
  %44 = extractelement <3 x float> %assignment_tmp99100, i32 1
  %45 = fadd float %43, %44
  %46 = extractelement <3 x float> %assignment_tmp99100, i32 2
  %47 = fadd float %45, %46
  %48 = extractelement <4 x float> %assignment_tmp101102, i32 0
  %49 = fadd float %47, %48
  %50 = extractelement <4 x float> %assignment_tmp101102, i32 1
  %51 = fadd float %49, %50
  %52 = extractelement <4 x float> %assignment_tmp101102, i32 2
  %53 = fadd float %51, %52
  %54 = extractelement <4 x float> %assignment_tmp101102, i32 3
  %55 = fadd float %53, %54
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %55, i32 -1, float %55, i32 -1, float %55, i32 -1, float %55, i32 -1)
  br label %ifmerge150

else149:                                          ; preds = %ifmerge146
  br label %ifmerge150

ifmerge150:                                       ; preds = %else149, %then147
  %conditional_tmp.0 = phi <4 x float> [ %56, %then147 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %else149 ]
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge150
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %conditional_tmp.0)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare i1 @llvm.gla.readData.i1(i32) nounwind readonly

declare <2 x i1> @llvm.gla.readData.v2i1(i32) nounwind readonly

declare <3 x i1> @llvm.gla.readData.v3i1(i32) nounwind readonly

declare <4 x i1> @llvm.gla.readData.v4i1(i32) nounwind readonly

declare i32 @llvm.gla.readData.i32(i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <2 x i1> @llvm.gla.multiInsert.v2i1.v2i1.i1.i1.i1.i1(<2 x i1>, i32, i1, i32, i1, i32, i1, i32, i1, i32) nounwind readnone

declare <3 x i1> @llvm.gla.multiInsert.v3i1.v3i1.i1.i1.i1.i1(<3 x i1>, i32, i1, i32, i1, i32, i1, i32, i1, i32) nounwind readnone

declare <4 x i1> @llvm.gla.multiInsert.v4i1.v4i1.i1.i1.i1.i1(<4 x i1>, i32, i1, i32, i1, i32, i1, i32, i1, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone
compiling types.frag...
uniform bool u_b ; 
uniform bvec2 u_b2 ; 
uniform bvec3 u_b3 ; 
uniform bvec4 u_b4 ; 
uniform int u_i ; 
uniform ivec2 u_i2 ; 
uniform ivec3 u_i3 ; 
uniform ivec4 u_i4 ; 
uniform float u_f ; 
uniform vec2 u_f2 ; 
uniform vec3 u_f3 ; 
uniform vec4 u_f4 ; 
in flat bool i_b ; 
in flat bvec2 i_b2 ; 
in flat bvec3 i_b3 ; 
in flat bvec4 i_b4 ; 
in flat int i_i ; 
in flat ivec2 i_i2 ; 
in flat ivec3 i_i3 ; 
in flat ivec4 i_i4 ; 
in float i_f ; 
in vec2 i_f2 ; 
in vec3 i_f3 ; 
in vec4 i_f4 ; 
void  main (){
bool b = u_b && i_b ; bvec2 b2 = bvec2 ( u_b2 . x && i_b2 . x && u_b2 . y && i_b2 . y ) ; bvec3 b3 = bvec3 ( u_b3 . x && i_b3 . x && u_b3 . y && i_b3 . y && u_b3 . z && i_b3 . z ) ; bvec4 b4 = bvec4 ( u_b4 . x && i_b4 . x && u_b4 . y && i_b4 . y && u_b4 . z && i_b4 . z && u_b4 . w && i_b4 . w ) ; int i = u_i + i_i ; ivec2 i2 = u_i2 + i_i2 ; ivec3 i3 = u_i3 + i_i3 ; ivec4 i4 = u_i4 + i_i4 ; float f = u_f + i_f ; vec2 f2 = u_f2 + i_f2 ; vec3 f3 = u_f3 + i_f3 ; vec4 f4 = u_f4 + i_f4 ; gl_FragColor = b || b2 . x || b2 . y || b3 . x || b3 . y || b3 . z || b4 . x || b4 . y || b4 . z || b4 . w ? vec4 ( i + i2 . x + i2 . y + i3 . x + i3 . y + i3 . z + i4 . x + i4 . y + i4 . z + i4 . w + f + f2 . x + f2 . y + f3 . x + f3 . y + f3 . z + f4 . x + f4 . y + f4 . z + f4 . w ) : vec4 ( i + i2 . x + i2 . y + i3 . x + i3 . y + i3 . z + i4 . x + i4 . y + i4 . z + i4 . w + f + f2 . x + f2 . y + f3 . x + f3 . y + f3 . z + f4 . x + f4 . y + f4 . z + f4 . w ) ; }



(
(declare (in ) vec4 i_f4)
(declare (in ) vec3 i_f3)
(declare (in ) vec2 i_f2)
(declare (in ) float i_f)
(declare (in flat) ivec4 i_i4)
(declare (in flat) ivec3 i_i3)
(declare (in flat) ivec2 i_i2)
(declare (in flat) int i_i)
(declare (in flat) bvec4 i_b4)
(declare (in flat) bvec3 i_b3)
(declare (in flat) bvec2 i_b2)
(declare (in flat) bool i_b)
(declare (uniform ) vec4 u_f4)
(declare (uniform ) vec3 u_f3)
(declare (uniform ) vec2 u_f2)
(declare (uniform ) float u_f)
(declare (uniform ) ivec4 u_i4)
(declare (uniform ) ivec3 u_i3)
(declare (uniform ) ivec2 u_i2)
(declare (uniform ) int u_i)
(declare (uniform ) bvec4 u_b4)
(declare (uniform ) bvec3 u_b3)
(declare (uniform ) bvec2 u_b2)
(declare (uniform ) bool u_b)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare (temporary ) bool and_tmp)
      (if (var_ref u_b) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref i_b) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (swiz x (var_ref u_b2) )(
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz x (var_ref i_b2) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref u_b2) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref i_b2) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bvec2 vec_ctor)
      (assign (constant bool (1)) (xy) (var_ref vec_ctor)  (swiz xx (var_ref and_tmp) )) 
      (declare (temporary ) bool and_tmp)
      (if (swiz x (var_ref u_b3) )(
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz x (var_ref i_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref u_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref i_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref u_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref i_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bvec3 vec_ctor)
      (assign (constant bool (1)) (xyz) (var_ref vec_ctor)  (swiz xxx (var_ref and_tmp) )) 
      (declare (temporary ) bool and_tmp)
      (if (swiz x (var_ref u_b4) )(
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz x (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref u_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref u_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz w (var_ref u_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz w (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bvec4 vec_ctor)
      (assign (constant bool (1)) (xyzw) (var_ref vec_ctor)  (swiz xxxx (var_ref and_tmp) )) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref u_i) (var_ref i_i) ) ) 
      (declare (temporary ) ivec2 assignment_tmp)
      (assign (constant bool (1)) (xy) (var_ref assignment_tmp)  (expression ivec2 + (var_ref u_i2) (var_ref i_i2) ) ) 
      (declare (temporary ) ivec3 assignment_tmp)
      (assign (constant bool (1)) (xyz) (var_ref assignment_tmp)  (expression ivec3 + (var_ref u_i3) (var_ref i_i3) ) ) 
      (declare (temporary ) ivec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression ivec4 + (var_ref u_i4) (var_ref i_i4) ) ) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref u_f) (var_ref i_f) ) ) 
      (declare (temporary ) vec2 assignment_tmp)
      (assign (constant bool (1)) (xy) (var_ref assignment_tmp)  (expression vec2 + (var_ref u_f2) (var_ref i_f2) ) ) 
      (declare (temporary ) vec3 assignment_tmp)
      (assign (constant bool (1)) (xyz) (var_ref assignment_tmp)  (expression vec3 + (var_ref u_f3) (var_ref i_f3) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref u_f4) (var_ref i_f4) ) ) 
      (declare (temporary ) bool or_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz z (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz z (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz w (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) vec4 conditional_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (swiz xxxx (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float i2f (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (var_ref assignment_tmp) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz w (var_ref assignment_tmp) )) ) (var_ref assignment_tmp) ) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz w (var_ref assignment_tmp) )) )) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (constant vec4 (1.000000 1.000000 1.000000 1.000000)) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref conditional_tmp) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform bool u_b;
uniform bvec2 u_b2;
uniform bvec3 u_b3;
uniform bvec4 u_b4;
uniform int u_i;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform float u_f;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
in bool i_b;
const bool const47_false = false;
in bvec2 i_b2;
in bvec2 i_b213;
in bvec3 i_b3;
in bvec3 i_b330;
in bvec3 i_b341;
in bvec4 i_b4;
in bvec4 i_b459;
in bvec4 i_b471;
in bvec4 i_b482;
in int i_i;
in ivec2 i_i2;
in ivec3 i_i3;
in ivec4 i_i4;
in float i_f;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
const bool const58_true = true;
const vec4 const81 = vec4(1);

void main()
{
    bool and_tmp_0;
    bool and_tmp1_0;
    bool and_tmp6_0;
    bool and_tmp11_0;
    bool and_tmp18_0;
    bool and_tmp23_0;
    bool and_tmp28_0;
    bool and_tmp34_0;
    bool and_tmp39_0;
    bool and_tmp47_0;
    bool and_tmp52_0;
    bool and_tmp57_0;
    bool and_tmp63_0;
    bool and_tmp69_0;
    bool and_tmp75_0;
    bool and_tmp80_0;
    bool or_tmp_0;
    bool or_tmp107_0;
    bool or_tmp112_0;
    bool or_tmp117_0;
    bool or_tmp122_0;
    bool or_tmp127_0;
    bool or_tmp132_0;
    bool or_tmp137_0;
    bool or_tmp142_0;
    vec4 conditional_tmp_0;
    if (u_b) {
        and_tmp_0 = i_b;
    }
    else {
        and_tmp_0 = const47_false;
    }
    
    if (u_b2.x) {
        and_tmp1_0 = i_b2.x;
    }
    else {
        and_tmp1_0 = const47_false;
    }
    
    if (and_tmp1_0) {
        and_tmp6_0 = u_b2.y;
    }
    else {
        and_tmp6_0 = const47_false;
    }
    
    if (and_tmp6_0) {
        and_tmp11_0 = i_b213.y;
    }
    else {
        and_tmp11_0 = const47_false;
    }
    
    bvec2 temp48;
    temp48.xy = bvec2(and_tmp11_0, and_tmp11_0);
    if (u_b3.x) {
        and_tmp18_0 = i_b3.x;
    }
    else {
        and_tmp18_0 = const47_false;
    }
    
    if (and_tmp18_0) {
        and_tmp23_0 = u_b3.y;
    }
    else {
        and_tmp23_0 = const47_false;
    }
    
    if (and_tmp23_0) {
        and_tmp28_0 = i_b330.y;
    }
    else {
        and_tmp28_0 = const47_false;
    }
    
    if (and_tmp28_0) {
        and_tmp34_0 = u_b3.z;
    }
    else {
        and_tmp34_0 = const47_false;
    }
    
    if (and_tmp34_0) {
        and_tmp39_0 = i_b341.z;
    }
    else {
        and_tmp39_0 = const47_false;
    }
    
    bvec3 temp49;
    temp49.xyz = bvec3(and_tmp39_0, and_tmp39_0, and_tmp39_0);
    if (u_b4.x) {
        and_tmp47_0 = i_b4.x;
    }
    else {
        and_tmp47_0 = const47_false;
    }
    
    if (and_tmp47_0) {
        and_tmp52_0 = u_b4.y;
    }
    else {
        and_tmp52_0 = const47_false;
    }
    
    if (and_tmp52_0) {
        and_tmp57_0 = i_b459.y;
    }
    else {
        and_tmp57_0 = const47_false;
    }
    
    if (and_tmp57_0) {
        and_tmp63_0 = u_b4.z;
    }
    else {
        and_tmp63_0 = const47_false;
    }
    
    if (and_tmp63_0) {
        and_tmp69_0 = i_b471.z;
    }
    else {
        and_tmp69_0 = const47_false;
    }
    
    if (and_tmp69_0) {
        and_tmp75_0 = u_b4.w;
    }
    else {
        and_tmp75_0 = const47_false;
    }
    
    if (and_tmp75_0) {
        and_tmp80_0 = i_b482.w;
    }
    else {
        and_tmp80_0 = const47_false;
    }
    
    bvec4 temp50 = bvec4(and_tmp80_0, and_tmp80_0, and_tmp80_0, and_tmp80_0);
    ivec2 assignment_tmp8990 = u_i2 + i_i2;
    ivec3 assignment_tmp9192 = u_i3 + i_i3;
    ivec4 assignment_tmp9394 = u_i4 + i_i4;
    float assignment_tmp9596 = u_f + i_f;
    vec2 assignment_tmp9798 = u_f2 + i_f2;
    vec3 assignment_tmp99100 = u_f3 + i_f3;
    vec4 assignment_tmp101102 = u_f4 + i_f4;
    if (and_tmp_0) {
        or_tmp_0 = const58_true;
    }
    else {
        or_tmp_0 = temp48.x;
    }
    
    if (or_tmp_0) {
        or_tmp107_0 = const58_true;
    }
    else {
        or_tmp107_0 = temp48.y;
    }
    
    if (or_tmp107_0) {
        or_tmp112_0 = const58_true;
    }
    else {
        or_tmp112_0 = temp49.x;
    }
    
    if (or_tmp112_0) {
        or_tmp117_0 = const58_true;
    }
    else {
        or_tmp117_0 = temp49.y;
    }
    
    if (or_tmp117_0) {
        or_tmp122_0 = const58_true;
    }
    else {
        or_tmp122_0 = temp49.z;
    }
    
    if (or_tmp122_0) {
        or_tmp127_0 = const58_true;
    }
    else {
        or_tmp127_0 = temp50.x;
    }
    
    if (or_tmp127_0) {
        or_tmp132_0 = const58_true;
    }
    else {
        or_tmp132_0 = temp50.y;
    }
    
    if (or_tmp132_0) {
        or_tmp137_0 = const58_true;
    }
    else {
        or_tmp137_0 = temp50.z;
    }
    
    if (or_tmp137_0) {
        or_tmp142_0 = const58_true;
    }
    else {
        or_tmp142_0 = temp50.w;
    }
    
    if (or_tmp142_0) {
        int assignment_tmp88 = i_i + u_i;
        int temp60 = assignment_tmp88 + assignment_tmp8990.y;
        int temp61 = temp60 + assignment_tmp8990.x;
        int temp62 = temp61 + assignment_tmp9192.z;
        int temp63 = temp62 + assignment_tmp9192.y;
        int temp64 = temp63 + assignment_tmp9192.x;
        int temp65 = temp64 + assignment_tmp9394.w;
        int temp66 = temp65 + assignment_tmp9394.z;
        int temp67 = temp66 + assignment_tmp9394.y;
        int temp68 = temp67 + assignment_tmp9394.x;
        float temp69 = float(temp68);
        float temp70 = temp69 + assignment_tmp9596;
        float temp71 = temp70 + assignment_tmp9798.x;
        float temp72 = temp71 + assignment_tmp9798.y;
        float temp73 = temp72 + assignment_tmp99100.x;
        float temp74 = temp73 + assignment_tmp99100.y;
        float temp75 = temp74 + assignment_tmp99100.z;
        float temp76 = temp75 + assignment_tmp101102.x;
        float temp77 = temp76 + assignment_tmp101102.y;
        float temp78 = temp77 + assignment_tmp101102.z;
        float temp79 = temp78 + assignment_tmp101102.w;
        vec4 temp80 = vec4(temp79, temp79, temp79, temp79);
        conditional_tmp_0 = temp80;
    }
    else {
        conditional_tmp_0 = const81;
    }
    
    gl_FragColor = conditional_tmp_0;
    
}
