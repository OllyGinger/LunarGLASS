
Top IR:
; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@bigColor1_1 = external addrspace(1) constant <4 x float>
@d2 = external addrspace(1) constant float
@d3 = external addrspace(1) constant float
@bigColor1_2 = external addrspace(1) constant <4 x float>
@bigColor1_3 = external addrspace(1) constant <4 x float>
@d4 = external addrspace(1) constant float
@Count = external addrspace(1) constant i32
@bigColor2 = external addrspace(1) constant <4 x float>
@bigColor3 = external addrspace(1) constant <4 x float>
@bigColor4 = external addrspace(1) constant <4 x float>
@bigColor5 = external addrspace(1) constant <4 x float>
@d5 = external addrspace(1) constant float
@d6 = external addrspace(1) constant float
@bigColor6 = external addrspace(1) constant <4 x float>
@d7 = external addrspace(1) constant float
@bigColor7 = external addrspace(1) constant <4 x float>
@d8 = external addrspace(1) constant float
@d9 = external addrspace(1) constant float
@d10 = external addrspace(1) constant float
@d11 = external addrspace(1) constant float
@d12 = external addrspace(1) constant float
@bigColor8 = external addrspace(1) constant <4 x float>
@d13 = external addrspace(1) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer
@d14 = external addrspace(1) constant float
@d15 = external addrspace(1) constant float
@d16 = external addrspace(1) constant float
@d18 = external addrspace(1) constant float
@d17 = external addrspace(1) constant float

define fastcc void @main() {
entry:
  %assignment_tmp341 = alloca <4 x float>
  %assignment_tmp325 = alloca <4 x float>
  %assignment_tmp314 = alloca <4 x float>
  %and_tmp306 = alloca i1
  %assignment_tmp286 = alloca <4 x float>
  %assignment_tmp270 = alloca <4 x float>
  %assignment_tmp251 = alloca <4 x float>
  %assignment_tmp208 = alloca <4 x float>
  %assignment_tmp196 = alloca <4 x float>
  %assignment_tmp182 = alloca <4 x float>
  %assignment_tmp135 = alloca <4 x float>
  %assignment_tmp115 = alloca <4 x float>
  %assignment_tmp99 = alloca <4 x float>
  %i89 = alloca i32
  %i64 = alloca i32
  %i59 = alloca i32
  %assignment_tmp52 = alloca <4 x float>
  %assignment_tmp36 = alloca <4 x float>
  %and_tmp = alloca i1
  %assignment_tmp = alloca <4 x float>
  %color = alloca <4 x float>
  %i4 = alloca i32
  %i3 = alloca i32
  %i2 = alloca i32
  %i1 = alloca i32
  %i = alloca i32
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = load float addrspace(1)* @d
  %3 = fcmp oge float %1, %2
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loopjump:                                    ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %post-loopjump, %loop-header
  %4 = load <4 x float>* %color
  %5 = load <4 x float> addrspace(1)* @bigColor
  %color5 = fadd <4 x float> %4, %5
  store <4 x float> %color5, <4 x float>* %color
  br label %loop-header

loop-merge:                                       ; preds = %then
  br label %loop-header6

loop-header6:                                     ; preds = %ifmerge14, %then12, %loop-merge
  %6 = load <4 x float>* %color
  %7 = extractelement <4 x float> %6, i32 2
  %8 = load float addrspace(1)* @d
  %9 = fcmp oge float %7, %8
  br i1 %9, label %then7, label %ifmerge9

then7:                                            ; preds = %loop-header6
  br label %loop-merge16

post-loopjump8:                                   ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %post-loopjump8, %loop-header6
  %10 = load <4 x float>* %color
  %11 = load <4 x float> addrspace(1)* @bigColor1_1
  %assignment_tmp10 = fadd <4 x float> %10, %11
  store <4 x float> %assignment_tmp10, <4 x float>* %assignment_tmp
  %color11 = load <4 x float>* %assignment_tmp
  store <4 x float> %color11, <4 x float>* %color
  %12 = load <4 x float>* %assignment_tmp
  %13 = extractelement <4 x float> %12, i32 3
  %14 = load float addrspace(1)* @d
  %15 = fcmp olt float %13, %14
  br i1 %15, label %then12, label %ifmerge14

then12:                                           ; preds = %ifmerge9
  br label %loop-header6

post-loopjump13:                                  ; No predecessors!
  br label %ifmerge14

ifmerge14:                                        ; preds = %post-loopjump13, %ifmerge9
  %16 = load <4 x float>* %assignment_tmp
  %17 = load <4 x float> addrspace(1)* @bigColor1_1
  %color15 = fadd <4 x float> %16, %17
  store <4 x float> %color15, <4 x float>* %color
  br label %loop-header6

loop-merge16:                                     ; preds = %then7
  br label %loop-header17

loop-header17:                                    ; preds = %ifmerge20, %loop-merge16
  %18 = load <4 x float>* %color
  %19 = extractelement <4 x float> %18, i32 0
  %20 = fcmp oge float %19, 4.200000e+01
  br i1 %20, label %then18, label %ifmerge20

then18:                                           ; preds = %loop-header17
  br label %loop-merge22

post-loopjump19:                                  ; No predecessors!
  br label %ifmerge20

ifmerge20:                                        ; preds = %post-loopjump19, %loop-header17
  %21 = load <4 x float>* %color
  %22 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color21 = fadd <4 x float> %21, %22
  store <4 x float> %color21, <4 x float>* %color
  br label %loop-header17

loop-merge22:                                     ; preds = %then18
  br label %loop-header23

loop-header23:                                    ; preds = %ifmerge29, %loop-merge22
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(1)* @d2
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then24, label %else

then24:                                           ; preds = %loop-header23
  %27 = load <4 x float>* %color
  %28 = extractelement <4 x float> %27, i32 1
  %29 = load float addrspace(1)* @d3
  %and_tmp25 = fcmp olt float %28, %29
  store i1 %and_tmp25, i1* %and_tmp
  br label %ifmerge26

else:                                             ; preds = %loop-header23
  store i1 false, i1* %and_tmp
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then24
  %30 = load i1* %and_tmp
  %31 = xor i1 %30, true
  br i1 %31, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  br label %loop-merge31

post-loopjump28:                                  ; No predecessors!
  br label %ifmerge29

ifmerge29:                                        ; preds = %post-loopjump28, %ifmerge26
  %32 = load <4 x float>* %color
  %33 = load <4 x float> addrspace(1)* @bigColor1_2
  %color30 = fadd <4 x float> %32, %33
  store <4 x float> %color30, <4 x float>* %color
  br label %loop-header23

loop-merge31:                                     ; preds = %then27
  br label %loop-header32

loop-header32:                                    ; preds = %ifmerge41, %loop-merge31
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 2
  %36 = load float addrspace(1)* @d3
  %37 = fcmp oge float %35, %36
  br i1 %37, label %then33, label %ifmerge35

then33:                                           ; preds = %loop-header32
  br label %loop-merge43

post-loopjump34:                                  ; No predecessors!
  br label %ifmerge35

ifmerge35:                                        ; preds = %post-loopjump34, %loop-header32
  %38 = load <4 x float>* %color
  %39 = load <4 x float> addrspace(1)* @bigColor1_3
  %assignment_tmp3637 = fadd <4 x float> %38, %39
  store <4 x float> %assignment_tmp3637, <4 x float>* %assignment_tmp36
  %color38 = load <4 x float>* %assignment_tmp36
  store <4 x float> %color38, <4 x float>* %color
  %40 = load <4 x float>* %assignment_tmp36
  %41 = extractelement <4 x float> %40, i32 1
  %42 = load float addrspace(1)* @d4
  %43 = fcmp olt float %41, %42
  br i1 %43, label %then39, label %ifmerge41

then39:                                           ; preds = %ifmerge35
  br label %loop-merge43

post-loopjump40:                                  ; No predecessors!
  br label %ifmerge41

ifmerge41:                                        ; preds = %post-loopjump40, %ifmerge35
  %44 = load <4 x float>* %assignment_tmp36
  %45 = load <4 x float> addrspace(1)* @bigColor1_3
  %color42 = fadd <4 x float> %44, %45
  store <4 x float> %color42, <4 x float>* %color
  br label %loop-header32

loop-merge43:                                     ; preds = %then39, %then33
  store i32 0, i32* %i4
  br label %loop-header44

loop-header44:                                    ; preds = %ifmerge47, %loop-merge43
  %46 = load i32* %i4
  %47 = load i32 addrspace(1)* @Count
  %48 = icmp sge i32 %46, %47
  br i1 %48, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge50

post-loopjump46:                                  ; No predecessors!
  br label %ifmerge47

ifmerge47:                                        ; preds = %post-loopjump46, %loop-header44
  %49 = load <4 x float>* %color
  %50 = load <4 x float> addrspace(1)* @bigColor2
  %color48 = fadd <4 x float> %49, %50
  store <4 x float> %color48, <4 x float>* %color
  %51 = load i32* %i4
  %i449 = add i32 %51, 1
  store i32 %i449, i32* %i4
  br label %loop-header44

loop-merge50:                                     ; preds = %then45
  br label %loop-header51

loop-header51:                                    ; preds = %ifmerge57, %loop-merge50
  %52 = load <4 x float>* %color
  %53 = load <4 x float> addrspace(1)* @bigColor3
  %assignment_tmp5253 = fadd <4 x float> %52, %53
  store <4 x float> %assignment_tmp5253, <4 x float>* %assignment_tmp52
  %color54 = load <4 x float>* %assignment_tmp52
  store <4 x float> %color54, <4 x float>* %color
  %54 = load <4 x float>* %assignment_tmp52
  %55 = extractelement <4 x float> %54, i32 0
  %56 = load float addrspace(1)* @d2
  %57 = fcmp oge float %55, %56
  br i1 %57, label %then55, label %ifmerge57

then55:                                           ; preds = %loop-header51
  br label %loop-merge58

post-loopjump56:                                  ; No predecessors!
  br label %ifmerge57

ifmerge57:                                        ; preds = %post-loopjump56, %loop-header51
  br label %loop-header51

loop-merge58:                                     ; preds = %then55
  store i32 0, i32* %i3
  store i32 0, i32* %i59
  br label %loop-header60

loop-header60:                                    ; preds = %loop-header60, %loop-merge58
  %58 = load <4 x float>* %color
  %59 = extractelement <4 x float> %58, i32 2
  %60 = load float addrspace(1)* @d3
  %61 = fadd float %59, %60
  %62 = load <4 x float>* %color
  %color61 = insertelement <4 x float> %62, float %61, i32 2
  store <4 x float> %color61, <4 x float>* %color
  %63 = load i32* %i3
  %i362 = add i32 %63, 1
  store i32 %i362, i32* %i3
  %64 = load i32* %i59
  %65 = add i32 %64, 1
  %66 = icmp sge i32 %65, 42
  store i32 %65, i32* %i59
  br i1 %66, label %loop-merge63, label %loop-header60

loop-merge63:                                     ; preds = %loop-header60
  store i32 0, i32* %i2
  store i32 0, i32* %i64
  br label %loop-header65

loop-header65:                                    ; preds = %ifmerge74, %loop-merge63
  %67 = load <4 x float>* %color
  %68 = extractelement <4 x float> %67, i32 2
  %69 = fcmp olt float %68, 2.000000e+01
  br i1 %69, label %then66, label %else68

then66:                                           ; preds = %loop-header65
  %70 = load <4 x float>* %color
  %71 = extractelement <4 x float> %70, i32 0
  %72 = fadd float %71, 1.000000e+00
  %73 = load <4 x float>* %color
  %color67 = insertelement <4 x float> %73, float %72, i32 0
  store <4 x float> %color67, <4 x float>* %color
  br label %ifmerge70

else68:                                           ; preds = %loop-header65
  %74 = load <4 x float>* %color
  %75 = extractelement <4 x float> %74, i32 1
  %76 = fadd float %75, 1.000000e+00
  %77 = load <4 x float>* %color
  %color69 = insertelement <4 x float> %77, float %76, i32 1
  store <4 x float> %color69, <4 x float>* %color
  br label %ifmerge70

ifmerge70:                                        ; preds = %else68, %then66
  %78 = load <4 x float>* %color
  %79 = extractelement <4 x float> %78, i32 3
  %80 = fcmp olt float %79, 2.000000e+01
  br i1 %80, label %then71, label %ifmerge74

then71:                                           ; preds = %ifmerge70
  %81 = load <4 x float>* %color
  %82 = extractelement <4 x float> %81, i32 2
  %83 = load <4 x float>* %color
  %84 = extractelement <4 x float> %83, i32 1
  %85 = fcmp ogt float %82, %84
  br i1 %85, label %then72, label %ifmerge73

then72:                                           ; preds = %then71
  br label %ifmerge73

ifmerge73:                                        ; preds = %then72, %then71
  br label %ifmerge74

ifmerge74:                                        ; preds = %ifmerge73, %ifmerge70
  %86 = load i32* %i2
  %i275 = add i32 %86, 1
  store i32 %i275, i32* %i2
  %87 = load i32* %i64
  %88 = add i32 %87, 1
  %89 = icmp sge i32 %88, 100
  store i32 %88, i32* %i64
  br i1 %89, label %loop-merge76, label %loop-header65

loop-merge76:                                     ; preds = %ifmerge74
  store i32 0, i32* %i1
  br label %loop-header77

loop-header77:                                    ; preds = %ifmerge85, %then82, %loop-merge76
  %90 = load i32* %i1
  %91 = icmp sge i32 %90, 42
  br i1 %91, label %then78, label %ifmerge80

then78:                                           ; preds = %loop-header77
  br label %loop-merge88

post-loopjump79:                                  ; No predecessors!
  br label %ifmerge80

ifmerge80:                                        ; preds = %post-loopjump79, %loop-header77
  %92 = load <4 x float>* %color
  %93 = extractelement <4 x float> %92, i32 2
  %94 = load float addrspace(1)* @d3
  %95 = fadd float %93, %94
  %96 = load <4 x float>* %color
  %color81 = insertelement <4 x float> %96, float %95, i32 2
  store <4 x float> %color81, <4 x float>* %color
  %97 = load <4 x float>* %color
  %98 = extractelement <4 x float> %97, i32 0
  %99 = load float addrspace(1)* @d4
  %100 = fcmp olt float %98, %99
  br i1 %100, label %then82, label %ifmerge85

then82:                                           ; preds = %ifmerge80
  %101 = load i32* %i1
  %i183 = add i32 %101, 1
  store i32 %i183, i32* %i1
  br label %loop-header77

post-loopjump84:                                  ; No predecessors!
  br label %ifmerge85

ifmerge85:                                        ; preds = %post-loopjump84, %ifmerge80
  %102 = load <4 x float>* %color
  %103 = extractelement <4 x float> %102, i32 3
  %104 = fadd float %103, 1.000000e+00
  %105 = load <4 x float>* %color
  %color86 = insertelement <4 x float> %105, float %104, i32 3
  store <4 x float> %color86, <4 x float>* %color
  %106 = load i32* %i1
  %i187 = add i32 %106, 1
  store i32 %i187, i32* %i1
  br label %loop-header77

loop-merge88:                                     ; preds = %then78
  store i32 0, i32* %i
  store i32 0, i32* %i89
  br label %loop-header90

loop-header90:                                    ; preds = %ifmerge94, %loop-merge88
  %107 = load <4 x float>* %color
  %108 = extractelement <4 x float> %107, i32 2
  %109 = load float addrspace(1)* @d3
  %110 = fadd float %108, %109
  %111 = load <4 x float>* %color
  %color91 = insertelement <4 x float> %111, float %110, i32 2
  store <4 x float> %color91, <4 x float>* %color
  %112 = load <4 x float>* %color
  %113 = extractelement <4 x float> %112, i32 0
  %114 = load float addrspace(1)* @d4
  %115 = fcmp olt float %113, %114
  br i1 %115, label %then92, label %ifmerge94

then92:                                           ; preds = %loop-header90
  br label %loop-merge97

post-loopjump93:                                  ; No predecessors!
  br label %ifmerge94

ifmerge94:                                        ; preds = %post-loopjump93, %loop-header90
  %116 = load <4 x float>* %color
  %117 = extractelement <4 x float> %116, i32 3
  %118 = fadd float %117, 1.000000e+00
  %119 = load <4 x float>* %color
  %color95 = insertelement <4 x float> %119, float %118, i32 3
  store <4 x float> %color95, <4 x float>* %color
  %120 = load i32* %i
  %i96 = add i32 %120, 1
  store i32 %i96, i32* %i
  %121 = load i32* %i89
  %122 = add i32 %121, 1
  %123 = icmp sge i32 %122, 42
  store i32 %122, i32* %i89
  br i1 %123, label %loop-merge97, label %loop-header90

loop-merge97:                                     ; preds = %ifmerge94, %then92
  br label %loop-header98

loop-header98:                                    ; preds = %ifmerge112, %then102, %loop-merge97
  %124 = load <4 x float>* %color
  %125 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp99100 = fadd <4 x float> %124, %125
  store <4 x float> %assignment_tmp99100, <4 x float>* %assignment_tmp99
  %color101 = load <4 x float>* %assignment_tmp99
  store <4 x float> %color101, <4 x float>* %color
  %126 = load <4 x float>* %assignment_tmp99
  %127 = extractelement <4 x float> %126, i32 0
  %128 = load float addrspace(1)* @d4
  %129 = fcmp olt float %127, %128
  br i1 %129, label %then102, label %ifmerge104

then102:                                          ; preds = %loop-header98
  br label %loop-header98

post-loopjump103:                                 ; No predecessors!
  br label %ifmerge104

ifmerge104:                                       ; preds = %post-loopjump103, %loop-header98
  %130 = load <4 x float>* %assignment_tmp99
  %131 = extractelement <4 x float> %130, i32 1
  %132 = load float addrspace(1)* @d4
  %133 = fcmp olt float %131, %132
  br i1 %133, label %then105, label %else107

then105:                                          ; preds = %ifmerge104
  %134 = load <4 x float>* %assignment_tmp99
  %135 = extractelement <4 x float> %134, i32 1
  %136 = load float addrspace(1)* @d4
  %137 = fadd float %135, %136
  %138 = load <4 x float>* %color
  %color106 = insertelement <4 x float> %138, float %137, i32 1
  store <4 x float> %color106, <4 x float>* %color
  br label %ifmerge109

else107:                                          ; preds = %ifmerge104
  %139 = load <4 x float>* %color
  %140 = extractelement <4 x float> %139, i32 0
  %141 = load float addrspace(1)* @d4
  %142 = fadd float %140, %141
  %143 = load <4 x float>* %color
  %color108 = insertelement <4 x float> %143, float %142, i32 0
  store <4 x float> %color108, <4 x float>* %color
  br label %ifmerge109

ifmerge109:                                       ; preds = %else107, %then105
  %144 = load <4 x float>* %color
  %145 = extractelement <4 x float> %144, i32 2
  %146 = load float addrspace(1)* @d4
  %147 = fcmp oge float %145, %146
  br i1 %147, label %then110, label %ifmerge112

then110:                                          ; preds = %ifmerge109
  br label %loop-merge113

post-loopjump111:                                 ; No predecessors!
  br label %ifmerge112

ifmerge112:                                       ; preds = %post-loopjump111, %ifmerge109
  br label %loop-header98

loop-merge113:                                    ; preds = %then110
  br label %loop-header114

loop-header114:                                   ; preds = %ifmerge132, %then120, %loop-merge113
  %148 = load <4 x float>* %color
  %149 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp115116 = fadd <4 x float> %148, %149
  store <4 x float> %assignment_tmp115116, <4 x float>* %assignment_tmp115
  %color117 = load <4 x float>* %assignment_tmp115
  store <4 x float> %color117, <4 x float>* %color
  %150 = load <4 x float>* %assignment_tmp115
  %151 = extractelement <4 x float> %150, i32 0
  %152 = load float addrspace(1)* @d4
  %153 = fcmp olt float %151, %152
  br i1 %153, label %then118, label %ifmerge124

then118:                                          ; preds = %loop-header114
  %154 = load <4 x float>* %assignment_tmp115
  %155 = extractelement <4 x float> %154, i32 2
  %156 = fadd float %155, 2.000000e+00
  %157 = load <4 x float>* %color
  %color119 = insertelement <4 x float> %157, float %156, i32 2
  store <4 x float> %color119, <4 x float>* %color
  %158 = load <4 x float>* %color
  %159 = extractelement <4 x float> %158, i32 2
  %160 = load float addrspace(1)* @d4
  %161 = fcmp olt float %159, %160
  br i1 %161, label %then120, label %ifmerge123

then120:                                          ; preds = %then118
  %162 = load <4 x float>* %color
  %163 = extractelement <4 x float> %162, i32 0
  %164 = fadd float %163, 1.000000e+00
  %165 = load <4 x float>* %color
  %color121 = insertelement <4 x float> %165, float %164, i32 0
  store <4 x float> %color121, <4 x float>* %color
  br label %loop-header114

post-loopjump122:                                 ; No predecessors!
  br label %ifmerge123

ifmerge123:                                       ; preds = %post-loopjump122, %then118
  br label %ifmerge124

ifmerge124:                                       ; preds = %ifmerge123, %loop-header114
  %166 = load <4 x float>* %color
  %167 = extractelement <4 x float> %166, i32 1
  %168 = load float addrspace(1)* @d4
  %169 = fcmp olt float %167, %168
  br i1 %169, label %then125, label %else127

then125:                                          ; preds = %ifmerge124
  %170 = load <4 x float>* %color
  %171 = extractelement <4 x float> %170, i32 1
  %172 = load float addrspace(1)* @d4
  %173 = fadd float %171, %172
  %174 = load <4 x float>* %color
  %color126 = insertelement <4 x float> %174, float %173, i32 1
  store <4 x float> %color126, <4 x float>* %color
  br label %ifmerge129

else127:                                          ; preds = %ifmerge124
  %175 = load <4 x float>* %color
  %176 = extractelement <4 x float> %175, i32 0
  %177 = load float addrspace(1)* @d4
  %178 = fadd float %176, %177
  %179 = load <4 x float>* %color
  %color128 = insertelement <4 x float> %179, float %178, i32 0
  store <4 x float> %color128, <4 x float>* %color
  br label %ifmerge129

ifmerge129:                                       ; preds = %else127, %then125
  %180 = load <4 x float>* %color
  %181 = extractelement <4 x float> %180, i32 2
  %182 = load float addrspace(1)* @d4
  %183 = fcmp oge float %181, %182
  br i1 %183, label %then130, label %ifmerge132

then130:                                          ; preds = %ifmerge129
  br label %loop-merge133

post-loopjump131:                                 ; No predecessors!
  br label %ifmerge132

ifmerge132:                                       ; preds = %post-loopjump131, %ifmerge129
  br label %loop-header114

loop-merge133:                                    ; preds = %then130
  br label %loop-header134

loop-header134:                                   ; preds = %ifmerge143, %loop-merge133
  %184 = load <4 x float>* %color
  %185 = load <4 x float> addrspace(1)* @bigColor5
  %assignment_tmp135136 = fadd <4 x float> %184, %185
  store <4 x float> %assignment_tmp135136, <4 x float>* %assignment_tmp135
  %color137 = load <4 x float>* %assignment_tmp135
  store <4 x float> %color137, <4 x float>* %color
  %186 = load <4 x float>* %assignment_tmp135
  %187 = extractelement <4 x float> %186, i32 1
  %188 = load float addrspace(1)* @d5
  %189 = fcmp olt float %187, %188
  br i1 %189, label %then138, label %ifmerge140

then138:                                          ; preds = %loop-header134
  %190 = load <4 x float>* %assignment_tmp135
  %191 = extractelement <4 x float> %190, i32 1
  %192 = load float addrspace(1)* @d5
  %193 = fadd float %191, %192
  %194 = load <4 x float>* %color
  %color139 = insertelement <4 x float> %194, float %193, i32 1
  store <4 x float> %color139, <4 x float>* %color
  br label %ifmerge140

ifmerge140:                                       ; preds = %then138, %loop-header134
  %195 = load <4 x float>* %color
  %196 = extractelement <4 x float> %195, i32 0
  %197 = load float addrspace(1)* @d5
  %198 = fcmp oge float %196, %197
  br i1 %198, label %then141, label %ifmerge143

then141:                                          ; preds = %ifmerge140
  br label %loop-merge144

post-loopjump142:                                 ; No predecessors!
  br label %ifmerge143

ifmerge143:                                       ; preds = %post-loopjump142, %ifmerge140
  br label %loop-header134

loop-merge144:                                    ; preds = %then141
  %199 = load <4 x float>* %color
  %200 = extractelement <4 x float> %199, i32 0
  %201 = load float addrspace(1)* @d6
  %202 = fcmp olt float %200, %201
  br i1 %202, label %then145, label %else152

then145:                                          ; preds = %loop-merge144
  br label %loop-header146

loop-header146:                                   ; preds = %ifmerge149, %then145
  %203 = load <4 x float>* %color
  %204 = extractelement <4 x float> %203, i32 1
  %205 = load float addrspace(1)* @d6
  %206 = fcmp oge float %204, %205
  br i1 %206, label %then147, label %ifmerge149

then147:                                          ; preds = %loop-header146
  br label %loop-merge151

post-loopjump148:                                 ; No predecessors!
  br label %ifmerge149

ifmerge149:                                       ; preds = %post-loopjump148, %loop-header146
  %207 = load <4 x float>* %color
  %208 = load <4 x float> addrspace(1)* @bigColor6
  %color150 = fadd <4 x float> %207, %208
  store <4 x float> %color150, <4 x float>* %color
  br label %loop-header146

loop-merge151:                                    ; preds = %then147
  br label %ifmerge159

else152:                                          ; preds = %loop-merge144
  br label %loop-header153

loop-header153:                                   ; preds = %ifmerge156, %else152
  %209 = load <4 x float>* %color
  %210 = extractelement <4 x float> %209, i32 2
  %211 = load float addrspace(1)* @d6
  %212 = fcmp oge float %210, %211
  br i1 %212, label %then154, label %ifmerge156

then154:                                          ; preds = %loop-header153
  br label %loop-merge158

post-loopjump155:                                 ; No predecessors!
  br label %ifmerge156

ifmerge156:                                       ; preds = %post-loopjump155, %loop-header153
  %213 = load <4 x float>* %color
  %214 = extractelement <4 x float> %213, i32 2
  %215 = load <4 x float> addrspace(1)* @bigColor6
  %216 = extractelement <4 x float> %215, i32 2
  %217 = fadd float %214, %216
  %218 = load <4 x float>* %color
  %color157 = insertelement <4 x float> %218, float %217, i32 2
  store <4 x float> %color157, <4 x float>* %color
  br label %loop-header153

loop-merge158:                                    ; preds = %then154
  br label %ifmerge159

ifmerge159:                                       ; preds = %loop-merge158, %loop-merge151
  %219 = load <4 x float>* %color
  %220 = extractelement <4 x float> %219, i32 0
  %221 = load float addrspace(1)* @d6
  %222 = fcmp olt float %220, %221
  br i1 %222, label %then160, label %else170

then160:                                          ; preds = %ifmerge159
  br label %loop-header161

loop-header161:                                   ; preds = %ifmerge168, %then160
  %223 = load <4 x float>* %color
  %224 = extractelement <4 x float> %223, i32 1
  %225 = load float addrspace(1)* @d6
  %226 = fcmp oge float %224, %225
  br i1 %226, label %then162, label %ifmerge164

then162:                                          ; preds = %loop-header161
  br label %loop-merge169

post-loopjump163:                                 ; No predecessors!
  br label %ifmerge164

ifmerge164:                                       ; preds = %post-loopjump163, %loop-header161
  %227 = load <4 x float>* %color
  %228 = load <4 x float> addrspace(1)* @bigColor6
  %color165 = fadd <4 x float> %227, %228
  store <4 x float> %color165, <4 x float>* %color
  %229 = load float addrspace(1)* @d7
  %230 = fcmp olt float %229, 1.000000e+00
  br i1 %230, label %then166, label %ifmerge168

then166:                                          ; preds = %ifmerge164
  br label %loop-merge169

post-loopjump167:                                 ; No predecessors!
  br label %ifmerge168

ifmerge168:                                       ; preds = %post-loopjump167, %ifmerge164
  br label %loop-header161

loop-merge169:                                    ; preds = %then166, %then162
  br label %ifmerge177

else170:                                          ; preds = %ifmerge159
  br label %loop-header171

loop-header171:                                   ; preds = %ifmerge174, %else170
  %231 = load <4 x float>* %color
  %232 = extractelement <4 x float> %231, i32 2
  %233 = load float addrspace(1)* @d6
  %234 = fcmp oge float %232, %233
  br i1 %234, label %then172, label %ifmerge174

then172:                                          ; preds = %loop-header171
  br label %loop-merge176

post-loopjump173:                                 ; No predecessors!
  br label %ifmerge174

ifmerge174:                                       ; preds = %post-loopjump173, %loop-header171
  %235 = load <4 x float>* %color
  %236 = extractelement <4 x float> %235, i32 2
  %237 = load <4 x float> addrspace(1)* @bigColor6
  %238 = extractelement <4 x float> %237, i32 2
  %239 = fadd float %236, %238
  %240 = load <4 x float>* %color
  %color175 = insertelement <4 x float> %240, float %239, i32 2
  store <4 x float> %color175, <4 x float>* %color
  br label %loop-header171

loop-merge176:                                    ; preds = %then172
  br label %ifmerge177

ifmerge177:                                       ; preds = %loop-merge176, %loop-merge169
  br label %loop-header178

loop-header178:                                   ; preds = %ifmerge188, %ifmerge177
  %241 = load float addrspace(1)* @d7
  %242 = fcmp olt float %241, 0.000000e+00
  br i1 %242, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge191

post-loopjump180:                                 ; No predecessors!
  br label %ifmerge181

ifmerge181:                                       ; preds = %post-loopjump180, %loop-header178
  %243 = load <4 x float>* %color
  %244 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp182183 = fadd <4 x float> %243, %244
  store <4 x float> %assignment_tmp182183, <4 x float>* %assignment_tmp182
  %color184 = load <4 x float>* %assignment_tmp182
  store <4 x float> %color184, <4 x float>* %color
  %245 = load float addrspace(1)* @d7
  %246 = fcmp olt float %245, 1.000000e+00
  br i1 %246, label %then185, label %ifmerge188

then185:                                          ; preds = %ifmerge181
  %247 = load <4 x float>* %assignment_tmp182
  %248 = extractelement <4 x float> %247, i32 2
  %249 = fadd float %248, 1.000000e+00
  %250 = load <4 x float>* %color
  %color186 = insertelement <4 x float> %250, float %249, i32 2
  store <4 x float> %color186, <4 x float>* %color
  br label %loop-merge191

post-loopjump187:                                 ; No predecessors!
  br label %ifmerge188

ifmerge188:                                       ; preds = %post-loopjump187, %ifmerge181
  %251 = load <4 x float>* %color
  %BaseColor189 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %color190 = fadd <4 x float> %251, %BaseColor189
  store <4 x float> %color190, <4 x float>* %color
  br label %loop-header178

loop-merge191:                                    ; preds = %then185, %then179
  br label %loop-header192

loop-header192:                                   ; preds = %ifmerge214, %loop-merge191
  %252 = load float addrspace(1)* @d8
  %253 = fcmp olt float %252, 0.000000e+00
  br i1 %253, label %then193, label %ifmerge195

then193:                                          ; preds = %loop-header192
  br label %loop-merge215

post-loopjump194:                                 ; No predecessors!
  br label %ifmerge195

ifmerge195:                                       ; preds = %post-loopjump194, %loop-header192
  %254 = load <4 x float>* %color
  %255 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp196197 = fadd <4 x float> %254, %255
  store <4 x float> %assignment_tmp196197, <4 x float>* %assignment_tmp196
  %color198 = load <4 x float>* %assignment_tmp196
  store <4 x float> %color198, <4 x float>* %color
  %256 = load float addrspace(1)* @d8
  %257 = fcmp olt float %256, 1.000000e+00
  br i1 %257, label %then199, label %ifmerge207

then199:                                          ; preds = %ifmerge195
  %258 = load <4 x float>* %assignment_tmp196
  %259 = extractelement <4 x float> %258, i32 2
  %260 = fadd float %259, 1.000000e+00
  %261 = load <4 x float>* %color
  %color200 = insertelement <4 x float> %261, float %260, i32 2
  store <4 x float> %color200, <4 x float>* %color
  %262 = load float addrspace(1)* @d8
  %263 = fcmp olt float %262, 2.000000e+00
  br i1 %263, label %then201, label %else203

then201:                                          ; preds = %then199
  %264 = load <4 x float>* %color
  %265 = extractelement <4 x float> %264, i32 1
  %266 = fadd float %265, 1.000000e+00
  %267 = load <4 x float>* %color
  %color202 = insertelement <4 x float> %267, float %266, i32 1
  store <4 x float> %color202, <4 x float>* %color
  br label %ifmerge205

else203:                                          ; preds = %then199
  %268 = load <4 x float>* %color
  %269 = extractelement <4 x float> %268, i32 0
  %270 = fadd float %269, 1.000000e+00
  %271 = load <4 x float>* %color
  %color204 = insertelement <4 x float> %271, float %270, i32 0
  store <4 x float> %color204, <4 x float>* %color
  br label %ifmerge205

ifmerge205:                                       ; preds = %else203, %then201
  br label %loop-merge215

post-loopjump206:                                 ; No predecessors!
  br label %ifmerge207

ifmerge207:                                       ; preds = %post-loopjump206, %ifmerge195
  %272 = load <4 x float>* %color
  %BaseColor209 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %assignment_tmp208210 = fadd <4 x float> %272, %BaseColor209
  store <4 x float> %assignment_tmp208210, <4 x float>* %assignment_tmp208
  %color211 = load <4 x float>* %assignment_tmp208
  store <4 x float> %color211, <4 x float>* %color
  %273 = load <4 x float>* %assignment_tmp208
  %274 = extractelement <4 x float> %273, i32 2
  %275 = load float addrspace(1)* @d8
  %276 = fcmp oge float %274, %275
  br i1 %276, label %then212, label %ifmerge214

then212:                                          ; preds = %ifmerge207
  br label %loop-merge215

post-loopjump213:                                 ; No predecessors!
  br label %ifmerge214

ifmerge214:                                       ; preds = %post-loopjump213, %ifmerge207
  br label %loop-header192

loop-merge215:                                    ; preds = %then212, %ifmerge205, %then193
  br label %loop-header216

loop-header216:                                   ; preds = %ifmerge228, %loop-merge215
  %277 = load <4 x float>* %color
  %278 = extractelement <4 x float> %277, i32 3
  %279 = load float addrspace(1)* @d9
  %280 = fcmp oge float %278, %279
  br i1 %280, label %then217, label %ifmerge219

then217:                                          ; preds = %loop-header216
  br label %loop-merge229

post-loopjump218:                                 ; No predecessors!
  br label %ifmerge219

ifmerge219:                                       ; preds = %post-loopjump218, %loop-header216
  %281 = load float addrspace(1)* @d9
  %282 = load float addrspace(1)* @d8
  %283 = fcmp ogt float %281, %282
  br i1 %283, label %then220, label %ifmerge228

then220:                                          ; preds = %ifmerge219
  %284 = load <4 x float>* %color
  %285 = extractelement <4 x float> %284, i32 0
  %286 = load float addrspace(1)* @d7
  %287 = fcmp ole float %285, %286
  br i1 %287, label %then221, label %ifmerge227

then221:                                          ; preds = %then220
  %288 = load <4 x float>* %color
  %289 = extractelement <4 x float> %288, i32 2
  %290 = fcmp oeq float %289, 5.000000e+00
  br i1 %290, label %then222, label %else224

then222:                                          ; preds = %then221
  %291 = load <4 x float>* %color
  %292 = extractelement <4 x float> %291, i32 3
  %293 = fadd float %292, 1.000000e+00
  %294 = load <4 x float>* %color
  %color223 = insertelement <4 x float> %294, float %293, i32 3
  store <4 x float> %color223, <4 x float>* %color
  br label %ifmerge226

else224:                                          ; preds = %then221
  br label %loop-merge229

post-loopjump225:                                 ; No predecessors!
  br label %ifmerge226

ifmerge226:                                       ; preds = %post-loopjump225, %then222
  br label %ifmerge227

ifmerge227:                                       ; preds = %ifmerge226, %then220
  br label %ifmerge228

ifmerge228:                                       ; preds = %ifmerge227, %ifmerge219
  br label %loop-header216

loop-merge229:                                    ; preds = %else224, %then217
  br label %loop-header230

loop-header230:                                   ; preds = %post-loopjump245, %ifmerge241, %loop-merge229
  %295 = load <4 x float>* %color
  %296 = extractelement <4 x float> %295, i32 2
  %297 = load float addrspace(1)* @d10
  %298 = fcmp oge float %296, %297
  br i1 %298, label %then231, label %ifmerge233

then231:                                          ; preds = %loop-header230
  br label %loop-merge246

post-loopjump232:                                 ; No predecessors!
  br label %ifmerge233

ifmerge233:                                       ; preds = %post-loopjump232, %loop-header230
  %299 = load <4 x float>* %color
  %300 = extractelement <4 x float> %299, i32 1
  %301 = fadd float %300, 1.000000e+00
  %302 = load <4 x float>* %color
  %color234 = insertelement <4 x float> %302, float %301, i32 1
  store <4 x float> %color234, <4 x float>* %color
  %303 = load <4 x float>* %color
  %304 = extractelement <4 x float> %303, i32 1
  %305 = load float addrspace(1)* @d11
  %306 = fcmp olt float %304, %305
  br i1 %306, label %then235, label %ifmerge243

then235:                                          ; preds = %ifmerge233
  %307 = load <4 x float>* %color
  %308 = extractelement <4 x float> %307, i32 2
  %309 = fadd float %308, 1.000000e+00
  %310 = load <4 x float>* %color
  %color236 = insertelement <4 x float> %310, float %309, i32 2
  store <4 x float> %color236, <4 x float>* %color
  %311 = load <4 x float>* %color
  %312 = extractelement <4 x float> %311, i32 3
  %313 = load float addrspace(1)* @d12
  %314 = fcmp olt float %312, %313
  br i1 %314, label %then237, label %else239

then237:                                          ; preds = %then235
  %315 = load <4 x float>* %color
  %316 = extractelement <4 x float> %315, i32 3
  %317 = fadd float %316, 1.000000e+00
  %318 = load <4 x float>* %color
  %color238 = insertelement <4 x float> %318, float %317, i32 3
  store <4 x float> %color238, <4 x float>* %color
  br label %ifmerge241

else239:                                          ; preds = %then235
  %319 = load <4 x float>* %color
  %320 = extractelement <4 x float> %319, i32 0
  %321 = fadd float %320, 1.000000e+00
  %322 = load <4 x float>* %color
  %color240 = insertelement <4 x float> %322, float %321, i32 0
  store <4 x float> %color240, <4 x float>* %color
  br label %ifmerge241

ifmerge241:                                       ; preds = %else239, %then237
  br label %loop-header230

post-loopjump242:                                 ; No predecessors!
  br label %ifmerge243

ifmerge243:                                       ; preds = %post-loopjump242, %ifmerge233
  %323 = load <4 x float>* %color
  %324 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color244 = fadd <4 x float> %323, %324
  store <4 x float> %color244, <4 x float>* %color
  br label %loop-merge246

post-loopjump245:                                 ; No predecessors!
  br label %loop-header230

loop-merge246:                                    ; preds = %ifmerge243, %then231
  br label %loop-header247

loop-header247:                                   ; preds = %ifmerge258, %then255, %loop-merge246
  %325 = load <4 x float>* %color
  %326 = extractelement <4 x float> %325, i32 0
  %327 = fcmp oge float %326, 1.000000e+01
  br i1 %327, label %then248, label %ifmerge250

then248:                                          ; preds = %loop-header247
  br label %loop-merge260

post-loopjump249:                                 ; No predecessors!
  br label %ifmerge250

ifmerge250:                                       ; preds = %post-loopjump249, %loop-header247
  %328 = load <4 x float>* %color
  %329 = load <4 x float> addrspace(1)* @bigColor8
  %assignment_tmp251252 = fadd <4 x float> %328, %329
  store <4 x float> %assignment_tmp251252, <4 x float>* %assignment_tmp251
  %color253 = load <4 x float>* %assignment_tmp251
  store <4 x float> %color253, <4 x float>* %color
  %330 = load <4 x float>* %assignment_tmp251
  %331 = extractelement <4 x float> %330, i32 2
  %332 = load float addrspace(1)* @d8
  %333 = fcmp olt float %331, %332
  br i1 %333, label %then254, label %ifmerge258

then254:                                          ; preds = %ifmerge250
  %334 = load <4 x float>* %assignment_tmp251
  %335 = extractelement <4 x float> %334, i32 3
  %336 = load float addrspace(1)* @d6
  %337 = fcmp olt float %335, %336
  br i1 %337, label %then255, label %ifmerge257

then255:                                          ; preds = %then254
  br label %loop-header247

post-loopjump256:                                 ; No predecessors!
  br label %ifmerge257

ifmerge257:                                       ; preds = %post-loopjump256, %then254
  br label %ifmerge258

ifmerge258:                                       ; preds = %ifmerge257, %ifmerge250
  %338 = load <4 x float>* %assignment_tmp251
  %339 = extractelement <4 x float> %338, i32 1
  %340 = load <4 x float> addrspace(1)* @bigColor8
  %341 = extractelement <4 x float> %340, i32 0
  %342 = fadd float %339, %341
  %343 = load <4 x float>* %color
  %color259 = insertelement <4 x float> %343, float %342, i32 1
  store <4 x float> %color259, <4 x float>* %color
  br label %loop-header247

loop-merge260:                                    ; preds = %then248
  br label %loop-header261

loop-header261:                                   ; preds = %ifmerge284, %then275, %loop-merge260
  %344 = load <4 x float>* %color
  %345 = extractelement <4 x float> %344, i32 3
  %346 = load float addrspace(1)* @d13
  %347 = fcmp oge float %345, %346
  br i1 %347, label %then262, label %ifmerge264

then262:                                          ; preds = %loop-header261
  br label %loop-merge285

post-loopjump263:                                 ; No predecessors!
  br label %ifmerge264

ifmerge264:                                       ; preds = %post-loopjump263, %loop-header261
  %348 = load <4 x float>* %color
  %349 = extractelement <4 x float> %348, i32 2
  %350 = load float addrspace(1)* @d13
  %351 = fcmp olt float %349, %350
  br i1 %351, label %then265, label %else267

then265:                                          ; preds = %ifmerge264
  %352 = load <4 x float>* %color
  %353 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color266 = fadd <4 x float> %352, %353
  store <4 x float> %color266, <4 x float>* %color
  br label %ifmerge269

else267:                                          ; preds = %ifmerge264
  %354 = load <4 x float>* %color
  %355 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color268 = fsub <4 x float> %354, %355
  store <4 x float> %color268, <4 x float>* %color
  br label %ifmerge269

ifmerge269:                                       ; preds = %else267, %then265
  %356 = load <4 x float>* %color
  %357 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp270271 = fadd <4 x float> %356, %357
  store <4 x float> %assignment_tmp270271, <4 x float>* %assignment_tmp270
  %color272 = load <4 x float>* %assignment_tmp270
  store <4 x float> %color272, <4 x float>* %color
  %358 = load <4 x float>* %assignment_tmp270
  %359 = extractelement <4 x float> %358, i32 0
  %360 = load float addrspace(1)* @d4
  %361 = fcmp olt float %359, %360
  br i1 %361, label %then273, label %ifmerge279

then273:                                          ; preds = %ifmerge269
  %362 = load <4 x float>* %assignment_tmp270
  %363 = extractelement <4 x float> %362, i32 2
  %364 = fadd float %363, 2.000000e+00
  %365 = load <4 x float>* %color
  %color274 = insertelement <4 x float> %365, float %364, i32 2
  store <4 x float> %color274, <4 x float>* %color
  %366 = load <4 x float>* %color
  %367 = extractelement <4 x float> %366, i32 2
  %368 = load float addrspace(1)* @d4
  %369 = fcmp olt float %367, %368
  br i1 %369, label %then275, label %ifmerge278

then275:                                          ; preds = %then273
  %370 = load <4 x float>* %color
  %371 = extractelement <4 x float> %370, i32 0
  %372 = fadd float %371, 1.000000e+00
  %373 = load <4 x float>* %color
  %color276 = insertelement <4 x float> %373, float %372, i32 0
  store <4 x float> %color276, <4 x float>* %color
  br label %loop-header261

post-loopjump277:                                 ; No predecessors!
  br label %ifmerge278

ifmerge278:                                       ; preds = %post-loopjump277, %then273
  br label %ifmerge279

ifmerge279:                                       ; preds = %ifmerge278, %ifmerge269
  %374 = load <4 x float>* %color
  %375 = extractelement <4 x float> %374, i32 1
  %376 = load float addrspace(1)* @d4
  %377 = fcmp olt float %375, %376
  br i1 %377, label %then280, label %else282

then280:                                          ; preds = %ifmerge279
  %378 = load <4 x float>* %color
  %379 = extractelement <4 x float> %378, i32 1
  %380 = load float addrspace(1)* @d4
  %381 = fadd float %379, %380
  %382 = load <4 x float>* %color
  %color281 = insertelement <4 x float> %382, float %381, i32 1
  store <4 x float> %color281, <4 x float>* %color
  br label %ifmerge284

else282:                                          ; preds = %ifmerge279
  %383 = load <4 x float>* %color
  %384 = extractelement <4 x float> %383, i32 0
  %385 = load float addrspace(1)* @d4
  %386 = fadd float %384, %385
  %387 = load <4 x float>* %color
  %color283 = insertelement <4 x float> %387, float %386, i32 0
  store <4 x float> %color283, <4 x float>* %color
  br label %ifmerge284

ifmerge284:                                       ; preds = %else282, %then280
  br label %loop-header261

loop-merge285:                                    ; preds = %then262
  %388 = load <4 x float>* %color
  %389 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %assignment_tmp286287 = fadd <4 x float> %388, %389
  store <4 x float> %assignment_tmp286287, <4 x float>* %assignment_tmp286
  %color288 = load <4 x float>* %assignment_tmp286
  store <4 x float> %color288, <4 x float>* %color
  %gl_FragColor = load <4 x float>* %assignment_tmp286
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %loop-header289

loop-header289:                                   ; preds = %ifmerge296, %loop-merge285
  %390 = load <4 x float>* %color
  %391 = extractelement <4 x float> %390, i32 0
  %392 = load float addrspace(1)* @d14
  %393 = fcmp oge float %391, %392
  br i1 %393, label %then290, label %ifmerge292

then290:                                          ; preds = %loop-header289
  br label %loop-merge297

post-loopjump291:                                 ; No predecessors!
  br label %ifmerge292

ifmerge292:                                       ; preds = %post-loopjump291, %loop-header289
  %394 = load <4 x float>* %color
  %395 = extractelement <4 x float> %394, i32 1
  %396 = load float addrspace(1)* @d15
  %397 = fcmp olt float %395, %396
  br i1 %397, label %then293, label %else294

then293:                                          ; preds = %ifmerge292
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge296

else294:                                          ; preds = %ifmerge292
  %398 = load <4 x float>* %color
  %399 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color295 = fadd <4 x float> %398, %399
  store <4 x float> %color295, <4 x float>* %color
  br label %ifmerge296

ifmerge296:                                       ; preds = %else294, %post-return
  br label %loop-header289

loop-merge297:                                    ; preds = %then290
  %400 = load <4 x float>* %color
  %401 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color298 = fadd <4 x float> %400, %401
  store <4 x float> %color298, <4 x float>* %color
  br label %loop-header299

loop-header299:                                   ; preds = %ifmerge302, %loop-merge297
  %402 = load <4 x float>* %color
  %403 = extractelement <4 x float> %402, i32 3
  %404 = load float addrspace(1)* @d16
  %405 = fcmp oge float %403, %404
  br i1 %405, label %then300, label %ifmerge302

then300:                                          ; preds = %loop-header299
  br label %loop-merge304

post-loopjump301:                                 ; No predecessors!
  br label %ifmerge302

ifmerge302:                                       ; preds = %post-loopjump301, %loop-header299
  %406 = load <4 x float>* %color
  %407 = extractelement <4 x float> %406, i32 3
  %408 = fadd float %407, 1.000000e+00
  %409 = load <4 x float>* %color
  %color303 = insertelement <4 x float> %409, float %408, i32 3
  store <4 x float> %color303, <4 x float>* %color
  br label %loop-header299

loop-merge304:                                    ; preds = %then300
  br label %loop-header305

loop-header305:                                   ; preds = %ifmerge319, %loop-merge304
  %410 = load <4 x float>* %color
  %411 = extractelement <4 x float> %410, i32 3
  %412 = load float addrspace(1)* @d2
  %413 = fcmp olt float %411, %412
  br i1 %413, label %then307, label %else309

then307:                                          ; preds = %loop-header305
  %414 = load <4 x float>* %color
  %415 = extractelement <4 x float> %414, i32 1
  %416 = load float addrspace(1)* @d3
  %and_tmp306308 = fcmp olt float %415, %416
  store i1 %and_tmp306308, i1* %and_tmp306
  br label %ifmerge310

else309:                                          ; preds = %loop-header305
  store i1 false, i1* %and_tmp306
  br label %ifmerge310

ifmerge310:                                       ; preds = %else309, %then307
  %417 = load i1* %and_tmp306
  %418 = xor i1 %417, true
  br i1 %418, label %then311, label %ifmerge313

then311:                                          ; preds = %ifmerge310
  br label %loop-merge320

post-loopjump312:                                 ; No predecessors!
  br label %ifmerge313

ifmerge313:                                       ; preds = %post-loopjump312, %ifmerge310
  %419 = load <4 x float>* %color
  %420 = load <4 x float> addrspace(1)* @bigColor1_2
  %assignment_tmp314315 = fadd <4 x float> %419, %420
  store <4 x float> %assignment_tmp314315, <4 x float>* %assignment_tmp314
  %color316 = load <4 x float>* %assignment_tmp314
  store <4 x float> %color316, <4 x float>* %color
  %421 = load <4 x float>* %assignment_tmp314
  %422 = extractelement <4 x float> %421, i32 2
  %423 = load float addrspace(1)* @d3
  %424 = fcmp olt float %422, %423
  br i1 %424, label %then317, label %ifmerge319

then317:                                          ; preds = %ifmerge313
  br label %stage-epilogue

post-return318:                                   ; No predecessors!
  br label %ifmerge319

ifmerge319:                                       ; preds = %post-return318, %ifmerge313
  br label %loop-header305

loop-merge320:                                    ; preds = %then311
  br label %loop-header321

loop-header321:                                   ; preds = %ifmerge330, %loop-merge320
  %425 = load <4 x float>* %color
  %426 = extractelement <4 x float> %425, i32 1
  %427 = load float addrspace(1)* @d18
  %428 = fcmp olt float %426, %427
  br i1 %428, label %then322, label %ifmerge324

then322:                                          ; preds = %loop-header321
  br label %stage-epilogue

post-return323:                                   ; No predecessors!
  br label %ifmerge324

ifmerge324:                                       ; preds = %post-return323, %loop-header321
  %429 = load <4 x float>* %color
  %430 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %assignment_tmp325326 = fadd <4 x float> %429, %430
  store <4 x float> %assignment_tmp325326, <4 x float>* %assignment_tmp325
  %color327 = load <4 x float>* %assignment_tmp325
  store <4 x float> %color327, <4 x float>* %color
  %431 = load <4 x float>* %assignment_tmp325
  %432 = extractelement <4 x float> %431, i32 0
  %433 = load float addrspace(1)* @d17
  %434 = fcmp oge float %432, %433
  br i1 %434, label %then328, label %ifmerge330

then328:                                          ; preds = %ifmerge324
  br label %loop-merge331

post-loopjump329:                                 ; No predecessors!
  br label %ifmerge330

ifmerge330:                                       ; preds = %post-loopjump329, %ifmerge324
  br label %loop-header321

loop-merge331:                                    ; preds = %then328
  br label %loop-header332

loop-header332:                                   ; preds = %ifmerge339, %loop-merge331
  %435 = load <4 x float>* %color
  %436 = extractelement <4 x float> %435, i32 1
  %437 = load float addrspace(1)* @d16
  %438 = fcmp oge float %436, %437
  br i1 %438, label %then333, label %ifmerge335

then333:                                          ; preds = %loop-header332
  br label %loop-merge340

post-loopjump334:                                 ; No predecessors!
  br label %ifmerge335

ifmerge335:                                       ; preds = %post-loopjump334, %loop-header332
  %439 = load <4 x float>* %color
  %440 = extractelement <4 x float> %439, i32 3
  %441 = load float addrspace(1)* @d16
  %442 = fcmp olt float %440, %441
  br i1 %442, label %then336, label %else337

then336:                                          ; preds = %ifmerge335
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge339

else337:                                          ; preds = %ifmerge335
  %443 = load <4 x float>* %color
  %444 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color338 = fadd <4 x float> %443, %444
  store <4 x float> %color338, <4 x float>* %color
  br label %ifmerge339

ifmerge339:                                       ; preds = %else337, %post-discard
  br label %loop-header332

loop-merge340:                                    ; preds = %then333
  %445 = load <4 x float>* %color
  %446 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %assignment_tmp341342 = fadd <4 x float> %445, %446
  store <4 x float> %assignment_tmp341342, <4 x float>* %assignment_tmp341
  %color343 = load <4 x float>* %assignment_tmp341
  store <4 x float> %color343, <4 x float>* %color
  %gl_FragColor344 = load <4 x float>* %assignment_tmp341
  store <4 x float> %gl_FragColor344, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge340, %then322, %then317, %then293
  %447 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %447)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then336
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@bigColor1_1 = external addrspace(1) constant <4 x float>
@d2 = external addrspace(1) constant float
@d3 = external addrspace(1) constant float
@bigColor1_2 = external addrspace(1) constant <4 x float>
@bigColor1_3 = external addrspace(1) constant <4 x float>
@d4 = external addrspace(1) constant float
@Count = external addrspace(1) constant i32
@bigColor2 = external addrspace(1) constant <4 x float>
@bigColor3 = external addrspace(1) constant <4 x float>
@bigColor4 = external addrspace(1) constant <4 x float>
@bigColor5 = external addrspace(1) constant <4 x float>
@d5 = external addrspace(1) constant float
@d6 = external addrspace(1) constant float
@bigColor6 = external addrspace(1) constant <4 x float>
@d7 = external addrspace(1) constant float
@bigColor7 = external addrspace(1) constant <4 x float>
@d8 = external addrspace(1) constant float
@d9 = external addrspace(1) constant float
@d10 = external addrspace(1) constant float
@d11 = external addrspace(1) constant float
@d12 = external addrspace(1) constant float
@bigColor8 = external addrspace(1) constant <4 x float>
@d13 = external addrspace(1) constant float
@d14 = external addrspace(1) constant float
@d15 = external addrspace(1) constant float
@d16 = external addrspace(1) constant float
@d18 = external addrspace(1) constant float
@d17 = external addrspace(1) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %.pre = load float addrspace(1)* @d
  %0 = load <4 x float> addrspace(1)* @bigColor
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %color.0 = phi <4 x float> [ %BaseColor, %entry ], [ %color5, %ifmerge ]
  %1 = extractelement <4 x float> %color.0, i32 0
  %2 = fcmp ult float %1, %.pre
  br i1 %2, label %ifmerge, label %then

then:                                             ; preds = %loop-header
  %3 = load <4 x float> addrspace(1)* @bigColor1_1
  br label %loop-header6

ifmerge:                                          ; preds = %loop-header
  %color5 = fadd <4 x float> %color.0, %0
  br label %loop-header

loop-header6:                                     ; preds = %loop-header6.backedge, %then
  %color.1 = phi <4 x float> [ %color.0, %then ], [ %color.1.be, %loop-header6.backedge ]
  %4 = extractelement <4 x float> %color.1, i32 2
  %5 = fcmp ult float %4, %.pre
  br i1 %5, label %ifmerge9, label %then7

then7:                                            ; preds = %loop-header6
  br label %loop-header17

ifmerge9:                                         ; preds = %loop-header6
  %assignment_tmp10 = fadd <4 x float> %color.1, %3
  %6 = extractelement <4 x float> %assignment_tmp10, i32 3
  %7 = fcmp olt float %6, %.pre
  br i1 %7, label %then12, label %ifmerge14

then12:                                           ; preds = %ifmerge9
  br label %loop-header6.backedge

loop-header6.backedge:                            ; preds = %then12, %ifmerge14
  %color.1.be = phi <4 x float> [ %assignment_tmp10, %then12 ], [ %color15, %ifmerge14 ]
  br label %loop-header6

ifmerge14:                                        ; preds = %ifmerge9
  %color15 = fadd <4 x float> %assignment_tmp10, %3
  br label %loop-header6.backedge

loop-header17:                                    ; preds = %ifmerge20, %then7
  %color.2 = phi <4 x float> [ %color.1, %then7 ], [ %color21, %ifmerge20 ]
  %8 = extractelement <4 x float> %color.2, i32 0
  %9 = fcmp ult float %8, 4.200000e+01
  br i1 %9, label %ifmerge20, label %then18

then18:                                           ; preds = %loop-header17
  %.pre346 = load float addrspace(1)* @d2
  %10 = load float addrspace(1)* @d3
  %11 = load <4 x float> addrspace(1)* @bigColor1_2
  br label %loop-header23

ifmerge20:                                        ; preds = %loop-header17
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color21 = fadd <4 x float> %color.2, %12
  br label %loop-header17

loop-header23:                                    ; preds = %ifmerge29, %then18
  %color.3 = phi <4 x float> [ %color.2, %then18 ], [ %color30, %ifmerge29 ]
  %13 = extractelement <4 x float> %color.3, i32 3
  %14 = fcmp olt float %13, %.pre346
  br i1 %14, label %then24, label %else

then24:                                           ; preds = %loop-header23
  %15 = extractelement <4 x float> %color.3, i32 1
  %phitmp = fcmp uge float %15, %10
  br label %ifmerge26

else:                                             ; preds = %loop-header23
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then24
  %and_tmp.0 = phi i1 [ %phitmp, %then24 ], [ true, %else ]
  br i1 %and_tmp.0, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  %16 = load <4 x float> addrspace(1)* @bigColor1_3
  %17 = load float addrspace(1)* @d4
  br label %loop-header32

ifmerge29:                                        ; preds = %ifmerge26
  %color30 = fadd <4 x float> %color.3, %11
  br label %loop-header23

loop-header32:                                    ; preds = %ifmerge41, %then27
  %color.4 = phi <4 x float> [ %color.3, %then27 ], [ %color42, %ifmerge41 ]
  %18 = extractelement <4 x float> %color.4, i32 2
  %19 = fcmp ult float %18, %10
  br i1 %19, label %ifmerge35, label %then33

then33:                                           ; preds = %loop-header32
  br label %loop-merge43

ifmerge35:                                        ; preds = %loop-header32
  %assignment_tmp3637 = fadd <4 x float> %color.4, %16
  %20 = extractelement <4 x float> %assignment_tmp3637, i32 1
  %21 = fcmp olt float %20, %17
  br i1 %21, label %then39, label %ifmerge41

then39:                                           ; preds = %ifmerge35
  br label %loop-merge43

ifmerge41:                                        ; preds = %ifmerge35
  %color42 = fadd <4 x float> %assignment_tmp3637, %16
  br label %loop-header32

loop-merge43:                                     ; preds = %then39, %then33
  %color.5 = phi <4 x float> [ %color.4, %then33 ], [ %assignment_tmp3637, %then39 ]
  %.pre348 = load i32 addrspace(1)* @Count
  %22 = load <4 x float> addrspace(1)* @bigColor2
  %tmp414 = icmp sgt i32 %.pre348, 0
  %smax = select i1 %tmp414, i32 %.pre348, i32 0
  br label %loop-header44

loop-header44:                                    ; preds = %ifmerge47, %loop-merge43
  %indvar412 = phi i32 [ %indvar.next413, %ifmerge47 ], [ 0, %loop-merge43 ]
  %color.6 = phi <4 x float> [ %color48, %ifmerge47 ], [ %color.5, %loop-merge43 ]
  %exitcond415 = icmp eq i32 %indvar412, %smax
  br i1 %exitcond415, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  %.pre349 = load <4 x float> addrspace(1)* @bigColor3
  br label %loop-header51

ifmerge47:                                        ; preds = %loop-header44
  %color48 = fadd <4 x float> %color.6, %22
  %indvar.next413 = add i32 %indvar412, 1
  br label %loop-header44

loop-header51:                                    ; preds = %ifmerge57, %then45
  %color.7 = phi <4 x float> [ %color.6, %then45 ], [ %assignment_tmp5253, %ifmerge57 ]
  %assignment_tmp5253 = fadd <4 x float> %color.7, %.pre349
  %23 = extractelement <4 x float> %assignment_tmp5253, i32 0
  %24 = fcmp ult float %23, %.pre346
  br i1 %24, label %ifmerge57, label %then55

then55:                                           ; preds = %loop-header51
  br label %loop-header60

ifmerge57:                                        ; preds = %loop-header51
  br label %loop-header51

loop-header60:                                    ; preds = %loop-header60, %then55
  %indvar410 = phi i32 [ %indvar.next411, %loop-header60 ], [ 0, %then55 ]
  %color.8 = phi <4 x float> [ %27, %loop-header60 ], [ %assignment_tmp5253, %then55 ]
  %25 = extractelement <4 x float> %color.8, i32 2
  %26 = fadd float %25, %10
  %27 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.8, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %26, i32 -1, float 0.000000e+00, i32 -1)
  %indvar.next411 = add i32 %indvar410, 1
  %exitcond = icmp eq i32 %indvar.next411, 42
  br i1 %exitcond, label %loop-merge63, label %loop-header60

loop-merge63:                                     ; preds = %loop-header60
  br label %loop-header65

loop-header65:                                    ; preds = %ifmerge74, %loop-merge63
  %indvar = phi i32 [ %indvar.next, %ifmerge74 ], [ 0, %loop-merge63 ]
  %color.9 = phi <4 x float> [ %color.10, %ifmerge74 ], [ %27, %loop-merge63 ]
  %28 = extractelement <4 x float> %color.9, i32 2
  %29 = fcmp olt float %28, 2.000000e+01
  br i1 %29, label %then66, label %else68

then66:                                           ; preds = %loop-header65
  %30 = extractelement <4 x float> %color.9, i32 0
  %31 = fadd float %30, 1.000000e+00
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.9, i32 1, float %31, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge70

else68:                                           ; preds = %loop-header65
  %33 = extractelement <4 x float> %color.9, i32 1
  %34 = fadd float %33, 1.000000e+00
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.9, i32 2, float 0.000000e+00, i32 -1, float %34, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge70

ifmerge70:                                        ; preds = %else68, %then66
  %color.10 = phi <4 x float> [ %32, %then66 ], [ %35, %else68 ]
  %36 = extractelement <4 x float> %color.10, i32 3
  %37 = fcmp olt float %36, 2.000000e+01
  br i1 %37, label %then71, label %ifmerge74

then71:                                           ; preds = %ifmerge70
  br label %ifmerge74

ifmerge74:                                        ; preds = %then71, %ifmerge70
  %indvar.next = add i32 %indvar, 1
  %exitcond408 = icmp eq i32 %indvar.next, 100
  br i1 %exitcond408, label %loop-merge76, label %loop-header65

loop-merge76:                                     ; preds = %ifmerge74
  br label %loop-header77

loop-header77:                                    ; preds = %loop-header77.backedge, %loop-merge76
  %color.11 = phi <4 x float> [ %color.10, %loop-merge76 ], [ %color.11.be, %loop-header77.backedge ]
  %i1.0 = phi i32 [ 0, %loop-merge76 ], [ %i1.0.be, %loop-header77.backedge ]
  %exitcond407 = icmp eq i32 %i1.0, 42
  br i1 %exitcond407, label %then78, label %ifmerge80

then78:                                           ; preds = %loop-header77
  br label %loop-header90

ifmerge80:                                        ; preds = %loop-header77
  %38 = extractelement <4 x float> %color.11, i32 2
  %39 = fadd float %38, %10
  %40 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.11, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %39, i32 -1, float 0.000000e+00, i32 -1)
  %41 = extractelement <4 x float> %40, i32 0
  %42 = fcmp olt float %41, %17
  br i1 %42, label %then82, label %ifmerge85

then82:                                           ; preds = %ifmerge80
  br label %loop-header77.backedge

loop-header77.backedge:                           ; preds = %then82, %ifmerge85
  %color.11.be = phi <4 x float> [ %40, %then82 ], [ %45, %ifmerge85 ]
  %i1.0.be = add i32 %i1.0, 1
  br label %loop-header77

ifmerge85:                                        ; preds = %ifmerge80
  %43 = extractelement <4 x float> %40, i32 3
  %44 = fadd float %43, 1.000000e+00
  %45 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %40, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %44, i32 -1)
  br label %loop-header77.backedge

loop-header90:                                    ; preds = %ifmerge94, %then78
  %i89.0 = phi i32 [ 0, %then78 ], [ %54, %ifmerge94 ]
  %color.12 = phi <4 x float> [ %color.11, %then78 ], [ %53, %ifmerge94 ]
  %tmp = add i32 %i89.0, 1
  %46 = extractelement <4 x float> %color.12, i32 2
  %47 = fadd float %46, %10
  %48 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %47, i32 -1, float 0.000000e+00, i32 -1)
  %49 = extractelement <4 x float> %48, i32 0
  %50 = fcmp olt float %49, %17
  br i1 %50, label %then92, label %ifmerge94

then92:                                           ; preds = %loop-header90
  br label %loop-merge97

ifmerge94:                                        ; preds = %loop-header90
  %51 = extractelement <4 x float> %48, i32 3
  %52 = fadd float %51, 1.000000e+00
  %53 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %48, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %52, i32 -1)
  %54 = add i32 %i89.0, 1
  %55 = icmp sgt i32 %tmp, 41
  br i1 %55, label %loop-merge97.loopexit, label %loop-header90

loop-merge97.loopexit:                            ; preds = %ifmerge94
  br label %loop-merge97

loop-merge97:                                     ; preds = %loop-merge97.loopexit, %then92
  %color.13 = phi <4 x float> [ %48, %then92 ], [ %53, %loop-merge97.loopexit ]
  %.pre351 = load <4 x float> addrspace(1)* @bigColor4
  br label %loop-header98

loop-header98:                                    ; preds = %loop-header98.backedge, %loop-merge97
  %color.14 = phi <4 x float> [ %color.13, %loop-merge97 ], [ %color.14.be, %loop-header98.backedge ]
  %assignment_tmp99100 = fadd <4 x float> %color.14, %.pre351
  %56 = extractelement <4 x float> %assignment_tmp99100, i32 0
  %57 = fcmp olt float %56, %17
  br i1 %57, label %then102, label %ifmerge104

then102:                                          ; preds = %loop-header98
  br label %loop-header98.backedge

loop-header98.backedge:                           ; preds = %then102, %ifmerge112
  %color.14.be = phi <4 x float> [ %assignment_tmp99100, %then102 ], [ %color.15, %ifmerge112 ]
  br label %loop-header98

ifmerge104:                                       ; preds = %loop-header98
  %58 = extractelement <4 x float> %assignment_tmp99100, i32 1
  %59 = fcmp olt float %58, %17
  br i1 %59, label %then105, label %else107

then105:                                          ; preds = %ifmerge104
  %60 = fadd float %58, %17
  %61 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp99100, i32 2, float 0.000000e+00, i32 -1, float %60, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge109

else107:                                          ; preds = %ifmerge104
  %62 = fadd float %56, %17
  %63 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp99100, i32 1, float %62, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge109

ifmerge109:                                       ; preds = %else107, %then105
  %color.15 = phi <4 x float> [ %61, %then105 ], [ %63, %else107 ]
  %64 = extractelement <4 x float> %color.15, i32 2
  %65 = fcmp ult float %64, %17
  br i1 %65, label %ifmerge112, label %then110

then110:                                          ; preds = %ifmerge109
  br label %loop-header114

ifmerge112:                                       ; preds = %ifmerge109
  br label %loop-header98.backedge

loop-header114:                                   ; preds = %loop-header114.backedge, %then110
  %color.16 = phi <4 x float> [ %color.15, %then110 ], [ %color.16.be, %loop-header114.backedge ]
  %assignment_tmp115116 = fadd <4 x float> %color.16, %.pre351
  %66 = extractelement <4 x float> %assignment_tmp115116, i32 0
  %67 = fcmp olt float %66, %17
  br i1 %67, label %then118, label %ifmerge124

then118:                                          ; preds = %loop-header114
  %68 = extractelement <4 x float> %assignment_tmp115116, i32 2
  %69 = fadd float %68, 2.000000e+00
  %70 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp115116, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %69, i32 -1, float 0.000000e+00, i32 -1)
  %71 = extractelement <4 x float> %70, i32 2
  %72 = fcmp olt float %71, %17
  br i1 %72, label %then120, label %ifmerge123

then120:                                          ; preds = %then118
  %73 = extractelement <4 x float> %70, i32 0
  %74 = fadd float %73, 1.000000e+00
  %75 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %70, i32 1, float %74, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header114.backedge

loop-header114.backedge:                          ; preds = %then120, %ifmerge132
  %color.16.be = phi <4 x float> [ %75, %then120 ], [ %color.18, %ifmerge132 ]
  br label %loop-header114

ifmerge123:                                       ; preds = %then118
  br label %ifmerge124

ifmerge124:                                       ; preds = %ifmerge123, %loop-header114
  %color.17 = phi <4 x float> [ %70, %ifmerge123 ], [ %assignment_tmp115116, %loop-header114 ]
  %76 = extractelement <4 x float> %color.17, i32 1
  %77 = fcmp olt float %76, %17
  br i1 %77, label %then125, label %else127

then125:                                          ; preds = %ifmerge124
  %78 = fadd float %76, %17
  %79 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.17, i32 2, float 0.000000e+00, i32 -1, float %78, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge129

else127:                                          ; preds = %ifmerge124
  %80 = extractelement <4 x float> %color.17, i32 0
  %81 = fadd float %80, %17
  %82 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.17, i32 1, float %81, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge129

ifmerge129:                                       ; preds = %else127, %then125
  %color.18 = phi <4 x float> [ %79, %then125 ], [ %82, %else127 ]
  %83 = extractelement <4 x float> %color.18, i32 2
  %84 = fcmp ult float %83, %17
  br i1 %84, label %ifmerge132, label %then130

then130:                                          ; preds = %ifmerge129
  %.pre352 = load <4 x float> addrspace(1)* @bigColor5
  %.pre353 = load float addrspace(1)* @d5
  br label %loop-header134

ifmerge132:                                       ; preds = %ifmerge129
  br label %loop-header114.backedge

loop-header134:                                   ; preds = %ifmerge143, %then130
  %color.19 = phi <4 x float> [ %color.18, %then130 ], [ %color.20, %ifmerge143 ]
  %assignment_tmp135136 = fadd <4 x float> %color.19, %.pre352
  %85 = extractelement <4 x float> %assignment_tmp135136, i32 1
  %86 = fcmp olt float %85, %.pre353
  br i1 %86, label %then138, label %ifmerge140

then138:                                          ; preds = %loop-header134
  %87 = fadd float %85, %.pre353
  %88 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp135136, i32 2, float 0.000000e+00, i32 -1, float %87, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge140

ifmerge140:                                       ; preds = %then138, %loop-header134
  %color.20 = phi <4 x float> [ %88, %then138 ], [ %assignment_tmp135136, %loop-header134 ]
  %89 = extractelement <4 x float> %color.20, i32 0
  %90 = fcmp ult float %89, %.pre353
  br i1 %90, label %ifmerge143, label %then141

then141:                                          ; preds = %ifmerge140
  %91 = load float addrspace(1)* @d6
  %92 = fcmp olt float %89, %91
  br i1 %92, label %then145, label %else152

ifmerge143:                                       ; preds = %ifmerge140
  br label %loop-header134

then145:                                          ; preds = %then141
  %93 = load <4 x float> addrspace(1)* @bigColor6
  br label %loop-header146

loop-header146:                                   ; preds = %ifmerge149, %then145
  %color.21 = phi <4 x float> [ %color.20, %then145 ], [ %color150, %ifmerge149 ]
  %94 = extractelement <4 x float> %color.21, i32 1
  %95 = fcmp ult float %94, %91
  br i1 %95, label %ifmerge149, label %then147

then147:                                          ; preds = %loop-header146
  br label %ifmerge159

ifmerge149:                                       ; preds = %loop-header146
  %color150 = fadd <4 x float> %color.21, %93
  br label %loop-header146

else152:                                          ; preds = %then141
  %96 = load <4 x float> addrspace(1)* @bigColor6
  %97 = extractelement <4 x float> %96, i32 2
  br label %loop-header153

loop-header153:                                   ; preds = %ifmerge156, %else152
  %color.22 = phi <4 x float> [ %color.20, %else152 ], [ %101, %ifmerge156 ]
  %98 = extractelement <4 x float> %color.22, i32 2
  %99 = fcmp ult float %98, %91
  br i1 %99, label %ifmerge156, label %then154

then154:                                          ; preds = %loop-header153
  br label %ifmerge159

ifmerge156:                                       ; preds = %loop-header153
  %100 = fadd float %98, %97
  %101 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.22, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %100, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header153

ifmerge159:                                       ; preds = %then154, %then147
  %102 = phi <4 x float> [ %93, %then147 ], [ %96, %then154 ]
  %color.23 = phi <4 x float> [ %color.21, %then147 ], [ %color.22, %then154 ]
  %103 = extractelement <4 x float> %color.23, i32 0
  %104 = fcmp olt float %103, %91
  br i1 %104, label %then160, label %else170

then160:                                          ; preds = %ifmerge159
  %105 = load float addrspace(1)* @d7
  %106 = fcmp olt float %105, 1.000000e+00
  br label %loop-header161

loop-header161:                                   ; preds = %ifmerge168, %then160
  %color.24 = phi <4 x float> [ %color.23, %then160 ], [ %color165, %ifmerge168 ]
  %107 = extractelement <4 x float> %color.24, i32 1
  %108 = fcmp ult float %107, %91
  br i1 %108, label %ifmerge164, label %then162

then162:                                          ; preds = %loop-header161
  br label %loop-merge169

ifmerge164:                                       ; preds = %loop-header161
  %color165 = fadd <4 x float> %color.24, %102
  br i1 %106, label %then166, label %ifmerge168

then166:                                          ; preds = %ifmerge164
  br label %loop-merge169

ifmerge168:                                       ; preds = %ifmerge164
  br label %loop-header161

loop-merge169:                                    ; preds = %then166, %then162
  %color.25 = phi <4 x float> [ %color.24, %then162 ], [ %color165, %then166 ]
  br label %ifmerge177

else170:                                          ; preds = %ifmerge159
  %109 = extractelement <4 x float> %102, i32 2
  br label %loop-header171

loop-header171:                                   ; preds = %ifmerge174, %else170
  %color.26 = phi <4 x float> [ %color.23, %else170 ], [ %113, %ifmerge174 ]
  %110 = extractelement <4 x float> %color.26, i32 2
  %111 = fcmp ult float %110, %91
  br i1 %111, label %ifmerge174, label %then172

then172:                                          ; preds = %loop-header171
  br label %ifmerge177

ifmerge174:                                       ; preds = %loop-header171
  %112 = fadd float %110, %109
  %113 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.26, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %112, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header171

ifmerge177:                                       ; preds = %then172, %loop-merge169
  %color.27 = phi <4 x float> [ %color.25, %loop-merge169 ], [ %color.26, %then172 ]
  %.pre354 = load float addrspace(1)* @d7
  %.pre362 = fcmp olt float %.pre354, 0.000000e+00
  %114 = load <4 x float> addrspace(1)* @bigColor7
  %115 = fcmp olt float %.pre354, 1.000000e+00
  br label %loop-header178

loop-header178:                                   ; preds = %ifmerge188, %ifmerge177
  %.pre-phi = phi i1 [ false, %ifmerge188 ], [ %.pre362, %ifmerge177 ]
  %color.28 = phi <4 x float> [ %color190, %ifmerge188 ], [ %color.27, %ifmerge177 ]
  br i1 %.pre-phi, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge191

ifmerge181:                                       ; preds = %loop-header178
  %assignment_tmp182183 = fadd <4 x float> %color.28, %114
  br i1 %115, label %then185, label %ifmerge188

then185:                                          ; preds = %ifmerge181
  %116 = extractelement <4 x float> %assignment_tmp182183, i32 2
  %117 = fadd float %116, 1.000000e+00
  %118 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp182183, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %117, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-merge191

ifmerge188:                                       ; preds = %ifmerge181
  %color190 = fadd <4 x float> %assignment_tmp182183, %BaseColor
  br label %loop-header178

loop-merge191:                                    ; preds = %then185, %then179
  %color.29 = phi <4 x float> [ %color.28, %then179 ], [ %118, %then185 ]
  %.pre355 = load float addrspace(1)* @d8
  %.pre363 = fcmp olt float %.pre355, 0.000000e+00
  %119 = fcmp olt float %.pre355, 1.000000e+00
  br label %loop-header192

loop-header192:                                   ; preds = %ifmerge214, %loop-merge191
  %.pre-phi364 = phi i1 [ false, %ifmerge214 ], [ %.pre363, %loop-merge191 ]
  %color.30 = phi <4 x float> [ %assignment_tmp208210, %ifmerge214 ], [ %color.29, %loop-merge191 ]
  br i1 %.pre-phi364, label %then193, label %ifmerge195

then193:                                          ; preds = %loop-header192
  br label %loop-merge215

ifmerge195:                                       ; preds = %loop-header192
  %assignment_tmp196197 = fadd <4 x float> %color.30, %114
  br i1 %119, label %then199, label %ifmerge207

then199:                                          ; preds = %ifmerge195
  %120 = extractelement <4 x float> %assignment_tmp196197, i32 2
  %121 = fadd float %120, 1.000000e+00
  %122 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp196197, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %121, i32 -1, float 0.000000e+00, i32 -1)
  %123 = fcmp olt float %.pre355, 2.000000e+00
  br i1 %123, label %then201, label %else203

then201:                                          ; preds = %then199
  %124 = extractelement <4 x float> %122, i32 1
  %125 = fadd float %124, 1.000000e+00
  %126 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %122, i32 2, float 0.000000e+00, i32 -1, float %125, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge205

else203:                                          ; preds = %then199
  %127 = extractelement <4 x float> %122, i32 0
  %128 = fadd float %127, 1.000000e+00
  %129 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %122, i32 1, float %128, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge205

ifmerge205:                                       ; preds = %else203, %then201
  %color.31 = phi <4 x float> [ %126, %then201 ], [ %129, %else203 ]
  br label %loop-merge215

ifmerge207:                                       ; preds = %ifmerge195
  %assignment_tmp208210 = fadd <4 x float> %assignment_tmp196197, %BaseColor
  %130 = extractelement <4 x float> %assignment_tmp208210, i32 2
  %131 = fcmp ult float %130, %.pre355
  br i1 %131, label %ifmerge214, label %then212

then212:                                          ; preds = %ifmerge207
  br label %loop-merge215

ifmerge214:                                       ; preds = %ifmerge207
  br label %loop-header192

loop-merge215:                                    ; preds = %then212, %ifmerge205, %then193
  %color.32 = phi <4 x float> [ %color.30, %then193 ], [ %color.31, %ifmerge205 ], [ %assignment_tmp208210, %then212 ]
  %.pre356 = load float addrspace(1)* @d9
  %132 = fcmp ogt float %.pre356, %.pre355
  br label %loop-header216

loop-header216:                                   ; preds = %ifmerge228, %loop-merge215
  %color.33 = phi <4 x float> [ %color.32, %loop-merge215 ], [ %color.35, %ifmerge228 ]
  %133 = extractelement <4 x float> %color.33, i32 3
  %134 = fcmp ult float %133, %.pre356
  br i1 %134, label %ifmerge219, label %then217

then217:                                          ; preds = %loop-header216
  br label %loop-merge229

ifmerge219:                                       ; preds = %loop-header216
  br i1 %132, label %then220, label %ifmerge228

then220:                                          ; preds = %ifmerge219
  %135 = extractelement <4 x float> %color.33, i32 0
  %136 = fcmp ugt float %135, %.pre354
  br i1 %136, label %ifmerge227, label %then221

then221:                                          ; preds = %then220
  %137 = extractelement <4 x float> %color.33, i32 2
  %138 = fcmp oeq float %137, 5.000000e+00
  br i1 %138, label %then222, label %else224

then222:                                          ; preds = %then221
  %139 = fadd float %133, 1.000000e+00
  %140 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.33, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %139, i32 -1)
  br label %ifmerge227

else224:                                          ; preds = %then221
  br label %loop-merge229

ifmerge227:                                       ; preds = %then220, %then222
  %color.34 = phi <4 x float> [ %140, %then222 ], [ %color.33, %then220 ]
  br label %ifmerge228

ifmerge228:                                       ; preds = %ifmerge227, %ifmerge219
  %color.35 = phi <4 x float> [ %color.34, %ifmerge227 ], [ %color.33, %ifmerge219 ]
  br label %loop-header216

loop-merge229:                                    ; preds = %else224, %then217
  %.pre357 = load float addrspace(1)* @d10
  %141 = load float addrspace(1)* @d11
  %142 = load float addrspace(1)* @d12
  br label %loop-header230

loop-header230:                                   ; preds = %ifmerge241, %loop-merge229
  %color.36 = phi <4 x float> [ %color.33, %loop-merge229 ], [ %color.37, %ifmerge241 ]
  %143 = extractelement <4 x float> %color.36, i32 2
  %144 = fcmp ult float %143, %.pre357
  br i1 %144, label %ifmerge233, label %then231

then231:                                          ; preds = %loop-header230
  br label %loop-merge246

ifmerge233:                                       ; preds = %loop-header230
  %145 = extractelement <4 x float> %color.36, i32 1
  %146 = fadd float %145, 1.000000e+00
  %147 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.36, i32 2, float 0.000000e+00, i32 -1, float %146, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  %148 = extractelement <4 x float> %147, i32 1
  %149 = fcmp olt float %148, %141
  br i1 %149, label %then235, label %ifmerge243

then235:                                          ; preds = %ifmerge233
  %150 = extractelement <4 x float> %147, i32 2
  %151 = fadd float %150, 1.000000e+00
  %152 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %147, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %151, i32 -1, float 0.000000e+00, i32 -1)
  %153 = extractelement <4 x float> %152, i32 3
  %154 = fcmp olt float %153, %142
  br i1 %154, label %then237, label %else239

then237:                                          ; preds = %then235
  %155 = fadd float %153, 1.000000e+00
  %156 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %152, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %155, i32 -1)
  br label %ifmerge241

else239:                                          ; preds = %then235
  %157 = extractelement <4 x float> %152, i32 0
  %158 = fadd float %157, 1.000000e+00
  %159 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %152, i32 1, float %158, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge241

ifmerge241:                                       ; preds = %else239, %then237
  %color.37 = phi <4 x float> [ %156, %then237 ], [ %159, %else239 ]
  br label %loop-header230

ifmerge243:                                       ; preds = %ifmerge233
  %160 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color244 = fadd <4 x float> %147, %160
  br label %loop-merge246

loop-merge246:                                    ; preds = %ifmerge243, %then231
  %color.38 = phi <4 x float> [ %color.36, %then231 ], [ %color244, %ifmerge243 ]
  %161 = load <4 x float> addrspace(1)* @bigColor8
  %162 = extractelement <4 x float> %161, i32 0
  br label %loop-header247

loop-header247:                                   ; preds = %loop-header247.backedge, %loop-merge246
  %color.39 = phi <4 x float> [ %color.38, %loop-merge246 ], [ %color.39.be, %loop-header247.backedge ]
  %163 = extractelement <4 x float> %color.39, i32 0
  %164 = fcmp ult float %163, 1.000000e+01
  br i1 %164, label %ifmerge250, label %then248

then248:                                          ; preds = %loop-header247
  %.pre358 = load float addrspace(1)* @d13
  br label %loop-header261

ifmerge250:                                       ; preds = %loop-header247
  %assignment_tmp251252 = fadd <4 x float> %color.39, %161
  %165 = extractelement <4 x float> %assignment_tmp251252, i32 2
  %166 = fcmp olt float %165, %.pre355
  br i1 %166, label %then254, label %ifmerge258

then254:                                          ; preds = %ifmerge250
  %167 = extractelement <4 x float> %assignment_tmp251252, i32 3
  %168 = fcmp olt float %167, %91
  br i1 %168, label %then255, label %ifmerge257

then255:                                          ; preds = %then254
  br label %loop-header247.backedge

loop-header247.backedge:                          ; preds = %then255, %ifmerge258
  %color.39.be = phi <4 x float> [ %assignment_tmp251252, %then255 ], [ %171, %ifmerge258 ]
  br label %loop-header247

ifmerge257:                                       ; preds = %then254
  br label %ifmerge258

ifmerge258:                                       ; preds = %ifmerge257, %ifmerge250
  %169 = extractelement <4 x float> %assignment_tmp251252, i32 1
  %170 = fadd float %169, %162
  %171 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp251252, i32 2, float 0.000000e+00, i32 -1, float %170, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header247.backedge

loop-header261:                                   ; preds = %loop-header261.backedge, %then248
  %color.40 = phi <4 x float> [ %color.39, %then248 ], [ %color.40.be, %loop-header261.backedge ]
  %172 = extractelement <4 x float> %color.40, i32 3
  %173 = fcmp ult float %172, %.pre358
  br i1 %173, label %ifmerge264, label %then262

then262:                                          ; preds = %loop-header261
  %174 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %assignment_tmp286287 = fadd <4 x float> %color.40, %174
  %.pre359 = load float addrspace(1)* @d14
  %175 = load float addrspace(1)* @d15
  br label %loop-header289

ifmerge264:                                       ; preds = %loop-header261
  %176 = extractelement <4 x float> %color.40, i32 2
  %177 = fcmp olt float %176, %.pre358
  br i1 %177, label %then265, label %else267

then265:                                          ; preds = %ifmerge264
  %178 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color266 = fadd <4 x float> %color.40, %178
  br label %ifmerge269

else267:                                          ; preds = %ifmerge264
  %179 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color268 = fsub <4 x float> %color.40, %179
  br label %ifmerge269

ifmerge269:                                       ; preds = %else267, %then265
  %color.41 = phi <4 x float> [ %color266, %then265 ], [ %color268, %else267 ]
  %assignment_tmp270271 = fadd <4 x float> %color.41, %.pre351
  %180 = extractelement <4 x float> %assignment_tmp270271, i32 0
  %181 = fcmp olt float %180, %17
  br i1 %181, label %then273, label %ifmerge279

then273:                                          ; preds = %ifmerge269
  %182 = extractelement <4 x float> %assignment_tmp270271, i32 2
  %183 = fadd float %182, 2.000000e+00
  %184 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp270271, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %183, i32 -1, float 0.000000e+00, i32 -1)
  %185 = extractelement <4 x float> %184, i32 2
  %186 = fcmp olt float %185, %17
  br i1 %186, label %then275, label %ifmerge278

then275:                                          ; preds = %then273
  %187 = extractelement <4 x float> %184, i32 0
  %188 = fadd float %187, 1.000000e+00
  %189 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %184, i32 1, float %188, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header261.backedge

loop-header261.backedge:                          ; preds = %then275, %ifmerge284
  %color.40.be = phi <4 x float> [ %189, %then275 ], [ %color.43, %ifmerge284 ]
  br label %loop-header261

ifmerge278:                                       ; preds = %then273
  br label %ifmerge279

ifmerge279:                                       ; preds = %ifmerge278, %ifmerge269
  %color.42 = phi <4 x float> [ %184, %ifmerge278 ], [ %assignment_tmp270271, %ifmerge269 ]
  %190 = extractelement <4 x float> %color.42, i32 1
  %191 = fcmp olt float %190, %17
  br i1 %191, label %then280, label %else282

then280:                                          ; preds = %ifmerge279
  %192 = fadd float %190, %17
  %193 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.42, i32 2, float 0.000000e+00, i32 -1, float %192, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge284

else282:                                          ; preds = %ifmerge279
  %194 = extractelement <4 x float> %color.42, i32 0
  %195 = fadd float %194, %17
  %196 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.42, i32 1, float %195, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge284

ifmerge284:                                       ; preds = %else282, %then280
  %color.43 = phi <4 x float> [ %193, %then280 ], [ %196, %else282 ]
  br label %loop-header261.backedge

loop-header289:                                   ; preds = %else294, %then262
  %color.44 = phi <4 x float> [ %assignment_tmp286287, %then262 ], [ %color295, %else294 ]
  %197 = extractelement <4 x float> %color.44, i32 0
  %198 = fcmp ult float %197, %.pre359
  br i1 %198, label %ifmerge292, label %then290

then290:                                          ; preds = %loop-header289
  %color298 = fadd <4 x float> %color.44, %174
  %.pre360 = load float addrspace(1)* @d16
  br label %loop-header299

ifmerge292:                                       ; preds = %loop-header289
  %199 = extractelement <4 x float> %color.44, i32 1
  %200 = fcmp olt float %199, %175
  br i1 %200, label %then293, label %else294

then293:                                          ; preds = %ifmerge292
  br label %stage-epilogue

else294:                                          ; preds = %ifmerge292
  %color295 = fadd <4 x float> %color.44, %174
  br label %loop-header289

loop-header299:                                   ; preds = %ifmerge302, %then290
  %color.45 = phi <4 x float> [ %color298, %then290 ], [ %204, %ifmerge302 ]
  %201 = extractelement <4 x float> %color.45, i32 3
  %202 = fcmp ult float %201, %.pre360
  br i1 %202, label %ifmerge302, label %then300

then300:                                          ; preds = %loop-header299
  br label %loop-header305

ifmerge302:                                       ; preds = %loop-header299
  %203 = fadd float %201, 1.000000e+00
  %204 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.45, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %203, i32 -1)
  br label %loop-header299

loop-header305:                                   ; preds = %ifmerge319, %then300
  %color.46 = phi <4 x float> [ %color.45, %then300 ], [ %assignment_tmp314315, %ifmerge319 ]
  %205 = extractelement <4 x float> %color.46, i32 3
  %206 = fcmp olt float %205, %.pre346
  br i1 %206, label %then307, label %else309

then307:                                          ; preds = %loop-header305
  %207 = extractelement <4 x float> %color.46, i32 1
  %phitmp365 = fcmp uge float %207, %10
  br label %ifmerge310

else309:                                          ; preds = %loop-header305
  br label %ifmerge310

ifmerge310:                                       ; preds = %else309, %then307
  %and_tmp306.0 = phi i1 [ %phitmp365, %then307 ], [ true, %else309 ]
  br i1 %and_tmp306.0, label %then311, label %ifmerge313

then311:                                          ; preds = %ifmerge310
  %.pre361 = load float addrspace(1)* @d18
  %208 = load float addrspace(1)* @d17
  br label %loop-header321

ifmerge313:                                       ; preds = %ifmerge310
  %assignment_tmp314315 = fadd <4 x float> %color.46, %11
  %209 = extractelement <4 x float> %assignment_tmp314315, i32 2
  %210 = fcmp olt float %209, %10
  br i1 %210, label %then317, label %ifmerge319

then317:                                          ; preds = %ifmerge313
  br label %stage-epilogue

ifmerge319:                                       ; preds = %ifmerge313
  br label %loop-header305

loop-header321:                                   ; preds = %ifmerge330, %then311
  %color.47 = phi <4 x float> [ %color.46, %then311 ], [ %assignment_tmp325326, %ifmerge330 ]
  %211 = extractelement <4 x float> %color.47, i32 1
  %212 = fcmp olt float %211, %.pre361
  br i1 %212, label %then322, label %ifmerge324

then322:                                          ; preds = %loop-header321
  br label %stage-epilogue

ifmerge324:                                       ; preds = %loop-header321
  %assignment_tmp325326 = fadd <4 x float> %color.47, %174
  %213 = extractelement <4 x float> %assignment_tmp325326, i32 0
  %214 = fcmp ult float %213, %208
  br i1 %214, label %ifmerge330, label %then328

then328:                                          ; preds = %ifmerge324
  br label %loop-header332

ifmerge330:                                       ; preds = %ifmerge324
  br label %loop-header321

loop-header332:                                   ; preds = %else337, %then328
  %color.48 = phi <4 x float> [ %assignment_tmp325326, %then328 ], [ %color338, %else337 ]
  %215 = extractelement <4 x float> %color.48, i32 1
  %216 = fcmp ult float %215, %.pre360
  br i1 %216, label %ifmerge335, label %then333

then333:                                          ; preds = %loop-header332
  %assignment_tmp341342 = fadd <4 x float> %color.48, %174
  br label %stage-epilogue

ifmerge335:                                       ; preds = %loop-header332
  %217 = extractelement <4 x float> %color.48, i32 3
  %218 = fcmp olt float %217, %.pre360
  br i1 %218, label %then336, label %else337

then336:                                          ; preds = %ifmerge335
  br label %stage-exit

else337:                                          ; preds = %ifmerge335
  %color338 = fadd <4 x float> %color.48, %174
  br label %loop-header332

stage-epilogue:                                   ; preds = %then333, %then322, %then317, %then293
  %gl_FragColor345.0 = phi <4 x float> [ %assignment_tmp286287, %then322 ], [ %assignment_tmp341342, %then333 ], [ %assignment_tmp286287, %then317 ], [ %assignment_tmp286287, %then293 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %gl_FragColor345.0)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then336
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

inductive variable:  %indvar410 = phi i32 [ %indvar.next411, %loop-header60 ], [ 0, %then55 ]
  trip count:        42
  increment:         %indvar.next411 = add i32 %indvar410, 1
  exit condition:    %exitcond = icmp eq i32 %indvar.next411, 42

inductive variable:  %indvar = phi i32 [ %indvar.next, %ifmerge74 ], [ 0, %loop-merge63 ]
  trip count:        100
  increment:         %indvar.next = add i32 %indvar, 1
  exit condition:    %exitcond408 = icmp eq i32 %indvar.next, 100
compiling loops.frag...
uniform vec4 bigColor ; 
uniform vec4 bigColor1_1 ; 
uniform vec4 bigColor1_2 ; 
uniform vec4 bigColor1_3 ; 
uniform vec4 bigColor2 ; 
uniform vec4 bigColor3 ; 
uniform vec4 bigColor4 ; 
uniform vec4 bigColor5 ; 
uniform vec4 bigColor6 ; 
uniform vec4 bigColor7 ; 
uniform vec4 bigColor8 ; 
varying vec4 BaseColor ; 
uniform float d ; 
uniform float d2 ; 
uniform float d3 ; 
uniform float d4 ; 
uniform float d5 ; 
uniform float d6 ; 
uniform float d7 ; 
uniform float d8 ; 
uniform float d9 ; 
uniform float d10 ; 
uniform float d11 ; 
uniform float d12 ; 
uniform float d13 ; 
uniform float d14 ; 
uniform float d15 ; 
uniform float d16 ; 
uniform float d17 ; 
uniform float d18 ; 
uniform float d19 ; 
uniform float d20 ; 
uniform float d21 ; 
uniform float d22 ; 
uniform float d23 ; 
uniform float d24 ; 
uniform float d25 ; 
uniform float d26 ; 
uniform float d27 ; 
uniform float d28 ; 
uniform float d29 ; 
uniform float d30 ; 
uniform float d31 ; 
uniform float d32 ; 
uniform float d33 ; 
uniform float d34 ; 
uniform int Count ; 
void  main (){
vec4 color = BaseColor ; while ( color . x < d ) {
color += bigColor ; }
while ( color . z < d ) {
color += bigColor1_1 ; if ( color . w < d ) continue; color += bigColor1_1 ; }
while ( color . x < 42.000000 ) {
++ color ; }
while ( color . w < d2 && color . y < d3 ) {
color += bigColor1_2 ; }
while ( color . z < d3 ) {
color += bigColor1_3 ; if ( color . y < d4 ) break; color += bigColor1_3 ; }
for( int i = 0 ; ; i < Count ; ++ i ) {
color += bigColor2 ; }
do {
color += bigColor3 ; }
while ( color . x < d2 ); for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; }
for( int i = 0 ; ; i < 100 ; ++ i ) {
if ( color . z < 20.000000 ) color . x ++ ; else color . y ++ ; if ( color . w < 20.000000 ) if ( color . z > color . y ) 0 ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) continue; ++ color . w ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) break; ++ color . w ; }
do {
color += bigColor4 ; if ( color . x < d4 ) continue; if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor4 ; if ( color . x < d4 ) {
color . z += 2.000000 ; if ( color . z < d4 ) {
color . x ++ ; continue; }
}
if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor5 ; if ( color . y < d5 ) color . y += d5 ; }
while ( color . x < d5 ); if ( color . x < d6 ) {
while ( color . y < d6 ) color += bigColor6 ; }
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
if ( color . x < d6 ) {
while ( color . y < d6 ) {
color += bigColor6 ; if ( d7 < 1.000000 ) break; }
}
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
do {
if ( d7 < 0.000000 ) break; color += bigColor7 ; if ( d7 < 1.000000 ) {
color . z ++ ; break; }
color += BaseColor ; }
while ( true ); do {
if ( d8 < 0.000000 ) break; color += bigColor7 ; if ( d8 < 1.000000 ) {
color . z ++ ; if ( d8 < 2.000000 ) {
color . y ++ ; }
else {
color . x ++ ; }
break; }
color += BaseColor ; }
while ( color . z < d8 ); while ( color . w < d9 ) {
if ( d9 > d8 ) {
if ( color . x <= d7 ) {
if ( color . z == 5.000000 ) color . w ++ ; else break; }
}
}
while ( color . z < d10 ) {
color . y ++ ; if ( color . y < d11 ) {
color . z ++ ; if ( color . w < d12 ) color . w ++ ; else color . x ++ ; continue; }
color ++ ; break; }
while ( color . x < 10 ) {
color += bigColor8 ; if ( color . z < d8 ) if ( color . w < d6 ) continue; color . y += bigColor8 . x ; }
while ( color . w < d13 ) {
if ( color . z < d13 ) color ++ ; else color -- ; color += bigColor4 ; if ( color . x < d4 ) {
color . z += 2.000000 ; if ( color . z < d4 ) {
color . x ++ ; continue; }
}
if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
color ++ ; gl_FragColor = color ; while ( color . x < d14 ) {
if ( color . y < d15 ) {
return ; }
else color ++ ; }
color ++ ; while ( color . w < d16 ) {
color . w ++ ; }
while ( color . w < d2 && color . y < d3 ) {
color += bigColor1_2 ; if ( color . z < d3 ) return ; }
do {
if ( color . y < d18 ) return ; color ++ ; }
while ( color . x < d17 ); while ( color . y < d16 ) {
if ( color . w < d16 ) {
discard; }
else color ++ ; }
color ++ ; gl_FragColor = color ; }



(
(declare (uniform ) int Count)
(declare (uniform ) float d18)
(declare (uniform ) float d17)
(declare (uniform ) float d16)
(declare (uniform ) float d15)
(declare (uniform ) float d14)
(declare (uniform ) float d13)
(declare (uniform ) float d12)
(declare (uniform ) float d11)
(declare (uniform ) float d10)
(declare (uniform ) float d9)
(declare (uniform ) float d8)
(declare (uniform ) float d7)
(declare (uniform ) float d6)
(declare (uniform ) float d5)
(declare (uniform ) float d4)
(declare (uniform ) float d3)
(declare (uniform ) float d2)
(declare (uniform ) float d)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor8)
(declare (uniform ) vec4 bigColor7)
(declare (uniform ) vec4 bigColor6)
(declare (uniform ) vec4 bigColor5)
(declare (uniform ) vec4 bigColor4)
(declare (uniform ) vec4 bigColor3)
(declare (uniform ) vec4 bigColor2)
(declare (uniform ) vec4 bigColor1_3)
(declare (uniform ) vec4 bigColor1_2)
(declare (uniform ) vec4 bigColor1_1)
(declare (uniform ) vec4 bigColor)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_1) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz w (var_ref assignment_tmp) )(var_ref d) ) (
          continue
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_1) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (42.000000)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) bool and_tmp)
        (if (expression bool < (swiz w (var_ref color) )(var_ref d2) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool < (swiz y (var_ref color) )(var_ref d3) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (if (expression bool ! (var_ref and_tmp) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor1_2) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d3) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_3) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (var_ref Count) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor2) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d2) ) (
          break
        )
        ())

      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (100)) ) ((constant int (1)) ) (
        (if (expression bool < (swiz z (var_ref color) )(constant float (20.000000)) ) (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        ))

        (if (expression bool < (swiz w (var_ref color) )(constant float (20.000000)) ) (
          (if (expression bool > (swiz z (var_ref color) )(swiz y (var_ref color) )) (
          )
          ())

        )
        ())

        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (constant int (42)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
          continue
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          continue
        )
        ())

        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (2.000000)) ) ) 
          (if (expression bool < (swiz z (var_ref color) )(var_ref d4) ) (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
            continue
          )
          ())

        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor5) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d5) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d5) ) ) 
        )
        ())

        (if (expression bool >= (swiz x (var_ref color) )(var_ref d5) ) (
          break
        )
        ())

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
          (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
            break
          )
          ())

        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (loop () () () () (
        (if (expression bool < (var_ref d7) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool < (var_ref d8) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d8) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          (if (expression bool < (var_ref d8) (constant float (2.000000)) ) (
            (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (if (expression bool >= (swiz w (var_ref color) )(var_ref d9) ) (
          break
        )
        ())

        (if (expression bool > (var_ref d9) (var_ref d8) ) (
          (if (expression bool <= (swiz x (var_ref color) )(var_ref d7) ) (
            (if (expression bool all_equal (swiz z (var_ref color) )(constant float (5.000000)) ) (
              (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
            )
            (
              break
            ))

          )
          ())

        )
        ())

      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d10) ) (
          break
        )
        ())

        (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        (if (expression bool < (swiz y (var_ref color) )(var_ref d11) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(constant float (1.000000)) ) ) 
          (if (expression bool < (swiz w (var_ref color) )(var_ref d12) ) (
            (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          continue
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        break
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (10.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor8) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          (if (expression bool < (swiz w (var_ref assignment_tmp) )(var_ref d6) ) (
            continue
          )
          ())

        )
        ())

        (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(swiz x (var_ref bigColor8) )) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz w (var_ref color) )(var_ref d13) ) (
          break
        )
        ())

        (if (expression bool < (swiz z (var_ref color) )(var_ref d13) ) (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 - (var_ref color) (constant float (1.000000)) ) ) 
        ))

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (2.000000)) ) ) 
          (if (expression bool < (swiz z (var_ref color) )(var_ref d4) ) (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
            continue
          )
          ())

        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d14) ) (
          break
        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d15) ) (
          (return)
        )
        (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        ))

      ))

      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (loop () () () () (
        (if (expression bool >= (swiz w (var_ref color) )(var_ref d16) ) (
          break
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) bool and_tmp)
        (if (expression bool < (swiz w (var_ref color) )(var_ref d2) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool < (swiz y (var_ref color) )(var_ref d3) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (if (expression bool ! (var_ref and_tmp) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_2) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz z (var_ref assignment_tmp) )(var_ref d3) ) (
          (return)
        )
        ())

      ))

      (loop () () () () (
        (if (expression bool < (swiz y (var_ref color) )(var_ref d18) ) (
          (return)
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d17) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (if (expression bool >= (swiz y (var_ref color) )(var_ref d16) ) (
          break
        )
        ())

        (if (expression bool < (swiz w (var_ref color) )(var_ref d16) ) (
          (discard )
        )
        (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        ))

      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d13;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
in vec4 BaseColor;
const float const91_42f = 42;
const float const93_1f = 1;
const bool const97_true = true;
const int const103_0 = 0;
const int const108_1 = 1;
const float const114_20f = 20;
const int const122_42 = 42;
const int const137_41 = 41;
const float const149_2f = 2;
const float const177_0f = 0;
const bool const183_false = false;
const float const199_5f = 5;
const float const215_10f = 10;

void main()
{
    vec4 color_0;
    vec4 color_1;
    vec4 color_1_be;
    vec4 color_2;
    vec4 color_3;
    bool and_tmp_0;
    vec4 color_4;
    vec4 color_5;
    int indvar412;
    vec4 color_6;
    vec4 color_7;
    int indvar410;
    vec4 color_8;
    int indvar;
    vec4 color_9;
    vec4 color_10;
    vec4 color_11;
    int temp38;
    vec4 color_11_be;
    int temp40;
    vec4 color_12;
    vec4 color_13;
    vec4 color_14;
    vec4 color_14_be;
    vec4 color_15;
    vec4 color_16;
    vec4 color_16_be;
    vec4 color_17;
    vec4 color_18;
    vec4 color_19;
    vec4 color_20;
    vec4 color_21;
    vec4 color_22;
    vec4 temp54;
    vec4 color_23;
    vec4 color_24;
    vec4 color_25;
    vec4 color_26;
    vec4 color_27;
    bool _pre_phi;
    vec4 color_28;
    vec4 color_29;
    bool _pre_phi364;
    vec4 color_30;
    vec4 color_31;
    vec4 color_32;
    vec4 color_33;
    vec4 color_34;
    vec4 color_35;
    vec4 color_36;
    vec4 color_37;
    vec4 color_38;
    vec4 color_39;
    vec4 color_39_be;
    vec4 color_40;
    vec4 color_41;
    vec4 color_40_be;
    vec4 color_42;
    vec4 color_43;
    vec4 color_44;
    vec4 color_45;
    vec4 color_46;
    bool and_tmp306_0;
    vec4 color_47;
    vec4 color_48;
    gl_FragColor345_0;
    color_0 = BaseColor;
    while (color_0.x < d){
        vec4 color5 = color_0 + bigColor;
        color_0 = color5;
    }
    
    color_1 = color_0;
    while (color_1.z < d){
        vec4 assignment_tmp10 = color_1 + bigColor1_1;
        bool temp89 = assignment_tmp10.w < d;
        if (temp89) {
            color_1_be = assignment_tmp10;
            color_1 = color_1_be;
            continue;
        }
        else {
            vec4 color15 = assignment_tmp10 + bigColor1_1;
            color_1_be = color15;
            color_1 = color_1_be;
            continue;
        }
        
    }
    
    color_2 = color_1;
    while (color_2.x < const91_42f){
        vec4 temp92 = vec4(const93_1f);
        vec4 color21 = color_2 + temp92;
        color_2 = color21;
    }
    
    color_3 = color_2;
    while (true) {
        bool temp95 = color_3.w < d2;
        if (temp95) {
            bool phitmp = color_3.y >= d3;
            and_tmp_0 = phitmp;
        }
        else {
            and_tmp_0 = const97_true;
        }
        
        if (and_tmp_0) {
            break;
        }
        
        vec4 color30 = color_3 + bigColor1_2;
        color_3 = color30;
    }
    
    color_4 = color_3;
    while (color_4.z < d3){
        vec4 assignment_tmp3637 = color_4 + bigColor1_3;
        bool temp100 = assignment_tmp3637.y < d4;
        if (temp100) {
            color_5 = assignment_tmp3637;
            break;
        }
        
        vec4 color42 = assignment_tmp3637 + bigColor1_3;
        color_4 = color42;
    }
    
    color_5 = color_4;
    bool tmp414 = Count > const103_0;
    int smax = tmp414 ? Count : const103_0
    indvar412 = const103_0;
    color_6 = color_5;
    while (true) {
        bool exitcond415 = indvar412 == smax;
        if (exitcond415) {
            break;
        }
        
        vec4 color48 = color_6 + bigColor2;
        int indvar_next413 = indvar412 + const108_1;
        indvar412 = indvar_next413;
        color_6 = color48;
    }
    
    color_7 = color_6;
    while (true) {
        vec4 assignment_tmp5253 = color_7 + bigColor3;
        bool temp110 = assignment_tmp5253.x < d2;
        if (! temp110) {
            break;
        }
        
        color_7 = assignment_tmp5253;
    }
    
    indvar410 = const103_0;
    color_8 = assignment_tmp5253;
    for (indvar410 = 0; indvar410 < 42; ++indvar410) {
        float temp111 = color_8.z + d3;
        vec4 temp112 = color_8;
        temp112.z = temp111.x;
        color_8 = temp112;
    }
    
    indvar = const103_0;
    color_9 = temp112;
    for (indvar = 0; indvar < 100; ++indvar) {
        bool temp113 = color_9.z < const114_20f;
        if (temp113) {
            float temp115 = color_9.x + const93_1f;
            vec4 temp116 = color_9;
            temp116.x = temp115.x;
            color_10 = temp116;
        }
        else {
            float temp117 = color_9.y + const93_1f;
            vec4 temp118 = color_9;
            temp118.y = temp117.x;
            color_10 = temp118;
        }
        
        bool temp119 = color_10.w < const114_20f;
        if (temp119) {
        }
        else {
            indvar = int indvar_next;
            color_9 = color_10;
            color_9 = color_10;
        }
        
    }
    
    color_11 = color_10;
    temp38 = const103_0;
    while (true) {
        bool exitcond407 = temp38 == const122_42;
        if (exitcond407) {
            break;
        }
        
        float temp123 = color_11.z + d3;
        vec4 temp124 = color_11;
        temp124.z = temp123.x;
        bool temp125 = temp124.x < d4;
        if (temp125) {
            color_11_be = temp124;
            int temp126 = temp38 + const108_1;
            color_11 = color_11_be;
            temp38 = temp126;
            continue;
        }
        else {
            float temp127 = temp124.w + const93_1f;
            vec4 temp128 = temp124;
            temp128.w = temp127.x;
            color_11_be = temp128;
            temp126 = temp38 + const108_1;
            color_11 = color_11_be;
            temp38 = temp126;
            continue;
        }
        
    }
    
    temp40 = const103_0;
    color_12 = color_11;
    while (true) {
        int tmp = temp40 + const108_1;
        float temp130 = color_12.z + d3;
        vec4 temp131 = color_12;
        temp131.z = temp130.x;
        bool temp132 = temp131.x < d4;
        if (temp132) {
            color_13 = temp131;
            break;
        }
        
        float temp133 = temp131.w + const93_1f;
        vec4 temp134 = temp131;
        temp134.w = temp133.x;
        int temp135 = temp40 + const108_1;
        bool temp136 = tmp > const137_41;
        temp40 = temp135;
        color_12 = temp134;
        if (temp136) {
            color_13 = temp134;
            break;
        }
        
        temp40 = temp135;
        color_12 = temp134;
    }
    
    color_14 = color_13;
    while (true) {
        vec4 assignment_tmp99100 = color_14 + bigColor4;
        bool temp139 = assignment_tmp99100.x < d4;
        if (temp139) {
            color_14_be = assignment_tmp99100;
            color_14 = color_14_be;
            continue;
        }
        else {
            bool temp140 = assignment_tmp99100.y < d4;
            if (temp140) {
                float temp141 = assignment_tmp99100.y + d4;
                vec4 temp142 = assignment_tmp99100;
                temp142.y = temp141.x;
                color_15 = temp142;
            }
            else {
                float temp143 = assignment_tmp99100.x + d4;
                vec4 temp144 = assignment_tmp99100;
                temp144.x = temp143.x;
                color_15 = temp144;
            }
            
            bool temp145 = color_15.z < d4;
            if (! temp145) {
                break;
            }
            
            color_14_be = color_15;
            color_14 = color_14_be;
            continue;
        }
        
    }
    
    color_16 = color_15;
    while (true) {
        vec4 assignment_tmp115116 = color_16 + bigColor4;
        bool temp147 = assignment_tmp115116.x < d4;
        color_17 = assignment_tmp115116;
        if (temp147) {
            float temp148 = assignment_tmp115116.z + const149_2f;
            vec4 temp150 = assignment_tmp115116;
            temp150.z = temp148.x;
            bool temp151 = temp150.z < d4;
            if (temp151) {
                float temp152 = temp150.x + const93_1f;
                vec4 temp153 = temp150;
                temp153.x = temp152.x;
                color_16_be = temp153;
                color_16 = color_16_be;
                continue;
            }
            else {
                color_17 = temp150;
            }
            
        }
        
        bool temp154 = color_17.y < d4;
        if (temp154) {
            float temp155 = color_17.y + d4;
            vec4 temp156 = color_17;
            temp156.y = temp155.x;
            color_18 = temp156;
        }
        else {
            float temp157 = color_17.x + d4;
            vec4 temp158 = color_17;
            temp158.x = temp157.x;
            color_18 = temp158;
        }
        
        bool temp159 = color_18.z < d4;
        if (! temp159) {
            break;
        }
        
        color_16_be = color_18;
        color_16 = color_16_be;
        continue;
    }
    
    color_19 = color_18;
    while (true) {
        vec4 assignment_tmp135136 = color_19 + bigColor5;
        bool temp161 = assignment_tmp135136.y < d5;
        color_20 = assignment_tmp135136;
        if (temp161) {
            float temp162 = assignment_tmp135136.y + d5;
            vec4 temp163 = assignment_tmp135136;
            temp163.y = temp162.x;
            color_20 = temp163;
        }
        
        bool temp164 = color_20.x < d5;
        if (! temp164) {
            break;
        }
        
        color_19 = color_20;
    }
    
    bool temp165 = color_20.x < d6;
    if (temp165) {
        color_21 = color_20;
        while (color_21.y < d6){
            vec4 color150 = color_21 + bigColor6;
            color_21 = color150;
        }
        
        temp54 = bigColor6;
        color_23 = color_21;
    }
    else {
        color_22 = color_20;
        while (color_22.z < d6){
            float temp167 = float temp168 + bigColor6.z;
            vec4 temp169 = color_22;
            temp169.z = temp167.x;
            color_22 = temp169;
        }
        
        temp54 = bigColor6;
        color_23 = color_22;
    }
    
    bool temp170 = color_23.x < d6;
    if (temp170) {
        bool temp171 = d7 < const93_1f;
        color_24 = color_23;
        while (color_24.y < d6){
            vec4 color165 = color_24 + temp54;
            if (temp171) {
                color_25 = color165;
                break;
            }
            
            color_24 = color165;
        }
        
        color_25 = color_24;
        color_27 = color_25;
    }
    else {
        color_26 = color_23;
        while (color_26.z < d6){
            float temp173 = float temp174 + temp54.z;
            vec4 temp175 = color_26;
            temp175.z = temp173.x;
            color_26 = temp175;
        }
        
        color_27 = color_26;
    }
    
    bool _pre362 = d7 < const177_0f;
    bool temp178 = d7 < const93_1f;
    _pre_phi = _pre362;
    color_28 = color_27;
    while (true) {
        if (_pre_phi) {
            color_29 = color_28;
            break;
        }
        
        vec4 assignment_tmp182183 = color_28 + bigColor7;
        if (temp178) {
            float temp180 = assignment_tmp182183.z + const93_1f;
            vec4 temp181 = assignment_tmp182183;
            temp181.z = temp180.x;
            color_29 = temp181;
            break;
        }
        
        vec4 color190 = assignment_tmp182183 + BaseColor;
        _pre_phi = const183_false;
        color_28 = color190;
    }
    
    bool _pre363 = d8 < const177_0f;
    bool temp185 = d8 < const93_1f;
    _pre_phi364 = _pre363;
    color_30 = color_29;
    while (true) {
        if (_pre_phi364) {
            color_32 = color_30;
            break;
        }
        
        vec4 assignment_tmp196197 = color_30 + bigColor7;
        if (temp185) {
            float temp187 = assignment_tmp196197.z + const93_1f;
            vec4 temp188 = assignment_tmp196197;
            temp188.z = temp187.x;
            bool temp189 = d8 < const149_2f;
            if (temp189) {
                float temp190 = temp188.y + const93_1f;
                vec4 temp191 = temp188;
                temp191.y = temp190.x;
                color_31 = temp191;
            }
            else {
                float temp192 = temp188.x + const93_1f;
                vec4 temp193 = temp188;
                temp193.x = temp192.x;
                color_31 = temp193;
            }
            
            color_32 = color_31;
            break;
        }
        
        vec4 assignment_tmp208210 = assignment_tmp196197 + BaseColor;
        bool temp195 = assignment_tmp208210.z < d8;
        if (! temp195) {
            color_32 = assignment_tmp208210;
            break;
        }
        
        _pre_phi364 = const183_false;
        color_30 = assignment_tmp208210;
    }
    
    bool temp196 = d9 > d8;
    color_33 = color_32;
    while (color_33.w < d9){
        color_35 = color_33;
        if (temp196) {
            bool temp197 = color_33.x > d7;
            color_34 = color_33;
            if (! temp197) {
                bool temp198 = color_33.z == const199_5f;
                if (! temp198) {
                    break;
                }
                
                float temp200 = float temp201 + const93_1f;
                vec4 temp202 = color_33;
                temp202.w = temp200.x;
                color_34 = temp202;
            }
            
            color_35 = color_34;
            color_33 = color_35;
            continue;
        }
        else {
            color_33 = color_35;
            continue;
        }
        
    }
    
    color_36 = color_33;
    while (color_36.z < d10){
        float temp203 = color_36.y + const93_1f;
        vec4 temp204 = color_36;
        temp204.y = temp203.x;
        bool temp205 = temp204.y < d11;
        if (! temp205) {
            vec4 temp206 = vec4(const93_1f);
            vec4 color244 = temp204 + temp206;
            color_38 = color244;
            break;
        }
        
        float temp208 = temp204.z + const93_1f;
        vec4 temp209 = temp204;
        temp209.z = temp208.x;
        bool temp210 = temp209.w < d12;
        if (temp210) {
            float temp211 = temp209.w + const93_1f;
            vec4 temp212 = temp209;
            temp212.w = temp211.x;
            color_37 = temp212;
            color_36 = color_37;
            continue;
        }
        else {
            float temp213 = temp209.x + const93_1f;
            vec4 temp214 = temp209;
            temp214.x = temp213.x;
            color_37 = temp214;
            color_36 = color_37;
            continue;
        }
        
    }
    
    color_38 = color_36;
    color_39 = color_38;
    while (color_39.x < const215_10f){
        vec4 assignment_tmp251252 = color_39 + bigColor8;
        bool temp217 = assignment_tmp251252.z < d8;
        if (temp217) {
            bool temp218 = assignment_tmp251252.w < d6;
            if (temp218) {
                color_39_be = assignment_tmp251252;
                color_39 = color_39_be;
                continue;
            }
            else {
            }
            
        }
        
        float temp219 = assignment_tmp251252.y + bigColor8.x;
        vec4 temp220 = assignment_tmp251252;
        temp220.y = temp219.x;
        color_39_be = temp220;
        color_39 = color_39_be;
        continue;
    }
    
    color_40 = color_39;
    while (color_40.w < d13){
        bool temp221 = color_40.z < d13;
        if (temp221) {
            vec4 temp222 = vec4(const93_1f);
            vec4 color266 = color_40 + temp222;
            color_41 = color266;
        }
        else {
            vec4 temp224 = vec4(const93_1f);
            vec4 color268 = color_40 - temp224;
            color_41 = color268;
        }
        
        vec4 assignment_tmp270271 = color_41 + bigColor4;
        bool temp227 = assignment_tmp270271.x < d4;
        color_42 = assignment_tmp270271;
        if (temp227) {
            float temp228 = assignment_tmp270271.z + const149_2f;
            vec4 temp229 = assignment_tmp270271;
            temp229.z = temp228.x;
            bool temp230 = temp229.z < d4;
            if (temp230) {
                float temp231 = temp229.x + const93_1f;
                vec4 temp232 = temp229;
                temp232.x = temp231.x;
                color_40_be = temp232;
                color_40 = color_40_be;
                continue;
            }
            else {
                color_42 = temp229;
            }
            
        }
        
        bool temp233 = color_42.y < d4;
        if (temp233) {
            float temp234 = color_42.y + d4;
            vec4 temp235 = color_42;
            temp235.y = temp234.x;
            color_43 = temp235;
        }
        else {
            float temp236 = color_42.x + d4;
            vec4 temp237 = color_42;
            temp237.x = temp236.x;
            color_43 = temp237;
        }
        
        color_40_be = color_43;
        color_40 = color_40_be;
        continue;
    }
    
    vec4 temp238 = vec4(const93_1f);
    vec4 assignment_tmp286287 = color_40 + temp238;
    color_44 = assignment_tmp286287;
    while (color_44.x < d14){
        bool temp240 = color_44.y < d15;
        if (temp240) {
            gl_FragColor345_0 = assignment_tmp286287;
            gl_FragColor = gl_FragColor345_0;
            return;
        }
        
        vec4 color295 = color_44 + temp238;
        color_44 = color295;
    }
    
    vec4 color298 = color_44 + temp238;
    color_45 = color298;
    while (color_45.w < d16){
        float temp243 = float temp244 + const93_1f;
        vec4 temp245 = color_45;
        temp245.w = temp243.x;
        color_45 = temp245;
    }
    
    color_46 = color_45;
    while (true) {
        bool temp246 = color_46.w < d2;
        if (temp246) {
            bool phitmp365 = color_46.y >= d3;
            and_tmp306_0 = phitmp365;
        }
        else {
            and_tmp306_0 = const97_true;
        }
        
        if (and_tmp306_0) {
            color_47 = color_46;
            while (! (color_47.y < d18)){
                vec4 assignment_tmp325326 = color_47 + temp238;
                bool temp249 = assignment_tmp325326.x < d17;
                if (! temp249) {
                    color_48 = assignment_tmp325326;
                    while (color_48.y < d16){
                        bool temp250 = color_48.w < d16;
                        if (temp250) {
                            discard;
                        }
                        
                        vec4 color338 = color_48 + temp238;
                        color_48 = color338;
                    }
                    
                    vec4 assignment_tmp341342 = color_48 + temp238;
                    gl_FragColor345_0 = assignment_tmp341342;
                    gl_FragColor = gl_FragColor345_0;
                    return;
                }
                
                color_47 = assignment_tmp325326;
            }
            
            gl_FragColor345_0 = assignment_tmp286287;
            gl_FragColor = gl_FragColor345_0;
            return;
        }
        
        vec4 assignment_tmp314315 = color_46 + bigColor1_2;
        bool temp254 = assignment_tmp314315.z < d3;
        if (temp254) {
            gl_FragColor345_0 = assignment_tmp286287;
            gl_FragColor = gl_FragColor345_0;
            return;
        }
        
        color_46 = assignment_tmp314315;
    }
    
}
