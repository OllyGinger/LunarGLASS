
Top IR:
; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@bigColor1_1 = external addrspace(1) constant <4 x float>
@d2 = external addrspace(1) constant float
@d3 = external addrspace(1) constant float
@bigColor1_2 = external addrspace(1) constant <4 x float>
@bigColor1_3 = external addrspace(1) constant <4 x float>
@d4 = external addrspace(1) constant float
@Count = external addrspace(1) constant i32
@bigColor2 = external addrspace(1) constant <4 x float>
@bigColor3 = external addrspace(1) constant <4 x float>
@bigColor4 = external addrspace(1) constant <4 x float>
@bigColor5 = external addrspace(1) constant <4 x float>
@d5 = external addrspace(1) constant float
@d6 = external addrspace(1) constant float
@bigColor6 = external addrspace(1) constant <4 x float>
@d7 = external addrspace(1) constant float
@bigColor7 = external addrspace(1) constant <4 x float>
@d8 = external addrspace(1) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %assignment_tmp208 = alloca <4 x float>
  %assignment_tmp196 = alloca <4 x float>
  %assignment_tmp182 = alloca <4 x float>
  %assignment_tmp135 = alloca <4 x float>
  %assignment_tmp115 = alloca <4 x float>
  %assignment_tmp99 = alloca <4 x float>
  %i90 = alloca i32
  %i65 = alloca i32
  %i60 = alloca i32
  %assignment_tmp52 = alloca <4 x float>
  %assignment_tmp36 = alloca <4 x float>
  %and_tmp = alloca i1
  %assignment_tmp = alloca <4 x float>
  %color = alloca <4 x float>
  %i4 = alloca i32
  %i3 = alloca i32
  %i2 = alloca i32
  %i1 = alloca i32
  %i = alloca i32
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = load float addrspace(1)* @d
  %3 = fcmp oge float %1, %2
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loopjump:                                    ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %post-loopjump, %loop-header
  %4 = load <4 x float>* %color
  %5 = load <4 x float> addrspace(1)* @bigColor
  %color5 = fadd <4 x float> %4, %5
  store <4 x float> %color5, <4 x float>* %color
  br label %loop-header

loop-merge:                                       ; preds = %then
  br label %loop-header6

loop-header6:                                     ; preds = %ifmerge14, %then12, %loop-merge
  %6 = load <4 x float>* %color
  %7 = extractelement <4 x float> %6, i32 2
  %8 = load float addrspace(1)* @d
  %9 = fcmp oge float %7, %8
  br i1 %9, label %then7, label %ifmerge9

then7:                                            ; preds = %loop-header6
  br label %loop-merge16

post-loopjump8:                                   ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %post-loopjump8, %loop-header6
  %10 = load <4 x float>* %color
  %11 = load <4 x float> addrspace(1)* @bigColor1_1
  %assignment_tmp10 = fadd <4 x float> %10, %11
  store <4 x float> %assignment_tmp10, <4 x float>* %assignment_tmp
  %color11 = load <4 x float>* %assignment_tmp
  store <4 x float> %color11, <4 x float>* %color
  %12 = load <4 x float>* %assignment_tmp
  %13 = extractelement <4 x float> %12, i32 3
  %14 = load float addrspace(1)* @d
  %15 = fcmp olt float %13, %14
  br i1 %15, label %then12, label %ifmerge14

then12:                                           ; preds = %ifmerge9
  br label %loop-header6

post-loopjump13:                                  ; No predecessors!
  br label %ifmerge14

ifmerge14:                                        ; preds = %post-loopjump13, %ifmerge9
  %16 = load <4 x float>* %assignment_tmp
  %17 = load <4 x float> addrspace(1)* @bigColor1_1
  %color15 = fadd <4 x float> %16, %17
  store <4 x float> %color15, <4 x float>* %color
  br label %loop-header6

loop-merge16:                                     ; preds = %then7
  br label %loop-header17

loop-header17:                                    ; preds = %ifmerge20, %loop-merge16
  %18 = load <4 x float>* %color
  %19 = extractelement <4 x float> %18, i32 0
  %20 = fcmp oge float %19, 4.200000e+01
  br i1 %20, label %then18, label %ifmerge20

then18:                                           ; preds = %loop-header17
  br label %loop-merge22

post-loopjump19:                                  ; No predecessors!
  br label %ifmerge20

ifmerge20:                                        ; preds = %post-loopjump19, %loop-header17
  %21 = load <4 x float>* %color
  %22 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color21 = fadd <4 x float> %21, %22
  store <4 x float> %color21, <4 x float>* %color
  br label %loop-header17

loop-merge22:                                     ; preds = %then18
  br label %loop-header23

loop-header23:                                    ; preds = %ifmerge29, %loop-merge22
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(1)* @d2
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then24, label %else

then24:                                           ; preds = %loop-header23
  %27 = load <4 x float>* %color
  %28 = extractelement <4 x float> %27, i32 1
  %29 = load float addrspace(1)* @d3
  %and_tmp25 = fcmp olt float %28, %29
  store i1 %and_tmp25, i1* %and_tmp
  br label %ifmerge26

else:                                             ; preds = %loop-header23
  store i1 false, i1* %and_tmp
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then24
  %30 = load i1* %and_tmp
  %31 = xor i1 %30, true
  br i1 %31, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  br label %loop-merge31

post-loopjump28:                                  ; No predecessors!
  br label %ifmerge29

ifmerge29:                                        ; preds = %post-loopjump28, %ifmerge26
  %32 = load <4 x float>* %color
  %33 = load <4 x float> addrspace(1)* @bigColor1_2
  %color30 = fadd <4 x float> %32, %33
  store <4 x float> %color30, <4 x float>* %color
  br label %loop-header23

loop-merge31:                                     ; preds = %then27
  br label %loop-header32

loop-header32:                                    ; preds = %ifmerge41, %loop-merge31
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 2
  %36 = load float addrspace(1)* @d3
  %37 = fcmp oge float %35, %36
  br i1 %37, label %then33, label %ifmerge35

then33:                                           ; preds = %loop-header32
  br label %loop-merge43

post-loopjump34:                                  ; No predecessors!
  br label %ifmerge35

ifmerge35:                                        ; preds = %post-loopjump34, %loop-header32
  %38 = load <4 x float>* %color
  %39 = load <4 x float> addrspace(1)* @bigColor1_3
  %assignment_tmp3637 = fadd <4 x float> %38, %39
  store <4 x float> %assignment_tmp3637, <4 x float>* %assignment_tmp36
  %color38 = load <4 x float>* %assignment_tmp36
  store <4 x float> %color38, <4 x float>* %color
  %40 = load <4 x float>* %assignment_tmp36
  %41 = extractelement <4 x float> %40, i32 1
  %42 = load float addrspace(1)* @d4
  %43 = fcmp olt float %41, %42
  br i1 %43, label %then39, label %ifmerge41

then39:                                           ; preds = %ifmerge35
  br label %loop-merge43

post-loopjump40:                                  ; No predecessors!
  br label %ifmerge41

ifmerge41:                                        ; preds = %post-loopjump40, %ifmerge35
  %44 = load <4 x float>* %assignment_tmp36
  %45 = load <4 x float> addrspace(1)* @bigColor1_3
  %color42 = fadd <4 x float> %44, %45
  store <4 x float> %color42, <4 x float>* %color
  br label %loop-header32

loop-merge43:                                     ; preds = %then39, %then33
  store i32 0, i32* %i4
  br label %loop-header44

loop-header44:                                    ; preds = %ifmerge47, %loop-merge43
  %46 = load i32* %i4
  %47 = load i32 addrspace(1)* @Count
  %48 = icmp sge i32 %46, %47
  br i1 %48, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge50

post-loopjump46:                                  ; No predecessors!
  br label %ifmerge47

ifmerge47:                                        ; preds = %post-loopjump46, %loop-header44
  %49 = load <4 x float>* %color
  %50 = load <4 x float> addrspace(1)* @bigColor2
  %color48 = fadd <4 x float> %49, %50
  store <4 x float> %color48, <4 x float>* %color
  %51 = load i32* %i4
  %i449 = add i32 %51, 1
  store i32 %i449, i32* %i4
  br label %loop-header44

loop-merge50:                                     ; preds = %then45
  br label %loop-header51

loop-header51:                                    ; preds = %ifmerge57, %loop-merge50
  %52 = load <4 x float>* %color
  %53 = load <4 x float> addrspace(1)* @bigColor3
  %assignment_tmp5253 = fadd <4 x float> %52, %53
  store <4 x float> %assignment_tmp5253, <4 x float>* %assignment_tmp52
  %color54 = load <4 x float>* %assignment_tmp52
  store <4 x float> %color54, <4 x float>* %color
  %54 = load <4 x float>* %assignment_tmp52
  %55 = extractelement <4 x float> %54, i32 0
  %56 = load float addrspace(1)* @d2
  %57 = fcmp oge float %55, %56
  br i1 %57, label %then55, label %ifmerge57

then55:                                           ; preds = %loop-header51
  br label %loop-merge58

post-loopjump56:                                  ; No predecessors!
  br label %ifmerge57

ifmerge57:                                        ; preds = %post-loopjump56, %loop-header51
  br label %loop-header51

loop-merge58:                                     ; preds = %then55
  store i32 0, i32* %i3
  store i32 0, i32* %i60
  br label %loop-header59

loop-header59:                                    ; preds = %loop-header59, %loop-merge58
  %58 = load <4 x float>* %color
  %59 = extractelement <4 x float> %58, i32 2
  %60 = load float addrspace(1)* @d3
  %61 = fadd float %59, %60
  %62 = load <4 x float>* %color
  %color61 = insertelement <4 x float> %62, float %61, i32 2
  store <4 x float> %color61, <4 x float>* %color
  %63 = load i32* %i3
  %i362 = add i32 %63, 1
  store i32 %i362, i32* %i3
  %64 = load i32* %i60
  %65 = add i32 %64, 1
  store i32 %65, i32* %i60
  %66 = icmp sge i32 %64, 42
  br i1 %66, label %loop-merge63, label %loop-header59

loop-merge63:                                     ; preds = %loop-header59
  store i32 0, i32* %i2
  store i32 0, i32* %i65
  br label %loop-header64

loop-header64:                                    ; preds = %ifmerge74, %loop-merge63
  %67 = load <4 x float>* %color
  %68 = extractelement <4 x float> %67, i32 2
  %69 = fcmp olt float %68, 2.000000e+01
  br i1 %69, label %then66, label %else68

then66:                                           ; preds = %loop-header64
  %70 = load <4 x float>* %color
  %71 = extractelement <4 x float> %70, i32 0
  %72 = fadd float %71, 1.000000e+00
  %73 = load <4 x float>* %color
  %color67 = insertelement <4 x float> %73, float %72, i32 0
  store <4 x float> %color67, <4 x float>* %color
  br label %ifmerge70

else68:                                           ; preds = %loop-header64
  %74 = load <4 x float>* %color
  %75 = extractelement <4 x float> %74, i32 1
  %76 = fadd float %75, 1.000000e+00
  %77 = load <4 x float>* %color
  %color69 = insertelement <4 x float> %77, float %76, i32 1
  store <4 x float> %color69, <4 x float>* %color
  br label %ifmerge70

ifmerge70:                                        ; preds = %else68, %then66
  %78 = load <4 x float>* %color
  %79 = extractelement <4 x float> %78, i32 3
  %80 = fcmp olt float %79, 2.000000e+01
  br i1 %80, label %then71, label %ifmerge74

then71:                                           ; preds = %ifmerge70
  %81 = load <4 x float>* %color
  %82 = extractelement <4 x float> %81, i32 2
  %83 = load <4 x float>* %color
  %84 = extractelement <4 x float> %83, i32 1
  %85 = fcmp ogt float %82, %84
  br i1 %85, label %then72, label %ifmerge73

then72:                                           ; preds = %then71
  br label %ifmerge73

ifmerge73:                                        ; preds = %then72, %then71
  br label %ifmerge74

ifmerge74:                                        ; preds = %ifmerge73, %ifmerge70
  %86 = load i32* %i2
  %i275 = add i32 %86, 1
  store i32 %i275, i32* %i2
  %87 = load i32* %i65
  %88 = add i32 %87, 1
  store i32 %88, i32* %i65
  %89 = icmp sge i32 %87, 100
  br i1 %89, label %loop-merge76, label %loop-header64

loop-merge76:                                     ; preds = %ifmerge74
  store i32 0, i32* %i1
  br label %loop-header77

loop-header77:                                    ; preds = %ifmerge85, %then82, %loop-merge76
  %90 = load i32* %i1
  %91 = icmp sge i32 %90, 42
  br i1 %91, label %then78, label %ifmerge80

then78:                                           ; preds = %loop-header77
  br label %loop-merge88

post-loopjump79:                                  ; No predecessors!
  br label %ifmerge80

ifmerge80:                                        ; preds = %post-loopjump79, %loop-header77
  %92 = load <4 x float>* %color
  %93 = extractelement <4 x float> %92, i32 2
  %94 = load float addrspace(1)* @d3
  %95 = fadd float %93, %94
  %96 = load <4 x float>* %color
  %color81 = insertelement <4 x float> %96, float %95, i32 2
  store <4 x float> %color81, <4 x float>* %color
  %97 = load <4 x float>* %color
  %98 = extractelement <4 x float> %97, i32 0
  %99 = load float addrspace(1)* @d4
  %100 = fcmp olt float %98, %99
  br i1 %100, label %then82, label %ifmerge85

then82:                                           ; preds = %ifmerge80
  %101 = load i32* %i1
  %i183 = add i32 %101, 1
  store i32 %i183, i32* %i1
  br label %loop-header77

post-loopjump84:                                  ; No predecessors!
  br label %ifmerge85

ifmerge85:                                        ; preds = %post-loopjump84, %ifmerge80
  %102 = load <4 x float>* %color
  %103 = extractelement <4 x float> %102, i32 3
  %104 = fadd float %103, 1.000000e+00
  %105 = load <4 x float>* %color
  %color86 = insertelement <4 x float> %105, float %104, i32 3
  store <4 x float> %color86, <4 x float>* %color
  %106 = load i32* %i1
  %i187 = add i32 %106, 1
  store i32 %i187, i32* %i1
  br label %loop-header77

loop-merge88:                                     ; preds = %then78
  store i32 0, i32* %i
  store i32 0, i32* %i90
  br label %loop-header89

loop-header89:                                    ; preds = %ifmerge94, %loop-merge88
  %107 = load <4 x float>* %color
  %108 = extractelement <4 x float> %107, i32 2
  %109 = load float addrspace(1)* @d3
  %110 = fadd float %108, %109
  %111 = load <4 x float>* %color
  %color91 = insertelement <4 x float> %111, float %110, i32 2
  store <4 x float> %color91, <4 x float>* %color
  %112 = load <4 x float>* %color
  %113 = extractelement <4 x float> %112, i32 0
  %114 = load float addrspace(1)* @d4
  %115 = fcmp olt float %113, %114
  br i1 %115, label %then92, label %ifmerge94

then92:                                           ; preds = %loop-header89
  br label %loop-merge97

post-loopjump93:                                  ; No predecessors!
  br label %ifmerge94

ifmerge94:                                        ; preds = %post-loopjump93, %loop-header89
  %116 = load <4 x float>* %color
  %117 = extractelement <4 x float> %116, i32 3
  %118 = fadd float %117, 1.000000e+00
  %119 = load <4 x float>* %color
  %color95 = insertelement <4 x float> %119, float %118, i32 3
  store <4 x float> %color95, <4 x float>* %color
  %120 = load i32* %i
  %i96 = add i32 %120, 1
  store i32 %i96, i32* %i
  %121 = load i32* %i90
  %122 = add i32 %121, 1
  store i32 %122, i32* %i90
  %123 = icmp sge i32 %121, 42
  br i1 %123, label %loop-merge97, label %loop-header89

loop-merge97:                                     ; preds = %ifmerge94, %then92
  br label %loop-header98

loop-header98:                                    ; preds = %ifmerge112, %then102, %loop-merge97
  %124 = load <4 x float>* %color
  %125 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp99100 = fadd <4 x float> %124, %125
  store <4 x float> %assignment_tmp99100, <4 x float>* %assignment_tmp99
  %color101 = load <4 x float>* %assignment_tmp99
  store <4 x float> %color101, <4 x float>* %color
  %126 = load <4 x float>* %assignment_tmp99
  %127 = extractelement <4 x float> %126, i32 0
  %128 = load float addrspace(1)* @d4
  %129 = fcmp olt float %127, %128
  br i1 %129, label %then102, label %ifmerge104

then102:                                          ; preds = %loop-header98
  br label %loop-header98

post-loopjump103:                                 ; No predecessors!
  br label %ifmerge104

ifmerge104:                                       ; preds = %post-loopjump103, %loop-header98
  %130 = load <4 x float>* %assignment_tmp99
  %131 = extractelement <4 x float> %130, i32 1
  %132 = load float addrspace(1)* @d4
  %133 = fcmp olt float %131, %132
  br i1 %133, label %then105, label %else107

then105:                                          ; preds = %ifmerge104
  %134 = load <4 x float>* %assignment_tmp99
  %135 = extractelement <4 x float> %134, i32 1
  %136 = load float addrspace(1)* @d4
  %137 = fadd float %135, %136
  %138 = load <4 x float>* %color
  %color106 = insertelement <4 x float> %138, float %137, i32 1
  store <4 x float> %color106, <4 x float>* %color
  br label %ifmerge109

else107:                                          ; preds = %ifmerge104
  %139 = load <4 x float>* %color
  %140 = extractelement <4 x float> %139, i32 0
  %141 = load float addrspace(1)* @d4
  %142 = fadd float %140, %141
  %143 = load <4 x float>* %color
  %color108 = insertelement <4 x float> %143, float %142, i32 0
  store <4 x float> %color108, <4 x float>* %color
  br label %ifmerge109

ifmerge109:                                       ; preds = %else107, %then105
  %144 = load <4 x float>* %color
  %145 = extractelement <4 x float> %144, i32 2
  %146 = load float addrspace(1)* @d4
  %147 = fcmp oge float %145, %146
  br i1 %147, label %then110, label %ifmerge112

then110:                                          ; preds = %ifmerge109
  br label %loop-merge113

post-loopjump111:                                 ; No predecessors!
  br label %ifmerge112

ifmerge112:                                       ; preds = %post-loopjump111, %ifmerge109
  br label %loop-header98

loop-merge113:                                    ; preds = %then110
  br label %loop-header114

loop-header114:                                   ; preds = %ifmerge132, %then120, %loop-merge113
  %148 = load <4 x float>* %color
  %149 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp115116 = fadd <4 x float> %148, %149
  store <4 x float> %assignment_tmp115116, <4 x float>* %assignment_tmp115
  %color117 = load <4 x float>* %assignment_tmp115
  store <4 x float> %color117, <4 x float>* %color
  %150 = load <4 x float>* %assignment_tmp115
  %151 = extractelement <4 x float> %150, i32 0
  %152 = load float addrspace(1)* @d4
  %153 = fcmp olt float %151, %152
  br i1 %153, label %then118, label %ifmerge124

then118:                                          ; preds = %loop-header114
  %154 = load <4 x float>* %assignment_tmp115
  %155 = extractelement <4 x float> %154, i32 2
  %156 = fadd float %155, 2.000000e+00
  %157 = load <4 x float>* %color
  %color119 = insertelement <4 x float> %157, float %156, i32 2
  store <4 x float> %color119, <4 x float>* %color
  %158 = load <4 x float>* %color
  %159 = extractelement <4 x float> %158, i32 2
  %160 = load float addrspace(1)* @d4
  %161 = fcmp olt float %159, %160
  br i1 %161, label %then120, label %ifmerge123

then120:                                          ; preds = %then118
  %162 = load <4 x float>* %color
  %163 = extractelement <4 x float> %162, i32 0
  %164 = fadd float %163, 1.000000e+00
  %165 = load <4 x float>* %color
  %color121 = insertelement <4 x float> %165, float %164, i32 0
  store <4 x float> %color121, <4 x float>* %color
  br label %loop-header114

post-loopjump122:                                 ; No predecessors!
  br label %ifmerge123

ifmerge123:                                       ; preds = %post-loopjump122, %then118
  br label %ifmerge124

ifmerge124:                                       ; preds = %ifmerge123, %loop-header114
  %166 = load <4 x float>* %color
  %167 = extractelement <4 x float> %166, i32 1
  %168 = load float addrspace(1)* @d4
  %169 = fcmp olt float %167, %168
  br i1 %169, label %then125, label %else127

then125:                                          ; preds = %ifmerge124
  %170 = load <4 x float>* %color
  %171 = extractelement <4 x float> %170, i32 1
  %172 = load float addrspace(1)* @d4
  %173 = fadd float %171, %172
  %174 = load <4 x float>* %color
  %color126 = insertelement <4 x float> %174, float %173, i32 1
  store <4 x float> %color126, <4 x float>* %color
  br label %ifmerge129

else127:                                          ; preds = %ifmerge124
  %175 = load <4 x float>* %color
  %176 = extractelement <4 x float> %175, i32 0
  %177 = load float addrspace(1)* @d4
  %178 = fadd float %176, %177
  %179 = load <4 x float>* %color
  %color128 = insertelement <4 x float> %179, float %178, i32 0
  store <4 x float> %color128, <4 x float>* %color
  br label %ifmerge129

ifmerge129:                                       ; preds = %else127, %then125
  %180 = load <4 x float>* %color
  %181 = extractelement <4 x float> %180, i32 2
  %182 = load float addrspace(1)* @d4
  %183 = fcmp oge float %181, %182
  br i1 %183, label %then130, label %ifmerge132

then130:                                          ; preds = %ifmerge129
  br label %loop-merge133

post-loopjump131:                                 ; No predecessors!
  br label %ifmerge132

ifmerge132:                                       ; preds = %post-loopjump131, %ifmerge129
  br label %loop-header114

loop-merge133:                                    ; preds = %then130
  br label %loop-header134

loop-header134:                                   ; preds = %ifmerge143, %loop-merge133
  %184 = load <4 x float>* %color
  %185 = load <4 x float> addrspace(1)* @bigColor5
  %assignment_tmp135136 = fadd <4 x float> %184, %185
  store <4 x float> %assignment_tmp135136, <4 x float>* %assignment_tmp135
  %color137 = load <4 x float>* %assignment_tmp135
  store <4 x float> %color137, <4 x float>* %color
  %186 = load <4 x float>* %assignment_tmp135
  %187 = extractelement <4 x float> %186, i32 1
  %188 = load float addrspace(1)* @d5
  %189 = fcmp olt float %187, %188
  br i1 %189, label %then138, label %ifmerge140

then138:                                          ; preds = %loop-header134
  %190 = load <4 x float>* %assignment_tmp135
  %191 = extractelement <4 x float> %190, i32 1
  %192 = load float addrspace(1)* @d5
  %193 = fadd float %191, %192
  %194 = load <4 x float>* %color
  %color139 = insertelement <4 x float> %194, float %193, i32 1
  store <4 x float> %color139, <4 x float>* %color
  br label %ifmerge140

ifmerge140:                                       ; preds = %then138, %loop-header134
  %195 = load <4 x float>* %color
  %196 = extractelement <4 x float> %195, i32 0
  %197 = load float addrspace(1)* @d5
  %198 = fcmp oge float %196, %197
  br i1 %198, label %then141, label %ifmerge143

then141:                                          ; preds = %ifmerge140
  br label %loop-merge144

post-loopjump142:                                 ; No predecessors!
  br label %ifmerge143

ifmerge143:                                       ; preds = %post-loopjump142, %ifmerge140
  br label %loop-header134

loop-merge144:                                    ; preds = %then141
  %199 = load <4 x float>* %color
  %200 = extractelement <4 x float> %199, i32 0
  %201 = load float addrspace(1)* @d6
  %202 = fcmp olt float %200, %201
  br i1 %202, label %then145, label %else152

then145:                                          ; preds = %loop-merge144
  br label %loop-header146

loop-header146:                                   ; preds = %ifmerge149, %then145
  %203 = load <4 x float>* %color
  %204 = extractelement <4 x float> %203, i32 1
  %205 = load float addrspace(1)* @d6
  %206 = fcmp oge float %204, %205
  br i1 %206, label %then147, label %ifmerge149

then147:                                          ; preds = %loop-header146
  br label %loop-merge151

post-loopjump148:                                 ; No predecessors!
  br label %ifmerge149

ifmerge149:                                       ; preds = %post-loopjump148, %loop-header146
  %207 = load <4 x float>* %color
  %208 = load <4 x float> addrspace(1)* @bigColor6
  %color150 = fadd <4 x float> %207, %208
  store <4 x float> %color150, <4 x float>* %color
  br label %loop-header146

loop-merge151:                                    ; preds = %then147
  br label %ifmerge159

else152:                                          ; preds = %loop-merge144
  br label %loop-header153

loop-header153:                                   ; preds = %ifmerge156, %else152
  %209 = load <4 x float>* %color
  %210 = extractelement <4 x float> %209, i32 2
  %211 = load float addrspace(1)* @d6
  %212 = fcmp oge float %210, %211
  br i1 %212, label %then154, label %ifmerge156

then154:                                          ; preds = %loop-header153
  br label %loop-merge158

post-loopjump155:                                 ; No predecessors!
  br label %ifmerge156

ifmerge156:                                       ; preds = %post-loopjump155, %loop-header153
  %213 = load <4 x float>* %color
  %214 = extractelement <4 x float> %213, i32 2
  %215 = load <4 x float> addrspace(1)* @bigColor6
  %216 = extractelement <4 x float> %215, i32 2
  %217 = fadd float %214, %216
  %218 = load <4 x float>* %color
  %color157 = insertelement <4 x float> %218, float %217, i32 2
  store <4 x float> %color157, <4 x float>* %color
  br label %loop-header153

loop-merge158:                                    ; preds = %then154
  br label %ifmerge159

ifmerge159:                                       ; preds = %loop-merge158, %loop-merge151
  %219 = load <4 x float>* %color
  %220 = extractelement <4 x float> %219, i32 0
  %221 = load float addrspace(1)* @d6
  %222 = fcmp olt float %220, %221
  br i1 %222, label %then160, label %else170

then160:                                          ; preds = %ifmerge159
  br label %loop-header161

loop-header161:                                   ; preds = %ifmerge168, %then160
  %223 = load <4 x float>* %color
  %224 = extractelement <4 x float> %223, i32 1
  %225 = load float addrspace(1)* @d6
  %226 = fcmp oge float %224, %225
  br i1 %226, label %then162, label %ifmerge164

then162:                                          ; preds = %loop-header161
  br label %loop-merge169

post-loopjump163:                                 ; No predecessors!
  br label %ifmerge164

ifmerge164:                                       ; preds = %post-loopjump163, %loop-header161
  %227 = load <4 x float>* %color
  %228 = load <4 x float> addrspace(1)* @bigColor6
  %color165 = fadd <4 x float> %227, %228
  store <4 x float> %color165, <4 x float>* %color
  %229 = load float addrspace(1)* @d7
  %230 = fcmp olt float %229, 1.000000e+00
  br i1 %230, label %then166, label %ifmerge168

then166:                                          ; preds = %ifmerge164
  br label %loop-merge169

post-loopjump167:                                 ; No predecessors!
  br label %ifmerge168

ifmerge168:                                       ; preds = %post-loopjump167, %ifmerge164
  br label %loop-header161

loop-merge169:                                    ; preds = %then166, %then162
  br label %ifmerge177

else170:                                          ; preds = %ifmerge159
  br label %loop-header171

loop-header171:                                   ; preds = %ifmerge174, %else170
  %231 = load <4 x float>* %color
  %232 = extractelement <4 x float> %231, i32 2
  %233 = load float addrspace(1)* @d6
  %234 = fcmp oge float %232, %233
  br i1 %234, label %then172, label %ifmerge174

then172:                                          ; preds = %loop-header171
  br label %loop-merge176

post-loopjump173:                                 ; No predecessors!
  br label %ifmerge174

ifmerge174:                                       ; preds = %post-loopjump173, %loop-header171
  %235 = load <4 x float>* %color
  %236 = extractelement <4 x float> %235, i32 2
  %237 = load <4 x float> addrspace(1)* @bigColor6
  %238 = extractelement <4 x float> %237, i32 2
  %239 = fadd float %236, %238
  %240 = load <4 x float>* %color
  %color175 = insertelement <4 x float> %240, float %239, i32 2
  store <4 x float> %color175, <4 x float>* %color
  br label %loop-header171

loop-merge176:                                    ; preds = %then172
  br label %ifmerge177

ifmerge177:                                       ; preds = %loop-merge176, %loop-merge169
  br label %loop-header178

loop-header178:                                   ; preds = %ifmerge188, %ifmerge177
  %241 = load float addrspace(1)* @d7
  %242 = fcmp olt float %241, 0.000000e+00
  br i1 %242, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge191

post-loopjump180:                                 ; No predecessors!
  br label %ifmerge181

ifmerge181:                                       ; preds = %post-loopjump180, %loop-header178
  %243 = load <4 x float>* %color
  %244 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp182183 = fadd <4 x float> %243, %244
  store <4 x float> %assignment_tmp182183, <4 x float>* %assignment_tmp182
  %color184 = load <4 x float>* %assignment_tmp182
  store <4 x float> %color184, <4 x float>* %color
  %245 = load float addrspace(1)* @d7
  %246 = fcmp olt float %245, 1.000000e+00
  br i1 %246, label %then185, label %ifmerge188

then185:                                          ; preds = %ifmerge181
  %247 = load <4 x float>* %assignment_tmp182
  %248 = extractelement <4 x float> %247, i32 2
  %249 = fadd float %248, 1.000000e+00
  %250 = load <4 x float>* %color
  %color186 = insertelement <4 x float> %250, float %249, i32 2
  store <4 x float> %color186, <4 x float>* %color
  br label %loop-merge191

post-loopjump187:                                 ; No predecessors!
  br label %ifmerge188

ifmerge188:                                       ; preds = %post-loopjump187, %ifmerge181
  %251 = load <4 x float>* %color
  %BaseColor189 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %color190 = fadd <4 x float> %251, %BaseColor189
  store <4 x float> %color190, <4 x float>* %color
  br label %loop-header178

loop-merge191:                                    ; preds = %then185, %then179
  br label %loop-header192

loop-header192:                                   ; preds = %ifmerge214, %loop-merge191
  %252 = load float addrspace(1)* @d8
  %253 = fcmp olt float %252, 0.000000e+00
  br i1 %253, label %then193, label %ifmerge195

then193:                                          ; preds = %loop-header192
  br label %loop-merge215

post-loopjump194:                                 ; No predecessors!
  br label %ifmerge195

ifmerge195:                                       ; preds = %post-loopjump194, %loop-header192
  %254 = load <4 x float>* %color
  %255 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp196197 = fadd <4 x float> %254, %255
  store <4 x float> %assignment_tmp196197, <4 x float>* %assignment_tmp196
  %color198 = load <4 x float>* %assignment_tmp196
  store <4 x float> %color198, <4 x float>* %color
  %256 = load float addrspace(1)* @d8
  %257 = fcmp olt float %256, 1.000000e+00
  br i1 %257, label %then199, label %ifmerge207

then199:                                          ; preds = %ifmerge195
  %258 = load <4 x float>* %assignment_tmp196
  %259 = extractelement <4 x float> %258, i32 2
  %260 = fadd float %259, 1.000000e+00
  %261 = load <4 x float>* %color
  %color200 = insertelement <4 x float> %261, float %260, i32 2
  store <4 x float> %color200, <4 x float>* %color
  %262 = load float addrspace(1)* @d8
  %263 = fcmp olt float %262, 2.000000e+00
  br i1 %263, label %then201, label %else203

then201:                                          ; preds = %then199
  %264 = load <4 x float>* %color
  %265 = extractelement <4 x float> %264, i32 1
  %266 = fadd float %265, 1.000000e+00
  %267 = load <4 x float>* %color
  %color202 = insertelement <4 x float> %267, float %266, i32 1
  store <4 x float> %color202, <4 x float>* %color
  br label %ifmerge205

else203:                                          ; preds = %then199
  %268 = load <4 x float>* %color
  %269 = extractelement <4 x float> %268, i32 0
  %270 = fadd float %269, 1.000000e+00
  %271 = load <4 x float>* %color
  %color204 = insertelement <4 x float> %271, float %270, i32 0
  store <4 x float> %color204, <4 x float>* %color
  br label %ifmerge205

ifmerge205:                                       ; preds = %else203, %then201
  br label %loop-merge215

post-loopjump206:                                 ; No predecessors!
  br label %ifmerge207

ifmerge207:                                       ; preds = %post-loopjump206, %ifmerge195
  %272 = load <4 x float>* %color
  %BaseColor209 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %assignment_tmp208210 = fadd <4 x float> %272, %BaseColor209
  store <4 x float> %assignment_tmp208210, <4 x float>* %assignment_tmp208
  %color211 = load <4 x float>* %assignment_tmp208
  store <4 x float> %color211, <4 x float>* %color
  %273 = load <4 x float>* %assignment_tmp208
  %274 = extractelement <4 x float> %273, i32 2
  %275 = load float addrspace(1)* @d8
  %276 = fcmp oge float %274, %275
  br i1 %276, label %then212, label %ifmerge214

then212:                                          ; preds = %ifmerge207
  br label %loop-merge215

post-loopjump213:                                 ; No predecessors!
  br label %ifmerge214

ifmerge214:                                       ; preds = %post-loopjump213, %ifmerge207
  br label %loop-header192

loop-merge215:                                    ; preds = %then212, %ifmerge205, %then193
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %277 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %277)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@bigColor1_1 = external addrspace(1) constant <4 x float>
@d2 = external addrspace(1) constant float
@d3 = external addrspace(1) constant float
@bigColor1_2 = external addrspace(1) constant <4 x float>
@bigColor1_3 = external addrspace(1) constant <4 x float>
@d4 = external addrspace(1) constant float
@Count = external addrspace(1) constant i32
@bigColor2 = external addrspace(1) constant <4 x float>
@bigColor3 = external addrspace(1) constant <4 x float>
@bigColor4 = external addrspace(1) constant <4 x float>
@bigColor5 = external addrspace(1) constant <4 x float>
@d5 = external addrspace(1) constant float
@d6 = external addrspace(1) constant float
@bigColor6 = external addrspace(1) constant <4 x float>
@d7 = external addrspace(1) constant float
@bigColor7 = external addrspace(1) constant <4 x float>
@d8 = external addrspace(1) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %0 = load float addrspace(1)* @d
  %1 = load <4 x float> addrspace(1)* @bigColor
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %color.0 = phi <4 x float> [ %BaseColor, %entry ], [ %color5, %ifmerge ]
  %2 = extractelement <4 x float> %color.0, i32 0
  %3 = fcmp oge float %2, %0
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  %4 = load <4 x float> addrspace(1)* @bigColor1_1
  br label %loop-header6

ifmerge:                                          ; preds = %loop-header
  %color5 = fadd <4 x float> %color.0, %1
  br label %loop-header

loop-header6:                                     ; preds = %loop-header6.backedge, %then
  %color.1 = phi <4 x float> [ %color.0, %then ], [ %color.1.be, %loop-header6.backedge ]
  %5 = extractelement <4 x float> %color.1, i32 2
  %6 = fcmp oge float %5, %0
  br i1 %6, label %then7, label %ifmerge9

then7:                                            ; preds = %loop-header6
  br label %loop-header17

ifmerge9:                                         ; preds = %loop-header6
  %assignment_tmp10 = fadd <4 x float> %color.1, %4
  %7 = extractelement <4 x float> %assignment_tmp10, i32 3
  %8 = fcmp olt float %7, %0
  br i1 %8, label %then12, label %ifmerge14

then12:                                           ; preds = %ifmerge9
  br label %loop-header6.backedge

loop-header6.backedge:                            ; preds = %then12, %ifmerge14
  %color.1.be = phi <4 x float> [ %assignment_tmp10, %then12 ], [ %color15, %ifmerge14 ]
  br label %loop-header6

ifmerge14:                                        ; preds = %ifmerge9
  %color15 = fadd <4 x float> %assignment_tmp10, %4
  br label %loop-header6.backedge

loop-header17:                                    ; preds = %ifmerge20, %then7
  %color.2 = phi <4 x float> [ %color.1, %then7 ], [ %color21, %ifmerge20 ]
  %9 = extractelement <4 x float> %color.2, i32 0
  %10 = fcmp oge float %9, 4.200000e+01
  br i1 %10, label %then18, label %ifmerge20

then18:                                           ; preds = %loop-header17
  %11 = load float addrspace(1)* @d2
  %12 = load float addrspace(1)* @d3
  %13 = load <4 x float> addrspace(1)* @bigColor1_2
  br label %loop-header23

ifmerge20:                                        ; preds = %loop-header17
  %14 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color21 = fadd <4 x float> %color.2, %14
  br label %loop-header17

loop-header23:                                    ; preds = %ifmerge29, %then18
  %color.3 = phi <4 x float> [ %color.2, %then18 ], [ %color30, %ifmerge29 ]
  %15 = extractelement <4 x float> %color.3, i32 3
  %16 = fcmp olt float %15, %11
  br i1 %16, label %then24, label %else

then24:                                           ; preds = %loop-header23
  %17 = extractelement <4 x float> %color.3, i32 1
  %and_tmp25 = fcmp olt float %17, %12
  br label %ifmerge26

else:                                             ; preds = %loop-header23
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then24
  %and_tmp.0 = phi i1 [ %and_tmp25, %then24 ], [ false, %else ]
  %18 = xor i1 %and_tmp.0, true
  br i1 %18, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  %.pre218 = load <4 x float> addrspace(1)* @bigColor1_3
  %19 = load float addrspace(1)* @d3
  %20 = load float addrspace(1)* @d4
  br label %loop-header32

ifmerge29:                                        ; preds = %ifmerge26
  %color30 = fadd <4 x float> %color.3, %13
  br label %loop-header23

loop-header32:                                    ; preds = %ifmerge41, %then27
  %color.4 = phi <4 x float> [ %color.3, %then27 ], [ %color42, %ifmerge41 ]
  %21 = extractelement <4 x float> %color.4, i32 2
  %22 = fcmp oge float %21, %19
  br i1 %22, label %then33, label %ifmerge35

then33:                                           ; preds = %loop-header32
  br label %loop-merge43

ifmerge35:                                        ; preds = %loop-header32
  %assignment_tmp3637 = fadd <4 x float> %color.4, %.pre218
  %23 = extractelement <4 x float> %assignment_tmp3637, i32 1
  %24 = fcmp olt float %23, %20
  br i1 %24, label %then39, label %ifmerge41

then39:                                           ; preds = %ifmerge35
  br label %loop-merge43

ifmerge41:                                        ; preds = %ifmerge35
  %color42 = fadd <4 x float> %assignment_tmp3637, %.pre218
  br label %loop-header32

loop-merge43:                                     ; preds = %then39, %then33
  %color.5 = phi <4 x float> [ %color.4, %then33 ], [ %assignment_tmp3637, %then39 ]
  %25 = load i32 addrspace(1)* @Count
  %26 = load <4 x float> addrspace(1)* @bigColor2
  %tmp = icmp sgt i32 %25, 0
  %smax = select i1 %tmp, i32 %25, i32 0
  br label %loop-header44

loop-header44:                                    ; preds = %ifmerge47, %loop-merge43
  %indvar = phi i32 [ %indvar.next245, %ifmerge47 ], [ 0, %loop-merge43 ]
  %color.6 = phi <4 x float> [ %color.5, %loop-merge43 ], [ %color48, %ifmerge47 ]
  %exitcond246 = icmp eq i32 %indvar, %smax
  br i1 %exitcond246, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  %27 = load <4 x float> addrspace(1)* @bigColor3
  br label %loop-header51

ifmerge47:                                        ; preds = %loop-header44
  %color48 = fadd <4 x float> %color.6, %26
  %indvar.next245 = add i32 %indvar, 1
  br label %loop-header44

loop-header51:                                    ; preds = %ifmerge57, %then45
  %color.7 = phi <4 x float> [ %color.6, %then45 ], [ %assignment_tmp5253, %ifmerge57 ]
  %assignment_tmp5253 = fadd <4 x float> %color.7, %27
  %28 = extractelement <4 x float> %assignment_tmp5253, i32 0
  %29 = fcmp oge float %28, %11
  br i1 %29, label %then55, label %ifmerge57

then55:                                           ; preds = %loop-header51
  br label %loop-header59

ifmerge57:                                        ; preds = %loop-header51
  br label %loop-header51

loop-header59:                                    ; preds = %loop-header59, %then55
  %i60.0 = phi i32 [ 0, %then55 ], [ %33, %loop-header59 ]
  %color.8 = phi <4 x float> [ %assignment_tmp5253, %then55 ], [ %32, %loop-header59 ]
  %30 = extractelement <4 x float> %color.8, i32 2
  %31 = fadd float %30, %19
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.8, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %31, i32 -1, float 0.000000e+00, i32 -1)
  %33 = add i32 %i60.0, 1
  %exitcond = icmp eq i32 %33, 43
  br i1 %exitcond, label %loop-merge63, label %loop-header59

loop-merge63:                                     ; preds = %loop-header59
  br label %loop-header64

loop-header64:                                    ; preds = %ifmerge74, %loop-merge63
  %i65.0 = phi i32 [ 0, %loop-merge63 ], [ %42, %ifmerge74 ]
  %color.10 = phi <4 x float> [ %32, %loop-merge63 ], [ %color.9, %ifmerge74 ]
  %34 = extractelement <4 x float> %color.10, i32 2
  %35 = fcmp olt float %34, 2.000000e+01
  br i1 %35, label %then66, label %else68

then66:                                           ; preds = %loop-header64
  %36 = extractelement <4 x float> %color.10, i32 0
  %37 = fadd float %36, 1.000000e+00
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 1, float %37, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge70

else68:                                           ; preds = %loop-header64
  %39 = extractelement <4 x float> %color.10, i32 1
  %40 = fadd float %39, 1.000000e+00
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 2, float 0.000000e+00, i32 -1, float %40, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge70

ifmerge70:                                        ; preds = %else68, %then66
  %color.9 = phi <4 x float> [ %38, %then66 ], [ %41, %else68 ]
  br label %ifmerge74

ifmerge74:                                        ; preds = %ifmerge70
  %42 = add i32 %i65.0, 1
  %exitcond244 = icmp eq i32 %42, 101
  br i1 %exitcond244, label %loop-merge76, label %loop-header64

loop-merge76:                                     ; preds = %ifmerge74
  %43 = load float addrspace(1)* @d4
  br label %loop-header77

loop-header77:                                    ; preds = %loop-header77.backedge, %loop-merge76
  %color.11 = phi <4 x float> [ %color.9, %loop-merge76 ], [ %color.11.be, %loop-header77.backedge ]
  %i1.0 = phi i32 [ 0, %loop-merge76 ], [ %i1.0.be, %loop-header77.backedge ]
  %44 = icmp sge i32 %i1.0, 42
  br i1 %44, label %then78, label %ifmerge80

then78:                                           ; preds = %loop-header77
  %45 = load float addrspace(1)* @d4
  br label %loop-header89

ifmerge80:                                        ; preds = %loop-header77
  %46 = extractelement <4 x float> %color.11, i32 2
  %47 = fadd float %46, %19
  %48 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.11, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %47, i32 -1, float 0.000000e+00, i32 -1)
  %49 = extractelement <4 x float> %48, i32 0
  %50 = fcmp olt float %49, %43
  br i1 %50, label %then82, label %ifmerge85

then82:                                           ; preds = %ifmerge80
  %i183 = add i32 %i1.0, 1
  br label %loop-header77.backedge

loop-header77.backedge:                           ; preds = %then82, %ifmerge85
  %color.11.be = phi <4 x float> [ %48, %then82 ], [ %53, %ifmerge85 ]
  %i1.0.be = phi i32 [ %i183, %then82 ], [ %i187, %ifmerge85 ]
  br label %loop-header77

ifmerge85:                                        ; preds = %ifmerge80
  %51 = extractelement <4 x float> %48, i32 3
  %52 = fadd float %51, 1.000000e+00
  %53 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %48, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %52, i32 -1)
  %i187 = add i32 %i1.0, 1
  br label %loop-header77.backedge

loop-header89:                                    ; preds = %ifmerge94, %then78
  %lsr.iv.next = phi i32 [ %indvar.next, %ifmerge94 ], [ 0, %then78 ]
  %color.12 = phi <4 x float> [ %color.11, %then78 ], [ %61, %ifmerge94 ]
  %54 = extractelement <4 x float> %color.12, i32 2
  %55 = fadd float %54, %19
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %55, i32 -1, float 0.000000e+00, i32 -1)
  %57 = extractelement <4 x float> %56, i32 0
  %58 = fcmp olt float %57, %45
  br i1 %58, label %then92, label %ifmerge94

then92:                                           ; preds = %loop-header89
  br label %loop-merge97

ifmerge94:                                        ; preds = %loop-header89
  %59 = extractelement <4 x float> %56, i32 3
  %60 = fadd float %59, 1.000000e+00
  %61 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %56, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %60, i32 -1)
  %62 = icmp sge i32 %lsr.iv.next, 42
  %indvar.next = add i32 %lsr.iv.next, 1
  br i1 %62, label %loop-merge97.loopexit, label %loop-header89

loop-merge97.loopexit:                            ; preds = %ifmerge94
  br label %loop-merge97

loop-merge97:                                     ; preds = %loop-merge97.loopexit, %then92
  %color.13 = phi <4 x float> [ %56, %then92 ], [ %61, %loop-merge97.loopexit ]
  %63 = load <4 x float> addrspace(1)* @bigColor4
  br label %loop-header98.outer

loop-header98.outer:                              ; preds = %ifmerge112, %loop-merge97
  %color.14.ph = phi <4 x float> [ %color.13, %loop-merge97 ], [ %color.15, %ifmerge112 ]
  br label %loop-header98

loop-header98:                                    ; preds = %loop-header98.outer, %then102
  %color.14 = phi <4 x float> [ %assignment_tmp99100, %then102 ], [ %color.14.ph, %loop-header98.outer ]
  %assignment_tmp99100 = fadd <4 x float> %color.14, %63
  %64 = extractelement <4 x float> %assignment_tmp99100, i32 0
  %65 = fcmp olt float %64, %45
  br i1 %65, label %then102, label %ifmerge104

then102:                                          ; preds = %loop-header98
  br label %loop-header98

ifmerge104:                                       ; preds = %loop-header98
  %66 = extractelement <4 x float> %assignment_tmp99100, i32 1
  %67 = fcmp olt float %66, %45
  br i1 %67, label %then105, label %else107

then105:                                          ; preds = %ifmerge104
  %68 = fadd float %66, %45
  %69 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp99100, i32 2, float 0.000000e+00, i32 -1, float %68, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge109

else107:                                          ; preds = %ifmerge104
  %70 = fadd float %64, %45
  %71 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp99100, i32 1, float %70, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge109

ifmerge109:                                       ; preds = %else107, %then105
  %color.15 = phi <4 x float> [ %69, %then105 ], [ %71, %else107 ]
  %72 = extractelement <4 x float> %color.15, i32 2
  %73 = fcmp oge float %72, %45
  br i1 %73, label %then110, label %ifmerge112

then110:                                          ; preds = %ifmerge109
  br label %loop-header114.outer

loop-header114.outer:                             ; preds = %ifmerge132, %then110
  %color.16.ph = phi <4 x float> [ %color.15, %then110 ], [ %color.18, %ifmerge132 ]
  br label %loop-header114

ifmerge112:                                       ; preds = %ifmerge109
  br label %loop-header98.outer

loop-header114:                                   ; preds = %loop-header114.outer, %then120
  %color.16 = phi <4 x float> [ %83, %then120 ], [ %color.16.ph, %loop-header114.outer ]
  %assignment_tmp115116 = fadd <4 x float> %color.16, %63
  %74 = extractelement <4 x float> %assignment_tmp115116, i32 0
  %75 = fcmp olt float %74, %45
  br i1 %75, label %then118, label %ifmerge124.loopexit

then118:                                          ; preds = %loop-header114
  %76 = extractelement <4 x float> %assignment_tmp115116, i32 2
  %77 = fadd float %76, 2.000000e+00
  %78 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp115116, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %77, i32 -1, float 0.000000e+00, i32 -1)
  %79 = extractelement <4 x float> %78, i32 2
  %80 = fcmp olt float %79, %45
  br i1 %80, label %then120, label %ifmerge123

then120:                                          ; preds = %then118
  %81 = extractelement <4 x float> %78, i32 0
  %82 = fadd float %81, 1.000000e+00
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %78, i32 1, float %82, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header114

ifmerge123:                                       ; preds = %then118
  br label %ifmerge124

ifmerge124.loopexit:                              ; preds = %loop-header114
  br label %ifmerge124

ifmerge124:                                       ; preds = %ifmerge124.loopexit, %ifmerge123
  %color.17 = phi <4 x float> [ %78, %ifmerge123 ], [ %assignment_tmp115116, %ifmerge124.loopexit ]
  %84 = extractelement <4 x float> %color.17, i32 1
  %85 = fcmp olt float %84, %45
  br i1 %85, label %then125, label %else127

then125:                                          ; preds = %ifmerge124
  %86 = fadd float %84, %45
  %87 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.17, i32 2, float 0.000000e+00, i32 -1, float %86, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge129

else127:                                          ; preds = %ifmerge124
  %88 = extractelement <4 x float> %color.17, i32 0
  %89 = fadd float %88, %45
  %90 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.17, i32 1, float %89, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge129

ifmerge129:                                       ; preds = %else127, %then125
  %color.18 = phi <4 x float> [ %87, %then125 ], [ %90, %else127 ]
  %91 = extractelement <4 x float> %color.18, i32 2
  %92 = fcmp oge float %91, %45
  br i1 %92, label %then130, label %ifmerge132

then130:                                          ; preds = %ifmerge129
  %.pre = load float addrspace(1)* @d5
  %93 = load <4 x float> addrspace(1)* @bigColor5
  br label %loop-header134

ifmerge132:                                       ; preds = %ifmerge129
  br label %loop-header114.outer

loop-header134:                                   ; preds = %ifmerge143, %then130
  %color.19 = phi <4 x float> [ %color.18, %then130 ], [ %color.20, %ifmerge143 ]
  %assignment_tmp135136 = fadd <4 x float> %color.19, %93
  %94 = extractelement <4 x float> %assignment_tmp135136, i32 1
  %95 = fcmp olt float %94, %.pre
  br i1 %95, label %then138, label %ifmerge140

then138:                                          ; preds = %loop-header134
  %96 = fadd float %94, %.pre
  %97 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp135136, i32 2, float 0.000000e+00, i32 -1, float %96, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge140

ifmerge140:                                       ; preds = %then138, %loop-header134
  %color.20 = phi <4 x float> [ %97, %then138 ], [ %assignment_tmp135136, %loop-header134 ]
  %98 = extractelement <4 x float> %color.20, i32 0
  %99 = fcmp oge float %98, %.pre
  br i1 %99, label %then141, label %ifmerge143

then141:                                          ; preds = %ifmerge140
  %100 = load float addrspace(1)* @d6
  %101 = fcmp olt float %98, %100
  br i1 %101, label %then145, label %else152

ifmerge143:                                       ; preds = %ifmerge140
  br label %loop-header134

then145:                                          ; preds = %then141
  %102 = load <4 x float> addrspace(1)* @bigColor6
  br label %loop-header146

loop-header146:                                   ; preds = %ifmerge149, %then145
  %color.21 = phi <4 x float> [ %color.20, %then145 ], [ %color150, %ifmerge149 ]
  %103 = extractelement <4 x float> %color.21, i32 1
  %104 = fcmp oge float %103, %100
  br i1 %104, label %then147, label %ifmerge149

then147:                                          ; preds = %loop-header146
  br label %ifmerge159

ifmerge149:                                       ; preds = %loop-header146
  %color150 = fadd <4 x float> %color.21, %102
  br label %loop-header146

else152:                                          ; preds = %then141
  %105 = load <4 x float> addrspace(1)* @bigColor6
  %106 = extractelement <4 x float> %105, i32 2
  br label %loop-header153

loop-header153:                                   ; preds = %ifmerge156, %else152
  %color.23 = phi <4 x float> [ %color.20, %else152 ], [ %110, %ifmerge156 ]
  %107 = extractelement <4 x float> %color.23, i32 2
  %108 = fcmp oge float %107, %100
  br i1 %108, label %then154, label %ifmerge156

then154:                                          ; preds = %loop-header153
  br label %ifmerge159

ifmerge156:                                       ; preds = %loop-header153
  %109 = fadd float %107, %106
  %110 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.23, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %109, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header153

ifmerge159:                                       ; preds = %then154, %then147
  %color.22 = phi <4 x float> [ %color.21, %then147 ], [ %color.23, %then154 ]
  %111 = extractelement <4 x float> %color.22, i32 0
  %112 = fcmp olt float %111, %100
  br i1 %112, label %then160, label %else170

then160:                                          ; preds = %ifmerge159
  %113 = load <4 x float> addrspace(1)* @bigColor6
  %114 = load float addrspace(1)* @d7
  %115 = fcmp olt float %114, 1.000000e+00
  br label %loop-header161

loop-header161:                                   ; preds = %ifmerge168, %then160
  %color.24 = phi <4 x float> [ %color.22, %then160 ], [ %color165, %ifmerge168 ]
  %116 = extractelement <4 x float> %color.24, i32 1
  %117 = fcmp oge float %116, %100
  br i1 %117, label %then162, label %ifmerge164

then162:                                          ; preds = %loop-header161
  br label %loop-merge169

ifmerge164:                                       ; preds = %loop-header161
  %color165 = fadd <4 x float> %color.24, %113
  br i1 %115, label %then166, label %ifmerge168

then166:                                          ; preds = %ifmerge164
  br label %loop-merge169

ifmerge168:                                       ; preds = %ifmerge164
  br label %loop-header161

loop-merge169:                                    ; preds = %then166, %then162
  %color.25 = phi <4 x float> [ %color.24, %then162 ], [ %color165, %then166 ]
  br label %ifmerge177

else170:                                          ; preds = %ifmerge159
  %118 = load <4 x float> addrspace(1)* @bigColor6
  %119 = extractelement <4 x float> %118, i32 2
  br label %loop-header171

loop-header171:                                   ; preds = %ifmerge174, %else170
  %color.27 = phi <4 x float> [ %color.22, %else170 ], [ %123, %ifmerge174 ]
  %120 = extractelement <4 x float> %color.27, i32 2
  %121 = fcmp oge float %120, %100
  br i1 %121, label %then172, label %ifmerge174

then172:                                          ; preds = %loop-header171
  br label %ifmerge177

ifmerge174:                                       ; preds = %loop-header171
  %122 = fadd float %120, %119
  %123 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.27, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %122, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header171

ifmerge177:                                       ; preds = %then172, %loop-merge169
  %color.26 = phi <4 x float> [ %color.25, %loop-merge169 ], [ %color.27, %then172 ]
  %.pre216 = load float addrspace(1)* @d7
  %124 = fcmp olt float %.pre216, 0.000000e+00
  %125 = load <4 x float> addrspace(1)* @bigColor7
  %126 = fcmp olt float %.pre216, 1.000000e+00
  br label %loop-header178

loop-header178:                                   ; preds = %ifmerge188, %ifmerge177
  %color.28 = phi <4 x float> [ %color.26, %ifmerge177 ], [ %color190, %ifmerge188 ]
  br i1 %124, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge191

ifmerge181:                                       ; preds = %loop-header178
  %assignment_tmp182183 = fadd <4 x float> %color.28, %125
  br i1 %126, label %then185, label %ifmerge188

then185:                                          ; preds = %ifmerge181
  %127 = extractelement <4 x float> %assignment_tmp182183, i32 2
  %128 = fadd float %127, 1.000000e+00
  %129 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp182183, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %128, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-merge191

ifmerge188:                                       ; preds = %ifmerge181
  %BaseColor189 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %color190 = fadd <4 x float> %assignment_tmp182183, %BaseColor189
  br label %loop-header178

loop-merge191:                                    ; preds = %then185, %then179
  %color.29 = phi <4 x float> [ %color.28, %then179 ], [ %129, %then185 ]
  %.pre217 = load float addrspace(1)* @d8
  %130 = fcmp olt float %.pre217, 0.000000e+00
  %131 = load <4 x float> addrspace(1)* @bigColor7
  %132 = fcmp olt float %.pre217, 1.000000e+00
  br label %loop-header192

loop-header192:                                   ; preds = %ifmerge214, %loop-merge191
  %color.30 = phi <4 x float> [ %color.29, %loop-merge191 ], [ %assignment_tmp208210, %ifmerge214 ]
  br i1 %130, label %then193, label %ifmerge195

then193:                                          ; preds = %loop-header192
  br label %loop-merge215

ifmerge195:                                       ; preds = %loop-header192
  %assignment_tmp196197 = fadd <4 x float> %color.30, %131
  br i1 %132, label %then199, label %ifmerge207

then199:                                          ; preds = %ifmerge195
  %133 = extractelement <4 x float> %assignment_tmp196197, i32 2
  %134 = fadd float %133, 1.000000e+00
  %135 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp196197, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %134, i32 -1, float 0.000000e+00, i32 -1)
  %136 = fcmp olt float %.pre217, 2.000000e+00
  br i1 %136, label %then201, label %else203

then201:                                          ; preds = %then199
  %137 = extractelement <4 x float> %135, i32 1
  %138 = fadd float %137, 1.000000e+00
  %139 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %135, i32 2, float 0.000000e+00, i32 -1, float %138, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge205

else203:                                          ; preds = %then199
  %140 = extractelement <4 x float> %135, i32 0
  %141 = fadd float %140, 1.000000e+00
  %142 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %135, i32 1, float %141, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge205

ifmerge205:                                       ; preds = %else203, %then201
  %color.32 = phi <4 x float> [ %139, %then201 ], [ %142, %else203 ]
  br label %loop-merge215

ifmerge207:                                       ; preds = %ifmerge195
  %BaseColor209 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %assignment_tmp208210 = fadd <4 x float> %assignment_tmp196197, %BaseColor209
  %143 = extractelement <4 x float> %assignment_tmp208210, i32 2
  %144 = fcmp oge float %143, %.pre217
  br i1 %144, label %then212, label %ifmerge214

then212:                                          ; preds = %ifmerge207
  br label %loop-merge215

ifmerge214:                                       ; preds = %ifmerge207
  br label %loop-header192

loop-merge215:                                    ; preds = %then212, %ifmerge205, %then193
  %color.31 = phi <4 x float> [ %color.30, %then193 ], [ %color.32, %ifmerge205 ], [ %assignment_tmp208210, %then212 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %color.31)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone


Loop info:
Loop at depth 1 containing: %loop-header<header><exiting>,%ifmerge<latch>
Loop at depth 1 containing: %loop-header6<header><exiting>,%loop-header6.backedge<latch>,%ifmerge14,%ifmerge9,%then12
Loop at depth 1 containing: %loop-header17<header><exiting>,%ifmerge20<latch>
Loop at depth 1 containing: %loop-header23<header>,%ifmerge29<latch>,%ifmerge26<exiting>,%then24,%else
Loop at depth 1 containing: %loop-header32<header><exiting>,%ifmerge41<latch>,%ifmerge35<exiting>
Loop at depth 1 containing: %loop-header44<header><exiting>,%ifmerge47<latch>
Loop at depth 1 containing: %loop-header51<header><exiting>,%ifmerge57<latch>
Loop at depth 1 containing: %loop-header59<header><latch><exiting>
Loop at depth 1 containing: %loop-header64<header>,%ifmerge74<latch><exiting>,%ifmerge70,%then66,%else68
Loop at depth 1 containing: %loop-header77<header><exiting>,%loop-header77.backedge<latch>,%ifmerge85,%ifmerge80,%then82
Loop at depth 1 containing: %loop-header89<header><exiting>,%ifmerge94<latch><exiting>
Loop at depth 1 containing: %loop-header98.outer<header>,%ifmerge112<latch>,%ifmerge109<exiting>,%then105,%ifmerge104,%loop-header98,%then102,%else107
    Loop at depth 2 containing: %loop-header98<header><exiting>,%then102<latch>
Loop at depth 1 containing: %loop-header114.outer<header>,%ifmerge132<latch>,%ifmerge129<exiting>,%then125,%ifmerge124,%ifmerge123,%then118,%loop-header114,%then120,%ifmerge124.loopexit,%else127
    Loop at depth 2 containing: %loop-header114<header><exiting>,%then120<latch>,%then118<exiting>
Loop at depth 1 containing: %loop-header134<header>,%ifmerge143<latch>,%ifmerge140<exiting>,%then138
Loop at depth 1 containing: %loop-header146<header><exiting>,%ifmerge149<latch>
Loop at depth 1 containing: %loop-header161<header><exiting>,%ifmerge168<latch>,%ifmerge164<exiting>
Loop at depth 1 containing: %loop-header178<header><exiting>,%ifmerge188<latch>,%ifmerge181<exiting>
Loop at depth 1 containing: %loop-header192<header><exiting>,%ifmerge214<latch>,%ifmerge207<exiting>,%ifmerge195<exiting>
Loop at depth 1 containing: %loop-header171<header><exiting>,%ifmerge174<latch>
Loop at depth 1 containing: %loop-header153<header><exiting>,%ifmerge156<latch>

***Unsupported functionality: Opcode in Bottom IR: 46

inductive variable:  %i60.0 = phi i32 [ 0, %then55 ], [ %33, %loop-header59 ]
  trip count:        43
  increment:         %33 = add i32 %i60.0, 1
  exit condition:    %exitcond = icmp eq i32 %33, 43

inductive variable:  %i65.0 = phi i32 [ 0, %loop-merge63 ], [ %42, %ifmerge74 ]
  trip count:        101
  increment:         %42 = add i32 %i65.0, 1
  exit condition:    %exitcond244 = icmp eq i32 %42, 101
compiling loops.frag...
uniform vec4 bigColor ; 
uniform vec4 bigColor1_1 ; 
uniform vec4 bigColor1_2 ; 
uniform vec4 bigColor1_3 ; 
uniform vec4 bigColor2 ; 
uniform vec4 bigColor3 ; 
uniform vec4 bigColor4 ; 
uniform vec4 bigColor5 ; 
uniform vec4 bigColor6 ; 
uniform vec4 bigColor7 ; 
uniform vec4 bigColor8 ; 
varying vec4 BaseColor ; 
uniform float d ; 
uniform float d2 ; 
uniform float d3 ; 
uniform float d4 ; 
uniform float d5 ; 
uniform float d6 ; 
uniform float d7 ; 
uniform float d8 ; 
uniform float d9 ; 
uniform float d10 ; 
uniform float d11 ; 
uniform int Count ; 
void  main (){
vec4 color = BaseColor ; while ( color . x < d ) {
color += bigColor ; }
while ( color . z < d ) {
color += bigColor1_1 ; if ( color . w < d ) continue; color += bigColor1_1 ; }
while ( color . x < 42.000000 ) {
++ color ; }
while ( color . w < d2 && color . y < d3 ) {
color += bigColor1_2 ; }
while ( color . z < d3 ) {
color += bigColor1_3 ; if ( color . y < d4 ) break; color += bigColor1_3 ; }
for( int i = 0 ; ; i < Count ; ++ i ) {
color += bigColor2 ; }
do {
color += bigColor3 ; }
while ( color . x < d2 ); for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; }
for( int i = 0 ; ; i < 100 ; ++ i ) {
if ( color . z < 20.000000 ) color . x ++ ; else color . y ++ ; if ( color . w < 20.000000 ) if ( color . z > color . y ) 0 ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) continue; ++ color . w ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) break; ++ color . w ; }
do {
color += bigColor4 ; if ( color . x < d4 ) continue; if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor4 ; if ( color . x < d4 ) {
color . z += 2.000000 ; if ( color . z < d4 ) {
color . x ++ ; continue; }
}
if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor5 ; if ( color . y < d5 ) color . y += d5 ; }
while ( color . x < d5 ); if ( color . x < d6 ) {
while ( color . y < d6 ) color += bigColor6 ; }
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
if ( color . x < d6 ) {
while ( color . y < d6 ) {
color += bigColor6 ; if ( d7 < 1.000000 ) break; }
}
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
do {
if ( d7 < 0.000000 ) break; color += bigColor7 ; if ( d7 < 1.000000 ) {
color . z ++ ; break; }
color += BaseColor ; }
while ( true ); do {
if ( d8 < 0.000000 ) break; color += bigColor7 ; if ( d8 < 1.000000 ) {
color . z ++ ; if ( d8 < 2.000000 ) {
color . y ++ ; }
else {
color . x ++ ; }
break; }
color += BaseColor ; }
while ( color . z < d8 ); gl_FragColor = color ; }



(
(declare (uniform ) int Count)
(declare (uniform ) float d8)
(declare (uniform ) float d7)
(declare (uniform ) float d6)
(declare (uniform ) float d5)
(declare (uniform ) float d4)
(declare (uniform ) float d3)
(declare (uniform ) float d2)
(declare (uniform ) float d)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor7)
(declare (uniform ) vec4 bigColor6)
(declare (uniform ) vec4 bigColor5)
(declare (uniform ) vec4 bigColor4)
(declare (uniform ) vec4 bigColor3)
(declare (uniform ) vec4 bigColor2)
(declare (uniform ) vec4 bigColor1_3)
(declare (uniform ) vec4 bigColor1_2)
(declare (uniform ) vec4 bigColor1_1)
(declare (uniform ) vec4 bigColor)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_1) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz w (var_ref assignment_tmp) )(var_ref d) ) (
          continue
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_1) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (42.000000)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) bool and_tmp)
        (if (expression bool < (swiz w (var_ref color) )(var_ref d2) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool < (swiz y (var_ref color) )(var_ref d3) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (if (expression bool ! (var_ref and_tmp) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor1_2) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d3) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_3) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (var_ref Count) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor2) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d2) ) (
          break
        )
        ())

      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (100)) ) ((constant int (1)) ) (
        (if (expression bool < (swiz z (var_ref color) )(constant float (20.000000)) ) (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        ))

        (if (expression bool < (swiz w (var_ref color) )(constant float (20.000000)) ) (
          (if (expression bool > (swiz z (var_ref color) )(swiz y (var_ref color) )) (
          )
          ())

        )
        ())

        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (constant int (42)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
          continue
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          continue
        )
        ())

        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (2.000000)) ) ) 
          (if (expression bool < (swiz z (var_ref color) )(var_ref d4) ) (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
            continue
          )
          ())

        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor5) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d5) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d5) ) ) 
        )
        ())

        (if (expression bool >= (swiz x (var_ref color) )(var_ref d5) ) (
          break
        )
        ())

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
          (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
            break
          )
          ())

        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (loop () () () () (
        (if (expression bool < (var_ref d7) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool < (var_ref d8) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d8) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          (if (expression bool < (var_ref d8) (constant float (2.000000)) ) (
            (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          break
        )
        ())

      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref color) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
in vec4 BaseColor;
const float const69 = 42;
const float const71 = 1;
const bool const75 = false;
const int const82 = 0;
const int const87 = 1;
const float const93 = 20;
const int const99 = 42;
const float const125 = 2;
const float const153 = 0;
in vec4 BaseColor189;
in vec4 BaseColor209;

void main()
{
    vec4 color_0;
    vec4 color_1;
    vec4 color_1_be;
    vec4 color_2;
    vec4 color_3;
    bool and_tmp_0;
    vec4 color_4;
    vec4 color_5;
    int indvar;
    vec4 color_6;
    vec4 color_7;
    int temp32;
    vec4 color_8;
    int temp34;
    vec4 color_10;
    vec4 color_9;
    vec4 color_11;
    int temp38;
    vec4 color_11_be;
    int temp40;
    int lsr_iv_next;
    vec4 color_12;
    vec4 color_13;
    vec4 color_14_ph;
    vec4 color_14;
    vec4 color_15;
    vec4 color_16_ph;
    vec4 color_16;
    vec4 color_17;
    vec4 color_18;
    vec4 color_19;
    vec4 color_20;
    vec4 color_21;
    vec4 color_23;
    vec4 color_22;
    vec4 color_24;
    vec4 color_25;
    vec4 color_27;
    vec4 color_26;
    vec4 color_28;
    vec4 color_29;
    vec4 color_30;
    vec4 color_32;
    vec4 color_31;
    color_0 = BaseColor;
    while (! (color_0.x >= d)){
        vec4 color5 = color_0 + bigColor;
        color_0 = color5;
    }
    
    color_1 = color_0;
    while (! (color_1.z >= d)){
        vec4 assignment_tmp10 = color_1 + bigColor1_1;
        bool temp67 = assignment_tmp10.w < d;
        if (temp67) {
            color_1_be = assignment_tmp10;
            color_1 = color_1_be;
            continue;
        }
        else {
            vec4 color15 = assignment_tmp10 + bigColor1_1;
            color_1_be = color15;
            color_1 = color_1_be;
            continue;
        }
        
        color_1 = color_1_be;
        continue;
    }
    
    color_2 = color_1;
    while (! (color_2.x >= const69)){
        vec4 temp70 = vec4(const71);
        vec4 color21 = color_2 + temp70;
        color_2 = color21;
    }
    
    color_3 = color_2;
    while (true) {
        bool temp73 = color_3.w < d2;
        if (temp73) {
            bool and_tmp25 = color_3.y < d3;
            and_tmp_0 = and_tmp25;
        }
        else {
            and_tmp_0 = const75;
        }
        
        bool temp76 = !(and_tmp_0);
        if (temp76) {
            break;
        }
        
        vec4 color30 = color_3 + bigColor1_2;
        color_3 = color30;
    }
    
    color_4 = color_3;
    while (! (color_4.z >= d3)){
        vec4 assignment_tmp3637 = color_4 + bigColor1_3;
        bool temp79 = assignment_tmp3637.y < d4;
        if (temp79) {
            color_5 = assignment_tmp3637;
            break;
        }
        
        vec4 color42 = assignment_tmp3637 + bigColor1_3;
        color_4 = color42;
        color_5 = color_4;
    }
    
    bool tmp = Count > const82;
    indvar = const82;
    color_6 = color_5;
    while (true) {
        bool exitcond246 = indvar == int smax;
        if (exitcond246) {
            break;
        }
        
        vec4 color48 = color_6 + bigColor2;
        int indvar_next245 = indvar + const87;
        indvar = indvar_next245;
        color_6 = color48;
    }
    
    color_7 = color_6;
    while (true) {
        vec4 assignment_tmp5253 = color_7 + bigColor3;
        bool temp89 = assignment_tmp5253.x >= d2;
        if (temp89) {
            break;
        }
        
        color_7 = assignment_tmp5253;
    }
    
    temp32 = const82;
    color_8 = assignment_tmp5253;
    for (temp32 = 0; temp32 >= 43; ++temp32) {
        float temp90 = color_8.z + d3;
        vec4 temp91 = color_8;
        temp91.z = temp90.x;
        color_8 = temp91;
    }
    
    temp34 = const82;
    color_10 = temp91;
    for (temp34 = 0; temp34 >= 101; ++temp34) {
        bool temp92 = color_10.z < const93;
        if (temp92) {
            float temp94 = color_10.x + const71;
            vec4 temp95 = color_10;
            temp95.x = temp94.x;
            color_9 = temp95;
        }
        else {
            float temp96 = color_10.y + const71;
            vec4 temp97 = color_10;
            temp97.y = temp96.x;
            color_9 = temp97;
        }
        
        color_10 = color_9;
    }
    
    color_11 = color_9;
    temp38 = const82;
    while (true) {
        bool temp98 = temp38 >= const99;
        if (temp98) {
            break;
        }
        
        float temp100 = color_11.z + d3;
        vec4 temp101 = color_11;
        temp101.z = temp100.x;
        bool temp102 = temp101.x < d4;
        if (temp102) {
            int temp103 = temp38 + const87;
            color_11_be = temp101;
            temp40 = temp103;
            color_11 = color_11_be;
            temp38 = temp40;
            continue;
        }
        else {
            float temp104 = temp101.w + const71;
            vec4 temp105 = temp101;
            temp105.w = temp104.x;
            int temp106 = temp38 + const87;
            color_11_be = temp105;
            temp40 = temp106;
            color_11 = color_11_be;
            temp38 = temp40;
            continue;
        }
        
        color_11 = color_11_be;
        temp38 = temp40;
        continue;
    }
    
    lsr_iv_next = const82;
    color_12 = color_11;
    while (true) {
        float temp107 = color_12.z + d3;
        vec4 temp108 = color_12;
        temp108.z = temp107.x;
        bool temp109 = temp108.x < d4;
        if (temp109) {
            color_13 = temp108;
            break;
        }
        
        float temp110 = temp108.w + const71;
        vec4 temp111 = temp108;
        temp111.w = temp110.x;
        bool temp112 = lsr_iv_next >= const99;
        int indvar_next = lsr_iv_next + const87;
        if (temp112) {
            color_13 = temp111;
            break;
        }
        
        lsr_iv_next = indvar_next;
        color_12 = temp111;
    }
    
    color_14_ph = color_13;
    while (true) {
        while (true) {
            vec4 assignment_tmp99100 = color_14 + bigColor4;
            bool temp115 = assignment_tmp99100.x < d4;
            if (! temp115) {
                break;
            }
            
            color_14 = assignment_tmp99100;
        }
        
        bool temp116 = assignment_tmp99100.y < d4;
        if (temp116) {
            float temp117 = assignment_tmp99100.y + d4;
            vec4 temp118 = assignment_tmp99100;
            temp118.y = temp117.x;
            color_15 = temp118;
        }
        else {
            float temp119 = assignment_tmp99100.x + d4;
            vec4 temp120 = assignment_tmp99100;
            temp120.x = temp119.x;
            color_15 = temp120;
        }
        
        bool temp121 = color_15.z >= d4;
        if (temp121) {
            break;
        }
        
        color_14_ph = color_15;
    }
    
    color_16_ph = color_15;
    while (true) {
        while (true) {
            vec4 assignment_tmp115116 = color_16 + bigColor4;
            bool temp123 = assignment_tmp115116.x < d4;
            if (! temp123) {
                color_17 = assignment_tmp115116;
                break;
            }
            
            float temp124 = assignment_tmp115116.z + const125;
            vec4 temp126 = assignment_tmp115116;
            temp126.z = temp124.x;
            bool temp127 = temp126.z < d4;
            if (! temp127) {
                color_17 = temp126;
                break;
            }
            
            float temp128 = temp126.x + const71;
            vec4 temp129 = temp126;
            temp129.x = temp128.x;
            color_16 = temp129;
        }
        
        bool temp130 = color_17.y < d4;
        if (temp130) {
            float temp131 = color_17.y + d4;
            vec4 temp132 = color_17;
            temp132.y = temp131.x;
            color_18 = temp132;
        }
        else {
            float temp133 = color_17.x + d4;
            vec4 temp134 = color_17;
            temp134.x = temp133.x;
            color_18 = temp134;
        }
        
        bool temp135 = color_18.z >= d4;
        if (temp135) {
            break;
        }
        
        color_16_ph = color_18;
    }
    
    color_19 = color_18;
    while (true) {
        vec4 assignment_tmp135136 = color_19 + bigColor5;
        bool temp137 = assignment_tmp135136.y < d5;
        color_20 = assignment_tmp135136;
        if (temp137) {
            float temp138 = assignment_tmp135136.y + d5;
            vec4 temp139 = assignment_tmp135136;
            temp139.y = temp138.x;
            color_20 = temp139;
        }
        
        bool temp140 = color_20.x >= d5;
        if (temp140) {
            break;
        }
        
        color_19 = color_20;
    }
    
    bool temp141 = color_20.x < d6;
    if (temp141) {
        color_21 = color_20;
        while (! (color_21.y >= d6)){
            vec4 color150 = color_21 + bigColor6;
            color_21 = color150;
        }
        
        color_22 = color_21;
    }
    else {
        color_23 = color_20;
        while (! (color_23.z >= d6)){
            float temp143 = float temp144 + bigColor6.z;
            vec4 temp145 = color_23;
            temp145.z = temp143.x;
            color_23 = temp145;
        }
        
        color_22 = color_23;
    }
    
    bool temp146 = color_22.x < d6;
    if (temp146) {
        bool temp147 = d7 < const71;
        color_24 = color_22;
        while (! (color_24.y >= d6)){
            vec4 color165 = color_24 + bigColor6;
            if (temp147) {
                color_25 = color165;
                break;
            }
            
            color_24 = color165;
            color_25 = color_24;
        }
        
        color_26 = color_25;
    }
    else {
        color_27 = color_22;
        while (! (color_27.z >= d6)){
            float temp149 = float temp150 + bigColor6.z;
            vec4 temp151 = color_27;
            temp151.z = temp149.x;
            color_27 = temp151;
        }
        
        color_26 = color_27;
    }
    
    bool temp152 = d7 < const153;
    bool temp154 = d7 < const71;
    color_28 = color_26;
    while (true) {
        if (temp152) {
            color_29 = color_28;
            break;
        }
        
        vec4 assignment_tmp182183 = color_28 + bigColor7;
        if (temp154) {
            float temp156 = assignment_tmp182183.z + const71;
            vec4 temp157 = assignment_tmp182183;
            temp157.z = temp156.x;
            color_29 = temp157;
            break;
        }
        
        vec4 color190 = assignment_tmp182183 + BaseColor189;
        color_28 = color190;
    }
    
    bool temp159 = d8 < const153;
    bool temp160 = d8 < const71;
    color_30 = color_29;
    while (true) {
        if (temp159) {
            color_31 = color_30;
            break;
        }
        
        vec4 assignment_tmp196197 = color_30 + bigColor7;
        if (temp160) {
            float temp162 = assignment_tmp196197.z + const71;
            vec4 temp163 = assignment_tmp196197;
            temp163.z = temp162.x;
            bool temp164 = d8 < const125;
            if (temp164) {
                float temp165 = temp163.y + const71;
                vec4 temp166 = temp163;
                temp166.y = temp165.x;
                color_32 = temp166;
            }
            else {
                float temp167 = temp163.x + const71;
                vec4 temp168 = temp163;
                temp168.x = temp167.x;
                color_32 = temp168;
            }
            
            color_31 = color_32;
            break;
        }
        
        vec4 assignment_tmp208210 = assignment_tmp196197 + BaseColor209;
        bool temp170 = assignment_tmp208210.z >= d8;
        if (temp170) {
            color_31 = assignment_tmp208210;
            break;
        }
        
        color_30 = assignment_tmp208210;
    }
    
    gl_FragColor = color_31;
    
}
