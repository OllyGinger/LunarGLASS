
Top IR:
; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@bigColor1_1 = external addrspace(1) constant <4 x float>
@d2 = external addrspace(1) constant float
@d3 = external addrspace(1) constant float
@bigColor1_2 = external addrspace(1) constant <4 x float>
@bigColor1_3 = external addrspace(1) constant <4 x float>
@d4 = external addrspace(1) constant float
@Count = external addrspace(1) constant i32
@bigColor2 = external addrspace(1) constant <4 x float>
@bigColor3 = external addrspace(1) constant <4 x float>
@bigColor4 = external addrspace(1) constant <4 x float>
@bigColor5 = external addrspace(1) constant <4 x float>
@d5 = external addrspace(1) constant float
@d6 = external addrspace(1) constant float
@bigColor6 = external addrspace(1) constant <4 x float>
@d7 = external addrspace(1) constant float
@bigColor7 = external addrspace(1) constant <4 x float>
@d8 = external addrspace(1) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %assignment_tmp208 = alloca <4 x float>
  %assignment_tmp196 = alloca <4 x float>
  %assignment_tmp182 = alloca <4 x float>
  %assignment_tmp135 = alloca <4 x float>
  %assignment_tmp115 = alloca <4 x float>
  %assignment_tmp99 = alloca <4 x float>
  %i89 = alloca i32
  %i64 = alloca i32
  %i59 = alloca i32
  %assignment_tmp52 = alloca <4 x float>
  %assignment_tmp36 = alloca <4 x float>
  %and_tmp = alloca i1
  %assignment_tmp = alloca <4 x float>
  %color = alloca <4 x float>
  %i4 = alloca i32
  %i3 = alloca i32
  %i2 = alloca i32
  %i1 = alloca i32
  %i = alloca i32
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = load float addrspace(1)* @d
  %3 = fcmp oge float %1, %2
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loopjump:                                    ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %post-loopjump, %loop-header
  %4 = load <4 x float>* %color
  %5 = load <4 x float> addrspace(1)* @bigColor
  %color5 = fadd <4 x float> %4, %5
  store <4 x float> %color5, <4 x float>* %color
  br label %loop-header

loop-merge:                                       ; preds = %then
  br label %loop-header6

loop-header6:                                     ; preds = %ifmerge14, %then12, %loop-merge
  %6 = load <4 x float>* %color
  %7 = extractelement <4 x float> %6, i32 2
  %8 = load float addrspace(1)* @d
  %9 = fcmp oge float %7, %8
  br i1 %9, label %then7, label %ifmerge9

then7:                                            ; preds = %loop-header6
  br label %loop-merge16

post-loopjump8:                                   ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %post-loopjump8, %loop-header6
  %10 = load <4 x float>* %color
  %11 = load <4 x float> addrspace(1)* @bigColor1_1
  %assignment_tmp10 = fadd <4 x float> %10, %11
  store <4 x float> %assignment_tmp10, <4 x float>* %assignment_tmp
  %color11 = load <4 x float>* %assignment_tmp
  store <4 x float> %color11, <4 x float>* %color
  %12 = load <4 x float>* %assignment_tmp
  %13 = extractelement <4 x float> %12, i32 3
  %14 = load float addrspace(1)* @d
  %15 = fcmp olt float %13, %14
  br i1 %15, label %then12, label %ifmerge14

then12:                                           ; preds = %ifmerge9
  br label %loop-header6

post-loopjump13:                                  ; No predecessors!
  br label %ifmerge14

ifmerge14:                                        ; preds = %post-loopjump13, %ifmerge9
  %16 = load <4 x float>* %assignment_tmp
  %17 = load <4 x float> addrspace(1)* @bigColor1_1
  %color15 = fadd <4 x float> %16, %17
  store <4 x float> %color15, <4 x float>* %color
  br label %loop-header6

loop-merge16:                                     ; preds = %then7
  br label %loop-header17

loop-header17:                                    ; preds = %ifmerge20, %loop-merge16
  %18 = load <4 x float>* %color
  %19 = extractelement <4 x float> %18, i32 0
  %20 = fcmp oge float %19, 4.200000e+01
  br i1 %20, label %then18, label %ifmerge20

then18:                                           ; preds = %loop-header17
  br label %loop-merge22

post-loopjump19:                                  ; No predecessors!
  br label %ifmerge20

ifmerge20:                                        ; preds = %post-loopjump19, %loop-header17
  %21 = load <4 x float>* %color
  %22 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color21 = fadd <4 x float> %21, %22
  store <4 x float> %color21, <4 x float>* %color
  br label %loop-header17

loop-merge22:                                     ; preds = %then18
  br label %loop-header23

loop-header23:                                    ; preds = %ifmerge29, %loop-merge22
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(1)* @d2
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then24, label %else

then24:                                           ; preds = %loop-header23
  %27 = load <4 x float>* %color
  %28 = extractelement <4 x float> %27, i32 1
  %29 = load float addrspace(1)* @d3
  %and_tmp25 = fcmp olt float %28, %29
  store i1 %and_tmp25, i1* %and_tmp
  br label %ifmerge26

else:                                             ; preds = %loop-header23
  store i1 false, i1* %and_tmp
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then24
  %30 = load i1* %and_tmp
  %31 = xor i1 %30, true
  br i1 %31, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  br label %loop-merge31

post-loopjump28:                                  ; No predecessors!
  br label %ifmerge29

ifmerge29:                                        ; preds = %post-loopjump28, %ifmerge26
  %32 = load <4 x float>* %color
  %33 = load <4 x float> addrspace(1)* @bigColor1_2
  %color30 = fadd <4 x float> %32, %33
  store <4 x float> %color30, <4 x float>* %color
  br label %loop-header23

loop-merge31:                                     ; preds = %then27
  br label %loop-header32

loop-header32:                                    ; preds = %ifmerge41, %loop-merge31
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 2
  %36 = load float addrspace(1)* @d3
  %37 = fcmp oge float %35, %36
  br i1 %37, label %then33, label %ifmerge35

then33:                                           ; preds = %loop-header32
  br label %loop-merge43

post-loopjump34:                                  ; No predecessors!
  br label %ifmerge35

ifmerge35:                                        ; preds = %post-loopjump34, %loop-header32
  %38 = load <4 x float>* %color
  %39 = load <4 x float> addrspace(1)* @bigColor1_3
  %assignment_tmp3637 = fadd <4 x float> %38, %39
  store <4 x float> %assignment_tmp3637, <4 x float>* %assignment_tmp36
  %color38 = load <4 x float>* %assignment_tmp36
  store <4 x float> %color38, <4 x float>* %color
  %40 = load <4 x float>* %assignment_tmp36
  %41 = extractelement <4 x float> %40, i32 1
  %42 = load float addrspace(1)* @d4
  %43 = fcmp olt float %41, %42
  br i1 %43, label %then39, label %ifmerge41

then39:                                           ; preds = %ifmerge35
  br label %loop-merge43

post-loopjump40:                                  ; No predecessors!
  br label %ifmerge41

ifmerge41:                                        ; preds = %post-loopjump40, %ifmerge35
  %44 = load <4 x float>* %assignment_tmp36
  %45 = load <4 x float> addrspace(1)* @bigColor1_3
  %color42 = fadd <4 x float> %44, %45
  store <4 x float> %color42, <4 x float>* %color
  br label %loop-header32

loop-merge43:                                     ; preds = %then39, %then33
  store i32 0, i32* %i4
  br label %loop-header44

loop-header44:                                    ; preds = %ifmerge47, %loop-merge43
  %46 = load i32* %i4
  %47 = load i32 addrspace(1)* @Count
  %48 = icmp sge i32 %46, %47
  br i1 %48, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge50

post-loopjump46:                                  ; No predecessors!
  br label %ifmerge47

ifmerge47:                                        ; preds = %post-loopjump46, %loop-header44
  %49 = load <4 x float>* %color
  %50 = load <4 x float> addrspace(1)* @bigColor2
  %color48 = fadd <4 x float> %49, %50
  store <4 x float> %color48, <4 x float>* %color
  %51 = load i32* %i4
  %i449 = add i32 %51, 1
  store i32 %i449, i32* %i4
  br label %loop-header44

loop-merge50:                                     ; preds = %then45
  br label %loop-header51

loop-header51:                                    ; preds = %ifmerge57, %loop-merge50
  %52 = load <4 x float>* %color
  %53 = load <4 x float> addrspace(1)* @bigColor3
  %assignment_tmp5253 = fadd <4 x float> %52, %53
  store <4 x float> %assignment_tmp5253, <4 x float>* %assignment_tmp52
  %color54 = load <4 x float>* %assignment_tmp52
  store <4 x float> %color54, <4 x float>* %color
  %54 = load <4 x float>* %assignment_tmp52
  %55 = extractelement <4 x float> %54, i32 0
  %56 = load float addrspace(1)* @d2
  %57 = fcmp oge float %55, %56
  br i1 %57, label %then55, label %ifmerge57

then55:                                           ; preds = %loop-header51
  br label %loop-merge58

post-loopjump56:                                  ; No predecessors!
  br label %ifmerge57

ifmerge57:                                        ; preds = %post-loopjump56, %loop-header51
  br label %loop-header51

loop-merge58:                                     ; preds = %then55
  store i32 0, i32* %i3
  store i32 0, i32* %i59
  br label %loop-header60

loop-header60:                                    ; preds = %loop-header60, %loop-merge58
  %58 = load <4 x float>* %color
  %59 = extractelement <4 x float> %58, i32 2
  %60 = load float addrspace(1)* @d3
  %61 = fadd float %59, %60
  %62 = load <4 x float>* %color
  %color61 = insertelement <4 x float> %62, float %61, i32 2
  store <4 x float> %color61, <4 x float>* %color
  %63 = load i32* %i3
  %i362 = add i32 %63, 1
  store i32 %i362, i32* %i3
  %64 = load i32* %i59
  %65 = add i32 %64, 1
  %66 = icmp sge i32 %65, 42
  store i32 %65, i32* %i59
  br i1 %66, label %loop-merge63, label %loop-header60

loop-merge63:                                     ; preds = %loop-header60
  store i32 0, i32* %i2
  store i32 0, i32* %i64
  br label %loop-header65

loop-header65:                                    ; preds = %ifmerge74, %loop-merge63
  %67 = load <4 x float>* %color
  %68 = extractelement <4 x float> %67, i32 2
  %69 = fcmp olt float %68, 2.000000e+01
  br i1 %69, label %then66, label %else68

then66:                                           ; preds = %loop-header65
  %70 = load <4 x float>* %color
  %71 = extractelement <4 x float> %70, i32 0
  %72 = fadd float %71, 1.000000e+00
  %73 = load <4 x float>* %color
  %color67 = insertelement <4 x float> %73, float %72, i32 0
  store <4 x float> %color67, <4 x float>* %color
  br label %ifmerge70

else68:                                           ; preds = %loop-header65
  %74 = load <4 x float>* %color
  %75 = extractelement <4 x float> %74, i32 1
  %76 = fadd float %75, 1.000000e+00
  %77 = load <4 x float>* %color
  %color69 = insertelement <4 x float> %77, float %76, i32 1
  store <4 x float> %color69, <4 x float>* %color
  br label %ifmerge70

ifmerge70:                                        ; preds = %else68, %then66
  %78 = load <4 x float>* %color
  %79 = extractelement <4 x float> %78, i32 3
  %80 = fcmp olt float %79, 2.000000e+01
  br i1 %80, label %then71, label %ifmerge74

then71:                                           ; preds = %ifmerge70
  %81 = load <4 x float>* %color
  %82 = extractelement <4 x float> %81, i32 2
  %83 = load <4 x float>* %color
  %84 = extractelement <4 x float> %83, i32 1
  %85 = fcmp ogt float %82, %84
  br i1 %85, label %then72, label %ifmerge73

then72:                                           ; preds = %then71
  br label %ifmerge73

ifmerge73:                                        ; preds = %then72, %then71
  br label %ifmerge74

ifmerge74:                                        ; preds = %ifmerge73, %ifmerge70
  %86 = load i32* %i2
  %i275 = add i32 %86, 1
  store i32 %i275, i32* %i2
  %87 = load i32* %i64
  %88 = add i32 %87, 1
  %89 = icmp sge i32 %88, 100
  store i32 %88, i32* %i64
  br i1 %89, label %loop-merge76, label %loop-header65

loop-merge76:                                     ; preds = %ifmerge74
  store i32 0, i32* %i1
  br label %loop-header77

loop-header77:                                    ; preds = %ifmerge85, %then82, %loop-merge76
  %90 = load i32* %i1
  %91 = icmp sge i32 %90, 42
  br i1 %91, label %then78, label %ifmerge80

then78:                                           ; preds = %loop-header77
  br label %loop-merge88

post-loopjump79:                                  ; No predecessors!
  br label %ifmerge80

ifmerge80:                                        ; preds = %post-loopjump79, %loop-header77
  %92 = load <4 x float>* %color
  %93 = extractelement <4 x float> %92, i32 2
  %94 = load float addrspace(1)* @d3
  %95 = fadd float %93, %94
  %96 = load <4 x float>* %color
  %color81 = insertelement <4 x float> %96, float %95, i32 2
  store <4 x float> %color81, <4 x float>* %color
  %97 = load <4 x float>* %color
  %98 = extractelement <4 x float> %97, i32 0
  %99 = load float addrspace(1)* @d4
  %100 = fcmp olt float %98, %99
  br i1 %100, label %then82, label %ifmerge85

then82:                                           ; preds = %ifmerge80
  %101 = load i32* %i1
  %i183 = add i32 %101, 1
  store i32 %i183, i32* %i1
  br label %loop-header77

post-loopjump84:                                  ; No predecessors!
  br label %ifmerge85

ifmerge85:                                        ; preds = %post-loopjump84, %ifmerge80
  %102 = load <4 x float>* %color
  %103 = extractelement <4 x float> %102, i32 3
  %104 = fadd float %103, 1.000000e+00
  %105 = load <4 x float>* %color
  %color86 = insertelement <4 x float> %105, float %104, i32 3
  store <4 x float> %color86, <4 x float>* %color
  %106 = load i32* %i1
  %i187 = add i32 %106, 1
  store i32 %i187, i32* %i1
  br label %loop-header77

loop-merge88:                                     ; preds = %then78
  store i32 0, i32* %i
  store i32 0, i32* %i89
  br label %loop-header90

loop-header90:                                    ; preds = %ifmerge94, %loop-merge88
  %107 = load <4 x float>* %color
  %108 = extractelement <4 x float> %107, i32 2
  %109 = load float addrspace(1)* @d3
  %110 = fadd float %108, %109
  %111 = load <4 x float>* %color
  %color91 = insertelement <4 x float> %111, float %110, i32 2
  store <4 x float> %color91, <4 x float>* %color
  %112 = load <4 x float>* %color
  %113 = extractelement <4 x float> %112, i32 0
  %114 = load float addrspace(1)* @d4
  %115 = fcmp olt float %113, %114
  br i1 %115, label %then92, label %ifmerge94

then92:                                           ; preds = %loop-header90
  br label %loop-merge97

post-loopjump93:                                  ; No predecessors!
  br label %ifmerge94

ifmerge94:                                        ; preds = %post-loopjump93, %loop-header90
  %116 = load <4 x float>* %color
  %117 = extractelement <4 x float> %116, i32 3
  %118 = fadd float %117, 1.000000e+00
  %119 = load <4 x float>* %color
  %color95 = insertelement <4 x float> %119, float %118, i32 3
  store <4 x float> %color95, <4 x float>* %color
  %120 = load i32* %i
  %i96 = add i32 %120, 1
  store i32 %i96, i32* %i
  %121 = load i32* %i89
  %122 = add i32 %121, 1
  %123 = icmp sge i32 %122, 42
  store i32 %122, i32* %i89
  br i1 %123, label %loop-merge97, label %loop-header90

loop-merge97:                                     ; preds = %ifmerge94, %then92
  br label %loop-header98

loop-header98:                                    ; preds = %ifmerge112, %then102, %loop-merge97
  %124 = load <4 x float>* %color
  %125 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp99100 = fadd <4 x float> %124, %125
  store <4 x float> %assignment_tmp99100, <4 x float>* %assignment_tmp99
  %color101 = load <4 x float>* %assignment_tmp99
  store <4 x float> %color101, <4 x float>* %color
  %126 = load <4 x float>* %assignment_tmp99
  %127 = extractelement <4 x float> %126, i32 0
  %128 = load float addrspace(1)* @d4
  %129 = fcmp olt float %127, %128
  br i1 %129, label %then102, label %ifmerge104

then102:                                          ; preds = %loop-header98
  br label %loop-header98

post-loopjump103:                                 ; No predecessors!
  br label %ifmerge104

ifmerge104:                                       ; preds = %post-loopjump103, %loop-header98
  %130 = load <4 x float>* %assignment_tmp99
  %131 = extractelement <4 x float> %130, i32 1
  %132 = load float addrspace(1)* @d4
  %133 = fcmp olt float %131, %132
  br i1 %133, label %then105, label %else107

then105:                                          ; preds = %ifmerge104
  %134 = load <4 x float>* %assignment_tmp99
  %135 = extractelement <4 x float> %134, i32 1
  %136 = load float addrspace(1)* @d4
  %137 = fadd float %135, %136
  %138 = load <4 x float>* %color
  %color106 = insertelement <4 x float> %138, float %137, i32 1
  store <4 x float> %color106, <4 x float>* %color
  br label %ifmerge109

else107:                                          ; preds = %ifmerge104
  %139 = load <4 x float>* %color
  %140 = extractelement <4 x float> %139, i32 0
  %141 = load float addrspace(1)* @d4
  %142 = fadd float %140, %141
  %143 = load <4 x float>* %color
  %color108 = insertelement <4 x float> %143, float %142, i32 0
  store <4 x float> %color108, <4 x float>* %color
  br label %ifmerge109

ifmerge109:                                       ; preds = %else107, %then105
  %144 = load <4 x float>* %color
  %145 = extractelement <4 x float> %144, i32 2
  %146 = load float addrspace(1)* @d4
  %147 = fcmp oge float %145, %146
  br i1 %147, label %then110, label %ifmerge112

then110:                                          ; preds = %ifmerge109
  br label %loop-merge113

post-loopjump111:                                 ; No predecessors!
  br label %ifmerge112

ifmerge112:                                       ; preds = %post-loopjump111, %ifmerge109
  br label %loop-header98

loop-merge113:                                    ; preds = %then110
  br label %loop-header114

loop-header114:                                   ; preds = %ifmerge132, %then120, %loop-merge113
  %148 = load <4 x float>* %color
  %149 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp115116 = fadd <4 x float> %148, %149
  store <4 x float> %assignment_tmp115116, <4 x float>* %assignment_tmp115
  %color117 = load <4 x float>* %assignment_tmp115
  store <4 x float> %color117, <4 x float>* %color
  %150 = load <4 x float>* %assignment_tmp115
  %151 = extractelement <4 x float> %150, i32 0
  %152 = load float addrspace(1)* @d4
  %153 = fcmp olt float %151, %152
  br i1 %153, label %then118, label %ifmerge124

then118:                                          ; preds = %loop-header114
  %154 = load <4 x float>* %assignment_tmp115
  %155 = extractelement <4 x float> %154, i32 2
  %156 = fadd float %155, 2.000000e+00
  %157 = load <4 x float>* %color
  %color119 = insertelement <4 x float> %157, float %156, i32 2
  store <4 x float> %color119, <4 x float>* %color
  %158 = load <4 x float>* %color
  %159 = extractelement <4 x float> %158, i32 2
  %160 = load float addrspace(1)* @d4
  %161 = fcmp olt float %159, %160
  br i1 %161, label %then120, label %ifmerge123

then120:                                          ; preds = %then118
  %162 = load <4 x float>* %color
  %163 = extractelement <4 x float> %162, i32 0
  %164 = fadd float %163, 1.000000e+00
  %165 = load <4 x float>* %color
  %color121 = insertelement <4 x float> %165, float %164, i32 0
  store <4 x float> %color121, <4 x float>* %color
  br label %loop-header114

post-loopjump122:                                 ; No predecessors!
  br label %ifmerge123

ifmerge123:                                       ; preds = %post-loopjump122, %then118
  br label %ifmerge124

ifmerge124:                                       ; preds = %ifmerge123, %loop-header114
  %166 = load <4 x float>* %color
  %167 = extractelement <4 x float> %166, i32 1
  %168 = load float addrspace(1)* @d4
  %169 = fcmp olt float %167, %168
  br i1 %169, label %then125, label %else127

then125:                                          ; preds = %ifmerge124
  %170 = load <4 x float>* %color
  %171 = extractelement <4 x float> %170, i32 1
  %172 = load float addrspace(1)* @d4
  %173 = fadd float %171, %172
  %174 = load <4 x float>* %color
  %color126 = insertelement <4 x float> %174, float %173, i32 1
  store <4 x float> %color126, <4 x float>* %color
  br label %ifmerge129

else127:                                          ; preds = %ifmerge124
  %175 = load <4 x float>* %color
  %176 = extractelement <4 x float> %175, i32 0
  %177 = load float addrspace(1)* @d4
  %178 = fadd float %176, %177
  %179 = load <4 x float>* %color
  %color128 = insertelement <4 x float> %179, float %178, i32 0
  store <4 x float> %color128, <4 x float>* %color
  br label %ifmerge129

ifmerge129:                                       ; preds = %else127, %then125
  %180 = load <4 x float>* %color
  %181 = extractelement <4 x float> %180, i32 2
  %182 = load float addrspace(1)* @d4
  %183 = fcmp oge float %181, %182
  br i1 %183, label %then130, label %ifmerge132

then130:                                          ; preds = %ifmerge129
  br label %loop-merge133

post-loopjump131:                                 ; No predecessors!
  br label %ifmerge132

ifmerge132:                                       ; preds = %post-loopjump131, %ifmerge129
  br label %loop-header114

loop-merge133:                                    ; preds = %then130
  br label %loop-header134

loop-header134:                                   ; preds = %ifmerge143, %loop-merge133
  %184 = load <4 x float>* %color
  %185 = load <4 x float> addrspace(1)* @bigColor5
  %assignment_tmp135136 = fadd <4 x float> %184, %185
  store <4 x float> %assignment_tmp135136, <4 x float>* %assignment_tmp135
  %color137 = load <4 x float>* %assignment_tmp135
  store <4 x float> %color137, <4 x float>* %color
  %186 = load <4 x float>* %assignment_tmp135
  %187 = extractelement <4 x float> %186, i32 1
  %188 = load float addrspace(1)* @d5
  %189 = fcmp olt float %187, %188
  br i1 %189, label %then138, label %ifmerge140

then138:                                          ; preds = %loop-header134
  %190 = load <4 x float>* %assignment_tmp135
  %191 = extractelement <4 x float> %190, i32 1
  %192 = load float addrspace(1)* @d5
  %193 = fadd float %191, %192
  %194 = load <4 x float>* %color
  %color139 = insertelement <4 x float> %194, float %193, i32 1
  store <4 x float> %color139, <4 x float>* %color
  br label %ifmerge140

ifmerge140:                                       ; preds = %then138, %loop-header134
  %195 = load <4 x float>* %color
  %196 = extractelement <4 x float> %195, i32 0
  %197 = load float addrspace(1)* @d5
  %198 = fcmp oge float %196, %197
  br i1 %198, label %then141, label %ifmerge143

then141:                                          ; preds = %ifmerge140
  br label %loop-merge144

post-loopjump142:                                 ; No predecessors!
  br label %ifmerge143

ifmerge143:                                       ; preds = %post-loopjump142, %ifmerge140
  br label %loop-header134

loop-merge144:                                    ; preds = %then141
  %199 = load <4 x float>* %color
  %200 = extractelement <4 x float> %199, i32 0
  %201 = load float addrspace(1)* @d6
  %202 = fcmp olt float %200, %201
  br i1 %202, label %then145, label %else152

then145:                                          ; preds = %loop-merge144
  br label %loop-header146

loop-header146:                                   ; preds = %ifmerge149, %then145
  %203 = load <4 x float>* %color
  %204 = extractelement <4 x float> %203, i32 1
  %205 = load float addrspace(1)* @d6
  %206 = fcmp oge float %204, %205
  br i1 %206, label %then147, label %ifmerge149

then147:                                          ; preds = %loop-header146
  br label %loop-merge151

post-loopjump148:                                 ; No predecessors!
  br label %ifmerge149

ifmerge149:                                       ; preds = %post-loopjump148, %loop-header146
  %207 = load <4 x float>* %color
  %208 = load <4 x float> addrspace(1)* @bigColor6
  %color150 = fadd <4 x float> %207, %208
  store <4 x float> %color150, <4 x float>* %color
  br label %loop-header146

loop-merge151:                                    ; preds = %then147
  br label %ifmerge159

else152:                                          ; preds = %loop-merge144
  br label %loop-header153

loop-header153:                                   ; preds = %ifmerge156, %else152
  %209 = load <4 x float>* %color
  %210 = extractelement <4 x float> %209, i32 2
  %211 = load float addrspace(1)* @d6
  %212 = fcmp oge float %210, %211
  br i1 %212, label %then154, label %ifmerge156

then154:                                          ; preds = %loop-header153
  br label %loop-merge158

post-loopjump155:                                 ; No predecessors!
  br label %ifmerge156

ifmerge156:                                       ; preds = %post-loopjump155, %loop-header153
  %213 = load <4 x float>* %color
  %214 = extractelement <4 x float> %213, i32 2
  %215 = load <4 x float> addrspace(1)* @bigColor6
  %216 = extractelement <4 x float> %215, i32 2
  %217 = fadd float %214, %216
  %218 = load <4 x float>* %color
  %color157 = insertelement <4 x float> %218, float %217, i32 2
  store <4 x float> %color157, <4 x float>* %color
  br label %loop-header153

loop-merge158:                                    ; preds = %then154
  br label %ifmerge159

ifmerge159:                                       ; preds = %loop-merge158, %loop-merge151
  %219 = load <4 x float>* %color
  %220 = extractelement <4 x float> %219, i32 0
  %221 = load float addrspace(1)* @d6
  %222 = fcmp olt float %220, %221
  br i1 %222, label %then160, label %else170

then160:                                          ; preds = %ifmerge159
  br label %loop-header161

loop-header161:                                   ; preds = %ifmerge168, %then160
  %223 = load <4 x float>* %color
  %224 = extractelement <4 x float> %223, i32 1
  %225 = load float addrspace(1)* @d6
  %226 = fcmp oge float %224, %225
  br i1 %226, label %then162, label %ifmerge164

then162:                                          ; preds = %loop-header161
  br label %loop-merge169

post-loopjump163:                                 ; No predecessors!
  br label %ifmerge164

ifmerge164:                                       ; preds = %post-loopjump163, %loop-header161
  %227 = load <4 x float>* %color
  %228 = load <4 x float> addrspace(1)* @bigColor6
  %color165 = fadd <4 x float> %227, %228
  store <4 x float> %color165, <4 x float>* %color
  %229 = load float addrspace(1)* @d7
  %230 = fcmp olt float %229, 1.000000e+00
  br i1 %230, label %then166, label %ifmerge168

then166:                                          ; preds = %ifmerge164
  br label %loop-merge169

post-loopjump167:                                 ; No predecessors!
  br label %ifmerge168

ifmerge168:                                       ; preds = %post-loopjump167, %ifmerge164
  br label %loop-header161

loop-merge169:                                    ; preds = %then166, %then162
  br label %ifmerge177

else170:                                          ; preds = %ifmerge159
  br label %loop-header171

loop-header171:                                   ; preds = %ifmerge174, %else170
  %231 = load <4 x float>* %color
  %232 = extractelement <4 x float> %231, i32 2
  %233 = load float addrspace(1)* @d6
  %234 = fcmp oge float %232, %233
  br i1 %234, label %then172, label %ifmerge174

then172:                                          ; preds = %loop-header171
  br label %loop-merge176

post-loopjump173:                                 ; No predecessors!
  br label %ifmerge174

ifmerge174:                                       ; preds = %post-loopjump173, %loop-header171
  %235 = load <4 x float>* %color
  %236 = extractelement <4 x float> %235, i32 2
  %237 = load <4 x float> addrspace(1)* @bigColor6
  %238 = extractelement <4 x float> %237, i32 2
  %239 = fadd float %236, %238
  %240 = load <4 x float>* %color
  %color175 = insertelement <4 x float> %240, float %239, i32 2
  store <4 x float> %color175, <4 x float>* %color
  br label %loop-header171

loop-merge176:                                    ; preds = %then172
  br label %ifmerge177

ifmerge177:                                       ; preds = %loop-merge176, %loop-merge169
  br label %loop-header178

loop-header178:                                   ; preds = %ifmerge188, %ifmerge177
  %241 = load float addrspace(1)* @d7
  %242 = fcmp olt float %241, 0.000000e+00
  br i1 %242, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge191

post-loopjump180:                                 ; No predecessors!
  br label %ifmerge181

ifmerge181:                                       ; preds = %post-loopjump180, %loop-header178
  %243 = load <4 x float>* %color
  %244 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp182183 = fadd <4 x float> %243, %244
  store <4 x float> %assignment_tmp182183, <4 x float>* %assignment_tmp182
  %color184 = load <4 x float>* %assignment_tmp182
  store <4 x float> %color184, <4 x float>* %color
  %245 = load float addrspace(1)* @d7
  %246 = fcmp olt float %245, 1.000000e+00
  br i1 %246, label %then185, label %ifmerge188

then185:                                          ; preds = %ifmerge181
  %247 = load <4 x float>* %assignment_tmp182
  %248 = extractelement <4 x float> %247, i32 2
  %249 = fadd float %248, 1.000000e+00
  %250 = load <4 x float>* %color
  %color186 = insertelement <4 x float> %250, float %249, i32 2
  store <4 x float> %color186, <4 x float>* %color
  br label %loop-merge191

post-loopjump187:                                 ; No predecessors!
  br label %ifmerge188

ifmerge188:                                       ; preds = %post-loopjump187, %ifmerge181
  %251 = load <4 x float>* %color
  %BaseColor189 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %color190 = fadd <4 x float> %251, %BaseColor189
  store <4 x float> %color190, <4 x float>* %color
  br label %loop-header178

loop-merge191:                                    ; preds = %then185, %then179
  br label %loop-header192

loop-header192:                                   ; preds = %ifmerge214, %loop-merge191
  %252 = load float addrspace(1)* @d8
  %253 = fcmp olt float %252, 0.000000e+00
  br i1 %253, label %then193, label %ifmerge195

then193:                                          ; preds = %loop-header192
  br label %loop-merge215

post-loopjump194:                                 ; No predecessors!
  br label %ifmerge195

ifmerge195:                                       ; preds = %post-loopjump194, %loop-header192
  %254 = load <4 x float>* %color
  %255 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp196197 = fadd <4 x float> %254, %255
  store <4 x float> %assignment_tmp196197, <4 x float>* %assignment_tmp196
  %color198 = load <4 x float>* %assignment_tmp196
  store <4 x float> %color198, <4 x float>* %color
  %256 = load float addrspace(1)* @d8
  %257 = fcmp olt float %256, 1.000000e+00
  br i1 %257, label %then199, label %ifmerge207

then199:                                          ; preds = %ifmerge195
  %258 = load <4 x float>* %assignment_tmp196
  %259 = extractelement <4 x float> %258, i32 2
  %260 = fadd float %259, 1.000000e+00
  %261 = load <4 x float>* %color
  %color200 = insertelement <4 x float> %261, float %260, i32 2
  store <4 x float> %color200, <4 x float>* %color
  %262 = load float addrspace(1)* @d8
  %263 = fcmp olt float %262, 2.000000e+00
  br i1 %263, label %then201, label %else203

then201:                                          ; preds = %then199
  %264 = load <4 x float>* %color
  %265 = extractelement <4 x float> %264, i32 1
  %266 = fadd float %265, 1.000000e+00
  %267 = load <4 x float>* %color
  %color202 = insertelement <4 x float> %267, float %266, i32 1
  store <4 x float> %color202, <4 x float>* %color
  br label %ifmerge205

else203:                                          ; preds = %then199
  %268 = load <4 x float>* %color
  %269 = extractelement <4 x float> %268, i32 0
  %270 = fadd float %269, 1.000000e+00
  %271 = load <4 x float>* %color
  %color204 = insertelement <4 x float> %271, float %270, i32 0
  store <4 x float> %color204, <4 x float>* %color
  br label %ifmerge205

ifmerge205:                                       ; preds = %else203, %then201
  br label %loop-merge215

post-loopjump206:                                 ; No predecessors!
  br label %ifmerge207

ifmerge207:                                       ; preds = %post-loopjump206, %ifmerge195
  %272 = load <4 x float>* %color
  %BaseColor209 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %assignment_tmp208210 = fadd <4 x float> %272, %BaseColor209
  store <4 x float> %assignment_tmp208210, <4 x float>* %assignment_tmp208
  %color211 = load <4 x float>* %assignment_tmp208
  store <4 x float> %color211, <4 x float>* %color
  %273 = load <4 x float>* %assignment_tmp208
  %274 = extractelement <4 x float> %273, i32 2
  %275 = load float addrspace(1)* @d8
  %276 = fcmp oge float %274, %275
  br i1 %276, label %then212, label %ifmerge214

then212:                                          ; preds = %ifmerge207
  br label %loop-merge215

post-loopjump213:                                 ; No predecessors!
  br label %ifmerge214

ifmerge214:                                       ; preds = %post-loopjump213, %ifmerge207
  br label %loop-header192

loop-merge215:                                    ; preds = %then212, %ifmerge205, %then193
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %main-copy-out

main-copy-out:                                    ; preds = %loop-merge215
  %277 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %277)
  br label %main-exit

main-exit:                                        ; preds = %main-copy-out
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@bigColor1_1 = external addrspace(1) constant <4 x float>
@d2 = external addrspace(1) constant float
@d3 = external addrspace(1) constant float
@bigColor1_2 = external addrspace(1) constant <4 x float>
@bigColor1_3 = external addrspace(1) constant <4 x float>
@d4 = external addrspace(1) constant float
@Count = external addrspace(1) constant i32
@bigColor2 = external addrspace(1) constant <4 x float>
@bigColor3 = external addrspace(1) constant <4 x float>
@bigColor4 = external addrspace(1) constant <4 x float>
@bigColor5 = external addrspace(1) constant <4 x float>
@d5 = external addrspace(1) constant float
@d6 = external addrspace(1) constant float
@bigColor6 = external addrspace(1) constant <4 x float>
@d7 = external addrspace(1) constant float
@bigColor7 = external addrspace(1) constant <4 x float>
@d8 = external addrspace(1) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %.pre = load float addrspace(1)* @d
  %0 = load <4 x float> addrspace(1)* @bigColor
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %color.0 = phi <4 x float> [ %BaseColor, %entry ], [ %color5, %ifmerge ]
  %1 = extractelement <4 x float> %color.0, i32 0
  %2 = fcmp ult float %1, %.pre
  br i1 %2, label %ifmerge, label %then

then:                                             ; preds = %loop-header
  %3 = load <4 x float> addrspace(1)* @bigColor1_1
  br label %loop-header6

ifmerge:                                          ; preds = %loop-header
  %color5 = fadd <4 x float> %color.0, %0
  br label %loop-header

loop-header6:                                     ; preds = %loop-header6.backedge, %then
  %color.1 = phi <4 x float> [ %color.0, %then ], [ %color.1.be, %loop-header6.backedge ]
  %4 = extractelement <4 x float> %color.1, i32 2
  %5 = fcmp ult float %4, %.pre
  br i1 %5, label %ifmerge9, label %then7

then7:                                            ; preds = %loop-header6
  br label %loop-header17

ifmerge9:                                         ; preds = %loop-header6
  %assignment_tmp10 = fadd <4 x float> %color.1, %3
  %6 = extractelement <4 x float> %assignment_tmp10, i32 3
  %7 = fcmp olt float %6, %.pre
  br i1 %7, label %then12, label %ifmerge14

then12:                                           ; preds = %ifmerge9
  br label %loop-header6.backedge

loop-header6.backedge:                            ; preds = %then12, %ifmerge14
  %color.1.be = phi <4 x float> [ %assignment_tmp10, %then12 ], [ %color15, %ifmerge14 ]
  br label %loop-header6

ifmerge14:                                        ; preds = %ifmerge9
  %color15 = fadd <4 x float> %assignment_tmp10, %3
  br label %loop-header6.backedge

loop-header17:                                    ; preds = %ifmerge20, %then7
  %color.2 = phi <4 x float> [ %color.1, %then7 ], [ %color21, %ifmerge20 ]
  %8 = extractelement <4 x float> %color.2, i32 0
  %9 = fcmp ult float %8, 4.200000e+01
  br i1 %9, label %ifmerge20, label %then18

then18:                                           ; preds = %loop-header17
  %.pre217 = load float addrspace(1)* @d2
  %10 = load float addrspace(1)* @d3
  %11 = load <4 x float> addrspace(1)* @bigColor1_2
  br label %loop-header23

ifmerge20:                                        ; preds = %loop-header17
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color21 = fadd <4 x float> %color.2, %12
  br label %loop-header17

loop-header23:                                    ; preds = %ifmerge29, %then18
  %color.3 = phi <4 x float> [ %color.2, %then18 ], [ %color30, %ifmerge29 ]
  %13 = extractelement <4 x float> %color.3, i32 3
  %14 = fcmp olt float %13, %.pre217
  br i1 %14, label %then24, label %else

then24:                                           ; preds = %loop-header23
  %15 = extractelement <4 x float> %color.3, i32 1
  %phitmp = fcmp uge float %15, %10
  br label %ifmerge26

else:                                             ; preds = %loop-header23
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then24
  %and_tmp.0 = phi i1 [ %phitmp, %then24 ], [ true, %else ]
  br i1 %and_tmp.0, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  %16 = load <4 x float> addrspace(1)* @bigColor1_3
  %17 = load float addrspace(1)* @d4
  br label %loop-header32

ifmerge29:                                        ; preds = %ifmerge26
  %color30 = fadd <4 x float> %color.3, %11
  br label %loop-header23

loop-header32:                                    ; preds = %ifmerge41, %then27
  %color.4 = phi <4 x float> [ %color.3, %then27 ], [ %color42, %ifmerge41 ]
  %18 = extractelement <4 x float> %color.4, i32 2
  %19 = fcmp ult float %18, %10
  br i1 %19, label %ifmerge35, label %then33

then33:                                           ; preds = %loop-header32
  br label %loop-merge43

ifmerge35:                                        ; preds = %loop-header32
  %assignment_tmp3637 = fadd <4 x float> %color.4, %16
  %20 = extractelement <4 x float> %assignment_tmp3637, i32 1
  %21 = fcmp olt float %20, %17
  br i1 %21, label %then39, label %ifmerge41

then39:                                           ; preds = %ifmerge35
  br label %loop-merge43

ifmerge41:                                        ; preds = %ifmerge35
  %color42 = fadd <4 x float> %assignment_tmp3637, %16
  br label %loop-header32

loop-merge43:                                     ; preds = %then39, %then33
  %color.5 = phi <4 x float> [ %color.4, %then33 ], [ %assignment_tmp3637, %then39 ]
  %.pre219 = load i32 addrspace(1)* @Count
  %22 = load <4 x float> addrspace(1)* @bigColor2
  %tmp264 = icmp sgt i32 %.pre219, 0
  %smax = select i1 %tmp264, i32 %.pre219, i32 0
  br label %loop-header44

loop-header44:                                    ; preds = %ifmerge47, %loop-merge43
  %indvar262 = phi i32 [ %indvar.next263, %ifmerge47 ], [ 0, %loop-merge43 ]
  %color.6 = phi <4 x float> [ %color48, %ifmerge47 ], [ %color.5, %loop-merge43 ]
  %exitcond265 = icmp eq i32 %indvar262, %smax
  br i1 %exitcond265, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  %.pre220 = load <4 x float> addrspace(1)* @bigColor3
  br label %loop-header51

ifmerge47:                                        ; preds = %loop-header44
  %color48 = fadd <4 x float> %color.6, %22
  %indvar.next263 = add i32 %indvar262, 1
  br label %loop-header44

loop-header51:                                    ; preds = %ifmerge57, %then45
  %color.7 = phi <4 x float> [ %color.6, %then45 ], [ %assignment_tmp5253, %ifmerge57 ]
  %assignment_tmp5253 = fadd <4 x float> %color.7, %.pre220
  %23 = extractelement <4 x float> %assignment_tmp5253, i32 0
  %24 = fcmp ult float %23, %.pre217
  br i1 %24, label %ifmerge57, label %then55

then55:                                           ; preds = %loop-header51
  br label %loop-header60

ifmerge57:                                        ; preds = %loop-header51
  br label %loop-header51

loop-header60:                                    ; preds = %loop-header60, %then55
  %indvar260 = phi i32 [ %indvar.next261, %loop-header60 ], [ 0, %then55 ]
  %color.8 = phi <4 x float> [ %27, %loop-header60 ], [ %assignment_tmp5253, %then55 ]
  %25 = extractelement <4 x float> %color.8, i32 2
  %26 = fadd float %25, %10
  %27 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.8, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %26, i32 -1, float 0.000000e+00, i32 -1)
  %indvar.next261 = add i32 %indvar260, 1
  %exitcond = icmp eq i32 %indvar.next261, 42
  br i1 %exitcond, label %loop-merge63, label %loop-header60

loop-merge63:                                     ; preds = %loop-header60
  br label %loop-header65

loop-header65:                                    ; preds = %ifmerge74, %loop-merge63
  %indvar = phi i32 [ %indvar.next, %ifmerge74 ], [ 0, %loop-merge63 ]
  %color.9 = phi <4 x float> [ %color.10, %ifmerge74 ], [ %27, %loop-merge63 ]
  %28 = extractelement <4 x float> %color.9, i32 2
  %29 = fcmp olt float %28, 2.000000e+01
  br i1 %29, label %then66, label %else68

then66:                                           ; preds = %loop-header65
  %30 = extractelement <4 x float> %color.9, i32 0
  %31 = fadd float %30, 1.000000e+00
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.9, i32 1, float %31, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge70

else68:                                           ; preds = %loop-header65
  %33 = extractelement <4 x float> %color.9, i32 1
  %34 = fadd float %33, 1.000000e+00
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.9, i32 2, float 0.000000e+00, i32 -1, float %34, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge70

ifmerge70:                                        ; preds = %else68, %then66
  %color.10 = phi <4 x float> [ %32, %then66 ], [ %35, %else68 ]
  br label %ifmerge74

ifmerge74:                                        ; preds = %ifmerge70
  %indvar.next = add i32 %indvar, 1
  %exitcond258 = icmp eq i32 %indvar.next, 100
  br i1 %exitcond258, label %loop-merge76, label %loop-header65

loop-merge76:                                     ; preds = %ifmerge74
  br label %loop-header77

loop-header77:                                    ; preds = %loop-header77.backedge, %loop-merge76
  %color.11 = phi <4 x float> [ %color.10, %loop-merge76 ], [ %color.11.be, %loop-header77.backedge ]
  %i1.0 = phi i32 [ 0, %loop-merge76 ], [ %i1.0.be, %loop-header77.backedge ]
  %exitcond257 = icmp eq i32 %i1.0, 42
  br i1 %exitcond257, label %then78, label %ifmerge80

then78:                                           ; preds = %loop-header77
  br label %loop-header90

ifmerge80:                                        ; preds = %loop-header77
  %36 = extractelement <4 x float> %color.11, i32 2
  %37 = fadd float %36, %10
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.11, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %37, i32 -1, float 0.000000e+00, i32 -1)
  %39 = extractelement <4 x float> %38, i32 0
  %40 = fcmp olt float %39, %17
  br i1 %40, label %then82, label %ifmerge85

then82:                                           ; preds = %ifmerge80
  br label %loop-header77.backedge

loop-header77.backedge:                           ; preds = %then82, %ifmerge85
  %color.11.be = phi <4 x float> [ %38, %then82 ], [ %43, %ifmerge85 ]
  %i1.0.be = add i32 %i1.0, 1
  br label %loop-header77

ifmerge85:                                        ; preds = %ifmerge80
  %41 = extractelement <4 x float> %38, i32 3
  %42 = fadd float %41, 1.000000e+00
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %38, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %42, i32 -1)
  br label %loop-header77.backedge

loop-header90:                                    ; preds = %ifmerge94, %then78
  %i89.0 = phi i32 [ 0, %then78 ], [ %52, %ifmerge94 ]
  %color.12 = phi <4 x float> [ %color.11, %then78 ], [ %51, %ifmerge94 ]
  %tmp = add i32 %i89.0, 1
  %44 = extractelement <4 x float> %color.12, i32 2
  %45 = fadd float %44, %10
  %46 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %45, i32 -1, float 0.000000e+00, i32 -1)
  %47 = extractelement <4 x float> %46, i32 0
  %48 = fcmp olt float %47, %17
  br i1 %48, label %then92, label %ifmerge94

then92:                                           ; preds = %loop-header90
  br label %loop-merge97

ifmerge94:                                        ; preds = %loop-header90
  %49 = extractelement <4 x float> %46, i32 3
  %50 = fadd float %49, 1.000000e+00
  %51 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %46, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %50, i32 -1)
  %52 = add i32 %i89.0, 1
  %53 = icmp sgt i32 %tmp, 41
  br i1 %53, label %loop-merge97.loopexit, label %loop-header90

loop-merge97.loopexit:                            ; preds = %ifmerge94
  br label %loop-merge97

loop-merge97:                                     ; preds = %loop-merge97.loopexit, %then92
  %color.13 = phi <4 x float> [ %46, %then92 ], [ %51, %loop-merge97.loopexit ]
  %.pre222 = load <4 x float> addrspace(1)* @bigColor4
  br label %loop-header98

loop-header98:                                    ; preds = %loop-header98.backedge, %loop-merge97
  %color.14 = phi <4 x float> [ %color.13, %loop-merge97 ], [ %color.14.be, %loop-header98.backedge ]
  %assignment_tmp99100 = fadd <4 x float> %color.14, %.pre222
  %54 = extractelement <4 x float> %assignment_tmp99100, i32 0
  %55 = fcmp olt float %54, %17
  br i1 %55, label %then102, label %ifmerge104

then102:                                          ; preds = %loop-header98
  br label %loop-header98.backedge

loop-header98.backedge:                           ; preds = %then102, %ifmerge112
  %color.14.be = phi <4 x float> [ %assignment_tmp99100, %then102 ], [ %color.15, %ifmerge112 ]
  br label %loop-header98

ifmerge104:                                       ; preds = %loop-header98
  %56 = extractelement <4 x float> %assignment_tmp99100, i32 1
  %57 = fcmp olt float %56, %17
  br i1 %57, label %then105, label %else107

then105:                                          ; preds = %ifmerge104
  %58 = fadd float %56, %17
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp99100, i32 2, float 0.000000e+00, i32 -1, float %58, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge109

else107:                                          ; preds = %ifmerge104
  %60 = fadd float %54, %17
  %61 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp99100, i32 1, float %60, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge109

ifmerge109:                                       ; preds = %else107, %then105
  %color.15 = phi <4 x float> [ %59, %then105 ], [ %61, %else107 ]
  %62 = extractelement <4 x float> %color.15, i32 2
  %63 = fcmp ult float %62, %17
  br i1 %63, label %ifmerge112, label %then110

then110:                                          ; preds = %ifmerge109
  br label %loop-header114

ifmerge112:                                       ; preds = %ifmerge109
  br label %loop-header98.backedge

loop-header114:                                   ; preds = %loop-header114.backedge, %then110
  %color.16 = phi <4 x float> [ %color.15, %then110 ], [ %color.16.be, %loop-header114.backedge ]
  %assignment_tmp115116 = fadd <4 x float> %color.16, %.pre222
  %64 = extractelement <4 x float> %assignment_tmp115116, i32 0
  %65 = fcmp olt float %64, %17
  br i1 %65, label %then118, label %ifmerge124

then118:                                          ; preds = %loop-header114
  %66 = extractelement <4 x float> %assignment_tmp115116, i32 2
  %67 = fadd float %66, 2.000000e+00
  %68 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp115116, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %67, i32 -1, float 0.000000e+00, i32 -1)
  %69 = extractelement <4 x float> %68, i32 2
  %70 = fcmp olt float %69, %17
  br i1 %70, label %then120, label %ifmerge123

then120:                                          ; preds = %then118
  %71 = extractelement <4 x float> %68, i32 0
  %72 = fadd float %71, 1.000000e+00
  %73 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %68, i32 1, float %72, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header114.backedge

loop-header114.backedge:                          ; preds = %then120, %ifmerge132
  %color.16.be = phi <4 x float> [ %73, %then120 ], [ %color.18, %ifmerge132 ]
  br label %loop-header114

ifmerge123:                                       ; preds = %then118
  br label %ifmerge124

ifmerge124:                                       ; preds = %ifmerge123, %loop-header114
  %color.17 = phi <4 x float> [ %68, %ifmerge123 ], [ %assignment_tmp115116, %loop-header114 ]
  %74 = extractelement <4 x float> %color.17, i32 1
  %75 = fcmp olt float %74, %17
  br i1 %75, label %then125, label %else127

then125:                                          ; preds = %ifmerge124
  %76 = fadd float %74, %17
  %77 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.17, i32 2, float 0.000000e+00, i32 -1, float %76, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge129

else127:                                          ; preds = %ifmerge124
  %78 = extractelement <4 x float> %color.17, i32 0
  %79 = fadd float %78, %17
  %80 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.17, i32 1, float %79, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge129

ifmerge129:                                       ; preds = %else127, %then125
  %color.18 = phi <4 x float> [ %77, %then125 ], [ %80, %else127 ]
  %81 = extractelement <4 x float> %color.18, i32 2
  %82 = fcmp ult float %81, %17
  br i1 %82, label %ifmerge132, label %then130

then130:                                          ; preds = %ifmerge129
  %.pre223 = load <4 x float> addrspace(1)* @bigColor5
  %.pre224 = load float addrspace(1)* @d5
  br label %loop-header134

ifmerge132:                                       ; preds = %ifmerge129
  br label %loop-header114.backedge

loop-header134:                                   ; preds = %ifmerge143, %then130
  %color.19 = phi <4 x float> [ %color.18, %then130 ], [ %color.20, %ifmerge143 ]
  %assignment_tmp135136 = fadd <4 x float> %color.19, %.pre223
  %83 = extractelement <4 x float> %assignment_tmp135136, i32 1
  %84 = fcmp olt float %83, %.pre224
  br i1 %84, label %then138, label %ifmerge140

then138:                                          ; preds = %loop-header134
  %85 = fadd float %83, %.pre224
  %86 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp135136, i32 2, float 0.000000e+00, i32 -1, float %85, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge140

ifmerge140:                                       ; preds = %then138, %loop-header134
  %color.20 = phi <4 x float> [ %86, %then138 ], [ %assignment_tmp135136, %loop-header134 ]
  %87 = extractelement <4 x float> %color.20, i32 0
  %88 = fcmp ult float %87, %.pre224
  br i1 %88, label %ifmerge143, label %then141

then141:                                          ; preds = %ifmerge140
  %89 = load float addrspace(1)* @d6
  %90 = fcmp olt float %87, %89
  br i1 %90, label %then145, label %else152

ifmerge143:                                       ; preds = %ifmerge140
  br label %loop-header134

then145:                                          ; preds = %then141
  %91 = load <4 x float> addrspace(1)* @bigColor6
  br label %loop-header146

loop-header146:                                   ; preds = %ifmerge149, %then145
  %color.21 = phi <4 x float> [ %color.20, %then145 ], [ %color150, %ifmerge149 ]
  %92 = extractelement <4 x float> %color.21, i32 1
  %93 = fcmp ult float %92, %89
  br i1 %93, label %ifmerge149, label %then147

then147:                                          ; preds = %loop-header146
  br label %ifmerge159

ifmerge149:                                       ; preds = %loop-header146
  %color150 = fadd <4 x float> %color.21, %91
  br label %loop-header146

else152:                                          ; preds = %then141
  %94 = load <4 x float> addrspace(1)* @bigColor6
  %95 = extractelement <4 x float> %94, i32 2
  br label %loop-header153

loop-header153:                                   ; preds = %ifmerge156, %else152
  %color.22 = phi <4 x float> [ %color.20, %else152 ], [ %99, %ifmerge156 ]
  %96 = extractelement <4 x float> %color.22, i32 2
  %97 = fcmp ult float %96, %89
  br i1 %97, label %ifmerge156, label %then154

then154:                                          ; preds = %loop-header153
  br label %ifmerge159

ifmerge156:                                       ; preds = %loop-header153
  %98 = fadd float %96, %95
  %99 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.22, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %98, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header153

ifmerge159:                                       ; preds = %then154, %then147
  %100 = phi <4 x float> [ %91, %then147 ], [ %94, %then154 ]
  %color.23 = phi <4 x float> [ %color.21, %then147 ], [ %color.22, %then154 ]
  %101 = extractelement <4 x float> %color.23, i32 0
  %102 = fcmp olt float %101, %89
  br i1 %102, label %then160, label %else170

then160:                                          ; preds = %ifmerge159
  %103 = load float addrspace(1)* @d7
  %104 = fcmp olt float %103, 1.000000e+00
  br label %loop-header161

loop-header161:                                   ; preds = %ifmerge168, %then160
  %color.24 = phi <4 x float> [ %color.23, %then160 ], [ %color165, %ifmerge168 ]
  %105 = extractelement <4 x float> %color.24, i32 1
  %106 = fcmp ult float %105, %89
  br i1 %106, label %ifmerge164, label %then162

then162:                                          ; preds = %loop-header161
  br label %loop-merge169

ifmerge164:                                       ; preds = %loop-header161
  %color165 = fadd <4 x float> %color.24, %100
  br i1 %104, label %then166, label %ifmerge168

then166:                                          ; preds = %ifmerge164
  br label %loop-merge169

ifmerge168:                                       ; preds = %ifmerge164
  br label %loop-header161

loop-merge169:                                    ; preds = %then166, %then162
  %color.25 = phi <4 x float> [ %color.24, %then162 ], [ %color165, %then166 ]
  br label %ifmerge177

else170:                                          ; preds = %ifmerge159
  %107 = extractelement <4 x float> %100, i32 2
  br label %loop-header171

loop-header171:                                   ; preds = %ifmerge174, %else170
  %color.26 = phi <4 x float> [ %color.23, %else170 ], [ %111, %ifmerge174 ]
  %108 = extractelement <4 x float> %color.26, i32 2
  %109 = fcmp ult float %108, %89
  br i1 %109, label %ifmerge174, label %then172

then172:                                          ; preds = %loop-header171
  br label %ifmerge177

ifmerge174:                                       ; preds = %loop-header171
  %110 = fadd float %108, %107
  %111 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.26, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %110, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header171

ifmerge177:                                       ; preds = %then172, %loop-merge169
  %color.27 = phi <4 x float> [ %color.25, %loop-merge169 ], [ %color.26, %then172 ]
  %.pre225 = load float addrspace(1)* @d7
  %.pre227 = fcmp olt float %.pre225, 0.000000e+00
  %112 = load <4 x float> addrspace(1)* @bigColor7
  %113 = fcmp olt float %.pre225, 1.000000e+00
  br label %loop-header178

loop-header178:                                   ; preds = %ifmerge188, %ifmerge177
  %.pre-phi = phi i1 [ false, %ifmerge188 ], [ %.pre227, %ifmerge177 ]
  %color.28 = phi <4 x float> [ %color190, %ifmerge188 ], [ %color.27, %ifmerge177 ]
  br i1 %.pre-phi, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge191

ifmerge181:                                       ; preds = %loop-header178
  %assignment_tmp182183 = fadd <4 x float> %color.28, %112
  br i1 %113, label %then185, label %ifmerge188

then185:                                          ; preds = %ifmerge181
  %114 = extractelement <4 x float> %assignment_tmp182183, i32 2
  %115 = fadd float %114, 1.000000e+00
  %116 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp182183, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %115, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-merge191

ifmerge188:                                       ; preds = %ifmerge181
  %color190 = fadd <4 x float> %assignment_tmp182183, %BaseColor
  br label %loop-header178

loop-merge191:                                    ; preds = %then185, %then179
  %color.29 = phi <4 x float> [ %color.28, %then179 ], [ %116, %then185 ]
  %.pre226 = load float addrspace(1)* @d8
  %.pre228 = fcmp olt float %.pre226, 0.000000e+00
  %117 = fcmp olt float %.pre226, 1.000000e+00
  br label %loop-header192

loop-header192:                                   ; preds = %ifmerge214, %loop-merge191
  %.pre-phi229 = phi i1 [ false, %ifmerge214 ], [ %.pre228, %loop-merge191 ]
  %color.30 = phi <4 x float> [ %assignment_tmp208210, %ifmerge214 ], [ %color.29, %loop-merge191 ]
  br i1 %.pre-phi229, label %then193, label %ifmerge195

then193:                                          ; preds = %loop-header192
  br label %loop-merge215

ifmerge195:                                       ; preds = %loop-header192
  %assignment_tmp196197 = fadd <4 x float> %color.30, %112
  br i1 %117, label %then199, label %ifmerge207

then199:                                          ; preds = %ifmerge195
  %118 = extractelement <4 x float> %assignment_tmp196197, i32 2
  %119 = fadd float %118, 1.000000e+00
  %120 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp196197, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %119, i32 -1, float 0.000000e+00, i32 -1)
  %121 = fcmp olt float %.pre226, 2.000000e+00
  br i1 %121, label %then201, label %else203

then201:                                          ; preds = %then199
  %122 = extractelement <4 x float> %120, i32 1
  %123 = fadd float %122, 1.000000e+00
  %124 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %120, i32 2, float 0.000000e+00, i32 -1, float %123, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge205

else203:                                          ; preds = %then199
  %125 = extractelement <4 x float> %120, i32 0
  %126 = fadd float %125, 1.000000e+00
  %127 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %120, i32 1, float %126, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge205

ifmerge205:                                       ; preds = %else203, %then201
  %color.31 = phi <4 x float> [ %124, %then201 ], [ %127, %else203 ]
  br label %loop-merge215

ifmerge207:                                       ; preds = %ifmerge195
  %assignment_tmp208210 = fadd <4 x float> %assignment_tmp196197, %BaseColor
  %128 = extractelement <4 x float> %assignment_tmp208210, i32 2
  %129 = fcmp ult float %128, %.pre226
  br i1 %129, label %ifmerge214, label %then212

then212:                                          ; preds = %ifmerge207
  br label %loop-merge215

ifmerge214:                                       ; preds = %ifmerge207
  br label %loop-header192

loop-merge215:                                    ; preds = %then212, %ifmerge205, %then193
  %color.32 = phi <4 x float> [ %color.30, %then193 ], [ %color.31, %ifmerge205 ], [ %assignment_tmp208210, %then212 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %color.32)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone


Loop info:
Loop at depth 1 containing: %loop-header<header><exiting>,%ifmerge<latch>
Loop at depth 1 containing: %loop-header6<header><exiting>,%loop-header6.backedge<latch>,%ifmerge14,%ifmerge9,%then12
Loop at depth 1 containing: %loop-header17<header><exiting>,%ifmerge20<latch>
Loop at depth 1 containing: %loop-header23<header>,%ifmerge29<latch>,%ifmerge26<exiting>,%then24,%else
Loop at depth 1 containing: %loop-header32<header><exiting>,%ifmerge41<latch>,%ifmerge35<exiting>
Loop at depth 1 containing: %loop-header44<header><exiting>,%ifmerge47<latch>
Loop at depth 1 containing: %loop-header51<header><exiting>,%ifmerge57<latch>
Loop at depth 1 containing: %loop-header60<header><latch><exiting>
Loop at depth 1 containing: %loop-header65<header>,%ifmerge74<latch><exiting>,%ifmerge70,%then66,%else68
Loop at depth 1 containing: %loop-header77<header><exiting>,%loop-header77.backedge<latch>,%ifmerge85,%ifmerge80,%then82
Loop at depth 1 containing: %loop-header90<header><exiting>,%ifmerge94<latch><exiting>
Loop at depth 1 containing: %loop-header98<header>,%loop-header98.backedge<latch>,%ifmerge112,%ifmerge109<exiting>,%then105,%ifmerge104,%else107,%then102
Loop at depth 1 containing: %loop-header114<header>,%loop-header114.backedge<latch>,%ifmerge132,%ifmerge129<exiting>,%then125,%ifmerge124,%ifmerge123,%then118,%else127,%then120
Loop at depth 1 containing: %loop-header134<header>,%ifmerge143<latch>,%ifmerge140<exiting>,%then138
Loop at depth 1 containing: %loop-header146<header><exiting>,%ifmerge149<latch>
Loop at depth 1 containing: %loop-header161<header><exiting>,%ifmerge168<latch>,%ifmerge164<exiting>
Loop at depth 1 containing: %loop-header178<header><exiting>,%ifmerge188<latch>,%ifmerge181<exiting>
Loop at depth 1 containing: %loop-header192<header><exiting>,%ifmerge214<latch>,%ifmerge207<exiting>,%ifmerge195<exiting>
Loop at depth 1 containing: %loop-header171<header><exiting>,%ifmerge174<latch>
Loop at depth 1 containing: %loop-header153<header><exiting>,%ifmerge156<latch>

inductive variable:  %indvar260 = phi i32 [ %indvar.next261, %loop-header60 ], [ 0, %then55 ]
  trip count:        42
  increment:         %indvar.next261 = add i32 %indvar260, 1
  exit condition:    %exitcond = icmp eq i32 %indvar.next261, 42

inductive variable:  %indvar = phi i32 [ %indvar.next, %ifmerge74 ], [ 0, %loop-merge63 ]
  trip count:        100
  increment:         %indvar.next = add i32 %indvar, 1
  exit condition:    %exitcond258 = icmp eq i32 %indvar.next, 100
compiling loops.frag...
uniform vec4 bigColor ; 
uniform vec4 bigColor1_1 ; 
uniform vec4 bigColor1_2 ; 
uniform vec4 bigColor1_3 ; 
uniform vec4 bigColor2 ; 
uniform vec4 bigColor3 ; 
uniform vec4 bigColor4 ; 
uniform vec4 bigColor5 ; 
uniform vec4 bigColor6 ; 
uniform vec4 bigColor7 ; 
uniform vec4 bigColor8 ; 
varying vec4 BaseColor ; 
uniform float d ; 
uniform float d2 ; 
uniform float d3 ; 
uniform float d4 ; 
uniform float d5 ; 
uniform float d6 ; 
uniform float d7 ; 
uniform float d8 ; 
uniform float d9 ; 
uniform float d10 ; 
uniform float d11 ; 
uniform int Count ; 
void  main (){
vec4 color = BaseColor ; while ( color . x < d ) {
color += bigColor ; }
while ( color . z < d ) {
color += bigColor1_1 ; if ( color . w < d ) continue; color += bigColor1_1 ; }
while ( color . x < 42.000000 ) {
++ color ; }
while ( color . w < d2 && color . y < d3 ) {
color += bigColor1_2 ; }
while ( color . z < d3 ) {
color += bigColor1_3 ; if ( color . y < d4 ) break; color += bigColor1_3 ; }
for( int i = 0 ; ; i < Count ; ++ i ) {
color += bigColor2 ; }
do {
color += bigColor3 ; }
while ( color . x < d2 ); for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; }
for( int i = 0 ; ; i < 100 ; ++ i ) {
if ( color . z < 20.000000 ) color . x ++ ; else color . y ++ ; if ( color . w < 20.000000 ) if ( color . z > color . y ) 0 ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) continue; ++ color . w ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) break; ++ color . w ; }
do {
color += bigColor4 ; if ( color . x < d4 ) continue; if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor4 ; if ( color . x < d4 ) {
color . z += 2.000000 ; if ( color . z < d4 ) {
color . x ++ ; continue; }
}
if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor5 ; if ( color . y < d5 ) color . y += d5 ; }
while ( color . x < d5 ); if ( color . x < d6 ) {
while ( color . y < d6 ) color += bigColor6 ; }
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
if ( color . x < d6 ) {
while ( color . y < d6 ) {
color += bigColor6 ; if ( d7 < 1.000000 ) break; }
}
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
do {
if ( d7 < 0.000000 ) break; color += bigColor7 ; if ( d7 < 1.000000 ) {
color . z ++ ; break; }
color += BaseColor ; }
while ( true ); do {
if ( d8 < 0.000000 ) break; color += bigColor7 ; if ( d8 < 1.000000 ) {
color . z ++ ; if ( d8 < 2.000000 ) {
color . y ++ ; }
else {
color . x ++ ; }
break; }
color += BaseColor ; }
while ( color . z < d8 ); gl_FragColor = color ; }



(
(declare (uniform ) int Count)
(declare (uniform ) float d8)
(declare (uniform ) float d7)
(declare (uniform ) float d6)
(declare (uniform ) float d5)
(declare (uniform ) float d4)
(declare (uniform ) float d3)
(declare (uniform ) float d2)
(declare (uniform ) float d)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor7)
(declare (uniform ) vec4 bigColor6)
(declare (uniform ) vec4 bigColor5)
(declare (uniform ) vec4 bigColor4)
(declare (uniform ) vec4 bigColor3)
(declare (uniform ) vec4 bigColor2)
(declare (uniform ) vec4 bigColor1_3)
(declare (uniform ) vec4 bigColor1_2)
(declare (uniform ) vec4 bigColor1_1)
(declare (uniform ) vec4 bigColor)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_1) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz w (var_ref assignment_tmp) )(var_ref d) ) (
          continue
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_1) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (42.000000)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) bool and_tmp)
        (if (expression bool < (swiz w (var_ref color) )(var_ref d2) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool < (swiz y (var_ref color) )(var_ref d3) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (if (expression bool ! (var_ref and_tmp) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor1_2) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d3) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_3) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (var_ref Count) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor2) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d2) ) (
          break
        )
        ())

      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (100)) ) ((constant int (1)) ) (
        (if (expression bool < (swiz z (var_ref color) )(constant float (20.000000)) ) (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        ))

        (if (expression bool < (swiz w (var_ref color) )(constant float (20.000000)) ) (
          (if (expression bool > (swiz z (var_ref color) )(swiz y (var_ref color) )) (
          )
          ())

        )
        ())

        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (constant int (42)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
          continue
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          continue
        )
        ())

        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (2.000000)) ) ) 
          (if (expression bool < (swiz z (var_ref color) )(var_ref d4) ) (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
            continue
          )
          ())

        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor5) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d5) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d5) ) ) 
        )
        ())

        (if (expression bool >= (swiz x (var_ref color) )(var_ref d5) ) (
          break
        )
        ())

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
          (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
            break
          )
          ())

        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (loop () () () () (
        (if (expression bool < (var_ref d7) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool < (var_ref d8) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d8) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          (if (expression bool < (var_ref d8) (constant float (2.000000)) ) (
            (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          break
        )
        ())

      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref color) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
in vec4 BaseColor;
const float const71 = 42;
const float const73 = 1;
const bool const77 = true;
const int const83 = 0;
const int const88 = 1;
const float const94 = 20;
const int const100 = 42;
const int const115 = 41;
const float const127 = 2;
const float const155 = 0;
const bool const161 = false;

void main()
{
    vec4 color_0;
    vec4 color_1;
    vec4 color_1_be;
    vec4 color_2;
    vec4 color_3;
    bool and_tmp_0;
    vec4 color_4;
    vec4 color_5;
    int indvar262;
    vec4 color_6;
    vec4 color_7;
    int indvar260;
    vec4 color_8;
    int indvar;
    vec4 color_9;
    vec4 color_10;
    vec4 color_11;
    int temp38;
    vec4 color_11_be;
    int temp40;
    vec4 color_12;
    vec4 color_13;
    vec4 color_14;
    vec4 color_14_be;
    vec4 color_15;
    vec4 color_16;
    vec4 color_16_be;
    vec4 color_17;
    vec4 color_18;
    vec4 color_19;
    vec4 color_20;
    vec4 color_21;
    vec4 color_22;
    vec4 temp54;
    vec4 color_23;
    vec4 color_24;
    vec4 color_25;
    vec4 color_26;
    vec4 color_27;
    bool _pre-phi;
    vec4 color_28;
    vec4 color_29;
    bool _pre-phi229;
    vec4 color_30;
    vec4 color_31;
    vec4 color_32;
    color_0 = BaseColor;
    while (color_0.x < d){
        vec4 color5 = color_0 + bigColor;
        color_0 = color5;
    }
    
    color_1 = color_0;
    while (color_1.z < d){
        vec4 assignment_tmp10 = color_1 + bigColor1_1;
        bool temp69 = assignment_tmp10.w < d;
        if (temp69) {
            color_1_be = assignment_tmp10;
            color_1 = color_1_be;
            continue;
        }
        else {
            vec4 color15 = assignment_tmp10 + bigColor1_1;
            color_1_be = color15;
            color_1 = color_1_be;
            continue;
        }
        
        color_1 = color_1_be;
        continue;
    }
    
    color_2 = color_1;
    while (color_2.x < const71){
        vec4 temp72 = vec4(const73);
        vec4 color21 = color_2 + temp72;
        color_2 = color21;
    }
    
    color_3 = color_2;
    while (true) {
        bool temp75 = color_3.w < d2;
        if (temp75) {
            bool phitmp = color_3.y >= d3;
            and_tmp_0 = phitmp;
        }
        else {
            and_tmp_0 = const77;
        }
        
        if (and_tmp_0) {
            break;
        }
        
        vec4 color30 = color_3 + bigColor1_2;
        color_3 = color30;
    }
    
    color_4 = color_3;
    while (color_4.z < d3){
        vec4 assignment_tmp3637 = color_4 + bigColor1_3;
        bool temp80 = assignment_tmp3637.y < d4;
        if (temp80) {
            color_5 = assignment_tmp3637;
            break;
        }
        
        vec4 color42 = assignment_tmp3637 + bigColor1_3;
        color_4 = color42;
        color_5 = color_4;
    }
    
    bool tmp264 = Count > const83;
    int smax = tmp264 ? Count : const83
    indvar262 = const83;
    color_6 = color_5;
    while (true) {
        bool exitcond265 = indvar262 == smax;
        if (exitcond265) {
            break;
        }
        
        vec4 color48 = color_6 + bigColor2;
        int indvar_next263 = indvar262 + const88;
        indvar262 = indvar_next263;
        color_6 = color48;
    }
    
    color_7 = color_6;
    while (true) {
        vec4 assignment_tmp5253 = color_7 + bigColor3;
        bool temp90 = assignment_tmp5253.x < d2;
        if (! temp90) {
            break;
        }
        
        color_7 = assignment_tmp5253;
    }
    
    indvar260 = const83;
    color_8 = assignment_tmp5253;
    for (indvar260 = 0; indvar260 >= 42; ++indvar260) {
        float temp91 = color_8.z + d3;
        vec4 temp92 = color_8;
        temp92.z = temp91.x;
        color_8 = temp92;
    }
    
    indvar = const83;
    color_9 = temp92;
    for (indvar = 0; indvar >= 100; ++indvar) {
        bool temp93 = color_9.z < const94;
        if (temp93) {
            float temp95 = color_9.x + const73;
            vec4 temp96 = color_9;
            temp96.x = temp95.x;
            color_10 = temp96;
        }
        else {
            float temp97 = color_9.y + const73;
            vec4 temp98 = color_9;
            temp98.y = temp97.x;
            color_10 = temp98;
        }
        
        color_9 = color_10;
    }
    
    color_11 = color_10;
    temp38 = const83;
    while (true) {
        bool exitcond257 = temp38 == const100;
        if (exitcond257) {
            break;
        }
        
        float temp101 = color_11.z + d3;
        vec4 temp102 = color_11;
        temp102.z = temp101.x;
        bool temp103 = temp102.x < d4;
        if (temp103) {
            color_11_be = temp102;
            int temp104 = temp38 + const88;
            color_11 = color_11_be;
            temp38 = temp104;
            continue;
        }
        else {
            float temp105 = temp102.w + const73;
            vec4 temp106 = temp102;
            temp106.w = temp105.x;
            color_11_be = temp106;
            temp104 = temp38 + const88;
            color_11 = color_11_be;
            temp38 = temp104;
            continue;
        }
        
        temp104 = temp38 + const88;
        color_11 = color_11_be;
        temp38 = temp104;
        continue;
    }
    
    temp40 = const83;
    color_12 = color_11;
    while (true) {
        int tmp = temp40 + const88;
        float temp108 = color_12.z + d3;
        vec4 temp109 = color_12;
        temp109.z = temp108.x;
        bool temp110 = temp109.x < d4;
        if (temp110) {
            color_13 = temp109;
            break;
        }
        
        float temp111 = temp109.w + const73;
        vec4 temp112 = temp109;
        temp112.w = temp111.x;
        int temp113 = temp40 + const88;
        bool temp114 = tmp > const115;
        if (temp114) {
            color_13 = temp112;
            break;
        }
        
        temp40 = temp113;
        color_12 = temp112;
    }
    
    color_14 = color_13;
    while (true) {
        vec4 assignment_tmp99100 = color_14 + bigColor4;
        bool temp117 = assignment_tmp99100.x < d4;
        if (temp117) {
            color_14_be = assignment_tmp99100;
            color_14 = color_14_be;
            continue;
        }
        else {
            bool temp118 = assignment_tmp99100.y < d4;
            if (temp118) {
                float temp119 = assignment_tmp99100.y + d4;
                vec4 temp120 = assignment_tmp99100;
                temp120.y = temp119.x;
                color_15 = temp120;
            }
            else {
                float temp121 = assignment_tmp99100.x + d4;
                vec4 temp122 = assignment_tmp99100;
                temp122.x = temp121.x;
                color_15 = temp122;
            }
            
            bool temp123 = color_15.z < d4;
            if (! temp123) {
                break;
            }
            
            color_14_be = color_15;
            color_14 = color_14_be;
            continue;
        }
        
        color_14 = color_14_be;
        continue;
    }
    
    color_16 = color_15;
    while (true) {
        vec4 assignment_tmp115116 = color_16 + bigColor4;
        bool temp125 = assignment_tmp115116.x < d4;
        color_17 = assignment_tmp115116;
        if (temp125) {
            float temp126 = assignment_tmp115116.z + const127;
            vec4 temp128 = assignment_tmp115116;
            temp128.z = temp126.x;
            bool temp129 = temp128.z < d4;
            if (temp129) {
                float temp130 = temp128.x + const73;
                vec4 temp131 = temp128;
                temp131.x = temp130.x;
                color_16_be = temp131;
                color_16 = color_16_be;
                continue;
            }
            else {
                color_17 = temp128;
            }
            
        }
        
        bool temp132 = color_17.y < d4;
        if (temp132) {
            float temp133 = color_17.y + d4;
            vec4 temp134 = color_17;
            temp134.y = temp133.x;
            color_18 = temp134;
        }
        else {
            float temp135 = color_17.x + d4;
            vec4 temp136 = color_17;
            temp136.x = temp135.x;
            color_18 = temp136;
        }
        
        bool temp137 = color_18.z < d4;
        if (! temp137) {
            break;
        }
        
        color_16_be = color_18;
        color_16 = color_16_be;
        continue;
    }
    
    color_19 = color_18;
    while (true) {
        vec4 assignment_tmp135136 = color_19 + bigColor5;
        bool temp139 = assignment_tmp135136.y < d5;
        color_20 = assignment_tmp135136;
        if (temp139) {
            float temp140 = assignment_tmp135136.y + d5;
            vec4 temp141 = assignment_tmp135136;
            temp141.y = temp140.x;
            color_20 = temp141;
        }
        
        bool temp142 = color_20.x < d5;
        if (! temp142) {
            break;
        }
        
        color_19 = color_20;
    }
    
    bool temp143 = color_20.x < d6;
    if (temp143) {
        color_21 = color_20;
        while (color_21.y < d6){
            vec4 color150 = color_21 + bigColor6;
            color_21 = color150;
        }
        
        temp54 = bigColor6;
        color_23 = color_21;
    }
    else {
        color_22 = color_20;
        while (color_22.z < d6){
            float temp145 = float temp146 + bigColor6.z;
            vec4 temp147 = color_22;
            temp147.z = temp145.x;
            color_22 = temp147;
        }
        
        temp54 = bigColor6;
        color_23 = color_22;
    }
    
    bool temp148 = color_23.x < d6;
    if (temp148) {
        bool temp149 = d7 < const73;
        color_24 = color_23;
        while (color_24.y < d6){
            vec4 color165 = color_24 + temp54;
            if (temp149) {
                color_25 = color165;
                break;
            }
            
            color_24 = color165;
            color_25 = color_24;
        }
        
        color_27 = color_25;
    }
    else {
        color_26 = color_23;
        while (color_26.z < d6){
            float temp151 = float temp152 + temp54.z;
            vec4 temp153 = color_26;
            temp153.z = temp151.x;
            color_26 = temp153;
        }
        
        color_27 = color_26;
    }
    
    bool _pre227 = d7 < const155;
    bool temp156 = d7 < const73;
    _pre-phi = _pre227;
    color_28 = color_27;
    while (true) {
        if (_pre-phi) {
            color_29 = color_28;
            break;
        }
        
        vec4 assignment_tmp182183 = color_28 + bigColor7;
        if (temp156) {
            float temp158 = assignment_tmp182183.z + const73;
            vec4 temp159 = assignment_tmp182183;
            temp159.z = temp158.x;
            color_29 = temp159;
            break;
        }
        
        vec4 color190 = assignment_tmp182183 + BaseColor;
        _pre-phi = const161;
        color_28 = color190;
    }
    
    bool _pre228 = d8 < const155;
    bool temp163 = d8 < const73;
    _pre-phi229 = _pre228;
    color_30 = color_29;
    while (true) {
        if (_pre-phi229) {
            color_32 = color_30;
            break;
        }
        
        vec4 assignment_tmp196197 = color_30 + bigColor7;
        if (temp163) {
            float temp165 = assignment_tmp196197.z + const73;
            vec4 temp166 = assignment_tmp196197;
            temp166.z = temp165.x;
            bool temp167 = d8 < const127;
            if (temp167) {
                float temp168 = temp166.y + const73;
                vec4 temp169 = temp166;
                temp169.y = temp168.x;
                color_31 = temp169;
            }
            else {
                float temp170 = temp166.x + const73;
                vec4 temp171 = temp166;
                temp171.x = temp170.x;
                color_31 = temp171;
            }
            
            color_32 = color_31;
            break;
        }
        
        vec4 assignment_tmp208210 = assignment_tmp196197 + BaseColor;
        bool temp173 = assignment_tmp208210.z < d8;
        if (! temp173) {
            color_32 = assignment_tmp208210;
            break;
        }
        
        _pre-phi229 = const161;
        color_30 = assignment_tmp208210;
    }
    
    gl_FragColor = color_32;
    
}
