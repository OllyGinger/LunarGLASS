; ModuleID = 'Top'

@texSampler2D = external addrspace(1) constant i32
@scale = external addrspace(1) constant <2 x float>
@texSampler3D = external addrspace(1) constant i32
@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %assignment_tmp2 = alloca <4 x float>
  %mix_retval = alloca <4 x float>
  %w = alloca <4 x float>
  %assignment_tmp1 = alloca <4 x float>
  %texture3D_retval = alloca <4 x float>
  %v = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %texture2D_retval = alloca <4 x float>
  %0 = load i32 addrspace(1)* @texSampler2D
  %t = call <2 x float> @llvm.gla.getInterpolant.v2f32(i32 0)
  %1 = load <2 x float> addrspace(1)* @scale
  %2 = fadd <2 x float> %t, %1
  %3 = load <2 x float> addrspace(1)* @scale
  %4 = fdiv <2 x float> %2, %3
  %texture2DTmp = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %4)
  store <4 x float> %texture2DTmp, <4 x float>* %texture2D_retval
  %5 = load <4 x float>* %texture2D_retval
  %swizzleTmp = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float> %5, i32 27)
  store <4 x float> %swizzleTmp, <4 x float>* %assignment_tmp
  %6 = load <4 x float>* %assignment_tmp
  store <4 x float> %6, <4 x float>* %v
  %7 = load i32 addrspace(1)* @texSampler3D
  %coords = call <3 x float> @llvm.gla.getInterpolant.v3f32(i32 0)
  %texture3DTmp = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %7, i32 0, <3 x float> %coords)
  store <4 x float> %texture3DTmp, <4 x float>* %texture3D_retval
  %8 = load <4 x float>* %texture3D_retval
  %9 = load <4 x float>* %v
  %10 = fadd <4 x float> %8, %9
  store <4 x float> %10, <4 x float>* %assignment_tmp1
  %11 = load <4 x float>* %assignment_tmp1
  store <4 x float> %11, <4 x float>* %w
  %12 = load <4 x float>* %w
  %13 = load <4 x float> addrspace(1)* @u
  %14 = load float addrspace(1)* @blend
  %15 = load float addrspace(1)* @blend
  %16 = fmul float %14, %15
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %12, <4 x float> %13, float %16)
  store <4 x float> %mix, <4 x float>* %mix_retval
  %17 = load <4 x float>* %mix_retval
  store <4 x float> %17, <4 x float>* %assignment_tmp2
  %18 = load <4 x float>* %assignment_tmp2
  store <4 x float> %18, <4 x float>* @gl_FragColor
  %19 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %19)
  ret void
}

declare <2 x float> @llvm.gla.getInterpolant.v2f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float>, i32) nounwind readnone

declare <3 x float> @llvm.gla.getInterpolant.v3f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@texSampler2D = external addrspace(1) constant i32
@scale = external addrspace(1) constant <2 x float>
@texSampler3D = external addrspace(1) constant i32
@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float

define void @main() {
entry:
  %0 = load i32 addrspace(1)* @texSampler2D
  %t = call <2 x float> @llvm.gla.getInterpolant.v2f32(i32 0)
  %1 = load <2 x float> addrspace(1)* @scale
  %2 = fadd <2 x float> %t, %1
  %3 = fdiv <2 x float> %2, %1
  %texture2DTmp = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %3)
  %swizzleTmp = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float> %texture2DTmp, i32 27)
  %4 = load i32 addrspace(1)* @texSampler3D
  %coords = call <3 x float> @llvm.gla.getInterpolant.v3f32(i32 0)
  %texture3DTmp = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %4, i32 0, <3 x float> %coords)
  %5 = fadd <4 x float> %texture3DTmp, %swizzleTmp
  %6 = load <4 x float> addrspace(1)* @u
  %7 = load float addrspace(1)* @blend
  %8 = fmul float %7, %7
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %5, <4 x float> %6, float %8)
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %mix)
  ret void
}

declare <2 x float> @llvm.gla.getInterpolant.v2f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float>, i32) nounwind readnone

declare <3 x float> @llvm.gla.getInterpolant.v3f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind

***Unsupported functionality: Intrinsic argument count: 4
compiling checkpoint1.frag...
uniform sampler2D texSampler2D ; 
uniform sampler3D texSampler3D ; 
uniform float blend ; 
uniform vec2 scale ; 
uniform vec4 u ; 
varying vec2 t ; 
varying vec3 coords ; 
void  main (){
vec4 v = texture2D ( texSampler2D , t + scale / scale ) . wzyx ; vec4 w = texture3D ( texSampler3D , coords ) + v ; gl_FragColor = mix ( w , u , blend * blend ) ; }



(
(declare (in ) vec3 coords)
(declare (in ) vec2 t)
(declare (uniform ) vec4 u)
(declare (uniform ) vec2 scale)
(declare (uniform ) float blend)
(declare (uniform ) sampler3D texSampler3D)
(declare (uniform ) sampler2D texSampler2D)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 w)
      (declare () vec4 v)
      (declare (temporary ) vec4 texture2D_retval)
      (assign (constant bool (1)) (xyzw) (var_ref texture2D_retval)  (call texture2D ((var_ref texSampler2D) (expression vec2 / (expression vec2 + (var_ref t) (var_ref scale) ) (var_ref scale) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (swiz wzyx (var_ref texture2D_retval) )) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 texture3D_retval)
      (assign (constant bool (1)) (xyzw) (var_ref texture3D_retval)  (call texture3D ((var_ref texSampler3D) (var_ref coords) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref texture3D_retval) (var_ref v) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref w)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref w) (var_ref u) (expression float * (var_ref blend) (var_ref blend) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (var_ref mix_retval) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
    ))

)


)
LunarGoo
#version 130
uniform int texSampler2D;
uniform vec2 scale;
uniform int texSampler3D;
uniform vec4 u;
uniform float blend;
in vec2 t;
in vec3 coords;

void main()
{
    vec2 temp21 = t + scale;
    vec2 temp22 = temp21 / scale;
    vec4 temp23 = texture2D(texSampler2D, temp22);
    vec4 temp24 = temp23.wzyx;
    vec4 temp25 = texture3D(texSampler3D, coords);
    vec4 temp26 = temp25 + temp24;
    float temp27 = blend * blend;
    vec4 temp28 = mix(temp26, u, temp27);
    gl_FragColor = temp28;
    return;
}
