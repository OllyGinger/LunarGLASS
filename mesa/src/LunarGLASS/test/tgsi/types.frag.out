; ModuleID = 'Top'

@u_b = external addrspace(1) constant i1
@u_b2 = external addrspace(1) constant <2 x i1>
@u_b3 = external addrspace(1) constant <3 x i1>
@u_b4 = external addrspace(1) constant <4 x i1>
@u_i = external addrspace(1) constant i32
@u_i2 = external addrspace(1) constant <2 x i32>
@u_i3 = external addrspace(1) constant <3 x i32>
@u_i4 = external addrspace(1) constant <4 x i32>
@u_f = external addrspace(1) constant float
@u_f2 = external addrspace(1) constant <2 x float>
@u_f3 = external addrspace(1) constant <3 x float>
@u_f4 = external addrspace(1) constant <4 x float>
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %conditional_tmp = alloca <4 x float>
  %or_tmp108 = alloca i1
  %or_tmp104 = alloca i1
  %or_tmp100 = alloca i1
  %or_tmp96 = alloca i1
  %or_tmp92 = alloca i1
  %or_tmp88 = alloca i1
  %or_tmp84 = alloca i1
  %or_tmp80 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp75 = alloca <4 x float>
  %assignment_tmp74 = alloca <3 x float>
  %assignment_tmp73 = alloca <2 x float>
  %assignment_tmp72 = alloca float
  %assignment_tmp71 = alloca <4 x i32>
  %assignment_tmp70 = alloca <3 x i32>
  %assignment_tmp69 = alloca <2 x i32>
  %assignment_tmp = alloca i32
  %vec_ctor68 = alloca <4 x i1>
  %and_tmp64 = alloca i1
  %and_tmp60 = alloca i1
  %and_tmp55 = alloca i1
  %and_tmp51 = alloca i1
  %and_tmp46 = alloca i1
  %and_tmp42 = alloca i1
  %and_tmp38 = alloca i1
  %vec_ctor36 = alloca <3 x i1>
  %and_tmp32 = alloca i1
  %and_tmp28 = alloca i1
  %and_tmp23 = alloca i1
  %and_tmp19 = alloca i1
  %and_tmp15 = alloca i1
  %vec_ctor = alloca <2 x i1>
  %and_tmp10 = alloca i1
  %and_tmp6 = alloca i1
  %and_tmp2 = alloca i1
  %and_tmp = alloca i1
  %0 = load i1 addrspace(1)* @u_b
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %i_b = call i1 @llvm.gla.readData.i1(i32 0)
  store i1 %i_b, i1* %and_tmp
  br label %ifmerge

else:                                             ; preds = %entry
  store i1 false, i1* %and_tmp
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %1 = load <2 x i1> addrspace(1)* @u_b2
  %2 = extractelement <2 x i1> %1, i32 0
  br i1 %2, label %then1, label %else3

then1:                                            ; preds = %ifmerge
  %i_b2 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %3 = extractelement <2 x i1> %i_b2, i32 0
  store i1 %3, i1* %and_tmp2
  br label %ifmerge4

else3:                                            ; preds = %ifmerge
  store i1 false, i1* %and_tmp2
  br label %ifmerge4

ifmerge4:                                         ; preds = %else3, %then1
  %4 = load i1* %and_tmp2
  br i1 %4, label %then5, label %else7

then5:                                            ; preds = %ifmerge4
  %5 = load <2 x i1> addrspace(1)* @u_b2
  %6 = extractelement <2 x i1> %5, i32 1
  store i1 %6, i1* %and_tmp6
  br label %ifmerge8

else7:                                            ; preds = %ifmerge4
  store i1 false, i1* %and_tmp6
  br label %ifmerge8

ifmerge8:                                         ; preds = %else7, %then5
  %7 = load i1* %and_tmp6
  br i1 %7, label %then9, label %else12

then9:                                            ; preds = %ifmerge8
  %i_b211 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %8 = extractelement <2 x i1> %i_b211, i32 1
  store i1 %8, i1* %and_tmp10
  br label %ifmerge13

else12:                                           ; preds = %ifmerge8
  store i1 false, i1* %and_tmp10
  br label %ifmerge13

ifmerge13:                                        ; preds = %else12, %then9
  %9 = load i1* %and_tmp10
  %10 = insertelement <2 x i1> undef, i1 %9, i32 0
  %11 = insertelement <2 x i1> %10, i1 %9, i32 1
  store <2 x i1> %11, <2 x i1>* %vec_ctor
  %12 = load <3 x i1> addrspace(1)* @u_b3
  %13 = extractelement <3 x i1> %12, i32 0
  br i1 %13, label %then14, label %else16

then14:                                           ; preds = %ifmerge13
  %i_b3 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %14 = extractelement <3 x i1> %i_b3, i32 0
  store i1 %14, i1* %and_tmp15
  br label %ifmerge17

else16:                                           ; preds = %ifmerge13
  store i1 false, i1* %and_tmp15
  br label %ifmerge17

ifmerge17:                                        ; preds = %else16, %then14
  %15 = load i1* %and_tmp15
  br i1 %15, label %then18, label %else20

then18:                                           ; preds = %ifmerge17
  %16 = load <3 x i1> addrspace(1)* @u_b3
  %17 = extractelement <3 x i1> %16, i32 1
  store i1 %17, i1* %and_tmp19
  br label %ifmerge21

else20:                                           ; preds = %ifmerge17
  store i1 false, i1* %and_tmp19
  br label %ifmerge21

ifmerge21:                                        ; preds = %else20, %then18
  %18 = load i1* %and_tmp19
  br i1 %18, label %then22, label %else25

then22:                                           ; preds = %ifmerge21
  %i_b324 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %19 = extractelement <3 x i1> %i_b324, i32 1
  store i1 %19, i1* %and_tmp23
  br label %ifmerge26

else25:                                           ; preds = %ifmerge21
  store i1 false, i1* %and_tmp23
  br label %ifmerge26

ifmerge26:                                        ; preds = %else25, %then22
  %20 = load i1* %and_tmp23
  br i1 %20, label %then27, label %else29

then27:                                           ; preds = %ifmerge26
  %21 = load <3 x i1> addrspace(1)* @u_b3
  %22 = extractelement <3 x i1> %21, i32 2
  store i1 %22, i1* %and_tmp28
  br label %ifmerge30

else29:                                           ; preds = %ifmerge26
  store i1 false, i1* %and_tmp28
  br label %ifmerge30

ifmerge30:                                        ; preds = %else29, %then27
  %23 = load i1* %and_tmp28
  br i1 %23, label %then31, label %else34

then31:                                           ; preds = %ifmerge30
  %i_b333 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %24 = extractelement <3 x i1> %i_b333, i32 2
  store i1 %24, i1* %and_tmp32
  br label %ifmerge35

else34:                                           ; preds = %ifmerge30
  store i1 false, i1* %and_tmp32
  br label %ifmerge35

ifmerge35:                                        ; preds = %else34, %then31
  %25 = load i1* %and_tmp32
  %26 = insertelement <3 x i1> undef, i1 %25, i32 0
  %27 = insertelement <3 x i1> %26, i1 %25, i32 1
  %28 = insertelement <3 x i1> %27, i1 %25, i32 2
  store <3 x i1> %28, <3 x i1>* %vec_ctor36
  %29 = load <4 x i1> addrspace(1)* @u_b4
  %30 = extractelement <4 x i1> %29, i32 0
  br i1 %30, label %then37, label %else39

then37:                                           ; preds = %ifmerge35
  %i_b4 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %31 = extractelement <4 x i1> %i_b4, i32 0
  store i1 %31, i1* %and_tmp38
  br label %ifmerge40

else39:                                           ; preds = %ifmerge35
  store i1 false, i1* %and_tmp38
  br label %ifmerge40

ifmerge40:                                        ; preds = %else39, %then37
  %32 = load i1* %and_tmp38
  br i1 %32, label %then41, label %else43

then41:                                           ; preds = %ifmerge40
  %33 = load <4 x i1> addrspace(1)* @u_b4
  %34 = extractelement <4 x i1> %33, i32 1
  store i1 %34, i1* %and_tmp42
  br label %ifmerge44

else43:                                           ; preds = %ifmerge40
  store i1 false, i1* %and_tmp42
  br label %ifmerge44

ifmerge44:                                        ; preds = %else43, %then41
  %35 = load i1* %and_tmp42
  br i1 %35, label %then45, label %else48

then45:                                           ; preds = %ifmerge44
  %i_b447 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %36 = extractelement <4 x i1> %i_b447, i32 1
  store i1 %36, i1* %and_tmp46
  br label %ifmerge49

else48:                                           ; preds = %ifmerge44
  store i1 false, i1* %and_tmp46
  br label %ifmerge49

ifmerge49:                                        ; preds = %else48, %then45
  %37 = load i1* %and_tmp46
  br i1 %37, label %then50, label %else52

then50:                                           ; preds = %ifmerge49
  %38 = load <4 x i1> addrspace(1)* @u_b4
  %39 = extractelement <4 x i1> %38, i32 2
  store i1 %39, i1* %and_tmp51
  br label %ifmerge53

else52:                                           ; preds = %ifmerge49
  store i1 false, i1* %and_tmp51
  br label %ifmerge53

ifmerge53:                                        ; preds = %else52, %then50
  %40 = load i1* %and_tmp51
  br i1 %40, label %then54, label %else57

then54:                                           ; preds = %ifmerge53
  %i_b456 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %41 = extractelement <4 x i1> %i_b456, i32 2
  store i1 %41, i1* %and_tmp55
  br label %ifmerge58

else57:                                           ; preds = %ifmerge53
  store i1 false, i1* %and_tmp55
  br label %ifmerge58

ifmerge58:                                        ; preds = %else57, %then54
  %42 = load i1* %and_tmp55
  br i1 %42, label %then59, label %else61

then59:                                           ; preds = %ifmerge58
  %43 = load <4 x i1> addrspace(1)* @u_b4
  %44 = extractelement <4 x i1> %43, i32 3
  store i1 %44, i1* %and_tmp60
  br label %ifmerge62

else61:                                           ; preds = %ifmerge58
  store i1 false, i1* %and_tmp60
  br label %ifmerge62

ifmerge62:                                        ; preds = %else61, %then59
  %45 = load i1* %and_tmp60
  br i1 %45, label %then63, label %else66

then63:                                           ; preds = %ifmerge62
  %i_b465 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %46 = extractelement <4 x i1> %i_b465, i32 3
  store i1 %46, i1* %and_tmp64
  br label %ifmerge67

else66:                                           ; preds = %ifmerge62
  store i1 false, i1* %and_tmp64
  br label %ifmerge67

ifmerge67:                                        ; preds = %else66, %then63
  %47 = load i1* %and_tmp64
  %48 = insertelement <4 x i1> undef, i1 %47, i32 0
  %49 = insertelement <4 x i1> %48, i1 %47, i32 1
  %50 = insertelement <4 x i1> %49, i1 %47, i32 2
  %51 = insertelement <4 x i1> %50, i1 %47, i32 3
  store <4 x i1> %51, <4 x i1>* %vec_ctor68
  %52 = load i32 addrspace(1)* @u_i
  %i_i = call i32 @llvm.gla.readData.i32(i32 4)
  %53 = add i32 %52, %i_i
  store i32 %53, i32* %assignment_tmp
  %54 = load <2 x i32> addrspace(1)* @u_i2
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 5)
  %55 = add <2 x i32> %54, %i_i2
  store <2 x i32> %55, <2 x i32>* %assignment_tmp69
  %56 = load <3 x i32> addrspace(1)* @u_i3
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 6)
  %57 = add <3 x i32> %56, %i_i3
  store <3 x i32> %57, <3 x i32>* %assignment_tmp70
  %58 = load <4 x i32> addrspace(1)* @u_i4
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 7)
  %59 = add <4 x i32> %58, %i_i4
  store <4 x i32> %59, <4 x i32>* %assignment_tmp71
  %60 = load float addrspace(1)* @u_f
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 8, i32 0)
  %61 = fadd float %60, %i_f
  store float %61, float* %assignment_tmp72
  %62 = load <2 x float> addrspace(1)* @u_f2
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 9, i32 0)
  %63 = fadd <2 x float> %62, %i_f2
  store <2 x float> %63, <2 x float>* %assignment_tmp73
  %64 = load <3 x float> addrspace(1)* @u_f3
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 10, i32 0)
  %65 = fadd <3 x float> %64, %i_f3
  store <3 x float> %65, <3 x float>* %assignment_tmp74
  %66 = load <4 x float> addrspace(1)* @u_f4
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 11, i32 0)
  %67 = fadd <4 x float> %66, %i_f4
  store <4 x float> %67, <4 x float>* %assignment_tmp75
  %68 = load i1* %and_tmp
  br i1 %68, label %then76, label %else77

then76:                                           ; preds = %ifmerge67
  store i1 true, i1* %or_tmp
  br label %ifmerge78

else77:                                           ; preds = %ifmerge67
  %69 = load <2 x i1>* %vec_ctor
  %70 = extractelement <2 x i1> %69, i32 0
  store i1 %70, i1* %or_tmp
  br label %ifmerge78

ifmerge78:                                        ; preds = %else77, %then76
  %71 = load i1* %or_tmp
  br i1 %71, label %then79, label %else81

then79:                                           ; preds = %ifmerge78
  store i1 true, i1* %or_tmp80
  br label %ifmerge82

else81:                                           ; preds = %ifmerge78
  %72 = load <2 x i1>* %vec_ctor
  %73 = extractelement <2 x i1> %72, i32 1
  store i1 %73, i1* %or_tmp80
  br label %ifmerge82

ifmerge82:                                        ; preds = %else81, %then79
  %74 = load i1* %or_tmp80
  br i1 %74, label %then83, label %else85

then83:                                           ; preds = %ifmerge82
  store i1 true, i1* %or_tmp84
  br label %ifmerge86

else85:                                           ; preds = %ifmerge82
  %75 = load <3 x i1>* %vec_ctor36
  %76 = extractelement <3 x i1> %75, i32 0
  store i1 %76, i1* %or_tmp84
  br label %ifmerge86

ifmerge86:                                        ; preds = %else85, %then83
  %77 = load i1* %or_tmp84
  br i1 %77, label %then87, label %else89

then87:                                           ; preds = %ifmerge86
  store i1 true, i1* %or_tmp88
  br label %ifmerge90

else89:                                           ; preds = %ifmerge86
  %78 = load <3 x i1>* %vec_ctor36
  %79 = extractelement <3 x i1> %78, i32 1
  store i1 %79, i1* %or_tmp88
  br label %ifmerge90

ifmerge90:                                        ; preds = %else89, %then87
  %80 = load i1* %or_tmp88
  br i1 %80, label %then91, label %else93

then91:                                           ; preds = %ifmerge90
  store i1 true, i1* %or_tmp92
  br label %ifmerge94

else93:                                           ; preds = %ifmerge90
  %81 = load <3 x i1>* %vec_ctor36
  %82 = extractelement <3 x i1> %81, i32 2
  store i1 %82, i1* %or_tmp92
  br label %ifmerge94

ifmerge94:                                        ; preds = %else93, %then91
  %83 = load i1* %or_tmp92
  br i1 %83, label %then95, label %else97

then95:                                           ; preds = %ifmerge94
  store i1 true, i1* %or_tmp96
  br label %ifmerge98

else97:                                           ; preds = %ifmerge94
  %84 = load <4 x i1>* %vec_ctor68
  %85 = extractelement <4 x i1> %84, i32 0
  store i1 %85, i1* %or_tmp96
  br label %ifmerge98

ifmerge98:                                        ; preds = %else97, %then95
  %86 = load i1* %or_tmp96
  br i1 %86, label %then99, label %else101

then99:                                           ; preds = %ifmerge98
  store i1 true, i1* %or_tmp100
  br label %ifmerge102

else101:                                          ; preds = %ifmerge98
  %87 = load <4 x i1>* %vec_ctor68
  %88 = extractelement <4 x i1> %87, i32 1
  store i1 %88, i1* %or_tmp100
  br label %ifmerge102

ifmerge102:                                       ; preds = %else101, %then99
  %89 = load i1* %or_tmp100
  br i1 %89, label %then103, label %else105

then103:                                          ; preds = %ifmerge102
  store i1 true, i1* %or_tmp104
  br label %ifmerge106

else105:                                          ; preds = %ifmerge102
  %90 = load <4 x i1>* %vec_ctor68
  %91 = extractelement <4 x i1> %90, i32 2
  store i1 %91, i1* %or_tmp104
  br label %ifmerge106

ifmerge106:                                       ; preds = %else105, %then103
  %92 = load i1* %or_tmp104
  br i1 %92, label %then107, label %else109

then107:                                          ; preds = %ifmerge106
  store i1 true, i1* %or_tmp108
  br label %ifmerge110

else109:                                          ; preds = %ifmerge106
  %93 = load <4 x i1>* %vec_ctor68
  %94 = extractelement <4 x i1> %93, i32 3
  store i1 %94, i1* %or_tmp108
  br label %ifmerge110

ifmerge110:                                       ; preds = %else109, %then107
  %95 = load i1* %or_tmp108
  br i1 %95, label %then111, label %else112

then111:                                          ; preds = %ifmerge110
  %96 = load i32* %assignment_tmp
  %97 = load <2 x i32>* %assignment_tmp69
  %98 = extractelement <2 x i32> %97, i32 0
  %99 = add i32 %96, %98
  %100 = load <2 x i32>* %assignment_tmp69
  %101 = extractelement <2 x i32> %100, i32 1
  %102 = add i32 %99, %101
  %103 = load <3 x i32>* %assignment_tmp70
  %104 = extractelement <3 x i32> %103, i32 0
  %105 = add i32 %102, %104
  %106 = load <3 x i32>* %assignment_tmp70
  %107 = extractelement <3 x i32> %106, i32 1
  %108 = add i32 %105, %107
  %109 = load <3 x i32>* %assignment_tmp70
  %110 = extractelement <3 x i32> %109, i32 2
  %111 = add i32 %108, %110
  %112 = load <4 x i32>* %assignment_tmp71
  %113 = extractelement <4 x i32> %112, i32 0
  %114 = add i32 %111, %113
  %115 = load <4 x i32>* %assignment_tmp71
  %116 = extractelement <4 x i32> %115, i32 1
  %117 = add i32 %114, %116
  %118 = load <4 x i32>* %assignment_tmp71
  %119 = extractelement <4 x i32> %118, i32 2
  %120 = add i32 %117, %119
  %121 = load <4 x i32>* %assignment_tmp71
  %122 = extractelement <4 x i32> %121, i32 3
  %123 = add i32 %120, %122
  %124 = sitofp i32 %123 to float
  %125 = load float* %assignment_tmp72
  %126 = fadd float %124, %125
  %127 = load <2 x float>* %assignment_tmp73
  %128 = extractelement <2 x float> %127, i32 0
  %129 = fadd float %126, %128
  %130 = load <2 x float>* %assignment_tmp73
  %131 = extractelement <2 x float> %130, i32 1
  %132 = fadd float %129, %131
  %133 = load <3 x float>* %assignment_tmp74
  %134 = extractelement <3 x float> %133, i32 0
  %135 = fadd float %132, %134
  %136 = load <3 x float>* %assignment_tmp74
  %137 = extractelement <3 x float> %136, i32 1
  %138 = fadd float %135, %137
  %139 = load <3 x float>* %assignment_tmp74
  %140 = extractelement <3 x float> %139, i32 2
  %141 = fadd float %138, %140
  %142 = load <4 x float>* %assignment_tmp75
  %143 = extractelement <4 x float> %142, i32 0
  %144 = fadd float %141, %143
  %145 = load <4 x float>* %assignment_tmp75
  %146 = extractelement <4 x float> %145, i32 1
  %147 = fadd float %144, %146
  %148 = load <4 x float>* %assignment_tmp75
  %149 = extractelement <4 x float> %148, i32 2
  %150 = fadd float %147, %149
  %151 = load <4 x float>* %assignment_tmp75
  %152 = extractelement <4 x float> %151, i32 3
  %153 = fadd float %150, %152
  %154 = insertelement <4 x float> undef, float %153, i32 0
  %155 = insertelement <4 x float> %154, float %153, i32 1
  %156 = insertelement <4 x float> %155, float %153, i32 2
  %157 = insertelement <4 x float> %156, float %153, i32 3
  store <4 x float> %157, <4 x float>* %conditional_tmp
  br label %ifmerge113

else112:                                          ; preds = %ifmerge110
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %conditional_tmp
  br label %ifmerge113

ifmerge113:                                       ; preds = %else112, %then111
  %158 = load <4 x float>* %conditional_tmp
  store <4 x float> %158, <4 x float>* @gl_FragColor
  %159 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %159)
  ret void
}

declare i1 @llvm.gla.readData.i1(i32) nounwind readonly

declare <2 x i1> @llvm.gla.readData.v2i1(i32) nounwind readonly

declare <3 x i1> @llvm.gla.readData.v3i1(i32) nounwind readonly

declare <4 x i1> @llvm.gla.readData.v4i1(i32) nounwind readonly

declare i32 @llvm.gla.readData.i32(i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@u_b = external addrspace(1) constant i1
@u_b2 = external addrspace(1) constant <2 x i1>
@u_b3 = external addrspace(1) constant <3 x i1>
@u_b4 = external addrspace(1) constant <4 x i1>
@u_i = external addrspace(1) constant i32
@u_i2 = external addrspace(1) constant <2 x i32>
@u_i3 = external addrspace(1) constant <3 x i32>
@u_i4 = external addrspace(1) constant <4 x i32>
@u_f = external addrspace(1) constant float
@u_f2 = external addrspace(1) constant <2 x float>
@u_f3 = external addrspace(1) constant <3 x float>
@u_f4 = external addrspace(1) constant <4 x float>

define void @main() {
entry:
  %0 = load i1 addrspace(1)* @u_b
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %i_b = call i1 @llvm.gla.readData.i1(i32 0)
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %and_tmp.0 = phi i1 [ %i_b, %then ], [ false, %else ]
  %1 = load <2 x i1> addrspace(1)* @u_b2
  %2 = extractelement <2 x i1> %1, i32 0
  br i1 %2, label %then1, label %else3

then1:                                            ; preds = %ifmerge
  %i_b2 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %3 = extractelement <2 x i1> %i_b2, i32 0
  br label %ifmerge4

else3:                                            ; preds = %ifmerge
  br label %ifmerge4

ifmerge4:                                         ; preds = %else3, %then1
  %and_tmp2.0 = phi i1 [ %3, %then1 ], [ false, %else3 ]
  br i1 %and_tmp2.0, label %then5, label %else7

then5:                                            ; preds = %ifmerge4
  %4 = extractelement <2 x i1> %1, i32 1
  br label %ifmerge8

else7:                                            ; preds = %ifmerge4
  br label %ifmerge8

ifmerge8:                                         ; preds = %else7, %then5
  %and_tmp6.0 = phi i1 [ %4, %then5 ], [ false, %else7 ]
  br i1 %and_tmp6.0, label %then9, label %else12

then9:                                            ; preds = %ifmerge8
  %i_b211 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1)
  %5 = extractelement <2 x i1> %i_b211, i32 1
  br label %ifmerge13

else12:                                           ; preds = %ifmerge8
  br label %ifmerge13

ifmerge13:                                        ; preds = %else12, %then9
  %and_tmp10.0 = phi i1 [ %5, %then9 ], [ false, %else12 ]
  %6 = call <2 x i1> @llvm.gla.multiInsert.v2i1.v2i1.i1.i1.i1.i1(<2 x i1> undef, i32 3, i1 %and_tmp10.0, i32 -1, i1 %and_tmp10.0, i32 -1, i1 false, i32 -1, i1 false, i32 -1)
  %7 = load <3 x i1> addrspace(1)* @u_b3
  %8 = extractelement <3 x i1> %7, i32 0
  br i1 %8, label %then14, label %else16

then14:                                           ; preds = %ifmerge13
  %i_b3 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %9 = extractelement <3 x i1> %i_b3, i32 0
  br label %ifmerge17

else16:                                           ; preds = %ifmerge13
  br label %ifmerge17

ifmerge17:                                        ; preds = %else16, %then14
  %and_tmp15.0 = phi i1 [ %9, %then14 ], [ false, %else16 ]
  br i1 %and_tmp15.0, label %then18, label %else20

then18:                                           ; preds = %ifmerge17
  %10 = extractelement <3 x i1> %7, i32 1
  br label %ifmerge21

else20:                                           ; preds = %ifmerge17
  br label %ifmerge21

ifmerge21:                                        ; preds = %else20, %then18
  %and_tmp19.0 = phi i1 [ %10, %then18 ], [ false, %else20 ]
  br i1 %and_tmp19.0, label %then22, label %else25

then22:                                           ; preds = %ifmerge21
  %i_b324 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %11 = extractelement <3 x i1> %i_b324, i32 1
  br label %ifmerge26

else25:                                           ; preds = %ifmerge21
  br label %ifmerge26

ifmerge26:                                        ; preds = %else25, %then22
  %and_tmp23.0 = phi i1 [ %11, %then22 ], [ false, %else25 ]
  br i1 %and_tmp23.0, label %then27, label %else29

then27:                                           ; preds = %ifmerge26
  %12 = extractelement <3 x i1> %7, i32 2
  br label %ifmerge30

else29:                                           ; preds = %ifmerge26
  br label %ifmerge30

ifmerge30:                                        ; preds = %else29, %then27
  %and_tmp28.0 = phi i1 [ %12, %then27 ], [ false, %else29 ]
  br i1 %and_tmp28.0, label %then31, label %else34

then31:                                           ; preds = %ifmerge30
  %i_b333 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2)
  %13 = extractelement <3 x i1> %i_b333, i32 2
  br label %ifmerge35

else34:                                           ; preds = %ifmerge30
  br label %ifmerge35

ifmerge35:                                        ; preds = %else34, %then31
  %and_tmp32.0 = phi i1 [ %13, %then31 ], [ false, %else34 ]
  %14 = call <3 x i1> @llvm.gla.multiInsert.v3i1.v3i1.i1.i1.i1.i1(<3 x i1> undef, i32 7, i1 %and_tmp32.0, i32 -1, i1 %and_tmp32.0, i32 -1, i1 %and_tmp32.0, i32 -1, i1 false, i32 -1)
  %15 = load <4 x i1> addrspace(1)* @u_b4
  %16 = extractelement <4 x i1> %15, i32 0
  br i1 %16, label %then37, label %else39

then37:                                           ; preds = %ifmerge35
  %i_b4 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %17 = extractelement <4 x i1> %i_b4, i32 0
  br label %ifmerge40

else39:                                           ; preds = %ifmerge35
  br label %ifmerge40

ifmerge40:                                        ; preds = %else39, %then37
  %and_tmp38.0 = phi i1 [ %17, %then37 ], [ false, %else39 ]
  br i1 %and_tmp38.0, label %then41, label %else43

then41:                                           ; preds = %ifmerge40
  %18 = extractelement <4 x i1> %15, i32 1
  br label %ifmerge44

else43:                                           ; preds = %ifmerge40
  br label %ifmerge44

ifmerge44:                                        ; preds = %else43, %then41
  %and_tmp42.0 = phi i1 [ %18, %then41 ], [ false, %else43 ]
  br i1 %and_tmp42.0, label %then45, label %else48

then45:                                           ; preds = %ifmerge44
  %i_b447 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %19 = extractelement <4 x i1> %i_b447, i32 1
  br label %ifmerge49

else48:                                           ; preds = %ifmerge44
  br label %ifmerge49

ifmerge49:                                        ; preds = %else48, %then45
  %and_tmp46.0 = phi i1 [ %19, %then45 ], [ false, %else48 ]
  br i1 %and_tmp46.0, label %then50, label %else52

then50:                                           ; preds = %ifmerge49
  %20 = extractelement <4 x i1> %15, i32 2
  br label %ifmerge53

else52:                                           ; preds = %ifmerge49
  br label %ifmerge53

ifmerge53:                                        ; preds = %else52, %then50
  %and_tmp51.0 = phi i1 [ %20, %then50 ], [ false, %else52 ]
  br i1 %and_tmp51.0, label %then54, label %else57

then54:                                           ; preds = %ifmerge53
  %i_b456 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %21 = extractelement <4 x i1> %i_b456, i32 2
  br label %ifmerge58

else57:                                           ; preds = %ifmerge53
  br label %ifmerge58

ifmerge58:                                        ; preds = %else57, %then54
  %and_tmp55.0 = phi i1 [ %21, %then54 ], [ false, %else57 ]
  br i1 %and_tmp55.0, label %then59, label %else61

then59:                                           ; preds = %ifmerge58
  %22 = extractelement <4 x i1> %15, i32 3
  br label %ifmerge62

else61:                                           ; preds = %ifmerge58
  br label %ifmerge62

ifmerge62:                                        ; preds = %else61, %then59
  %and_tmp60.0 = phi i1 [ %22, %then59 ], [ false, %else61 ]
  br i1 %and_tmp60.0, label %then63, label %else66

then63:                                           ; preds = %ifmerge62
  %i_b465 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3)
  %23 = extractelement <4 x i1> %i_b465, i32 3
  br label %ifmerge67

else66:                                           ; preds = %ifmerge62
  br label %ifmerge67

ifmerge67:                                        ; preds = %else66, %then63
  %and_tmp64.0 = phi i1 [ %23, %then63 ], [ false, %else66 ]
  %24 = call <4 x i1> @llvm.gla.multiInsert.v4i1.v4i1.i1.i1.i1.i1(<4 x i1> undef, i32 15, i1 %and_tmp64.0, i32 -1, i1 %and_tmp64.0, i32 -1, i1 %and_tmp64.0, i32 -1, i1 %and_tmp64.0, i32 -1)
  %25 = load i32 addrspace(1)* @u_i
  %i_i = call i32 @llvm.gla.readData.i32(i32 4)
  %26 = load <2 x i32> addrspace(1)* @u_i2
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 5)
  %27 = add <2 x i32> %26, %i_i2
  %28 = load <3 x i32> addrspace(1)* @u_i3
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 6)
  %29 = add <3 x i32> %28, %i_i3
  %30 = load <4 x i32> addrspace(1)* @u_i4
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 7)
  %31 = add <4 x i32> %30, %i_i4
  %32 = load float addrspace(1)* @u_f
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 8, i32 0)
  %33 = fadd float %32, %i_f
  %34 = load <2 x float> addrspace(1)* @u_f2
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 9, i32 0)
  %35 = fadd <2 x float> %34, %i_f2
  %36 = load <3 x float> addrspace(1)* @u_f3
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 10, i32 0)
  %37 = fadd <3 x float> %36, %i_f3
  %38 = load <4 x float> addrspace(1)* @u_f4
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 11, i32 0)
  %39 = fadd <4 x float> %38, %i_f4
  br i1 %and_tmp.0, label %then76, label %else77

then76:                                           ; preds = %ifmerge67
  br label %ifmerge78

else77:                                           ; preds = %ifmerge67
  %40 = extractelement <2 x i1> %6, i32 0
  br label %ifmerge78

ifmerge78:                                        ; preds = %else77, %then76
  %or_tmp.0 = phi i1 [ true, %then76 ], [ %40, %else77 ]
  br i1 %or_tmp.0, label %then79, label %else81

then79:                                           ; preds = %ifmerge78
  br label %ifmerge82

else81:                                           ; preds = %ifmerge78
  %41 = extractelement <2 x i1> %6, i32 1
  br label %ifmerge82

ifmerge82:                                        ; preds = %else81, %then79
  %or_tmp80.0 = phi i1 [ true, %then79 ], [ %41, %else81 ]
  br i1 %or_tmp80.0, label %then83, label %else85

then83:                                           ; preds = %ifmerge82
  br label %ifmerge86

else85:                                           ; preds = %ifmerge82
  %42 = extractelement <3 x i1> %14, i32 0
  br label %ifmerge86

ifmerge86:                                        ; preds = %else85, %then83
  %or_tmp84.0 = phi i1 [ true, %then83 ], [ %42, %else85 ]
  br i1 %or_tmp84.0, label %then87, label %else89

then87:                                           ; preds = %ifmerge86
  br label %ifmerge90

else89:                                           ; preds = %ifmerge86
  %43 = extractelement <3 x i1> %14, i32 1
  br label %ifmerge90

ifmerge90:                                        ; preds = %else89, %then87
  %or_tmp88.0 = phi i1 [ true, %then87 ], [ %43, %else89 ]
  br i1 %or_tmp88.0, label %then91, label %else93

then91:                                           ; preds = %ifmerge90
  br label %ifmerge94

else93:                                           ; preds = %ifmerge90
  %44 = extractelement <3 x i1> %14, i32 2
  br label %ifmerge94

ifmerge94:                                        ; preds = %else93, %then91
  %or_tmp92.0 = phi i1 [ true, %then91 ], [ %44, %else93 ]
  br i1 %or_tmp92.0, label %then95, label %else97

then95:                                           ; preds = %ifmerge94
  br label %ifmerge98

else97:                                           ; preds = %ifmerge94
  %45 = extractelement <4 x i1> %24, i32 0
  br label %ifmerge98

ifmerge98:                                        ; preds = %else97, %then95
  %or_tmp96.0 = phi i1 [ true, %then95 ], [ %45, %else97 ]
  br i1 %or_tmp96.0, label %then99, label %else101

then99:                                           ; preds = %ifmerge98
  br label %ifmerge102

else101:                                          ; preds = %ifmerge98
  %46 = extractelement <4 x i1> %24, i32 1
  br label %ifmerge102

ifmerge102:                                       ; preds = %else101, %then99
  %or_tmp100.0 = phi i1 [ true, %then99 ], [ %46, %else101 ]
  br i1 %or_tmp100.0, label %then103, label %else105

then103:                                          ; preds = %ifmerge102
  br label %ifmerge106

else105:                                          ; preds = %ifmerge102
  %47 = extractelement <4 x i1> %24, i32 2
  br label %ifmerge106

ifmerge106:                                       ; preds = %else105, %then103
  %or_tmp104.0 = phi i1 [ true, %then103 ], [ %47, %else105 ]
  br i1 %or_tmp104.0, label %then107, label %else109

then107:                                          ; preds = %ifmerge106
  br label %ifmerge110

else109:                                          ; preds = %ifmerge106
  %48 = extractelement <4 x i1> %24, i32 3
  br label %ifmerge110

ifmerge110:                                       ; preds = %else109, %then107
  %or_tmp108.0 = phi i1 [ true, %then107 ], [ %48, %else109 ]
  br i1 %or_tmp108.0, label %then111, label %else112

then111:                                          ; preds = %ifmerge110
  %49 = extractelement <2 x i32> %27, i32 0
  %50 = extractelement <2 x i32> %27, i32 1
  %51 = extractelement <3 x i32> %29, i32 0
  %52 = extractelement <3 x i32> %29, i32 1
  %53 = extractelement <3 x i32> %29, i32 2
  %54 = extractelement <4 x i32> %31, i32 0
  %55 = extractelement <4 x i32> %31, i32 1
  %56 = extractelement <4 x i32> %31, i32 2
  %57 = extractelement <4 x i32> %31, i32 3
  %58 = add i32 %i_i, %25
  %59 = add i32 %58, %50
  %60 = add i32 %59, %49
  %61 = add i32 %60, %53
  %62 = add i32 %61, %52
  %63 = add i32 %62, %51
  %64 = add i32 %63, %57
  %65 = add i32 %64, %56
  %66 = add i32 %65, %55
  %67 = add i32 %66, %54
  %68 = sitofp i32 %67 to float
  %69 = fadd float %68, %33
  %70 = extractelement <2 x float> %35, i32 0
  %71 = fadd float %69, %70
  %72 = extractelement <2 x float> %35, i32 1
  %73 = fadd float %71, %72
  %74 = extractelement <3 x float> %37, i32 0
  %75 = fadd float %73, %74
  %76 = extractelement <3 x float> %37, i32 1
  %77 = fadd float %75, %76
  %78 = extractelement <3 x float> %37, i32 2
  %79 = fadd float %77, %78
  %80 = extractelement <4 x float> %39, i32 0
  %81 = fadd float %79, %80
  %82 = extractelement <4 x float> %39, i32 1
  %83 = fadd float %81, %82
  %84 = extractelement <4 x float> %39, i32 2
  %85 = fadd float %83, %84
  %86 = extractelement <4 x float> %39, i32 3
  %87 = fadd float %85, %86
  %88 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %87, i32 -1, float %87, i32 -1, float %87, i32 -1, float %87, i32 -1)
  br label %ifmerge113

else112:                                          ; preds = %ifmerge110
  br label %ifmerge113

ifmerge113:                                       ; preds = %else112, %then111
  %conditional_tmp.0 = phi <4 x float> [ %88, %then111 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %else112 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %conditional_tmp.0)
  ret void
}

declare i1 @llvm.gla.readData.i1(i32) nounwind readonly

declare <2 x i1> @llvm.gla.readData.v2i1(i32) nounwind readonly

declare <3 x i1> @llvm.gla.readData.v3i1(i32) nounwind readonly

declare <4 x i1> @llvm.gla.readData.v4i1(i32) nounwind readonly

declare i32 @llvm.gla.readData.i32(i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <2 x i1> @llvm.gla.multiInsert.v2i1.v2i1.i1.i1.i1.i1(<2 x i1>, i32, i1, i32, i1, i32, i1, i32, i1, i32) nounwind readnone

declare <3 x i1> @llvm.gla.multiInsert.v3i1.v3i1.i1.i1.i1.i1(<3 x i1>, i32, i1, i32, i1, i32, i1, i32, i1, i32) nounwind readnone

declare <4 x i1> @llvm.gla.multiInsert.v4i1.v4i1.i1.i1.i1.i1(<4 x i1>, i32, i1, i32, i1, i32, i1, i32, i1, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

***Unsupported functionality: opcode in Bottom IR: 50
compiling types.frag...
uniform bool u_b ; 
uniform bvec2 u_b2 ; 
uniform bvec3 u_b3 ; 
uniform bvec4 u_b4 ; 
uniform int u_i ; 
uniform ivec2 u_i2 ; 
uniform ivec3 u_i3 ; 
uniform ivec4 u_i4 ; 
uniform float u_f ; 
uniform vec2 u_f2 ; 
uniform vec3 u_f3 ; 
uniform vec4 u_f4 ; 
in bool i_b ; 
in bvec2 i_b2 ; 
in bvec3 i_b3 ; 
in bvec4 i_b4 ; 
in int i_i ; 
in ivec2 i_i2 ; 
in ivec3 i_i3 ; 
in ivec4 i_i4 ; 
in float i_f ; 
in vec2 i_f2 ; 
in vec3 i_f3 ; 
in vec4 i_f4 ; 
void  main (){
bool b = u_b && i_b ; bvec2 b2 = bvec2 ( u_b2 . x && i_b2 . x && u_b2 . y && i_b2 . y ) ; bvec3 b3 = bvec3 ( u_b3 . x && i_b3 . x && u_b3 . y && i_b3 . y && u_b3 . z && i_b3 . z ) ; bvec4 b4 = bvec4 ( u_b4 . x && i_b4 . x && u_b4 . y && i_b4 . y && u_b4 . z && i_b4 . z && u_b4 . w && i_b4 . w ) ; int i = u_i + i_i ; ivec2 i2 = u_i2 + i_i2 ; ivec3 i3 = u_i3 + i_i3 ; ivec4 i4 = u_i4 + i_i4 ; float f = u_f + i_f ; vec2 f2 = u_f2 + i_f2 ; vec3 f3 = u_f3 + i_f3 ; vec4 f4 = u_f4 + i_f4 ; gl_FragColor = b || b2 . x || b2 . y || b3 . x || b3 . y || b3 . z || b4 . x || b4 . y || b4 . z || b4 . w ? vec4 ( i + i2 . x + i2 . y + i3 . x + i3 . y + i3 . z + i4 . x + i4 . y + i4 . z + i4 . w + f + f2 . x + f2 . y + f3 . x + f3 . y + f3 . z + f4 . x + f4 . y + f4 . z + f4 . w ) : vec4 ( i + i2 . x + i2 . y + i3 . x + i3 . y + i3 . z + i4 . x + i4 . y + i4 . z + i4 . w + f + f2 . x + f2 . y + f3 . x + f3 . y + f3 . z + f4 . x + f4 . y + f4 . z + f4 . w ) ; }



(
(declare (in ) vec4 i_f4)
(declare (in ) vec3 i_f3)
(declare (in ) vec2 i_f2)
(declare (in ) float i_f)
(declare (in ) ivec4 i_i4)
(declare (in ) ivec3 i_i3)
(declare (in ) ivec2 i_i2)
(declare (in ) int i_i)
(declare (in ) bvec4 i_b4)
(declare (in ) bvec3 i_b3)
(declare (in ) bvec2 i_b2)
(declare (in ) bool i_b)
(declare (uniform ) vec4 u_f4)
(declare (uniform ) vec3 u_f3)
(declare (uniform ) vec2 u_f2)
(declare (uniform ) float u_f)
(declare (uniform ) ivec4 u_i4)
(declare (uniform ) ivec3 u_i3)
(declare (uniform ) ivec2 u_i2)
(declare (uniform ) int u_i)
(declare (uniform ) bvec4 u_b4)
(declare (uniform ) bvec3 u_b3)
(declare (uniform ) bvec2 u_b2)
(declare (uniform ) bool u_b)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare (temporary ) bool and_tmp)
      (if (var_ref u_b) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref i_b) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (swiz x (var_ref u_b2) )(
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz x (var_ref i_b2) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref u_b2) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref i_b2) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bvec2 vec_ctor)
      (assign (constant bool (1)) (xy) (var_ref vec_ctor)  (swiz xx (var_ref and_tmp) )) 
      (declare (temporary ) bool and_tmp)
      (if (swiz x (var_ref u_b3) )(
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz x (var_ref i_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref u_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref i_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref u_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref i_b3) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bvec3 vec_ctor)
      (assign (constant bool (1)) (xyz) (var_ref vec_ctor)  (swiz xxx (var_ref and_tmp) )) 
      (declare (temporary ) bool and_tmp)
      (if (swiz x (var_ref u_b4) )(
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz x (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref u_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz y (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref u_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz z (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz w (var_ref u_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (swiz w (var_ref i_b4) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bvec4 vec_ctor)
      (assign (constant bool (1)) (xyzw) (var_ref vec_ctor)  (swiz xxxx (var_ref and_tmp) )) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref u_i) (var_ref i_i) ) ) 
      (declare (temporary ) ivec2 assignment_tmp)
      (assign (constant bool (1)) (xy) (var_ref assignment_tmp)  (expression ivec2 + (var_ref u_i2) (var_ref i_i2) ) ) 
      (declare (temporary ) ivec3 assignment_tmp)
      (assign (constant bool (1)) (xyz) (var_ref assignment_tmp)  (expression ivec3 + (var_ref u_i3) (var_ref i_i3) ) ) 
      (declare (temporary ) ivec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression ivec4 + (var_ref u_i4) (var_ref i_i4) ) ) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref u_f) (var_ref i_f) ) ) 
      (declare (temporary ) vec2 assignment_tmp)
      (assign (constant bool (1)) (xy) (var_ref assignment_tmp)  (expression vec2 + (var_ref u_f2) (var_ref i_f2) ) ) 
      (declare (temporary ) vec3 assignment_tmp)
      (assign (constant bool (1)) (xyz) (var_ref assignment_tmp)  (expression vec3 + (var_ref u_f3) (var_ref i_f3) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref u_f4) (var_ref i_f4) ) ) 
      (declare (temporary ) bool or_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz z (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz x (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz y (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz z (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) bool or_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (swiz w (var_ref vec_ctor) )) 
      ))

      (declare (temporary ) vec4 conditional_tmp)
      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (swiz xxxx (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float + (expression float i2f (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (expression int + (var_ref assignment_tmp) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz w (var_ref assignment_tmp) )) ) (var_ref assignment_tmp) ) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz x (var_ref assignment_tmp) )) (swiz y (var_ref assignment_tmp) )) (swiz z (var_ref assignment_tmp) )) (swiz w (var_ref assignment_tmp) )) )) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (constant vec4 (1.000000 1.000000 1.000000 1.000000)) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref conditional_tmp) ) 
    ))

)


)