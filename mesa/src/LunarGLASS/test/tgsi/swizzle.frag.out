; ModuleID = 'Top'

@u = external addrspace(1) constant <4 x float>
@p = external addrspace(1) constant i1
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %mix_retval = alloca <4 x float>
  %w_undef = alloca <4 x float>
  %w2 = alloca <4 x float>
  %w_flow = alloca <4 x float>
  %w_reorder = alloca <4 x float>
  %w_dep = alloca <4 x float>
  %w = alloca <4 x float>
  %0 = load <4 x float> addrspace(1)* @u
  store <4 x float> %0, <4 x float>* %w
  %1 = load <4 x float> addrspace(1)* @u
  store <4 x float> %1, <4 x float>* %w_dep
  %2 = load <4 x float> addrspace(1)* @u
  store <4 x float> %2, <4 x float>* %w_reorder
  %3 = load <4 x float> addrspace(1)* @u
  store <4 x float> %3, <4 x float>* %w_flow
  %4 = load <4 x float>* %w_reorder
  %5 = insertelement <4 x float> %4, float 0x3FFC9FBE80000000, i32 2
  store <4 x float> %5, <4 x float>* %w_reorder
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %swizzleTmp = call <2 x float> @llvm.gla.fSwizzle.v2f32.v2f32(<2 x float> %t, i32 1)
  %6 = load <4 x float>* %w
  %7 = extractelement <2 x float> %swizzleTmp, i32 0
  %8 = insertelement <4 x float> %6, float %7, i32 1
  %9 = extractelement <2 x float> %swizzleTmp, i32 1
  %10 = insertelement <4 x float> %8, float %9, i32 3
  store <4 x float> %10, <4 x float>* %w
  %11 = load <4 x float>* %w_reorder
  %12 = insertelement <4 x float> %11, float 0x3FFC9FBE80000000, i32 0
  store <4 x float> %12, <4 x float>* %w_reorder
  %13 = load <4 x float> addrspace(1)* @u
  %swizzleTmp1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float> %13, i32 78)
  store <4 x float> %swizzleTmp1, <4 x float>* %w2
  %14 = load <4 x float>* %w_reorder
  %15 = insertelement <4 x float> %14, float 0x3FFC9FBE80000000, i32 1
  store <4 x float> %15, <4 x float>* %w_reorder
  %16 = load <4 x float>* %w2
  %swizzleTmp2 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float> %16, i32 8)
  %17 = load <4 x float>* %w_dep
  %18 = extractelement <2 x float> %swizzleTmp2, i32 0
  %19 = insertelement <4 x float> %17, float %18, i32 0
  %20 = extractelement <2 x float> %swizzleTmp2, i32 1
  %21 = insertelement <4 x float> %19, float %20, i32 1
  store <4 x float> %21, <4 x float>* %w_dep
  %t3 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %22 = load <4 x float>* %w_dep
  %23 = extractelement <2 x float> %t3, i32 0
  %24 = insertelement <4 x float> %22, float %23, i32 2
  %25 = extractelement <2 x float> %t3, i32 1
  %26 = insertelement <4 x float> %24, float %25, i32 3
  store <4 x float> %26, <4 x float>* %w_dep
  %27 = load <4 x float> addrspace(1)* @u
  %swizzleTmp4 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float> %27, i32 14)
  %28 = load <4 x float>* %w_undef
  %29 = extractelement <2 x float> %swizzleTmp4, i32 0
  %30 = insertelement <4 x float> %28, float %29, i32 0
  %31 = extractelement <2 x float> %swizzleTmp4, i32 1
  %32 = insertelement <4 x float> %30, float %31, i32 1
  store <4 x float> %32, <4 x float>* %w_undef
  %33 = load i1 addrspace(1)* @p
  br i1 %33, label %then, label %else

then:                                             ; preds = %entry
  %t5 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %swizzleTmp6 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %t5, i32 0)
  %34 = load <4 x float>* %w_flow
  %35 = insertelement <4 x float> %34, float %swizzleTmp6, i32 0
  store <4 x float> %35, <4 x float>* %w_flow
  br label %ifmerge

else:                                             ; preds = %entry
  %t7 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %swizzleTmp8 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %t7, i32 1)
  %36 = load <4 x float>* %w_flow
  %37 = insertelement <4 x float> %36, float %swizzleTmp8, i32 0
  store <4 x float> %37, <4 x float>* %w_flow
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %38 = load <4 x float>* %w_reorder
  %39 = load <4 x float>* %w_undef
  %40 = load <4 x float>* %w
  %41 = load <4 x float>* %w2
  %42 = fmul <4 x float> %40, %41
  %43 = load <4 x float>* %w_dep
  %44 = fmul <4 x float> %42, %43
  %45 = load <4 x float>* %w_flow
  %46 = fmul <4 x float> %44, %45
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %38, <4 x float> %39, <4 x float> %46)
  store <4 x float> %mix, <4 x float>* %mix_retval
  %47 = load <4 x float>* %mix_retval
  store <4 x float> %47, <4 x float>* @gl_FragColor
  %48 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %48)
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v2f32(<2 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float>, i32) nounwind readnone

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v2f32(<2 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@u = external addrspace(1) constant <4 x float>
@p = external addrspace(1) constant i1

define void @main() {
entry:
  %0 = load <4 x float> addrspace(1)* @u
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %swizzleTmp = call <2 x float> @llvm.gla.fSwizzle.v2f32.v2f32(<2 x float> %t, i32 1)
  %1 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v2f32.f32.v2f32(<4 x float> %0, i32 10, float 0.000000e+00, i32 -1, <2 x float> %swizzleTmp, i32 0, float 0.000000e+00, i32 -1, <2 x float> %swizzleTmp, i32 1)
  %swizzleTmp1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float> %0, i32 78)
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %0, i32 7, float 0x3FFC9FBE80000000, i32 -1, float 0x3FFC9FBE80000000, i32 -1, float 0x3FFC9FBE80000000, i32 -1, float 0.000000e+00, i32 -1)
  %swizzleTmp2 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float> %swizzleTmp1, i32 8)
  %3 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.v2f32.v2f32.v2f32(<4 x float> %0, i32 15, <2 x float> %swizzleTmp2, i32 0, <2 x float> %swizzleTmp2, i32 1, <2 x float> %t, i32 0, <2 x float> %t, i32 1)
  %swizzleTmp4 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float> %0, i32 14)
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.v2f32.f32.f32(<4 x float> undef, i32 3, <2 x float> %swizzleTmp4, i32 0, <2 x float> %swizzleTmp4, i32 1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  %5 = load i1 addrspace(1)* @p
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  %swizzleTmp6 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %t, i32 0)
  %6 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %0, i32 1, float %swizzleTmp6, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge

else:                                             ; preds = %entry
  %swizzleTmp8 = call float @llvm.gla.fSwizzle.f32.v2f32(<2 x float> %t, i32 1)
  %7 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %0, i32 1, float %swizzleTmp8, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %w_flow.0 = phi <4 x float> [ %6, %then ], [ %7, %else ]
  %8 = fmul <4 x float> %1, %swizzleTmp1
  %9 = fmul <4 x float> %8, %3
  %10 = fmul <4 x float> %9, %w_flow.0
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %2, <4 x float> %4, <4 x float> %10)
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %mix)
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v2f32(<2 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float>, i32) nounwind readnone

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float>, i32) nounwind readnone

declare float @llvm.gla.fSwizzle.f32.v2f32(<2 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.v2f32.f32.f32(<4 x float>, i32, <2 x float>, i32, <2 x float>, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.v2f32.v2f32.v2f32(<4 x float>, i32, <2 x float>, i32, <2 x float>, i32, <2 x float>, i32, <2 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v2f32.f32.v2f32(<4 x float>, i32, float, i32, <2 x float>, i32, float, i32, <2 x float>, i32) nounwind readnone

***Unsupported functionality: intrinsic in Bottom IR
compiling swizzle.frag...
uniform float blend ; 
uniform vec4 u ; 
uniform bool p ; 
varying vec2 t ; 
void  main (){
float blendscale = 1.789000 ; vec4 w = u ; vec4 w_undef ; vec4 w_dep = u ; vec4 w_reorder = u ; vec4 w2 = u ; vec4 w_flow = u ; w_reorder . z = blendscale ; w . wy = t ; w_reorder . x = blendscale ; w2 . xyzw = u . zwxy ; w_reorder . y = blendscale ; w_dep . xy = w2 . xz ; w_dep . zw = t ; w_undef . xy = u . zw ; if ( p ) w_flow . x = t . x ; else w_flow . x = t . y ; gl_FragColor = mix ( w_reorder , w_undef , w * w2 * w_dep * w_flow ) ; }



(
(declare (in ) vec2 t)
(declare (uniform ) bool p)
(declare (uniform ) vec4 u)
(declare (uniform ) float blend)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 w_flow)
      (declare () vec4 w2)
      (declare () vec4 w_reorder)
      (declare () vec4 w_dep)
      (declare () vec4 w_undef)
      (declare () vec4 w)
      (assign (constant bool (1)) (xyzw) (var_ref w)  (var_ref u) ) 
      (assign (constant bool (1)) (xyzw) (var_ref w_dep)  (var_ref u) ) 
      (assign (constant bool (1)) (xyzw) (var_ref w_reorder)  (var_ref u) ) 
      (assign (constant bool (1)) (xyzw) (var_ref w_flow)  (var_ref u) ) 
      (assign (constant bool (1)) (z) (var_ref w_reorder)  (constant float (1.789000)) ) 
      (assign (constant bool (1)) (yw) (var_ref w)  (swiz yx (var_ref t) )) 
      (assign (constant bool (1)) (x) (var_ref w_reorder)  (constant float (1.789000)) ) 
      (assign (constant bool (1)) (xyzw) (var_ref w2)  (swiz zwxy (var_ref u) )) 
      (assign (constant bool (1)) (y) (var_ref w_reorder)  (constant float (1.789000)) ) 
      (assign (constant bool (1)) (xy) (var_ref w_dep)  (swiz xz (var_ref w2) )) 
      (assign (constant bool (1)) (zw) (var_ref w_dep)  (var_ref t) ) 
      (assign (constant bool (1)) (xy) (var_ref w_undef)  (swiz zw (var_ref u) )) 
      (if (var_ref p) (
        (assign (constant bool (1)) (x) (var_ref w_flow)  (swiz x (var_ref t) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref w_flow)  (swiz y (var_ref t) )) 
      ))

      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref w_reorder) (var_ref w_undef) (expression vec4 * (expression vec4 * (expression vec4 * (var_ref w) (var_ref w2) ) (var_ref w_dep) ) (var_ref w_flow) ) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref mix_retval) ) 
    ))

)


)