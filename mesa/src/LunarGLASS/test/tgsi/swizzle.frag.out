; ModuleID = 'Top'

@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %assignment_tmp4 = alloca <4 x float>
  %mix_retval = alloca <4 x float>
  %assignment_tmp2 = alloca <2 x float>
  %w = alloca <4 x float>
  %assignment_tmp1 = alloca <4 x float>
  %blendscale = alloca float
  %assignment_tmp = alloca float
  store float 0x3FFC9FBE80000000, float* %assignment_tmp
  %0 = load float* %assignment_tmp
  store float %0, float* %blendscale
  %1 = load <4 x float> addrspace(1)* @u
  store <4 x float> %1, <4 x float>* %assignment_tmp1
  %2 = load <4 x float>* %assignment_tmp1
  store <4 x float> %2, <4 x float>* %w
  %t = call <2 x float> @llvm.gla.getInterpolant.v2f32(i32 0)
  store <2 x float> %t, <2 x float>* %assignment_tmp2
  %3 = load <2 x float>* %assignment_tmp2
  %swizzleTmp = call <4 x float> @llvm.gla.fSwizzle.v4f32.v2f32(<2 x float> %3, i32 4)
  %swizzleTmp3 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float> %swizzleTmp, i32 13)
  %4 = load <4 x float>* %w
  %5 = extractelement <2 x float> %swizzleTmp3, i32 0
  %6 = insertelement <4 x float> %4, float %5, i32 1
  %7 = extractelement <2 x float> %swizzleTmp3, i32 1
  %8 = insertelement <4 x float> %6, float %7, i32 3
  store <4 x float> %8, <4 x float>* %w
  %9 = load <4 x float>* %w
  %10 = load <4 x float> addrspace(1)* @u
  %11 = load float addrspace(1)* @blend
  %12 = load float* %blendscale
  %13 = fmul float %11, %12
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %9, <4 x float> %10, float %13)
  store <4 x float> %mix, <4 x float>* %mix_retval
  %14 = load <4 x float>* %mix_retval
  store <4 x float> %14, <4 x float>* %assignment_tmp4
  %15 = load <4 x float>* %assignment_tmp4
  store <4 x float> %15, <4 x float>* @gl_FragColor
  %16 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %16)
  ret void
}

declare <2 x float> @llvm.gla.getInterpolant.v2f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v2f32(<2 x float>, i32) nounwind readnone

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float

define void @main() {
entry:
  %0 = load <4 x float> addrspace(1)* @u
  %t = call <2 x float> @llvm.gla.getInterpolant.v2f32(i32 0)
  %swizzleTmp = call <4 x float> @llvm.gla.fSwizzle.v4f32.v2f32(<2 x float> %t, i32 4)
  %swizzleTmp3 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float> %swizzleTmp, i32 13)
  %1 = extractelement <2 x float> %swizzleTmp3, i32 0
  %2 = insertelement <4 x float> %0, float %1, i32 1
  %3 = extractelement <2 x float> %swizzleTmp3, i32 1
  %4 = insertelement <4 x float> %2, float %3, i32 3
  %5 = load float addrspace(1)* @blend
  %6 = fmul float %5, 0x3FFC9FBE80000000
  %mix = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %4, <4 x float> %0, float %6)
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %mix)
  ret void
}

declare <2 x float> @llvm.gla.getInterpolant.v2f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v2f32(<2 x float>, i32) nounwind readnone

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32(<4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind

***Unsupported functionality: opcode in Bottom IR: 50
compiling swizzle.frag...
uniform float blend ; 
uniform vec4 u ; 
varying vec2 t ; 
void  main (){
float blendscale = 1.789000 ; vec4 w = u ; w . wy = t ; gl_FragColor = mix ( w , u , blend * blendscale ) ; }



(
(declare (in ) vec2 t)
(declare (uniform ) vec4 u)
(declare (uniform ) float blend)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 w)
      (declare () float blendscale)
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (constant float (1.789000)) ) 
      (assign (constant bool (1)) (x) (var_ref blendscale)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (var_ref u) ) 
      (assign (constant bool (1)) (xyzw) (var_ref w)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec2 assignment_tmp)
      (assign (constant bool (1)) (xy) (var_ref assignment_tmp)  (var_ref t) ) 
      (assign (constant bool (1)) (yw) (var_ref w)  (swiz yw (swiz xyxx (var_ref assignment_tmp) ))) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref w) (var_ref u) (expression float * (var_ref blend) (var_ref blendscale) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (var_ref mix_retval) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
    ))

)


)