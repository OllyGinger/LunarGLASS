; ModuleID = 'Top'

%lunarStruct1 = type { i32, [4 x float], [5 x <4 x float>] }
%lunarStruct2 = type { [5 x i32], float, [7 x %lunarStruct1] }

@gl_MaxLights = internal global i32 8
@gl_MaxClipPlanes = internal global i32 8
@gl_MaxTextureUnits = internal global i32 2
@gl_MaxTextureCoords = internal global i32 4
@gl_MaxVertexAttribs = internal global i32 16
@gl_MaxVertexUniformComponents = internal global i32 512
@gl_MaxVaryingFloats = internal global i32 32
@gl_MaxVertexTextureImageUnits = internal global i32 0
@gl_MaxCombinedTextureImageUnits = internal global i32 2
@gl_MaxTextureImageUnits = internal global i32 2
@gl_MaxFragmentUniformComponents = internal global i32 64
@gl_MaxDrawBuffers = internal global i32 2
@foo2 = external addrspace(1) global [5 x %lunarStruct2]
@sampler = external addrspace(1) global i32
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %texture2D_retval = alloca <4 x float>
  %scale = alloca float
  store float 0.000000e+00, float* %scale
  %"foo2[3]" = load %lunarStruct2 addrspace(1)* getelementptr inbounds ([5 x %lunarStruct2] addrspace(1)* @foo2, i32 0, i32 3)
  %0 = extractvalue %lunarStruct2 %"foo2[3]", 0, 4
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %"foo2[3]1" = load %lunarStruct2 addrspace(1)* getelementptr inbounds ([5 x %lunarStruct2] addrspace(1)* @foo2, i32 0, i32 3)
  %2 = extractvalue %lunarStruct2 %"foo2[3]1", 2, 2, 2, 3
  %scale2 = extractelement <4 x float> %2, i32 0
  store float %scale2, float* %scale
  br label %ifmerge

else:                                             ; preds = %entry
  %"foo2[3]3" = load %lunarStruct2 addrspace(1)* getelementptr inbounds ([5 x %lunarStruct2] addrspace(1)* @foo2, i32 0, i32 3)
  %scale4 = extractvalue %lunarStruct2 %"foo2[3]3", 2, 2, 1, 3
  store float %scale4, float* %scale
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %3 = load i32 addrspace(1)* @sampler
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %texture2D_retval5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %3, i32 0, <2 x float> %coord)
  store <4 x float> %texture2D_retval5, <4 x float>* %texture2D_retval
  %4 = load float* %scale
  %5 = load <4 x float>* %texture2D_retval
  %6 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %4, i32 0)
  %gl_FragColor = fmul <4 x float> %6, %5
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %7 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %7)
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

%lunarStruct1 = type { i32, [4 x float], [5 x <4 x float>] }
%lunarStruct2 = type { [5 x i32], float, [7 x %lunarStruct1] }

@foo2 = external addrspace(1) global [5 x %lunarStruct2]
@sampler = external addrspace(1) global i32

define void @main() {
entry:
  %"foo2[3]" = load %lunarStruct2 addrspace(1)* getelementptr inbounds ([5 x %lunarStruct2] addrspace(1)* @foo2, i32 0, i32 3)
  %0 = extractvalue %lunarStruct2 %"foo2[3]", 0, 4
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = extractvalue %lunarStruct2 %"foo2[3]", 2, 2, 2, 3
  %scale2 = extractelement <4 x float> %2, i32 0
  br label %ifmerge

else:                                             ; preds = %entry
  %scale4 = extractvalue %lunarStruct2 %"foo2[3]", 2, 2, 1, 3
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %scale.0 = phi float [ %scale2, %then ], [ %scale4, %else ]
  %3 = load i32 addrspace(1)* @sampler
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 0)
  %texture2D_retval5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %3, i32 0, <2 x float> %coord)
  %4 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %scale.0, i32 0)
  %gl_FragColor = fmul <4 x float> %4, %texture2D_retval5
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %gl_FragColor)
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

***Unsupported functionality: opcode in Bottom IR: 53
compiling structure.frag...
uniform sampler2D sampler ; 
varying vec2 coord ; 
struct lunarStruct1 { int i ; float f [ 4 ] ; vec4 color [ 5 ] ; } ; 
struct lunarStruct2 { int i [ 5 ] ; float f ; lunarStruct1 s1_1 [ 7 ] ; } ; 
uniform lunarStruct1 foo ; 
uniform lunarStruct2 foo2 [ 5 ] ; 
void  main (){
float scale = 0.000000 ; if ( foo2 [ 3 ] . i [ 4 ] > 0 ) scale = foo2 [ 3 ] . s1_1 [ 2 ] . color [ 3 ] . x ; else scale = foo2 [ 3 ] . s1_1 [ 2 ] . f [ 3 ] ; gl_FragColor = scale * texture2D ( sampler , coord ) ; }



(
(declare (uniform ) (array lunarStruct2 5) foo2)
(declare (uniform ) lunarStruct1 foo)
(declare (in ) vec2 coord)
(declare (uniform ) sampler2D sampler)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () float scale)
      (assign (constant bool (1)) (x) (var_ref scale)  (constant float (0.000000)) ) 
      (if (expression bool > (array_ref (record_ref (array_ref (var_ref foo2) (constant int (3)) )  i) (constant int (4)) ) (constant int (0)) ) (
        (assign (constant bool (1)) (x) (var_ref scale)  (swiz x (array_ref (record_ref (array_ref (record_ref (array_ref (var_ref foo2) (constant int (3)) )  s1_1) (constant int (2)) )  color) (constant int (3)) ) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref scale)  (array_ref (record_ref (array_ref (record_ref (array_ref (var_ref foo2) (constant int (3)) )  s1_1) (constant int (2)) )  f) (constant int (3)) ) ) 
      ))

      (declare (temporary ) vec4 texture2D_retval)
      (assign (constant bool (1)) (xyzw) (var_ref texture2D_retval)  (call texture2D ((var_ref sampler) (var_ref coord) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (var_ref scale) (var_ref texture2D_retval) ) ) 
    ))

)


)