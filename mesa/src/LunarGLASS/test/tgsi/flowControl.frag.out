
Top IR:
; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@smallColor = external addrspace(1) constant <4 x float>
@gl_FragColor = internal global <4 x float> zeroinitializer
@otherColor = external addrspace(1) constant <4 x float>

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 1)
  %0 = load float addrspace(1)* @d
  %1 = fcmp ogt float %c, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %BaseColor1 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %2 = load <4 x float> addrspace(1)* @bigColor
  %color2 = fadd <4 x float> %BaseColor1, %2
  store <4 x float> %color2, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %entry
  %3 = load <4 x float>* %color
  %4 = load <4 x float> addrspace(1)* @smallColor
  %color3 = fadd <4 x float> %3, %4
  store <4 x float> %color3, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %5 = load <4 x float>* %color
  %6 = load <4 x float> addrspace(1)* @otherColor
  %gl_FragColor = fmul <4 x float> %5, %6
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %7 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %7)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(1) constant float
@bigColor = external addrspace(1) constant <4 x float>
@smallColor = external addrspace(1) constant <4 x float>
@otherColor = external addrspace(1) constant <4 x float>

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 1)
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 1)
  %0 = load float addrspace(1)* @d
  %1 = fcmp ogt float %c, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load <4 x float> addrspace(1)* @bigColor
  %color2 = fadd <4 x float> %BaseColor, %2
  br label %ifmerge

else:                                             ; preds = %entry
  %3 = load <4 x float> addrspace(1)* @smallColor
  %color3 = fadd <4 x float> %BaseColor, %3
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %color.0 = phi <4 x float> [ %color2, %then ], [ %color3, %else ]
  %4 = load <4 x float> addrspace(1)* @otherColor
  %gl_FragColor = fmul <4 x float> %color.0, %4
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %gl_FragColor)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
# Fragment Program/Shader 0
  0: MOV TEMP[0], INPUT[-1];
  1: SGT TEMP[1].x, INPUT[-1].xxxx, UNIFORM[3].xxxx;
  2: IF TEMP[1].xxxx;  # (if false, goto 5);
  3:    ADD TEMP[1], INPUT[-1], UNIFORM[2];
  4:    MOV TEMP[0], TEMP[1];
  5: ELSE; # (goto 8)
  6:    ADD TEMP[1], TEMP[0], UNIFORM[1];
  7:    MOV TEMP[0], TEMP[1];
  8: ENDIF;
  9: MUL OUTPUT[2], TEMP[0], UNIFORM[0];
 10: END
compiling flowControl.frag...
uniform float d ; 
uniform vec4 bigColor , smallColor ; 
uniform vec4 otherColor ; 
varying float c ; 
varying vec4 BaseColor ; 
void  main (){
vec4 color = BaseColor ; vec4 color2 ; color2 = otherColor ; if ( c > d ) color += bigColor ; else color += smallColor ; gl_FragColor = color * color2 ; }



(
(declare (in ) vec4 BaseColor)
(declare (in ) float c)
(declare (uniform ) vec4 otherColor)
(declare (uniform ) vec4 smallColor)
(declare (uniform ) vec4 bigColor)
(declare (uniform ) float d)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (if (expression bool > (var_ref c) (var_ref d) ) (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref BaseColor) (var_ref bigColor) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref smallColor) ) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (var_ref color) (var_ref otherColor) ) ) 
    ))

)


)
Mesa program before mesa optimizations
  0: MOV TEMP[1], INPUT[0];
  1: MOV TEMP[2].x, INPUT[1].xxxx;
  2: MOV TEMP[3].x, UNIFORM[1].xxxx;
  3: SGT TEMP[4].x, TEMP[2].xxxx, TEMP[3].xxxx;
  4: IF TEMP[4].xxxx;  # (if false, goto 0);
  5:    MOV TEMP[5], UNIFORM[2];
  6:    ADD TEMP[6], TEMP[1], TEMP[5];
  7:    MOV TEMP[7], TEMP[6];
  8: ELSE; # (goto 0)
  9:    MOV TEMP[8], UNIFORM[3];
 10:    ADD TEMP[9], TEMP[1], TEMP[8];
 11:    MOV TEMP[7], TEMP[9];
 12: ENDIF;
 13: MOV TEMP[10], UNIFORM[4];
 14: MUL TEMP[11], TEMP[7], TEMP[10];
 15: MOV OUTPUT[0], TEMP[11];
 16: END

Mesa program after mesa optimizations
  0: MOV TEMP[0], INPUT[0];
  1: SGT TEMP[2].x, INPUT[1].xxxx, UNIFORM[1].xxxx;
  2: IF TEMP[2].xxxx;  # (if false, goto 0);
  3:    ADD TEMP[2], TEMP[0], UNIFORM[2];
  4:    MOV TEMP[3], TEMP[2];
  5: ELSE; # (goto 0)
  6:    ADD TEMP[2], TEMP[0], UNIFORM[3];
  7:    MOV TEMP[3], TEMP[2];
  8: ENDIF;
  9: MUL OUTPUT[0], TEMP[3], UNIFORM[4];
 10: END

===========================================

Optimized Mesa IR without GLA for linked fragment program 0:
