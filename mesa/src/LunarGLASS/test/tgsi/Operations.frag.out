; ModuleID = 'Top'

@gl_MaxLights = internal constant i32 8
@gl_MaxClipPlanes = internal constant i32 8
@gl_MaxTextureUnits = internal constant i32 2
@gl_MaxTextureCoords = internal constant i32 4
@gl_MaxVertexAttribs = internal constant i32 16
@gl_MaxVertexUniformComponents = internal constant i32 512
@gl_MaxVaryingFloats = internal constant i32 32
@gl_MaxVertexTextureImageUnits = internal constant i32 0
@gl_MaxCombinedTextureImageUnits = internal constant i32 2
@gl_MaxTextureImageUnits = internal constant i32 2
@gl_MaxFragmentUniformComponents = internal constant i32 64
@gl_MaxDrawBuffers = internal constant i32 2
@uv4 = external addrspace(1) constant <4 x float>
@ub = external addrspace(1) constant i1
@uf = external addrspace(1) constant float
@ui = external addrspace(1) constant i32
@ub41 = external addrspace(1) constant <4 x i1>
@ub42 = external addrspace(1) constant <4 x i1>
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %conditional_tmp = alloca <4 x float>
  %assignment_tmp277 = alloca i1
  %assignment_tmp274 = alloca i32
  %and_tmp264 = alloca i1
  %or_tmp261 = alloca i1
  %assignment_tmp258 = alloca float
  %cross_retval = alloca <3 x float>
  %dot_retval = alloca float
  %distance_retval = alloca float
  %length_retval = alloca float
  %and_tmp240 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp235 = alloca i32
  %any_retval229 = alloca i1
  %not_retval = alloca <4 x i1>
  %and_tmp226 = alloca i1
  %all_retval = alloca i1
  %and_tmp219 = alloca i1
  %any_retval213 = alloca i1
  %and_tmp211 = alloca i1
  %any_retval205 = alloca i1
  %notEqual_retval = alloca <4 x i1>
  %and_tmp202 = alloca i1
  %any_retval196 = alloca i1
  %equal_retval = alloca <4 x i1>
  %and_tmp193 = alloca i1
  %any_retval187 = alloca i1
  %greaterThanEqual_retval = alloca <4 x i1>
  %and_tmp184 = alloca i1
  %any_retval178 = alloca i1
  %greaterThan_retval = alloca <4 x i1>
  %and_tmp175 = alloca i1
  %any_retval171 = alloca i1
  %lessThanEqual_retval = alloca <4 x i1>
  %and_tmp = alloca i1
  %any_retval = alloca i1
  %lessThan_retval = alloca <4 x i1>
  %clamp_retval164 = alloca i32
  %assignment_tmp161 = alloca i32
  %max_retval159 = alloca i32
  %assignment_tmp156 = alloca i32
  %min_retval154 = alloca i32
  %assignment_tmp151 = alloca i32
  %abs_retval149 = alloca i32
  %fwidth_retval = alloca <4 x float>
  %assignment_tmp144 = alloca <4 x float>
  %dFdy_retval = alloca <4 x float>
  %assignment_tmp140 = alloca <4 x float>
  %dFdx_retval = alloca <4 x float>
  %assignment_tmp136 = alloca <4 x float>
  %refract_retval = alloca <4 x float>
  %assignment_tmp132 = alloca <4 x float>
  %reflect_retval = alloca <4 x float>
  %assignment_tmp128 = alloca <4 x float>
  %faceforward_retval = alloca <4 x float>
  %assignment_tmp124 = alloca <4 x float>
  %normalize_retval = alloca <4 x float>
  %assignment_tmp120 = alloca <4 x float>
  %smoothstep_retval = alloca <4 x float>
  %assignment_tmp116 = alloca <4 x float>
  %step_retval = alloca <4 x float>
  %assignment_tmp112 = alloca <4 x float>
  %mix_retval110 = alloca <4 x float>
  %assignment_tmp107 = alloca <4 x float>
  %mix_retval = alloca <4 x float>
  %assignment_tmp103 = alloca <4 x float>
  %clamp_retval = alloca <4 x float>
  %assignment_tmp99 = alloca <4 x float>
  %max_retval = alloca <4 x float>
  %assignment_tmp95 = alloca <4 x float>
  %min_retval = alloca <4 x float>
  %assignment_tmp91 = alloca <4 x float>
  %mod_retval = alloca <4 x float>
  %assignment_tmp87 = alloca <4 x float>
  %fract_retval = alloca <4 x float>
  %assignment_tmp83 = alloca <4 x float>
  %ceil_retval = alloca <4 x float>
  %assignment_tmp79 = alloca <4 x float>
  %floor_retval = alloca <4 x float>
  %assignment_tmp75 = alloca <4 x float>
  %sign_retval = alloca <4 x float>
  %assignment_tmp71 = alloca <4 x float>
  %abs_retval = alloca <4 x float>
  %assignment_tmp67 = alloca <4 x float>
  %inversesqrt_retval = alloca <4 x float>
  %assignment_tmp63 = alloca <4 x float>
  %sqrt_retval = alloca <4 x float>
  %assignment_tmp59 = alloca <4 x float>
  %log2_retval = alloca <4 x float>
  %assignment_tmp55 = alloca <4 x float>
  %exp2_retval = alloca <4 x float>
  %assignment_tmp51 = alloca <4 x float>
  %log_retval = alloca <4 x float>
  %assignment_tmp47 = alloca <4 x float>
  %exp_retval = alloca <4 x float>
  %assignment_tmp43 = alloca <4 x float>
  %pow_retval = alloca <4 x float>
  %assignment_tmp39 = alloca <4 x float>
  %tanh_retval = alloca <4 x float>
  %assignment_tmp35 = alloca <4 x float>
  %cosh_retval = alloca <4 x float>
  %assignment_tmp31 = alloca <4 x float>
  %sinh_retval = alloca <4 x float>
  %assignment_tmp27 = alloca <4 x float>
  %atan_retval = alloca <4 x float>
  %assignment_tmp23 = alloca <4 x float>
  %acos_retval = alloca <4 x float>
  %assignment_tmp19 = alloca <4 x float>
  %asin_retval = alloca <4 x float>
  %assignment_tmp15 = alloca <4 x float>
  %tan_retval = alloca <4 x float>
  %assignment_tmp11 = alloca <4 x float>
  %cos_retval = alloca <4 x float>
  %assignment_tmp7 = alloca <4 x float>
  %sin_retval = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %degrees_retval = alloca <4 x float>
  %radians_retval = alloca <4 x float>
  %v = alloca <4 x float>
  %f = alloca float
  %b = alloca i1
  %i = alloca i32
  %0 = load <4 x float> addrspace(1)* @uv4
  %radians_retval1 = call <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float> %0)
  store <4 x float> %radians_retval1, <4 x float>* %radians_retval
  %v2 = load <4 x float>* %radians_retval
  store <4 x float> %v2, <4 x float>* %v
  %1 = load <4 x float>* %radians_retval
  %degrees_retval3 = call <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float> %1)
  store <4 x float> %degrees_retval3, <4 x float>* %degrees_retval
  %2 = load <4 x float>* %v
  %3 = load <4 x float>* %degrees_retval
  %assignment_tmp4 = fadd <4 x float> %2, %3
  store <4 x float> %assignment_tmp4, <4 x float>* %assignment_tmp
  %v5 = load <4 x float>* %assignment_tmp
  store <4 x float> %v5, <4 x float>* %v
  %4 = load <4 x float>* %assignment_tmp
  %sin_retval6 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %4)
  store <4 x float> %sin_retval6, <4 x float>* %sin_retval
  %5 = load <4 x float>* %v
  %6 = load <4 x float>* %sin_retval
  %assignment_tmp78 = fadd <4 x float> %5, %6
  store <4 x float> %assignment_tmp78, <4 x float>* %assignment_tmp7
  %v9 = load <4 x float>* %assignment_tmp7
  store <4 x float> %v9, <4 x float>* %v
  %7 = load <4 x float>* %assignment_tmp7
  %cos_retval10 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %7)
  store <4 x float> %cos_retval10, <4 x float>* %cos_retval
  %8 = load <4 x float>* %v
  %9 = load <4 x float>* %cos_retval
  %assignment_tmp1112 = fadd <4 x float> %8, %9
  store <4 x float> %assignment_tmp1112, <4 x float>* %assignment_tmp11
  %v13 = load <4 x float>* %assignment_tmp11
  store <4 x float> %v13, <4 x float>* %v
  %10 = load <4 x float>* %assignment_tmp11
  %tan_retval14 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %10)
  store <4 x float> %tan_retval14, <4 x float>* %tan_retval
  %11 = load <4 x float>* %v
  %12 = load <4 x float>* %tan_retval
  %assignment_tmp1516 = fadd <4 x float> %11, %12
  store <4 x float> %assignment_tmp1516, <4 x float>* %assignment_tmp15
  %v17 = load <4 x float>* %assignment_tmp15
  store <4 x float> %v17, <4 x float>* %v
  %13 = load <4 x float>* %assignment_tmp15
  %asin_retval18 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %13)
  store <4 x float> %asin_retval18, <4 x float>* %asin_retval
  %14 = load <4 x float>* %v
  %15 = load <4 x float>* %asin_retval
  %assignment_tmp1920 = fadd <4 x float> %14, %15
  store <4 x float> %assignment_tmp1920, <4 x float>* %assignment_tmp19
  %v21 = load <4 x float>* %assignment_tmp19
  store <4 x float> %v21, <4 x float>* %v
  %16 = load <4 x float>* %assignment_tmp19
  %acos_retval22 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %16)
  store <4 x float> %acos_retval22, <4 x float>* %acos_retval
  %17 = load <4 x float>* %v
  %18 = load <4 x float>* %acos_retval
  %assignment_tmp2324 = fadd <4 x float> %17, %18
  store <4 x float> %assignment_tmp2324, <4 x float>* %assignment_tmp23
  %v25 = load <4 x float>* %assignment_tmp23
  store <4 x float> %v25, <4 x float>* %v
  %19 = load <4 x float>* %assignment_tmp23
  %atan_retval26 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %19)
  store <4 x float> %atan_retval26, <4 x float>* %atan_retval
  %20 = load <4 x float>* %v
  %21 = load <4 x float>* %atan_retval
  %assignment_tmp2728 = fadd <4 x float> %20, %21
  store <4 x float> %assignment_tmp2728, <4 x float>* %assignment_tmp27
  %v29 = load <4 x float>* %assignment_tmp27
  store <4 x float> %v29, <4 x float>* %v
  %22 = load <4 x float>* %assignment_tmp27
  %sinh_retval30 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %22)
  store <4 x float> %sinh_retval30, <4 x float>* %sinh_retval
  %23 = load <4 x float>* %v
  %24 = load <4 x float>* %sinh_retval
  %assignment_tmp3132 = fadd <4 x float> %23, %24
  store <4 x float> %assignment_tmp3132, <4 x float>* %assignment_tmp31
  %v33 = load <4 x float>* %assignment_tmp31
  store <4 x float> %v33, <4 x float>* %v
  %25 = load <4 x float>* %assignment_tmp31
  %cosh_retval34 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %25)
  store <4 x float> %cosh_retval34, <4 x float>* %cosh_retval
  %26 = load <4 x float>* %v
  %27 = load <4 x float>* %cosh_retval
  %assignment_tmp3536 = fadd <4 x float> %26, %27
  store <4 x float> %assignment_tmp3536, <4 x float>* %assignment_tmp35
  %v37 = load <4 x float>* %assignment_tmp35
  store <4 x float> %v37, <4 x float>* %v
  %28 = load <4 x float>* %assignment_tmp35
  %tanh_retval38 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %28)
  store <4 x float> %tanh_retval38, <4 x float>* %tanh_retval
  %29 = load <4 x float>* %v
  %30 = load <4 x float>* %tanh_retval
  %assignment_tmp3940 = fadd <4 x float> %29, %30
  store <4 x float> %assignment_tmp3940, <4 x float>* %assignment_tmp39
  %v41 = load <4 x float>* %assignment_tmp39
  store <4 x float> %v41, <4 x float>* %v
  %31 = load <4 x float>* %assignment_tmp39
  %32 = load <4 x float>* %assignment_tmp39
  %pow_retval42 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %31, <4 x float> %32)
  store <4 x float> %pow_retval42, <4 x float>* %pow_retval
  %33 = load <4 x float>* %v
  %34 = load <4 x float>* %pow_retval
  %assignment_tmp4344 = fadd <4 x float> %33, %34
  store <4 x float> %assignment_tmp4344, <4 x float>* %assignment_tmp43
  %v45 = load <4 x float>* %assignment_tmp43
  store <4 x float> %v45, <4 x float>* %v
  %35 = load <4 x float>* %assignment_tmp43
  %exp_retval46 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %35)
  store <4 x float> %exp_retval46, <4 x float>* %exp_retval
  %36 = load <4 x float>* %v
  %37 = load <4 x float>* %exp_retval
  %assignment_tmp4748 = fadd <4 x float> %36, %37
  store <4 x float> %assignment_tmp4748, <4 x float>* %assignment_tmp47
  %v49 = load <4 x float>* %assignment_tmp47
  store <4 x float> %v49, <4 x float>* %v
  %38 = load <4 x float>* %assignment_tmp47
  %log_retval50 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %38)
  store <4 x float> %log_retval50, <4 x float>* %log_retval
  %39 = load <4 x float>* %v
  %40 = load <4 x float>* %log_retval
  %assignment_tmp5152 = fadd <4 x float> %39, %40
  store <4 x float> %assignment_tmp5152, <4 x float>* %assignment_tmp51
  %v53 = load <4 x float>* %assignment_tmp51
  store <4 x float> %v53, <4 x float>* %v
  %41 = load <4 x float>* %assignment_tmp51
  %exp2_retval54 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %41)
  store <4 x float> %exp2_retval54, <4 x float>* %exp2_retval
  %42 = load <4 x float>* %v
  %43 = load <4 x float>* %exp2_retval
  %assignment_tmp5556 = fadd <4 x float> %42, %43
  store <4 x float> %assignment_tmp5556, <4 x float>* %assignment_tmp55
  %v57 = load <4 x float>* %assignment_tmp55
  store <4 x float> %v57, <4 x float>* %v
  %44 = load <4 x float>* %assignment_tmp55
  %log2_retval58 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %44)
  store <4 x float> %log2_retval58, <4 x float>* %log2_retval
  %45 = load <4 x float>* %v
  %46 = load <4 x float>* %log2_retval
  %assignment_tmp5960 = fadd <4 x float> %45, %46
  store <4 x float> %assignment_tmp5960, <4 x float>* %assignment_tmp59
  %v61 = load <4 x float>* %assignment_tmp59
  store <4 x float> %v61, <4 x float>* %v
  %47 = load <4 x float>* %assignment_tmp59
  %sqrt_retval62 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %47)
  store <4 x float> %sqrt_retval62, <4 x float>* %sqrt_retval
  %48 = load <4 x float>* %v
  %49 = load <4 x float>* %sqrt_retval
  %assignment_tmp6364 = fadd <4 x float> %48, %49
  store <4 x float> %assignment_tmp6364, <4 x float>* %assignment_tmp63
  %v65 = load <4 x float>* %assignment_tmp63
  store <4 x float> %v65, <4 x float>* %v
  %50 = load <4 x float>* %assignment_tmp63
  %inversesqrt_retval66 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %50)
  store <4 x float> %inversesqrt_retval66, <4 x float>* %inversesqrt_retval
  %51 = load <4 x float>* %v
  %52 = load <4 x float>* %inversesqrt_retval
  %assignment_tmp6768 = fadd <4 x float> %51, %52
  store <4 x float> %assignment_tmp6768, <4 x float>* %assignment_tmp67
  %v69 = load <4 x float>* %assignment_tmp67
  store <4 x float> %v69, <4 x float>* %v
  %53 = load <4 x float>* %assignment_tmp67
  %abs_retval70 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %53)
  store <4 x float> %abs_retval70, <4 x float>* %abs_retval
  %54 = load <4 x float>* %v
  %55 = load <4 x float>* %abs_retval
  %assignment_tmp7172 = fadd <4 x float> %54, %55
  store <4 x float> %assignment_tmp7172, <4 x float>* %assignment_tmp71
  %v73 = load <4 x float>* %assignment_tmp71
  store <4 x float> %v73, <4 x float>* %v
  %56 = load <4 x float>* %assignment_tmp71
  %sign_retval74 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %56)
  store <4 x float> %sign_retval74, <4 x float>* %sign_retval
  %57 = load <4 x float>* %v
  %58 = load <4 x float>* %sign_retval
  %assignment_tmp7576 = fadd <4 x float> %57, %58
  store <4 x float> %assignment_tmp7576, <4 x float>* %assignment_tmp75
  %v77 = load <4 x float>* %assignment_tmp75
  store <4 x float> %v77, <4 x float>* %v
  %59 = load <4 x float>* %assignment_tmp75
  %floor_retval78 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %59)
  store <4 x float> %floor_retval78, <4 x float>* %floor_retval
  %60 = load <4 x float>* %v
  %61 = load <4 x float>* %floor_retval
  %assignment_tmp7980 = fadd <4 x float> %60, %61
  store <4 x float> %assignment_tmp7980, <4 x float>* %assignment_tmp79
  %v81 = load <4 x float>* %assignment_tmp79
  store <4 x float> %v81, <4 x float>* %v
  %62 = load <4 x float>* %assignment_tmp79
  %ceil_retval82 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %62)
  store <4 x float> %ceil_retval82, <4 x float>* %ceil_retval
  %63 = load <4 x float>* %v
  %64 = load <4 x float>* %ceil_retval
  %assignment_tmp8384 = fadd <4 x float> %63, %64
  store <4 x float> %assignment_tmp8384, <4 x float>* %assignment_tmp83
  %v85 = load <4 x float>* %assignment_tmp83
  store <4 x float> %v85, <4 x float>* %v
  %65 = load <4 x float>* %assignment_tmp83
  %fract_retval86 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %65)
  store <4 x float> %fract_retval86, <4 x float>* %fract_retval
  %66 = load <4 x float>* %v
  %67 = load <4 x float>* %fract_retval
  %assignment_tmp8788 = fadd <4 x float> %66, %67
  store <4 x float> %assignment_tmp8788, <4 x float>* %assignment_tmp87
  %v89 = load <4 x float>* %assignment_tmp87
  store <4 x float> %v89, <4 x float>* %v
  %68 = load <4 x float>* %assignment_tmp87
  %69 = load <4 x float>* %assignment_tmp87
  %mod_retval90 = frem <4 x float> %68, %69
  store <4 x float> %mod_retval90, <4 x float>* %mod_retval
  %70 = load <4 x float>* %v
  %71 = load <4 x float>* %mod_retval
  %assignment_tmp9192 = fadd <4 x float> %70, %71
  store <4 x float> %assignment_tmp9192, <4 x float>* %assignment_tmp91
  %v93 = load <4 x float>* %assignment_tmp91
  store <4 x float> %v93, <4 x float>* %v
  %72 = load <4 x float>* %assignment_tmp91
  %73 = load <4 x float> addrspace(1)* @uv4
  %min_retval94 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %72, <4 x float> %73)
  store <4 x float> %min_retval94, <4 x float>* %min_retval
  %74 = load <4 x float>* %v
  %75 = load <4 x float>* %min_retval
  %assignment_tmp9596 = fadd <4 x float> %74, %75
  store <4 x float> %assignment_tmp9596, <4 x float>* %assignment_tmp95
  %v97 = load <4 x float>* %assignment_tmp95
  store <4 x float> %v97, <4 x float>* %v
  %76 = load <4 x float>* %assignment_tmp95
  %77 = load <4 x float> addrspace(1)* @uv4
  %max_retval98 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %76, <4 x float> %77)
  store <4 x float> %max_retval98, <4 x float>* %max_retval
  %78 = load <4 x float>* %v
  %79 = load <4 x float>* %max_retval
  %assignment_tmp99100 = fadd <4 x float> %78, %79
  store <4 x float> %assignment_tmp99100, <4 x float>* %assignment_tmp99
  %v101 = load <4 x float>* %assignment_tmp99
  store <4 x float> %v101, <4 x float>* %v
  %80 = load <4 x float>* %assignment_tmp99
  %81 = load <4 x float> addrspace(1)* @uv4
  %82 = load <4 x float> addrspace(1)* @uv4
  %clamp_retval102 = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %80, <4 x float> %81, <4 x float> %82)
  store <4 x float> %clamp_retval102, <4 x float>* %clamp_retval
  %83 = load <4 x float>* %v
  %84 = load <4 x float>* %clamp_retval
  %assignment_tmp103104 = fadd <4 x float> %83, %84
  store <4 x float> %assignment_tmp103104, <4 x float>* %assignment_tmp103
  %v105 = load <4 x float>* %assignment_tmp103
  store <4 x float> %v105, <4 x float>* %v
  %85 = load <4 x float>* %assignment_tmp103
  %86 = load <4 x float>* %assignment_tmp103
  %87 = load <4 x float>* %assignment_tmp103
  %mix_retval106 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %85, <4 x float> %86, <4 x float> %87)
  store <4 x float> %mix_retval106, <4 x float>* %mix_retval
  %88 = load <4 x float>* %v
  %89 = load <4 x float>* %mix_retval
  %assignment_tmp107108 = fadd <4 x float> %88, %89
  store <4 x float> %assignment_tmp107108, <4 x float>* %assignment_tmp107
  %v109 = load <4 x float>* %assignment_tmp107
  store <4 x float> %v109, <4 x float>* %v
  %90 = load <4 x float>* %assignment_tmp107
  %91 = load <4 x float>* %assignment_tmp107
  %92 = load i1 addrspace(1)* @ub
  %93 = uitofp i1 %92 to float
  %mix_retval110111 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %90, <4 x float> %91, float %93)
  store <4 x float> %mix_retval110111, <4 x float>* %mix_retval110
  %94 = load <4 x float>* %v
  %95 = load <4 x float>* %mix_retval110
  %assignment_tmp112113 = fadd <4 x float> %94, %95
  store <4 x float> %assignment_tmp112113, <4 x float>* %assignment_tmp112
  %v114 = load <4 x float>* %assignment_tmp112
  store <4 x float> %v114, <4 x float>* %v
  %96 = load <4 x float>* %assignment_tmp112
  %97 = load <4 x float>* %assignment_tmp112
  %step_retval115 = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %96, <4 x float> %97)
  store <4 x float> %step_retval115, <4 x float>* %step_retval
  %98 = load <4 x float>* %v
  %99 = load <4 x float>* %step_retval
  %assignment_tmp116117 = fadd <4 x float> %98, %99
  store <4 x float> %assignment_tmp116117, <4 x float>* %assignment_tmp116
  %v118 = load <4 x float>* %assignment_tmp116
  store <4 x float> %v118, <4 x float>* %v
  %100 = load <4 x float>* %assignment_tmp116
  %101 = load <4 x float>* %assignment_tmp116
  %102 = load <4 x float>* %assignment_tmp116
  %smoothstep_retval119 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %100, <4 x float> %101, <4 x float> %102)
  store <4 x float> %smoothstep_retval119, <4 x float>* %smoothstep_retval
  %103 = load <4 x float>* %v
  %104 = load <4 x float>* %smoothstep_retval
  %assignment_tmp120121 = fadd <4 x float> %103, %104
  store <4 x float> %assignment_tmp120121, <4 x float>* %assignment_tmp120
  %v122 = load <4 x float>* %assignment_tmp120
  store <4 x float> %v122, <4 x float>* %v
  %105 = load <4 x float>* %assignment_tmp120
  %normalize_retval123 = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %105)
  store <4 x float> %normalize_retval123, <4 x float>* %normalize_retval
  %106 = load <4 x float>* %v
  %107 = load <4 x float>* %normalize_retval
  %assignment_tmp124125 = fadd <4 x float> %106, %107
  store <4 x float> %assignment_tmp124125, <4 x float>* %assignment_tmp124
  %v126 = load <4 x float>* %assignment_tmp124
  store <4 x float> %v126, <4 x float>* %v
  %108 = load <4 x float>* %assignment_tmp124
  %109 = load <4 x float>* %assignment_tmp124
  %110 = load <4 x float>* %assignment_tmp124
  %faceforward_retval127 = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %108, <4 x float> %109, <4 x float> %110)
  store <4 x float> %faceforward_retval127, <4 x float>* %faceforward_retval
  %111 = load <4 x float>* %v
  %112 = load <4 x float>* %faceforward_retval
  %assignment_tmp128129 = fadd <4 x float> %111, %112
  store <4 x float> %assignment_tmp128129, <4 x float>* %assignment_tmp128
  %v130 = load <4 x float>* %assignment_tmp128
  store <4 x float> %v130, <4 x float>* %v
  %113 = load <4 x float>* %assignment_tmp128
  %114 = load <4 x float>* %assignment_tmp128
  %reflect_retval131 = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %113, <4 x float> %114)
  store <4 x float> %reflect_retval131, <4 x float>* %reflect_retval
  %115 = load <4 x float>* %v
  %116 = load <4 x float>* %reflect_retval
  %assignment_tmp132133 = fadd <4 x float> %115, %116
  store <4 x float> %assignment_tmp132133, <4 x float>* %assignment_tmp132
  %v134 = load <4 x float>* %assignment_tmp132
  store <4 x float> %v134, <4 x float>* %v
  %117 = load <4 x float>* %assignment_tmp132
  %118 = load <4 x float>* %assignment_tmp132
  %119 = load float addrspace(1)* @uf
  %refract_retval135 = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %117, <4 x float> %118, float %119)
  store <4 x float> %refract_retval135, <4 x float>* %refract_retval
  %120 = load <4 x float>* %v
  %121 = load <4 x float>* %refract_retval
  %assignment_tmp136137 = fadd <4 x float> %120, %121
  store <4 x float> %assignment_tmp136137, <4 x float>* %assignment_tmp136
  %v138 = load <4 x float>* %assignment_tmp136
  store <4 x float> %v138, <4 x float>* %v
  %122 = load <4 x float>* %assignment_tmp136
  %dFdx_retval139 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %122)
  store <4 x float> %dFdx_retval139, <4 x float>* %dFdx_retval
  %123 = load <4 x float>* %v
  %124 = load <4 x float>* %dFdx_retval
  %assignment_tmp140141 = fadd <4 x float> %123, %124
  store <4 x float> %assignment_tmp140141, <4 x float>* %assignment_tmp140
  %v142 = load <4 x float>* %assignment_tmp140
  store <4 x float> %v142, <4 x float>* %v
  %125 = load <4 x float>* %assignment_tmp140
  %dFdy_retval143 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %125)
  store <4 x float> %dFdy_retval143, <4 x float>* %dFdy_retval
  %126 = load <4 x float>* %v
  %127 = load <4 x float>* %dFdy_retval
  %assignment_tmp144145 = fadd <4 x float> %126, %127
  store <4 x float> %assignment_tmp144145, <4 x float>* %assignment_tmp144
  %v146 = load <4 x float>* %assignment_tmp144
  store <4 x float> %v146, <4 x float>* %v
  %128 = load <4 x float>* %assignment_tmp144
  %fwidth_retval147 = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %128)
  store <4 x float> %fwidth_retval147, <4 x float>* %fwidth_retval
  %129 = load <4 x float>* %v
  %130 = load <4 x float>* %fwidth_retval
  %v148 = fadd <4 x float> %129, %130
  store <4 x float> %v148, <4 x float>* %v
  store i32 0, i32* %i
  %131 = load i32 addrspace(1)* @ui
  %abs_retval149150 = call i32 @llvm.gla.abs.i32.i32(i32 %131)
  store i32 %abs_retval149150, i32* %abs_retval149
  %132 = load i32* %i
  %133 = load i32* %abs_retval149
  %assignment_tmp151152 = add i32 %132, %133
  store i32 %assignment_tmp151152, i32* %assignment_tmp151
  %i153 = load i32* %assignment_tmp151
  store i32 %i153, i32* %i
  %134 = load i32* %assignment_tmp151
  %135 = load i32 addrspace(1)* @ui
  %min_retval154155 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %134, i32 %135)
  store i32 %min_retval154155, i32* %min_retval154
  %136 = load i32* %i
  %137 = load i32* %min_retval154
  %assignment_tmp156157 = add i32 %136, %137
  store i32 %assignment_tmp156157, i32* %assignment_tmp156
  %i158 = load i32* %assignment_tmp156
  store i32 %i158, i32* %i
  %138 = load i32* %assignment_tmp156
  %139 = load i32 addrspace(1)* @ui
  %max_retval159160 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %138, i32 %139)
  store i32 %max_retval159160, i32* %max_retval159
  %140 = load i32* %i
  %141 = load i32* %max_retval159
  %assignment_tmp161162 = add i32 %140, %141
  store i32 %assignment_tmp161162, i32* %assignment_tmp161
  %i163 = load i32* %assignment_tmp161
  store i32 %i163, i32* %i
  %142 = load i32* %assignment_tmp161
  %143 = load i32 addrspace(1)* @ui
  %144 = load i32 addrspace(1)* @ui
  %clamp_retval164165 = call i32 @llvm.gla.sClamp.i32.i32.i32.i32(i32 %142, i32 %143, i32 %144)
  store i32 %clamp_retval164165, i32* %clamp_retval164
  %145 = load i32* %i
  %146 = load i32* %clamp_retval164
  %i166 = add i32 %145, %146
  store i32 %i166, i32* %i
  %147 = load <4 x float>* %v
  %148 = load <4 x float>* %v
  %lessThan_retval167 = fcmp olt <4 x float> %147, %148
  store <4 x i1> %lessThan_retval167, <4 x i1>* %lessThan_retval
  %149 = load <4 x i1>* %lessThan_retval
  %any_retval168 = call i1 @llvm.gla.any.v4i1(<4 x i1> %149)
  store i1 %any_retval168, i1* %any_retval
  %b169 = load i1* %any_retval
  store i1 %b169, i1* %b
  %150 = load i1* %any_retval
  br i1 %150, label %then, label %else

then:                                             ; preds = %entry
  %151 = load <4 x float>* %v
  %152 = load <4 x float>* %v
  %lessThanEqual_retval170 = fcmp ole <4 x float> %151, %152
  store <4 x i1> %lessThanEqual_retval170, <4 x i1>* %lessThanEqual_retval
  %153 = load <4 x i1>* %lessThanEqual_retval
  %any_retval171172 = call i1 @llvm.gla.any.v4i1(<4 x i1> %153)
  store i1 %any_retval171172, i1* %any_retval171
  %and_tmp173 = load i1* %any_retval171
  store i1 %and_tmp173, i1* %and_tmp
  br label %ifmerge

else:                                             ; preds = %entry
  store i1 false, i1* %and_tmp
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %b174 = load i1* %and_tmp
  store i1 %b174, i1* %b
  %154 = load i1* %and_tmp
  br i1 %154, label %then176, label %else181

then176:                                          ; preds = %ifmerge
  %155 = load <4 x float>* %v
  %156 = load <4 x float>* %v
  %greaterThan_retval177 = fcmp ogt <4 x float> %155, %156
  store <4 x i1> %greaterThan_retval177, <4 x i1>* %greaterThan_retval
  %157 = load <4 x i1>* %greaterThan_retval
  %any_retval178179 = call i1 @llvm.gla.any.v4i1(<4 x i1> %157)
  store i1 %any_retval178179, i1* %any_retval178
  %and_tmp175180 = load i1* %any_retval178
  store i1 %and_tmp175180, i1* %and_tmp175
  br label %ifmerge182

else181:                                          ; preds = %ifmerge
  store i1 false, i1* %and_tmp175
  br label %ifmerge182

ifmerge182:                                       ; preds = %else181, %then176
  %b183 = load i1* %and_tmp175
  store i1 %b183, i1* %b
  %158 = load i1* %and_tmp175
  br i1 %158, label %then185, label %else190

then185:                                          ; preds = %ifmerge182
  %159 = load <4 x float>* %v
  %160 = load <4 x float>* %v
  %greaterThanEqual_retval186 = fcmp oge <4 x float> %159, %160
  store <4 x i1> %greaterThanEqual_retval186, <4 x i1>* %greaterThanEqual_retval
  %161 = load <4 x i1>* %greaterThanEqual_retval
  %any_retval187188 = call i1 @llvm.gla.any.v4i1(<4 x i1> %161)
  store i1 %any_retval187188, i1* %any_retval187
  %and_tmp184189 = load i1* %any_retval187
  store i1 %and_tmp184189, i1* %and_tmp184
  br label %ifmerge191

else190:                                          ; preds = %ifmerge182
  store i1 false, i1* %and_tmp184
  br label %ifmerge191

ifmerge191:                                       ; preds = %else190, %then185
  %b192 = load i1* %and_tmp184
  store i1 %b192, i1* %b
  %162 = load i1* %and_tmp184
  br i1 %162, label %then194, label %else199

then194:                                          ; preds = %ifmerge191
  %163 = load <4 x i1> addrspace(1)* @ub41
  %164 = load <4 x i1> addrspace(1)* @ub42
  %equal_retval195 = icmp eq <4 x i1> %163, %164
  store <4 x i1> %equal_retval195, <4 x i1>* %equal_retval
  %165 = load <4 x i1>* %equal_retval
  %any_retval196197 = call i1 @llvm.gla.any.v4i1(<4 x i1> %165)
  store i1 %any_retval196197, i1* %any_retval196
  %and_tmp193198 = load i1* %any_retval196
  store i1 %and_tmp193198, i1* %and_tmp193
  br label %ifmerge200

else199:                                          ; preds = %ifmerge191
  store i1 false, i1* %and_tmp193
  br label %ifmerge200

ifmerge200:                                       ; preds = %else199, %then194
  %b201 = load i1* %and_tmp193
  store i1 %b201, i1* %b
  %166 = load i1* %and_tmp193
  br i1 %166, label %then203, label %else208

then203:                                          ; preds = %ifmerge200
  %167 = load <4 x i1> addrspace(1)* @ub41
  %168 = load <4 x i1> addrspace(1)* @ub42
  %notEqual_retval204 = icmp ne <4 x i1> %167, %168
  store <4 x i1> %notEqual_retval204, <4 x i1>* %notEqual_retval
  %169 = load <4 x i1>* %notEqual_retval
  %any_retval205206 = call i1 @llvm.gla.any.v4i1(<4 x i1> %169)
  store i1 %any_retval205206, i1* %any_retval205
  %and_tmp202207 = load i1* %any_retval205
  store i1 %and_tmp202207, i1* %and_tmp202
  br label %ifmerge209

else208:                                          ; preds = %ifmerge200
  store i1 false, i1* %and_tmp202
  br label %ifmerge209

ifmerge209:                                       ; preds = %else208, %then203
  %b210 = load i1* %and_tmp202
  store i1 %b210, i1* %b
  %170 = load i1* %and_tmp202
  br i1 %170, label %then212, label %else216

then212:                                          ; preds = %ifmerge209
  %171 = load <4 x i1> addrspace(1)* @ub41
  %any_retval213214 = call i1 @llvm.gla.any.v4i1(<4 x i1> %171)
  store i1 %any_retval213214, i1* %any_retval213
  %and_tmp211215 = load i1* %any_retval213
  store i1 %and_tmp211215, i1* %and_tmp211
  br label %ifmerge217

else216:                                          ; preds = %ifmerge209
  store i1 false, i1* %and_tmp211
  br label %ifmerge217

ifmerge217:                                       ; preds = %else216, %then212
  %b218 = load i1* %and_tmp211
  store i1 %b218, i1* %b
  %172 = load i1* %and_tmp211
  br i1 %172, label %then220, label %else223

then220:                                          ; preds = %ifmerge217
  %173 = load <4 x i1> addrspace(1)* @ub41
  %all_retval221 = call i1 @llvm.gla.all.v4i1(<4 x i1> %173)
  store i1 %all_retval221, i1* %all_retval
  %and_tmp219222 = load i1* %all_retval
  store i1 %and_tmp219222, i1* %and_tmp219
  br label %ifmerge224

else223:                                          ; preds = %ifmerge217
  store i1 false, i1* %and_tmp219
  br label %ifmerge224

ifmerge224:                                       ; preds = %else223, %then220
  %b225 = load i1* %and_tmp219
  store i1 %b225, i1* %b
  %174 = load i1* %and_tmp219
  br i1 %174, label %then227, label %else232

then227:                                          ; preds = %ifmerge224
  %175 = load <4 x i1> addrspace(1)* @ub41
  %not_retval228 = xor <4 x i1> %175, <i1 true, i1 true, i1 true, i1 true>
  store <4 x i1> %not_retval228, <4 x i1>* %not_retval
  %176 = load <4 x i1>* %not_retval
  %any_retval229230 = call i1 @llvm.gla.any.v4i1(<4 x i1> %176)
  store i1 %any_retval229230, i1* %any_retval229
  %and_tmp226231 = load i1* %any_retval229
  store i1 %and_tmp226231, i1* %and_tmp226
  br label %ifmerge233

else232:                                          ; preds = %ifmerge224
  store i1 false, i1* %and_tmp226
  br label %ifmerge233

ifmerge233:                                       ; preds = %else232, %then227
  %b234 = load i1* %and_tmp226
  store i1 %b234, i1* %b
  %177 = load i32* %i
  %178 = load i32 addrspace(1)* @ui
  %179 = add i32 %177, %178
  %180 = load i32* %i
  %181 = mul i32 %179, %180
  %182 = load i32 addrspace(1)* @ui
  %183 = sub i32 %181, %182
  %184 = load i32* %i
  %185 = sdiv i32 %183, %184
  %186 = load i32 addrspace(1)* @ui
  %assignment_tmp235236 = srem i32 %185, %186
  store i32 %assignment_tmp235236, i32* %assignment_tmp235
  %i237 = load i32* %assignment_tmp235
  store i32 %i237, i32* %i
  %187 = load i32* %assignment_tmp235
  %188 = load i32 addrspace(1)* @ui
  %189 = icmp eq i32 %187, %188
  br i1 %189, label %then238, label %else239

then238:                                          ; preds = %ifmerge233
  store i1 true, i1* %or_tmp
  br label %ifmerge246

else239:                                          ; preds = %ifmerge233
  %190 = load i32* %assignment_tmp235
  %191 = load i32 addrspace(1)* @ui
  %192 = icmp ne i32 %190, %191
  br i1 %192, label %then241, label %else243

then241:                                          ; preds = %else239
  %193 = load i32* %assignment_tmp235
  %194 = load i32 addrspace(1)* @ui
  %and_tmp240242 = icmp eq i32 %193, %194
  store i1 %and_tmp240242, i1* %and_tmp240
  br label %ifmerge244

else243:                                          ; preds = %else239
  store i1 false, i1* %and_tmp240
  br label %ifmerge244

ifmerge244:                                       ; preds = %else243, %then241
  %195 = load i1* %and_tmp240
  %196 = load i32* %assignment_tmp235
  %197 = icmp ne i32 %196, 2
  %or_tmp245 = xor i1 %195, %197
  store i1 %or_tmp245, i1* %or_tmp
  br label %ifmerge246

ifmerge246:                                       ; preds = %ifmerge244, %then238
  %198 = load i1* %or_tmp
  br i1 %198, label %then247, label %ifmerge249

then247:                                          ; preds = %ifmerge246
  %199 = load i32* %assignment_tmp235
  %i248 = add i32 %199, 1
  store i32 %i248, i32* %i
  br label %ifmerge249

ifmerge249:                                       ; preds = %then247, %ifmerge246
  %200 = load float addrspace(1)* @uf
  %201 = load float addrspace(1)* @uf
  %202 = fadd float %200, %201
  %203 = load float addrspace(1)* @uf
  %204 = fmul float %202, %203
  %205 = load float addrspace(1)* @uf
  %206 = fsub float %204, %205
  %207 = load float addrspace(1)* @uf
  %f250 = fdiv float %206, %207
  store float %f250, float* %f
  %208 = load <4 x float>* %v
  %length_retval251 = call float @llvm.gla.fLength.v4f32(<4 x float> %208)
  store float %length_retval251, float* %length_retval
  %209 = load float* %f
  %210 = load float* %length_retval
  %f252 = fadd float %209, %210
  store float %f252, float* %f
  %211 = load <4 x float>* %v
  %212 = load <4 x float>* %v
  %distance_retval253 = call float @llvm.gla.fDistance.v4f32.v4f32(<4 x float> %211, <4 x float> %212)
  store float %distance_retval253, float* %distance_retval
  %213 = load float* %f
  %214 = load float* %distance_retval
  %f254 = fadd float %213, %214
  store float %f254, float* %f
  %215 = load <4 x float>* %v
  %216 = load <4 x float>* %v
  %dot_retval255 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %215, <4 x float> %216)
  store float %dot_retval255, float* %dot_retval
  %217 = load float* %f
  %218 = load float* %dot_retval
  %f256 = fadd float %217, %218
  store float %f256, float* %f
  %219 = load <4 x float>* %v
  %220 = extractelement <4 x float> %219, i32 0
  %221 = insertelement <3 x float> undef, float %220, i32 0
  %222 = extractelement <4 x float> %219, i32 1
  %223 = insertelement <3 x float> %221, float %222, i32 1
  %224 = extractelement <4 x float> %219, i32 2
  %225 = insertelement <3 x float> %223, float %224, i32 2
  %226 = load <4 x float>* %v
  %227 = extractelement <4 x float> %226, i32 0
  %228 = insertelement <3 x float> undef, float %227, i32 0
  %229 = extractelement <4 x float> %226, i32 1
  %230 = insertelement <3 x float> %228, float %229, i32 1
  %231 = extractelement <4 x float> %226, i32 2
  %232 = insertelement <3 x float> %230, float %231, i32 2
  %cross_retval257 = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %225, <3 x float> %232)
  store <3 x float> %cross_retval257, <3 x float>* %cross_retval
  %233 = load float* %f
  %234 = load <3 x float>* %cross_retval
  %235 = extractelement <3 x float> %234, i32 0
  %assignment_tmp258259 = fadd float %233, %235
  store float %assignment_tmp258259, float* %assignment_tmp258
  %f260 = load float* %assignment_tmp258
  store float %f260, float* %f
  %236 = load float* %assignment_tmp258
  %237 = load float addrspace(1)* @uf
  %238 = fcmp oeq float %236, %237
  br i1 %238, label %then262, label %else263

then262:                                          ; preds = %ifmerge249
  store i1 true, i1* %or_tmp261
  br label %ifmerge270

else263:                                          ; preds = %ifmerge249
  %239 = load float* %assignment_tmp258
  %240 = load float addrspace(1)* @uf
  %241 = fcmp one float %239, %240
  br i1 %241, label %then265, label %else267

then265:                                          ; preds = %else263
  %242 = load float* %assignment_tmp258
  %and_tmp264266 = fcmp one float %242, 2.000000e+00
  store i1 %and_tmp264266, i1* %and_tmp264
  br label %ifmerge268

else267:                                          ; preds = %else263
  store i1 false, i1* %and_tmp264
  br label %ifmerge268

ifmerge268:                                       ; preds = %else267, %then265
  %or_tmp261269 = load i1* %and_tmp264
  store i1 %or_tmp261269, i1* %or_tmp261
  br label %ifmerge270

ifmerge270:                                       ; preds = %ifmerge268, %then262
  %243 = load i1* %or_tmp261
  br i1 %243, label %then271, label %ifmerge273

then271:                                          ; preds = %ifmerge270
  %244 = load float* %assignment_tmp258
  %f272 = fadd float %244, 1.000000e+00
  store float %f272, float* %f
  br label %ifmerge273

ifmerge273:                                       ; preds = %then271, %ifmerge270
  %245 = load i32* %i
  %246 = load i32 addrspace(1)* @ui
  %247 = and i32 %245, %246
  %248 = or i32 %247, 66
  %249 = load i32 addrspace(1)* @ui
  %250 = xor i32 %248, %249
  %251 = srem i32 %250, 17
  %252 = lshr i32 %251, 2
  %253 = load i32 addrspace(1)* @ui
  %254 = shl i32 %252, %253
  %assignment_tmp274275 = xor i32 %254, -1
  store i32 %assignment_tmp274275, i32* %assignment_tmp274
  %i276 = load i32* %assignment_tmp274
  store i32 %i276, i32* %i
  %255 = load i1* %b
  %assignment_tmp277278 = xor i1 %255, true
  store i1 %assignment_tmp277278, i1* %assignment_tmp277
  %b279 = load i1* %assignment_tmp277
  store i1 %b279, i1* %b
  %256 = load i1* %assignment_tmp277
  br i1 %256, label %then280, label %else282

then280:                                          ; preds = %ifmerge273
  %257 = load i32* %assignment_tmp274
  %258 = sitofp i32 %257 to float
  %259 = insertelement <4 x float> undef, float %258, i32 0
  %260 = insertelement <4 x float> %259, float %258, i32 1
  %261 = insertelement <4 x float> %260, float %258, i32 2
  %262 = insertelement <4 x float> %261, float %258, i32 3
  %263 = load float* %f
  %264 = insertelement <4 x float> undef, float %263, i32 0
  %265 = insertelement <4 x float> %264, float %263, i32 1
  %266 = insertelement <4 x float> %265, float %263, i32 2
  %267 = insertelement <4 x float> %266, float %263, i32 3
  %268 = fadd <4 x float> %262, %267
  %269 = load <4 x float>* %v
  %conditional_tmp281 = fadd <4 x float> %268, %269
  store <4 x float> %conditional_tmp281, <4 x float>* %conditional_tmp
  br label %ifmerge284

else282:                                          ; preds = %ifmerge273
  %conditional_tmp283 = load <4 x float>* %v
  store <4 x float> %conditional_tmp283, <4 x float>* %conditional_tmp
  br label %ifmerge284

ifmerge284:                                       ; preds = %else282, %then280
  %gl_FragColor = load <4 x float>* %conditional_tmp
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %270 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %270)
  ret void
}

declare <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sClamp.i32.i32.i32.i32(i32, i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare float @llvm.gla.fLength.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fDistance.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fDot.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@gl_MaxLights = internal constant i32 8
@gl_MaxClipPlanes = internal constant i32 8
@gl_MaxTextureUnits = internal constant i32 2
@gl_MaxTextureCoords = internal constant i32 4
@gl_MaxVertexAttribs = internal constant i32 16
@gl_MaxVertexUniformComponents = internal constant i32 512
@gl_MaxVaryingFloats = internal constant i32 32
@gl_MaxVertexTextureImageUnits = internal constant i32 0
@gl_MaxCombinedTextureImageUnits = internal constant i32 2
@gl_MaxTextureImageUnits = internal constant i32 2
@gl_MaxFragmentUniformComponents = internal constant i32 64
@gl_MaxDrawBuffers = internal constant i32 2
@uv4 = external addrspace(1) constant <4 x float>
@ub = external addrspace(1) constant i1
@uf = external addrspace(1) constant float
@ui = external addrspace(1) constant i32
@ub41 = external addrspace(1) constant <4 x i1>
@ub42 = external addrspace(1) constant <4 x i1>

define void @main() {
entry:
  %0 = load <4 x float> addrspace(1)* @uv4
  %radians_retval1 = call <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float> %0)
  %degrees_retval3 = call <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float> %radians_retval1)
  %assignment_tmp4 = fadd <4 x float> %radians_retval1, %degrees_retval3
  %sin_retval6 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %assignment_tmp4)
  %assignment_tmp78 = fadd <4 x float> %assignment_tmp4, %sin_retval6
  %cos_retval10 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %assignment_tmp78)
  %assignment_tmp1112 = fadd <4 x float> %assignment_tmp78, %cos_retval10
  %tan_retval14 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %assignment_tmp1112)
  %assignment_tmp1516 = fadd <4 x float> %assignment_tmp1112, %tan_retval14
  %asin_retval18 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %assignment_tmp1516)
  %assignment_tmp1920 = fadd <4 x float> %assignment_tmp1516, %asin_retval18
  %acos_retval22 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %assignment_tmp1920)
  %assignment_tmp2324 = fadd <4 x float> %assignment_tmp1920, %acos_retval22
  %atan_retval26 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %assignment_tmp2324)
  %assignment_tmp2728 = fadd <4 x float> %assignment_tmp2324, %atan_retval26
  %sinh_retval30 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %assignment_tmp2728)
  %assignment_tmp3132 = fadd <4 x float> %assignment_tmp2728, %sinh_retval30
  %cosh_retval34 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %assignment_tmp3132)
  %assignment_tmp3536 = fadd <4 x float> %assignment_tmp3132, %cosh_retval34
  %tanh_retval38 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %assignment_tmp3536)
  %assignment_tmp3940 = fadd <4 x float> %assignment_tmp3536, %tanh_retval38
  %pow_retval42 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp3940, <4 x float> %assignment_tmp3940)
  %assignment_tmp4344 = fadd <4 x float> %assignment_tmp3940, %pow_retval42
  %exp_retval46 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %assignment_tmp4344)
  %assignment_tmp4748 = fadd <4 x float> %assignment_tmp4344, %exp_retval46
  %log_retval50 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %assignment_tmp4748)
  %assignment_tmp5152 = fadd <4 x float> %assignment_tmp4748, %log_retval50
  %exp2_retval54 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %assignment_tmp5152)
  %assignment_tmp5556 = fadd <4 x float> %assignment_tmp5152, %exp2_retval54
  %log2_retval58 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %assignment_tmp5556)
  %assignment_tmp5960 = fadd <4 x float> %assignment_tmp5556, %log2_retval58
  %sqrt_retval62 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %assignment_tmp5960)
  %assignment_tmp6364 = fadd <4 x float> %assignment_tmp5960, %sqrt_retval62
  %inversesqrt_retval66 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %assignment_tmp6364)
  %assignment_tmp6768 = fadd <4 x float> %assignment_tmp6364, %inversesqrt_retval66
  %abs_retval70 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %assignment_tmp6768)
  %assignment_tmp7172 = fadd <4 x float> %assignment_tmp6768, %abs_retval70
  %sign_retval74 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %assignment_tmp7172)
  %assignment_tmp7576 = fadd <4 x float> %assignment_tmp7172, %sign_retval74
  %floor_retval78 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %assignment_tmp7576)
  %assignment_tmp7980 = fadd <4 x float> %assignment_tmp7576, %floor_retval78
  %ceil_retval82 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %assignment_tmp7980)
  %assignment_tmp8384 = fadd <4 x float> %assignment_tmp7980, %ceil_retval82
  %fract_retval86 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %assignment_tmp8384)
  %assignment_tmp8788 = fadd <4 x float> %assignment_tmp8384, %fract_retval86
  %mod_retval90 = frem <4 x float> %assignment_tmp8788, %assignment_tmp8788
  %assignment_tmp9192 = fadd <4 x float> %assignment_tmp8788, %mod_retval90
  %min_retval94 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp9192, <4 x float> %0)
  %assignment_tmp9596 = fadd <4 x float> %assignment_tmp9192, %min_retval94
  %max_retval98 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp9596, <4 x float> %0)
  %assignment_tmp99100 = fadd <4 x float> %assignment_tmp9596, %max_retval98
  %clamp_retval102 = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp99100, <4 x float> %0, <4 x float> %0)
  %assignment_tmp103104 = fadd <4 x float> %assignment_tmp99100, %clamp_retval102
  %mix_retval106 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp103104, <4 x float> %assignment_tmp103104, <4 x float> %assignment_tmp103104)
  %assignment_tmp107108 = fadd <4 x float> %assignment_tmp103104, %mix_retval106
  %1 = load i1 addrspace(1)* @ub
  %2 = uitofp i1 %1 to float
  %mix_retval110111 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %assignment_tmp107108, <4 x float> %assignment_tmp107108, float %2)
  %assignment_tmp112113 = fadd <4 x float> %assignment_tmp107108, %mix_retval110111
  %step_retval115 = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp112113, <4 x float> %assignment_tmp112113)
  %assignment_tmp116117 = fadd <4 x float> %assignment_tmp112113, %step_retval115
  %smoothstep_retval119 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp116117, <4 x float> %assignment_tmp116117, <4 x float> %assignment_tmp116117)
  %assignment_tmp120121 = fadd <4 x float> %assignment_tmp116117, %smoothstep_retval119
  %normalize_retval123 = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %assignment_tmp120121)
  %assignment_tmp124125 = fadd <4 x float> %assignment_tmp120121, %normalize_retval123
  %faceforward_retval127 = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp124125, <4 x float> %assignment_tmp124125, <4 x float> %assignment_tmp124125)
  %assignment_tmp128129 = fadd <4 x float> %assignment_tmp124125, %faceforward_retval127
  %reflect_retval131 = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp128129, <4 x float> %assignment_tmp128129)
  %assignment_tmp132133 = fadd <4 x float> %assignment_tmp128129, %reflect_retval131
  %3 = load float addrspace(1)* @uf
  %refract_retval135 = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %assignment_tmp132133, <4 x float> %assignment_tmp132133, float %3)
  %assignment_tmp136137 = fadd <4 x float> %assignment_tmp132133, %refract_retval135
  %dFdx_retval139 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %assignment_tmp136137)
  %assignment_tmp140141 = fadd <4 x float> %assignment_tmp136137, %dFdx_retval139
  %dFdy_retval143 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %assignment_tmp140141)
  %assignment_tmp144145 = fadd <4 x float> %assignment_tmp140141, %dFdy_retval143
  %fwidth_retval147 = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %assignment_tmp144145)
  %v148 = fadd <4 x float> %assignment_tmp144145, %fwidth_retval147
  %4 = load i32 addrspace(1)* @ui
  %abs_retval149150 = call i32 @llvm.gla.abs.i32.i32(i32 %4)
  %min_retval154155 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %abs_retval149150, i32 %4)
  %assignment_tmp156157 = add i32 %min_retval154155, %abs_retval149150
  %max_retval159160 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %assignment_tmp156157, i32 %4)
  %assignment_tmp161162 = add i32 %max_retval159160, %assignment_tmp156157
  %clamp_retval164165 = call i32 @llvm.gla.sClamp.i32.i32.i32.i32(i32 %assignment_tmp161162, i32 %4, i32 %4)
  %i166 = add i32 %clamp_retval164165, %assignment_tmp161162
  %lessThan_retval167 = fcmp olt <4 x float> %v148, %v148
  %any_retval168 = call i1 @llvm.gla.any.v4i1(<4 x i1> %lessThan_retval167)
  br i1 %any_retval168, label %then, label %else

then:                                             ; preds = %entry
  %lessThanEqual_retval170 = fcmp ole <4 x float> %v148, %v148
  %any_retval171172 = call i1 @llvm.gla.any.v4i1(<4 x i1> %lessThanEqual_retval170)
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %and_tmp.0 = phi i1 [ %any_retval171172, %then ], [ false, %else ]
  br i1 %and_tmp.0, label %then176, label %else181

then176:                                          ; preds = %ifmerge
  %greaterThan_retval177 = fcmp ogt <4 x float> %v148, %v148
  %any_retval178179 = call i1 @llvm.gla.any.v4i1(<4 x i1> %greaterThan_retval177)
  br label %ifmerge182

else181:                                          ; preds = %ifmerge
  br label %ifmerge182

ifmerge182:                                       ; preds = %else181, %then176
  %and_tmp175.0 = phi i1 [ %any_retval178179, %then176 ], [ false, %else181 ]
  br i1 %and_tmp175.0, label %then185, label %else190

then185:                                          ; preds = %ifmerge182
  %greaterThanEqual_retval186 = fcmp oge <4 x float> %v148, %v148
  %any_retval187188 = call i1 @llvm.gla.any.v4i1(<4 x i1> %greaterThanEqual_retval186)
  br label %ifmerge191

else190:                                          ; preds = %ifmerge182
  br label %ifmerge191

ifmerge191:                                       ; preds = %else190, %then185
  %and_tmp184.0 = phi i1 [ %any_retval187188, %then185 ], [ false, %else190 ]
  br i1 %and_tmp184.0, label %then194, label %else199

then194:                                          ; preds = %ifmerge191
  %5 = load <4 x i1> addrspace(1)* @ub41
  %6 = load <4 x i1> addrspace(1)* @ub42
  %equal_retval195 = icmp eq <4 x i1> %5, %6
  %any_retval196197 = call i1 @llvm.gla.any.v4i1(<4 x i1> %equal_retval195)
  br label %ifmerge200

else199:                                          ; preds = %ifmerge191
  br label %ifmerge200

ifmerge200:                                       ; preds = %else199, %then194
  %and_tmp193.0 = phi i1 [ %any_retval196197, %then194 ], [ false, %else199 ]
  br i1 %and_tmp193.0, label %then203, label %else208

then203:                                          ; preds = %ifmerge200
  %7 = load <4 x i1> addrspace(1)* @ub41
  %8 = load <4 x i1> addrspace(1)* @ub42
  %notEqual_retval204 = icmp ne <4 x i1> %7, %8
  %any_retval205206 = call i1 @llvm.gla.any.v4i1(<4 x i1> %notEqual_retval204)
  br label %ifmerge209

else208:                                          ; preds = %ifmerge200
  br label %ifmerge209

ifmerge209:                                       ; preds = %else208, %then203
  %and_tmp202.0 = phi i1 [ %any_retval205206, %then203 ], [ false, %else208 ]
  br i1 %and_tmp202.0, label %then212, label %else216

then212:                                          ; preds = %ifmerge209
  %9 = load <4 x i1> addrspace(1)* @ub41
  %any_retval213214 = call i1 @llvm.gla.any.v4i1(<4 x i1> %9)
  br label %ifmerge217

else216:                                          ; preds = %ifmerge209
  br label %ifmerge217

ifmerge217:                                       ; preds = %else216, %then212
  %and_tmp211.0 = phi i1 [ %any_retval213214, %then212 ], [ false, %else216 ]
  br i1 %and_tmp211.0, label %then220, label %else223

then220:                                          ; preds = %ifmerge217
  %10 = load <4 x i1> addrspace(1)* @ub41
  %all_retval221 = call i1 @llvm.gla.all.v4i1(<4 x i1> %10)
  br label %ifmerge224

else223:                                          ; preds = %ifmerge217
  br label %ifmerge224

ifmerge224:                                       ; preds = %else223, %then220
  %and_tmp219.0 = phi i1 [ %all_retval221, %then220 ], [ false, %else223 ]
  br i1 %and_tmp219.0, label %then227, label %else232

then227:                                          ; preds = %ifmerge224
  %11 = load <4 x i1> addrspace(1)* @ub41
  %not_retval228 = xor <4 x i1> %11, <i1 true, i1 true, i1 true, i1 true>
  %any_retval229230 = call i1 @llvm.gla.any.v4i1(<4 x i1> %not_retval228)
  br label %ifmerge233

else232:                                          ; preds = %ifmerge224
  br label %ifmerge233

ifmerge233:                                       ; preds = %else232, %then227
  %and_tmp226.0 = phi i1 [ %any_retval229230, %then227 ], [ false, %else232 ]
  %12 = add i32 %4, %i166
  %13 = mul i32 %12, %i166
  %14 = sub i32 %13, %4
  %15 = sdiv i32 %14, %i166
  %assignment_tmp235236 = srem i32 %15, %4
  %16 = icmp eq i32 %assignment_tmp235236, %4
  br i1 %16, label %then238, label %else239

then238:                                          ; preds = %ifmerge233
  br label %ifmerge246

else239:                                          ; preds = %ifmerge233
  %17 = icmp ne i32 %assignment_tmp235236, %4
  br i1 %17, label %then241, label %else243

then241:                                          ; preds = %else239
  br label %ifmerge244

else243:                                          ; preds = %else239
  br label %ifmerge244

ifmerge244:                                       ; preds = %else243, %then241
  %18 = icmp ne i32 %assignment_tmp235236, 2
  %or_tmp245 = xor i1 false, %18
  br label %ifmerge246

ifmerge246:                                       ; preds = %ifmerge244, %then238
  %or_tmp.0 = phi i1 [ true, %then238 ], [ %or_tmp245, %ifmerge244 ]
  br i1 %or_tmp.0, label %then247, label %ifmerge249

then247:                                          ; preds = %ifmerge246
  %i248 = add i32 %assignment_tmp235236, 1
  br label %ifmerge249

ifmerge249:                                       ; preds = %then247, %ifmerge246
  %i.0 = phi i32 [ %i248, %then247 ], [ %assignment_tmp235236, %ifmerge246 ]
  %19 = fadd float %3, %3
  %20 = fmul float %19, %3
  %21 = fsub float %20, %3
  %f250 = fdiv float %21, %3
  %length_retval251 = call float @llvm.gla.fLength.v4f32(<4 x float> %v148)
  %f252 = fadd float %f250, %length_retval251
  %distance_retval253 = call float @llvm.gla.fDistance.v4f32.v4f32(<4 x float> %v148, <4 x float> %v148)
  %f254 = fadd float %f252, %distance_retval253
  %dot_retval255 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %v148, <4 x float> %v148)
  %f256 = fadd float %f254, %dot_retval255
  %22 = call <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.v4f32.v4f32.v4f32.f32(<3 x float> undef, i32 7, <4 x float> %v148, i32 0, <4 x float> %v148, i32 1, <4 x float> %v148, i32 2, float 0.000000e+00, i32 -1)
  %cross_retval257 = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %22, <3 x float> %22)
  %23 = extractelement <3 x float> %cross_retval257, i32 0
  %assignment_tmp258259 = fadd float %f256, %23
  %24 = fcmp oeq float %assignment_tmp258259, %3
  br i1 %24, label %then262, label %else263

then262:                                          ; preds = %ifmerge249
  br label %ifmerge270

else263:                                          ; preds = %ifmerge249
  %25 = fcmp one float %assignment_tmp258259, %3
  br i1 %25, label %then265, label %else267

then265:                                          ; preds = %else263
  %and_tmp264266 = fcmp one float %assignment_tmp258259, 2.000000e+00
  br label %ifmerge268

else267:                                          ; preds = %else263
  br label %ifmerge268

ifmerge268:                                       ; preds = %else267, %then265
  %and_tmp264.0 = phi i1 [ %and_tmp264266, %then265 ], [ false, %else267 ]
  br label %ifmerge270

ifmerge270:                                       ; preds = %ifmerge268, %then262
  %or_tmp261.0 = phi i1 [ true, %then262 ], [ %and_tmp264.0, %ifmerge268 ]
  br i1 %or_tmp261.0, label %then271, label %ifmerge273

then271:                                          ; preds = %ifmerge270
  %f272 = fadd float %assignment_tmp258259, 1.000000e+00
  br label %ifmerge273

ifmerge273:                                       ; preds = %then271, %ifmerge270
  %f.0 = phi float [ %f272, %then271 ], [ %assignment_tmp258259, %ifmerge270 ]
  %26 = and i32 %4, %i.0
  %27 = or i32 %26, 66
  %28 = xor i32 %27, %4
  %29 = srem i32 %28, 17
  %30 = lshr i32 %29, 2
  %31 = shl i32 %30, %4
  %assignment_tmp274275 = xor i32 %31, -1
  %assignment_tmp277278 = xor i1 %and_tmp226.0, true
  br i1 %assignment_tmp277278, label %then280, label %else282

then280:                                          ; preds = %ifmerge273
  %32 = sitofp i32 %assignment_tmp274275 to float
  %33 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %32, i32 -1, float %32, i32 -1, float %32, i32 -1, float %32, i32 -1)
  %34 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %f.0, i32 -1, float %f.0, i32 -1, float %f.0, i32 -1, float %f.0, i32 -1)
  %35 = fadd <4 x float> %33, %34
  %conditional_tmp281 = fadd <4 x float> %35, %v148
  br label %ifmerge284

else282:                                          ; preds = %ifmerge273
  br label %ifmerge284

ifmerge284:                                       ; preds = %else282, %then280
  %conditional_tmp.0 = phi <4 x float> [ %conditional_tmp281, %then280 ], [ %v148, %else282 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %conditional_tmp.0)
  ret void
}

declare <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sClamp.i32.i32.i32.i32(i32, i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare float @llvm.gla.fLength.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fDistance.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fDot.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.v4f32.v4f32.v4f32.f32(<3 x float>, i32, <4 x float>, i32, <4 x float>, i32, <4 x float>, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

***Unsupported functionality: intrinsic in Bottom IR
compiling Operations.frag...
uniform ivec4 uiv4 ; 
uniform vec4 uv4 ; 
uniform bool ub ; 
uniform bvec4 ub41 , ub42 ; 
uniform float uf ; 
uniform int ui ; 
void  main (){
vec4 v ; float f ; bool b ; bvec4 bv4 ; int i ; v = radians ( uv4 ) ; v += degrees ( v ) ; v += sin ( v ) ; v += cos ( v ) ; v += tan ( v ) ; v += asin ( v ) ; v += acos ( v ) ; v += atan ( v ) ; v += sinh ( v ) ; v += cosh ( v ) ; v += tanh ( v ) ; v += pow ( v , v ) ; v += exp ( v ) ; v += log ( v ) ; v += exp2 ( v ) ; v += log2 ( v ) ; v += sqrt ( v ) ; v += inversesqrt ( v ) ; v += abs ( v ) ; v += sign ( v ) ; v += floor ( v ) ; v += ceil ( v ) ; v += fract ( v ) ; v += mod ( v , v ) ; v += min ( v , uv4 ) ; v += max ( v , uv4 ) ; v += clamp ( v , uv4 , uv4 ) ; v += mix ( v , v , v ) ; v += mix ( v , v , ub ) ; v += step ( v , v ) ; v += smoothstep ( v , v , v ) ; v += normalize ( v ) ; v += faceforward ( v , v , v ) ; v += reflect ( v , v ) ; v += refract ( v , v , uf ) ; v += dFdx ( v ) ; v += dFdy ( v ) ; v += fwidth ( v ) ; i = 0 ; i += abs ( ui ) ; i += min ( i , ui ) ; i += max ( i , ui ) ; i += clamp ( i , ui , ui ) ; b = any ( lessThan ( v , v ) ) ; b = b && any ( lessThanEqual ( v , v ) ) ; b = b && any ( greaterThan ( v , v ) ) ; b = b && any ( greaterThanEqual ( v , v ) ) ; b = b && any ( equal ( ub41 , ub42 ) ) ; b = b && any ( notEqual ( ub41 , ub42 ) ) ; b = b && any ( ub41 ) ; b = b && all ( ub41 ) ; b = b && any ( not ( ub41 ) ) ; i = i + ui * i - ui / i ; i = i % ui ; if ( i == ui || i != ui && i == ui ^^ i != 2 ) ++ i ; f = uf + uf * uf - uf / uf ; f += length ( v ) ; f += distance ( v , v ) ; f += dot ( v , v ) ; f += cross ( v . xyz , v . xyz ) . x ; if ( f == uf || f != uf && f != 2.000000 ) ++ f ; i &= ui ; i |= 66 ; i ^= ui ; i %= 17 ; i >>= 2 ; i <<= ui ; i = ~ i ; b = ! b ; gl_FragColor = b ? vec4 ( i ) + vec4 ( f ) + v : vec4 ( i ) + vec4 ( f ) + v ; }



Info log for linking:
error: unresolved reference to function `abs'

(
(declare (uniform ) int ui)
(declare (uniform ) float uf)
(declare (uniform ) bvec4 ub42)
(declare (uniform ) bvec4 ub41)
(declare (uniform ) bool ub)
(declare (uniform ) vec4 uv4)
(declare (uniform ) ivec4 uiv4)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () bool b)
      (declare () float f)
      (declare () vec4 v)
      (declare (temporary ) vec4 radians_retval)
      (assign (constant bool (1)) (xyzw) (var_ref radians_retval)  (call radians ((var_ref uv4) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref radians_retval) ) 
      (declare (temporary ) vec4 degrees_retval)
      (assign (constant bool (1)) (xyzw) (var_ref degrees_retval)  (call degrees ((var_ref radians_retval) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref degrees_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sin_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sin_retval)  (call sin ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sin_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 cos_retval)
      (assign (constant bool (1)) (xyzw) (var_ref cos_retval)  (call cos ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref cos_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 tan_retval)
      (assign (constant bool (1)) (xyzw) (var_ref tan_retval)  (call tan ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref tan_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 asin_retval)
      (assign (constant bool (1)) (xyzw) (var_ref asin_retval)  (call asin ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref asin_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 acos_retval)
      (assign (constant bool (1)) (xyzw) (var_ref acos_retval)  (call acos ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref acos_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 atan_retval)
      (assign (constant bool (1)) (xyzw) (var_ref atan_retval)  (call atan ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref atan_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sinh_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sinh_retval)  (call sinh ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sinh_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 cosh_retval)
      (assign (constant bool (1)) (xyzw) (var_ref cosh_retval)  (call cosh ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref cosh_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 tanh_retval)
      (assign (constant bool (1)) (xyzw) (var_ref tanh_retval)  (call tanh ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref tanh_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 pow_retval)
      (assign (constant bool (1)) (xyzw) (var_ref pow_retval)  (call pow ((var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref pow_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 exp_retval)
      (assign (constant bool (1)) (xyzw) (var_ref exp_retval)  (call exp ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref exp_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 log_retval)
      (assign (constant bool (1)) (xyzw) (var_ref log_retval)  (call log ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref log_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 exp2_retval)
      (assign (constant bool (1)) (xyzw) (var_ref exp2_retval)  (call exp2 ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref exp2_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 log2_retval)
      (assign (constant bool (1)) (xyzw) (var_ref log2_retval)  (call log2 ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref log2_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sqrt_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sqrt_retval)  (call sqrt ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sqrt_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 inversesqrt_retval)
      (assign (constant bool (1)) (xyzw) (var_ref inversesqrt_retval)  (call inversesqrt ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref inversesqrt_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 abs_retval)
      (assign (constant bool (1)) (xyzw) (var_ref abs_retval)  (call abs ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref abs_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 sign_retval)
      (assign (constant bool (1)) (xyzw) (var_ref sign_retval)  (call sign ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref sign_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 floor_retval)
      (assign (constant bool (1)) (xyzw) (var_ref floor_retval)  (call floor ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref floor_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 ceil_retval)
      (assign (constant bool (1)) (xyzw) (var_ref ceil_retval)  (call ceil ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref ceil_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 fract_retval)
      (assign (constant bool (1)) (xyzw) (var_ref fract_retval)  (call fract ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref fract_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mod_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mod_retval)  (call mod ((var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mod_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 min_retval)
      (assign (constant bool (1)) (xyzw) (var_ref min_retval)  (call min ((var_ref assignment_tmp) (var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref min_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 max_retval)
      (assign (constant bool (1)) (xyzw) (var_ref max_retval)  (call max ((var_ref assignment_tmp) (var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref max_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 clamp_retval)
      (assign (constant bool (1)) (xyzw) (var_ref clamp_retval)  (call clamp ((var_ref assignment_tmp) (var_ref uv4) (var_ref uv4) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref clamp_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (expression float b2f (var_ref ub) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 step_retval)
      (assign (constant bool (1)) (xyzw) (var_ref step_retval)  (call step ((var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref step_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 smoothstep_retval)
      (assign (constant bool (1)) (xyzw) (var_ref smoothstep_retval)  (call smoothstep ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref smoothstep_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 normalize_retval)
      (assign (constant bool (1)) (xyzw) (var_ref normalize_retval)  (call normalize ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref normalize_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 faceforward_retval)
      (assign (constant bool (1)) (xyzw) (var_ref faceforward_retval)  (call faceforward ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref faceforward_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 reflect_retval)
      (assign (constant bool (1)) (xyzw) (var_ref reflect_retval)  (call reflect ((var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref reflect_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 refract_retval)
      (assign (constant bool (1)) (xyzw) (var_ref refract_retval)  (call refract ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref uf) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref refract_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 dFdx_retval)
      (assign (constant bool (1)) (xyzw) (var_ref dFdx_retval)  (call dFdx ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref dFdx_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 dFdy_retval)
      (assign (constant bool (1)) (xyzw) (var_ref dFdy_retval)  (call dFdy ((var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref dFdy_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 fwidth_retval)
      (assign (constant bool (1)) (xyzw) (var_ref fwidth_retval)  (call fwidth ((var_ref assignment_tmp) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (expression vec4 + (var_ref v) (var_ref fwidth_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (declare (temporary ) int abs_retval)
      (assign (constant bool (1)) (x) (var_ref abs_retval)  (call abs ((var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref abs_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int min_retval)
      (assign (constant bool (1)) (x) (var_ref min_retval)  (call min ((var_ref assignment_tmp) (var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref min_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int max_retval)
      (assign (constant bool (1)) (x) (var_ref max_retval)  (call max ((var_ref assignment_tmp) (var_ref ui) ))
) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref i) (var_ref max_retval) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) int clamp_retval)
      (assign (constant bool (1)) (x) (var_ref clamp_retval)  (call clamp ((var_ref assignment_tmp) (var_ref ui) (var_ref ui) ))
) 
      (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (var_ref clamp_retval) ) ) 
      (declare (temporary ) bvec4 lessThan_retval)
      (assign (constant bool (1)) (xyzw) (var_ref lessThan_retval)  (call lessThan ((var_ref v) (var_ref v) ))
) 
      (declare (temporary ) bool any_retval)
      (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref lessThan_retval) ))
) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref any_retval) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref any_retval) (
        (declare (temporary ) bvec4 lessThanEqual_retval)
        (assign (constant bool (1)) (xyzw) (var_ref lessThanEqual_retval)  (call lessThanEqual ((var_ref v) (var_ref v) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref lessThanEqual_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 greaterThan_retval)
        (assign (constant bool (1)) (xyzw) (var_ref greaterThan_retval)  (call greaterThan ((var_ref v) (var_ref v) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref greaterThan_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 greaterThanEqual_retval)
        (assign (constant bool (1)) (xyzw) (var_ref greaterThanEqual_retval)  (call greaterThanEqual ((var_ref v) (var_ref v) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref greaterThanEqual_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 equal_retval)
        (assign (constant bool (1)) (xyzw) (var_ref equal_retval)  (call equal ((var_ref ub41) (var_ref ub42) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref equal_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 notEqual_retval)
        (assign (constant bool (1)) (xyzw) (var_ref notEqual_retval)  (call notEqual ((var_ref ub41) (var_ref ub42) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref notEqual_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref ub41) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bool all_retval)
        (assign (constant bool (1)) (x) (var_ref all_retval)  (call all ((var_ref ub41) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref all_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (declare (temporary ) bvec4 not_retval)
        (assign (constant bool (1)) (xyzw) (var_ref not_retval)  (call not ((var_ref ub41) ))
) 
        (declare (temporary ) bool any_retval)
        (assign (constant bool (1)) (x) (var_ref any_retval)  (call any ((var_ref not_retval) ))
) 
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (var_ref any_retval) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref b)  (var_ref and_tmp) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int % (expression int / (expression int - (expression int * (expression int + (var_ref i) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref ui) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (expression bool ^^ (var_ref and_tmp) (expression bool any_nequal (var_ref assignment_tmp) (constant int (2)) ) ) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref assignment_tmp) (constant int (1)) ) ) 
      )
      ())

      (assign (constant bool (1)) (x) (var_ref f)  (expression float / (expression float - (expression float * (expression float + (var_ref uf) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) ) 
      (declare (temporary ) float length_retval)
      (assign (constant bool (1)) (x) (var_ref length_retval)  (call length ((var_ref v) ))
) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (var_ref length_retval) ) ) 
      (declare (temporary ) float distance_retval)
      (assign (constant bool (1)) (x) (var_ref distance_retval)  (call distance ((var_ref v) (var_ref v) ))
) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (var_ref distance_retval) ) ) 
      (declare (temporary ) float dot_retval)
      (assign (constant bool (1)) (x) (var_ref dot_retval)  (call dot ((var_ref v) (var_ref v) ))
) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (var_ref dot_retval) ) ) 
      (declare (temporary ) vec3 cross_retval)
      (assign (constant bool (1)) (xyz) (var_ref cross_retval)  (call cross ((swiz xyz (var_ref v) )(swiz xyz (var_ref v) )))
) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (swiz x (var_ref cross_retval) )) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref uf) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref uf) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any_nequal (var_ref assignment_tmp) (constant float (2.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (var_ref and_tmp) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref assignment_tmp) (constant float (1.000000)) ) ) 
      )
      ())

      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int ~ (expression int << (expression int >> (expression int % (expression int ^ (expression int | (expression int & (var_ref i) (var_ref ui) ) (constant int (66)) ) (var_ref ui) ) (constant int (17)) ) (constant int (2)) ) (var_ref ui) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression bool ! (var_ref b) ) ) 
      (assign (constant bool (1)) (x) (var_ref b)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 conditional_tmp)
      (if (var_ref assignment_tmp) (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (expression vec4 + (expression vec4 + (swiz xxxx (expression float i2f (var_ref assignment_tmp) ) )(swiz xxxx (var_ref f) )) (var_ref v) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (var_ref v) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref conditional_tmp) ) 
    ))

)


)