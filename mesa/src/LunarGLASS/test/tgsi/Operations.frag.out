
Top IR:
; ModuleID = 'Top'

@uv4 = external addrspace(1) constant <4 x float>
@ub = external addrspace(1) constant i1
@uf = external addrspace(1) constant float
@ui = external addrspace(1) constant i32
@ub41 = external addrspace(1) constant <4 x i1>
@ub42 = external addrspace(1) constant <4 x i1>
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %conditional_tmp = alloca <4 x float>
  %assignment_tmp181 = alloca i32
  %and_tmp171 = alloca i1
  %or_tmp168 = alloca i1
  %assignment_tmp165 = alloca float
  %b = alloca <3 x float>
  %a = alloca <3 x float>
  %p = alloca <4 x float>
  %and_tmp148 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp143 = alloca i32
  %and_tmp138 = alloca i1
  %and_tmp133 = alloca i1
  %and_tmp128 = alloca i1
  %and_tmp123 = alloca i1
  %and_tmp118 = alloca i1
  %and_tmp113 = alloca i1
  %and_tmp108 = alloca i1
  %and_tmp = alloca i1
  %assignment_tmp101 = alloca i32
  %assignment_tmp99 = alloca i32
  %assignment_tmp97 = alloca i32
  %assignment_tmp94 = alloca <4 x float>
  %assignment_tmp92 = alloca <4 x float>
  %assignment_tmp90 = alloca <4 x float>
  %k = alloca float
  %return_value84 = alloca <4 x float>
  %assignment_tmp81 = alloca <4 x float>
  %assignment_tmp79 = alloca <4 x float>
  %return_value = alloca <4 x float>
  %assignment_tmp74 = alloca <4 x float>
  %assignment_tmp72 = alloca <4 x float>
  %t70 = alloca <4 x float>
  %assignment_tmp68 = alloca <4 x float>
  %t = alloca <4 x float>
  %assignment_tmp62 = alloca <4 x float>
  %mix_retval60 = alloca <4 x float>
  %assignment_tmp57 = alloca <4 x float>
  %mix_retval = alloca <4 x float>
  %assignment_tmp53 = alloca <4 x float>
  %assignment_tmp51 = alloca <4 x float>
  %assignment_tmp49 = alloca <4 x float>
  %assignment_tmp47 = alloca <4 x float>
  %assignment_tmp45 = alloca <4 x float>
  %assignment_tmp43 = alloca <4 x float>
  %assignment_tmp41 = alloca <4 x float>
  %assignment_tmp39 = alloca <4 x float>
  %assignment_tmp37 = alloca <4 x float>
  %assignment_tmp35 = alloca <4 x float>
  %assignment_tmp33 = alloca <4 x float>
  %assignment_tmp31 = alloca <4 x float>
  %assignment_tmp29 = alloca <4 x float>
  %assignment_tmp27 = alloca <4 x float>
  %assignment_tmp25 = alloca <4 x float>
  %assignment_tmp23 = alloca <4 x float>
  %assignment_tmp21 = alloca <4 x float>
  %assignment_tmp19 = alloca <4 x float>
  %assignment_tmp17 = alloca <4 x float>
  %assignment_tmp15 = alloca <4 x float>
  %assignment_tmp13 = alloca <4 x float>
  %assignment_tmp11 = alloca <4 x float>
  %assignment_tmp9 = alloca <4 x float>
  %assignment_tmp7 = alloca <4 x float>
  %assignment_tmp5 = alloca <4 x float>
  %assignment_tmp3 = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %_ret_val = alloca <4 x float>
  %v = alloca <4 x float>
  %f = alloca float
  %i = alloca i32
  %0 = load <4 x float> addrspace(1)* @uv4
  %1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 0x3F91DF3300000000, i32 0)
  %_ret_val1 = fmul <4 x float> %0, %1
  store <4 x float> %_ret_val1, <4 x float>* %_ret_val
  %2 = load <4 x float>* %_ret_val
  %3 = load <4 x float>* %_ret_val
  %4 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 0x404CA5DC20000000, i32 0)
  %5 = fmul <4 x float> %3, %4
  %assignment_tmp2 = fadd <4 x float> %2, %5
  store <4 x float> %assignment_tmp2, <4 x float>* %assignment_tmp
  %6 = load <4 x float>* %assignment_tmp
  %7 = load <4 x float>* %assignment_tmp
  %8 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %7)
  %assignment_tmp34 = fadd <4 x float> %6, %8
  store <4 x float> %assignment_tmp34, <4 x float>* %assignment_tmp3
  %9 = load <4 x float>* %assignment_tmp3
  %10 = load <4 x float>* %assignment_tmp3
  %11 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %10)
  %assignment_tmp56 = fadd <4 x float> %9, %11
  store <4 x float> %assignment_tmp56, <4 x float>* %assignment_tmp5
  %12 = load <4 x float>* %assignment_tmp5
  %13 = load <4 x float>* %assignment_tmp5
  %14 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %13)
  %assignment_tmp78 = fadd <4 x float> %12, %14
  store <4 x float> %assignment_tmp78, <4 x float>* %assignment_tmp7
  %15 = load <4 x float>* %assignment_tmp7
  %16 = load <4 x float>* %assignment_tmp7
  %17 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %16)
  %assignment_tmp910 = fadd <4 x float> %15, %17
  store <4 x float> %assignment_tmp910, <4 x float>* %assignment_tmp9
  %18 = load <4 x float>* %assignment_tmp9
  %19 = load <4 x float>* %assignment_tmp9
  %20 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %19)
  %assignment_tmp1112 = fadd <4 x float> %18, %20
  store <4 x float> %assignment_tmp1112, <4 x float>* %assignment_tmp11
  %21 = load <4 x float>* %assignment_tmp11
  %22 = load <4 x float>* %assignment_tmp11
  %23 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %22)
  %assignment_tmp1314 = fadd <4 x float> %21, %23
  store <4 x float> %assignment_tmp1314, <4 x float>* %assignment_tmp13
  %24 = load <4 x float>* %assignment_tmp13
  %25 = load <4 x float>* %assignment_tmp13
  %26 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %25)
  %assignment_tmp1516 = fadd <4 x float> %24, %26
  store <4 x float> %assignment_tmp1516, <4 x float>* %assignment_tmp15
  %27 = load <4 x float>* %assignment_tmp15
  %28 = load <4 x float>* %assignment_tmp15
  %29 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %28)
  %assignment_tmp1718 = fadd <4 x float> %27, %29
  store <4 x float> %assignment_tmp1718, <4 x float>* %assignment_tmp17
  %30 = load <4 x float>* %assignment_tmp17
  %31 = load <4 x float>* %assignment_tmp17
  %32 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %31)
  %assignment_tmp1920 = fadd <4 x float> %30, %32
  store <4 x float> %assignment_tmp1920, <4 x float>* %assignment_tmp19
  %33 = load <4 x float>* %assignment_tmp19
  %34 = load <4 x float>* %assignment_tmp19
  %35 = load <4 x float>* %assignment_tmp19
  %36 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %34, <4 x float> %35)
  %assignment_tmp2122 = fadd <4 x float> %33, %36
  store <4 x float> %assignment_tmp2122, <4 x float>* %assignment_tmp21
  %37 = load <4 x float>* %assignment_tmp21
  %38 = load <4 x float>* %assignment_tmp21
  %39 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %38)
  %assignment_tmp2324 = fadd <4 x float> %37, %39
  store <4 x float> %assignment_tmp2324, <4 x float>* %assignment_tmp23
  %40 = load <4 x float>* %assignment_tmp23
  %41 = load <4 x float>* %assignment_tmp23
  %42 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %41)
  %assignment_tmp2526 = fadd <4 x float> %40, %42
  store <4 x float> %assignment_tmp2526, <4 x float>* %assignment_tmp25
  %43 = load <4 x float>* %assignment_tmp25
  %44 = load <4 x float>* %assignment_tmp25
  %45 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %44)
  %assignment_tmp2728 = fadd <4 x float> %43, %45
  store <4 x float> %assignment_tmp2728, <4 x float>* %assignment_tmp27
  %46 = load <4 x float>* %assignment_tmp27
  %47 = load <4 x float>* %assignment_tmp27
  %48 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %47)
  %assignment_tmp2930 = fadd <4 x float> %46, %48
  store <4 x float> %assignment_tmp2930, <4 x float>* %assignment_tmp29
  %49 = load <4 x float>* %assignment_tmp29
  %50 = load <4 x float>* %assignment_tmp29
  %51 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %50)
  %assignment_tmp3132 = fadd <4 x float> %49, %51
  store <4 x float> %assignment_tmp3132, <4 x float>* %assignment_tmp31
  %52 = load <4 x float>* %assignment_tmp31
  %53 = load <4 x float>* %assignment_tmp31
  %54 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %53)
  %assignment_tmp3334 = fadd <4 x float> %52, %54
  store <4 x float> %assignment_tmp3334, <4 x float>* %assignment_tmp33
  %55 = load <4 x float>* %assignment_tmp33
  %56 = load <4 x float>* %assignment_tmp33
  %57 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %56)
  %assignment_tmp3536 = fadd <4 x float> %55, %57
  store <4 x float> %assignment_tmp3536, <4 x float>* %assignment_tmp35
  %58 = load <4 x float>* %assignment_tmp35
  %59 = load <4 x float>* %assignment_tmp35
  %60 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %59)
  %assignment_tmp3738 = fadd <4 x float> %58, %60
  store <4 x float> %assignment_tmp3738, <4 x float>* %assignment_tmp37
  %61 = load <4 x float>* %assignment_tmp37
  %62 = load <4 x float>* %assignment_tmp37
  %63 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %62)
  %assignment_tmp3940 = fadd <4 x float> %61, %63
  store <4 x float> %assignment_tmp3940, <4 x float>* %assignment_tmp39
  %64 = load <4 x float>* %assignment_tmp39
  %65 = load <4 x float>* %assignment_tmp39
  %66 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %65)
  %assignment_tmp4142 = fadd <4 x float> %64, %66
  store <4 x float> %assignment_tmp4142, <4 x float>* %assignment_tmp41
  %67 = load <4 x float>* %assignment_tmp41
  %68 = load <4 x float>* %assignment_tmp41
  %69 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %68)
  %assignment_tmp4344 = fadd <4 x float> %67, %69
  store <4 x float> %assignment_tmp4344, <4 x float>* %assignment_tmp43
  %70 = load <4 x float>* %assignment_tmp43
  %71 = load <4 x float>* %assignment_tmp43
  %72 = load <4 x float>* %assignment_tmp43
  %73 = frem <4 x float> %71, %72
  %assignment_tmp4546 = fadd <4 x float> %70, %73
  store <4 x float> %assignment_tmp4546, <4 x float>* %assignment_tmp45
  %74 = load <4 x float>* %assignment_tmp45
  %75 = load <4 x float>* %assignment_tmp45
  %76 = load <4 x float>* %assignment_tmp45
  %77 = extractelement <4 x float> %76, i32 0
  %78 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %77, i32 0)
  %79 = frem <4 x float> %75, %78
  %assignment_tmp4748 = fadd <4 x float> %74, %79
  store <4 x float> %assignment_tmp4748, <4 x float>* %assignment_tmp47
  %80 = load <4 x float>* %assignment_tmp47
  %81 = load <4 x float>* %assignment_tmp47
  %82 = load <4 x float> addrspace(1)* @uv4
  %83 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %81, <4 x float> %82)
  %assignment_tmp4950 = fadd <4 x float> %80, %83
  store <4 x float> %assignment_tmp4950, <4 x float>* %assignment_tmp49
  %84 = load <4 x float>* %assignment_tmp49
  %85 = load <4 x float>* %assignment_tmp49
  %86 = load <4 x float> addrspace(1)* @uv4
  %87 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %85, <4 x float> %86)
  %assignment_tmp5152 = fadd <4 x float> %84, %87
  store <4 x float> %assignment_tmp5152, <4 x float>* %assignment_tmp51
  %88 = load <4 x float>* %assignment_tmp51
  %89 = load <4 x float>* %assignment_tmp51
  %90 = load <4 x float> addrspace(1)* @uv4
  %91 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %89, <4 x float> %90)
  %92 = load <4 x float> addrspace(1)* @uv4
  %93 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %91, <4 x float> %92)
  %assignment_tmp5354 = fadd <4 x float> %88, %93
  store <4 x float> %assignment_tmp5354, <4 x float>* %assignment_tmp53
  %v55 = load <4 x float>* %assignment_tmp53
  store <4 x float> %v55, <4 x float>* %v
  %94 = load <4 x float>* %assignment_tmp53
  %95 = load <4 x float>* %assignment_tmp53
  %96 = load <4 x float>* %assignment_tmp53
  %mix_retval56 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %94, <4 x float> %95, <4 x float> %96)
  store <4 x float> %mix_retval56, <4 x float>* %mix_retval
  %97 = load <4 x float>* %v
  %98 = load <4 x float>* %mix_retval
  %assignment_tmp5758 = fadd <4 x float> %97, %98
  store <4 x float> %assignment_tmp5758, <4 x float>* %assignment_tmp57
  %v59 = load <4 x float>* %assignment_tmp57
  store <4 x float> %v59, <4 x float>* %v
  %99 = load <4 x float>* %assignment_tmp57
  %100 = load <4 x float>* %assignment_tmp57
  %101 = load i1 addrspace(1)* @ub
  %102 = uitofp i1 %101 to float
  %mix_retval6061 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %99, <4 x float> %100, float %102)
  store <4 x float> %mix_retval6061, <4 x float>* %mix_retval60
  %103 = load <4 x float>* %v
  %104 = load <4 x float>* %mix_retval60
  %assignment_tmp6263 = fadd <4 x float> %103, %104
  store <4 x float> %assignment_tmp6263, <4 x float>* %assignment_tmp62
  %105 = load <4 x float>* %assignment_tmp62
  %106 = extractelement <4 x float> %105, i32 0
  %107 = load <4 x float>* %assignment_tmp62
  %108 = extractelement <4 x float> %107, i32 0
  %109 = fcmp oge float %106, %108
  %110 = uitofp i1 %109 to float
  %111 = load <4 x float>* %t
  %t64 = insertelement <4 x float> %111, float %110, i32 0
  store <4 x float> %t64, <4 x float>* %t
  %112 = load <4 x float>* %assignment_tmp62
  %113 = extractelement <4 x float> %112, i32 1
  %114 = load <4 x float>* %assignment_tmp62
  %115 = extractelement <4 x float> %114, i32 1
  %116 = fcmp oge float %113, %115
  %117 = uitofp i1 %116 to float
  %118 = load <4 x float>* %t
  %t65 = insertelement <4 x float> %118, float %117, i32 1
  store <4 x float> %t65, <4 x float>* %t
  %119 = load <4 x float>* %assignment_tmp62
  %120 = extractelement <4 x float> %119, i32 2
  %121 = load <4 x float>* %assignment_tmp62
  %122 = extractelement <4 x float> %121, i32 2
  %123 = fcmp oge float %120, %122
  %124 = uitofp i1 %123 to float
  %125 = load <4 x float>* %t
  %t66 = insertelement <4 x float> %125, float %124, i32 2
  store <4 x float> %t66, <4 x float>* %t
  %126 = load <4 x float>* %assignment_tmp62
  %127 = extractelement <4 x float> %126, i32 3
  %128 = load <4 x float>* %assignment_tmp62
  %129 = extractelement <4 x float> %128, i32 3
  %130 = fcmp oge float %127, %129
  %131 = uitofp i1 %130 to float
  %132 = load <4 x float>* %t
  %t67 = insertelement <4 x float> %132, float %131, i32 3
  store <4 x float> %t67, <4 x float>* %t
  %133 = load <4 x float>* %assignment_tmp62
  %134 = load <4 x float>* %t
  %assignment_tmp6869 = fadd <4 x float> %133, %134
  store <4 x float> %assignment_tmp6869, <4 x float>* %assignment_tmp68
  %135 = load <4 x float>* %assignment_tmp68
  %136 = load <4 x float>* %assignment_tmp68
  %137 = fsub <4 x float> %135, %136
  %138 = load <4 x float>* %assignment_tmp68
  %139 = load <4 x float>* %assignment_tmp68
  %140 = fsub <4 x float> %138, %139
  %141 = fdiv <4 x float> %137, %140
  %142 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float> %141, float 1.000000e+00)
  %t7071 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float> %142, float 0.000000e+00)
  store <4 x float> %t7071, <4 x float>* %t70
  %143 = load <4 x float>* %assignment_tmp68
  %144 = load <4 x float>* %t70
  %145 = load <4 x float>* %t70
  %146 = load <4 x float>* %t70
  %147 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 2.000000e+00, i32 0)
  %148 = fmul <4 x float> %147, %146
  %149 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 3.000000e+00, i32 0)
  %150 = fsub <4 x float> %149, %148
  %151 = fmul <4 x float> %145, %150
  %152 = fmul <4 x float> %144, %151
  %assignment_tmp7273 = fadd <4 x float> %143, %152
  store <4 x float> %assignment_tmp7273, <4 x float>* %assignment_tmp72
  %153 = load <4 x float>* %assignment_tmp72
  %154 = load <4 x float>* %assignment_tmp72
  %155 = load <4 x float>* %assignment_tmp72
  %156 = load <4 x float>* %assignment_tmp72
  %157 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %155, <4 x float> %156)
  %158 = call float @llvm.gla.fInverseSqrt.f32.f32(float %157)
  %159 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %158, i32 0)
  %160 = fmul <4 x float> %154, %159
  %assignment_tmp7475 = fadd <4 x float> %153, %160
  store <4 x float> %assignment_tmp7475, <4 x float>* %assignment_tmp74
  %v76 = load <4 x float>* %assignment_tmp74
  store <4 x float> %v76, <4 x float>* %v
  %161 = load <4 x float>* %assignment_tmp74
  %162 = load <4 x float>* %assignment_tmp74
  %163 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %161, <4 x float> %162)
  %164 = fcmp olt float %163, 0.000000e+00
  br i1 %164, label %then, label %else

then:                                             ; preds = %entry
  %return_value77 = load <4 x float>* %assignment_tmp74
  store <4 x float> %return_value77, <4 x float>* %return_value
  br label %ifmerge

else:                                             ; preds = %entry
  %165 = load <4 x float>* %assignment_tmp74
  %return_value78 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %165
  store <4 x float> %return_value78, <4 x float>* %return_value
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %166 = load <4 x float>* %assignment_tmp74
  %167 = load <4 x float>* %return_value
  %assignment_tmp7980 = fadd <4 x float> %166, %167
  store <4 x float> %assignment_tmp7980, <4 x float>* %assignment_tmp79
  %168 = load <4 x float>* %assignment_tmp79
  %169 = load <4 x float>* %assignment_tmp79
  %170 = load <4 x float>* %assignment_tmp79
  %171 = load <4 x float>* %assignment_tmp79
  %172 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %170, <4 x float> %171)
  %173 = load <4 x float>* %assignment_tmp79
  %174 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %172, i32 0)
  %175 = fmul <4 x float> %174, %173
  %176 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 2.000000e+00, i32 0)
  %177 = fmul <4 x float> %176, %175
  %178 = fsub <4 x float> %169, %177
  %assignment_tmp8182 = fadd <4 x float> %168, %178
  store <4 x float> %assignment_tmp8182, <4 x float>* %assignment_tmp81
  %v83 = load <4 x float>* %assignment_tmp81
  store <4 x float> %v83, <4 x float>* %v
  %179 = load float addrspace(1)* @uf
  %180 = load float addrspace(1)* @uf
  %181 = load <4 x float>* %assignment_tmp81
  %182 = load <4 x float>* %assignment_tmp81
  %183 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %181, <4 x float> %182)
  %184 = load <4 x float>* %assignment_tmp81
  %185 = load <4 x float>* %assignment_tmp81
  %186 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %184, <4 x float> %185)
  %187 = fmul float %183, %186
  %188 = fsub float 1.000000e+00, %187
  %189 = fmul float %180, %188
  %190 = fmul float %179, %189
  %k85 = fsub float 1.000000e+00, %190
  store float %k85, float* %k
  %191 = load float* %k
  %192 = fcmp olt float %191, 0.000000e+00
  br i1 %192, label %then86, label %else87

then86:                                           ; preds = %ifmerge
  store <4 x float> zeroinitializer, <4 x float>* %return_value84
  br label %ifmerge89

else87:                                           ; preds = %ifmerge
  %193 = load float addrspace(1)* @uf
  %194 = load <4 x float>* %assignment_tmp81
  %195 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %193, i32 0)
  %196 = fmul <4 x float> %195, %194
  %197 = load float addrspace(1)* @uf
  %198 = load <4 x float>* %assignment_tmp81
  %199 = load <4 x float>* %assignment_tmp81
  %200 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %198, <4 x float> %199)
  %201 = fmul float %197, %200
  %202 = load float* %k
  %203 = call float @llvm.gla.fSqrt.f32.f32(float %202)
  %204 = fadd float %201, %203
  %205 = load <4 x float>* %assignment_tmp81
  %206 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %204, i32 0)
  %207 = fmul <4 x float> %206, %205
  %return_value8488 = fsub <4 x float> %196, %207
  store <4 x float> %return_value8488, <4 x float>* %return_value84
  br label %ifmerge89

ifmerge89:                                        ; preds = %else87, %then86
  %208 = load <4 x float>* %assignment_tmp81
  %209 = load <4 x float>* %return_value84
  %assignment_tmp9091 = fadd <4 x float> %208, %209
  store <4 x float> %assignment_tmp9091, <4 x float>* %assignment_tmp90
  %210 = load <4 x float>* %assignment_tmp90
  %211 = load <4 x float>* %assignment_tmp90
  %212 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %211)
  %assignment_tmp9293 = fadd <4 x float> %210, %212
  store <4 x float> %assignment_tmp9293, <4 x float>* %assignment_tmp92
  %213 = load <4 x float>* %assignment_tmp92
  %214 = load <4 x float>* %assignment_tmp92
  %215 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %214)
  %assignment_tmp9495 = fadd <4 x float> %213, %215
  store <4 x float> %assignment_tmp9495, <4 x float>* %assignment_tmp94
  %216 = load <4 x float>* %assignment_tmp94
  %217 = load <4 x float>* %assignment_tmp94
  %218 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %217)
  %219 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %218)
  %220 = load <4 x float>* %assignment_tmp94
  %221 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %220)
  %222 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %221)
  %223 = fadd <4 x float> %219, %222
  %v96 = fadd <4 x float> %216, %223
  store <4 x float> %v96, <4 x float>* %v
  %224 = load i32 addrspace(1)* @ui
  %assignment_tmp9798 = call i32 @llvm.gla.abs.i32.i32(i32 %224)
  store i32 %assignment_tmp9798, i32* %assignment_tmp97
  %225 = load i32* %assignment_tmp97
  %226 = load i32* %assignment_tmp97
  %227 = load i32 addrspace(1)* @ui
  %228 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %226, i32 %227)
  %assignment_tmp99100 = add i32 %225, %228
  store i32 %assignment_tmp99100, i32* %assignment_tmp99
  %229 = load i32* %assignment_tmp99
  %230 = load i32* %assignment_tmp99
  %231 = load i32 addrspace(1)* @ui
  %232 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %230, i32 %231)
  %assignment_tmp101102 = add i32 %229, %232
  store i32 %assignment_tmp101102, i32* %assignment_tmp101
  %233 = load i32* %assignment_tmp101
  %234 = load i32* %assignment_tmp101
  %235 = load i32 addrspace(1)* @ui
  %236 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %234, i32 %235)
  %237 = load i32 addrspace(1)* @ui
  %238 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %236, i32 %237)
  %i103 = add i32 %233, %238
  store i32 %i103, i32* %i
  %239 = load <4 x float>* %v
  %240 = load <4 x float>* %v
  %241 = fcmp olt <4 x float> %239, %240
  %242 = call i1 @llvm.gla.any.v4i1(<4 x i1> %241)
  br i1 %242, label %then104, label %else106

then104:                                          ; preds = %ifmerge89
  %243 = load <4 x float>* %v
  %244 = load <4 x float>* %v
  %245 = fcmp ole <4 x float> %243, %244
  %and_tmp105 = call i1 @llvm.gla.any.v4i1(<4 x i1> %245)
  store i1 %and_tmp105, i1* %and_tmp
  br label %ifmerge107

else106:                                          ; preds = %ifmerge89
  store i1 false, i1* %and_tmp
  br label %ifmerge107

ifmerge107:                                       ; preds = %else106, %then104
  %246 = load i1* %and_tmp
  br i1 %246, label %then109, label %else111

then109:                                          ; preds = %ifmerge107
  %247 = load <4 x float>* %v
  %248 = load <4 x float>* %v
  %249 = fcmp ogt <4 x float> %247, %248
  %and_tmp108110 = call i1 @llvm.gla.any.v4i1(<4 x i1> %249)
  store i1 %and_tmp108110, i1* %and_tmp108
  br label %ifmerge112

else111:                                          ; preds = %ifmerge107
  store i1 false, i1* %and_tmp108
  br label %ifmerge112

ifmerge112:                                       ; preds = %else111, %then109
  %250 = load i1* %and_tmp108
  br i1 %250, label %then114, label %else116

then114:                                          ; preds = %ifmerge112
  %251 = load <4 x float>* %v
  %252 = load <4 x float>* %v
  %253 = fcmp oge <4 x float> %251, %252
  %and_tmp113115 = call i1 @llvm.gla.any.v4i1(<4 x i1> %253)
  store i1 %and_tmp113115, i1* %and_tmp113
  br label %ifmerge117

else116:                                          ; preds = %ifmerge112
  store i1 false, i1* %and_tmp113
  br label %ifmerge117

ifmerge117:                                       ; preds = %else116, %then114
  %254 = load i1* %and_tmp113
  br i1 %254, label %then119, label %else121

then119:                                          ; preds = %ifmerge117
  %255 = load <4 x i1> addrspace(1)* @ub41
  %256 = load <4 x i1> addrspace(1)* @ub42
  %257 = icmp eq <4 x i1> %255, %256
  %and_tmp118120 = call i1 @llvm.gla.any.v4i1(<4 x i1> %257)
  store i1 %and_tmp118120, i1* %and_tmp118
  br label %ifmerge122

else121:                                          ; preds = %ifmerge117
  store i1 false, i1* %and_tmp118
  br label %ifmerge122

ifmerge122:                                       ; preds = %else121, %then119
  %258 = load i1* %and_tmp118
  br i1 %258, label %then124, label %else126

then124:                                          ; preds = %ifmerge122
  %259 = load <4 x i1> addrspace(1)* @ub41
  %260 = load <4 x i1> addrspace(1)* @ub42
  %261 = icmp ne <4 x i1> %259, %260
  %and_tmp123125 = call i1 @llvm.gla.any.v4i1(<4 x i1> %261)
  store i1 %and_tmp123125, i1* %and_tmp123
  br label %ifmerge127

else126:                                          ; preds = %ifmerge122
  store i1 false, i1* %and_tmp123
  br label %ifmerge127

ifmerge127:                                       ; preds = %else126, %then124
  %262 = load i1* %and_tmp123
  br i1 %262, label %then129, label %else131

then129:                                          ; preds = %ifmerge127
  %263 = load <4 x i1> addrspace(1)* @ub41
  %and_tmp128130 = call i1 @llvm.gla.any.v4i1(<4 x i1> %263)
  store i1 %and_tmp128130, i1* %and_tmp128
  br label %ifmerge132

else131:                                          ; preds = %ifmerge127
  store i1 false, i1* %and_tmp128
  br label %ifmerge132

ifmerge132:                                       ; preds = %else131, %then129
  %264 = load i1* %and_tmp128
  br i1 %264, label %then134, label %else136

then134:                                          ; preds = %ifmerge132
  %265 = load <4 x i1> addrspace(1)* @ub41
  %and_tmp133135 = call i1 @llvm.gla.all.v4i1(<4 x i1> %265)
  store i1 %and_tmp133135, i1* %and_tmp133
  br label %ifmerge137

else136:                                          ; preds = %ifmerge132
  store i1 false, i1* %and_tmp133
  br label %ifmerge137

ifmerge137:                                       ; preds = %else136, %then134
  %266 = load i1* %and_tmp133
  br i1 %266, label %then139, label %else141

then139:                                          ; preds = %ifmerge137
  %267 = load <4 x i1> addrspace(1)* @ub41
  %268 = xor <4 x i1> %267, <i1 true, i1 true, i1 true, i1 true>
  %and_tmp138140 = call i1 @llvm.gla.any.v4i1(<4 x i1> %268)
  store i1 %and_tmp138140, i1* %and_tmp138
  br label %ifmerge142

else141:                                          ; preds = %ifmerge137
  store i1 false, i1* %and_tmp138
  br label %ifmerge142

ifmerge142:                                       ; preds = %else141, %then139
  %269 = load i32* %i
  %270 = load i32 addrspace(1)* @ui
  %271 = add i32 %269, %270
  %272 = load i32* %i
  %273 = mul i32 %271, %272
  %274 = load i32 addrspace(1)* @ui
  %275 = sub i32 %273, %274
  %276 = load i32* %i
  %277 = sdiv i32 %275, %276
  %278 = load i32 addrspace(1)* @ui
  %assignment_tmp143144 = srem i32 %277, %278
  store i32 %assignment_tmp143144, i32* %assignment_tmp143
  %i145 = load i32* %assignment_tmp143
  store i32 %i145, i32* %i
  %279 = load i32* %assignment_tmp143
  %280 = load i32 addrspace(1)* @ui
  %281 = icmp eq i32 %279, %280
  br i1 %281, label %then146, label %else147

then146:                                          ; preds = %ifmerge142
  store i1 true, i1* %or_tmp
  br label %ifmerge154

else147:                                          ; preds = %ifmerge142
  %282 = load i32* %assignment_tmp143
  %283 = load i32 addrspace(1)* @ui
  %284 = icmp ne i32 %282, %283
  br i1 %284, label %then149, label %else151

then149:                                          ; preds = %else147
  %285 = load i32* %assignment_tmp143
  %286 = load i32 addrspace(1)* @ui
  %and_tmp148150 = icmp eq i32 %285, %286
  store i1 %and_tmp148150, i1* %and_tmp148
  br label %ifmerge152

else151:                                          ; preds = %else147
  store i1 false, i1* %and_tmp148
  br label %ifmerge152

ifmerge152:                                       ; preds = %else151, %then149
  %287 = load i1* %and_tmp148
  %288 = load i32* %assignment_tmp143
  %289 = icmp ne i32 %288, 2
  %or_tmp153 = xor i1 %287, %289
  store i1 %or_tmp153, i1* %or_tmp
  br label %ifmerge154

ifmerge154:                                       ; preds = %ifmerge152, %then146
  %290 = load i1* %or_tmp
  br i1 %290, label %then155, label %ifmerge157

then155:                                          ; preds = %ifmerge154
  %291 = load i32* %assignment_tmp143
  %i156 = add i32 %291, 1
  store i32 %i156, i32* %i
  br label %ifmerge157

ifmerge157:                                       ; preds = %then155, %ifmerge154
  %292 = load float addrspace(1)* @uf
  %293 = load float addrspace(1)* @uf
  %294 = fadd float %292, %293
  %295 = load float addrspace(1)* @uf
  %296 = fmul float %294, %295
  %297 = load float addrspace(1)* @uf
  %298 = fsub float %296, %297
  %299 = load float addrspace(1)* @uf
  %f158 = fdiv float %298, %299
  store float %f158, float* %f
  %300 = load float* %f
  %301 = load <4 x float>* %v
  %302 = load <4 x float>* %v
  %303 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %301, <4 x float> %302)
  %304 = call float @llvm.gla.fSqrt.f32.f32(float %303)
  %f159 = fadd float %300, %304
  store float %f159, float* %f
  %305 = load <4 x float>* %v
  %306 = load <4 x float>* %v
  %p160 = fsub <4 x float> %305, %306
  store <4 x float> %p160, <4 x float>* %p
  %307 = load float* %f
  %308 = load <4 x float>* %p
  %309 = load <4 x float>* %p
  %310 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %308, <4 x float> %309)
  %311 = call float @llvm.gla.fSqrt.f32.f32(float %310)
  %f161 = fadd float %307, %311
  store float %f161, float* %f
  %312 = load float* %f
  %313 = load <4 x float>* %v
  %314 = load <4 x float>* %v
  %315 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %313, <4 x float> %314)
  %f162 = fadd float %312, %315
  store float %f162, float* %f
  %316 = load <4 x float>* %v
  %317 = extractelement <4 x float> %316, i32 0
  %318 = insertelement <3 x float> undef, float %317, i32 0
  %319 = extractelement <4 x float> %316, i32 1
  %320 = insertelement <3 x float> %318, float %319, i32 1
  %321 = extractelement <4 x float> %316, i32 2
  %a163 = insertelement <3 x float> %320, float %321, i32 2
  store <3 x float> %a163, <3 x float>* %a
  %322 = load <4 x float>* %v
  %323 = extractelement <4 x float> %322, i32 0
  %324 = insertelement <3 x float> undef, float %323, i32 0
  %325 = extractelement <4 x float> %322, i32 1
  %326 = insertelement <3 x float> %324, float %325, i32 1
  %327 = extractelement <4 x float> %322, i32 2
  %b164 = insertelement <3 x float> %326, float %327, i32 2
  store <3 x float> %b164, <3 x float>* %b
  %328 = load float* %f
  %329 = load <3 x float>* %a
  %330 = extractelement <3 x float> %329, i32 1
  %331 = insertelement <3 x float> undef, float %330, i32 0
  %332 = extractelement <3 x float> %329, i32 2
  %333 = insertelement <3 x float> %331, float %332, i32 1
  %334 = extractelement <3 x float> %329, i32 0
  %335 = insertelement <3 x float> %333, float %334, i32 2
  %336 = load <3 x float>* %b
  %337 = extractelement <3 x float> %336, i32 2
  %338 = insertelement <3 x float> undef, float %337, i32 0
  %339 = extractelement <3 x float> %336, i32 0
  %340 = insertelement <3 x float> %338, float %339, i32 1
  %341 = extractelement <3 x float> %336, i32 1
  %342 = insertelement <3 x float> %340, float %341, i32 2
  %343 = fmul <3 x float> %335, %342
  %344 = load <3 x float>* %a
  %345 = extractelement <3 x float> %344, i32 2
  %346 = insertelement <3 x float> undef, float %345, i32 0
  %347 = extractelement <3 x float> %344, i32 0
  %348 = insertelement <3 x float> %346, float %347, i32 1
  %349 = extractelement <3 x float> %344, i32 1
  %350 = insertelement <3 x float> %348, float %349, i32 2
  %351 = load <3 x float>* %b
  %352 = extractelement <3 x float> %351, i32 1
  %353 = insertelement <3 x float> undef, float %352, i32 0
  %354 = extractelement <3 x float> %351, i32 2
  %355 = insertelement <3 x float> %353, float %354, i32 1
  %356 = extractelement <3 x float> %351, i32 0
  %357 = insertelement <3 x float> %355, float %356, i32 2
  %358 = fmul <3 x float> %350, %357
  %359 = fsub <3 x float> %343, %358
  %360 = extractelement <3 x float> %359, i32 0
  %assignment_tmp165166 = fadd float %328, %360
  store float %assignment_tmp165166, float* %assignment_tmp165
  %f167 = load float* %assignment_tmp165
  store float %f167, float* %f
  %361 = load float* %assignment_tmp165
  %362 = load float addrspace(1)* @uf
  %363 = fcmp oeq float %361, %362
  br i1 %363, label %then169, label %else170

then169:                                          ; preds = %ifmerge157
  store i1 true, i1* %or_tmp168
  br label %ifmerge177

else170:                                          ; preds = %ifmerge157
  %364 = load float* %assignment_tmp165
  %365 = load float addrspace(1)* @uf
  %366 = fcmp one float %364, %365
  br i1 %366, label %then172, label %else174

then172:                                          ; preds = %else170
  %367 = load float* %assignment_tmp165
  %and_tmp171173 = fcmp one float %367, 2.000000e+00
  store i1 %and_tmp171173, i1* %and_tmp171
  br label %ifmerge175

else174:                                          ; preds = %else170
  store i1 false, i1* %and_tmp171
  br label %ifmerge175

ifmerge175:                                       ; preds = %else174, %then172
  %or_tmp168176 = load i1* %and_tmp171
  store i1 %or_tmp168176, i1* %or_tmp168
  br label %ifmerge177

ifmerge177:                                       ; preds = %ifmerge175, %then169
  %368 = load i1* %or_tmp168
  br i1 %368, label %then178, label %ifmerge180

then178:                                          ; preds = %ifmerge177
  %369 = load float* %assignment_tmp165
  %f179 = fadd float %369, 1.000000e+00
  store float %f179, float* %f
  br label %ifmerge180

ifmerge180:                                       ; preds = %then178, %ifmerge177
  %370 = load i32* %i
  %371 = load i32 addrspace(1)* @ui
  %372 = and i32 %370, %371
  %373 = or i32 %372, 66
  %374 = load i32 addrspace(1)* @ui
  %375 = xor i32 %373, %374
  %376 = srem i32 %375, 17
  %377 = lshr i32 %376, 2
  %378 = load i32 addrspace(1)* @ui
  %379 = shl i32 %377, %378
  %assignment_tmp181182 = xor i32 %379, -1
  store i32 %assignment_tmp181182, i32* %assignment_tmp181
  %i183 = load i32* %assignment_tmp181
  store i32 %i183, i32* %i
  %380 = load i1* %and_tmp138
  %381 = xor i1 %380, true
  br i1 %381, label %then184, label %else186

then184:                                          ; preds = %ifmerge180
  %382 = load i32* %assignment_tmp181
  %383 = sitofp i32 %382 to float
  %384 = insertelement <4 x float> undef, float %383, i32 0
  %385 = insertelement <4 x float> %384, float %383, i32 1
  %386 = insertelement <4 x float> %385, float %383, i32 2
  %387 = insertelement <4 x float> %386, float %383, i32 3
  %388 = load float* %f
  %389 = insertelement <4 x float> undef, float %388, i32 0
  %390 = insertelement <4 x float> %389, float %388, i32 1
  %391 = insertelement <4 x float> %390, float %388, i32 2
  %392 = insertelement <4 x float> %391, float %388, i32 3
  %393 = fadd <4 x float> %387, %392
  %394 = load <4 x float>* %v
  %conditional_tmp185 = fadd <4 x float> %393, %394
  store <4 x float> %conditional_tmp185, <4 x float>* %conditional_tmp
  br label %ifmerge188

else186:                                          ; preds = %ifmerge180
  %conditional_tmp187 = load <4 x float>* %v
  store <4 x float> %conditional_tmp187, <4 x float>* %conditional_tmp
  br label %ifmerge188

ifmerge188:                                       ; preds = %else186, %then184
  %gl_FragColor = load <4 x float>* %conditional_tmp
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %395 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %395)
  ret void
}

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare float @llvm.gla.fDot.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fInverseSqrt.f32.f32(float) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@uv4 = external addrspace(1) constant <4 x float>
@ub = external addrspace(1) constant i1
@uf = external addrspace(1) constant float
@ui = external addrspace(1) constant i32
@ub41 = external addrspace(1) constant <4 x i1>
@ub42 = external addrspace(1) constant <4 x i1>

define fastcc void @main() {
entry:
  %0 = load <4 x float> addrspace(1)* @uv4
  %1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 0x3F91DF3300000000, i32 0)
  %_ret_val1 = fmul <4 x float> %0, %1
  %2 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 0x404CA5DC20000000, i32 0)
  %3 = fmul <4 x float> %_ret_val1, %2
  %assignment_tmp2 = fadd <4 x float> %_ret_val1, %3
  %4 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %assignment_tmp2)
  %assignment_tmp34 = fadd <4 x float> %assignment_tmp2, %4
  %5 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %assignment_tmp34)
  %assignment_tmp56 = fadd <4 x float> %assignment_tmp34, %5
  %6 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %assignment_tmp56)
  %assignment_tmp78 = fadd <4 x float> %assignment_tmp56, %6
  %7 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %assignment_tmp78)
  %assignment_tmp910 = fadd <4 x float> %assignment_tmp78, %7
  %8 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %assignment_tmp910)
  %assignment_tmp1112 = fadd <4 x float> %assignment_tmp910, %8
  %9 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %assignment_tmp1112)
  %assignment_tmp1314 = fadd <4 x float> %assignment_tmp1112, %9
  %10 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %assignment_tmp1314)
  %assignment_tmp1516 = fadd <4 x float> %assignment_tmp1314, %10
  %11 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %assignment_tmp1516)
  %assignment_tmp1718 = fadd <4 x float> %assignment_tmp1516, %11
  %12 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %assignment_tmp1718)
  %assignment_tmp1920 = fadd <4 x float> %assignment_tmp1718, %12
  %13 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp1920, <4 x float> %assignment_tmp1920)
  %assignment_tmp2122 = fadd <4 x float> %assignment_tmp1920, %13
  %14 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %assignment_tmp2122)
  %assignment_tmp2324 = fadd <4 x float> %assignment_tmp2122, %14
  %15 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %assignment_tmp2324)
  %assignment_tmp2526 = fadd <4 x float> %assignment_tmp2324, %15
  %16 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %assignment_tmp2526)
  %assignment_tmp2728 = fadd <4 x float> %assignment_tmp2526, %16
  %17 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %assignment_tmp2728)
  %assignment_tmp2930 = fadd <4 x float> %assignment_tmp2728, %17
  %18 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %assignment_tmp2930)
  %assignment_tmp3132 = fadd <4 x float> %assignment_tmp2930, %18
  %19 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %assignment_tmp3132)
  %assignment_tmp3334 = fadd <4 x float> %assignment_tmp3132, %19
  %20 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %assignment_tmp3334)
  %assignment_tmp3536 = fadd <4 x float> %assignment_tmp3334, %20
  %21 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %assignment_tmp3536)
  %assignment_tmp3738 = fadd <4 x float> %assignment_tmp3536, %21
  %22 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %assignment_tmp3738)
  %assignment_tmp3940 = fadd <4 x float> %assignment_tmp3738, %22
  %23 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %assignment_tmp3940)
  %assignment_tmp4142 = fadd <4 x float> %assignment_tmp3940, %23
  %24 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %assignment_tmp4142)
  %assignment_tmp4344 = fadd <4 x float> %assignment_tmp4142, %24
  %25 = frem <4 x float> %assignment_tmp4344, %assignment_tmp4344
  %assignment_tmp4546 = fadd <4 x float> %assignment_tmp4344, %25
  %26 = extractelement <4 x float> %assignment_tmp4546, i32 0
  %27 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %26, i32 0)
  %28 = frem <4 x float> %assignment_tmp4546, %27
  %assignment_tmp4748 = fadd <4 x float> %assignment_tmp4546, %28
  %29 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp4748, <4 x float> %0)
  %assignment_tmp4950 = fadd <4 x float> %assignment_tmp4748, %29
  %30 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp4950, <4 x float> %0)
  %assignment_tmp5152 = fadd <4 x float> %assignment_tmp4950, %30
  %31 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp5152, <4 x float> %0)
  %32 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %31, <4 x float> %0)
  %assignment_tmp5354 = fadd <4 x float> %assignment_tmp5152, %32
  %mix_retval56 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp5354, <4 x float> %assignment_tmp5354, <4 x float> %assignment_tmp5354)
  %assignment_tmp5758 = fadd <4 x float> %assignment_tmp5354, %mix_retval56
  %33 = load i1 addrspace(1)* @ub
  %34 = uitofp i1 %33 to float
  %mix_retval6061 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %assignment_tmp5758, <4 x float> %assignment_tmp5758, float %34)
  %assignment_tmp6263 = fadd <4 x float> %assignment_tmp5758, %mix_retval6061
  %35 = extractelement <4 x float> %assignment_tmp6263, i32 0
  %ord = fcmp oeq float %35, %35
  %36 = uitofp i1 %ord to float
  %37 = extractelement <4 x float> %assignment_tmp6263, i32 1
  %ord190 = fcmp oeq float %37, %37
  %38 = uitofp i1 %ord190 to float
  %39 = extractelement <4 x float> %assignment_tmp6263, i32 2
  %ord191 = fcmp oeq float %39, %39
  %40 = uitofp i1 %ord191 to float
  %41 = extractelement <4 x float> %assignment_tmp6263, i32 3
  %ord192 = fcmp oeq float %41, %41
  %42 = uitofp i1 %ord192 to float
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %36, i32 -1, float %38, i32 -1, float %40, i32 -1, float %42, i32 -1)
  %assignment_tmp6869 = fadd <4 x float> %assignment_tmp6263, %43
  %44 = fsub <4 x float> %assignment_tmp6869, %assignment_tmp6869
  %45 = fdiv <4 x float> %44, %44
  %46 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float> %45, float 1.000000e+00)
  %t7071 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float> %46, float 0.000000e+00)
  %47 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 2.000000e+00, i32 0)
  %48 = fmul <4 x float> %47, %t7071
  %49 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 3.000000e+00, i32 0)
  %50 = fsub <4 x float> %49, %48
  %51 = fmul <4 x float> %t7071, %50
  %52 = fmul <4 x float> %t7071, %51
  %assignment_tmp7273 = fadd <4 x float> %assignment_tmp6869, %52
  %53 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %assignment_tmp7273, <4 x float> %assignment_tmp7273)
  %54 = call float @llvm.gla.fInverseSqrt.f32.f32(float %53)
  %55 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %54, i32 0)
  %56 = fmul <4 x float> %assignment_tmp7273, %55
  %assignment_tmp7475 = fadd <4 x float> %assignment_tmp7273, %56
  %57 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %assignment_tmp7475, <4 x float> %assignment_tmp7475)
  %58 = fcmp olt float %57, 0.000000e+00
  br i1 %58, label %then, label %else

then:                                             ; preds = %entry
  br label %ifmerge

else:                                             ; preds = %entry
  %return_value78 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %assignment_tmp7475
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %return_value.0 = phi <4 x float> [ %assignment_tmp7475, %then ], [ %return_value78, %else ]
  %assignment_tmp7980 = fadd <4 x float> %assignment_tmp7475, %return_value.0
  %59 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %assignment_tmp7980, <4 x float> %assignment_tmp7980)
  %60 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %59, i32 0)
  %61 = fmul <4 x float> %60, %assignment_tmp7980
  %62 = fmul <4 x float> %47, %61
  %63 = fsub <4 x float> %assignment_tmp7980, %62
  %assignment_tmp8182 = fadd <4 x float> %assignment_tmp7980, %63
  %64 = load float addrspace(1)* @uf
  %65 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %assignment_tmp8182, <4 x float> %assignment_tmp8182)
  %66 = fmul float %65, %65
  %67 = fsub float 1.000000e+00, %66
  %68 = fmul float %64, %67
  %69 = fmul float %64, %68
  %k85 = fsub float 1.000000e+00, %69
  %70 = fcmp olt float %k85, 0.000000e+00
  br i1 %70, label %then86, label %else87

then86:                                           ; preds = %ifmerge
  br label %ifmerge89

else87:                                           ; preds = %ifmerge
  %71 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %64, i32 0)
  %72 = fmul <4 x float> %71, %assignment_tmp8182
  %73 = fmul float %64, %65
  %74 = call float @llvm.gla.fSqrt.f32.f32(float %k85)
  %75 = fadd float %73, %74
  %76 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %75, i32 0)
  %77 = fmul <4 x float> %76, %assignment_tmp8182
  %return_value8488 = fsub <4 x float> %72, %77
  br label %ifmerge89

ifmerge89:                                        ; preds = %else87, %then86
  %return_value84.0 = phi <4 x float> [ zeroinitializer, %then86 ], [ %return_value8488, %else87 ]
  %assignment_tmp9091 = fadd <4 x float> %assignment_tmp8182, %return_value84.0
  %78 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %assignment_tmp9091)
  %assignment_tmp9293 = fadd <4 x float> %assignment_tmp9091, %78
  %79 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %assignment_tmp9293)
  %assignment_tmp9495 = fadd <4 x float> %assignment_tmp9293, %79
  %80 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %assignment_tmp9495)
  %81 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %80)
  %82 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %assignment_tmp9495)
  %83 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %82)
  %84 = fadd <4 x float> %81, %83
  %v96 = fadd <4 x float> %assignment_tmp9495, %84
  %85 = load i32 addrspace(1)* @ui
  %assignment_tmp9798 = call i32 @llvm.gla.abs.i32.i32(i32 %85)
  %86 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %assignment_tmp9798, i32 %85)
  %assignment_tmp99100 = add i32 %86, %assignment_tmp9798
  %87 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %assignment_tmp99100, i32 %85)
  %assignment_tmp101102 = add i32 %assignment_tmp99100, %87
  %88 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %assignment_tmp101102, i32 %85)
  %89 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %88, i32 %85)
  %i103 = add i32 %89, %assignment_tmp101102
  %90 = call i1 @llvm.gla.any.v4i1(<4 x i1> zeroinitializer)
  br i1 %90, label %then104, label %else106

then104:                                          ; preds = %ifmerge89
  %ord193 = fcmp oeq <4 x float> %v96, %v96
  %and_tmp105 = call i1 @llvm.gla.any.v4i1(<4 x i1> %ord193)
  br label %ifmerge107

else106:                                          ; preds = %ifmerge89
  br label %ifmerge107

ifmerge107:                                       ; preds = %else106, %then104
  %and_tmp.0 = phi i1 [ %and_tmp105, %then104 ], [ false, %else106 ]
  br label %ifmerge112

ifmerge112:                                       ; preds = %ifmerge107
  %select = and i1 %and_tmp.0, %90
  br i1 %select, label %then114, label %else116

then114:                                          ; preds = %ifmerge112
  %ord194 = fcmp oeq <4 x float> %v96, %v96
  %and_tmp113115 = call i1 @llvm.gla.any.v4i1(<4 x i1> %ord194)
  br label %ifmerge117

else116:                                          ; preds = %ifmerge112
  br label %ifmerge117

ifmerge117:                                       ; preds = %else116, %then114
  %and_tmp113.0 = phi i1 [ %and_tmp113115, %then114 ], [ false, %else116 ]
  br i1 %and_tmp113.0, label %then119, label %else121

then119:                                          ; preds = %ifmerge117
  %91 = load <4 x i1> addrspace(1)* @ub41
  %92 = load <4 x i1> addrspace(1)* @ub42
  %93 = icmp eq <4 x i1> %91, %92
  %and_tmp118120 = call i1 @llvm.gla.any.v4i1(<4 x i1> %93)
  br label %ifmerge122

else121:                                          ; preds = %ifmerge117
  br label %ifmerge122

ifmerge122:                                       ; preds = %else121, %then119
  %and_tmp118.0 = phi i1 [ %and_tmp118120, %then119 ], [ false, %else121 ]
  br i1 %and_tmp118.0, label %then124, label %else126

then124:                                          ; preds = %ifmerge122
  %94 = load <4 x i1> addrspace(1)* @ub41
  %95 = load <4 x i1> addrspace(1)* @ub42
  %96 = icmp ne <4 x i1> %94, %95
  %and_tmp123125 = call i1 @llvm.gla.any.v4i1(<4 x i1> %96)
  br label %ifmerge127

else126:                                          ; preds = %ifmerge122
  br label %ifmerge127

ifmerge127:                                       ; preds = %else126, %then124
  %and_tmp123.0 = phi i1 [ %and_tmp123125, %then124 ], [ false, %else126 ]
  br i1 %and_tmp123.0, label %then129, label %else131

then129:                                          ; preds = %ifmerge127
  %97 = load <4 x i1> addrspace(1)* @ub41
  %and_tmp128130 = call i1 @llvm.gla.any.v4i1(<4 x i1> %97)
  br label %ifmerge132

else131:                                          ; preds = %ifmerge127
  br label %ifmerge132

ifmerge132:                                       ; preds = %else131, %then129
  %and_tmp128.0 = phi i1 [ %and_tmp128130, %then129 ], [ false, %else131 ]
  br i1 %and_tmp128.0, label %then134, label %else136

then134:                                          ; preds = %ifmerge132
  %98 = load <4 x i1> addrspace(1)* @ub41
  %and_tmp133135 = call i1 @llvm.gla.all.v4i1(<4 x i1> %98)
  br label %ifmerge137

else136:                                          ; preds = %ifmerge132
  br label %ifmerge137

ifmerge137:                                       ; preds = %else136, %then134
  %and_tmp133.0 = phi i1 [ %and_tmp133135, %then134 ], [ false, %else136 ]
  br i1 %and_tmp133.0, label %then139, label %else141

then139:                                          ; preds = %ifmerge137
  %99 = load <4 x i1> addrspace(1)* @ub41
  %100 = xor <4 x i1> %99, <i1 true, i1 true, i1 true, i1 true>
  %and_tmp138140 = call i1 @llvm.gla.any.v4i1(<4 x i1> %100)
  %phitmp = xor i1 %and_tmp138140, true
  br label %ifmerge142

else141:                                          ; preds = %ifmerge137
  br label %ifmerge142

ifmerge142:                                       ; preds = %else141, %then139
  %and_tmp138.0 = phi i1 [ %phitmp, %then139 ], [ true, %else141 ]
  %101 = add i32 %85, %i103
  %102 = mul i32 %101, %i103
  %103 = sub i32 %102, %85
  %104 = sdiv i32 %103, %i103
  %assignment_tmp143144 = srem i32 %104, %85
  br label %else147

else147:                                          ; preds = %ifmerge142
  br label %ifmerge152

ifmerge152:                                       ; preds = %else147
  br label %ifmerge154

ifmerge154:                                       ; preds = %ifmerge152
  %105 = icmp eq i32 %assignment_tmp143144, 2
  br i1 %105, label %ifmerge157, label %then155

then155:                                          ; preds = %ifmerge154
  %i156 = add i32 %assignment_tmp143144, 1
  br label %ifmerge157

ifmerge157:                                       ; preds = %ifmerge154, %then155
  %i.0 = phi i32 [ %i156, %then155 ], [ %assignment_tmp143144, %ifmerge154 ]
  %106 = fadd float %64, %64
  %107 = fmul float %106, %64
  %108 = fsub float %107, %64
  %f158 = fdiv float %108, %64
  %109 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %v96, <4 x float> %v96)
  %110 = call float @llvm.gla.fSqrt.f32.f32(float %109)
  %f159 = fadd float %f158, %110
  %p160 = fsub <4 x float> %v96, %v96
  %111 = call float @llvm.gla.fDot.v4f32.v4f32(<4 x float> %p160, <4 x float> %p160)
  %112 = call float @llvm.gla.fSqrt.f32.f32(float %111)
  %f161 = fadd float %f159, %112
  %f162 = fadd float %f161, %109
  %113 = call <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.v4f32.v4f32.v4f32.f32(<3 x float> undef, i32 7, <4 x float> %v96, i32 1, <4 x float> %v96, i32 2, <4 x float> %v96, i32 0, float 0.000000e+00, i32 -1)
  %114 = call <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.v4f32.v4f32.v4f32.f32(<3 x float> undef, i32 7, <4 x float> %v96, i32 2, <4 x float> %v96, i32 0, <4 x float> %v96, i32 1, float 0.000000e+00, i32 -1)
  %115 = fmul <3 x float> %113, %114
  %116 = fmul <3 x float> %114, %113
  %117 = fsub <3 x float> %115, %116
  %118 = extractelement <3 x float> %117, i32 0
  %assignment_tmp165166 = fadd float %f162, %118
  %119 = fcmp oeq float %assignment_tmp165166, %64
  br i1 %119, label %then169, label %else170

then169:                                          ; preds = %ifmerge157
  br label %ifmerge177

else170:                                          ; preds = %ifmerge157
  %120 = fcmp ueq float %assignment_tmp165166, %64
  br i1 %120, label %else174, label %then172

then172:                                          ; preds = %else170
  %and_tmp171173 = fcmp one float %assignment_tmp165166, 2.000000e+00
  br label %ifmerge175

else174:                                          ; preds = %else170
  br label %ifmerge175

ifmerge175:                                       ; preds = %else174, %then172
  %and_tmp171.0 = phi i1 [ %and_tmp171173, %then172 ], [ false, %else174 ]
  br label %ifmerge177

ifmerge177:                                       ; preds = %ifmerge175, %then169
  %or_tmp168.0 = phi i1 [ true, %then169 ], [ %and_tmp171.0, %ifmerge175 ]
  br i1 %or_tmp168.0, label %then178, label %ifmerge180

then178:                                          ; preds = %ifmerge177
  %f179 = fadd float %assignment_tmp165166, 1.000000e+00
  br label %ifmerge180

ifmerge180:                                       ; preds = %then178, %ifmerge177
  %f.0 = phi float [ %f179, %then178 ], [ %assignment_tmp165166, %ifmerge177 ]
  br i1 %and_tmp138.0, label %then184, label %else186

then184:                                          ; preds = %ifmerge180
  %121 = and i32 %85, %i.0
  %122 = or i32 %121, 66
  %123 = xor i32 %122, %85
  %124 = srem i32 %123, 17
  %125 = lshr i32 %124, 2
  %126 = shl i32 %125, %85
  %assignment_tmp181182 = xor i32 %126, -1
  %127 = sitofp i32 %assignment_tmp181182 to float
  %128 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %127, i32 -1, float %127, i32 -1, float %127, i32 -1, float %127, i32 -1)
  %129 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %f.0, i32 -1, float %f.0, i32 -1, float %f.0, i32 -1, float %f.0, i32 -1)
  %130 = fadd <4 x float> %128, %129
  %conditional_tmp185 = fadd <4 x float> %130, %v96
  br label %ifmerge188

else186:                                          ; preds = %ifmerge180
  br label %ifmerge188

ifmerge188:                                       ; preds = %else186, %then184
  %conditional_tmp.0 = phi <4 x float> [ %conditional_tmp185, %then184 ], [ %v96, %else186 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %conditional_tmp.0)
  ret void
}

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare float @llvm.gla.fDot.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fInverseSqrt.f32.f32(float) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.v4f32.v4f32.v4f32.f32(<3 x float>, i32, <4 x float>, i32, <4 x float>, i32, <4 x float>, i32, float, i32) nounwind readnone

***Unsupported functionality: intrinsic in Bottom IR
compiling Operations.frag...
uniform ivec4 uiv4 ; 
uniform vec4 uv4 ; 
uniform bool ub ; 
uniform bvec4 ub41 , ub42 ; 
uniform float uf ; 
uniform int ui ; 
void  main (){
vec4 v ; float f ; bool b ; bvec4 bv4 ; int i ; v = radians ( uv4 ) ; v += degrees ( v ) ; v += sin ( v ) ; v += cos ( v ) ; v += tan ( v ) ; v += asin ( v ) ; v += acos ( v ) ; v += atan ( v ) ; v += sinh ( v ) ; v += cosh ( v ) ; v += tanh ( v ) ; v += pow ( v , v ) ; v += exp ( v ) ; v += log ( v ) ; v += exp2 ( v ) ; v += log2 ( v ) ; v += sqrt ( v ) ; v += inversesqrt ( v ) ; v += abs ( v ) ; v += sign ( v ) ; v += floor ( v ) ; v += ceil ( v ) ; v += fract ( v ) ; v += mod ( v , v ) ; v += mod ( v , v . x ) ; v += min ( v , uv4 ) ; v += max ( v , uv4 ) ; v += clamp ( v , uv4 , uv4 ) ; v += mix ( v , v , v ) ; v += mix ( v , v , ub ) ; v += step ( v , v ) ; v += smoothstep ( v , v , v ) ; v += normalize ( v ) ; v += faceforward ( v , v , v ) ; v += reflect ( v , v ) ; v += refract ( v , v , uf ) ; v += dFdx ( v ) ; v += dFdy ( v ) ; v += fwidth ( v ) ; i = 0 ; i += abs ( ui ) ; i += min ( i , ui ) ; i += max ( i , ui ) ; i += clamp ( i , ui , ui ) ; b = any ( lessThan ( v , v ) ) ; b = b && any ( lessThanEqual ( v , v ) ) ; b = b && any ( greaterThan ( v , v ) ) ; b = b && any ( greaterThanEqual ( v , v ) ) ; b = b && any ( equal ( ub41 , ub42 ) ) ; b = b && any ( notEqual ( ub41 , ub42 ) ) ; b = b && any ( ub41 ) ; b = b && all ( ub41 ) ; b = b && any ( not ( ub41 ) ) ; i = i + ui * i - ui / i ; i = i % ui ; if ( i == ui || i != ui && i == ui ^^ i != 2 ) ++ i ; f = uf + uf * uf - uf / uf ; f += length ( v ) ; f += distance ( v , v ) ; f += dot ( v , v ) ; f += cross ( v . xyz , v . xyz ) . x ; if ( f == uf || f != uf && f != 2.000000 ) ++ f ; i &= ui ; i |= 66 ; i ^= ui ; i %= 17 ; i >>= 2 ; i <<= ui ; i = ~ i ; b = ! b ; gl_FragColor = b ? vec4 ( i ) + vec4 ( f ) + v : vec4 ( i ) + vec4 ( f ) + v ; }



(
(declare (uniform ) int ui)
(declare (uniform ) float uf)
(declare (uniform ) bvec4 ub42)
(declare (uniform ) bvec4 ub41)
(declare (uniform ) bool ub)
(declare (uniform ) vec4 uv4)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () float f)
      (declare () vec4 v)
      (declare () vec4 _ret_val)
      (assign (constant bool (1)) (xyzw) (var_ref _ret_val)  (expression vec4 * (var_ref uv4) (constant float (0.017453)) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref _ret_val) (expression vec4 * (var_ref _ret_val) (constant float (57.295780)) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sin (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 cos (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 tan (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 asin (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 acos (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 atan (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sinh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 cosh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 tanh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 pow (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 exp (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 log (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 exp2 (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 log2 (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sqrt (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 rsq (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 abs (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sign (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 floor (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 ceil (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 fract (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 % (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 % (var_ref assignment_tmp) (swiz x (var_ref assignment_tmp) )) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 min (var_ref assignment_tmp) (var_ref uv4) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 max (var_ref assignment_tmp) (var_ref uv4) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 max (expression vec4 min (var_ref assignment_tmp) (var_ref uv4) ) (var_ref uv4) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (expression float b2f (var_ref ub) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (declare () vec4 t)
      (assign (constant bool (1)) (x) (var_ref t)  (expression float b2f (expression bool >= (swiz x (var_ref assignment_tmp) )(swiz x (var_ref assignment_tmp) )) ) ) 
      (assign (constant bool (1)) (y) (var_ref t)  (expression float b2f (expression bool >= (swiz y (var_ref assignment_tmp) )(swiz y (var_ref assignment_tmp) )) ) ) 
      (assign (constant bool (1)) (z) (var_ref t)  (expression float b2f (expression bool >= (swiz z (var_ref assignment_tmp) )(swiz z (var_ref assignment_tmp) )) ) ) 
      (assign (constant bool (1)) (w) (var_ref t)  (expression float b2f (expression bool >= (swiz w (var_ref assignment_tmp) )(swiz w (var_ref assignment_tmp) )) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (var_ref t) ) ) 
      (declare () vec4 t)
      (assign (constant bool (1)) (xyzw) (var_ref t)  (expression vec4 max (expression vec4 min (expression vec4 / (expression vec4 - (var_ref assignment_tmp) (var_ref assignment_tmp) ) (expression vec4 - (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) (constant float (1.000000)) ) (constant float (0.000000)) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 * (var_ref t) (expression vec4 * (var_ref t) (expression vec4 - (constant float (3.000000)) (expression vec4 * (constant float (2.000000)) (var_ref t) ) ) ) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 * (var_ref assignment_tmp) (expression float rsq (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 return_value)
      (if (expression bool < (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) (constant float (0.000000)) ) (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (var_ref assignment_tmp) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (expression vec4 neg (var_ref assignment_tmp) ) ) 
      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (var_ref return_value) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 - (var_ref assignment_tmp) (expression vec4 * (constant float (2.000000)) (expression vec4 * (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) (var_ref assignment_tmp) ) ) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 return_value)
      (declare () float k)
      (assign (constant bool (1)) (x) (var_ref k)  (expression float - (constant float (1.000000)) (expression float * (var_ref uf) (expression float * (var_ref uf) (expression float - (constant float (1.000000)) (expression float * (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) ) ) ) ) 
      (if (expression bool < (var_ref k) (constant float (0.000000)) ) (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (constant vec4 (0.000000 0.000000 0.000000 0.000000)) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (expression vec4 - (expression vec4 * (var_ref uf) (var_ref assignment_tmp) ) (expression vec4 * (expression float + (expression float * (var_ref uf) (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) (expression float sqrt (var_ref k) ) ) (var_ref assignment_tmp) ) ) ) 
      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (var_ref return_value) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 dFdx (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 dFdy (var_ref assignment_tmp) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 + (expression vec4 abs (expression vec4 dFdx (var_ref assignment_tmp) ) ) (expression vec4 abs (expression vec4 dFdy (var_ref assignment_tmp) ) ) ) ) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int abs (var_ref ui) ) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref assignment_tmp) (expression int min (var_ref assignment_tmp) (var_ref ui) ) ) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref assignment_tmp) (expression int max (var_ref assignment_tmp) (var_ref ui) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref assignment_tmp) (expression int max (expression int min (var_ref assignment_tmp) (var_ref ui) ) (var_ref ui) ) ) ) 
      (declare (temporary ) bool and_tmp)
      (if (expression bool any (expression bvec4 < (var_ref v) (var_ref v) ) ) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 <= (var_ref v) (var_ref v) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 > (var_ref v) (var_ref v) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 >= (var_ref v) (var_ref v) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 == (var_ref ub41) (var_ref ub42) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 != (var_ref ub41) (var_ref ub42) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (var_ref ub41) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all (var_ref ub41) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 ! (var_ref ub41) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int % (expression int / (expression int - (expression int * (expression int + (var_ref i) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref ui) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (expression bool ^^ (var_ref and_tmp) (expression bool any_nequal (var_ref assignment_tmp) (constant int (2)) ) ) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref assignment_tmp) (constant int (1)) ) ) 
      )
      ())

      (assign (constant bool (1)) (x) (var_ref f)  (expression float / (expression float - (expression float * (expression float + (var_ref uf) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (expression float sqrt (expression float dot (var_ref v) (var_ref v) ) ) ) ) 
      (declare () vec4 p)
      (assign (constant bool (1)) (xyzw) (var_ref p)  (expression vec4 - (var_ref v) (var_ref v) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (expression float sqrt (expression float dot (var_ref p) (var_ref p) ) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (expression float dot (var_ref v) (var_ref v) ) ) ) 
      (declare () vec3 a)
      (assign (constant bool (1)) (xyz) (var_ref a)  (swiz xyz (var_ref v) )) 
      (declare () vec3 b)
      (assign (constant bool (1)) (xyz) (var_ref b)  (swiz xyz (var_ref v) )) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (swiz x (expression vec3 - (expression vec3 * (swiz yzx (var_ref a) )(swiz zxy (var_ref b) )) (expression vec3 * (swiz zxy (var_ref a) )(swiz yzx (var_ref b) )) ) )) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref uf) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref uf) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any_nequal (var_ref assignment_tmp) (constant float (2.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (var_ref and_tmp) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref assignment_tmp) (constant float (1.000000)) ) ) 
      )
      ())

      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int ~ (expression int << (expression int >> (expression int % (expression int ^ (expression int | (expression int & (var_ref i) (var_ref ui) ) (constant int (66)) ) (var_ref ui) ) (constant int (17)) ) (constant int (2)) ) (var_ref ui) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 conditional_tmp)
      (if (expression bool ! (var_ref and_tmp) ) (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (expression vec4 + (expression vec4 + (swiz xxxx (expression float i2f (var_ref assignment_tmp) ) )(swiz xxxx (var_ref f) )) (var_ref v) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (var_ref v) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref conditional_tmp) ) 
    ))

)


)