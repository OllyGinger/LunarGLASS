#!/usr/bin/env bash
DESCRIPTION="\
Description: Run the test suite, record output
"

USAGE="\
Usage: ./run [options]

       Options:
         -h --help                 Print out this Usage info
         -l --linux                Run for linux
         -w --windows              (default) Run for windows
         -s --suppress-tgsi        Suppress the running of tgsi tests
         -t --testfile <testfile>  Run on a single test file
         -r --release              Run with release build
"

# Add more tests here as they are created
TESTS=(test.frag               \
       flowControl.frag        \
       Operations.frag         \
       swizzle.frag            \
       simpleFunctionCall.frag \
       functionCall.frag       \
       voidFunction.frag       \
       loops.frag              \
       earlyReturnDiscard.frag \
       syntaxError.frag        \
       depthOut.frag           \
       dataOut.frag            \
       varyingArray.frag       \
       uniformArray.frag       \
       variableArrayIndex.frag \
       matrix.frag             \
       newTexture.frag         \
       structure.frag          \
       structAssignment.frag   \
       structDeref.frag        \
	   localAggregates.frag    \
       texture.frag            \
       types.frag              \
      )

# $1 is the test
# Rest are options to the runcommand
function runSingleTest {
    $RUNCMD ${OPTIONS[@]} ${@:2:${#@}} $1 > $1.stdout 2> $1.errout
}

function runTests {
    for t in ${TESTS[@]}; do
        printf "Running $t"
        LENSTR=$((${#t} + 8))
        INDENTLVL=$((37 - $LENSTR))
        OBFUSCATE_INDENTLVL=$(($INDENTLVL + 5))
        GLSLLVL=41 # Magic number

        if [ -n "$DO_TGSI" ]
        then
            # Run for TGSI
            printf "%${INDENTLVL}s" "TGSI "
            runSingleTest $t $TGSI_OP && echo -n "[OK]" \
                || (echo "[FAIL] " ; tail -n 1 $t.errout ; printf "%${GLSLLVL}s" " ")
            cat $t.errout $t.stdout > tgsi/$t.out.tmp
            tr -d '\r' < tgsi/$t.out.tmp > tgsi/$t.out

        else
            printf "%${INDENTLVL}s" " "
            printf "    "
        fi

        # Run for GLSL
        echo -n "        GLSL "
        runSingleTest $t $GLSL_OP && echo "[OK]" \
            || (echo "[FAIL] " ; tail -n 1 $t.errout)
        cat $t.errout $t.stdout > glsl/$t.out.tmp
        tr -d '\r' < glsl/$t.out.tmp > glsl/$t.out

        printf "    Obfuscating:                "

        if [ -n "$DO_TGSI" ]
        then
            # Run obfuscated TGSI
            printf "TGSI "
            runSingleTest $t $TGSI_OP $OBFUSCATE_OP && echo -n "[OK]" \
                || (echo "[FAIL] " ; tail -n 1 $t.errout ; printf "%${GLSLLVL}s" " ")
            cat $t.errout $t.stdout > tgsi/$t.out.obfuscated
        else
            printf "         "
        fi


        # Run obfuscated GLSL
        echo -n "        GLSL "
        runSingleTest $t $GLSL_OP $OBFUSCATE_OP && echo "[OK]" \
            || (echo "[FAIL] " ; tail -n 1 $t.errout)
        cat $t.errout $t.stdout > glsl/$t.out.obfuscated

        printf "    Feeding back in:                     "
        printf "        GLSL "
        ($RUNCMD $GLSL_OP $t > $t.stdout.frag 2> $t.errout \
            && $RUNCMD $GLSL_OP $t.stdout.frag > $t.stdout 2> $t.errout && echo "[OK]") \
            || (echo "[FAIL] " ; tail -n 1 $t.errout)
        cat $t.stdout > glsl/$t.out.rerun

        printf "    De-obfuscating:                      "
        printf "        GLSL "
        ($RUNCMD $GLSL_OP $OBFUSCATE_OP $t > $t.stdout.obfuscated.frag 2> $t.errout \
            && $RUNCMD $GLSL_OP $t.stdout.obfuscated.frag > $t.stdout 2> $t.errout && echo "[OK]") \
            || (echo "[FAIL] " ; tail -n 1 $t.errout)
        cat $t.stdout > glsl/$t.out.de-obfuscated

        # # Diff them
        # printf "    Diffing rerun and de-obfuscate:      "
        # printf "        GLSL "
        # (diff --side-by-side --suppress-common-lines glsl/$t.out.rerun glsl/$t.out.de-obfuscated > $t.diff \
        #     && echo "[OK]") \
        #     || (echo "[FAIL]" ; cat $t.diff)

        # echo
        rm $t.stdout.obfuscated.frag
        rm $t.stdout.frag
        rm $t.stdout $t.errout
        # rm $t.diff
    done
}

function showHelp {
    echo "$DESCRIPTION"
    echo "$USAGE"
}

# Default is for windows
RUNCMD=../../glsl/Debug/StandAlone.exe
OPTIONS=(-d -n)
TGSI_OP="--tgsi"
GLSL_OP="--glsl"
OBFUSCATE_OP="-f"
DO_TGSI="true"

# Command-line argument Handling

# Arguments passed
while [ $# -gt 0 ]; do
    case "$1" in
        -l|--linux)
            RUNCMD=../../glsl/StandAlone
            ;;
        -h|--h)
            showHelp
            exit 0
            ;;
        -s|--suppress-tgsi)
            DO_TGSI=""
            ;;
        -t|--testfile)
            TESTS=("$2")
            if [ ! -e "$2" ]
            then
                echo "Error: testfile $2 not found"
                exit 1
            fi
            shift
            ;;
        -r|--release)
            RUNCMD=../../glsl/Release/StandAlone.exe
            ;;
        *)
            showHelp
            exit 1
            ;;
    esac
    shift
done

runTests


