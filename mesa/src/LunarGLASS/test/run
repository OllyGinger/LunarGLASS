#!/usr/bin/env bash
DESCRIPTION="\
Description: Run the test suite, record output
"

USAGE="\
Usage: ./run [options]

       Options:
         -h --help        Print out this Usage info
         -l --linux       Run for linux
         -w --windows     (default) Run for windows
"

# Add more tests here as they are created
TESTS=(test.frag flowControl.frag Operations.frag swizzle.frag functionCall.frag forLoop.frag whileLoop.frag doWhileLoop.frag syntaxError.frag
       depthOut.frag dataOut.frag matrix.frag newTexture.frag structure.frag texture.frag types.frag)

function runTests {
    for t in ${TESTS[@]}; do
        printf "Running $t"
        LENSTR=$((${#t} + 8))
        INDENTLVL=$((37 - $LENSTR))
        OBFUSCATE_INDENTLVL=$(($INDENTLVL + 5))
        GLSLLVL=41 # Magic number

        # Run for TGSI
        printf "%${INDENTLVL}s" "TGSI "
        $RUNCMD ${OPTIONS[@]} $TGSI_OP $t > $t.stdout 2> $t.errout && echo -n "[OK]" \
            || (echo "[FAIL] " ; tail -n 1 $t.errout ; printf "%${GLSLLVL}s" " ")
        cat $t.errout $t.stdout > tgsi/$t.out

        # Run for GLSL
        echo -n "        GLSL "
        $RUNCMD ${OPTIONS[@]} $GLSL_OP $t > $t.stdout 2> $t.errout  && echo "[OK]" \
            || (echo "[FAIL] " ; tail -n 1 $t.errout)
        cat $t.errout $t.stdout > glsl/$t.out

        printf "    Obfuscating:                "

        # Run obfuscated TGSI
        printf "TGSI "
        $RUNCMD ${OPTIONS[@]} $TGSI_OP $OBFUSCATE_OP $t > $t.stdout 2> $t.errout && echo -n "[OK]" \
            || (echo "[FAIL] " ; tail -n 1 $t.errout ; printf "%${GLSLLVL}s" " ")
        cat $t.errout $t.stdout > tgsi/$t.out.obfuscated

        # Run obfuscated GLSL
        echo -n "        GLSL "
        $RUNCMD ${OPTIONS[@]} $GLSL_OP $OBFUSCATE_OP $t > $t.stdout 2> $t.errout && echo "[OK]" \
            || (echo "[FAIL] " ; tail -n 1 $t.errout)
        cat $t.errout $t.stdout > glsl/$t.out.obfuscated

        printf "    Feeding back in:                     "
        printf "        GLSL "
        ($RUNCMD $GLSL_OP $t > $t.stdout.frag 2> $t.errout && $RUNCMD $GLSL_OP $t.stdout.frag > $t.stdout 2> $t.errout && echo "[OK]") \
            || (echo "[FAIL] " ; tail -n 1 $t.errout)
        cat $t.stdout > glsl/$t.out.rerun

        printf "    De-obfuscating:                      "
        printf "        GLSL "
        ($RUNCMD $GLSL_OP $OBFUSCATE_OP $t > $t.stdout.obfuscated.frag 2> $t.errout && $RUNCMD $GLSL_OP $t.stdout.obfuscated.frag > $t.stdout 2> $t.errout && echo "[OK]") \
            || (echo "[FAIL] " ; tail -n 1 $t.errout)
        cat $t.stdout > glsl/$t.out.de-obfuscated

        # Diff them
        printf "    Diffing rerun and de-obfuscate:      "
        printf "        GLSL "
        (diff --side-by-side --suppress-common-lines glsl/$t.out.rerun glsl/$t.out.de-obfuscated > $t.diff && echo "[OK]") \
            || (echo "[FAIL]" ; cat $t.diff)

        echo
        rm $t.stdout.obfuscated.frag
        rm $t.stdout.frag
        rm $t.stdout $t.errout
    done
}

function showHelp {
    echo "$DESCRIPTION"
    echo "$USAGE"
}

# Default is for windows
RUNCMD=../../glsl/Debug/StandAlone.exe
OPTIONS=(-d)
TGSI_OP="--tgsi"
GLSL_OP="--glsl"
OBFUSCATE_OP="-f"
# Command-line argument Handling

# No arguments passed
if [[ -z "$*" ]]; then runTests; fi;

# Arguments passed
for i in $*; do
    case $i in
        -l|--linux)
            RUNCMD=../../glsl/StandAlone
            runTests
            ;;
        -h|--h)
            showHelp
            exit 0
            ;;
        *)
            showHelp
            exit 1
            ;;
    esac
done

