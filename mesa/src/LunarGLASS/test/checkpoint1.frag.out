; ModuleID = 'Top'

@texSampler2D = external addrspace(1) constant i32
@scale = external addrspace(1) constant <2 x float>
@texSampler3D = external addrspace(1) constant i32
@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %assignment_tmp3 = alloca <4 x float>
  %mix_retval = alloca <4 x float>
  %w = alloca <4 x float>
  %assignment_tmp1 = alloca <4 x float>
  %texture3D_retval = alloca <4 x float>
  %v = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %texture2D_retval = alloca <4 x float>
  %0 = load i32 addrspace(1)* @texSampler2D
  %t = call <2 x float> @llvm.gla.getInterpolant.v2f32(i32 0)
  %1 = load <2 x float> addrspace(1)* @scale
  %fAddTmp = fadd <2 x float> %t, %1
  %2 = load <2 x float> addrspace(1)* @scale
  %fDivTmp = fdiv <2 x float> %fAddTmp, %2
  %texture2DTmp = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %fDivTmp)
  store <4 x float> %texture2DTmp, <4 x float>* %texture2D_retval
  %3 = load <4 x float>* %texture2D_retval
  %swizzleTmp = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float> %3, i32 27)
  store <4 x float> %swizzleTmp, <4 x float>* %assignment_tmp
  %4 = load <4 x float>* %assignment_tmp
  store <4 x float> %4, <4 x float>* %v
  %5 = load i32 addrspace(1)* @texSampler3D
  %coords = call <3 x float> @llvm.gla.getInterpolant.v3f32(i32 0)
  %texture3DTmp = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %5, i32 0, <3 x float> %coords)
  store <4 x float> %texture3DTmp, <4 x float>* %texture3D_retval
  %6 = load <4 x float>* %texture3D_retval
  %7 = load <4 x float>* %v
  %fAddTmp2 = fadd <4 x float> %6, %7
  store <4 x float> %fAddTmp2, <4 x float>* %assignment_tmp1
  %8 = load <4 x float>* %assignment_tmp1
  store <4 x float> %8, <4 x float>* %w
  %9 = load <4 x float>* %w
  %10 = load <4 x float> addrspace(1)* @u
  %11 = load float addrspace(1)* @blend
  %12 = load float addrspace(1)* @blend
  %fMulTmp = fmul float %11, %12
  %mixTmp = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %9, <4 x float> %10, float %fMulTmp)
  store <4 x float> %mixTmp, <4 x float>* %mix_retval
  %13 = load <4 x float>* %mix_retval
  store <4 x float> %13, <4 x float>* %assignment_tmp3
  %14 = load <4 x float>* %assignment_tmp3
  store <4 x float> %14, <4 x float>* @gl_FragColor
  %15 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %15)
  ret void
}

declare <2 x float> @llvm.gla.getInterpolant.v2f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float>, i32) nounwind readnone

declare <3 x float> @llvm.gla.getInterpolant.v3f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@texSampler2D = external addrspace(1) constant i32
@scale = external addrspace(1) constant <2 x float>
@texSampler3D = external addrspace(1) constant i32
@u = external addrspace(1) constant <4 x float>
@blend = external addrspace(1) constant float

define void @main() {
entry:
  %0 = load i32 addrspace(1)* @texSampler2D
  %t = call <2 x float> @llvm.gla.getInterpolant.v2f32(i32 0)
  %1 = load <2 x float> addrspace(1)* @scale
  %fAddTmp = fadd <2 x float> %t, %1
  %fDivTmp = fdiv <2 x float> %fAddTmp, %1
  %texture2DTmp = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %fDivTmp)
  %swizzleTmp = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float> %texture2DTmp, i32 27)
  %2 = load i32 addrspace(1)* @texSampler3D
  %coords = call <3 x float> @llvm.gla.getInterpolant.v3f32(i32 0)
  %texture3DTmp = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %2, i32 0, <3 x float> %coords)
  %fAddTmp2 = fadd <4 x float> %texture3DTmp, %swizzleTmp
  %3 = load <4 x float> addrspace(1)* @u
  %4 = load float addrspace(1)* @blend
  %fMulTmp = fmul float %4, %4
  %mixTmp = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %fAddTmp2, <4 x float> %3, float %fMulTmp)
  call void @llvm.gla.writeData.v4f32(i32 0, <4 x float> %mixTmp)
  ret void
}

declare <2 x float> @llvm.gla.getInterpolant.v2f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32(<4 x float>, i32) nounwind readnone

declare <3 x float> @llvm.gla.getInterpolant.v3f32(i32) nounwind readonly

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.writeData.v4f32(i32, <4 x float>) nounwind
# Fragment Program/Shader 0
  0: MUL TEMP[0].x, UNIFORM[2].xxxx, UNIFORM[2].xxxx;
  1: TEX TEMP[1], INPUT[-1].xyzz, texture[0], 3D;
  2: ADD TEMP[2].xy, INPUT[-1].xyyy, UNIFORM[1].xyyy;
  3: RCP TEMP[3].x, UNIFORM[1].xxxx;
  4: RCP TEMP[3].y, UNIFORM[1].yyyy;
  5: MUL TEMP[4].xy, TEMP[2].xyyy, TEMP[3].xyyy;
  6: TEX TEMP[2], TEMP[4].xyyy, texture[1], 2D;
  7: ADD TEMP[3], TEMP[1], TEMP[2].wzyx;
  8: ADD TEMP[1].x, CONST[5].xxxx, TEMP[0].-x-x-x-x;
  9: MUL TEMP[2], TEMP[3], TEMP[1].xxxx;
 10: MAD OUTPUT[1], UNIFORM[0], TEMP[0].xxxx, TEMP[2];
 11: END
compiling checkpoint1.frag...
uniform sampler2D texSampler2D ; 
uniform sampler3D texSampler3D ; 
uniform float blend ; 
uniform vec2 scale ; 
uniform vec4 u ; 
varying vec2 t ; 
varying vec3 coords ; 
void  main (){
vec4 v = texture2D ( texSampler2D , t + scale / scale ) . wzyx ; vec4 w = texture3D ( texSampler3D , coords ) + v ; gl_FragColor = mix ( w , u , blend * blend ) ; }



(
(declare (in ) vec3 coords)
(declare (in ) vec2 t)
(declare (uniform ) vec4 u)
(declare (uniform ) vec2 scale)
(declare (uniform ) float blend)
(declare (uniform ) sampler3D texSampler3D)
(declare (uniform ) sampler2D texSampler2D)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 w)
      (declare () vec4 v)
      (declare (temporary ) vec4 texture2D_retval)
      (assign (constant bool (1)) (xyzw) (var_ref texture2D_retval)  (call texture2D ((var_ref texSampler2D) (expression vec2 / (expression vec2 + (var_ref t) (var_ref scale) ) (var_ref scale) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (swiz wzyx (var_ref texture2D_retval) )) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 texture3D_retval)
      (assign (constant bool (1)) (xyzw) (var_ref texture3D_retval)  (call texture3D ((var_ref texSampler3D) (var_ref coords) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref texture3D_retval) (var_ref v) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref w)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref w) (var_ref u) (expression float * (var_ref blend) (var_ref blend) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (var_ref mix_retval) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
    ))

)


)
===========================================
Starting translation from glsl2 to Top IR
Finishing translation from glsl2 to Top IR

===========================================
Starting translation from Top IR to Bottom IR

First middle-end optimization pass
Finishing translation from Top IR to Bottom IR

Mesa program before mesa optimizations
  0: MOV TEMP[1].x, UNIFORM[1].xxxx;
  1: MOV TEMP[2].xy, INPUT[0].xyyy;
  2: MOV TEMP[3].xy, UNIFORM[2].xyyy;
  3: ADD TEMP[4].xy, TEMP[2].xyyy, TEMP[3].xyyy;
  4: RCP TEMP[5].x, TEMP[3].xxxx;
  5: RCP TEMP[5].y, TEMP[3].yyyy;
  6: MUL TEMP[6].xy, TEMP[4].xyyy, TEMP[5].xyyy;
  7: TEX TEMP[7], TEMP[6].xyyy, texture[17], 2D;
  8: MOV TEMP[8], TEMP[7].wzyx;
  9: MOV TEMP[9].x, UNIFORM[3].xxxx;
 10: MOV TEMP[10].xyz, INPUT[0].xyzz;
 11: TEX TEMP[11], TEMP[10].xyzz, texture[17], 3D;
 12: ADD TEMP[12], TEMP[11], TEMP[8];
 13: MOV TEMP[13], UNIFORM[4];
 14: MOV TEMP[14].x, UNIFORM[5].xxxx;
 15: MUL TEMP[15].x, TEMP[14].xxxx, TEMP[14].xxxx;
 16: LRP TEMP[16], TEMP[15].xxxx, TEMP[12], TEMP[13];
 17: MOV OUTPUT[0], TEMP[16];
 18: END

Mesa program after mesa optimizations
  0: ADD TEMP[0].xy, INPUT[0].xyyy, UNIFORM[2].xyyy;
  1: RCP TEMP[2].x, UNIFORM[2].xxxx;
  2: RCP TEMP[2].y, UNIFORM[2].yyyy;
  3: MUL TEMP[3].xy, TEMP[0].xyyy, TEMP[2].xyyy;
  4: TEX TEMP[0], TEMP[3].xyyy, texture[17], 2D;
  5: TEX TEMP[2], INPUT[0].xyzz, texture[17], 3D;
  6: ADD TEMP[3], TEMP[2], TEMP[0].wzyx;
  7: MUL TEMP[0].x, UNIFORM[5].xxxx, UNIFORM[5].xxxx;
  8: LRP OUTPUT[0], TEMP[0].xxxx, TEMP[3], UNIFORM[4];
  9: END

===========================================

Optimized Mesa IR without GLA for linked fragment program 0:
