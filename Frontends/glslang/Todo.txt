Update documentation

Key
-       functionality to add
.       basic support already present or trivial, need to verify/test/fine-tune
x       no real functionality to add
+       complete
Non-ES  desktop versions only

LLVM 3.2
• - Loop issues for LunarGLASS core

Thread safety
 - Verify thread safe version of flex

Update builds for Linux

LunarGoo
  - double underscores in LunarGOO
  - vec4[4] -> mat4
  - vec4[4][12] -> vec4[12][4]
  - #version 130 -> #version 100

+ Handle either ES or desktop as the default language (no #version)
+ Make ES the default

- finish classifying all keywords as to when they are identifiers, reserved, or keywords.

- "const" compile-time constant progagation in the front-end has to be complete, not heuristic

+ remove matrices from the SuperValue encapsulation, as matrix information can be 
   deduced from front-end information, and must be in the case of one buried in another aggregate

- double underscore should be an error not a warning, maybe wait until after LunarGOO does not make them

GLSL 1.2
• + Handle version-specific keywords as identifiers for other versions
• + Support non-square matrices, mat2x3 means 2 columns, 3 rows
• - add more non-square matrix test cases for adapter
• + Add gl_PointCoord for fragment shaders to query a fragment's position within a point sprite.
• . "?:" can have the same type 2nd and 3rd operands (e.g. conversion is not required).
• . Support centroid interpolation on multi-sample varyings
• . Allow built-in function calls in const initializers.
• . Disallow other signatures/return-values of main.
• . Separate out and distinguish between storage and parameter qualifiers, making it easier to add the invariant qualifier.
• + matrix construction from matrix allowed
• . Add the invariant keyword and its support.
• . Allow unsized array constructors.  (This still makes an explicitly sized array.)
• . Require explicitly sized arrays for assignment and comparison.
• . Allow sizing unsized array declaration through initializer.
• . Add C++ style name hiding rules
• . Removed embedded structures to match ES.
• . No line continuation character.
• . Comments don't delete new lines.
• . method support for “.length()”
• . array type syntax is supported “float[5]”, and array initializers are added
• . Accept "f" as part of a floating-point constant.  E.g. "float g = 3.5f".
• x Use of invariant and centroid must match between vertex and fragment shaders.
• + Non-ES: Reserve lowp, mediump, highp, and precision
• Non-ES 1.0 (but 3.0): Add outerProduct() for multiplying vectors to yield a matrix.
• Non-ES 1.0 (but 3.0): add transpose()
• Non-ES: Allow initializers on uniform declarations.  The value is set at link time.
• Non-ES: Automatically convert integer types to float types, as needed by context.
• Non-ES: signature matching takes type conversions into account, ambiguity is an error
• Non-ES: Different compilation units can be different language versions

OpenGL ESSL 1.0 adds
• + precision qualifiers
• + reserves superp

OpenGL ESSL 1.0 removes
• - almost all built-in "gl_" variables, state, etc.
• - 1D and 3D textures
• - shadow textures
• x multiple compilation units

GLSL 1.3
• - new texture names
• native signed and unsigned integers, integer vectors, and operations
• bitwise shifts and masking
• integer texture indices
• integer texture return values
• integer uniforms, vertex inputs, vertex outputs, fragment inputs, and fragment outputs
• new built-in functions: abs, sign, min, max, clamp, ...
• mix() is expanded to operate on a Boolean 3rd argument that does not interpolate but selects.
• texture size queries.
• texture arrays.
• texture offsetting.
• explicit LOD and derivative controls
• switch/case/default statements, for integer condition only
• new built-ins: trunc(), round(), roundEven(), isnan(), isinf(), modf()
• Add hyperbolic functions sinh, cosh, tanh, asinh, acosh, atanh.
• User-defined fragment output variables.
• Add shader input and output declarations via in and out.
• new vertex input gl_VertexID
• deprecate almost all built-in state
• Accept the precision qualifiers from OpenGL ES with no expectation that anything is done with them.
• allow precision qualifiers in structures and function declarations
• error to specify integer literals too big for an integer variable.
• flat is for both user and predeclared built-in in/out variables
• only statically used built-ins have to be redeclared as flat
• ftransform() is deprecated
• highp is always present in the fragment language, the default is highp
• order of qualification is either (invariant-qualifier interpolation-qualifier storage-qualifier precision-qualifier) or (storage-qualifier parameter-qualifier  precision-qualifier)
• uint and int  can be mixed for <<, >> but not for other operators
• combined descriptions of << and >>, and also of &, +, and ^
• switch statements can be empty, must have a statement between a label and the end of the switch, allows flow control to fall through
• add gl_ClipDistance[] to both vertex and fragment shaders
• (a = b) is an r-value and never an l-value
• Added user-defined fragment shader outputs.
• Remove most built-in state, making it deprecated
• Deprecated built-in vertex inputs (attributes) and some outputs (varyings).
• Deprecated mixing fixed vertex/fragment stage with programmable fragment/vertex stage.
• True native integer support
• signed and unsigned integer semantics
• projective cube map texture and shadow
• explicit gradient texture lookup
• Some synchronization with ES (inout parameter evaluation order, foo(void), others)
• Deprecated gl_ClipVertex
• It's an error to use #if etc. on an undefined name (later reversed, version-specific)
• Use gl_Position for clipping if gl_ClipVertex is not statically written. (later reversed, version specific)
• The ability to index into an array of samplers with a variable index is removed
• Non-ES: Preprocessor token pasting (##), ## does macro expansion after pasting not before
• Non-ES: non-perspective (linear) interpolation (noperspective)

1.4
• Add uniform blocks and layouts to be backed by the application through buffer bindings.
• - Add gl_InstanceID for instance drawing.
• Don't require writing to gl_Position.
• things to track as removed in this release, but present in others:
  • Use of gl_ClipVertex.  Use gl_ClipDistance instead.
  • Built-in vertex shader inputs.
  • Built-in uniforms except for depth range parameters
  • Built-in interface between vertex and fragment:  gl_TexCoord, gl_FogFragCoord, and all the color values.
  • Built-in two-sided coloring.
  • Fixed functionality for a programmable stage.  Supply shaders for all stages currently being used.
  • ftransform().  Use invariant outputs instead.
• - Add matrix inversion built-in inverse().
• Make clear that mix(), isnan(), and isinf() work with a scalar bool as well.
• Make the default precision qualification for fragment shader be high
• Non-ES: Rectangular textures, including the closure of the functionality indicated by the original texture_rectangle extension, the gpu_shader4 extension and the 1.3 version of GLSL.
• Non-ES: Texture buffers.

1.5
• Turn the compatibility extension into the compatibility profile.
• Made version be 150, 1.50, etc.
• Added gl_PrimitiveID as an input to fragment shaders.
• Added determinant() built-in.
• Non-ES: Broaden array usage to include vertex shader inputs (vertex in).
• Broaden structure usage to include fragment and geometry inputs and vertex and geometry outputs.
• Non-ES: Broadened interface blocks from just uniforms to in and out interfaces as well.
• Added gl_FragCoord qualifiers origin_upper_left, and pixel_center_integer to modify the values returned by gl_FragCoord (and have no affect on any other aspect of the pipeline or language).
• Removed the ability to have statements before the first case in a switch.
• Non-ES: Added support for multi-sample textures through sampler2DMS and sampler2DMSArray support in texelFetch() and textureSize().
• Deprecated gl_MaxVaryingComponents;
• Put gl_MaxTextureUnits and gl_MaxTextureCoords into the compatibility profile.
• Change ARB_compatibility extension to compatibility profile.
• Add new minimum maximums for gl_MaxVertexOutputComponents, gl_MaxGeometryInputComponents, gl_MaxGeometryOutputComponents, and gl_MaxFragmentInputComponents, rather than relying on gl_MaxVaryingComponents.  Also, corrected gl_MaxVaryingComponents to be 60 instead of 64.
• Non-ES: Added geometry shaders.  This includes targeting layers in FBO rendering.
• Non-ES: geometry shader layouts: they must be declared, telling the system the primitive input and output types and maximum number of vertices.
• Non-ES: Added geometry shader constants.
• Non-ES: gl_FragCoord qualifiers use the layout(): origin_upper_left and pixel_center_integer.

3.3
• Add ARB_explicit_attrib_location extension:
  • Layout qualifiers can declare the location of vertex shader inputs.
  • Layout qualifiers can declare the location of fragment shader outputs.
• Add ARB_shader_bit_encoding extension:
  • Floating-point variables within a shader are encoded according to IEEE 754.
  • Non-ES: Add built-in functions converting floating-point values to and from signed or unsigned integers representing their encoding.
• Change #line behavior:  The number provided is the number of the next line of code, not the current line.  This makes it match C++ semantics.
• Initializers for a shared global must be the same valued constant expression.

OpenGL ES 3.0 removes
• Profiles and deprecation
• Geometry shaders
• Shared globals (except for uniforms)
• in and out blocks
• vertex array inputs (attribute arrays)
• Layout qualifiers: index, origin_upper_left and pixel_center_integer
• CPP token pasting
• Unsized arrays.
• Implicit type conversion.
• Overloading built-in functions
• noperspective
• Multi-sample textures
• Rectangular textures
• Texture buffers
• Noise
• Outer scope for built-in functions.
• Redeclaring built-in variables

OpenGL ES 3.0 adds
• outerProduct() for multiplying vectors to yield a matrix.
• transpose()
• Line continuation and UTF-8 in GLSL ES 1.00 when used with OpenGL ES 3.0
• Array length operator returns an unsigned integer-constant.  The precision is determined using the rules for literal integers
• Clarified that source code lines may be of arbitrary length
• Line continuation
• Extended character set for comments
• Built-in constants: gl_MinProgramTexelOffset, gl_MaxProgramTexelOffset
• Handling and reporting of errors
• GLES macro
• Use of an undefined macro is an error
• Numeric precision of variables and operations
• Default precisions
• Definitions and behavior for precision qualifiers lowp, mediump and highp
• Invariance within a shader
• Relaxation of the order of evaluation of expressions
• Pack and unpack built-in functions
• List of errors
• Normative references
• Extension macro names always defined if the extension is available
• Clarified that for the operators << and >>, if both operands are vectors, they must have the same size
• GLSL ES 1.00 compatibility
• Vertex output, fragment input counting algorithm
