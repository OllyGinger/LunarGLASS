
Top IR:
; ModuleID = 'Top'

@"sampler2D texSampler2D" = external addrspace(1) constant i32
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %texColor = alloca <4 x float>
  %"gl_TexCoord[4]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %"gl_TexCoord[5]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %0 = fadd <4 x float> %"gl_TexCoord[4]", %"gl_TexCoord[5]"
  %1 = extractelement <4 x float> %0, i32 0
  %2 = insertelement <2 x float> undef, float %1, i32 0
  %3 = extractelement <4 x float> %0, i32 1
  %4 = insertelement <2 x float> %2, float %3, i32 1
  %5 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %5, i32 0, <2 x float> %4)
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %texColor1 = fadd <4 x float> %6, %color
  store <4 x float> %texColor1, <4 x float>* %texColor
  %alpha = call float @llvm.gla.fReadInterpolant.f32(i32 3, i32 -1, i32 1)
  %7 = load <4 x float>* %texColor
  %texColor2 = insertelement <4 x float> %7, float %alpha, i32 3
  store <4 x float> %texColor2, <4 x float>* %texColor
  %"gl_TexCoord[0]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 4, i32 -1, i32 1)
  %"gl_TexCoord[4]3" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %8 = fadd <4 x float> %"gl_TexCoord[0]", %"gl_TexCoord[4]3"
  %9 = load <4 x float>* %texColor
  %gl_FragColor = fadd <4 x float> %8, %9
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %10 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %10)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@"sampler2D texSampler2D" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %"gl_TexCoord[4]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %"gl_TexCoord[5]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %0 = fadd <4 x float> %"gl_TexCoord[4]", %"gl_TexCoord[5]"
  %1 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float> %0, <2 x i32> <i32 0, i32 1>)
  %2 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %3 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %2, i32 0, <2 x float> %1)
  %"gl_TexCoord[0]" = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 4, i32 -1, i32 1)
  %alpha = call float @llvm.gla.fReadInterpolant.f32(i32 3, i32 -1, i32 1)
  %texColor1 = fadd <4 x float> %3, %color
  %4 = fadd <4 x float> %"gl_TexCoord[0]", %"gl_TexCoord[4]"
  %5 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %texColor1, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %alpha, i32 0)
  %gl_FragColor = fadd <4 x float> %4, %5
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float>, <2 x i32>) nounwind readnone
compiling varyingArray.frag...
uniform sampler2D texSampler2D ; 
varying vec4 color ; 
varying float alpha ; 
void  main (){
vec4 texColor = texture2D ( texSampler2D , vec2 ( gl_TexCoord [ 4 ] + gl_TexCoord [ 5 ] ) ) ; texColor += color ; texColor . a = alpha ; gl_FragColor = gl_TexCoord [ 0 ] + gl_TexCoord [ 4 ] + texColor ; }



(
(declare (in ) float alpha)
(declare (in ) vec4 color)
(declare (uniform ) sampler2D texSampler2D)
(declare (out ) vec4 gl_FragColor)
(declare (in ) (array vec4 6) gl_TexCoord)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 texColor)
      (assign (constant bool (1)) (xyzw) (var_ref texColor)  (expression vec4 + (tex (var_ref texSampler2D)  (swiz xy (expression vec4 + (array_ref (var_ref gl_TexCoord) (constant int (4)) ) (array_ref (var_ref gl_TexCoord) (constant int (5)) ) ) ) (0 0 0) 1 () )(var_ref color) ) ) 
      (assign (constant bool (1)) (w) (var_ref texColor)  (var_ref alpha) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 + (expression vec4 + (array_ref (var_ref gl_TexCoord) (constant int (0)) ) (array_ref (var_ref gl_TexCoord) (constant int (4)) ) ) (var_ref texColor) ) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform sampler2D texSampler2D;
in vec4 color;
in float alpha;

void main()
{
    vec4 temp21 = gl_TexCoord[4] + gl_TexCoord[5];
    vec2 temp22 = vec2(temp21);
    vec4 temp23 = texture2D(texSampler2D, temp22);
    vec4 texColor1 = temp23 + color;
    vec4 temp25 = gl_TexCoord[0] + gl_TexCoord[4];
    vec4 temp26 = texColor1;
    temp26.w = alpha;
    vec4 gla_copyout_gl_FragColor = temp25 + temp26;
    gl_FragColor = gla_copyout_gl_FragColor;
    
}
