
Top IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, [4 x float], [5 x <4 x float>] }
%lunarStruct2 = type { [5 x i32], float, [7 x %lunarStruct1] }

@foo2 = external addrspace(2) constant [4 x %lunarStruct2]
@FragColor_shadow = internal global <4 x float> zeroinitializer
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %scale = alloca float
  store float 0.000000e+00, float* %scale
  %0 = load i32 addrspace(2)* getelementptr inbounds ([4 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 0, i32 4)
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load <4 x float> addrspace(2)* getelementptr inbounds ([4 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 2, i32 2, i32 2, i32 3)
  %scale1 = extractelement <4 x float> %2, i32 0
  store float %scale1, float* %scale
  br label %ifmerge

else:                                             ; preds = %entry
  %scale2 = load float addrspace(2)* getelementptr inbounds ([4 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 2, i32 2, i32 1, i32 3)
  store float %scale2, float* %scale
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %3 = load float* %scale
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %4 = load i32 addrspace(1)* @"sampler2D sampler"
  %5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %4, i32 0, <2 x float> %coord)
  %6 = insertelement <4 x float> undef, float %3, i32 0
  %7 = insertelement <4 x float> %6, float %3, i32 1
  %8 = insertelement <4 x float> %7, float %3, i32 2
  %9 = insertelement <4 x float> %8, float %3, i32 3
  %FragColor_shadow = fmul <4 x float> %9, %5
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %10 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %10)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, [4 x float], [5 x <4 x float>] }
%lunarStruct2 = type { [5 x i32], float, [7 x %lunarStruct1] }

@foo2 = external addrspace(2) constant [4 x %lunarStruct2]
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [4 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 0, i32 4
  %0 = load i32 addrspace(2)* %gla_constGEP, align 16
  %1 = icmp sgt i32 %0, 0
  %gla_constGEP4 = getelementptr [4 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 2, i32 2, i32 2, i32 3
  %2 = load <4 x float> addrspace(2)* %gla_constGEP4, align 16
  %scale1 = extractelement <4 x float> %2, i32 0
  %gla_constGEP5 = getelementptr [4 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 2, i32 2, i32 1, i32 3
  %scale2 = load float addrspace(2)* %gla_constGEP5, align 4
  %select = select i1 %1, float %scale1, float %scale2
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %select, <4 x i32> zeroinitializer)
  %4 = load i32 addrspace(1)* @"sampler2D sampler", align 4
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %4, i32 0, <2 x float> %coord)
  %FragColor_shadow = fmul <4 x float> %3, %5
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %FragColor_shadow)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone
compiling structure.frag...
uniform sampler2D sampler ; 
varying vec2 coord ; 
struct lunarStruct1 { int i ; float f [ 4 ] ; vec4 color [ 5 ] ; } ; 
struct lunarStruct2 { int i [ 5 ] ; float f ; lunarStruct1 s1_1 [ 7 ] ; } ; 
uniform lunarStruct1 foo ; 
uniform lunarStruct2 foo2 [ 5 ] ; 
void  main (){
float scale = 0.000000 ; if ( foo2 [ 3 ] . i [ 4 ] > 0 ) scale = foo2 [ 3 ] . s1_1 [ 2 ] . color [ 3 ] . x ; else scale = foo2 [ 3 ] . s1_1 [ 2 ] . f [ 3 ] ; gl_FragColor = scale * texture2D ( sampler , coord ) ; }



(
(declare (uniform ) (array lunarStruct2 4) foo2)
(declare (in ) vec2 coord)
(declare (uniform ) sampler2D sampler)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () float scale)
      (assign (constant bool (1)) (x) (var_ref scale)  (constant float (0.000000)) ) 
      (if (expression bool > (array_ref (record_ref (array_ref (var_ref foo2) (constant int (3)) )  i) (constant int (4)) ) (constant int (0)) ) (
        (assign (constant bool (1)) (x) (var_ref scale)  (swiz x (array_ref (record_ref (array_ref (record_ref (array_ref (var_ref foo2) (constant int (3)) )  s1_1) (constant int (2)) )  color) (constant int (3)) ) )) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref scale)  (array_ref (record_ref (array_ref (record_ref (array_ref (var_ref foo2) (constant int (3)) )  s1_1) (constant int (2)) )  f) (constant int (3)) ) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (var_ref scale) (tex (var_ref sampler)  (var_ref coord)  (0 0 0) 1 () )) ) 
    ))

)


)
// LunarGOO output
#version 130
struct lunarStruct1 {
    int member0;
    float[4] member1;
    vec4[5] member2;
};

struct lunarStruct2 {
    int[5] member0;
    float member1;
    lunarStruct1[7] member2;
};

uniform lunarStruct2[4] foo2;
uniform sampler2D sampler;
const int const23_0 = 0;
in vec2 coord;

void main()
{
    int temp21 = foo2[3].member0[4];
    bool temp22 = temp21 > const23_0;
    vec4 temp24 = foo2[3].member2[2].member2[3];
    float scale2 = foo2[3].member2[2].member1[3];
    float select = temp22 ? temp24.x : scale2;
    vec4 temp27 = vec4(select);
    vec4 temp28 = texture2D(sampler, coord);
    vec4 FragColor_shadow = temp27 * temp28;
    gl_FragColor = FragColor_shadow;
    
}
