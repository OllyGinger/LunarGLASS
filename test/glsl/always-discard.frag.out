
Top IR:
; ModuleID = 'Top'

@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %_ret_val = alloca float
  %assignment_tmp2 = alloca float
  %assignment_tmp = alloca float
  %color = alloca <4 x float>
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %color
  %tex_coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %0 = extractelement <2 x float> %tex_coord, i32 0
  %1 = fmul float %0, 2.000000e+00
  %assignment_tmp1 = fsub float %1, 1.000000e+00
  store float %assignment_tmp1, float* %assignment_tmp
  %tex_coord3 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %2 = extractelement <2 x float> %tex_coord3, i32 1
  %3 = fmul float %2, 2.000000e+00
  %assignment_tmp24 = fsub float %3, 1.000000e+00
  store float %assignment_tmp24, float* %assignment_tmp2
  %4 = load float* %assignment_tmp
  %5 = load float* %assignment_tmp
  %6 = fmul float %4, %5
  %7 = load float* %assignment_tmp2
  %8 = load float* %assignment_tmp2
  %9 = fmul float %7, %8
  %10 = fadd float %6, %9
  %_ret_val5 = call float @llvm.gla.fSqrt.f32.f32(float %10)
  store float %_ret_val5, float* %_ret_val
  %11 = load float* %_ret_val
  %12 = fcmp ogt float %11, 1.000000e+00
  br i1 %12, label %then, label %ifmerge10

then:                                             ; preds = %entry
  %13 = load float* %_ret_val
  %14 = fcmp ogt float %13, 0x3FF19999A0000000
  br i1 %14, label %then6, label %ifmerge

then6:                                            ; preds = %then
  store <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %then, %then6
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %15 = load float* %_ret_val
  %16 = fcmp ogt float %15, 0x3FF3333340000000
  br i1 %16, label %then7, label %ifmerge9

then7:                                            ; preds = %ifmerge
  %17 = load <4 x float>* %color
  %color8 = fadd <4 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color8, <4 x float>* %color
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge, %then7
  br label %ifmerge10

ifmerge10:                                        ; preds = %entry, %ifmerge9
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  %18 = load float* %_ret_val
  %19 = fcmp oge float %18, 7.500000e-01
  br i1 %19, label %then11, label %ifmerge13

then11:                                           ; preds = %post-discard
  %20 = load <4 x float>* %color
  %21 = load float* %_ret_val
  %22 = call float @llvm.gla.fPow.f32.f32.f32(float %21, float 1.600000e+01)
  %23 = fdiv float %22, 2.000000e+00
  %24 = call float @llvm.gla.fAbs.f32.f32(float %23)
  %25 = insertelement <4 x float> undef, float %24, i32 0
  %26 = insertelement <4 x float> %25, float %24, i32 1
  %27 = insertelement <4 x float> %26, float %24, i32 2
  %28 = insertelement <4 x float> %27, float %24, i32 3
  %color12 = fsub <4 x float> %20, %28
  store <4 x float> %color12, <4 x float>* %color
  br label %ifmerge13

ifmerge13:                                        ; preds = %post-discard, %then11
  %gl_FragColor14 = load <4 x float>* %color
  store <4 x float> %gl_FragColor14, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge13
  %29 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %29)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %ifmerge10
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare float @llvm.gla.fPow.f32.f32.f32(float, float) nounwind readnone

declare float @llvm.gla.fAbs.f32.f32(float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  call void @llvm.gla.discard()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.discard() nounwind
compiling always-discard.frag...
varying vec2 tex_coord ; 
void  main (void ){
vec4 white = vec4 ( 1.000000 ) ; vec4 black = vec4 ( 0.200000 ) ; vec4 color = white ; float x = tex_coord . x * 2.000000 - 1.000000 ; float y = tex_coord . y * 2.000000 - 1.000000 ; float radius = sqrt ( x * x + y * y ) ; if ( radius > 1.000000 ) {
if ( radius > 1.100000 ) {
++ color ; }
gl_FragColor = color ; if ( radius > 1.200000 ) {
++ color ; }
}
discard; if ( radius >= 0.750000 ) color -= abs ( pow ( radius , 16.000000 ) / 2.000000 ) ; gl_FragColor = color ; }



(
(declare (in ) vec2 tex_coord)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (constant vec4 (1.000000 1.000000 1.000000 1.000000)) ) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float - (expression float * (swiz x (var_ref tex_coord) )(constant float (2.000000)) ) (constant float (1.000000)) ) ) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float - (expression float * (swiz y (var_ref tex_coord) )(constant float (2.000000)) ) (constant float (1.000000)) ) ) 
      (declare () float _ret_val)
      (assign (constant bool (1)) (x) (var_ref _ret_val)  (expression float sqrt (expression float + (expression float * (var_ref assignment_tmp) (var_ref assignment_tmp) ) (expression float * (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) ) 
      (if (expression bool > (var_ref _ret_val) (constant float (1.000000)) ) (
        (if (expression bool > (var_ref _ret_val) (constant float (1.100000)) ) (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (constant vec4 (2.000000 2.000000 2.000000 2.000000)) ) 
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref color) ) 
        (if (expression bool > (var_ref _ret_val) (constant float (1.200000)) ) (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        )
        ())

      )
      ())

      (discard )
      (if (expression bool >= (var_ref _ret_val) (constant float (0.750000)) ) (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 - (var_ref color) (expression float abs (expression float / (expression float pow (var_ref _ret_val) (constant float (16.000000)) ) (constant float (2.000000)) ) ) ) ) 
      )
      ())

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref color) ) 
    ))

)


)
// LunarGOO output
#version 130

void main()
{
    discard;
    
}
