
Top IR:
; ModuleID = 'Top'

@"sampler1D texSampler1D" = external addrspace(1) constant i32
@"sampler2D texSampler2D" = external addrspace(1) constant i32
@"sampler3D texSampler3D" = external addrspace(1) constant i32
@"samplerCube texSamplerCube" = external addrspace(1) constant i32
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %mix_retval = alloca <4 x float>
  %color = alloca <4 x float>
  %0 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %color1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 1, i32 %0, i32 0, float 0x3FFC9FBE80000000)
  store <4 x float> %color1, <4 x float>* %color
  %1 = load <4 x float>* %color
  %2 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %3 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32 1, i32 %2, i32 130, float 0x3FFC9FBE80000000, float 2.000000e+00, float undef)
  %color2 = fadd <4 x float> %1, %3
  store <4 x float> %color2, <4 x float>* %color
  %4 = load <4 x float>* %color
  %coords2D = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %5 = extractelement <2 x float> %coords2D, i32 0
  %coords2D3 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %6 = extractelement <2 x float> %coords2D3, i32 1
  %7 = fdiv float 1.000000e+00, %6
  %8 = fmul float %5, %7
  %9 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %10 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 1, i32 %9, i32 0, float %8)
  %color4 = fadd <4 x float> %4, %10
  store <4 x float> %color4, <4 x float>* %color
  %11 = load <4 x float>* %color
  %12 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %13 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 1, i32 %12, i32 0, float 0x3FEC9FBE80000000)
  %color5 = fadd <4 x float> %11, %13
  store <4 x float> %color5, <4 x float>* %color
  %14 = load <4 x float>* %color
  %coords2D6 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %15 = extractelement <2 x float> %coords2D6, i32 0
  %coords2D7 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %16 = extractelement <2 x float> %coords2D7, i32 1
  %17 = fdiv float 1.000000e+00, %16
  %18 = fmul float %15, %17
  %19 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %20 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32 1, i32 %19, i32 130, float %18, float 2.000000e+00, float undef)
  %color8 = fadd <4 x float> %14, %20
  store <4 x float> %color8, <4 x float>* %color
  %21 = load <4 x float>* %color
  %22 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %23 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32 1, i32 %22, i32 130, float 0x3FEC9FBE80000000, float 2.000000e+00, float undef)
  %color9 = fadd <4 x float> %21, %23
  store <4 x float> %color9, <4 x float>* %color
  %24 = load <4 x float>* %color
  %coords2D10 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %25 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %26 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %25, i32 0, <2 x float> %coords2D10)
  %color11 = fadd <4 x float> %24, %26
  store <4 x float> %color11, <4 x float>* %color
  %27 = load <4 x float>* %color
  %coords2D12 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %28 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %29 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32 2, i32 %28, i32 130, <2 x float> %coords2D12, float 2.000000e+00, float undef)
  %color13 = fadd <4 x float> %27, %29
  store <4 x float> %color13, <4 x float>* %color
  %30 = load <4 x float>* %color
  %31 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %32 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %31, i32 0, <2 x float> <float 0x3FE09446E0000000, float 0x3FE9304380000000>)
  %color14 = fadd <4 x float> %30, %32
  store <4 x float> %color14, <4 x float>* %color
  %33 = load <4 x float>* %color
  %34 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %35 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32 2, i32 %34, i32 130, <2 x float> <float 0x3FEC9FBE80000000, float 0x3FF5BE76C0000000>, float 2.000000e+00, float undef)
  %color15 = fadd <4 x float> %33, %35
  store <4 x float> %color15, <4 x float>* %color
  %36 = load <4 x float>* %color
  %37 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %38 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %37, i32 0, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>)
  %color16 = fadd <4 x float> %36, %38
  store <4 x float> %color16, <4 x float>* %color
  %39 = load <4 x float>* %color
  %40 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %41 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 3, i32 %40, i32 130, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>, float 2.000000e+00, float undef)
  %color17 = fadd <4 x float> %39, %41
  store <4 x float> %color17, <4 x float>* %color
  %42 = load <4 x float>* %color
  %43 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %44 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %43, i32 0, <3 x float> <float 0x3FEC9FBE80000000, float 0x3FF5BE76C0000000, float 0x3FFB9FBE80000000>)
  %color18 = fadd <4 x float> %42, %44
  store <4 x float> %color18, <4 x float>* %color
  %45 = load <4 x float>* %color
  %46 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %47 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 3, i32 %46, i32 130, <3 x float> <float 0x3FEC9FBE80000000, float 0x3FF5BE76C0000000, float 0x3FFB9FBE80000000>, float 2.000000e+00, float undef)
  %color19 = fadd <4 x float> %45, %47
  store <4 x float> %color19, <4 x float>* %color
  %48 = load <4 x float>* %color
  %49 = load i32 addrspace(1)* @"samplerCube texSamplerCube"
  %50 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 4, i32 %49, i32 0, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>)
  %color20 = fadd <4 x float> %48, %50
  store <4 x float> %color20, <4 x float>* %color
  %51 = load <4 x float>* %color
  %52 = load i32 addrspace(1)* @"samplerCube texSamplerCube"
  %53 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 4, i32 %52, i32 130, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>, float 2.000000e+00, float undef)
  %color21 = fadd <4 x float> %51, %53
  store <4 x float> %color21, <4 x float>* %color
  %54 = load <4 x float>* %color
  %55 = load <4 x float> addrspace(2)* @u
  %56 = load float addrspace(2)* @blend
  %57 = fmul float %56, 0x3FFC9FBE80000000
  %mix_retval22 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %54, <4 x float> %55, float %57)
  store <4 x float> %mix_retval22, <4 x float>* %mix_retval
  %FragColor_shadow = load <4 x float>* %mix_retval
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %58 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %58)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32, i32, i32, float) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32, i32, i32, float, float, float) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32, i32, i32, <2 x float>, float, float) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32, i32, i32, <3 x float>, float, float) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@"sampler1D texSampler1D" = external addrspace(1) constant i32
@"sampler2D texSampler2D" = external addrspace(1) constant i32
@"sampler3D texSampler3D" = external addrspace(1) constant i32
@"samplerCube texSamplerCube" = external addrspace(1) constant i32
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @"sampler1D texSampler1D", align 4
  %1 = load i32 addrspace(1)* @"sampler2D texSampler2D", align 4
  %2 = load i32 addrspace(1)* @"sampler3D texSampler3D", align 4
  %3 = load i32 addrspace(1)* @"samplerCube texSamplerCube", align 4
  %coords2D3 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %4 = extractelement <2 x float> %coords2D3, i32 1
  %5 = fdiv float 1.000000e+00, %4
  %6 = extractelement <2 x float> %coords2D3, i32 0
  %7 = fmul float %6, %5
  %8 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32 1, i32 %0, i32 130, float 0x3FFC9FBE80000000, float 2.000000e+00, float undef)
  %color1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 1, i32 %0, i32 0, float 0x3FFC9FBE80000000)
  %9 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 1, i32 %0, i32 0, float %7)
  %color2 = fadd <4 x float> %color1, %8
  %10 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 1, i32 %0, i32 0, float 0x3FEC9FBE80000000)
  %color4 = fadd <4 x float> %color2, %9
  %11 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32 1, i32 %0, i32 130, float %7, float 2.000000e+00, float undef)
  %color5 = fadd <4 x float> %color4, %10
  %12 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32 1, i32 %0, i32 130, float 0x3FEC9FBE80000000, float 2.000000e+00, float undef)
  %color8 = fadd <4 x float> %color5, %11
  %13 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %1, i32 0, <2 x float> %coords2D3)
  %color9 = fadd <4 x float> %color8, %12
  %14 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32 2, i32 %1, i32 130, <2 x float> %coords2D3, float 2.000000e+00, float undef)
  %color11 = fadd <4 x float> %color9, %13
  %15 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %1, i32 0, <2 x float> <float 0x3FE09446E0000000, float 0x3FE9304380000000>)
  %color13 = fadd <4 x float> %color11, %14
  %16 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32 2, i32 %1, i32 130, <2 x float> <float 0x3FEC9FBE80000000, float 0x3FF5BE76C0000000>, float 2.000000e+00, float undef)
  %color14 = fadd <4 x float> %color13, %15
  %17 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %2, i32 0, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>)
  %color15 = fadd <4 x float> %color14, %16
  %18 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 3, i32 %2, i32 130, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>, float 2.000000e+00, float undef)
  %color16 = fadd <4 x float> %color15, %17
  %19 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %2, i32 0, <3 x float> <float 0x3FEC9FBE80000000, float 0x3FF5BE76C0000000, float 0x3FFB9FBE80000000>)
  %color17 = fadd <4 x float> %color16, %18
  %20 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 3, i32 %2, i32 130, <3 x float> <float 0x3FEC9FBE80000000, float 0x3FF5BE76C0000000, float 0x3FFB9FBE80000000>, float 2.000000e+00, float undef)
  %color18 = fadd <4 x float> %color17, %19
  %21 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 4, i32 %3, i32 0, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>)
  %color19 = fadd <4 x float> %color18, %20
  %22 = load float addrspace(2)* @blend, align 4
  %23 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 4, i32 %3, i32 130, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>, float 2.000000e+00, float undef)
  %color20 = fadd <4 x float> %color19, %21
  %24 = fmul float %22, 0x3FFC9FBE80000000
  %25 = load <4 x float> addrspace(2)* @u, align 16
  %color21 = fadd <4 x float> %color20, %23
  %mix_retval22 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %color21, <4 x float> %25, float %24)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %mix_retval22)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32, i32, i32, float) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32, i32, i32, float, float, float) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32, i32, i32, <2 x float>, float, float) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32, i32, i32, <3 x float>, float, float) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind
compiling texture.frag...
uniform sampler1D texSampler1D ; 
uniform sampler2D texSampler2D ; 
uniform sampler3D texSampler3D ; 
uniform samplerCube texSamplerCube ; 
uniform sampler1DShadow shadowSampler1D ; 
uniform sampler2DShadow shadowSampler2D ; 
uniform float blend ; 
uniform vec2 scale ; 
uniform vec4 u ; 
varying vec2 t ; 
varying vec2 coords2D ; 
void  main (){
float blendscale = 1.789000 ; float bias = 2.000000 ; float lod = 3.000000 ; float proj = 2.000000 ; float coords1D = 1.789000 ; vec3 coords3D = vec3 ( 1.789000 , 2.718000 , 3.453000 ) ; vec4 coords4D = vec4 ( 1.789000 , 2.718000 , 3.453000 , 2.000000 ) ; vec4 color = vec4 ( 0.000000 , 0.000000 , 0.000000 , 0.000000 ) ; color += texture1D ( texSampler1D , coords1D ) ; color += texture1D ( texSampler1D , coords1D , bias ) ; color += texture1DProj ( texSampler1D , coords2D ) ; color += texture1DProj ( texSampler1D , coords4D ) ; color += texture1DProj ( texSampler1D , coords2D , bias ) ; color += texture1DProj ( texSampler1D , coords4D , bias ) ; color += texture2D ( texSampler2D , coords2D ) ; color += texture2D ( texSampler2D , coords2D , bias ) ; color += texture2DProj ( texSampler2D , coords3D ) ; color += texture2DProj ( texSampler2D , coords4D , bias ) ; color += texture3D ( texSampler3D , coords3D ) ; color += texture3D ( texSampler3D , coords3D , bias ) ; color += texture3DProj ( texSampler3D , coords4D ) ; color += texture3DProj ( texSampler3D , coords4D , bias ) ; color += textureCube ( texSamplerCube , coords3D ) ; color += textureCube ( texSamplerCube , coords3D , bias ) ; ivec2 iCoords2D = ivec2 ( 0 , 5 ) ; int iLod = 1 ; vec2 gradX = dFdx ( coords2D ) ; vec2 gradY = dFdy ( coords2D ) ; ivec2 offset = ivec2 ( 3 , - 7 ) ; gl_FragColor = mix ( color , u , blend * blendscale ) ; }



(
(declare (in ) vec2 coords2D)
(declare (uniform ) vec4 u)
(declare (uniform ) float blend)
(declare (uniform ) samplerCube texSamplerCube)
(declare (uniform ) sampler3D texSampler3D)
(declare (uniform ) sampler2D texSampler2D)
(declare (uniform ) sampler1D texSampler1D)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (tex (var_ref texSampler1D)  (constant float (1.789000))  (0 0 0) 1 () )) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (txb (var_ref texSampler1D)  (constant float (1.789000))  (0 0 0) 1 () (constant float (2.000000)) )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (tex (var_ref texSampler1D)  (expression float * (swiz x (var_ref coords2D) )(expression float rcp (swiz y (var_ref coords2D) )) )  (0 0 0) 1 () )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (tex (var_ref texSampler1D)  (constant float (0.894500))  (0 0 0) 1 () )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (txb (var_ref texSampler1D)  (expression float * (swiz x (var_ref coords2D) )(expression float rcp (swiz y (var_ref coords2D) )) )  (0 0 0) 1 () (constant float (2.000000)) )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (txb (var_ref texSampler1D)  (constant float (0.894500))  (0 0 0) 1 () (constant float (2.000000)) )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (tex (var_ref texSampler2D)  (var_ref coords2D)  (0 0 0) 1 () )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (txb (var_ref texSampler2D)  (var_ref coords2D)  (0 0 0) 1 () (constant float (2.000000)) )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (tex (var_ref texSampler2D)  (constant vec2 (0.518100 0.787142))  (0 0 0) 1 () )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (txb (var_ref texSampler2D)  (constant vec2 (0.894500 1.359000))  (0 0 0) 1 () (constant float (2.000000)) )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (tex (var_ref texSampler3D)  (constant vec3 (1.789000 2.718000 3.453000))  (0 0 0) 1 () )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (txb (var_ref texSampler3D)  (constant vec3 (1.789000 2.718000 3.453000))  (0 0 0) 1 () (constant float (2.000000)) )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (tex (var_ref texSampler3D)  (constant vec3 (0.894500 1.359000 1.726500))  (0 0 0) 1 () )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (txb (var_ref texSampler3D)  (constant vec3 (0.894500 1.359000 1.726500))  (0 0 0) 1 () (constant float (2.000000)) )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (tex (var_ref texSamplerCube)  (constant vec3 (1.789000 2.718000 3.453000))  (0 0 0) 1 () )) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (txb (var_ref texSamplerCube)  (constant vec3 (1.789000 2.718000 3.453000))  (0 0 0) 1 () (constant float (2.000000)) )) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref color) (var_ref u) (expression float * (var_ref blend) (constant float (1.789000)) ) ))
) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref mix_retval) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform vec4 u;
uniform float blend;
in vec2 coords2D3;
const float const22_1f = 1.0;
const float const25_2f = 1.789;
const float const26_2f = 2.0;
const float const31_1f = 0.8945;
const vec2 const42 = vec2(0.5181, 0.787142);
const vec2 const45 = vec2(0.8945, 1.359);
const vec3 const48 = vec3(1.789, 2.718, 3.453);
const vec3 const53 = vec3(0.8945, 1.359, 1.7265);

void main()
{
    float temp21 = const22_1f / coords2D3.y;
    float temp23 = coords2D3.x * temp21;
    vec4 temp24 = texture1D(texSampler1D, const25_2f, const26_2f);
    vec4 color1 = texture1D(texSampler1D, const25_2f);
    vec4 temp28 = texture1D(texSampler1D, temp23);
    vec4 color2 = color1 + temp24;
    vec4 temp30 = texture1D(texSampler1D, const31_1f);
    vec4 color4 = color2 + temp28;
    vec4 temp33 = texture1D(texSampler1D, temp23, const26_2f);
    vec4 color5 = color4 + temp30;
    vec4 temp35 = texture1D(texSampler1D, const31_1f, const26_2f);
    vec4 color8 = color5 + temp33;
    vec4 temp37 = texture2D(texSampler2D, coords2D3);
    vec4 color9 = color8 + temp35;
    vec4 temp39 = texture2D(texSampler2D, coords2D3, const26_2f);
    vec4 color11 = color9 + temp37;
    vec4 temp41 = texture2D(texSampler2D, const42);
    vec4 color13 = color11 + temp39;
    vec4 temp44 = texture2D(texSampler2D, const45, const26_2f);
    vec4 color14 = color13 + temp41;
    vec4 temp47 = texture3D(texSampler3D, const48);
    vec4 color15 = color14 + temp44;
    vec4 temp50 = texture3D(texSampler3D, const48, const26_2f);
    vec4 color16 = color15 + temp47;
    vec4 temp52 = texture3D(texSampler3D, const53);
    vec4 color17 = color16 + temp50;
    vec4 temp55 = texture3D(texSampler3D, const53, const26_2f);
    vec4 color18 = color17 + temp52;
    vec4 temp57 = textureCube(texSamplerCube, const48);
    vec4 color19 = color18 + temp55;
    vec4 temp59 = textureCube(texSamplerCube, const48, const26_2f);
    vec4 color20 = color19 + temp57;
    float temp61 = blend * const25_2f;
    vec4 color21 = color20 + temp59;
    vec4 mix_retval22 = mix(color21, u, temp61);
    gl_FragColor = mix_retval22;
    
}
