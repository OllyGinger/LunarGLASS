
Top IR:
; ModuleID = 'Top'

@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %0 = extractelement <4 x float> %BaseColor, i32 0
  %BaseColor1 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %1 = extractelement <4 x float> %BaseColor1, i32 1
  %2 = fadd float %0, %1
  %3 = insertelement <4 x float> undef, float %2, i32 0
  %4 = insertelement <4 x float> %3, float %2, i32 1
  %5 = insertelement <4 x float> %4, float %2, i32 2
  %gl_FragColor = insertelement <4 x float> %5, float %2, i32 3
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %6 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %6)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %0 = extractelement <4 x float> %BaseColor, i32 0
  %1 = extractelement <4 x float> %BaseColor, i32 1
  %2 = fadd float %0, %1
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %2, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %3)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone
compiling functionCall.frag...
uniform vec4 bigColor ; 
varying vec4 BaseColor ; 
uniform float d ; 
float  foo (vec4 bar ){
return bar . x + bar . y ; }

void  main (){
vec4 color = vec4 ( foo ( BaseColor ) ) ; gl_FragColor = color ; }



(
(declare (in ) vec4 BaseColor)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (swiz xxxx (expression float + (swiz x (var_ref BaseColor) )(swiz y (var_ref BaseColor) )) )) 
    ))

)


)
// LunarGOO output
#version 130
in vec4 BaseColor;

void main()
{
    float temp21 = BaseColor.x + BaseColor.y;
    vec4 temp22 = vec4(temp21);
    gl_FragColor = temp22;
    
}
