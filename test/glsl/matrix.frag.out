
Top IR:
; ModuleID = 'Top'

@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@un34 = external addrspace(2) constant [4 x <4 x float>]
@gl_FragColor = internal global <4 x float> zeroinitializer
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %assignment_tmp206 = alloca [4 x <4 x float>]
  %mat_ctor178 = alloca [4 x <4 x float>]
  %mat_ctor_vec = alloca <4 x float>
  %mat_ctor167 = alloca [4 x <4 x float>]
  %mat_ctor = alloca [4 x <4 x float>]
  %assignment_tmp = alloca <4 x float>
  %vec_ctor = alloca <4 x float>
  %0 = load <4 x float>* %vec_ctor
  %vec_ctor1 = insertelement <4 x float> %0, float 1.000000e+00, i32 3
  store <4 x float> %vec_ctor1, <4 x float>* %vec_ctor
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 -1, i32 1)
  %__matrix = load [3 x <3 x float>] addrspace(2)* @colorTransform
  %1 = alloca <3 x float>
  %2 = load <3 x float>* %1
  %__column = extractvalue [3 x <3 x float>] %__matrix, 0
  %__dot = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column)
  %3 = insertelement <3 x float> %2, float %__dot, i32 0
  %__column2 = extractvalue [3 x <3 x float>] %__matrix, 1
  %__dot3 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column2)
  %4 = insertelement <3 x float> %3, float %__dot3, i32 1
  %__column4 = extractvalue [3 x <3 x float>] %__matrix, 2
  %__dot5 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column4)
  %5 = insertelement <3 x float> %4, float %__dot5, i32 2
  %6 = load <4 x float>* %vec_ctor
  %7 = extractelement <3 x float> %5, i32 0
  %8 = insertelement <4 x float> %6, float %7, i32 0
  %9 = extractelement <3 x float> %5, i32 1
  %10 = insertelement <4 x float> %8, float %9, i32 1
  %11 = extractelement <3 x float> %5, i32 2
  %vec_ctor6 = insertelement <4 x float> %10, float %11, i32 2
  store <4 x float> %vec_ctor6, <4 x float>* %vec_ctor
  %12 = load <4 x float> addrspace(2)* getelementptr inbounds ([4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1)
  %13 = load <4 x float>* %vec_ctor
  %assignment_tmp7 = fadd <4 x float> %12, %13
  store <4 x float> %assignment_tmp7, <4 x float>* %assignment_tmp
  %gl_FragColor = load <4 x float>* %assignment_tmp
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %__matrix8 = load [4 x <4 x float>] addrspace(2)* @m
  %__matrix9 = load [4 x <4 x float>] addrspace(2)* @n
  %__Matrix-Compare = alloca i1
  %__Matrix-Compare10 = load i1* %__Matrix-Compare
  %__column11 = extractvalue [4 x <4 x float>] %__matrix8, 0
  %__column12 = extractvalue [4 x <4 x float>] %__matrix9, 0
  %14 = fcmp one <4 x float> %__column11, %__column12
  %15 = call i1 @llvm.gla.any.v4i1(<4 x i1> %14)
  %__column13 = extractvalue [4 x <4 x float>] %__matrix8, 1
  %__column14 = extractvalue [4 x <4 x float>] %__matrix9, 1
  %16 = fcmp one <4 x float> %__column13, %__column14
  %17 = call i1 @llvm.gla.any.v4i1(<4 x i1> %16)
  %18 = or i1 %15, %17
  %__column15 = extractvalue [4 x <4 x float>] %__matrix8, 2
  %__column16 = extractvalue [4 x <4 x float>] %__matrix9, 2
  %19 = fcmp one <4 x float> %__column15, %__column16
  %20 = call i1 @llvm.gla.any.v4i1(<4 x i1> %19)
  %21 = or i1 %18, %20
  %__column17 = extractvalue [4 x <4 x float>] %__matrix8, 3
  %__column18 = extractvalue [4 x <4 x float>] %__matrix9, 3
  %22 = fcmp one <4 x float> %__column17, %__column18
  %23 = call i1 @llvm.gla.any.v4i1(<4 x i1> %22)
  %24 = or i1 %21, %23
  br i1 %24, label %then, label %else

then:                                             ; preds = %entry
  %25 = load <4 x float>* %assignment_tmp
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %gl_FragColor19 = fadd <4 x float> %25, %v
  store <4 x float> %gl_FragColor19, <4 x float>* @gl_FragColor
  br label %ifmerge

else:                                             ; preds = %entry
  %26 = load <4 x float>* @gl_FragColor
  %__matrix20 = load [4 x <4 x float>] addrspace(2)* @m
  %v21 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %27 = alloca <4 x float>
  %28 = load <4 x float>* %27
  %__component = extractelement <4 x float> %v21, i32 0
  %__component22 = extractelement <4 x float> %v21, i32 1
  %__component23 = extractelement <4 x float> %v21, i32 2
  %__component24 = extractelement <4 x float> %v21, i32 3
  %__column25 = extractvalue [4 x <4 x float>] %__matrix20, 0
  %__element = extractelement <4 x float> %__column25, i32 0
  %__product = fmul float %__element, %__component
  %__column26 = extractvalue [4 x <4 x float>] %__matrix20, 1
  %__element27 = extractelement <4 x float> %__column26, i32 0
  %__product28 = fmul float %__element27, %__component22
  %__dotProduct = fadd float %__product, %__product28
  %__column29 = extractvalue [4 x <4 x float>] %__matrix20, 2
  %__element30 = extractelement <4 x float> %__column29, i32 0
  %__product31 = fmul float %__element30, %__component23
  %__dotProduct32 = fadd float %__dotProduct, %__product31
  %__column33 = extractvalue [4 x <4 x float>] %__matrix20, 3
  %__element34 = extractelement <4 x float> %__column33, i32 0
  %__product35 = fmul float %__element34, %__component24
  %__dotProduct36 = fadd float %__dotProduct32, %__product35
  %29 = insertelement <4 x float> %28, float %__dotProduct36, i32 0
  %__column37 = extractvalue [4 x <4 x float>] %__matrix20, 0
  %__element38 = extractelement <4 x float> %__column37, i32 1
  %__product39 = fmul float %__element38, %__component
  %__column40 = extractvalue [4 x <4 x float>] %__matrix20, 1
  %__element41 = extractelement <4 x float> %__column40, i32 1
  %__product42 = fmul float %__element41, %__component22
  %__dotProduct43 = fadd float %__product39, %__product42
  %__column44 = extractvalue [4 x <4 x float>] %__matrix20, 2
  %__element45 = extractelement <4 x float> %__column44, i32 1
  %__product46 = fmul float %__element45, %__component23
  %__dotProduct47 = fadd float %__dotProduct43, %__product46
  %__column48 = extractvalue [4 x <4 x float>] %__matrix20, 3
  %__element49 = extractelement <4 x float> %__column48, i32 1
  %__product50 = fmul float %__element49, %__component24
  %__dotProduct51 = fadd float %__dotProduct47, %__product50
  %30 = insertelement <4 x float> %29, float %__dotProduct51, i32 1
  %__column52 = extractvalue [4 x <4 x float>] %__matrix20, 0
  %__element53 = extractelement <4 x float> %__column52, i32 2
  %__product54 = fmul float %__element53, %__component
  %__column55 = extractvalue [4 x <4 x float>] %__matrix20, 1
  %__element56 = extractelement <4 x float> %__column55, i32 2
  %__product57 = fmul float %__element56, %__component22
  %__dotProduct58 = fadd float %__product54, %__product57
  %__column59 = extractvalue [4 x <4 x float>] %__matrix20, 2
  %__element60 = extractelement <4 x float> %__column59, i32 2
  %__product61 = fmul float %__element60, %__component23
  %__dotProduct62 = fadd float %__dotProduct58, %__product61
  %__column63 = extractvalue [4 x <4 x float>] %__matrix20, 3
  %__element64 = extractelement <4 x float> %__column63, i32 2
  %__product65 = fmul float %__element64, %__component24
  %__dotProduct66 = fadd float %__dotProduct62, %__product65
  %31 = insertelement <4 x float> %30, float %__dotProduct66, i32 2
  %__column67 = extractvalue [4 x <4 x float>] %__matrix20, 0
  %__element68 = extractelement <4 x float> %__column67, i32 3
  %__product69 = fmul float %__element68, %__component
  %__column70 = extractvalue [4 x <4 x float>] %__matrix20, 1
  %__element71 = extractelement <4 x float> %__column70, i32 3
  %__product72 = fmul float %__element71, %__component22
  %__dotProduct73 = fadd float %__product69, %__product72
  %__column74 = extractvalue [4 x <4 x float>] %__matrix20, 2
  %__element75 = extractelement <4 x float> %__column74, i32 3
  %__product76 = fmul float %__element75, %__component23
  %__dotProduct77 = fadd float %__dotProduct73, %__product76
  %__column78 = extractvalue [4 x <4 x float>] %__matrix20, 3
  %__element79 = extractelement <4 x float> %__column78, i32 3
  %__product80 = fmul float %__element79, %__component24
  %__dotProduct81 = fadd float %__dotProduct77, %__product80
  %32 = insertelement <4 x float> %31, float %__dotProduct81, i32 3
  %33 = fadd <4 x float> %26, %32
  %v82 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %__matrix83 = load [4 x <4 x float>] addrspace(2)* @m
  %__matrix84 = load [4 x <4 x float>] addrspace(2)* @n
  %34 = alloca [4 x <4 x float>]
  %35 = load [4 x <4 x float>]* %34
  %__leftColumn = extractvalue [4 x <4 x float>] %__matrix83, 0
  %__rightColumn = extractvalue [4 x <4 x float>] %__matrix84, 0
  %__column85 = fsub <4 x float> %__leftColumn, %__rightColumn
  %36 = insertvalue [4 x <4 x float>] %35, <4 x float> %__column85, 0
  %__leftColumn86 = extractvalue [4 x <4 x float>] %__matrix83, 1
  %__rightColumn87 = extractvalue [4 x <4 x float>] %__matrix84, 1
  %__column88 = fsub <4 x float> %__leftColumn86, %__rightColumn87
  %37 = insertvalue [4 x <4 x float>] %36, <4 x float> %__column88, 1
  %__leftColumn89 = extractvalue [4 x <4 x float>] %__matrix83, 2
  %__rightColumn90 = extractvalue [4 x <4 x float>] %__matrix84, 2
  %__column91 = fsub <4 x float> %__leftColumn89, %__rightColumn90
  %38 = insertvalue [4 x <4 x float>] %37, <4 x float> %__column91, 2
  %__leftColumn92 = extractvalue [4 x <4 x float>] %__matrix83, 3
  %__rightColumn93 = extractvalue [4 x <4 x float>] %__matrix84, 3
  %__column94 = fsub <4 x float> %__leftColumn92, %__rightColumn93
  %39 = insertvalue [4 x <4 x float>] %38, <4 x float> %__column94, 3
  %40 = alloca <4 x float>
  %41 = load <4 x float>* %40
  %__column95 = extractvalue [4 x <4 x float>] %39, 0
  %__dot96 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v82, <4 x float> %__column95)
  %42 = insertelement <4 x float> %41, float %__dot96, i32 0
  %__column97 = extractvalue [4 x <4 x float>] %39, 1
  %__dot98 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v82, <4 x float> %__column97)
  %43 = insertelement <4 x float> %42, float %__dot98, i32 1
  %__column99 = extractvalue [4 x <4 x float>] %39, 2
  %__dot100 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v82, <4 x float> %__column99)
  %44 = insertelement <4 x float> %43, float %__dot100, i32 2
  %__column101 = extractvalue [4 x <4 x float>] %39, 3
  %__dot102 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v82, <4 x float> %__column101)
  %45 = insertelement <4 x float> %44, float %__dot102, i32 3
  %gl_FragColor103 = fadd <4 x float> %33, %45
  store <4 x float> %gl_FragColor103, <4 x float>* @gl_FragColor
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %v104 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %46 = extractelement <4 x float> %v104, i32 0
  %u = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %47 = extractelement <4 x float> %u, i32 0
  %48 = fmul float %46, %47
  %__matrix105 = load [4 x <4 x float>]* %mat_ctor
  %49 = extractvalue [4 x <4 x float>] %__matrix105, 0
  %50 = insertelement <4 x float> %49, float %48, i32 0
  %mat_ctor106 = insertvalue [4 x <4 x float>] %__matrix105, <4 x float> %50, 0
  store [4 x <4 x float>] %mat_ctor106, [4 x <4 x float>]* %mat_ctor
  %v107 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %51 = extractelement <4 x float> %v107, i32 0
  %u108 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %52 = extractelement <4 x float> %u108, i32 1
  %53 = fmul float %51, %52
  %__matrix109 = load [4 x <4 x float>]* %mat_ctor
  %54 = extractvalue [4 x <4 x float>] %__matrix109, 0
  %55 = insertelement <4 x float> %54, float %53, i32 1
  %mat_ctor110 = insertvalue [4 x <4 x float>] %__matrix109, <4 x float> %55, 0
  store [4 x <4 x float>] %mat_ctor110, [4 x <4 x float>]* %mat_ctor
  %v111 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %56 = extractelement <4 x float> %v111, i32 0
  %u112 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %57 = extractelement <4 x float> %u112, i32 2
  %58 = fmul float %56, %57
  %__matrix113 = load [4 x <4 x float>]* %mat_ctor
  %59 = extractvalue [4 x <4 x float>] %__matrix113, 0
  %60 = insertelement <4 x float> %59, float %58, i32 2
  %mat_ctor114 = insertvalue [4 x <4 x float>] %__matrix113, <4 x float> %60, 0
  store [4 x <4 x float>] %mat_ctor114, [4 x <4 x float>]* %mat_ctor
  %v115 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %61 = extractelement <4 x float> %v115, i32 0
  %u116 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %62 = extractelement <4 x float> %u116, i32 3
  %63 = fmul float %61, %62
  %__matrix117 = load [4 x <4 x float>]* %mat_ctor
  %64 = extractvalue [4 x <4 x float>] %__matrix117, 0
  %65 = insertelement <4 x float> %64, float %63, i32 3
  %mat_ctor118 = insertvalue [4 x <4 x float>] %__matrix117, <4 x float> %65, 0
  store [4 x <4 x float>] %mat_ctor118, [4 x <4 x float>]* %mat_ctor
  %v119 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %66 = extractelement <4 x float> %v119, i32 1
  %u120 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %67 = extractelement <4 x float> %u120, i32 0
  %68 = fmul float %66, %67
  %__matrix121 = load [4 x <4 x float>]* %mat_ctor
  %69 = extractvalue [4 x <4 x float>] %__matrix121, 1
  %70 = insertelement <4 x float> %69, float %68, i32 0
  %mat_ctor122 = insertvalue [4 x <4 x float>] %__matrix121, <4 x float> %70, 1
  store [4 x <4 x float>] %mat_ctor122, [4 x <4 x float>]* %mat_ctor
  %v123 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %71 = extractelement <4 x float> %v123, i32 1
  %u124 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %72 = extractelement <4 x float> %u124, i32 1
  %73 = fmul float %71, %72
  %__matrix125 = load [4 x <4 x float>]* %mat_ctor
  %74 = extractvalue [4 x <4 x float>] %__matrix125, 1
  %75 = insertelement <4 x float> %74, float %73, i32 1
  %mat_ctor126 = insertvalue [4 x <4 x float>] %__matrix125, <4 x float> %75, 1
  store [4 x <4 x float>] %mat_ctor126, [4 x <4 x float>]* %mat_ctor
  %v127 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %76 = extractelement <4 x float> %v127, i32 1
  %u128 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %77 = extractelement <4 x float> %u128, i32 2
  %78 = fmul float %76, %77
  %__matrix129 = load [4 x <4 x float>]* %mat_ctor
  %79 = extractvalue [4 x <4 x float>] %__matrix129, 1
  %80 = insertelement <4 x float> %79, float %78, i32 2
  %mat_ctor130 = insertvalue [4 x <4 x float>] %__matrix129, <4 x float> %80, 1
  store [4 x <4 x float>] %mat_ctor130, [4 x <4 x float>]* %mat_ctor
  %v131 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %81 = extractelement <4 x float> %v131, i32 1
  %u132 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %82 = extractelement <4 x float> %u132, i32 3
  %83 = fmul float %81, %82
  %__matrix133 = load [4 x <4 x float>]* %mat_ctor
  %84 = extractvalue [4 x <4 x float>] %__matrix133, 1
  %85 = insertelement <4 x float> %84, float %83, i32 3
  %mat_ctor134 = insertvalue [4 x <4 x float>] %__matrix133, <4 x float> %85, 1
  store [4 x <4 x float>] %mat_ctor134, [4 x <4 x float>]* %mat_ctor
  %v135 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %86 = extractelement <4 x float> %v135, i32 2
  %u136 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %87 = extractelement <4 x float> %u136, i32 0
  %88 = fmul float %86, %87
  %__matrix137 = load [4 x <4 x float>]* %mat_ctor
  %89 = extractvalue [4 x <4 x float>] %__matrix137, 2
  %90 = insertelement <4 x float> %89, float %88, i32 0
  %mat_ctor138 = insertvalue [4 x <4 x float>] %__matrix137, <4 x float> %90, 2
  store [4 x <4 x float>] %mat_ctor138, [4 x <4 x float>]* %mat_ctor
  %v139 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %91 = extractelement <4 x float> %v139, i32 2
  %u140 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %92 = extractelement <4 x float> %u140, i32 1
  %93 = fmul float %91, %92
  %__matrix141 = load [4 x <4 x float>]* %mat_ctor
  %94 = extractvalue [4 x <4 x float>] %__matrix141, 2
  %95 = insertelement <4 x float> %94, float %93, i32 1
  %mat_ctor142 = insertvalue [4 x <4 x float>] %__matrix141, <4 x float> %95, 2
  store [4 x <4 x float>] %mat_ctor142, [4 x <4 x float>]* %mat_ctor
  %v143 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %96 = extractelement <4 x float> %v143, i32 2
  %u144 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %97 = extractelement <4 x float> %u144, i32 2
  %98 = fmul float %96, %97
  %__matrix145 = load [4 x <4 x float>]* %mat_ctor
  %99 = extractvalue [4 x <4 x float>] %__matrix145, 2
  %100 = insertelement <4 x float> %99, float %98, i32 2
  %mat_ctor146 = insertvalue [4 x <4 x float>] %__matrix145, <4 x float> %100, 2
  store [4 x <4 x float>] %mat_ctor146, [4 x <4 x float>]* %mat_ctor
  %v147 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %101 = extractelement <4 x float> %v147, i32 2
  %u148 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %102 = extractelement <4 x float> %u148, i32 3
  %103 = fmul float %101, %102
  %__matrix149 = load [4 x <4 x float>]* %mat_ctor
  %104 = extractvalue [4 x <4 x float>] %__matrix149, 2
  %105 = insertelement <4 x float> %104, float %103, i32 3
  %mat_ctor150 = insertvalue [4 x <4 x float>] %__matrix149, <4 x float> %105, 2
  store [4 x <4 x float>] %mat_ctor150, [4 x <4 x float>]* %mat_ctor
  %v151 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %106 = extractelement <4 x float> %v151, i32 3
  %u152 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %107 = extractelement <4 x float> %u152, i32 0
  %108 = fmul float %106, %107
  %__matrix153 = load [4 x <4 x float>]* %mat_ctor
  %109 = extractvalue [4 x <4 x float>] %__matrix153, 3
  %110 = insertelement <4 x float> %109, float %108, i32 0
  %mat_ctor154 = insertvalue [4 x <4 x float>] %__matrix153, <4 x float> %110, 3
  store [4 x <4 x float>] %mat_ctor154, [4 x <4 x float>]* %mat_ctor
  %v155 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %111 = extractelement <4 x float> %v155, i32 3
  %u156 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %112 = extractelement <4 x float> %u156, i32 1
  %113 = fmul float %111, %112
  %__matrix157 = load [4 x <4 x float>]* %mat_ctor
  %114 = extractvalue [4 x <4 x float>] %__matrix157, 3
  %115 = insertelement <4 x float> %114, float %113, i32 1
  %mat_ctor158 = insertvalue [4 x <4 x float>] %__matrix157, <4 x float> %115, 3
  store [4 x <4 x float>] %mat_ctor158, [4 x <4 x float>]* %mat_ctor
  %v159 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %116 = extractelement <4 x float> %v159, i32 3
  %u160 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %117 = extractelement <4 x float> %u160, i32 2
  %118 = fmul float %116, %117
  %__matrix161 = load [4 x <4 x float>]* %mat_ctor
  %119 = extractvalue [4 x <4 x float>] %__matrix161, 3
  %120 = insertelement <4 x float> %119, float %118, i32 2
  %mat_ctor162 = insertvalue [4 x <4 x float>] %__matrix161, <4 x float> %120, 3
  store [4 x <4 x float>] %mat_ctor162, [4 x <4 x float>]* %mat_ctor
  %v163 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %121 = extractelement <4 x float> %v163, i32 3
  %u164 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %122 = extractelement <4 x float> %u164, i32 3
  %123 = fmul float %121, %122
  %__matrix165 = load [4 x <4 x float>]* %mat_ctor
  %124 = extractvalue [4 x <4 x float>] %__matrix165, 3
  %125 = insertelement <4 x float> %124, float %123, i32 3
  %mat_ctor166 = insertvalue [4 x <4 x float>] %__matrix165, <4 x float> %125, 3
  store [4 x <4 x float>] %mat_ctor166, [4 x <4 x float>]* %mat_ctor
  store <4 x float> zeroinitializer, <4 x float>* %mat_ctor_vec
  %v168 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %126 = extractelement <4 x float> %v168, i32 0
  %127 = load <4 x float>* %mat_ctor_vec
  %mat_ctor_vec169 = insertelement <4 x float> %127, float %126, i32 0
  store <4 x float> %mat_ctor_vec169, <4 x float>* %mat_ctor_vec
  %128 = load <4 x float>* %mat_ctor_vec
  %129 = extractelement <4 x float> %128, i32 0
  %130 = insertelement <4 x float> undef, float %129, i32 0
  %131 = extractelement <4 x float> %128, i32 1
  %132 = insertelement <4 x float> %130, float %131, i32 1
  %133 = extractelement <4 x float> %128, i32 1
  %134 = insertelement <4 x float> %132, float %133, i32 2
  %135 = extractelement <4 x float> %128, i32 1
  %136 = insertelement <4 x float> %134, float %135, i32 3
  %__matrix170 = load [4 x <4 x float>]* %mat_ctor167
  %137 = extractvalue [4 x <4 x float>] %__matrix170, 0
  %138 = extractelement <4 x float> %136, i32 0
  %139 = insertelement <4 x float> %137, float %138, i32 0
  %140 = extractelement <4 x float> %136, i32 1
  %141 = insertelement <4 x float> %139, float %140, i32 1
  %142 = extractelement <4 x float> %136, i32 2
  %143 = insertelement <4 x float> %141, float %142, i32 2
  %144 = extractelement <4 x float> %136, i32 3
  %145 = insertelement <4 x float> %143, float %144, i32 3
  %mat_ctor167171 = insertvalue [4 x <4 x float>] %__matrix170, <4 x float> %145, 0
  store [4 x <4 x float>] %mat_ctor167171, [4 x <4 x float>]* %mat_ctor167
  %146 = load <4 x float>* %mat_ctor_vec
  %147 = extractelement <4 x float> %146, i32 1
  %148 = insertelement <4 x float> undef, float %147, i32 0
  %149 = extractelement <4 x float> %146, i32 0
  %150 = insertelement <4 x float> %148, float %149, i32 1
  %151 = extractelement <4 x float> %146, i32 1
  %152 = insertelement <4 x float> %150, float %151, i32 2
  %153 = extractelement <4 x float> %146, i32 1
  %154 = insertelement <4 x float> %152, float %153, i32 3
  %__matrix172 = load [4 x <4 x float>]* %mat_ctor167
  %155 = extractvalue [4 x <4 x float>] %__matrix172, 1
  %156 = extractelement <4 x float> %154, i32 0
  %157 = insertelement <4 x float> %155, float %156, i32 0
  %158 = extractelement <4 x float> %154, i32 1
  %159 = insertelement <4 x float> %157, float %158, i32 1
  %160 = extractelement <4 x float> %154, i32 2
  %161 = insertelement <4 x float> %159, float %160, i32 2
  %162 = extractelement <4 x float> %154, i32 3
  %163 = insertelement <4 x float> %161, float %162, i32 3
  %mat_ctor167173 = insertvalue [4 x <4 x float>] %__matrix172, <4 x float> %163, 1
  store [4 x <4 x float>] %mat_ctor167173, [4 x <4 x float>]* %mat_ctor167
  %164 = load <4 x float>* %mat_ctor_vec
  %165 = extractelement <4 x float> %164, i32 1
  %166 = insertelement <4 x float> undef, float %165, i32 0
  %167 = extractelement <4 x float> %164, i32 1
  %168 = insertelement <4 x float> %166, float %167, i32 1
  %169 = extractelement <4 x float> %164, i32 0
  %170 = insertelement <4 x float> %168, float %169, i32 2
  %171 = extractelement <4 x float> %164, i32 1
  %172 = insertelement <4 x float> %170, float %171, i32 3
  %__matrix174 = load [4 x <4 x float>]* %mat_ctor167
  %173 = extractvalue [4 x <4 x float>] %__matrix174, 2
  %174 = extractelement <4 x float> %172, i32 0
  %175 = insertelement <4 x float> %173, float %174, i32 0
  %176 = extractelement <4 x float> %172, i32 1
  %177 = insertelement <4 x float> %175, float %176, i32 1
  %178 = extractelement <4 x float> %172, i32 2
  %179 = insertelement <4 x float> %177, float %178, i32 2
  %180 = extractelement <4 x float> %172, i32 3
  %181 = insertelement <4 x float> %179, float %180, i32 3
  %mat_ctor167175 = insertvalue [4 x <4 x float>] %__matrix174, <4 x float> %181, 2
  store [4 x <4 x float>] %mat_ctor167175, [4 x <4 x float>]* %mat_ctor167
  %182 = load <4 x float>* %mat_ctor_vec
  %183 = extractelement <4 x float> %182, i32 1
  %184 = insertelement <4 x float> undef, float %183, i32 0
  %185 = extractelement <4 x float> %182, i32 1
  %186 = insertelement <4 x float> %184, float %185, i32 1
  %187 = extractelement <4 x float> %182, i32 1
  %188 = insertelement <4 x float> %186, float %187, i32 2
  %189 = extractelement <4 x float> %182, i32 0
  %190 = insertelement <4 x float> %188, float %189, i32 3
  %__matrix176 = load [4 x <4 x float>]* %mat_ctor167
  %191 = extractvalue [4 x <4 x float>] %__matrix176, 3
  %192 = extractelement <4 x float> %190, i32 0
  %193 = insertelement <4 x float> %191, float %192, i32 0
  %194 = extractelement <4 x float> %190, i32 1
  %195 = insertelement <4 x float> %193, float %194, i32 1
  %196 = extractelement <4 x float> %190, i32 2
  %197 = insertelement <4 x float> %195, float %196, i32 2
  %198 = extractelement <4 x float> %190, i32 3
  %199 = insertelement <4 x float> %197, float %198, i32 3
  %mat_ctor167177 = insertvalue [4 x <4 x float>] %__matrix176, <4 x float> %199, 3
  store [4 x <4 x float>] %mat_ctor167177, [4 x <4 x float>]* %mat_ctor167
  %u179 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %__matrix180 = load [4 x <4 x float>]* %mat_ctor178
  %200 = extractvalue [4 x <4 x float>] %__matrix180, 0
  %201 = extractelement <4 x float> %u179, i32 0
  %202 = insertelement <4 x float> %200, float %201, i32 0
  %203 = extractelement <4 x float> %u179, i32 1
  %204 = insertelement <4 x float> %202, float %203, i32 1
  %205 = extractelement <4 x float> %u179, i32 2
  %206 = insertelement <4 x float> %204, float %205, i32 2
  %207 = extractelement <4 x float> %u179, i32 3
  %208 = insertelement <4 x float> %206, float %207, i32 3
  %mat_ctor178181 = insertvalue [4 x <4 x float>] %__matrix180, <4 x float> %208, 0
  store [4 x <4 x float>] %mat_ctor178181, [4 x <4 x float>]* %mat_ctor178
  %u182 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %209 = extractelement <4 x float> %u182, i32 0
  %__matrix183 = load [4 x <4 x float>]* %mat_ctor178
  %210 = extractvalue [4 x <4 x float>] %__matrix183, 1
  %211 = insertelement <4 x float> %210, float %209, i32 0
  %mat_ctor178184 = insertvalue [4 x <4 x float>] %__matrix183, <4 x float> %211, 1
  store [4 x <4 x float>] %mat_ctor178184, [4 x <4 x float>]* %mat_ctor178
  %u185 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %212 = extractelement <4 x float> %u185, i32 0
  %213 = insertelement <3 x float> undef, float %212, i32 0
  %214 = extractelement <4 x float> %u185, i32 1
  %215 = insertelement <3 x float> %213, float %214, i32 1
  %216 = extractelement <4 x float> %u185, i32 2
  %217 = insertelement <3 x float> %215, float %216, i32 2
  %__matrix186 = load [4 x <4 x float>]* %mat_ctor178
  %218 = extractvalue [4 x <4 x float>] %__matrix186, 1
  %219 = extractelement <3 x float> %217, i32 0
  %220 = insertelement <4 x float> %218, float %219, i32 1
  %221 = extractelement <3 x float> %217, i32 1
  %222 = insertelement <4 x float> %220, float %221, i32 2
  %223 = extractelement <3 x float> %217, i32 2
  %224 = insertelement <4 x float> %222, float %223, i32 3
  %mat_ctor178187 = insertvalue [4 x <4 x float>] %__matrix186, <4 x float> %224, 1
  store [4 x <4 x float>] %mat_ctor178187, [4 x <4 x float>]* %mat_ctor178
  %u188 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %225 = extractelement <4 x float> %u188, i32 3
  %__matrix189 = load [4 x <4 x float>]* %mat_ctor178
  %226 = extractvalue [4 x <4 x float>] %__matrix189, 2
  %227 = insertelement <4 x float> %226, float %225, i32 0
  %mat_ctor178190 = insertvalue [4 x <4 x float>] %__matrix189, <4 x float> %227, 2
  store [4 x <4 x float>] %mat_ctor178190, [4 x <4 x float>]* %mat_ctor178
  %u191 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %228 = extractelement <4 x float> %u191, i32 0
  %__matrix192 = load [4 x <4 x float>]* %mat_ctor178
  %229 = extractvalue [4 x <4 x float>] %__matrix192, 2
  %230 = insertelement <4 x float> %229, float %228, i32 1
  %mat_ctor178193 = insertvalue [4 x <4 x float>] %__matrix192, <4 x float> %230, 2
  store [4 x <4 x float>] %mat_ctor178193, [4 x <4 x float>]* %mat_ctor178
  %u194 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %231 = extractelement <4 x float> %u194, i32 0
  %232 = insertelement <2 x float> undef, float %231, i32 0
  %233 = extractelement <4 x float> %u194, i32 1
  %234 = insertelement <2 x float> %232, float %233, i32 1
  %__matrix195 = load [4 x <4 x float>]* %mat_ctor178
  %235 = extractvalue [4 x <4 x float>] %__matrix195, 2
  %236 = extractelement <2 x float> %234, i32 0
  %237 = insertelement <4 x float> %235, float %236, i32 2
  %238 = extractelement <2 x float> %234, i32 1
  %239 = insertelement <4 x float> %237, float %238, i32 3
  %mat_ctor178196 = insertvalue [4 x <4 x float>] %__matrix195, <4 x float> %239, 2
  store [4 x <4 x float>] %mat_ctor178196, [4 x <4 x float>]* %mat_ctor178
  %u197 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %240 = extractelement <4 x float> %u197, i32 2
  %241 = insertelement <2 x float> undef, float %240, i32 0
  %242 = extractelement <4 x float> %u197, i32 3
  %243 = insertelement <2 x float> %241, float %242, i32 1
  %__matrix198 = load [4 x <4 x float>]* %mat_ctor178
  %244 = extractvalue [4 x <4 x float>] %__matrix198, 3
  %245 = extractelement <2 x float> %243, i32 0
  %246 = insertelement <4 x float> %244, float %245, i32 0
  %247 = extractelement <2 x float> %243, i32 1
  %248 = insertelement <4 x float> %246, float %247, i32 1
  %mat_ctor178199 = insertvalue [4 x <4 x float>] %__matrix198, <4 x float> %248, 3
  store [4 x <4 x float>] %mat_ctor178199, [4 x <4 x float>]* %mat_ctor178
  %u200 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %249 = extractelement <4 x float> %u200, i32 0
  %__matrix201 = load [4 x <4 x float>]* %mat_ctor178
  %250 = extractvalue [4 x <4 x float>] %__matrix201, 3
  %251 = insertelement <4 x float> %250, float %249, i32 2
  %mat_ctor178202 = insertvalue [4 x <4 x float>] %__matrix201, <4 x float> %251, 3
  store [4 x <4 x float>] %mat_ctor178202, [4 x <4 x float>]* %mat_ctor178
  %u203 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %252 = extractelement <4 x float> %u203, i32 0
  %__matrix204 = load [4 x <4 x float>]* %mat_ctor178
  %253 = extractvalue [4 x <4 x float>] %__matrix204, 3
  %254 = insertelement <4 x float> %253, float %252, i32 3
  %mat_ctor178205 = insertvalue [4 x <4 x float>] %__matrix204, <4 x float> %254, 3
  store [4 x <4 x float>] %mat_ctor178205, [4 x <4 x float>]* %mat_ctor178
  %__matrix207 = load [4 x <4 x float>]* %mat_ctor
  %__matrix208 = load [4 x <4 x float>]* %mat_ctor167
  %255 = alloca [4 x <4 x float>]
  %256 = load [4 x <4 x float>]* %255
  %__leftColumn209 = extractvalue [4 x <4 x float>] %__matrix207, 0
  %__rightColumn210 = extractvalue [4 x <4 x float>] %__matrix208, 0
  %__column211 = fadd <4 x float> %__leftColumn209, %__rightColumn210
  %257 = insertvalue [4 x <4 x float>] %256, <4 x float> %__column211, 0
  %__leftColumn212 = extractvalue [4 x <4 x float>] %__matrix207, 1
  %__rightColumn213 = extractvalue [4 x <4 x float>] %__matrix208, 1
  %__column214 = fadd <4 x float> %__leftColumn212, %__rightColumn213
  %258 = insertvalue [4 x <4 x float>] %257, <4 x float> %__column214, 1
  %__leftColumn215 = extractvalue [4 x <4 x float>] %__matrix207, 2
  %__rightColumn216 = extractvalue [4 x <4 x float>] %__matrix208, 2
  %__column217 = fadd <4 x float> %__leftColumn215, %__rightColumn216
  %259 = insertvalue [4 x <4 x float>] %258, <4 x float> %__column217, 2
  %__leftColumn218 = extractvalue [4 x <4 x float>] %__matrix207, 3
  %__rightColumn219 = extractvalue [4 x <4 x float>] %__matrix208, 3
  %__column220 = fadd <4 x float> %__leftColumn218, %__rightColumn219
  %260 = insertvalue [4 x <4 x float>] %259, <4 x float> %__column220, 3
  %__matrix221 = load [4 x <4 x float>]* %mat_ctor178
  %261 = alloca [4 x <4 x float>]
  %262 = load [4 x <4 x float>]* %261
  %__leftColumn222 = extractvalue [4 x <4 x float>] %260, 0
  %__rightColumn223 = extractvalue [4 x <4 x float>] %__matrix221, 0
  %__column224 = fadd <4 x float> %__leftColumn222, %__rightColumn223
  %263 = insertvalue [4 x <4 x float>] %262, <4 x float> %__column224, 0
  %__leftColumn225 = extractvalue [4 x <4 x float>] %260, 1
  %__rightColumn226 = extractvalue [4 x <4 x float>] %__matrix221, 1
  %__column227 = fadd <4 x float> %__leftColumn225, %__rightColumn226
  %264 = insertvalue [4 x <4 x float>] %263, <4 x float> %__column227, 1
  %__leftColumn228 = extractvalue [4 x <4 x float>] %260, 2
  %__rightColumn229 = extractvalue [4 x <4 x float>] %__matrix221, 2
  %__column230 = fadd <4 x float> %__leftColumn228, %__rightColumn229
  %265 = insertvalue [4 x <4 x float>] %264, <4 x float> %__column230, 2
  %__leftColumn231 = extractvalue [4 x <4 x float>] %260, 3
  %__rightColumn232 = extractvalue [4 x <4 x float>] %__matrix221, 3
  %__column233 = fadd <4 x float> %__leftColumn231, %__rightColumn232
  %assignment_tmp206234 = insertvalue [4 x <4 x float>] %265, <4 x float> %__column233, 3
  store [4 x <4 x float>] %assignment_tmp206234, [4 x <4 x float>]* %assignment_tmp206
  %__matrix235 = load [4 x <4 x float>]* %assignment_tmp206
  %__matrix236 = load [4 x <4 x float>] addrspace(2)* @un34
  %__Matrix-Compare237 = alloca i1
  %__Matrix-Compare238 = load i1* %__Matrix-Compare237
  %__column239 = extractvalue [4 x <4 x float>] %__matrix235, 0
  %__column240 = extractvalue [4 x <4 x float>] %__matrix236, 0
  %266 = fcmp oeq <4 x float> %__column239, %__column240
  %267 = call i1 @llvm.gla.all.v4i1(<4 x i1> %266)
  %__column241 = extractvalue [4 x <4 x float>] %__matrix235, 1
  %__column242 = extractvalue [4 x <4 x float>] %__matrix236, 1
  %268 = fcmp oeq <4 x float> %__column241, %__column242
  %269 = call i1 @llvm.gla.all.v4i1(<4 x i1> %268)
  %270 = and i1 %267, %269
  %__column243 = extractvalue [4 x <4 x float>] %__matrix235, 2
  %__column244 = extractvalue [4 x <4 x float>] %__matrix236, 2
  %271 = fcmp oeq <4 x float> %__column243, %__column244
  %272 = call i1 @llvm.gla.all.v4i1(<4 x i1> %271)
  %273 = and i1 %270, %272
  %__column245 = extractvalue [4 x <4 x float>] %__matrix235, 3
  %__column246 = extractvalue [4 x <4 x float>] %__matrix236, 3
  %274 = fcmp oeq <4 x float> %__column245, %__column246
  %275 = call i1 @llvm.gla.all.v4i1(<4 x i1> %274)
  %276 = and i1 %273, %275
  br i1 %276, label %then247, label %else315

then247:                                          ; preds = %ifmerge
  %277 = load <4 x float>* @gl_FragColor
  %__matrix248 = load [4 x <4 x float>]* %assignment_tmp206
  %u249 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %278 = alloca <4 x float>
  %279 = load <4 x float>* %278
  %__component250 = extractelement <4 x float> %u249, i32 0
  %__component251 = extractelement <4 x float> %u249, i32 1
  %__component252 = extractelement <4 x float> %u249, i32 2
  %__component253 = extractelement <4 x float> %u249, i32 3
  %__column254 = extractvalue [4 x <4 x float>] %__matrix248, 0
  %__element255 = extractelement <4 x float> %__column254, i32 0
  %__product256 = fmul float %__element255, %__component250
  %__column257 = extractvalue [4 x <4 x float>] %__matrix248, 1
  %__element258 = extractelement <4 x float> %__column257, i32 0
  %__product259 = fmul float %__element258, %__component251
  %__dotProduct260 = fadd float %__product256, %__product259
  %__column261 = extractvalue [4 x <4 x float>] %__matrix248, 2
  %__element262 = extractelement <4 x float> %__column261, i32 0
  %__product263 = fmul float %__element262, %__component252
  %__dotProduct264 = fadd float %__dotProduct260, %__product263
  %__column265 = extractvalue [4 x <4 x float>] %__matrix248, 3
  %__element266 = extractelement <4 x float> %__column265, i32 0
  %__product267 = fmul float %__element266, %__component253
  %__dotProduct268 = fadd float %__dotProduct264, %__product267
  %280 = insertelement <4 x float> %279, float %__dotProduct268, i32 0
  %__column269 = extractvalue [4 x <4 x float>] %__matrix248, 0
  %__element270 = extractelement <4 x float> %__column269, i32 1
  %__product271 = fmul float %__element270, %__component250
  %__column272 = extractvalue [4 x <4 x float>] %__matrix248, 1
  %__element273 = extractelement <4 x float> %__column272, i32 1
  %__product274 = fmul float %__element273, %__component251
  %__dotProduct275 = fadd float %__product271, %__product274
  %__column276 = extractvalue [4 x <4 x float>] %__matrix248, 2
  %__element277 = extractelement <4 x float> %__column276, i32 1
  %__product278 = fmul float %__element277, %__component252
  %__dotProduct279 = fadd float %__dotProduct275, %__product278
  %__column280 = extractvalue [4 x <4 x float>] %__matrix248, 3
  %__element281 = extractelement <4 x float> %__column280, i32 1
  %__product282 = fmul float %__element281, %__component253
  %__dotProduct283 = fadd float %__dotProduct279, %__product282
  %281 = insertelement <4 x float> %280, float %__dotProduct283, i32 1
  %__column284 = extractvalue [4 x <4 x float>] %__matrix248, 0
  %__element285 = extractelement <4 x float> %__column284, i32 2
  %__product286 = fmul float %__element285, %__component250
  %__column287 = extractvalue [4 x <4 x float>] %__matrix248, 1
  %__element288 = extractelement <4 x float> %__column287, i32 2
  %__product289 = fmul float %__element288, %__component251
  %__dotProduct290 = fadd float %__product286, %__product289
  %__column291 = extractvalue [4 x <4 x float>] %__matrix248, 2
  %__element292 = extractelement <4 x float> %__column291, i32 2
  %__product293 = fmul float %__element292, %__component252
  %__dotProduct294 = fadd float %__dotProduct290, %__product293
  %__column295 = extractvalue [4 x <4 x float>] %__matrix248, 3
  %__element296 = extractelement <4 x float> %__column295, i32 2
  %__product297 = fmul float %__element296, %__component253
  %__dotProduct298 = fadd float %__dotProduct294, %__product297
  %282 = insertelement <4 x float> %281, float %__dotProduct298, i32 2
  %__column299 = extractvalue [4 x <4 x float>] %__matrix248, 0
  %__element300 = extractelement <4 x float> %__column299, i32 3
  %__product301 = fmul float %__element300, %__component250
  %__column302 = extractvalue [4 x <4 x float>] %__matrix248, 1
  %__element303 = extractelement <4 x float> %__column302, i32 3
  %__product304 = fmul float %__element303, %__component251
  %__dotProduct305 = fadd float %__product301, %__product304
  %__column306 = extractvalue [4 x <4 x float>] %__matrix248, 2
  %__element307 = extractelement <4 x float> %__column306, i32 3
  %__product308 = fmul float %__element307, %__component252
  %__dotProduct309 = fadd float %__dotProduct305, %__product308
  %__column310 = extractvalue [4 x <4 x float>] %__matrix248, 3
  %__element311 = extractelement <4 x float> %__column310, i32 3
  %__product312 = fmul float %__element311, %__component253
  %__dotProduct313 = fadd float %__dotProduct309, %__product312
  %283 = insertelement <4 x float> %282, float %__dotProduct313, i32 3
  %gl_FragColor314 = fadd <4 x float> %277, %283
  store <4 x float> %gl_FragColor314, <4 x float>* @gl_FragColor
  br label %ifmerge710

else315:                                          ; preds = %ifmerge
  %284 = load <4 x float>* @gl_FragColor
  %__matrix316 = load [4 x <4 x float>] addrspace(2)* @un34
  %__matrix317 = load [4 x <4 x float>] addrspace(2)* @um43
  %285 = alloca [4 x <4 x float>]
  %__resultMatrix = load [4 x <4 x float>]* %285
  %286 = alloca <4 x float>
  %__tempColumn = load <4 x float>* %286
  %__rightColumn318 = extractvalue [4 x <4 x float>] %__matrix317, 0
  %__leftColumn319 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp = extractelement <4 x float> %__leftColumn319, i32 0
  %__rightComp = extractelement <4 x float> %__rightColumn318, i32 0
  %__product320 = fmul float %__leftComp, %__rightComp
  %__leftColumn321 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp322 = extractelement <4 x float> %__leftColumn321, i32 0
  %__rightComp323 = extractelement <4 x float> %__rightColumn318, i32 1
  %__product324 = fmul float %__leftComp322, %__rightComp323
  %__dotProduct325 = fadd float %__product320, %__product324
  %__leftColumn326 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp327 = extractelement <4 x float> %__leftColumn326, i32 0
  %__rightComp328 = extractelement <4 x float> %__rightColumn318, i32 2
  %__product329 = fmul float %__leftComp327, %__rightComp328
  %__dotProduct330 = fadd float %__dotProduct325, %__product329
  %__leftColumn331 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp332 = extractelement <4 x float> %__leftColumn331, i32 0
  %__rightComp333 = extractelement <4 x float> %__rightColumn318, i32 3
  %__product334 = fmul float %__leftComp332, %__rightComp333
  %__dotProduct335 = fadd float %__dotProduct330, %__product334
  %__column336 = insertelement <4 x float> %__tempColumn, float %__dotProduct335, i32 0
  %__leftColumn337 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp338 = extractelement <4 x float> %__leftColumn337, i32 1
  %__rightComp339 = extractelement <4 x float> %__rightColumn318, i32 0
  %__product340 = fmul float %__leftComp338, %__rightComp339
  %__leftColumn341 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp342 = extractelement <4 x float> %__leftColumn341, i32 1
  %__rightComp343 = extractelement <4 x float> %__rightColumn318, i32 1
  %__product344 = fmul float %__leftComp342, %__rightComp343
  %__dotProduct345 = fadd float %__product340, %__product344
  %__leftColumn346 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp347 = extractelement <4 x float> %__leftColumn346, i32 1
  %__rightComp348 = extractelement <4 x float> %__rightColumn318, i32 2
  %__product349 = fmul float %__leftComp347, %__rightComp348
  %__dotProduct350 = fadd float %__dotProduct345, %__product349
  %__leftColumn351 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp352 = extractelement <4 x float> %__leftColumn351, i32 1
  %__rightComp353 = extractelement <4 x float> %__rightColumn318, i32 3
  %__product354 = fmul float %__leftComp352, %__rightComp353
  %__dotProduct355 = fadd float %__dotProduct350, %__product354
  %__column356 = insertelement <4 x float> %__column336, float %__dotProduct355, i32 1
  %__leftColumn357 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp358 = extractelement <4 x float> %__leftColumn357, i32 2
  %__rightComp359 = extractelement <4 x float> %__rightColumn318, i32 0
  %__product360 = fmul float %__leftComp358, %__rightComp359
  %__leftColumn361 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp362 = extractelement <4 x float> %__leftColumn361, i32 2
  %__rightComp363 = extractelement <4 x float> %__rightColumn318, i32 1
  %__product364 = fmul float %__leftComp362, %__rightComp363
  %__dotProduct365 = fadd float %__product360, %__product364
  %__leftColumn366 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp367 = extractelement <4 x float> %__leftColumn366, i32 2
  %__rightComp368 = extractelement <4 x float> %__rightColumn318, i32 2
  %__product369 = fmul float %__leftComp367, %__rightComp368
  %__dotProduct370 = fadd float %__dotProduct365, %__product369
  %__leftColumn371 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp372 = extractelement <4 x float> %__leftColumn371, i32 2
  %__rightComp373 = extractelement <4 x float> %__rightColumn318, i32 3
  %__product374 = fmul float %__leftComp372, %__rightComp373
  %__dotProduct375 = fadd float %__dotProduct370, %__product374
  %__column376 = insertelement <4 x float> %__column356, float %__dotProduct375, i32 2
  %__leftColumn377 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp378 = extractelement <4 x float> %__leftColumn377, i32 3
  %__rightComp379 = extractelement <4 x float> %__rightColumn318, i32 0
  %__product380 = fmul float %__leftComp378, %__rightComp379
  %__leftColumn381 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp382 = extractelement <4 x float> %__leftColumn381, i32 3
  %__rightComp383 = extractelement <4 x float> %__rightColumn318, i32 1
  %__product384 = fmul float %__leftComp382, %__rightComp383
  %__dotProduct385 = fadd float %__product380, %__product384
  %__leftColumn386 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp387 = extractelement <4 x float> %__leftColumn386, i32 3
  %__rightComp388 = extractelement <4 x float> %__rightColumn318, i32 2
  %__product389 = fmul float %__leftComp387, %__rightComp388
  %__dotProduct390 = fadd float %__dotProduct385, %__product389
  %__leftColumn391 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp392 = extractelement <4 x float> %__leftColumn391, i32 3
  %__rightComp393 = extractelement <4 x float> %__rightColumn318, i32 3
  %__product394 = fmul float %__leftComp392, %__rightComp393
  %__dotProduct395 = fadd float %__dotProduct390, %__product394
  %__column396 = insertelement <4 x float> %__column376, float %__dotProduct395, i32 3
  %__resultMatrix397 = insertvalue [4 x <4 x float>] %__resultMatrix, <4 x float> %__column396, 0
  %__rightColumn398 = extractvalue [4 x <4 x float>] %__matrix317, 1
  %__leftColumn399 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp400 = extractelement <4 x float> %__leftColumn399, i32 0
  %__rightComp401 = extractelement <4 x float> %__rightColumn398, i32 0
  %__product402 = fmul float %__leftComp400, %__rightComp401
  %__leftColumn403 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp404 = extractelement <4 x float> %__leftColumn403, i32 0
  %__rightComp405 = extractelement <4 x float> %__rightColumn398, i32 1
  %__product406 = fmul float %__leftComp404, %__rightComp405
  %__dotProduct407 = fadd float %__product402, %__product406
  %__leftColumn408 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp409 = extractelement <4 x float> %__leftColumn408, i32 0
  %__rightComp410 = extractelement <4 x float> %__rightColumn398, i32 2
  %__product411 = fmul float %__leftComp409, %__rightComp410
  %__dotProduct412 = fadd float %__dotProduct407, %__product411
  %__leftColumn413 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp414 = extractelement <4 x float> %__leftColumn413, i32 0
  %__rightComp415 = extractelement <4 x float> %__rightColumn398, i32 3
  %__product416 = fmul float %__leftComp414, %__rightComp415
  %__dotProduct417 = fadd float %__dotProduct412, %__product416
  %__column418 = insertelement <4 x float> %__column396, float %__dotProduct417, i32 0
  %__leftColumn419 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp420 = extractelement <4 x float> %__leftColumn419, i32 1
  %__rightComp421 = extractelement <4 x float> %__rightColumn398, i32 0
  %__product422 = fmul float %__leftComp420, %__rightComp421
  %__leftColumn423 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp424 = extractelement <4 x float> %__leftColumn423, i32 1
  %__rightComp425 = extractelement <4 x float> %__rightColumn398, i32 1
  %__product426 = fmul float %__leftComp424, %__rightComp425
  %__dotProduct427 = fadd float %__product422, %__product426
  %__leftColumn428 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp429 = extractelement <4 x float> %__leftColumn428, i32 1
  %__rightComp430 = extractelement <4 x float> %__rightColumn398, i32 2
  %__product431 = fmul float %__leftComp429, %__rightComp430
  %__dotProduct432 = fadd float %__dotProduct427, %__product431
  %__leftColumn433 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp434 = extractelement <4 x float> %__leftColumn433, i32 1
  %__rightComp435 = extractelement <4 x float> %__rightColumn398, i32 3
  %__product436 = fmul float %__leftComp434, %__rightComp435
  %__dotProduct437 = fadd float %__dotProduct432, %__product436
  %__column438 = insertelement <4 x float> %__column418, float %__dotProduct437, i32 1
  %__leftColumn439 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp440 = extractelement <4 x float> %__leftColumn439, i32 2
  %__rightComp441 = extractelement <4 x float> %__rightColumn398, i32 0
  %__product442 = fmul float %__leftComp440, %__rightComp441
  %__leftColumn443 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp444 = extractelement <4 x float> %__leftColumn443, i32 2
  %__rightComp445 = extractelement <4 x float> %__rightColumn398, i32 1
  %__product446 = fmul float %__leftComp444, %__rightComp445
  %__dotProduct447 = fadd float %__product442, %__product446
  %__leftColumn448 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp449 = extractelement <4 x float> %__leftColumn448, i32 2
  %__rightComp450 = extractelement <4 x float> %__rightColumn398, i32 2
  %__product451 = fmul float %__leftComp449, %__rightComp450
  %__dotProduct452 = fadd float %__dotProduct447, %__product451
  %__leftColumn453 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp454 = extractelement <4 x float> %__leftColumn453, i32 2
  %__rightComp455 = extractelement <4 x float> %__rightColumn398, i32 3
  %__product456 = fmul float %__leftComp454, %__rightComp455
  %__dotProduct457 = fadd float %__dotProduct452, %__product456
  %__column458 = insertelement <4 x float> %__column438, float %__dotProduct457, i32 2
  %__leftColumn459 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp460 = extractelement <4 x float> %__leftColumn459, i32 3
  %__rightComp461 = extractelement <4 x float> %__rightColumn398, i32 0
  %__product462 = fmul float %__leftComp460, %__rightComp461
  %__leftColumn463 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp464 = extractelement <4 x float> %__leftColumn463, i32 3
  %__rightComp465 = extractelement <4 x float> %__rightColumn398, i32 1
  %__product466 = fmul float %__leftComp464, %__rightComp465
  %__dotProduct467 = fadd float %__product462, %__product466
  %__leftColumn468 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp469 = extractelement <4 x float> %__leftColumn468, i32 3
  %__rightComp470 = extractelement <4 x float> %__rightColumn398, i32 2
  %__product471 = fmul float %__leftComp469, %__rightComp470
  %__dotProduct472 = fadd float %__dotProduct467, %__product471
  %__leftColumn473 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp474 = extractelement <4 x float> %__leftColumn473, i32 3
  %__rightComp475 = extractelement <4 x float> %__rightColumn398, i32 3
  %__product476 = fmul float %__leftComp474, %__rightComp475
  %__dotProduct477 = fadd float %__dotProduct472, %__product476
  %__column478 = insertelement <4 x float> %__column458, float %__dotProduct477, i32 3
  %__resultMatrix479 = insertvalue [4 x <4 x float>] %__resultMatrix397, <4 x float> %__column478, 1
  %__rightColumn480 = extractvalue [4 x <4 x float>] %__matrix317, 2
  %__leftColumn481 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp482 = extractelement <4 x float> %__leftColumn481, i32 0
  %__rightComp483 = extractelement <4 x float> %__rightColumn480, i32 0
  %__product484 = fmul float %__leftComp482, %__rightComp483
  %__leftColumn485 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp486 = extractelement <4 x float> %__leftColumn485, i32 0
  %__rightComp487 = extractelement <4 x float> %__rightColumn480, i32 1
  %__product488 = fmul float %__leftComp486, %__rightComp487
  %__dotProduct489 = fadd float %__product484, %__product488
  %__leftColumn490 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp491 = extractelement <4 x float> %__leftColumn490, i32 0
  %__rightComp492 = extractelement <4 x float> %__rightColumn480, i32 2
  %__product493 = fmul float %__leftComp491, %__rightComp492
  %__dotProduct494 = fadd float %__dotProduct489, %__product493
  %__leftColumn495 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp496 = extractelement <4 x float> %__leftColumn495, i32 0
  %__rightComp497 = extractelement <4 x float> %__rightColumn480, i32 3
  %__product498 = fmul float %__leftComp496, %__rightComp497
  %__dotProduct499 = fadd float %__dotProduct494, %__product498
  %__column500 = insertelement <4 x float> %__column478, float %__dotProduct499, i32 0
  %__leftColumn501 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp502 = extractelement <4 x float> %__leftColumn501, i32 1
  %__rightComp503 = extractelement <4 x float> %__rightColumn480, i32 0
  %__product504 = fmul float %__leftComp502, %__rightComp503
  %__leftColumn505 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp506 = extractelement <4 x float> %__leftColumn505, i32 1
  %__rightComp507 = extractelement <4 x float> %__rightColumn480, i32 1
  %__product508 = fmul float %__leftComp506, %__rightComp507
  %__dotProduct509 = fadd float %__product504, %__product508
  %__leftColumn510 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp511 = extractelement <4 x float> %__leftColumn510, i32 1
  %__rightComp512 = extractelement <4 x float> %__rightColumn480, i32 2
  %__product513 = fmul float %__leftComp511, %__rightComp512
  %__dotProduct514 = fadd float %__dotProduct509, %__product513
  %__leftColumn515 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp516 = extractelement <4 x float> %__leftColumn515, i32 1
  %__rightComp517 = extractelement <4 x float> %__rightColumn480, i32 3
  %__product518 = fmul float %__leftComp516, %__rightComp517
  %__dotProduct519 = fadd float %__dotProduct514, %__product518
  %__column520 = insertelement <4 x float> %__column500, float %__dotProduct519, i32 1
  %__leftColumn521 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp522 = extractelement <4 x float> %__leftColumn521, i32 2
  %__rightComp523 = extractelement <4 x float> %__rightColumn480, i32 0
  %__product524 = fmul float %__leftComp522, %__rightComp523
  %__leftColumn525 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp526 = extractelement <4 x float> %__leftColumn525, i32 2
  %__rightComp527 = extractelement <4 x float> %__rightColumn480, i32 1
  %__product528 = fmul float %__leftComp526, %__rightComp527
  %__dotProduct529 = fadd float %__product524, %__product528
  %__leftColumn530 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp531 = extractelement <4 x float> %__leftColumn530, i32 2
  %__rightComp532 = extractelement <4 x float> %__rightColumn480, i32 2
  %__product533 = fmul float %__leftComp531, %__rightComp532
  %__dotProduct534 = fadd float %__dotProduct529, %__product533
  %__leftColumn535 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp536 = extractelement <4 x float> %__leftColumn535, i32 2
  %__rightComp537 = extractelement <4 x float> %__rightColumn480, i32 3
  %__product538 = fmul float %__leftComp536, %__rightComp537
  %__dotProduct539 = fadd float %__dotProduct534, %__product538
  %__column540 = insertelement <4 x float> %__column520, float %__dotProduct539, i32 2
  %__leftColumn541 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp542 = extractelement <4 x float> %__leftColumn541, i32 3
  %__rightComp543 = extractelement <4 x float> %__rightColumn480, i32 0
  %__product544 = fmul float %__leftComp542, %__rightComp543
  %__leftColumn545 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp546 = extractelement <4 x float> %__leftColumn545, i32 3
  %__rightComp547 = extractelement <4 x float> %__rightColumn480, i32 1
  %__product548 = fmul float %__leftComp546, %__rightComp547
  %__dotProduct549 = fadd float %__product544, %__product548
  %__leftColumn550 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp551 = extractelement <4 x float> %__leftColumn550, i32 3
  %__rightComp552 = extractelement <4 x float> %__rightColumn480, i32 2
  %__product553 = fmul float %__leftComp551, %__rightComp552
  %__dotProduct554 = fadd float %__dotProduct549, %__product553
  %__leftColumn555 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp556 = extractelement <4 x float> %__leftColumn555, i32 3
  %__rightComp557 = extractelement <4 x float> %__rightColumn480, i32 3
  %__product558 = fmul float %__leftComp556, %__rightComp557
  %__dotProduct559 = fadd float %__dotProduct554, %__product558
  %__column560 = insertelement <4 x float> %__column540, float %__dotProduct559, i32 3
  %__resultMatrix561 = insertvalue [4 x <4 x float>] %__resultMatrix479, <4 x float> %__column560, 2
  %__rightColumn562 = extractvalue [4 x <4 x float>] %__matrix317, 3
  %__leftColumn563 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp564 = extractelement <4 x float> %__leftColumn563, i32 0
  %__rightComp565 = extractelement <4 x float> %__rightColumn562, i32 0
  %__product566 = fmul float %__leftComp564, %__rightComp565
  %__leftColumn567 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp568 = extractelement <4 x float> %__leftColumn567, i32 0
  %__rightComp569 = extractelement <4 x float> %__rightColumn562, i32 1
  %__product570 = fmul float %__leftComp568, %__rightComp569
  %__dotProduct571 = fadd float %__product566, %__product570
  %__leftColumn572 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp573 = extractelement <4 x float> %__leftColumn572, i32 0
  %__rightComp574 = extractelement <4 x float> %__rightColumn562, i32 2
  %__product575 = fmul float %__leftComp573, %__rightComp574
  %__dotProduct576 = fadd float %__dotProduct571, %__product575
  %__leftColumn577 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp578 = extractelement <4 x float> %__leftColumn577, i32 0
  %__rightComp579 = extractelement <4 x float> %__rightColumn562, i32 3
  %__product580 = fmul float %__leftComp578, %__rightComp579
  %__dotProduct581 = fadd float %__dotProduct576, %__product580
  %__column582 = insertelement <4 x float> %__column560, float %__dotProduct581, i32 0
  %__leftColumn583 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp584 = extractelement <4 x float> %__leftColumn583, i32 1
  %__rightComp585 = extractelement <4 x float> %__rightColumn562, i32 0
  %__product586 = fmul float %__leftComp584, %__rightComp585
  %__leftColumn587 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp588 = extractelement <4 x float> %__leftColumn587, i32 1
  %__rightComp589 = extractelement <4 x float> %__rightColumn562, i32 1
  %__product590 = fmul float %__leftComp588, %__rightComp589
  %__dotProduct591 = fadd float %__product586, %__product590
  %__leftColumn592 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp593 = extractelement <4 x float> %__leftColumn592, i32 1
  %__rightComp594 = extractelement <4 x float> %__rightColumn562, i32 2
  %__product595 = fmul float %__leftComp593, %__rightComp594
  %__dotProduct596 = fadd float %__dotProduct591, %__product595
  %__leftColumn597 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp598 = extractelement <4 x float> %__leftColumn597, i32 1
  %__rightComp599 = extractelement <4 x float> %__rightColumn562, i32 3
  %__product600 = fmul float %__leftComp598, %__rightComp599
  %__dotProduct601 = fadd float %__dotProduct596, %__product600
  %__column602 = insertelement <4 x float> %__column582, float %__dotProduct601, i32 1
  %__leftColumn603 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp604 = extractelement <4 x float> %__leftColumn603, i32 2
  %__rightComp605 = extractelement <4 x float> %__rightColumn562, i32 0
  %__product606 = fmul float %__leftComp604, %__rightComp605
  %__leftColumn607 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp608 = extractelement <4 x float> %__leftColumn607, i32 2
  %__rightComp609 = extractelement <4 x float> %__rightColumn562, i32 1
  %__product610 = fmul float %__leftComp608, %__rightComp609
  %__dotProduct611 = fadd float %__product606, %__product610
  %__leftColumn612 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp613 = extractelement <4 x float> %__leftColumn612, i32 2
  %__rightComp614 = extractelement <4 x float> %__rightColumn562, i32 2
  %__product615 = fmul float %__leftComp613, %__rightComp614
  %__dotProduct616 = fadd float %__dotProduct611, %__product615
  %__leftColumn617 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp618 = extractelement <4 x float> %__leftColumn617, i32 2
  %__rightComp619 = extractelement <4 x float> %__rightColumn562, i32 3
  %__product620 = fmul float %__leftComp618, %__rightComp619
  %__dotProduct621 = fadd float %__dotProduct616, %__product620
  %__column622 = insertelement <4 x float> %__column602, float %__dotProduct621, i32 2
  %__leftColumn623 = extractvalue [4 x <4 x float>] %__matrix316, 0
  %__leftComp624 = extractelement <4 x float> %__leftColumn623, i32 3
  %__rightComp625 = extractelement <4 x float> %__rightColumn562, i32 0
  %__product626 = fmul float %__leftComp624, %__rightComp625
  %__leftColumn627 = extractvalue [4 x <4 x float>] %__matrix316, 1
  %__leftComp628 = extractelement <4 x float> %__leftColumn627, i32 3
  %__rightComp629 = extractelement <4 x float> %__rightColumn562, i32 1
  %__product630 = fmul float %__leftComp628, %__rightComp629
  %__dotProduct631 = fadd float %__product626, %__product630
  %__leftColumn632 = extractvalue [4 x <4 x float>] %__matrix316, 2
  %__leftComp633 = extractelement <4 x float> %__leftColumn632, i32 3
  %__rightComp634 = extractelement <4 x float> %__rightColumn562, i32 2
  %__product635 = fmul float %__leftComp633, %__rightComp634
  %__dotProduct636 = fadd float %__dotProduct631, %__product635
  %__leftColumn637 = extractvalue [4 x <4 x float>] %__matrix316, 3
  %__leftComp638 = extractelement <4 x float> %__leftColumn637, i32 3
  %__rightComp639 = extractelement <4 x float> %__rightColumn562, i32 3
  %__product640 = fmul float %__leftComp638, %__rightComp639
  %__dotProduct641 = fadd float %__dotProduct636, %__product640
  %__column642 = insertelement <4 x float> %__column622, float %__dotProduct641, i32 3
  %__resultMatrix643 = insertvalue [4 x <4 x float>] %__resultMatrix561, <4 x float> %__column642, 3
  %v644 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %287 = alloca <4 x float>
  %288 = load <4 x float>* %287
  %__component645 = extractelement <4 x float> %v644, i32 0
  %__component646 = extractelement <4 x float> %v644, i32 1
  %__component647 = extractelement <4 x float> %v644, i32 2
  %__component648 = extractelement <4 x float> %v644, i32 3
  %__column649 = extractvalue [4 x <4 x float>] %__resultMatrix643, 0
  %__element650 = extractelement <4 x float> %__column649, i32 0
  %__product651 = fmul float %__element650, %__component645
  %__column652 = extractvalue [4 x <4 x float>] %__resultMatrix643, 1
  %__element653 = extractelement <4 x float> %__column652, i32 0
  %__product654 = fmul float %__element653, %__component646
  %__dotProduct655 = fadd float %__product651, %__product654
  %__column656 = extractvalue [4 x <4 x float>] %__resultMatrix643, 2
  %__element657 = extractelement <4 x float> %__column656, i32 0
  %__product658 = fmul float %__element657, %__component647
  %__dotProduct659 = fadd float %__dotProduct655, %__product658
  %__column660 = extractvalue [4 x <4 x float>] %__resultMatrix643, 3
  %__element661 = extractelement <4 x float> %__column660, i32 0
  %__product662 = fmul float %__element661, %__component648
  %__dotProduct663 = fadd float %__dotProduct659, %__product662
  %289 = insertelement <4 x float> %288, float %__dotProduct663, i32 0
  %__column664 = extractvalue [4 x <4 x float>] %__resultMatrix643, 0
  %__element665 = extractelement <4 x float> %__column664, i32 1
  %__product666 = fmul float %__element665, %__component645
  %__column667 = extractvalue [4 x <4 x float>] %__resultMatrix643, 1
  %__element668 = extractelement <4 x float> %__column667, i32 1
  %__product669 = fmul float %__element668, %__component646
  %__dotProduct670 = fadd float %__product666, %__product669
  %__column671 = extractvalue [4 x <4 x float>] %__resultMatrix643, 2
  %__element672 = extractelement <4 x float> %__column671, i32 1
  %__product673 = fmul float %__element672, %__component647
  %__dotProduct674 = fadd float %__dotProduct670, %__product673
  %__column675 = extractvalue [4 x <4 x float>] %__resultMatrix643, 3
  %__element676 = extractelement <4 x float> %__column675, i32 1
  %__product677 = fmul float %__element676, %__component648
  %__dotProduct678 = fadd float %__dotProduct674, %__product677
  %290 = insertelement <4 x float> %289, float %__dotProduct678, i32 1
  %__column679 = extractvalue [4 x <4 x float>] %__resultMatrix643, 0
  %__element680 = extractelement <4 x float> %__column679, i32 2
  %__product681 = fmul float %__element680, %__component645
  %__column682 = extractvalue [4 x <4 x float>] %__resultMatrix643, 1
  %__element683 = extractelement <4 x float> %__column682, i32 2
  %__product684 = fmul float %__element683, %__component646
  %__dotProduct685 = fadd float %__product681, %__product684
  %__column686 = extractvalue [4 x <4 x float>] %__resultMatrix643, 2
  %__element687 = extractelement <4 x float> %__column686, i32 2
  %__product688 = fmul float %__element687, %__component647
  %__dotProduct689 = fadd float %__dotProduct685, %__product688
  %__column690 = extractvalue [4 x <4 x float>] %__resultMatrix643, 3
  %__element691 = extractelement <4 x float> %__column690, i32 2
  %__product692 = fmul float %__element691, %__component648
  %__dotProduct693 = fadd float %__dotProduct689, %__product692
  %291 = insertelement <4 x float> %290, float %__dotProduct693, i32 2
  %__column694 = extractvalue [4 x <4 x float>] %__resultMatrix643, 0
  %__element695 = extractelement <4 x float> %__column694, i32 3
  %__product696 = fmul float %__element695, %__component645
  %__column697 = extractvalue [4 x <4 x float>] %__resultMatrix643, 1
  %__element698 = extractelement <4 x float> %__column697, i32 3
  %__product699 = fmul float %__element698, %__component646
  %__dotProduct700 = fadd float %__product696, %__product699
  %__column701 = extractvalue [4 x <4 x float>] %__resultMatrix643, 2
  %__element702 = extractelement <4 x float> %__column701, i32 3
  %__product703 = fmul float %__element702, %__component647
  %__dotProduct704 = fadd float %__dotProduct700, %__product703
  %__column705 = extractvalue [4 x <4 x float>] %__resultMatrix643, 3
  %__element706 = extractelement <4 x float> %__column705, i32 3
  %__product707 = fmul float %__element706, %__component648
  %__dotProduct708 = fadd float %__dotProduct704, %__product707
  %292 = insertelement <4 x float> %291, float %__dotProduct708, i32 3
  %gl_FragColor709 = fadd <4 x float> %284, %292
  store <4 x float> %gl_FragColor709, <4 x float>* @gl_FragColor
  br label %ifmerge710

ifmerge710:                                       ; preds = %else315, %then247
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge710
  %293 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %293)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@un34 = external addrspace(2) constant [4 x <4 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 -1, i32 1)
  %__matrix = load [3 x <3 x float>] addrspace(2)* @colorTransform, align 16
  %__column = extractvalue [3 x <3 x float>] %__matrix, 0
  %__dot = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column)
  %__column2 = extractvalue [3 x <3 x float>] %__matrix, 1
  %__dot3 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column2)
  %__column4 = extractvalue [3 x <3 x float>] %__matrix, 2
  %__dot5 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column4)
  %0 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float undef, float undef, float undef, float 1.000000e+00>, i32 7, float %__dot, i32 0, float %__dot3, i32 0, float %__dot5, i32 0, float undef, i32 undef)
  %gla_constGEP = getelementptr [4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1
  %1 = load <4 x float> addrspace(2)* %gla_constGEP, align 16
  %assignment_tmp7 = fadd <4 x float> %1, %0
  %__matrix8 = load [4 x <4 x float>] addrspace(2)* @m, align 16
  %__matrix9 = load [4 x <4 x float>] addrspace(2)* @n, align 16
  %__column11 = extractvalue [4 x <4 x float>] %__matrix8, 0
  %__column12 = extractvalue [4 x <4 x float>] %__matrix9, 0
  %2 = fcmp one <4 x float> %__column11, %__column12
  %3 = call i1 @llvm.gla.any.v4i1(<4 x i1> %2)
  %__column13 = extractvalue [4 x <4 x float>] %__matrix8, 1
  %__column14 = extractvalue [4 x <4 x float>] %__matrix9, 1
  %4 = fcmp one <4 x float> %__column13, %__column14
  %5 = call i1 @llvm.gla.any.v4i1(<4 x i1> %4)
  %6 = or i1 %3, %5
  %__column15 = extractvalue [4 x <4 x float>] %__matrix8, 2
  %__column16 = extractvalue [4 x <4 x float>] %__matrix9, 2
  %7 = fcmp one <4 x float> %__column15, %__column16
  %8 = call i1 @llvm.gla.any.v4i1(<4 x i1> %7)
  %9 = or i1 %6, %8
  %__column17 = extractvalue [4 x <4 x float>] %__matrix8, 3
  %__column18 = extractvalue [4 x <4 x float>] %__matrix9, 3
  %10 = fcmp one <4 x float> %__column17, %__column18
  %11 = call i1 @llvm.gla.any.v4i1(<4 x i1> %10)
  %12 = or i1 %9, %11
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  br i1 %12, label %then, label %else

then:                                             ; preds = %entry
  %gl_FragColor19 = fadd <4 x float> %assignment_tmp7, %v
  %.pre = extractelement <4 x float> %v, i32 0
  %.pre712 = extractelement <4 x float> %v, i32 1
  %.pre714 = extractelement <4 x float> %v, i32 2
  %.pre716 = extractelement <4 x float> %v, i32 3
  br label %ifmerge

else:                                             ; preds = %entry
  %__component = extractelement <4 x float> %v, i32 0
  %__component22 = extractelement <4 x float> %v, i32 1
  %__component23 = extractelement <4 x float> %v, i32 2
  %__component24 = extractelement <4 x float> %v, i32 3
  %__element = extractelement <4 x float> %__column11, i32 0
  %__product = fmul float %__element, %__component
  %__element27 = extractelement <4 x float> %__column13, i32 0
  %__product28 = fmul float %__element27, %__component22
  %__dotProduct = fadd float %__product, %__product28
  %__element30 = extractelement <4 x float> %__column15, i32 0
  %__product31 = fmul float %__element30, %__component23
  %__dotProduct32 = fadd float %__dotProduct, %__product31
  %__element34 = extractelement <4 x float> %__column17, i32 0
  %__product35 = fmul float %__element34, %__component24
  %__dotProduct36 = fadd float %__dotProduct32, %__product35
  %__element38 = extractelement <4 x float> %__column11, i32 1
  %__product39 = fmul float %__element38, %__component
  %__element41 = extractelement <4 x float> %__column13, i32 1
  %__product42 = fmul float %__element41, %__component22
  %__dotProduct43 = fadd float %__product39, %__product42
  %__element45 = extractelement <4 x float> %__column15, i32 1
  %__product46 = fmul float %__element45, %__component23
  %__dotProduct47 = fadd float %__dotProduct43, %__product46
  %__element49 = extractelement <4 x float> %__column17, i32 1
  %__product50 = fmul float %__element49, %__component24
  %__dotProduct51 = fadd float %__dotProduct47, %__product50
  %__element53 = extractelement <4 x float> %__column11, i32 2
  %__product54 = fmul float %__element53, %__component
  %__element56 = extractelement <4 x float> %__column13, i32 2
  %__product57 = fmul float %__element56, %__component22
  %__dotProduct58 = fadd float %__product54, %__product57
  %__element60 = extractelement <4 x float> %__column15, i32 2
  %__product61 = fmul float %__element60, %__component23
  %__dotProduct62 = fadd float %__dotProduct58, %__product61
  %__element64 = extractelement <4 x float> %__column17, i32 2
  %__product65 = fmul float %__element64, %__component24
  %__dotProduct66 = fadd float %__dotProduct62, %__product65
  %__element68 = extractelement <4 x float> %__column11, i32 3
  %__product69 = fmul float %__element68, %__component
  %__element71 = extractelement <4 x float> %__column13, i32 3
  %__product72 = fmul float %__element71, %__component22
  %__dotProduct73 = fadd float %__product69, %__product72
  %__element75 = extractelement <4 x float> %__column15, i32 3
  %__product76 = fmul float %__element75, %__component23
  %__dotProduct77 = fadd float %__dotProduct73, %__product76
  %__element79 = extractelement <4 x float> %__column17, i32 3
  %__product80 = fmul float %__element79, %__component24
  %__dotProduct81 = fadd float %__dotProduct77, %__product80
  %13 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct36, i32 0, float %__dotProduct51, i32 0, float %__dotProduct66, i32 0, float %__dotProduct81, i32 0)
  %14 = fadd <4 x float> %assignment_tmp7, %13
  %__column85 = fsub <4 x float> %__column11, %__column12
  %__column88 = fsub <4 x float> %__column13, %__column14
  %__column91 = fsub <4 x float> %__column15, %__column16
  %__column94 = fsub <4 x float> %__column17, %__column18
  %__dot96 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %__column85)
  %__dot98 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %__column88)
  %__dot100 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %__column91)
  %__dot102 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %__column94)
  %15 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot96, i32 0, float %__dot98, i32 0, float %__dot100, i32 0, float %__dot102, i32 0)
  %gl_FragColor103 = fadd <4 x float> %14, %15
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %.pre-phi717 = phi float [ %__component24, %else ], [ %.pre716, %then ]
  %.pre-phi715 = phi float [ %__component23, %else ], [ %.pre714, %then ]
  %.pre-phi713 = phi float [ %__component22, %else ], [ %.pre712, %then ]
  %.pre-phi = phi float [ %__component, %else ], [ %.pre, %then ]
  %gl_FragColor711.0 = phi <4 x float> [ %gl_FragColor103, %else ], [ %gl_FragColor19, %then ]
  %u = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %16 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u, <4 x i32> <i32 2, i32 3, i32 0, i32 0>)
  %17 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u, <4 x i32> <i32 3, i32 0, i32 0, i32 1>)
  %18 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u, <4 x i32> <i32 0, i32 0, i32 1, i32 2>)
  %19 = extractelement <4 x float> %u, i32 0
  %20 = fmul float %.pre-phi, %19
  %21 = extractelement <4 x float> %u, i32 1
  %22 = fmul float %.pre-phi, %21
  %23 = extractelement <4 x float> %u, i32 2
  %24 = fmul float %.pre-phi, %23
  %25 = extractelement <4 x float> %u, i32 3
  %26 = fmul float %.pre-phi, %25
  %27 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %20, i32 0, float %22, i32 0, float %24, i32 0, float %26, i32 0)
  %28 = fmul float %.pre-phi713, %19
  %29 = fmul float %.pre-phi713, %21
  %30 = fmul float %.pre-phi713, %23
  %31 = fmul float %.pre-phi713, %25
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %28, i32 0, float %29, i32 0, float %30, i32 0, float %31, i32 0)
  %33 = fmul float %.pre-phi715, %19
  %34 = fmul float %.pre-phi715, %21
  %35 = fmul float %.pre-phi715, %23
  %36 = fmul float %.pre-phi715, %25
  %37 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %33, i32 0, float %34, i32 0, float %35, i32 0, float %36, i32 0)
  %38 = fmul float %.pre-phi717, %19
  %39 = fmul float %.pre-phi717, %21
  %40 = fmul float %.pre-phi717, %23
  %41 = fmul float %.pre-phi717, %25
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %38, i32 0, float %39, i32 0, float %40, i32 0, float %41, i32 0)
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float undef, float undef, float undef>, i32 14, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %45 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, i32 12, float undef, i32 undef, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0)
  %46 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float> undef, i32 15, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, <4 x float> %v, i32 0)
  %__column211 = fadd <4 x float> %27, %43
  %__column214 = fadd <4 x float> %32, %44
  %__column217 = fadd <4 x float> %37, %45
  %__column220 = fadd <4 x float> %42, %46
  %__column224 = fadd <4 x float> %__column211, %u
  %__column227 = fadd <4 x float> %__column214, %18
  %__column230 = fadd <4 x float> %__column217, %17
  %__column233 = fadd <4 x float> %__column220, %16
  %__matrix236 = load [4 x <4 x float>] addrspace(2)* @un34, align 16
  %__column240 = extractvalue [4 x <4 x float>] %__matrix236, 0
  %47 = fcmp oeq <4 x float> %__column224, %__column240
  %48 = call i1 @llvm.gla.all.v4i1(<4 x i1> %47)
  %__column242 = extractvalue [4 x <4 x float>] %__matrix236, 1
  %49 = fcmp oeq <4 x float> %__column227, %__column242
  %50 = call i1 @llvm.gla.all.v4i1(<4 x i1> %49)
  %51 = and i1 %48, %50
  %__column244 = extractvalue [4 x <4 x float>] %__matrix236, 2
  %52 = fcmp oeq <4 x float> %__column230, %__column244
  %53 = call i1 @llvm.gla.all.v4i1(<4 x i1> %52)
  %54 = and i1 %51, %53
  %__column246 = extractvalue [4 x <4 x float>] %__matrix236, 3
  %55 = fcmp oeq <4 x float> %__column233, %__column246
  %56 = call i1 @llvm.gla.all.v4i1(<4 x i1> %55)
  %57 = and i1 %54, %56
  br i1 %57, label %then247, label %else315

then247:                                          ; preds = %ifmerge
  %__element255 = extractelement <4 x float> %__column224, i32 0
  %__product256 = fmul float %__element255, %19
  %__element258 = extractelement <4 x float> %__column227, i32 0
  %__product259 = fmul float %__element258, %21
  %__dotProduct260 = fadd float %__product256, %__product259
  %__element262 = extractelement <4 x float> %__column230, i32 0
  %__product263 = fmul float %__element262, %23
  %__dotProduct264 = fadd float %__dotProduct260, %__product263
  %__element266 = extractelement <4 x float> %__column233, i32 0
  %__product267 = fmul float %__element266, %25
  %__dotProduct268 = fadd float %__dotProduct264, %__product267
  %__element270 = extractelement <4 x float> %__column224, i32 1
  %__product271 = fmul float %__element270, %19
  %__element273 = extractelement <4 x float> %__column227, i32 1
  %__product274 = fmul float %__element273, %21
  %__dotProduct275 = fadd float %__product271, %__product274
  %__element277 = extractelement <4 x float> %__column230, i32 1
  %__product278 = fmul float %__element277, %23
  %__dotProduct279 = fadd float %__dotProduct275, %__product278
  %__element281 = extractelement <4 x float> %__column233, i32 1
  %__product282 = fmul float %__element281, %25
  %__dotProduct283 = fadd float %__dotProduct279, %__product282
  %__element285 = extractelement <4 x float> %__column224, i32 2
  %__product286 = fmul float %__element285, %19
  %__element288 = extractelement <4 x float> %__column227, i32 2
  %__product289 = fmul float %__element288, %21
  %__dotProduct290 = fadd float %__product286, %__product289
  %__element292 = extractelement <4 x float> %__column230, i32 2
  %__product293 = fmul float %__element292, %23
  %__dotProduct294 = fadd float %__dotProduct290, %__product293
  %__element296 = extractelement <4 x float> %__column233, i32 2
  %__product297 = fmul float %__element296, %25
  %__dotProduct298 = fadd float %__dotProduct294, %__product297
  %__element300 = extractelement <4 x float> %__column224, i32 3
  %__product301 = fmul float %__element300, %19
  %__element303 = extractelement <4 x float> %__column227, i32 3
  %__product304 = fmul float %__element303, %21
  %__dotProduct305 = fadd float %__product301, %__product304
  %__element307 = extractelement <4 x float> %__column230, i32 3
  %__product308 = fmul float %__element307, %23
  %__dotProduct309 = fadd float %__dotProduct305, %__product308
  %__element311 = extractelement <4 x float> %__column233, i32 3
  %__product312 = fmul float %__element311, %25
  %__dotProduct313 = fadd float %__dotProduct309, %__product312
  %58 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct268, i32 0, float %__dotProduct283, i32 0, float %__dotProduct298, i32 0, float %__dotProduct313, i32 0)
  br label %ifmerge710

else315:                                          ; preds = %ifmerge
  %__matrix317 = load [4 x <4 x float>] addrspace(2)* @um43, align 16
  %__rightColumn318 = extractvalue [4 x <4 x float>] %__matrix317, 0
  %__leftComp = extractelement <4 x float> %__column240, i32 0
  %__rightComp = extractelement <4 x float> %__rightColumn318, i32 0
  %__product320 = fmul float %__leftComp, %__rightComp
  %__leftComp322 = extractelement <4 x float> %__column242, i32 0
  %__rightComp323 = extractelement <4 x float> %__rightColumn318, i32 1
  %__product324 = fmul float %__leftComp322, %__rightComp323
  %__dotProduct325 = fadd float %__product320, %__product324
  %__leftComp327 = extractelement <4 x float> %__column244, i32 0
  %__rightComp328 = extractelement <4 x float> %__rightColumn318, i32 2
  %__product329 = fmul float %__leftComp327, %__rightComp328
  %__dotProduct330 = fadd float %__dotProduct325, %__product329
  %__leftComp332 = extractelement <4 x float> %__column246, i32 0
  %__rightComp333 = extractelement <4 x float> %__rightColumn318, i32 3
  %__product334 = fmul float %__leftComp332, %__rightComp333
  %__dotProduct335 = fadd float %__dotProduct330, %__product334
  %__leftComp338 = extractelement <4 x float> %__column240, i32 1
  %__product340 = fmul float %__leftComp338, %__rightComp
  %__leftComp342 = extractelement <4 x float> %__column242, i32 1
  %__product344 = fmul float %__leftComp342, %__rightComp323
  %__dotProduct345 = fadd float %__product340, %__product344
  %__leftComp347 = extractelement <4 x float> %__column244, i32 1
  %__product349 = fmul float %__leftComp347, %__rightComp328
  %__dotProduct350 = fadd float %__dotProduct345, %__product349
  %__leftComp352 = extractelement <4 x float> %__column246, i32 1
  %__product354 = fmul float %__leftComp352, %__rightComp333
  %__dotProduct355 = fadd float %__dotProduct350, %__product354
  %__leftComp358 = extractelement <4 x float> %__column240, i32 2
  %__product360 = fmul float %__leftComp358, %__rightComp
  %__leftComp362 = extractelement <4 x float> %__column242, i32 2
  %__product364 = fmul float %__leftComp362, %__rightComp323
  %__dotProduct365 = fadd float %__product360, %__product364
  %__leftComp367 = extractelement <4 x float> %__column244, i32 2
  %__product369 = fmul float %__leftComp367, %__rightComp328
  %__dotProduct370 = fadd float %__dotProduct365, %__product369
  %__leftComp372 = extractelement <4 x float> %__column246, i32 2
  %__product374 = fmul float %__leftComp372, %__rightComp333
  %__dotProduct375 = fadd float %__dotProduct370, %__product374
  %__leftComp378 = extractelement <4 x float> %__column240, i32 3
  %__product380 = fmul float %__leftComp378, %__rightComp
  %__leftComp382 = extractelement <4 x float> %__column242, i32 3
  %__product384 = fmul float %__leftComp382, %__rightComp323
  %__dotProduct385 = fadd float %__product380, %__product384
  %__leftComp387 = extractelement <4 x float> %__column244, i32 3
  %__product389 = fmul float %__leftComp387, %__rightComp328
  %__dotProduct390 = fadd float %__dotProduct385, %__product389
  %__leftComp392 = extractelement <4 x float> %__column246, i32 3
  %__product394 = fmul float %__leftComp392, %__rightComp333
  %__dotProduct395 = fadd float %__dotProduct390, %__product394
  %__rightColumn398 = extractvalue [4 x <4 x float>] %__matrix317, 1
  %__rightComp401 = extractelement <4 x float> %__rightColumn398, i32 0
  %__product402 = fmul float %__leftComp, %__rightComp401
  %__rightComp405 = extractelement <4 x float> %__rightColumn398, i32 1
  %__product406 = fmul float %__leftComp322, %__rightComp405
  %__dotProduct407 = fadd float %__product402, %__product406
  %__rightComp410 = extractelement <4 x float> %__rightColumn398, i32 2
  %__product411 = fmul float %__leftComp327, %__rightComp410
  %__dotProduct412 = fadd float %__dotProduct407, %__product411
  %__rightComp415 = extractelement <4 x float> %__rightColumn398, i32 3
  %__product416 = fmul float %__leftComp332, %__rightComp415
  %__dotProduct417 = fadd float %__dotProduct412, %__product416
  %__product422 = fmul float %__leftComp338, %__rightComp401
  %__product426 = fmul float %__leftComp342, %__rightComp405
  %__dotProduct427 = fadd float %__product422, %__product426
  %__product431 = fmul float %__leftComp347, %__rightComp410
  %__dotProduct432 = fadd float %__dotProduct427, %__product431
  %__product436 = fmul float %__leftComp352, %__rightComp415
  %__dotProduct437 = fadd float %__dotProduct432, %__product436
  %__product442 = fmul float %__leftComp358, %__rightComp401
  %__product446 = fmul float %__leftComp362, %__rightComp405
  %__dotProduct447 = fadd float %__product442, %__product446
  %__product451 = fmul float %__leftComp367, %__rightComp410
  %__dotProduct452 = fadd float %__dotProduct447, %__product451
  %__product456 = fmul float %__leftComp372, %__rightComp415
  %__dotProduct457 = fadd float %__dotProduct452, %__product456
  %__product462 = fmul float %__leftComp378, %__rightComp401
  %__product466 = fmul float %__leftComp382, %__rightComp405
  %__dotProduct467 = fadd float %__product462, %__product466
  %__product471 = fmul float %__leftComp387, %__rightComp410
  %__dotProduct472 = fadd float %__dotProduct467, %__product471
  %__product476 = fmul float %__leftComp392, %__rightComp415
  %__dotProduct477 = fadd float %__dotProduct472, %__product476
  %__rightColumn480 = extractvalue [4 x <4 x float>] %__matrix317, 2
  %__rightComp483 = extractelement <4 x float> %__rightColumn480, i32 0
  %__product484 = fmul float %__leftComp, %__rightComp483
  %__rightComp487 = extractelement <4 x float> %__rightColumn480, i32 1
  %__product488 = fmul float %__leftComp322, %__rightComp487
  %__dotProduct489 = fadd float %__product484, %__product488
  %__rightComp492 = extractelement <4 x float> %__rightColumn480, i32 2
  %__product493 = fmul float %__leftComp327, %__rightComp492
  %__dotProduct494 = fadd float %__dotProduct489, %__product493
  %__rightComp497 = extractelement <4 x float> %__rightColumn480, i32 3
  %__product498 = fmul float %__leftComp332, %__rightComp497
  %__dotProduct499 = fadd float %__dotProduct494, %__product498
  %__product504 = fmul float %__leftComp338, %__rightComp483
  %__product508 = fmul float %__leftComp342, %__rightComp487
  %__dotProduct509 = fadd float %__product504, %__product508
  %__product513 = fmul float %__leftComp347, %__rightComp492
  %__dotProduct514 = fadd float %__dotProduct509, %__product513
  %__product518 = fmul float %__leftComp352, %__rightComp497
  %__dotProduct519 = fadd float %__dotProduct514, %__product518
  %__product524 = fmul float %__leftComp358, %__rightComp483
  %__product528 = fmul float %__leftComp362, %__rightComp487
  %__dotProduct529 = fadd float %__product524, %__product528
  %__product533 = fmul float %__leftComp367, %__rightComp492
  %__dotProduct534 = fadd float %__dotProduct529, %__product533
  %__product538 = fmul float %__leftComp372, %__rightComp497
  %__dotProduct539 = fadd float %__dotProduct534, %__product538
  %__product544 = fmul float %__leftComp378, %__rightComp483
  %__product548 = fmul float %__leftComp382, %__rightComp487
  %__dotProduct549 = fadd float %__product544, %__product548
  %__product553 = fmul float %__leftComp387, %__rightComp492
  %__dotProduct554 = fadd float %__dotProduct549, %__product553
  %__product558 = fmul float %__leftComp392, %__rightComp497
  %__dotProduct559 = fadd float %__dotProduct554, %__product558
  %__rightColumn562 = extractvalue [4 x <4 x float>] %__matrix317, 3
  %__rightComp565 = extractelement <4 x float> %__rightColumn562, i32 0
  %__product566 = fmul float %__leftComp, %__rightComp565
  %__rightComp569 = extractelement <4 x float> %__rightColumn562, i32 1
  %__product570 = fmul float %__leftComp322, %__rightComp569
  %__dotProduct571 = fadd float %__product566, %__product570
  %__rightComp574 = extractelement <4 x float> %__rightColumn562, i32 2
  %__product575 = fmul float %__leftComp327, %__rightComp574
  %__dotProduct576 = fadd float %__dotProduct571, %__product575
  %__rightComp579 = extractelement <4 x float> %__rightColumn562, i32 3
  %__product580 = fmul float %__leftComp332, %__rightComp579
  %__dotProduct581 = fadd float %__dotProduct576, %__product580
  %__product586 = fmul float %__leftComp338, %__rightComp565
  %__product590 = fmul float %__leftComp342, %__rightComp569
  %__dotProduct591 = fadd float %__product586, %__product590
  %__product595 = fmul float %__leftComp347, %__rightComp574
  %__dotProduct596 = fadd float %__dotProduct591, %__product595
  %__product600 = fmul float %__leftComp352, %__rightComp579
  %__dotProduct601 = fadd float %__dotProduct596, %__product600
  %__product606 = fmul float %__leftComp358, %__rightComp565
  %__product610 = fmul float %__leftComp362, %__rightComp569
  %__dotProduct611 = fadd float %__product606, %__product610
  %__product615 = fmul float %__leftComp367, %__rightComp574
  %__dotProduct616 = fadd float %__dotProduct611, %__product615
  %__product620 = fmul float %__leftComp372, %__rightComp579
  %__dotProduct621 = fadd float %__dotProduct616, %__product620
  %__product626 = fmul float %__leftComp378, %__rightComp565
  %__product630 = fmul float %__leftComp382, %__rightComp569
  %__dotProduct631 = fadd float %__product626, %__product630
  %__product635 = fmul float %__leftComp387, %__rightComp574
  %__dotProduct636 = fadd float %__dotProduct631, %__product635
  %__product640 = fmul float %__leftComp392, %__rightComp579
  %__dotProduct641 = fadd float %__dotProduct636, %__product640
  %__product651 = fmul float %__dotProduct335, %.pre-phi
  %__product654 = fmul float %__dotProduct417, %.pre-phi713
  %__dotProduct655 = fadd float %__product651, %__product654
  %__product658 = fmul float %__dotProduct499, %.pre-phi715
  %__dotProduct659 = fadd float %__dotProduct655, %__product658
  %__product662 = fmul float %__dotProduct581, %.pre-phi717
  %__dotProduct663 = fadd float %__dotProduct659, %__product662
  %__product666 = fmul float %__dotProduct355, %.pre-phi
  %__product669 = fmul float %__dotProduct437, %.pre-phi713
  %__dotProduct670 = fadd float %__product666, %__product669
  %__product673 = fmul float %__dotProduct519, %.pre-phi715
  %__dotProduct674 = fadd float %__dotProduct670, %__product673
  %__product677 = fmul float %__dotProduct601, %.pre-phi717
  %__dotProduct678 = fadd float %__dotProduct674, %__product677
  %__product681 = fmul float %__dotProduct375, %.pre-phi
  %__product684 = fmul float %__dotProduct457, %.pre-phi713
  %__dotProduct685 = fadd float %__product681, %__product684
  %__product688 = fmul float %__dotProduct539, %.pre-phi715
  %__dotProduct689 = fadd float %__dotProduct685, %__product688
  %__product692 = fmul float %__dotProduct621, %.pre-phi717
  %__dotProduct693 = fadd float %__dotProduct689, %__product692
  %__product696 = fmul float %__dotProduct395, %.pre-phi
  %__product699 = fmul float %__dotProduct477, %.pre-phi713
  %__dotProduct700 = fadd float %__product696, %__product699
  %__product703 = fmul float %__dotProduct559, %.pre-phi715
  %__dotProduct704 = fadd float %__dotProduct700, %__product703
  %__product707 = fmul float %__dotProduct641, %.pre-phi717
  %__dotProduct708 = fadd float %__dotProduct704, %__product707
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct663, i32 0, float %__dotProduct678, i32 0, float %__dotProduct693, i32 0, float %__dotProduct708, i32 0)
  br label %ifmerge710

ifmerge710:                                       ; preds = %else315, %then247
  %.pn = phi <4 x float> [ %58, %then247 ], [ %59, %else315 ]
  %gl_FragColor711.1 = fadd <4 x float> %gl_FragColor711.0, %.pn
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor711.1)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge710
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float>, i32, float, i32, float, i32, float, i32, <4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) nounwind readnone
compiling matrix.frag...
uniform mat3 colorTransform ; 
varying vec3 Color ; 
uniform mat4 m , n ; 
uniform mat4 um43 ; 
uniform mat4 un34 ; 
varying vec4 v ; 
varying vec4 u ; 
void  main (){
gl_FragColor = vec4 ( un34 [ 1 ] ) ; gl_FragColor += vec4 ( Color * colorTransform , 1.000000 ) ; if ( m != n ) gl_FragColor += v ; else {
gl_FragColor += m * v ; gl_FragColor += v * m - n ; }
mat4 m34 = mat4 ( v . x * u . x , v . x * u . y , v . x * u . z , v . x * u . w , v . y * u . x , v . y * u . y , v . y * u . z , v . y * u . w , v . z * u . x , v . z * u . y , v . z * u . z , v . z * u . w , v . w * u . x , v . w * u . y , v . w * u . z , v . w * u . w ) ; m34 += mat4 ( v . x ) ; m34 += mat4 ( u , u . x , u , u . x , u , u . x , u . x ) ; if ( m34 == un34 ) gl_FragColor += m34 * u ; else gl_FragColor += un34 * um43 * v ; }



(
(declare (in ) vec4 u)
(declare (in ) vec4 v)
(declare (uniform ) mat4 un34)
(declare (uniform ) mat4 um43)
(declare (uniform ) mat4 n)
(declare (uniform ) mat4 m)
(declare (in ) vec3 Color)
(declare (uniform ) mat3 colorTransform)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare (temporary ) vec4 vec_ctor)
      (assign (constant bool (1)) (w) (var_ref vec_ctor)  (constant float (1.000000)) ) 
      (assign (constant bool (1)) (xyz) (var_ref vec_ctor)  (expression vec3 * (var_ref Color) (var_ref colorTransform) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (array_ref (var_ref un34) (constant int (1)) ) (var_ref vec_ctor) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
      (if (expression bool any_nequal (var_ref m) (var_ref n) ) (
        (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 + (var_ref assignment_tmp) (var_ref v) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 + (expression vec4 + (var_ref gl_FragColor) (expression vec4 * (var_ref m) (var_ref v) ) ) (expression vec4 * (var_ref v) (expression mat4 - (var_ref m) (var_ref n) ) ) ) ) 
      ))

      (declare (temporary ) mat4 mat_ctor)
      (assign (constant bool (1)) (x) (array_ref (var_ref mat_ctor) (constant uint (0)) )  (expression float * (swiz x (var_ref v) )(swiz x (var_ref u) )) ) 
      (assign (constant bool (1)) (y) (array_ref (var_ref mat_ctor) (constant uint (0)) )  (expression float * (swiz x (var_ref v) )(swiz y (var_ref u) )) ) 
      (assign (constant bool (1)) (z) (array_ref (var_ref mat_ctor) (constant uint (0)) )  (expression float * (swiz x (var_ref v) )(swiz z (var_ref u) )) ) 
      (assign (constant bool (1)) (w) (array_ref (var_ref mat_ctor) (constant uint (0)) )  (expression float * (swiz x (var_ref v) )(swiz w (var_ref u) )) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref mat_ctor) (constant uint (1)) )  (expression float * (swiz y (var_ref v) )(swiz x (var_ref u) )) ) 
      (assign (constant bool (1)) (y) (array_ref (var_ref mat_ctor) (constant uint (1)) )  (expression float * (swiz y (var_ref v) )(swiz y (var_ref u) )) ) 
      (assign (constant bool (1)) (z) (array_ref (var_ref mat_ctor) (constant uint (1)) )  (expression float * (swiz y (var_ref v) )(swiz z (var_ref u) )) ) 
      (assign (constant bool (1)) (w) (array_ref (var_ref mat_ctor) (constant uint (1)) )  (expression float * (swiz y (var_ref v) )(swiz w (var_ref u) )) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref mat_ctor) (constant uint (2)) )  (expression float * (swiz z (var_ref v) )(swiz x (var_ref u) )) ) 
      (assign (constant bool (1)) (y) (array_ref (var_ref mat_ctor) (constant uint (2)) )  (expression float * (swiz z (var_ref v) )(swiz y (var_ref u) )) ) 
      (assign (constant bool (1)) (z) (array_ref (var_ref mat_ctor) (constant uint (2)) )  (expression float * (swiz z (var_ref v) )(swiz z (var_ref u) )) ) 
      (assign (constant bool (1)) (w) (array_ref (var_ref mat_ctor) (constant uint (2)) )  (expression float * (swiz z (var_ref v) )(swiz w (var_ref u) )) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref mat_ctor) (constant uint (3)) )  (expression float * (swiz w (var_ref v) )(swiz x (var_ref u) )) ) 
      (assign (constant bool (1)) (y) (array_ref (var_ref mat_ctor) (constant uint (3)) )  (expression float * (swiz w (var_ref v) )(swiz y (var_ref u) )) ) 
      (assign (constant bool (1)) (z) (array_ref (var_ref mat_ctor) (constant uint (3)) )  (expression float * (swiz w (var_ref v) )(swiz z (var_ref u) )) ) 
      (assign (constant bool (1)) (w) (array_ref (var_ref mat_ctor) (constant uint (3)) )  (expression float * (swiz w (var_ref v) )(swiz w (var_ref u) )) ) 
      (declare (temporary ) mat4 mat_ctor)
      (declare (temporary ) vec4 mat_ctor_vec)
      (assign (constant bool (1)) (xyzw) (var_ref mat_ctor_vec)  (constant vec4 (0.000000 0.000000 0.000000 0.000000)) ) 
      (assign (constant bool (1)) (x) (var_ref mat_ctor_vec)  (swiz x (var_ref v) )) 
      (assign (constant bool (1)) (xyzw) (array_ref (var_ref mat_ctor) (constant uint (0)) )  (swiz xyyy (var_ref mat_ctor_vec) )) 
      (assign (constant bool (1)) (xyzw) (array_ref (var_ref mat_ctor) (constant uint (1)) )  (swiz yxyy (var_ref mat_ctor_vec) )) 
      (assign (constant bool (1)) (xyzw) (array_ref (var_ref mat_ctor) (constant uint (2)) )  (swiz yyxy (var_ref mat_ctor_vec) )) 
      (assign (constant bool (1)) (xyzw) (array_ref (var_ref mat_ctor) (constant uint (3)) )  (swiz yyyx (var_ref mat_ctor_vec) )) 
      (declare (temporary ) mat4 mat_ctor)
      (assign (constant bool (1)) (xyzw) (array_ref (var_ref mat_ctor) (constant uint (0)) )  (var_ref u) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref mat_ctor) (constant uint (1)) )  (swiz x (var_ref u) )) 
      (assign (constant bool (1)) (yzw) (array_ref (var_ref mat_ctor) (constant uint (1)) )  (swiz xyz (var_ref u) )) 
      (assign (constant bool (1)) (x) (array_ref (var_ref mat_ctor) (constant uint (2)) )  (swiz w (var_ref u) )) 
      (assign (constant bool (1)) (y) (array_ref (var_ref mat_ctor) (constant uint (2)) )  (swiz x (var_ref u) )) 
      (assign (constant bool (1)) (zw) (array_ref (var_ref mat_ctor) (constant uint (2)) )  (swiz xy (var_ref u) )) 
      (assign (constant bool (1)) (xy) (array_ref (var_ref mat_ctor) (constant uint (3)) )  (swiz zw (var_ref u) )) 
      (assign (constant bool (1)) (z) (array_ref (var_ref mat_ctor) (constant uint (3)) )  (swiz x (var_ref u) )) 
      (assign (constant bool (1)) (w) (array_ref (var_ref mat_ctor) (constant uint (3)) )  (swiz x (var_ref u) )) 
      (declare (temporary ) mat4 assignment_tmp)
      (assign (constant bool (1)) () (var_ref assignment_tmp)  (expression mat4 + (expression mat4 + (var_ref mat_ctor) (var_ref mat_ctor) ) (var_ref mat_ctor) ) ) 
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref un34) ) (
        (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 + (var_ref gl_FragColor) (expression vec4 * (var_ref assignment_tmp) (var_ref u) ) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 + (var_ref gl_FragColor) (expression vec4 * (expression mat4 * (var_ref un34) (var_ref um43) ) (var_ref v) ) ) ) 
      ))

    ))

)


)
// LunarGOO output
#version 130
uniform vec3[3] colorTransform;
uniform vec4[4] un34;
uniform vec4[4] m;
uniform vec4[4] n;
uniform vec4[4] um43;
in vec3 Color;
const vec4 const34 = vec4(0.0, 0.0, 0.0, 1.0);
in vec4 v;
in vec4 u;
const float const121_0f = 0.0;
const vec4 const123 = vec4(0.0, 0.0, 0.0, 0.0);
const vec4 const125 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
    float _pre_phi717;
    float _pre_phi715;
    float _pre_phi713;
    float _pre_phi;
    vec4 gla_copyout_gl_FragColor711_0;
    vec4 _pn;
    vec3 __column = colorTransform[0];
    float __dot = dot(Color, __column);
    vec3 __column2 = colorTransform[1];
    float __dot3 = dot(Color, __column2);
    vec3 __column4 = colorTransform[2];
    float __dot5 = dot(Color, __column4);
    vec4 temp33 = const34;
    temp33.xyz = vec3(__dot, __dot3, __dot5);
    vec4 temp35 = un34[1];
    vec4 assignment_tmp7 = temp35 + temp33;
    vec4 __column11 = m[0];
    vec4 __column12 = n[0];
    bvec4 temp39 = notEqual(__column11, __column12);
    bool temp40 = any(temp39);
    vec4 __column13 = m[1];
    vec4 __column14 = n[1];
    bvec4 temp43 = notEqual(__column13, __column14);
    bool temp44 = any(temp43);
    bool temp45 = temp40 || temp44;
    vec4 __column15 = m[2];
    vec4 __column16 = n[2];
    bvec4 temp48 = notEqual(__column15, __column16);
    bool temp49 = any(temp48);
    bool temp50 = temp45 || temp49;
    vec4 __column17 = m[3];
    vec4 __column18 = n[3];
    bvec4 temp53 = notEqual(__column17, __column18);
    bool temp54 = any(temp53);
    bool temp55 = temp50 || temp54;
    if (temp55) {
        vec4 gla_copyout_gl_FragColor19 = assignment_tmp7 + v;
        _pre_phi717 = v.w;
        _pre_phi715 = v.z;
        _pre_phi713 = v.y;
        _pre_phi = v.x;
        gla_copyout_gl_FragColor711_0 = gla_copyout_gl_FragColor19;
    }
    else {
        float __product = __column11.x * v.x;
        float __product28 = __column13.x * v.y;
        float __dotProduct = __product + __product28;
        float __product31 = __column15.x * v.z;
        float __dotProduct32 = __dotProduct + __product31;
        float __product35 = __column17.x * v.w;
        float __dotProduct36 = __dotProduct32 + __product35;
        float __product39 = __column11.y * v.x;
        float __product42 = __column13.y * v.y;
        float __dotProduct43 = __product39 + __product42;
        float __product46 = __column15.y * v.z;
        float __dotProduct47 = __dotProduct43 + __product46;
        float __product50 = __column17.y * v.w;
        float __dotProduct51 = __dotProduct47 + __product50;
        float __product54 = __column11.z * v.x;
        float __product57 = __column13.z * v.y;
        float __dotProduct58 = __product54 + __product57;
        float __product61 = __column15.z * v.z;
        float __dotProduct62 = __dotProduct58 + __product61;
        float __product65 = __column17.z * v.w;
        float __dotProduct66 = __dotProduct62 + __product65;
        float __product69 = __column11.w * v.x;
        float __product72 = __column13.w * v.y;
        float __dotProduct73 = __product69 + __product72;
        float __product76 = __column15.w * v.z;
        float __dotProduct77 = __dotProduct73 + __product76;
        float __product80 = __column17.w * v.w;
        float __dotProduct81 = __dotProduct77 + __product80;
        vec4 temp85 = vec4(__dotProduct36, __dotProduct51, __dotProduct66, __dotProduct81);
        vec4 temp86 = assignment_tmp7 + temp85;
        vec4 __column85 = __column11 - __column12;
        vec4 __column88 = __column13 - __column14;
        vec4 __column91 = __column15 - __column16;
        vec4 __column94 = __column17 - __column18;
        float __dot96 = dot(v, __column85);
        float __dot98 = dot(v, __column88);
        float __dot100 = dot(v, __column91);
        float __dot102 = dot(v, __column94);
        vec4 temp95 = vec4(__dot96, __dot98, __dot100, __dot102);
        vec4 gla_copyout_gl_FragColor103 = temp86 + temp95;
        _pre_phi717 = v.w;
        _pre_phi715 = v.z;
        _pre_phi713 = v.y;
        _pre_phi = v.x;
        gla_copyout_gl_FragColor711_0 = gla_copyout_gl_FragColor103;
    }
    
    vec4 temp97 = u.zwxx;
    vec4 temp98 = u.wxxy;
    vec4 temp99 = u.xxyz;
    float temp100 = _pre_phi * u.x;
    float temp101 = _pre_phi * u.y;
    float temp102 = _pre_phi * u.z;
    float temp103 = _pre_phi * u.w;
    vec4 temp104 = vec4(temp100, temp101, temp102, temp103);
    float temp105 = _pre_phi713 * u.x;
    float temp106 = _pre_phi713 * u.y;
    float temp107 = _pre_phi713 * u.z;
    float temp108 = _pre_phi713 * u.w;
    vec4 temp109 = vec4(temp105, temp106, temp107, temp108);
    float temp110 = _pre_phi715 * u.x;
    float temp111 = _pre_phi715 * u.y;
    float temp112 = _pre_phi715 * u.z;
    float temp113 = _pre_phi715 * u.w;
    vec4 temp114 = vec4(temp110, temp111, temp112, temp113);
    float temp115 = _pre_phi717 * u.x;
    float temp116 = _pre_phi717 * u.y;
    float temp117 = _pre_phi717 * u.z;
    float temp118 = _pre_phi717 * u.w;
    vec4 temp119 = vec4(temp115, temp116, temp117, temp118);
    vec4 temp120 = vec4(_pre_phi, const121_0f, const121_0f, const121_0f);
    vec4 temp122 = const123;
    temp122.yzw = vec3(_pre_phi, const121_0f, const121_0f);
    vec4 temp124 = const125;
    temp124.zw = vec2(_pre_phi, const121_0f);
    vec4 temp126 = vec4(const121_0f, const121_0f, const121_0f, v.x);
    vec4 __column211 = temp104 + temp120;
    vec4 __column214 = temp109 + temp122;
    vec4 __column217 = temp114 + temp124;
    vec4 __column220 = temp119 + temp126;
    vec4 __column224 = __column211 + u;
    vec4 __column227 = __column214 + temp99;
    vec4 __column230 = __column217 + temp98;
    vec4 __column233 = __column220 + temp97;
    vec4 __column240 = un34[0];
    bvec4 temp136 = equal(__column224, __column240);
    bool temp137 = all(temp136);
    vec4 __column242 = un34[1];
    bvec4 temp139 = equal(__column227, __column242);
    bool temp140 = all(temp139);
    bool temp141 = temp137 && temp140;
    vec4 __column244 = un34[2];
    bvec4 temp143 = equal(__column230, __column244);
    bool temp144 = all(temp143);
    bool temp145 = temp141 && temp144;
    vec4 __column246 = un34[3];
    bvec4 temp147 = equal(__column233, __column246);
    bool temp148 = all(temp147);
    bool temp149 = temp145 && temp148;
    if (temp149) {
        float __product256 = __column224.x * u.x;
        float __product259 = __column227.x * u.y;
        float __dotProduct260 = __product256 + __product259;
        float __product263 = __column230.x * u.z;
        float __dotProduct264 = __dotProduct260 + __product263;
        float __product267 = __column233.x * u.w;
        float __dotProduct268 = __dotProduct264 + __product267;
        float __product271 = __column224.y * u.x;
        float __product274 = __column227.y * u.y;
        float __dotProduct275 = __product271 + __product274;
        float __product278 = __column230.y * u.z;
        float __dotProduct279 = __dotProduct275 + __product278;
        float __product282 = __column233.y * u.w;
        float __dotProduct283 = __dotProduct279 + __product282;
        float __product286 = __column224.z * u.x;
        float __product289 = __column227.z * u.y;
        float __dotProduct290 = __product286 + __product289;
        float __product293 = __column230.z * u.z;
        float __dotProduct294 = __dotProduct290 + __product293;
        float __product297 = __column233.z * u.w;
        float __dotProduct298 = __dotProduct294 + __product297;
        float __product301 = __column224.w * u.x;
        float __product304 = __column227.w * u.y;
        float __dotProduct305 = __product301 + __product304;
        float __product308 = __column230.w * u.z;
        float __dotProduct309 = __dotProduct305 + __product308;
        float __product312 = __column233.w * u.w;
        float __dotProduct313 = __dotProduct309 + __product312;
        vec4 temp178 = vec4(__dotProduct268, __dotProduct283, __dotProduct298, __dotProduct313);
        _pn = temp178;
    }
    else {
        vec4 __rightColumn318 = um43[0];
        float __product320 = __column240.x * __rightColumn318.x;
        float __product324 = __column242.x * __rightColumn318.y;
        float __dotProduct325 = __product320 + __product324;
        float __product329 = __column244.x * __rightColumn318.z;
        float __dotProduct330 = __dotProduct325 + __product329;
        float __product334 = __column246.x * __rightColumn318.w;
        float __dotProduct335 = __dotProduct330 + __product334;
        float __product340 = __column240.y * __rightColumn318.x;
        float __product344 = __column242.y * __rightColumn318.y;
        float __dotProduct345 = __product340 + __product344;
        float __product349 = __column244.y * __rightColumn318.z;
        float __dotProduct350 = __dotProduct345 + __product349;
        float __product354 = __column246.y * __rightColumn318.w;
        float __dotProduct355 = __dotProduct350 + __product354;
        float __product360 = __column240.z * __rightColumn318.x;
        float __product364 = __column242.z * __rightColumn318.y;
        float __dotProduct365 = __product360 + __product364;
        float __product369 = __column244.z * __rightColumn318.z;
        float __dotProduct370 = __dotProduct365 + __product369;
        float __product374 = __column246.z * __rightColumn318.w;
        float __dotProduct375 = __dotProduct370 + __product374;
        float __product380 = __column240.w * __rightColumn318.x;
        float __product384 = __column242.w * __rightColumn318.y;
        float __dotProduct385 = __product380 + __product384;
        float __product389 = __column244.w * __rightColumn318.z;
        float __dotProduct390 = __dotProduct385 + __product389;
        float __product394 = __column246.w * __rightColumn318.w;
        float __dotProduct395 = __dotProduct390 + __product394;
        vec4 __rightColumn398 = um43[1];
        float __product402 = __column240.x * __rightColumn398.x;
        float __product406 = __column242.x * __rightColumn398.y;
        float __dotProduct407 = __product402 + __product406;
        float __product411 = __column244.x * __rightColumn398.z;
        float __dotProduct412 = __dotProduct407 + __product411;
        float __product416 = __column246.x * __rightColumn398.w;
        float __dotProduct417 = __dotProduct412 + __product416;
        float __product422 = __column240.y * __rightColumn398.x;
        float __product426 = __column242.y * __rightColumn398.y;
        float __dotProduct427 = __product422 + __product426;
        float __product431 = __column244.y * __rightColumn398.z;
        float __dotProduct432 = __dotProduct427 + __product431;
        float __product436 = __column246.y * __rightColumn398.w;
        float __dotProduct437 = __dotProduct432 + __product436;
        float __product442 = __column240.z * __rightColumn398.x;
        float __product446 = __column242.z * __rightColumn398.y;
        float __dotProduct447 = __product442 + __product446;
        float __product451 = __column244.z * __rightColumn398.z;
        float __dotProduct452 = __dotProduct447 + __product451;
        float __product456 = __column246.z * __rightColumn398.w;
        float __dotProduct457 = __dotProduct452 + __product456;
        float __product462 = __column240.w * __rightColumn398.x;
        float __product466 = __column242.w * __rightColumn398.y;
        float __dotProduct467 = __product462 + __product466;
        float __product471 = __column244.w * __rightColumn398.z;
        float __dotProduct472 = __dotProduct467 + __product471;
        float __product476 = __column246.w * __rightColumn398.w;
        float __dotProduct477 = __dotProduct472 + __product476;
        vec4 __rightColumn480 = um43[2];
        float __product484 = __column240.x * __rightColumn480.x;
        float __product488 = __column242.x * __rightColumn480.y;
        float __dotProduct489 = __product484 + __product488;
        float __product493 = __column244.x * __rightColumn480.z;
        float __dotProduct494 = __dotProduct489 + __product493;
        float __product498 = __column246.x * __rightColumn480.w;
        float __dotProduct499 = __dotProduct494 + __product498;
        float __product504 = __column240.y * __rightColumn480.x;
        float __product508 = __column242.y * __rightColumn480.y;
        float __dotProduct509 = __product504 + __product508;
        float __product513 = __column244.y * __rightColumn480.z;
        float __dotProduct514 = __dotProduct509 + __product513;
        float __product518 = __column246.y * __rightColumn480.w;
        float __dotProduct519 = __dotProduct514 + __product518;
        float __product524 = __column240.z * __rightColumn480.x;
        float __product528 = __column242.z * __rightColumn480.y;
        float __dotProduct529 = __product524 + __product528;
        float __product533 = __column244.z * __rightColumn480.z;
        float __dotProduct534 = __dotProduct529 + __product533;
        float __product538 = __column246.z * __rightColumn480.w;
        float __dotProduct539 = __dotProduct534 + __product538;
        float __product544 = __column240.w * __rightColumn480.x;
        float __product548 = __column242.w * __rightColumn480.y;
        float __dotProduct549 = __product544 + __product548;
        float __product553 = __column244.w * __rightColumn480.z;
        float __dotProduct554 = __dotProduct549 + __product553;
        float __product558 = __column246.w * __rightColumn480.w;
        float __dotProduct559 = __dotProduct554 + __product558;
        vec4 __rightColumn562 = um43[3];
        float __product566 = __column240.x * __rightColumn562.x;
        float __product570 = __column242.x * __rightColumn562.y;
        float __dotProduct571 = __product566 + __product570;
        float __product575 = __column244.x * __rightColumn562.z;
        float __dotProduct576 = __dotProduct571 + __product575;
        float __product580 = __column246.x * __rightColumn562.w;
        float __dotProduct581 = __dotProduct576 + __product580;
        float __product586 = __column240.y * __rightColumn562.x;
        float __product590 = __column242.y * __rightColumn562.y;
        float __dotProduct591 = __product586 + __product590;
        float __product595 = __column244.y * __rightColumn562.z;
        float __dotProduct596 = __dotProduct591 + __product595;
        float __product600 = __column246.y * __rightColumn562.w;
        float __dotProduct601 = __dotProduct596 + __product600;
        float __product606 = __column240.z * __rightColumn562.x;
        float __product610 = __column242.z * __rightColumn562.y;
        float __dotProduct611 = __product606 + __product610;
        float __product615 = __column244.z * __rightColumn562.z;
        float __dotProduct616 = __dotProduct611 + __product615;
        float __product620 = __column246.z * __rightColumn562.w;
        float __dotProduct621 = __dotProduct616 + __product620;
        float __product626 = __column240.w * __rightColumn562.x;
        float __product630 = __column242.w * __rightColumn562.y;
        float __dotProduct631 = __product626 + __product630;
        float __product635 = __column244.w * __rightColumn562.z;
        float __dotProduct636 = __dotProduct631 + __product635;
        float __product640 = __column246.w * __rightColumn562.w;
        float __dotProduct641 = __dotProduct636 + __product640;
        float __product651 = __dotProduct335 * _pre_phi;
        float __product654 = __dotProduct417 * _pre_phi713;
        float __dotProduct655 = __product651 + __product654;
        float __product658 = __dotProduct499 * _pre_phi715;
        float __dotProduct659 = __dotProduct655 + __product658;
        float __product662 = __dotProduct581 * _pre_phi717;
        float __dotProduct663 = __dotProduct659 + __product662;
        float __product666 = __dotProduct355 * _pre_phi;
        float __product669 = __dotProduct437 * _pre_phi713;
        float __dotProduct670 = __product666 + __product669;
        float __product673 = __dotProduct519 * _pre_phi715;
        float __dotProduct674 = __dotProduct670 + __product673;
        float __product677 = __dotProduct601 * _pre_phi717;
        float __dotProduct678 = __dotProduct674 + __product677;
        float __product681 = __dotProduct375 * _pre_phi;
        float __product684 = __dotProduct457 * _pre_phi713;
        float __dotProduct685 = __product681 + __product684;
        float __product688 = __dotProduct539 * _pre_phi715;
        float __dotProduct689 = __dotProduct685 + __product688;
        float __product692 = __dotProduct621 * _pre_phi717;
        float __dotProduct693 = __dotProduct689 + __product692;
        float __product696 = __dotProduct395 * _pre_phi;
        float __product699 = __dotProduct477 * _pre_phi713;
        float __dotProduct700 = __product696 + __product699;
        float __product703 = __dotProduct559 * _pre_phi715;
        float __dotProduct704 = __dotProduct700 + __product703;
        float __product707 = __dotProduct641 * _pre_phi717;
        float __dotProduct708 = __dotProduct704 + __product707;
        vec4 temp323 = vec4(__dotProduct663, __dotProduct678, __dotProduct693, __dotProduct708);
        _pn = temp323;
    }
    
    vec4 gla_copyout_gl_FragColor711_1 = gla_copyout_gl_FragColor711_0 + _pn;
    gl_FragColor = gla_copyout_gl_FragColor711_1;
    
}
