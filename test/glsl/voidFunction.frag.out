
Top IR:
; ModuleID = 'Top'

@bigColor = external addrspace(2) constant <4 x float>
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %outColor = alloca <4 x float>
  %outColor1 = load <4 x float> addrspace(2)* @bigColor
  store <4 x float> %outColor1, <4 x float>* %outColor
  %0 = load <4 x float> addrspace(2)* @bigColor
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fadd float %1, 4.000000e+00
  %3 = load <4 x float>* %outColor
  %outColor2 = insertelement <4 x float> %3, float %2, i32 0
  store <4 x float> %outColor2, <4 x float>* %outColor
  %gl_FragColor = load <4 x float>* %outColor
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  unreachable

stage-epilogue:                                   ; preds = %entry
  %4 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %4)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@bigColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %outColor1 = load <4 x float> addrspace(2)* @bigColor, align 16
  %0 = extractelement <4 x float> %outColor1, i32 0
  %1 = fadd float %0, 4.000000e+00
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %outColor1, i32 1, float %1, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %2)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone
compiling voidFunction.frag...
uniform vec4 bigColor ; 
varying vec4 BaseColor ; 
uniform float d ; 
float bar = 2.000000 ; 
void  foo (){
bar ++ ; return ; }

void  foo2 (){
bar ++ ; }

void  main (){
vec4 outColor = bigColor ; foo ( ) ; foo2 ( ) ; outColor . x += bar ; gl_FragColor = outColor ; return ; }



(
(declare (uniform ) vec4 bigColor)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 outColor)
      (assign (constant bool (1)) (xyzw) (var_ref outColor)  (var_ref bigColor) ) 
      (assign (constant bool (1)) (x) (var_ref outColor)  (expression float + (swiz x (var_ref bigColor) )(constant float (4.000000)) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref outColor) ) 
      (return)
    ))

)


)
// LunarGOO output
#version 130
uniform vec4 bigColor;
const float const22_4f = 4.0;

void main()
{
    float temp21 = bigColor.x + const22_4f;
    vec4 temp23 = bigColor;
    temp23.x = temp21;
    gl_FragColor = temp23;
    
}
