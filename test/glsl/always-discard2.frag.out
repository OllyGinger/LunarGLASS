
Top IR:
; ModuleID = 'Top'

@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* @gl_FragColor
  unreachable

stage-epilogue:                                   ; No predecessors!
  %0 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %0)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %entry
  ret void
}

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  call void @llvm.gla.discard()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.discard() nounwind
compiling always-discard2.frag...
varying vec2 tex_coord ; 
void  main (void ){
vec4 white = vec4 ( 1.000000 ) ; vec4 black = vec4 ( 0.200000 ) ; vec4 color = white ; float x = tex_coord . x * 2.000000 - 1.000000 ; float y = tex_coord . y * 2.000000 - 1.000000 ; discard; gl_FragColor = color ; }



(
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (discard )
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (constant vec4 (1.000000 1.000000 1.000000 1.000000)) ) 
    ))

)


)
// LunarGOO output
#version 130

void main()
{
    discard;
    
}
