
Top IR:
; ModuleID = 'Top'

@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %_ret_val = alloca float
  %assignment_tmp2 = alloca float
  %assignment_tmp = alloca float
  %color = alloca <4 x float>
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %color
  %tex_coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %0 = extractelement <2 x float> %tex_coord, i32 0
  %1 = fmul float %0, 2.000000e+00
  %assignment_tmp1 = fsub float %1, 1.000000e+00
  store float %assignment_tmp1, float* %assignment_tmp
  %tex_coord3 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %2 = extractelement <2 x float> %tex_coord3, i32 1
  %3 = fmul float %2, 2.000000e+00
  %assignment_tmp24 = fsub float %3, 1.000000e+00
  store float %assignment_tmp24, float* %assignment_tmp2
  %4 = load float* %assignment_tmp
  %5 = load float* %assignment_tmp
  %6 = fmul float %4, %5
  %7 = load float* %assignment_tmp2
  %8 = load float* %assignment_tmp2
  %9 = fmul float %7, %8
  %10 = fadd float %6, %9
  %_ret_val5 = call float @llvm.gla.fSqrt.f32.f32(float %10)
  store float %_ret_val5, float* %_ret_val
  %11 = load float* %_ret_val
  %12 = fcmp ogt float %11, 1.000000e+00
  br i1 %12, label %then, label %ifmerge

then:                                             ; preds = %entry
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %post-discard
  %13 = load float* %_ret_val
  %14 = fcmp oge float %13, 7.500000e-01
  br i1 %14, label %then6, label %ifmerge8

then6:                                            ; preds = %ifmerge
  %15 = load float* %_ret_val
  %16 = call float @llvm.gla.fPow.f32.f32.f32(float %15, float 1.600000e+01)
  %17 = fdiv float %16, 2.000000e+00
  %18 = call float @llvm.gla.fAbs.f32.f32(float %17)
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = insertelement <4 x float> %19, float %18, i32 1
  %21 = insertelement <4 x float> %20, float %18, i32 2
  %22 = insertelement <4 x float> %21, float %18, i32 3
  %color7 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  store <4 x float> %color7, <4 x float>* %color
  br label %ifmerge8

ifmerge8:                                         ; preds = %ifmerge, %then6
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge8
  %23 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %23)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare float @llvm.gla.fPow.f32.f32.f32(float, float) nounwind readnone

declare float @llvm.gla.fAbs.f32.f32(float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  %tex_coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %0 = extractelement <2 x float> %tex_coord, i32 0
  %1 = fmul float %0, 2.000000e+00
  %assignment_tmp1 = fadd float %1, -1.000000e+00
  %2 = extractelement <2 x float> %tex_coord, i32 1
  %3 = fmul float %2, 2.000000e+00
  %assignment_tmp24 = fadd float %3, -1.000000e+00
  %4 = fmul float %assignment_tmp1, %assignment_tmp1
  %5 = fmul float %assignment_tmp24, %assignment_tmp24
  %6 = fadd float %4, %5
  %_ret_val5 = call float @llvm.gla.fSqrt.f32.f32(float %6)
  %7 = fcmp ogt float %_ret_val5, 1.000000e+00
  br i1 %7, label %then, label %ifmerge

then:                                             ; preds = %entry
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge:                                          ; preds = %entry
  %8 = fcmp ult float %_ret_val5, 7.500000e-01
  %9 = call float @llvm.gla.fPow.f32.f32.f32(float %_ret_val5, float 1.600000e+01)
  %10 = fdiv float %9, 2.000000e+00
  %11 = call float @llvm.gla.fAbs.f32.f32(float %10)
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %11, <4 x i32> zeroinitializer)
  %color7 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %12
  %select = select i1 %8, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %color7
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %select)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare float @llvm.gla.fPow.f32.f32.f32(float, float) nounwind readnone

declare float @llvm.gla.fAbs.f32.f32(float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone
compiling discard-dce.frag...
varying vec2 tex_coord ; 
void  main (void ){
vec4 white = vec4 ( 1.000000 ) ; vec4 black = vec4 ( 0.200000 ) ; vec4 color = white ; float x = tex_coord . x * 2.000000 - 1.000000 ; float y = tex_coord . y * 2.000000 - 1.000000 ; float radius = sqrt ( x * x + y * y ) ; if ( radius > 1.000000 ) {
if ( radius > 1.100000 ) {
++ color ; }
gl_FragColor = color ; if ( radius > 1.200000 ) {
++ color ; }
discard; }
if ( radius >= 0.750000 ) color -= abs ( pow ( radius , 16.000000 ) / 2.000000 ) ; gl_FragColor = color ; }



(
(declare (in ) vec2 tex_coord)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (constant vec4 (1.000000 1.000000 1.000000 1.000000)) ) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float - (expression float * (swiz x (var_ref tex_coord) )(constant float (2.000000)) ) (constant float (1.000000)) ) ) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float - (expression float * (swiz y (var_ref tex_coord) )(constant float (2.000000)) ) (constant float (1.000000)) ) ) 
      (declare () float _ret_val)
      (assign (constant bool (1)) (x) (var_ref _ret_val)  (expression float sqrt (expression float + (expression float * (var_ref assignment_tmp) (var_ref assignment_tmp) ) (expression float * (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) ) 
      (if (expression bool > (var_ref _ret_val) (constant float (1.000000)) ) (
        (discard )
      )
      ())

      (if (expression bool >= (var_ref _ret_val) (constant float (0.750000)) ) (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 - (constant vec4 (1.000000 1.000000 1.000000 1.000000)) (expression float abs (expression float / (expression float pow (var_ref _ret_val) (constant float (16.000000)) ) (constant float (2.000000)) ) ) ) ) 
      )
      ())

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref color) ) 
    ))

)


)
// LunarGOO output
#version 130
in vec2 tex_coord;
const float const22_2f = 2.0;
const float const24__1f = -1.0;
const float const32_1f = 1.0;
const float const34_1f = 0.75;
const float const36_16f = 16.0;
const vec4 const41 = vec4(1.0);

void main()
{
    float temp21 = tex_coord.x * const22_2f;
    float assignment_tmp1 = temp21 + const24__1f;
    float temp25 = tex_coord.y * const22_2f;
    float assignment_tmp24 = temp25 + const24__1f;
    float temp27 = assignment_tmp1 * assignment_tmp1;
    float temp28 = assignment_tmp24 * assignment_tmp24;
    float temp29 = temp27 + temp28;
    float _ret_val5 = sqrt(temp29);
    bool temp31 = _ret_val5 > const32_1f;
    if (temp31) {
        discard;
    }
    
    bool temp33 = _ret_val5 < const34_1f;
    float temp35 = pow(_ret_val5, const36_16f);
    float temp37 = temp35 / const22_2f;
    float temp38 = abs(temp37);
    vec4 temp39 = vec4(temp38);
    vec4 color7 = const41 - temp39;
    vec4 select = temp33 ? const41 : color7;
    gl_FragColor = select;
    
}
