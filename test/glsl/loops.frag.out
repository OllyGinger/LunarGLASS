
Top IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@d13 = external addrspace(2) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %assignment_tmp362 = alloca <4 x float>
  %assignment_tmp346 = alloca <4 x float>
  %assignment_tmp335 = alloca <4 x float>
  %and_tmp327 = alloca i1
  %assignment_tmp307 = alloca <4 x float>
  %assignment_tmp291 = alloca <4 x float>
  %assignment_tmp272 = alloca <4 x float>
  %assignment_tmp229 = alloca <4 x float>
  %assignment_tmp217 = alloca <4 x float>
  %assignment_tmp203 = alloca <4 x float>
  %assignment_tmp156 = alloca <4 x float>
  %assignment_tmp136 = alloca <4 x float>
  %assignment_tmp120 = alloca <4 x float>
  %i110 = alloca i32
  %i89 = alloca i32
  %i76 = alloca i32
  %i71 = alloca i32
  %assignment_tmp64 = alloca <4 x float>
  %assignment_tmp48 = alloca <4 x float>
  %and_tmp = alloca i1
  %assignment_tmp = alloca <4 x float>
  %color = alloca <4 x float>
  %i5 = alloca i32
  %i4 = alloca i32
  %i3 = alloca i32
  %i2 = alloca i32
  %i1 = alloca i32
  %i = alloca i32
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %post-loop-break12, %entry
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fcmp olt float %1, 0x3FD51EB860000000
  br i1 %2, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  %3 = load <4 x float>* %color
  %color6 = fadd <4 x float> %3, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color6, <4 x float>* %color
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %4 = load <4 x float>* %color
  %5 = extractelement <4 x float> %4, i32 0
  %6 = fcmp olt float %5, 0x3FE51EB860000000
  br i1 %6, label %then7, label %ifmerge10

then7:                                            ; preds = %ifmerge
  %7 = load <4 x float>* %color
  %color8 = fadd <4 x float> %7, <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>
  store <4 x float> %color8, <4 x float>* %color
  br label %loop-merge

post-loop-break9:                                 ; No predecessors!
  br label %ifmerge10

ifmerge10:                                        ; preds = %ifmerge, %post-loop-break9
  %8 = load <4 x float>* %color
  %color11 = fadd <4 x float> %8, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color11, <4 x float>* %color
  br label %loop-merge

post-loop-break12:                                ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %ifmerge10, %then7, %then
  br label %loop-header13

loop-header13:                                    ; preds = %ifmerge16, %loop-merge
  %9 = load <4 x float>* %color
  %10 = extractelement <4 x float> %9, i32 0
  %11 = load float addrspace(2)* @d
  %12 = fcmp oge float %10, %11
  br i1 %12, label %then14, label %ifmerge16

then14:                                           ; preds = %loop-header13
  br label %loop-merge18

post-loop-break15:                                ; No predecessors!
  br label %ifmerge16

ifmerge16:                                        ; preds = %loop-header13, %post-loop-break15
  %13 = load <4 x float>* %color
  %14 = load <4 x float> addrspace(2)* @bigColor
  %color17 = fadd <4 x float> %13, %14
  store <4 x float> %color17, <4 x float>* %color
  br label %loop-header13

loop-merge18:                                     ; preds = %then14
  br label %loop-header19

loop-header19:                                    ; preds = %ifmerge26, %then25, %loop-merge18
  %15 = load <4 x float>* %color
  %16 = extractelement <4 x float> %15, i32 2
  %17 = load float addrspace(2)* @d
  %18 = fcmp oge float %16, %17
  br i1 %18, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header19
  br label %loop-merge28

post-loop-break21:                                ; No predecessors!
  br label %ifmerge22

ifmerge22:                                        ; preds = %loop-header19, %post-loop-break21
  %19 = load <4 x float>* %color
  %20 = load <4 x float> addrspace(2)* @bigColor1_1
  %assignment_tmp23 = fadd <4 x float> %19, %20
  store <4 x float> %assignment_tmp23, <4 x float>* %assignment_tmp
  %color24 = load <4 x float>* %assignment_tmp
  store <4 x float> %color24, <4 x float>* %color
  %21 = load <4 x float>* %assignment_tmp
  %22 = extractelement <4 x float> %21, i32 3
  %23 = load float addrspace(2)* @d
  %24 = fcmp olt float %22, %23
  br i1 %24, label %then25, label %ifmerge26

then25:                                           ; preds = %ifmerge22
  br label %loop-header19

post-loop-continue:                               ; No predecessors!
  br label %ifmerge26

ifmerge26:                                        ; preds = %ifmerge22, %post-loop-continue
  %25 = load <4 x float>* %assignment_tmp
  %26 = load <4 x float> addrspace(2)* @bigColor1_1
  %color27 = fadd <4 x float> %25, %26
  store <4 x float> %color27, <4 x float>* %color
  br label %loop-header19

loop-merge28:                                     ; preds = %then20
  br label %loop-header29

loop-header29:                                    ; preds = %ifmerge32, %loop-merge28
  %27 = load <4 x float>* %color
  %28 = extractelement <4 x float> %27, i32 0
  %29 = fcmp oge float %28, 4.200000e+01
  br i1 %29, label %then30, label %ifmerge32

then30:                                           ; preds = %loop-header29
  br label %loop-merge34

post-loop-break31:                                ; No predecessors!
  br label %ifmerge32

ifmerge32:                                        ; preds = %loop-header29, %post-loop-break31
  %30 = load <4 x float>* %color
  %color33 = fadd <4 x float> %30, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color33, <4 x float>* %color
  br label %loop-header29

loop-merge34:                                     ; preds = %then30
  br label %loop-header35

loop-header35:                                    ; preds = %ifmerge41, %loop-merge34
  %31 = load <4 x float>* %color
  %32 = extractelement <4 x float> %31, i32 3
  %33 = load float addrspace(2)* @d2
  %34 = fcmp olt float %32, %33
  br i1 %34, label %then36, label %else

then36:                                           ; preds = %loop-header35
  %35 = load <4 x float>* %color
  %36 = extractelement <4 x float> %35, i32 1
  %37 = load float addrspace(2)* @d3
  %and_tmp37 = fcmp olt float %36, %37
  store i1 %and_tmp37, i1* %and_tmp
  br label %ifmerge38

else:                                             ; preds = %loop-header35
  store i1 false, i1* %and_tmp
  br label %ifmerge38

ifmerge38:                                        ; preds = %else, %then36
  %38 = load i1* %and_tmp
  %39 = xor i1 %38, true
  br i1 %39, label %then39, label %ifmerge41

then39:                                           ; preds = %ifmerge38
  br label %loop-merge43

post-loop-break40:                                ; No predecessors!
  br label %ifmerge41

ifmerge41:                                        ; preds = %ifmerge38, %post-loop-break40
  %40 = load <4 x float>* %color
  %41 = load <4 x float> addrspace(2)* @bigColor1_2
  %color42 = fadd <4 x float> %40, %41
  store <4 x float> %color42, <4 x float>* %color
  br label %loop-header35

loop-merge43:                                     ; preds = %then39
  br label %loop-header44

loop-header44:                                    ; preds = %ifmerge53, %loop-merge43
  %42 = load <4 x float>* %color
  %43 = extractelement <4 x float> %42, i32 2
  %44 = load float addrspace(2)* @d3
  %45 = fcmp oge float %43, %44
  br i1 %45, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge55

post-loop-break46:                                ; No predecessors!
  br label %ifmerge47

ifmerge47:                                        ; preds = %loop-header44, %post-loop-break46
  %46 = load <4 x float>* %color
  %47 = load <4 x float> addrspace(2)* @bigColor1_3
  %assignment_tmp4849 = fadd <4 x float> %46, %47
  store <4 x float> %assignment_tmp4849, <4 x float>* %assignment_tmp48
  %color50 = load <4 x float>* %assignment_tmp48
  store <4 x float> %color50, <4 x float>* %color
  %48 = load <4 x float>* %assignment_tmp48
  %49 = extractelement <4 x float> %48, i32 1
  %50 = load float addrspace(2)* @d4
  %51 = fcmp olt float %49, %50
  br i1 %51, label %then51, label %ifmerge53

then51:                                           ; preds = %ifmerge47
  br label %loop-merge55

post-loop-break52:                                ; No predecessors!
  br label %ifmerge53

ifmerge53:                                        ; preds = %ifmerge47, %post-loop-break52
  %52 = load <4 x float>* %assignment_tmp48
  %53 = load <4 x float> addrspace(2)* @bigColor1_3
  %color54 = fadd <4 x float> %52, %53
  store <4 x float> %color54, <4 x float>* %color
  br label %loop-header44

loop-merge55:                                     ; preds = %then51, %then45
  store i32 0, i32* %i5
  br label %loop-header56

loop-header56:                                    ; preds = %ifmerge59, %loop-merge55
  %54 = load i32* %i5
  %55 = load i32 addrspace(2)* @Count
  %56 = icmp sge i32 %54, %55
  br i1 %56, label %then57, label %ifmerge59

then57:                                           ; preds = %loop-header56
  br label %loop-merge62

post-loop-break58:                                ; No predecessors!
  br label %ifmerge59

ifmerge59:                                        ; preds = %loop-header56, %post-loop-break58
  %57 = load <4 x float>* %color
  %58 = load <4 x float> addrspace(2)* @bigColor2
  %color60 = fadd <4 x float> %57, %58
  store <4 x float> %color60, <4 x float>* %color
  %59 = load i32* %i5
  %i561 = add i32 %59, 1
  store i32 %i561, i32* %i5
  br label %loop-header56

loop-merge62:                                     ; preds = %then57
  br label %loop-header63

loop-header63:                                    ; preds = %ifmerge69, %loop-merge62
  %60 = load <4 x float>* %color
  %61 = load <4 x float> addrspace(2)* @bigColor3
  %assignment_tmp6465 = fadd <4 x float> %60, %61
  store <4 x float> %assignment_tmp6465, <4 x float>* %assignment_tmp64
  %color66 = load <4 x float>* %assignment_tmp64
  store <4 x float> %color66, <4 x float>* %color
  %62 = load <4 x float>* %assignment_tmp64
  %63 = extractelement <4 x float> %62, i32 0
  %64 = load float addrspace(2)* @d2
  %65 = fcmp oge float %63, %64
  br i1 %65, label %then67, label %ifmerge69

then67:                                           ; preds = %loop-header63
  br label %loop-merge70

post-loop-break68:                                ; No predecessors!
  br label %ifmerge69

ifmerge69:                                        ; preds = %loop-header63, %post-loop-break68
  br label %loop-header63

loop-merge70:                                     ; preds = %then67
  store i32 0, i32* %i4
  store i32 0, i32* %i71
  br label %loop-header72

loop-header72:                                    ; preds = %loop-header72, %loop-merge70
  %66 = load <4 x float>* %color
  %67 = extractelement <4 x float> %66, i32 2
  %68 = load float addrspace(2)* @d3
  %69 = fadd float %67, %68
  %70 = load <4 x float>* %color
  %color73 = insertelement <4 x float> %70, float %69, i32 2
  store <4 x float> %color73, <4 x float>* %color
  %71 = load i32* %i4
  %i474 = add i32 %71, 1
  store i32 %i474, i32* %i4
  %72 = load i32* %i71
  %73 = add i32 %72, 1
  %74 = icmp sge i32 %73, 42
  store i32 %73, i32* %i71
  br i1 %74, label %loop-merge75, label %loop-header72

loop-merge75:                                     ; preds = %loop-header72
  store i32 0, i32* %i3
  store i32 0, i32* %i76
  br label %loop-header77

loop-header77:                                    ; preds = %ifmerge86, %loop-merge75
  %75 = load <4 x float>* %color
  %76 = extractelement <4 x float> %75, i32 2
  %77 = fcmp olt float %76, 2.000000e+01
  br i1 %77, label %then78, label %else80

then78:                                           ; preds = %loop-header77
  %78 = load <4 x float>* %color
  %79 = extractelement <4 x float> %78, i32 0
  %80 = fadd float %79, 1.000000e+00
  %81 = load <4 x float>* %color
  %color79 = insertelement <4 x float> %81, float %80, i32 0
  store <4 x float> %color79, <4 x float>* %color
  br label %ifmerge82

else80:                                           ; preds = %loop-header77
  %82 = load <4 x float>* %color
  %83 = extractelement <4 x float> %82, i32 1
  %84 = fadd float %83, 1.000000e+00
  %85 = load <4 x float>* %color
  %color81 = insertelement <4 x float> %85, float %84, i32 1
  store <4 x float> %color81, <4 x float>* %color
  br label %ifmerge82

ifmerge82:                                        ; preds = %else80, %then78
  %86 = load <4 x float>* %color
  %87 = extractelement <4 x float> %86, i32 3
  %88 = fcmp olt float %87, 2.000000e+01
  br i1 %88, label %then83, label %ifmerge86

then83:                                           ; preds = %ifmerge82
  %89 = load <4 x float>* %color
  %90 = extractelement <4 x float> %89, i32 2
  %91 = load <4 x float>* %color
  %92 = extractelement <4 x float> %91, i32 1
  %93 = fcmp ogt float %90, %92
  br i1 %93, label %then84, label %ifmerge85

then84:                                           ; preds = %then83
  br label %ifmerge85

ifmerge85:                                        ; preds = %then83, %then84
  br label %ifmerge86

ifmerge86:                                        ; preds = %ifmerge82, %ifmerge85
  %94 = load i32* %i3
  %i387 = add i32 %94, 1
  store i32 %i387, i32* %i3
  %95 = load i32* %i76
  %96 = add i32 %95, 1
  %97 = icmp sge i32 %96, 100
  store i32 %96, i32* %i76
  br i1 %97, label %loop-merge88, label %loop-header77

loop-merge88:                                     ; preds = %ifmerge86
  store i32 0, i32* %i2
  store i32 0, i32* %i89
  br label %loop-header90

loop-header90:                                    ; preds = %ifmerge95, %loop-merge88
  %98 = load <4 x float>* %color
  %99 = extractelement <4 x float> %98, i32 2
  %100 = fcmp olt float %99, 2.000000e+01
  br i1 %100, label %then91, label %else93

then91:                                           ; preds = %loop-header90
  %101 = load <4 x float>* %color
  %102 = extractelement <4 x float> %101, i32 0
  %103 = fadd float %102, 1.000000e+00
  %104 = load <4 x float>* %color
  %color92 = insertelement <4 x float> %104, float %103, i32 0
  store <4 x float> %color92, <4 x float>* %color
  br label %ifmerge95

else93:                                           ; preds = %loop-header90
  %105 = load <4 x float>* %color
  %106 = extractelement <4 x float> %105, i32 1
  %107 = fadd float %106, 1.000000e+00
  %108 = load <4 x float>* %color
  %color94 = insertelement <4 x float> %108, float %107, i32 1
  store <4 x float> %color94, <4 x float>* %color
  br label %ifmerge95

ifmerge95:                                        ; preds = %else93, %then91
  %109 = load i32* %i2
  %i296 = add i32 %109, 1
  store i32 %i296, i32* %i2
  %110 = load i32* %i89
  %111 = add i32 %110, 1
  %112 = icmp sge i32 %111, 120
  store i32 %111, i32* %i89
  br i1 %112, label %loop-merge97, label %loop-header90

loop-merge97:                                     ; preds = %ifmerge95
  store i32 0, i32* %i1
  br label %loop-header98

loop-header98:                                    ; preds = %ifmerge106, %then103, %loop-merge97
  %113 = load i32* %i1
  %114 = icmp sge i32 %113, 42
  br i1 %114, label %then99, label %ifmerge101

then99:                                           ; preds = %loop-header98
  br label %loop-merge109

post-loop-break100:                               ; No predecessors!
  br label %ifmerge101

ifmerge101:                                       ; preds = %loop-header98, %post-loop-break100
  %115 = load <4 x float>* %color
  %116 = extractelement <4 x float> %115, i32 2
  %117 = load float addrspace(2)* @d3
  %118 = fadd float %116, %117
  %119 = load <4 x float>* %color
  %color102 = insertelement <4 x float> %119, float %118, i32 2
  store <4 x float> %color102, <4 x float>* %color
  %120 = load <4 x float>* %color
  %121 = extractelement <4 x float> %120, i32 0
  %122 = load float addrspace(2)* @d4
  %123 = fcmp olt float %121, %122
  br i1 %123, label %then103, label %ifmerge106

then103:                                          ; preds = %ifmerge101
  %124 = load i32* %i1
  %i1104 = add i32 %124, 1
  store i32 %i1104, i32* %i1
  br label %loop-header98

post-loop-continue105:                            ; No predecessors!
  br label %ifmerge106

ifmerge106:                                       ; preds = %ifmerge101, %post-loop-continue105
  %125 = load <4 x float>* %color
  %126 = extractelement <4 x float> %125, i32 3
  %127 = fadd float %126, 1.000000e+00
  %128 = load <4 x float>* %color
  %color107 = insertelement <4 x float> %128, float %127, i32 3
  store <4 x float> %color107, <4 x float>* %color
  %129 = load i32* %i1
  %i1108 = add i32 %129, 1
  store i32 %i1108, i32* %i1
  br label %loop-header98

loop-merge109:                                    ; preds = %then99
  store i32 0, i32* %i
  store i32 0, i32* %i110
  br label %loop-header111

loop-header111:                                   ; preds = %ifmerge115, %loop-merge109
  %130 = load <4 x float>* %color
  %131 = extractelement <4 x float> %130, i32 2
  %132 = load float addrspace(2)* @d3
  %133 = fadd float %131, %132
  %134 = load <4 x float>* %color
  %color112 = insertelement <4 x float> %134, float %133, i32 2
  store <4 x float> %color112, <4 x float>* %color
  %135 = load <4 x float>* %color
  %136 = extractelement <4 x float> %135, i32 0
  %137 = load float addrspace(2)* @d4
  %138 = fcmp olt float %136, %137
  br i1 %138, label %then113, label %ifmerge115

then113:                                          ; preds = %loop-header111
  br label %loop-merge118

post-loop-break114:                               ; No predecessors!
  br label %ifmerge115

ifmerge115:                                       ; preds = %loop-header111, %post-loop-break114
  %139 = load <4 x float>* %color
  %140 = extractelement <4 x float> %139, i32 3
  %141 = fadd float %140, 1.000000e+00
  %142 = load <4 x float>* %color
  %color116 = insertelement <4 x float> %142, float %141, i32 3
  store <4 x float> %color116, <4 x float>* %color
  %143 = load i32* %i
  %i117 = add i32 %143, 1
  store i32 %i117, i32* %i
  %144 = load i32* %i110
  %145 = add i32 %144, 1
  %146 = icmp sge i32 %145, 42
  store i32 %145, i32* %i110
  br i1 %146, label %loop-merge118, label %loop-header111

loop-merge118:                                    ; preds = %ifmerge115, %then113
  br label %loop-header119

loop-header119:                                   ; preds = %ifmerge133, %then123, %loop-merge118
  %147 = load <4 x float>* %color
  %148 = load <4 x float> addrspace(2)* @bigColor4
  %assignment_tmp120121 = fadd <4 x float> %147, %148
  store <4 x float> %assignment_tmp120121, <4 x float>* %assignment_tmp120
  %color122 = load <4 x float>* %assignment_tmp120
  store <4 x float> %color122, <4 x float>* %color
  %149 = load <4 x float>* %assignment_tmp120
  %150 = extractelement <4 x float> %149, i32 0
  %151 = load float addrspace(2)* @d4
  %152 = fcmp olt float %150, %151
  br i1 %152, label %then123, label %ifmerge125

then123:                                          ; preds = %loop-header119
  br label %loop-header119

post-loop-continue124:                            ; No predecessors!
  br label %ifmerge125

ifmerge125:                                       ; preds = %loop-header119, %post-loop-continue124
  %153 = load <4 x float>* %assignment_tmp120
  %154 = extractelement <4 x float> %153, i32 1
  %155 = load float addrspace(2)* @d4
  %156 = fcmp olt float %154, %155
  br i1 %156, label %then126, label %else128

then126:                                          ; preds = %ifmerge125
  %157 = load <4 x float>* %assignment_tmp120
  %158 = extractelement <4 x float> %157, i32 1
  %159 = load float addrspace(2)* @d4
  %160 = fadd float %158, %159
  %161 = load <4 x float>* %color
  %color127 = insertelement <4 x float> %161, float %160, i32 1
  store <4 x float> %color127, <4 x float>* %color
  br label %ifmerge130

else128:                                          ; preds = %ifmerge125
  %162 = load <4 x float>* %color
  %163 = extractelement <4 x float> %162, i32 0
  %164 = load float addrspace(2)* @d4
  %165 = fadd float %163, %164
  %166 = load <4 x float>* %color
  %color129 = insertelement <4 x float> %166, float %165, i32 0
  store <4 x float> %color129, <4 x float>* %color
  br label %ifmerge130

ifmerge130:                                       ; preds = %else128, %then126
  %167 = load <4 x float>* %color
  %168 = extractelement <4 x float> %167, i32 2
  %169 = load float addrspace(2)* @d4
  %170 = fcmp oge float %168, %169
  br i1 %170, label %then131, label %ifmerge133

then131:                                          ; preds = %ifmerge130
  br label %loop-merge134

post-loop-break132:                               ; No predecessors!
  br label %ifmerge133

ifmerge133:                                       ; preds = %ifmerge130, %post-loop-break132
  br label %loop-header119

loop-merge134:                                    ; preds = %then131
  br label %loop-header135

loop-header135:                                   ; preds = %ifmerge153, %then141, %loop-merge134
  %171 = load <4 x float>* %color
  %172 = load <4 x float> addrspace(2)* @bigColor4
  %assignment_tmp136137 = fadd <4 x float> %171, %172
  store <4 x float> %assignment_tmp136137, <4 x float>* %assignment_tmp136
  %color138 = load <4 x float>* %assignment_tmp136
  store <4 x float> %color138, <4 x float>* %color
  %173 = load <4 x float>* %assignment_tmp136
  %174 = extractelement <4 x float> %173, i32 0
  %175 = load float addrspace(2)* @d4
  %176 = fcmp olt float %174, %175
  br i1 %176, label %then139, label %ifmerge145

then139:                                          ; preds = %loop-header135
  %177 = load <4 x float>* %assignment_tmp136
  %178 = extractelement <4 x float> %177, i32 2
  %179 = fadd float %178, 2.000000e+00
  %180 = load <4 x float>* %color
  %color140 = insertelement <4 x float> %180, float %179, i32 2
  store <4 x float> %color140, <4 x float>* %color
  %181 = load <4 x float>* %color
  %182 = extractelement <4 x float> %181, i32 2
  %183 = load float addrspace(2)* @d4
  %184 = fcmp olt float %182, %183
  br i1 %184, label %then141, label %ifmerge144

then141:                                          ; preds = %then139
  %185 = load <4 x float>* %color
  %186 = extractelement <4 x float> %185, i32 0
  %187 = fadd float %186, 1.000000e+00
  %188 = load <4 x float>* %color
  %color142 = insertelement <4 x float> %188, float %187, i32 0
  store <4 x float> %color142, <4 x float>* %color
  br label %loop-header135

post-loop-continue143:                            ; No predecessors!
  br label %ifmerge144

ifmerge144:                                       ; preds = %then139, %post-loop-continue143
  br label %ifmerge145

ifmerge145:                                       ; preds = %loop-header135, %ifmerge144
  %189 = load <4 x float>* %color
  %190 = extractelement <4 x float> %189, i32 1
  %191 = load float addrspace(2)* @d4
  %192 = fcmp olt float %190, %191
  br i1 %192, label %then146, label %else148

then146:                                          ; preds = %ifmerge145
  %193 = load <4 x float>* %color
  %194 = extractelement <4 x float> %193, i32 1
  %195 = load float addrspace(2)* @d4
  %196 = fadd float %194, %195
  %197 = load <4 x float>* %color
  %color147 = insertelement <4 x float> %197, float %196, i32 1
  store <4 x float> %color147, <4 x float>* %color
  br label %ifmerge150

else148:                                          ; preds = %ifmerge145
  %198 = load <4 x float>* %color
  %199 = extractelement <4 x float> %198, i32 0
  %200 = load float addrspace(2)* @d4
  %201 = fadd float %199, %200
  %202 = load <4 x float>* %color
  %color149 = insertelement <4 x float> %202, float %201, i32 0
  store <4 x float> %color149, <4 x float>* %color
  br label %ifmerge150

ifmerge150:                                       ; preds = %else148, %then146
  %203 = load <4 x float>* %color
  %204 = extractelement <4 x float> %203, i32 2
  %205 = load float addrspace(2)* @d4
  %206 = fcmp oge float %204, %205
  br i1 %206, label %then151, label %ifmerge153

then151:                                          ; preds = %ifmerge150
  br label %loop-merge154

post-loop-break152:                               ; No predecessors!
  br label %ifmerge153

ifmerge153:                                       ; preds = %ifmerge150, %post-loop-break152
  br label %loop-header135

loop-merge154:                                    ; preds = %then151
  br label %loop-header155

loop-header155:                                   ; preds = %ifmerge164, %loop-merge154
  %207 = load <4 x float>* %color
  %208 = load <4 x float> addrspace(2)* @bigColor5
  %assignment_tmp156157 = fadd <4 x float> %207, %208
  store <4 x float> %assignment_tmp156157, <4 x float>* %assignment_tmp156
  %color158 = load <4 x float>* %assignment_tmp156
  store <4 x float> %color158, <4 x float>* %color
  %209 = load <4 x float>* %assignment_tmp156
  %210 = extractelement <4 x float> %209, i32 1
  %211 = load float addrspace(2)* @d5
  %212 = fcmp olt float %210, %211
  br i1 %212, label %then159, label %ifmerge161

then159:                                          ; preds = %loop-header155
  %213 = load <4 x float>* %assignment_tmp156
  %214 = extractelement <4 x float> %213, i32 1
  %215 = load float addrspace(2)* @d5
  %216 = fadd float %214, %215
  %217 = load <4 x float>* %color
  %color160 = insertelement <4 x float> %217, float %216, i32 1
  store <4 x float> %color160, <4 x float>* %color
  br label %ifmerge161

ifmerge161:                                       ; preds = %loop-header155, %then159
  %218 = load <4 x float>* %color
  %219 = extractelement <4 x float> %218, i32 0
  %220 = load float addrspace(2)* @d5
  %221 = fcmp oge float %219, %220
  br i1 %221, label %then162, label %ifmerge164

then162:                                          ; preds = %ifmerge161
  br label %loop-merge165

post-loop-break163:                               ; No predecessors!
  br label %ifmerge164

ifmerge164:                                       ; preds = %ifmerge161, %post-loop-break163
  br label %loop-header155

loop-merge165:                                    ; preds = %then162
  %222 = load <4 x float>* %color
  %223 = extractelement <4 x float> %222, i32 0
  %224 = load float addrspace(2)* @d6
  %225 = fcmp olt float %223, %224
  br i1 %225, label %then166, label %else173

then166:                                          ; preds = %loop-merge165
  br label %loop-header167

loop-header167:                                   ; preds = %ifmerge170, %then166
  %226 = load <4 x float>* %color
  %227 = extractelement <4 x float> %226, i32 1
  %228 = load float addrspace(2)* @d6
  %229 = fcmp oge float %227, %228
  br i1 %229, label %then168, label %ifmerge170

then168:                                          ; preds = %loop-header167
  br label %loop-merge172

post-loop-break169:                               ; No predecessors!
  br label %ifmerge170

ifmerge170:                                       ; preds = %loop-header167, %post-loop-break169
  %230 = load <4 x float>* %color
  %231 = load <4 x float> addrspace(2)* @bigColor6
  %color171 = fadd <4 x float> %230, %231
  store <4 x float> %color171, <4 x float>* %color
  br label %loop-header167

loop-merge172:                                    ; preds = %then168
  br label %ifmerge180

else173:                                          ; preds = %loop-merge165
  br label %loop-header174

loop-header174:                                   ; preds = %ifmerge177, %else173
  %232 = load <4 x float>* %color
  %233 = extractelement <4 x float> %232, i32 2
  %234 = load float addrspace(2)* @d6
  %235 = fcmp oge float %233, %234
  br i1 %235, label %then175, label %ifmerge177

then175:                                          ; preds = %loop-header174
  br label %loop-merge179

post-loop-break176:                               ; No predecessors!
  br label %ifmerge177

ifmerge177:                                       ; preds = %loop-header174, %post-loop-break176
  %236 = load <4 x float>* %color
  %237 = extractelement <4 x float> %236, i32 2
  %238 = load <4 x float> addrspace(2)* @bigColor6
  %239 = extractelement <4 x float> %238, i32 2
  %240 = fadd float %237, %239
  %241 = load <4 x float>* %color
  %color178 = insertelement <4 x float> %241, float %240, i32 2
  store <4 x float> %color178, <4 x float>* %color
  br label %loop-header174

loop-merge179:                                    ; preds = %then175
  br label %ifmerge180

ifmerge180:                                       ; preds = %loop-merge179, %loop-merge172
  %242 = load <4 x float>* %color
  %243 = extractelement <4 x float> %242, i32 0
  %244 = load float addrspace(2)* @d6
  %245 = fcmp olt float %243, %244
  br i1 %245, label %then181, label %else191

then181:                                          ; preds = %ifmerge180
  br label %loop-header182

loop-header182:                                   ; preds = %ifmerge189, %then181
  %246 = load <4 x float>* %color
  %247 = extractelement <4 x float> %246, i32 1
  %248 = load float addrspace(2)* @d6
  %249 = fcmp oge float %247, %248
  br i1 %249, label %then183, label %ifmerge185

then183:                                          ; preds = %loop-header182
  br label %loop-merge190

post-loop-break184:                               ; No predecessors!
  br label %ifmerge185

ifmerge185:                                       ; preds = %loop-header182, %post-loop-break184
  %250 = load <4 x float>* %color
  %251 = load <4 x float> addrspace(2)* @bigColor6
  %color186 = fadd <4 x float> %250, %251
  store <4 x float> %color186, <4 x float>* %color
  %252 = load float addrspace(2)* @d7
  %253 = fcmp olt float %252, 1.000000e+00
  br i1 %253, label %then187, label %ifmerge189

then187:                                          ; preds = %ifmerge185
  br label %loop-merge190

post-loop-break188:                               ; No predecessors!
  br label %ifmerge189

ifmerge189:                                       ; preds = %ifmerge185, %post-loop-break188
  br label %loop-header182

loop-merge190:                                    ; preds = %then187, %then183
  br label %ifmerge198

else191:                                          ; preds = %ifmerge180
  br label %loop-header192

loop-header192:                                   ; preds = %ifmerge195, %else191
  %254 = load <4 x float>* %color
  %255 = extractelement <4 x float> %254, i32 2
  %256 = load float addrspace(2)* @d6
  %257 = fcmp oge float %255, %256
  br i1 %257, label %then193, label %ifmerge195

then193:                                          ; preds = %loop-header192
  br label %loop-merge197

post-loop-break194:                               ; No predecessors!
  br label %ifmerge195

ifmerge195:                                       ; preds = %loop-header192, %post-loop-break194
  %258 = load <4 x float>* %color
  %259 = extractelement <4 x float> %258, i32 2
  %260 = load <4 x float> addrspace(2)* @bigColor6
  %261 = extractelement <4 x float> %260, i32 2
  %262 = fadd float %259, %261
  %263 = load <4 x float>* %color
  %color196 = insertelement <4 x float> %263, float %262, i32 2
  store <4 x float> %color196, <4 x float>* %color
  br label %loop-header192

loop-merge197:                                    ; preds = %then193
  br label %ifmerge198

ifmerge198:                                       ; preds = %loop-merge197, %loop-merge190
  br label %loop-header199

loop-header199:                                   ; preds = %ifmerge209, %ifmerge198
  %264 = load float addrspace(2)* @d7
  %265 = fcmp olt float %264, 0.000000e+00
  br i1 %265, label %then200, label %ifmerge202

then200:                                          ; preds = %loop-header199
  br label %loop-merge212

post-loop-break201:                               ; No predecessors!
  br label %ifmerge202

ifmerge202:                                       ; preds = %loop-header199, %post-loop-break201
  %266 = load <4 x float>* %color
  %267 = load <4 x float> addrspace(2)* @bigColor7
  %assignment_tmp203204 = fadd <4 x float> %266, %267
  store <4 x float> %assignment_tmp203204, <4 x float>* %assignment_tmp203
  %color205 = load <4 x float>* %assignment_tmp203
  store <4 x float> %color205, <4 x float>* %color
  %268 = load float addrspace(2)* @d7
  %269 = fcmp olt float %268, 1.000000e+00
  br i1 %269, label %then206, label %ifmerge209

then206:                                          ; preds = %ifmerge202
  %270 = load <4 x float>* %assignment_tmp203
  %271 = extractelement <4 x float> %270, i32 2
  %272 = fadd float %271, 1.000000e+00
  %273 = load <4 x float>* %color
  %color207 = insertelement <4 x float> %273, float %272, i32 2
  store <4 x float> %color207, <4 x float>* %color
  br label %loop-merge212

post-loop-break208:                               ; No predecessors!
  br label %ifmerge209

ifmerge209:                                       ; preds = %ifmerge202, %post-loop-break208
  %274 = load <4 x float>* %color
  %BaseColor210 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %color211 = fadd <4 x float> %274, %BaseColor210
  store <4 x float> %color211, <4 x float>* %color
  br label %loop-header199

loop-merge212:                                    ; preds = %then206, %then200
  br label %loop-header213

loop-header213:                                   ; preds = %ifmerge235, %loop-merge212
  %275 = load float addrspace(2)* @d8
  %276 = fcmp olt float %275, 0.000000e+00
  br i1 %276, label %then214, label %ifmerge216

then214:                                          ; preds = %loop-header213
  br label %loop-merge236

post-loop-break215:                               ; No predecessors!
  br label %ifmerge216

ifmerge216:                                       ; preds = %loop-header213, %post-loop-break215
  %277 = load <4 x float>* %color
  %278 = load <4 x float> addrspace(2)* @bigColor7
  %assignment_tmp217218 = fadd <4 x float> %277, %278
  store <4 x float> %assignment_tmp217218, <4 x float>* %assignment_tmp217
  %color219 = load <4 x float>* %assignment_tmp217
  store <4 x float> %color219, <4 x float>* %color
  %279 = load float addrspace(2)* @d8
  %280 = fcmp olt float %279, 1.000000e+00
  br i1 %280, label %then220, label %ifmerge228

then220:                                          ; preds = %ifmerge216
  %281 = load <4 x float>* %assignment_tmp217
  %282 = extractelement <4 x float> %281, i32 2
  %283 = fadd float %282, 1.000000e+00
  %284 = load <4 x float>* %color
  %color221 = insertelement <4 x float> %284, float %283, i32 2
  store <4 x float> %color221, <4 x float>* %color
  %285 = load float addrspace(2)* @d8
  %286 = fcmp olt float %285, 2.000000e+00
  br i1 %286, label %then222, label %else224

then222:                                          ; preds = %then220
  %287 = load <4 x float>* %color
  %288 = extractelement <4 x float> %287, i32 1
  %289 = fadd float %288, 1.000000e+00
  %290 = load <4 x float>* %color
  %color223 = insertelement <4 x float> %290, float %289, i32 1
  store <4 x float> %color223, <4 x float>* %color
  br label %ifmerge226

else224:                                          ; preds = %then220
  %291 = load <4 x float>* %color
  %292 = extractelement <4 x float> %291, i32 0
  %293 = fadd float %292, 1.000000e+00
  %294 = load <4 x float>* %color
  %color225 = insertelement <4 x float> %294, float %293, i32 0
  store <4 x float> %color225, <4 x float>* %color
  br label %ifmerge226

ifmerge226:                                       ; preds = %else224, %then222
  br label %loop-merge236

post-loop-break227:                               ; No predecessors!
  br label %ifmerge228

ifmerge228:                                       ; preds = %ifmerge216, %post-loop-break227
  %295 = load <4 x float>* %color
  %BaseColor230 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %assignment_tmp229231 = fadd <4 x float> %295, %BaseColor230
  store <4 x float> %assignment_tmp229231, <4 x float>* %assignment_tmp229
  %color232 = load <4 x float>* %assignment_tmp229
  store <4 x float> %color232, <4 x float>* %color
  %296 = load <4 x float>* %assignment_tmp229
  %297 = extractelement <4 x float> %296, i32 2
  %298 = load float addrspace(2)* @d8
  %299 = fcmp oge float %297, %298
  br i1 %299, label %then233, label %ifmerge235

then233:                                          ; preds = %ifmerge228
  br label %loop-merge236

post-loop-break234:                               ; No predecessors!
  br label %ifmerge235

ifmerge235:                                       ; preds = %ifmerge228, %post-loop-break234
  br label %loop-header213

loop-merge236:                                    ; preds = %then233, %ifmerge226, %then214
  br label %loop-header237

loop-header237:                                   ; preds = %ifmerge249, %loop-merge236
  %300 = load <4 x float>* %color
  %301 = extractelement <4 x float> %300, i32 3
  %302 = load float addrspace(2)* @d9
  %303 = fcmp oge float %301, %302
  br i1 %303, label %then238, label %ifmerge240

then238:                                          ; preds = %loop-header237
  br label %loop-merge250

post-loop-break239:                               ; No predecessors!
  br label %ifmerge240

ifmerge240:                                       ; preds = %loop-header237, %post-loop-break239
  %304 = load float addrspace(2)* @d9
  %305 = load float addrspace(2)* @d8
  %306 = fcmp ogt float %304, %305
  br i1 %306, label %then241, label %ifmerge249

then241:                                          ; preds = %ifmerge240
  %307 = load <4 x float>* %color
  %308 = extractelement <4 x float> %307, i32 0
  %309 = load float addrspace(2)* @d7
  %310 = fcmp ole float %308, %309
  br i1 %310, label %then242, label %ifmerge248

then242:                                          ; preds = %then241
  %311 = load <4 x float>* %color
  %312 = extractelement <4 x float> %311, i32 2
  %313 = fcmp oeq float %312, 5.000000e+00
  br i1 %313, label %then243, label %else245

then243:                                          ; preds = %then242
  %314 = load <4 x float>* %color
  %315 = extractelement <4 x float> %314, i32 3
  %316 = fadd float %315, 1.000000e+00
  %317 = load <4 x float>* %color
  %color244 = insertelement <4 x float> %317, float %316, i32 3
  store <4 x float> %color244, <4 x float>* %color
  br label %ifmerge247

else245:                                          ; preds = %then242
  br label %loop-merge250

post-loop-break246:                               ; No predecessors!
  br label %ifmerge247

ifmerge247:                                       ; preds = %post-loop-break246, %then243
  br label %ifmerge248

ifmerge248:                                       ; preds = %then241, %ifmerge247
  br label %ifmerge249

ifmerge249:                                       ; preds = %ifmerge240, %ifmerge248
  br label %loop-header237

loop-merge250:                                    ; preds = %else245, %then238
  br label %loop-header251

loop-header251:                                   ; preds = %post-loop-break266, %ifmerge262, %loop-merge250
  %318 = load <4 x float>* %color
  %319 = extractelement <4 x float> %318, i32 2
  %320 = load float addrspace(2)* @d10
  %321 = fcmp oge float %319, %320
  br i1 %321, label %then252, label %ifmerge254

then252:                                          ; preds = %loop-header251
  br label %loop-merge267

post-loop-break253:                               ; No predecessors!
  br label %ifmerge254

ifmerge254:                                       ; preds = %loop-header251, %post-loop-break253
  %322 = load <4 x float>* %color
  %323 = extractelement <4 x float> %322, i32 1
  %324 = fadd float %323, 1.000000e+00
  %325 = load <4 x float>* %color
  %color255 = insertelement <4 x float> %325, float %324, i32 1
  store <4 x float> %color255, <4 x float>* %color
  %326 = load <4 x float>* %color
  %327 = extractelement <4 x float> %326, i32 1
  %328 = load float addrspace(2)* @d11
  %329 = fcmp olt float %327, %328
  br i1 %329, label %then256, label %ifmerge264

then256:                                          ; preds = %ifmerge254
  %330 = load <4 x float>* %color
  %331 = extractelement <4 x float> %330, i32 2
  %332 = fadd float %331, 1.000000e+00
  %333 = load <4 x float>* %color
  %color257 = insertelement <4 x float> %333, float %332, i32 2
  store <4 x float> %color257, <4 x float>* %color
  %334 = load <4 x float>* %color
  %335 = extractelement <4 x float> %334, i32 3
  %336 = load float addrspace(2)* @d12
  %337 = fcmp olt float %335, %336
  br i1 %337, label %then258, label %else260

then258:                                          ; preds = %then256
  %338 = load <4 x float>* %color
  %339 = extractelement <4 x float> %338, i32 3
  %340 = fadd float %339, 1.000000e+00
  %341 = load <4 x float>* %color
  %color259 = insertelement <4 x float> %341, float %340, i32 3
  store <4 x float> %color259, <4 x float>* %color
  br label %ifmerge262

else260:                                          ; preds = %then256
  %342 = load <4 x float>* %color
  %343 = extractelement <4 x float> %342, i32 0
  %344 = fadd float %343, 1.000000e+00
  %345 = load <4 x float>* %color
  %color261 = insertelement <4 x float> %345, float %344, i32 0
  store <4 x float> %color261, <4 x float>* %color
  br label %ifmerge262

ifmerge262:                                       ; preds = %else260, %then258
  br label %loop-header251

post-loop-continue263:                            ; No predecessors!
  br label %ifmerge264

ifmerge264:                                       ; preds = %ifmerge254, %post-loop-continue263
  %346 = load <4 x float>* %color
  %color265 = fadd <4 x float> %346, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color265, <4 x float>* %color
  br label %loop-merge267

post-loop-break266:                               ; No predecessors!
  br label %loop-header251

loop-merge267:                                    ; preds = %ifmerge264, %then252
  br label %loop-header268

loop-header268:                                   ; preds = %ifmerge279, %then276, %loop-merge267
  %347 = load <4 x float>* %color
  %348 = extractelement <4 x float> %347, i32 0
  %349 = fcmp oge float %348, 1.000000e+01
  br i1 %349, label %then269, label %ifmerge271

then269:                                          ; preds = %loop-header268
  br label %loop-merge281

post-loop-break270:                               ; No predecessors!
  br label %ifmerge271

ifmerge271:                                       ; preds = %loop-header268, %post-loop-break270
  %350 = load <4 x float>* %color
  %351 = load <4 x float> addrspace(2)* @bigColor8
  %assignment_tmp272273 = fadd <4 x float> %350, %351
  store <4 x float> %assignment_tmp272273, <4 x float>* %assignment_tmp272
  %color274 = load <4 x float>* %assignment_tmp272
  store <4 x float> %color274, <4 x float>* %color
  %352 = load <4 x float>* %assignment_tmp272
  %353 = extractelement <4 x float> %352, i32 2
  %354 = load float addrspace(2)* @d8
  %355 = fcmp olt float %353, %354
  br i1 %355, label %then275, label %ifmerge279

then275:                                          ; preds = %ifmerge271
  %356 = load <4 x float>* %assignment_tmp272
  %357 = extractelement <4 x float> %356, i32 3
  %358 = load float addrspace(2)* @d6
  %359 = fcmp olt float %357, %358
  br i1 %359, label %then276, label %ifmerge278

then276:                                          ; preds = %then275
  br label %loop-header268

post-loop-continue277:                            ; No predecessors!
  br label %ifmerge278

ifmerge278:                                       ; preds = %then275, %post-loop-continue277
  br label %ifmerge279

ifmerge279:                                       ; preds = %ifmerge271, %ifmerge278
  %360 = load <4 x float>* %assignment_tmp272
  %361 = extractelement <4 x float> %360, i32 1
  %362 = load <4 x float> addrspace(2)* @bigColor8
  %363 = extractelement <4 x float> %362, i32 0
  %364 = fadd float %361, %363
  %365 = load <4 x float>* %color
  %color280 = insertelement <4 x float> %365, float %364, i32 1
  store <4 x float> %color280, <4 x float>* %color
  br label %loop-header268

loop-merge281:                                    ; preds = %then269
  br label %loop-header282

loop-header282:                                   ; preds = %ifmerge305, %then296, %loop-merge281
  %366 = load <4 x float>* %color
  %367 = extractelement <4 x float> %366, i32 3
  %368 = load float addrspace(2)* @d13
  %369 = fcmp oge float %367, %368
  br i1 %369, label %then283, label %ifmerge285

then283:                                          ; preds = %loop-header282
  br label %loop-merge306

post-loop-break284:                               ; No predecessors!
  br label %ifmerge285

ifmerge285:                                       ; preds = %loop-header282, %post-loop-break284
  %370 = load <4 x float>* %color
  %371 = extractelement <4 x float> %370, i32 2
  %372 = load float addrspace(2)* @d13
  %373 = fcmp olt float %371, %372
  br i1 %373, label %then286, label %else288

then286:                                          ; preds = %ifmerge285
  %374 = load <4 x float>* %color
  %color287 = fadd <4 x float> %374, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color287, <4 x float>* %color
  br label %ifmerge290

else288:                                          ; preds = %ifmerge285
  %375 = load <4 x float>* %color
  %color289 = fsub <4 x float> %375, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color289, <4 x float>* %color
  br label %ifmerge290

ifmerge290:                                       ; preds = %else288, %then286
  %376 = load <4 x float>* %color
  %377 = load <4 x float> addrspace(2)* @bigColor4
  %assignment_tmp291292 = fadd <4 x float> %376, %377
  store <4 x float> %assignment_tmp291292, <4 x float>* %assignment_tmp291
  %color293 = load <4 x float>* %assignment_tmp291
  store <4 x float> %color293, <4 x float>* %color
  %378 = load <4 x float>* %assignment_tmp291
  %379 = extractelement <4 x float> %378, i32 0
  %380 = load float addrspace(2)* @d4
  %381 = fcmp olt float %379, %380
  br i1 %381, label %then294, label %ifmerge300

then294:                                          ; preds = %ifmerge290
  %382 = load <4 x float>* %assignment_tmp291
  %383 = extractelement <4 x float> %382, i32 2
  %384 = fadd float %383, 2.000000e+00
  %385 = load <4 x float>* %color
  %color295 = insertelement <4 x float> %385, float %384, i32 2
  store <4 x float> %color295, <4 x float>* %color
  %386 = load <4 x float>* %color
  %387 = extractelement <4 x float> %386, i32 2
  %388 = load float addrspace(2)* @d4
  %389 = fcmp olt float %387, %388
  br i1 %389, label %then296, label %ifmerge299

then296:                                          ; preds = %then294
  %390 = load <4 x float>* %color
  %391 = extractelement <4 x float> %390, i32 0
  %392 = fadd float %391, 1.000000e+00
  %393 = load <4 x float>* %color
  %color297 = insertelement <4 x float> %393, float %392, i32 0
  store <4 x float> %color297, <4 x float>* %color
  br label %loop-header282

post-loop-continue298:                            ; No predecessors!
  br label %ifmerge299

ifmerge299:                                       ; preds = %then294, %post-loop-continue298
  br label %ifmerge300

ifmerge300:                                       ; preds = %ifmerge290, %ifmerge299
  %394 = load <4 x float>* %color
  %395 = extractelement <4 x float> %394, i32 1
  %396 = load float addrspace(2)* @d4
  %397 = fcmp olt float %395, %396
  br i1 %397, label %then301, label %else303

then301:                                          ; preds = %ifmerge300
  %398 = load <4 x float>* %color
  %399 = extractelement <4 x float> %398, i32 1
  %400 = load float addrspace(2)* @d4
  %401 = fadd float %399, %400
  %402 = load <4 x float>* %color
  %color302 = insertelement <4 x float> %402, float %401, i32 1
  store <4 x float> %color302, <4 x float>* %color
  br label %ifmerge305

else303:                                          ; preds = %ifmerge300
  %403 = load <4 x float>* %color
  %404 = extractelement <4 x float> %403, i32 0
  %405 = load float addrspace(2)* @d4
  %406 = fadd float %404, %405
  %407 = load <4 x float>* %color
  %color304 = insertelement <4 x float> %407, float %406, i32 0
  store <4 x float> %color304, <4 x float>* %color
  br label %ifmerge305

ifmerge305:                                       ; preds = %else303, %then301
  br label %loop-header282

loop-merge306:                                    ; preds = %then283
  %408 = load <4 x float>* %color
  %assignment_tmp307308 = fadd <4 x float> %408, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %assignment_tmp307308, <4 x float>* %assignment_tmp307
  %color309 = load <4 x float>* %assignment_tmp307
  store <4 x float> %color309, <4 x float>* %color
  %gl_FragColor = load <4 x float>* %assignment_tmp307
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %loop-header310

loop-header310:                                   ; preds = %ifmerge317, %loop-merge306
  %409 = load <4 x float>* %color
  %410 = extractelement <4 x float> %409, i32 0
  %411 = load float addrspace(2)* @d14
  %412 = fcmp oge float %410, %411
  br i1 %412, label %then311, label %ifmerge313

then311:                                          ; preds = %loop-header310
  br label %loop-merge318

post-loop-break312:                               ; No predecessors!
  br label %ifmerge313

ifmerge313:                                       ; preds = %loop-header310, %post-loop-break312
  %413 = load <4 x float>* %color
  %414 = extractelement <4 x float> %413, i32 1
  %415 = load float addrspace(2)* @d15
  %416 = fcmp olt float %414, %415
  br i1 %416, label %then314, label %else315

then314:                                          ; preds = %ifmerge313
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge317

else315:                                          ; preds = %ifmerge313
  %417 = load <4 x float>* %color
  %color316 = fadd <4 x float> %417, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color316, <4 x float>* %color
  br label %ifmerge317

ifmerge317:                                       ; preds = %else315, %post-return
  br label %loop-header310

loop-merge318:                                    ; preds = %then311
  %418 = load <4 x float>* %color
  %color319 = fadd <4 x float> %418, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color319, <4 x float>* %color
  br label %loop-header320

loop-header320:                                   ; preds = %ifmerge323, %loop-merge318
  %419 = load <4 x float>* %color
  %420 = extractelement <4 x float> %419, i32 3
  %421 = load float addrspace(2)* @d16
  %422 = fcmp oge float %420, %421
  br i1 %422, label %then321, label %ifmerge323

then321:                                          ; preds = %loop-header320
  br label %loop-merge325

post-loop-break322:                               ; No predecessors!
  br label %ifmerge323

ifmerge323:                                       ; preds = %loop-header320, %post-loop-break322
  %423 = load <4 x float>* %color
  %424 = extractelement <4 x float> %423, i32 3
  %425 = fadd float %424, 1.000000e+00
  %426 = load <4 x float>* %color
  %color324 = insertelement <4 x float> %426, float %425, i32 3
  store <4 x float> %color324, <4 x float>* %color
  br label %loop-header320

loop-merge325:                                    ; preds = %then321
  br label %loop-header326

loop-header326:                                   ; preds = %ifmerge340, %loop-merge325
  %427 = load <4 x float>* %color
  %428 = extractelement <4 x float> %427, i32 3
  %429 = load float addrspace(2)* @d2
  %430 = fcmp olt float %428, %429
  br i1 %430, label %then328, label %else330

then328:                                          ; preds = %loop-header326
  %431 = load <4 x float>* %color
  %432 = extractelement <4 x float> %431, i32 1
  %433 = load float addrspace(2)* @d3
  %and_tmp327329 = fcmp olt float %432, %433
  store i1 %and_tmp327329, i1* %and_tmp327
  br label %ifmerge331

else330:                                          ; preds = %loop-header326
  store i1 false, i1* %and_tmp327
  br label %ifmerge331

ifmerge331:                                       ; preds = %else330, %then328
  %434 = load i1* %and_tmp327
  %435 = xor i1 %434, true
  br i1 %435, label %then332, label %ifmerge334

then332:                                          ; preds = %ifmerge331
  br label %loop-merge341

post-loop-break333:                               ; No predecessors!
  br label %ifmerge334

ifmerge334:                                       ; preds = %ifmerge331, %post-loop-break333
  %436 = load <4 x float>* %color
  %437 = load <4 x float> addrspace(2)* @bigColor1_2
  %assignment_tmp335336 = fadd <4 x float> %436, %437
  store <4 x float> %assignment_tmp335336, <4 x float>* %assignment_tmp335
  %color337 = load <4 x float>* %assignment_tmp335
  store <4 x float> %color337, <4 x float>* %color
  %438 = load <4 x float>* %assignment_tmp335
  %439 = extractelement <4 x float> %438, i32 2
  %440 = load float addrspace(2)* @d3
  %441 = fcmp olt float %439, %440
  br i1 %441, label %then338, label %ifmerge340

then338:                                          ; preds = %ifmerge334
  br label %stage-epilogue

post-return339:                                   ; No predecessors!
  br label %ifmerge340

ifmerge340:                                       ; preds = %ifmerge334, %post-return339
  br label %loop-header326

loop-merge341:                                    ; preds = %then332
  br label %loop-header342

loop-header342:                                   ; preds = %ifmerge351, %loop-merge341
  %442 = load <4 x float>* %color
  %443 = extractelement <4 x float> %442, i32 1
  %444 = load float addrspace(2)* @d18
  %445 = fcmp olt float %443, %444
  br i1 %445, label %then343, label %ifmerge345

then343:                                          ; preds = %loop-header342
  br label %stage-epilogue

post-return344:                                   ; No predecessors!
  br label %ifmerge345

ifmerge345:                                       ; preds = %loop-header342, %post-return344
  %446 = load <4 x float>* %color
  %assignment_tmp346347 = fadd <4 x float> %446, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %assignment_tmp346347, <4 x float>* %assignment_tmp346
  %color348 = load <4 x float>* %assignment_tmp346
  store <4 x float> %color348, <4 x float>* %color
  %447 = load <4 x float>* %assignment_tmp346
  %448 = extractelement <4 x float> %447, i32 0
  %449 = load float addrspace(2)* @d17
  %450 = fcmp oge float %448, %449
  br i1 %450, label %then349, label %ifmerge351

then349:                                          ; preds = %ifmerge345
  br label %loop-merge352

post-loop-break350:                               ; No predecessors!
  br label %ifmerge351

ifmerge351:                                       ; preds = %ifmerge345, %post-loop-break350
  br label %loop-header342

loop-merge352:                                    ; preds = %then349
  br label %loop-header353

loop-header353:                                   ; preds = %ifmerge360, %loop-merge352
  %451 = load <4 x float>* %color
  %452 = extractelement <4 x float> %451, i32 1
  %453 = load float addrspace(2)* @d16
  %454 = fcmp oge float %452, %453
  br i1 %454, label %then354, label %ifmerge356

then354:                                          ; preds = %loop-header353
  br label %loop-merge361

post-loop-break355:                               ; No predecessors!
  br label %ifmerge356

ifmerge356:                                       ; preds = %loop-header353, %post-loop-break355
  %455 = load <4 x float>* %color
  %456 = extractelement <4 x float> %455, i32 3
  %457 = load float addrspace(2)* @d16
  %458 = fcmp olt float %456, %457
  br i1 %458, label %then357, label %else358

then357:                                          ; preds = %ifmerge356
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge360

else358:                                          ; preds = %ifmerge356
  %459 = load <4 x float>* %color
  %color359 = fadd <4 x float> %459, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color359, <4 x float>* %color
  br label %ifmerge360

ifmerge360:                                       ; preds = %else358, %post-discard
  br label %loop-header353

loop-merge361:                                    ; preds = %then354
  %460 = load <4 x float>* %color
  %assignment_tmp362363 = fadd <4 x float> %460, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %assignment_tmp362363, <4 x float>* %assignment_tmp362
  %color364 = load <4 x float>* %assignment_tmp362
  store <4 x float> %color364, <4 x float>* %color
  %gl_FragColor365 = load <4 x float>* %assignment_tmp362
  store <4 x float> %gl_FragColor365, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge361, %then343, %then338, %then314
  %461 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %461)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then357
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@d13 = external addrspace(2) constant float
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %0 = extractelement <4 x float> %BaseColor, i32 0
  %1 = fcmp olt float %0, 0x3FD51EB860000000
  %2 = fcmp olt float %0, 0x3FE51EB860000000
  %select373.v = select i1 %2, <4 x float> <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  %select374.v = select i1 %1, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>, <4 x float> %select373.v
  %select374 = fadd <4 x float> %BaseColor, %select374.v
  %.pre = load float addrspace(2)* @d, align 4
  %3 = load <4 x float> addrspace(2)* @bigColor, align 16
  br label %loop-header13

loop-header13:                                    ; preds = %ifmerge16, %entry
  %color.1 = phi <4 x float> [ %select374, %entry ], [ %color17, %ifmerge16 ]
  %4 = extractelement <4 x float> %color.1, i32 0
  %5 = fcmp ult float %4, %.pre
  br i1 %5, label %ifmerge16, label %then14

then14:                                           ; preds = %loop-header13
  %6 = load <4 x float> addrspace(2)* @bigColor1_1, align 16
  br label %loop-header19

ifmerge16:                                        ; preds = %loop-header13
  %color17 = fadd <4 x float> %color.1, %3
  br label %loop-header13

loop-header19:                                    ; preds = %ifmerge22, %then14
  %color.2 = phi <4 x float> [ %color.1, %then14 ], [ %select381, %ifmerge22 ]
  %7 = extractelement <4 x float> %color.2, i32 2
  %8 = fcmp ult float %7, %.pre
  br i1 %8, label %ifmerge22, label %then20

then20:                                           ; preds = %loop-header19
  br label %loop-header29

ifmerge22:                                        ; preds = %loop-header19
  %assignment_tmp23 = fadd <4 x float> %color.2, %6
  %9 = extractelement <4 x float> %assignment_tmp23, i32 3
  %10 = fcmp olt float %9, %.pre
  %color27 = fadd <4 x float> %assignment_tmp23, %6
  %select381 = select i1 %10, <4 x float> %assignment_tmp23, <4 x float> %color27
  br label %loop-header19

loop-header29:                                    ; preds = %ifmerge32, %then20
  %color.3 = phi <4 x float> [ %color.2, %then20 ], [ %color33, %ifmerge32 ]
  %11 = extractelement <4 x float> %color.3, i32 0
  %12 = fcmp ult float %11, 4.200000e+01
  br i1 %12, label %ifmerge32, label %then30

then30:                                           ; preds = %loop-header29
  %.pre384 = load float addrspace(2)* @d2, align 4
  %.pre385 = load float addrspace(2)* @d3, align 4
  %13 = load <4 x float> addrspace(2)* @bigColor1_2, align 16
  br label %loop-header35

ifmerge32:                                        ; preds = %loop-header29
  %color33 = fadd <4 x float> %color.3, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header29

loop-header35:                                    ; preds = %ifmerge41, %then30
  %color.4 = phi <4 x float> [ %color.3, %then30 ], [ %color42, %ifmerge41 ]
  %14 = extractelement <4 x float> %color.4, i32 3
  %15 = extractelement <4 x float> %color.4, i32 1
  %phitmp = fcmp uge float %15, %.pre385
  %not. = fcmp uge float %14, %.pre384
  %select379 = or i1 %phitmp, %not.
  br i1 %select379, label %then39, label %ifmerge41

then39:                                           ; preds = %loop-header35
  %16 = load <4 x float> addrspace(2)* @bigColor1_3, align 16
  %17 = load float addrspace(2)* @d4, align 4
  br label %loop-header44

ifmerge41:                                        ; preds = %loop-header35
  %color42 = fadd <4 x float> %color.4, %13
  br label %loop-header35

loop-header44:                                    ; preds = %ifmerge53, %then39
  %color.5 = phi <4 x float> [ %color.4, %then39 ], [ %color54, %ifmerge53 ]
  %18 = extractelement <4 x float> %color.5, i32 2
  %19 = fcmp ult float %18, %.pre385
  br i1 %19, label %ifmerge47, label %then45

then45:                                           ; preds = %loop-header44
  br label %loop-merge55

ifmerge47:                                        ; preds = %loop-header44
  %assignment_tmp4849 = fadd <4 x float> %color.5, %16
  %20 = extractelement <4 x float> %assignment_tmp4849, i32 1
  %21 = fcmp olt float %20, %17
  br i1 %21, label %then51, label %ifmerge53

then51:                                           ; preds = %ifmerge47
  br label %loop-merge55

ifmerge53:                                        ; preds = %ifmerge47
  %color54 = fadd <4 x float> %assignment_tmp4849, %16
  br label %loop-header44

loop-merge55:                                     ; preds = %then51, %then45
  %color.6 = phi <4 x float> [ %color.5, %then45 ], [ %assignment_tmp4849, %then51 ]
  %.pre386 = load i32 addrspace(2)* @Count, align 4
  %22 = load <4 x float> addrspace(2)* @bigColor2, align 16
  %tmp463 = icmp sgt i32 %.pre386, 0
  %smax = select i1 %tmp463, i32 %.pre386, i32 0
  br label %loop-header56

loop-header56:                                    ; preds = %ifmerge59, %loop-merge55
  %indvar461 = phi i32 [ %indvar.next462, %ifmerge59 ], [ 0, %loop-merge55 ]
  %color.7 = phi <4 x float> [ %color60, %ifmerge59 ], [ %color.6, %loop-merge55 ]
  %exitcond464 = icmp eq i32 %indvar461, %smax
  br i1 %exitcond464, label %then57, label %ifmerge59

then57:                                           ; preds = %loop-header56
  %.pre387 = load <4 x float> addrspace(2)* @bigColor3, align 16
  br label %loop-header63

ifmerge59:                                        ; preds = %loop-header56
  %color60 = fadd <4 x float> %color.7, %22
  %indvar.next462 = add i32 %indvar461, 1
  br label %loop-header56

loop-header63:                                    ; preds = %ifmerge69, %then57
  %color.8 = phi <4 x float> [ %color.7, %then57 ], [ %assignment_tmp6465, %ifmerge69 ]
  %assignment_tmp6465 = fadd <4 x float> %color.8, %.pre387
  %23 = extractelement <4 x float> %assignment_tmp6465, i32 0
  %24 = fcmp ult float %23, %.pre384
  br i1 %24, label %ifmerge69, label %then67

then67:                                           ; preds = %loop-header63
  br label %loop-header72

ifmerge69:                                        ; preds = %loop-header63
  br label %loop-header63

loop-header72:                                    ; preds = %loop-header72, %then67
  %indvar458 = phi i32 [ %indvar.next459, %loop-header72 ], [ 0, %then67 ]
  %color.9 = phi <4 x float> [ %27, %loop-header72 ], [ %assignment_tmp6465, %then67 ]
  %25 = extractelement <4 x float> %color.9, i32 2
  %26 = fadd float %25, %.pre385
  %27 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.9, i32 4, float undef, i32 undef, float undef, i32 undef, float %26, i32 0, float undef, i32 undef)
  %indvar.next459 = add i32 %indvar458, 1
  %exitcond460 = icmp eq i32 %indvar.next459, 42
  br i1 %exitcond460, label %loop-merge75, label %loop-header72

loop-merge75:                                     ; preds = %loop-header72
  br label %loop-header77

loop-header77:                                    ; preds = %loop-header77, %loop-merge75
  %indvar454 = phi i32 [ %indvar.next455, %loop-header77 ], [ 0, %loop-merge75 ]
  %color.10 = phi <4 x float> [ %select382, %loop-header77 ], [ %27, %loop-merge75 ]
  %28 = extractelement <4 x float> %color.10, i32 2
  %29 = fcmp olt float %28, 2.000000e+01
  %30 = extractelement <4 x float> %color.10, i32 0
  %31 = fadd float %30, 1.000000e+00
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 1, float %31, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %33 = extractelement <4 x float> %color.10, i32 1
  %34 = fadd float %33, 1.000000e+00
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 2, float undef, i32 undef, float %34, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select382 = select i1 %29, <4 x float> %32, <4 x float> %35
  %indvar.next455 = add i32 %indvar454, 1
  %exitcond456 = icmp eq i32 %indvar.next455, 100
  br i1 %exitcond456, label %loop-merge88, label %loop-header77

loop-merge88:                                     ; preds = %loop-header77
  br label %loop-header90

loop-header90:                                    ; preds = %loop-header90, %loop-merge88
  %indvar452 = phi i32 [ %indvar.next453, %loop-header90 ], [ 0, %loop-merge88 ]
  %color.12 = phi <4 x float> [ %select368, %loop-header90 ], [ %select382, %loop-merge88 ]
  %36 = extractelement <4 x float> %color.12, i32 2
  %37 = fcmp olt float %36, 2.000000e+01
  %38 = extractelement <4 x float> %color.12, i32 0
  %39 = fadd float %38, 1.000000e+00
  %40 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 1, float %39, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %41 = extractelement <4 x float> %color.12, i32 1
  %42 = fadd float %41, 1.000000e+00
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 2, float undef, i32 undef, float %42, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select368 = select i1 %37, <4 x float> %40, <4 x float> %43
  %indvar.next453 = add i32 %indvar452, 1
  %exitcond = icmp eq i32 %indvar.next453, 120
  br i1 %exitcond, label %loop-merge97, label %loop-header90

loop-merge97:                                     ; preds = %loop-header90
  br label %loop-header98

loop-header98:                                    ; preds = %ifmerge101, %loop-merge97
  %indvar = phi i32 [ %indvar.next, %ifmerge101 ], [ 0, %loop-merge97 ]
  %color.14 = phi <4 x float> [ %select370, %ifmerge101 ], [ %select368, %loop-merge97 ]
  %exitcond451 = icmp eq i32 %indvar, 42
  br i1 %exitcond451, label %then99, label %ifmerge101

then99:                                           ; preds = %loop-header98
  br label %loop-header111

ifmerge101:                                       ; preds = %loop-header98
  %44 = extractelement <4 x float> %color.14, i32 2
  %45 = fadd float %44, %.pre385
  %46 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 4, float undef, i32 undef, float undef, i32 undef, float %45, i32 0, float undef, i32 undef)
  %47 = extractelement <4 x float> %color.14, i32 0
  %48 = fcmp olt float %47, %17
  %49 = extractelement <4 x float> %color.14, i32 3
  %50 = fadd float %49, 1.000000e+00
  %51 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 12, float undef, i32 undef, float undef, i32 undef, float %45, i32 0, float %50, i32 0)
  %select370 = select i1 %48, <4 x float> %46, <4 x float> %51
  %indvar.next = add i32 %indvar, 1
  br label %loop-header98

loop-header111:                                   ; preds = %ifmerge115, %then99
  %i110.0 = phi i32 [ 0, %then99 ], [ %60, %ifmerge115 ]
  %color.15 = phi <4 x float> [ %color.14, %then99 ], [ %59, %ifmerge115 ]
  %tmp = add i32 %i110.0, 1
  %52 = extractelement <4 x float> %color.15, i32 2
  %53 = fadd float %52, %.pre385
  %54 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.15, i32 4, float undef, i32 undef, float undef, i32 undef, float %53, i32 0, float undef, i32 undef)
  %55 = extractelement <4 x float> %color.15, i32 0
  %56 = fcmp olt float %55, %17
  br i1 %56, label %then113, label %ifmerge115

then113:                                          ; preds = %loop-header111
  br label %loop-merge118

ifmerge115:                                       ; preds = %loop-header111
  %57 = extractelement <4 x float> %color.15, i32 3
  %58 = fadd float %57, 1.000000e+00
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %54, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %58, i32 0)
  %60 = add i32 %i110.0, 1
  %61 = icmp sgt i32 %tmp, 41
  br i1 %61, label %loop-merge118.loopexit, label %loop-header111

loop-merge118.loopexit:                           ; preds = %ifmerge115
  br label %loop-merge118

loop-merge118:                                    ; preds = %loop-merge118.loopexit, %then113
  %color.16 = phi <4 x float> [ %54, %then113 ], [ %59, %loop-merge118.loopexit ]
  %.pre389 = load <4 x float> addrspace(2)* @bigColor4, align 16
  br label %loop-header119

loop-header119:                                   ; preds = %loop-header119.backedge, %loop-merge118
  %color.17 = phi <4 x float> [ %color.16, %loop-merge118 ], [ %color.17.be, %loop-header119.backedge ]
  %assignment_tmp120121 = fadd <4 x float> %color.17, %.pre389
  %62 = extractelement <4 x float> %assignment_tmp120121, i32 0
  %63 = fcmp olt float %62, %17
  br i1 %63, label %then123, label %ifmerge125

then123:                                          ; preds = %loop-header119
  br label %loop-header119.backedge

loop-header119.backedge:                          ; preds = %then123, %ifmerge133
  %color.17.be = phi <4 x float> [ %assignment_tmp120121, %then123 ], [ %select, %ifmerge133 ]
  br label %loop-header119

ifmerge125:                                       ; preds = %loop-header119
  %64 = extractelement <4 x float> %assignment_tmp120121, i32 1
  %65 = fcmp olt float %64, %17
  %66 = fadd float %64, %17
  %67 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp120121, i32 2, float undef, i32 undef, float %66, i32 0, float undef, i32 undef, float undef, i32 undef)
  %68 = fadd float %62, %17
  %69 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp120121, i32 1, float %68, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select = select i1 %65, <4 x float> %67, <4 x float> %69
  %70 = extractelement <4 x float> %select, i32 2
  %71 = fcmp ult float %70, %17
  br i1 %71, label %ifmerge133, label %then131

then131:                                          ; preds = %ifmerge125
  br label %loop-header135

ifmerge133:                                       ; preds = %ifmerge125
  br label %loop-header119.backedge

loop-header135:                                   ; preds = %loop-header135.backedge, %then131
  %color.19 = phi <4 x float> [ %select, %then131 ], [ %color.19.be, %loop-header135.backedge ]
  %assignment_tmp136137 = fadd <4 x float> %color.19, %.pre389
  %72 = extractelement <4 x float> %assignment_tmp136137, i32 0
  %73 = fcmp olt float %72, %17
  br i1 %73, label %then139, label %ifmerge145

then139:                                          ; preds = %loop-header135
  %74 = extractelement <4 x float> %assignment_tmp136137, i32 2
  %75 = fadd float %74, 2.000000e+00
  %76 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp136137, i32 4, float undef, i32 undef, float undef, i32 undef, float %75, i32 0, float undef, i32 undef)
  %77 = fcmp olt float %75, %17
  br i1 %77, label %then141, label %ifmerge144

then141:                                          ; preds = %then139
  %78 = fadd float %72, 1.000000e+00
  %79 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %76, i32 1, float %78, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  br label %loop-header135.backedge

loop-header135.backedge:                          ; preds = %then141, %ifmerge153
  %color.19.be = phi <4 x float> [ %79, %then141 ], [ %select376, %ifmerge153 ]
  br label %loop-header135

ifmerge144:                                       ; preds = %then139
  br label %ifmerge145

ifmerge145:                                       ; preds = %loop-header135, %ifmerge144
  %color.20 = phi <4 x float> [ %76, %ifmerge144 ], [ %assignment_tmp136137, %loop-header135 ]
  %80 = extractelement <4 x float> %color.20, i32 1
  %81 = fcmp olt float %80, %17
  %82 = fadd float %80, %17
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.20, i32 2, float undef, i32 undef, float %82, i32 0, float undef, i32 undef, float undef, i32 undef)
  %84 = extractelement <4 x float> %color.20, i32 0
  %85 = fadd float %84, %17
  %86 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.20, i32 1, float %85, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select376 = select i1 %81, <4 x float> %83, <4 x float> %86
  %87 = extractelement <4 x float> %select376, i32 2
  %88 = fcmp ult float %87, %17
  br i1 %88, label %ifmerge153, label %then151

then151:                                          ; preds = %ifmerge145
  %.pre390 = load <4 x float> addrspace(2)* @bigColor5, align 16
  %.pre391 = load float addrspace(2)* @d5, align 4
  br label %loop-header155

ifmerge153:                                       ; preds = %ifmerge145
  br label %loop-header135.backedge

loop-header155:                                   ; preds = %ifmerge164, %then151
  %color.22 = phi <4 x float> [ %select376, %then151 ], [ %select378, %ifmerge164 ]
  %assignment_tmp156157 = fadd <4 x float> %color.22, %.pre390
  %89 = extractelement <4 x float> %assignment_tmp156157, i32 1
  %90 = fcmp olt float %89, %.pre391
  %91 = fadd float %89, %.pre391
  %92 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp156157, i32 2, float undef, i32 undef, float %91, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select378 = select i1 %90, <4 x float> %92, <4 x float> %assignment_tmp156157
  %93 = extractelement <4 x float> %select378, i32 0
  %94 = fcmp ult float %93, %.pre391
  br i1 %94, label %ifmerge164, label %then162

then162:                                          ; preds = %loop-header155
  %95 = load float addrspace(2)* @d6, align 4
  %96 = fcmp olt float %93, %95
  br i1 %96, label %then166, label %else173

ifmerge164:                                       ; preds = %loop-header155
  br label %loop-header155

then166:                                          ; preds = %then162
  %97 = load <4 x float> addrspace(2)* @bigColor6, align 16
  br label %loop-header167

loop-header167:                                   ; preds = %ifmerge170, %then166
  %color.24 = phi <4 x float> [ %select378, %then166 ], [ %color171, %ifmerge170 ]
  %98 = extractelement <4 x float> %color.24, i32 1
  %99 = fcmp ult float %98, %95
  br i1 %99, label %ifmerge170, label %then168

then168:                                          ; preds = %loop-header167
  br label %ifmerge180

ifmerge170:                                       ; preds = %loop-header167
  %color171 = fadd <4 x float> %color.24, %97
  br label %loop-header167

else173:                                          ; preds = %then162
  %100 = load <4 x float> addrspace(2)* @bigColor6, align 16
  %101 = extractelement <4 x float> %100, i32 2
  br label %loop-header174

loop-header174:                                   ; preds = %ifmerge177, %else173
  %color.25 = phi <4 x float> [ %select378, %else173 ], [ %105, %ifmerge177 ]
  %102 = extractelement <4 x float> %color.25, i32 2
  %103 = fcmp ult float %102, %95
  br i1 %103, label %ifmerge177, label %then175

then175:                                          ; preds = %loop-header174
  br label %ifmerge180

ifmerge177:                                       ; preds = %loop-header174
  %104 = fadd float %102, %101
  %105 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.25, i32 4, float undef, i32 undef, float undef, i32 undef, float %104, i32 0, float undef, i32 undef)
  br label %loop-header174

ifmerge180:                                       ; preds = %then175, %then168
  %106 = phi <4 x float> [ %97, %then168 ], [ %100, %then175 ]
  %color.26 = phi <4 x float> [ %color.24, %then168 ], [ %color.25, %then175 ]
  %107 = extractelement <4 x float> %color.26, i32 0
  %108 = fcmp olt float %107, %95
  br i1 %108, label %then181, label %else191

then181:                                          ; preds = %ifmerge180
  %109 = load float addrspace(2)* @d7, align 4
  %110 = fcmp olt float %109, 1.000000e+00
  br label %loop-header182

loop-header182:                                   ; preds = %ifmerge189, %then181
  %color.27 = phi <4 x float> [ %color.26, %then181 ], [ %color186, %ifmerge189 ]
  %111 = extractelement <4 x float> %color.27, i32 1
  %112 = fcmp ult float %111, %95
  br i1 %112, label %ifmerge185, label %then183

then183:                                          ; preds = %loop-header182
  br label %loop-merge190

ifmerge185:                                       ; preds = %loop-header182
  %color186 = fadd <4 x float> %color.27, %106
  br i1 %110, label %then187, label %ifmerge189

then187:                                          ; preds = %ifmerge185
  br label %loop-merge190

ifmerge189:                                       ; preds = %ifmerge185
  br label %loop-header182

loop-merge190:                                    ; preds = %then187, %then183
  %color.28 = phi <4 x float> [ %color.27, %then183 ], [ %color186, %then187 ]
  br label %ifmerge198

else191:                                          ; preds = %ifmerge180
  %113 = extractelement <4 x float> %106, i32 2
  br label %loop-header192

loop-header192:                                   ; preds = %ifmerge195, %else191
  %color.29 = phi <4 x float> [ %color.26, %else191 ], [ %117, %ifmerge195 ]
  %114 = extractelement <4 x float> %color.29, i32 2
  %115 = fcmp ult float %114, %95
  br i1 %115, label %ifmerge195, label %then193

then193:                                          ; preds = %loop-header192
  br label %ifmerge198

ifmerge195:                                       ; preds = %loop-header192
  %116 = fadd float %114, %113
  %117 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.29, i32 4, float undef, i32 undef, float undef, i32 undef, float %116, i32 0, float undef, i32 undef)
  br label %loop-header192

ifmerge198:                                       ; preds = %then193, %loop-merge190
  %color.30 = phi <4 x float> [ %color.28, %loop-merge190 ], [ %color.29, %then193 ]
  %.pre392 = load float addrspace(2)* @d7, align 4
  %.pre400 = fcmp olt float %.pre392, 0.000000e+00
  %118 = load <4 x float> addrspace(2)* @bigColor7, align 16
  %119 = fcmp olt float %.pre392, 1.000000e+00
  br label %loop-header199

loop-header199:                                   ; preds = %ifmerge209, %ifmerge198
  %.pre-phi = phi i1 [ false, %ifmerge209 ], [ %.pre400, %ifmerge198 ]
  %color.31 = phi <4 x float> [ %color211, %ifmerge209 ], [ %color.30, %ifmerge198 ]
  br i1 %.pre-phi, label %then200, label %ifmerge202

then200:                                          ; preds = %loop-header199
  br label %loop-merge212

ifmerge202:                                       ; preds = %loop-header199
  %assignment_tmp203204 = fadd <4 x float> %color.31, %118
  br i1 %119, label %then206, label %ifmerge209

then206:                                          ; preds = %ifmerge202
  %120 = extractelement <4 x float> %assignment_tmp203204, i32 2
  %121 = fadd float %120, 1.000000e+00
  %122 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp203204, i32 4, float undef, i32 undef, float undef, i32 undef, float %121, i32 0, float undef, i32 undef)
  br label %loop-merge212

ifmerge209:                                       ; preds = %ifmerge202
  %color211 = fadd <4 x float> %assignment_tmp203204, %BaseColor
  br label %loop-header199

loop-merge212:                                    ; preds = %then206, %then200
  %color.32 = phi <4 x float> [ %color.31, %then200 ], [ %122, %then206 ]
  %.pre393 = load float addrspace(2)* @d8, align 4
  %.pre401 = fcmp olt float %.pre393, 0.000000e+00
  %123 = fcmp olt float %.pre393, 1.000000e+00
  br label %loop-header213

loop-header213:                                   ; preds = %ifmerge235, %loop-merge212
  %.pre-phi402 = phi i1 [ false, %ifmerge235 ], [ %.pre401, %loop-merge212 ]
  %color.33 = phi <4 x float> [ %assignment_tmp229231, %ifmerge235 ], [ %color.32, %loop-merge212 ]
  br i1 %.pre-phi402, label %then214, label %ifmerge216

then214:                                          ; preds = %loop-header213
  br label %loop-merge236

ifmerge216:                                       ; preds = %loop-header213
  %assignment_tmp217218 = fadd <4 x float> %color.33, %118
  br i1 %123, label %then220, label %ifmerge228

then220:                                          ; preds = %ifmerge216
  %124 = extractelement <4 x float> %assignment_tmp217218, i32 2
  %125 = fadd float %124, 1.000000e+00
  %126 = fcmp olt float %.pre393, 2.000000e+00
  %127 = extractelement <4 x float> %assignment_tmp217218, i32 1
  %128 = fadd float %127, 1.000000e+00
  %129 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp217218, i32 6, float undef, i32 undef, float %128, i32 0, float %125, i32 0, float undef, i32 undef)
  %130 = extractelement <4 x float> %assignment_tmp217218, i32 0
  %131 = fadd float %130, 1.000000e+00
  %132 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp217218, i32 5, float %131, i32 0, float undef, i32 undef, float %125, i32 0, float undef, i32 undef)
  %select372 = select i1 %126, <4 x float> %129, <4 x float> %132
  br label %loop-merge236

ifmerge228:                                       ; preds = %ifmerge216
  %assignment_tmp229231 = fadd <4 x float> %assignment_tmp217218, %BaseColor
  %133 = extractelement <4 x float> %assignment_tmp229231, i32 2
  %134 = fcmp ult float %133, %.pre393
  br i1 %134, label %ifmerge235, label %then233

then233:                                          ; preds = %ifmerge228
  br label %loop-merge236

ifmerge235:                                       ; preds = %ifmerge228
  br label %loop-header213

loop-merge236:                                    ; preds = %then233, %then220, %then214
  %color.35 = phi <4 x float> [ %color.33, %then214 ], [ %select372, %then220 ], [ %assignment_tmp229231, %then233 ]
  %.pre394 = load float addrspace(2)* @d9, align 4
  %135 = fcmp ogt float %.pre394, %.pre393
  br label %loop-header237

loop-header237:                                   ; preds = %ifmerge249, %loop-merge236
  %color.36 = phi <4 x float> [ %color.35, %loop-merge236 ], [ %color.38, %ifmerge249 ]
  %136 = extractelement <4 x float> %color.36, i32 3
  %137 = fcmp ult float %136, %.pre394
  br i1 %137, label %ifmerge240, label %then238

then238:                                          ; preds = %loop-header237
  br label %loop-merge250

ifmerge240:                                       ; preds = %loop-header237
  br i1 %135, label %then241, label %ifmerge249

then241:                                          ; preds = %ifmerge240
  %138 = extractelement <4 x float> %color.36, i32 0
  %139 = fcmp ugt float %138, %.pre392
  br i1 %139, label %ifmerge248, label %then242

then242:                                          ; preds = %then241
  %140 = extractelement <4 x float> %color.36, i32 2
  %141 = fcmp oeq float %140, 5.000000e+00
  br i1 %141, label %then243, label %else245

then243:                                          ; preds = %then242
  %142 = fadd float %136, 1.000000e+00
  %143 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.36, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %142, i32 0)
  br label %ifmerge248

else245:                                          ; preds = %then242
  br label %loop-merge250

ifmerge248:                                       ; preds = %then241, %then243
  %color.37 = phi <4 x float> [ %143, %then243 ], [ %color.36, %then241 ]
  br label %ifmerge249

ifmerge249:                                       ; preds = %ifmerge240, %ifmerge248
  %color.38 = phi <4 x float> [ %color.37, %ifmerge248 ], [ %color.36, %ifmerge240 ]
  br label %loop-header237

loop-merge250:                                    ; preds = %else245, %then238
  %.pre395 = load float addrspace(2)* @d10, align 4
  %144 = load float addrspace(2)* @d11, align 4
  %145 = load float addrspace(2)* @d12, align 4
  br label %loop-header251

loop-header251:                                   ; preds = %then256, %loop-merge250
  %color.39 = phi <4 x float> [ %color.36, %loop-merge250 ], [ %select369, %then256 ]
  %146 = extractelement <4 x float> %color.39, i32 2
  %147 = fcmp ult float %146, %.pre395
  br i1 %147, label %ifmerge254, label %then252

then252:                                          ; preds = %loop-header251
  br label %loop-merge267

ifmerge254:                                       ; preds = %loop-header251
  %148 = extractelement <4 x float> %color.39, i32 1
  %149 = fadd float %148, 1.000000e+00
  %150 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.39, i32 2, float undef, i32 undef, float %149, i32 0, float undef, i32 undef, float undef, i32 undef)
  %151 = fcmp olt float %149, %144
  br i1 %151, label %then256, label %ifmerge264

then256:                                          ; preds = %ifmerge254
  %152 = fadd float %146, 1.000000e+00
  %153 = extractelement <4 x float> %color.39, i32 3
  %154 = fcmp olt float %153, %145
  %155 = fadd float %153, 1.000000e+00
  %156 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %150, i32 12, float undef, i32 undef, float undef, i32 undef, float %152, i32 0, float %155, i32 0)
  %157 = extractelement <4 x float> %color.39, i32 0
  %158 = fadd float %157, 1.000000e+00
  %159 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %150, i32 5, float %158, i32 0, float undef, i32 undef, float %152, i32 0, float undef, i32 undef)
  %select369 = select i1 %154, <4 x float> %156, <4 x float> %159
  br label %loop-header251

ifmerge264:                                       ; preds = %ifmerge254
  %color265 = fadd <4 x float> %150, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-merge267

loop-merge267:                                    ; preds = %ifmerge264, %then252
  %color.41 = phi <4 x float> [ %color.39, %then252 ], [ %color265, %ifmerge264 ]
  %160 = load <4 x float> addrspace(2)* @bigColor8, align 16
  %161 = extractelement <4 x float> %160, i32 0
  br label %loop-header268

loop-header268:                                   ; preds = %loop-header268.backedge, %loop-merge267
  %color.42 = phi <4 x float> [ %color.41, %loop-merge267 ], [ %color.42.be, %loop-header268.backedge ]
  %162 = extractelement <4 x float> %color.42, i32 0
  %163 = fcmp ult float %162, 1.000000e+01
  br i1 %163, label %ifmerge271, label %then269

then269:                                          ; preds = %loop-header268
  %.pre396 = load float addrspace(2)* @d13, align 4
  br label %loop-header282

ifmerge271:                                       ; preds = %loop-header268
  %assignment_tmp272273 = fadd <4 x float> %color.42, %160
  %164 = extractelement <4 x float> %assignment_tmp272273, i32 2
  %165 = fcmp olt float %164, %.pre393
  br i1 %165, label %then275, label %ifmerge279

then275:                                          ; preds = %ifmerge271
  %166 = extractelement <4 x float> %assignment_tmp272273, i32 3
  %167 = fcmp olt float %166, %95
  br i1 %167, label %then276, label %ifmerge278

then276:                                          ; preds = %then275
  br label %loop-header268.backedge

loop-header268.backedge:                          ; preds = %then276, %ifmerge279
  %color.42.be = phi <4 x float> [ %assignment_tmp272273, %then276 ], [ %170, %ifmerge279 ]
  br label %loop-header268

ifmerge278:                                       ; preds = %then275
  br label %ifmerge279

ifmerge279:                                       ; preds = %ifmerge271, %ifmerge278
  %168 = extractelement <4 x float> %assignment_tmp272273, i32 1
  %169 = fadd float %168, %161
  %170 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp272273, i32 2, float undef, i32 undef, float %169, i32 0, float undef, i32 undef, float undef, i32 undef)
  br label %loop-header268.backedge

loop-header282:                                   ; preds = %loop-header282.backedge, %then269
  %color.43 = phi <4 x float> [ %color.42, %then269 ], [ %color.43.be, %loop-header282.backedge ]
  %171 = extractelement <4 x float> %color.43, i32 3
  %172 = fcmp ult float %171, %.pre396
  br i1 %172, label %ifmerge285, label %then283

then283:                                          ; preds = %loop-header282
  %assignment_tmp307308 = fadd <4 x float> %color.43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre397 = load float addrspace(2)* @d14, align 4
  %173 = load float addrspace(2)* @d15, align 4
  br label %loop-header310

ifmerge285:                                       ; preds = %loop-header282
  %174 = extractelement <4 x float> %color.43, i32 2
  %175 = fcmp olt float %174, %.pre396
  %select375.v = select i1 %175, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %select375 = fadd <4 x float> %color.43, %select375.v
  %assignment_tmp291292 = fadd <4 x float> %select375, %.pre389
  %176 = extractelement <4 x float> %assignment_tmp291292, i32 0
  %177 = fcmp olt float %176, %17
  br i1 %177, label %then294, label %ifmerge300

then294:                                          ; preds = %ifmerge285
  %178 = extractelement <4 x float> %assignment_tmp291292, i32 2
  %179 = fadd float %178, 2.000000e+00
  %180 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp291292, i32 4, float undef, i32 undef, float undef, i32 undef, float %179, i32 0, float undef, i32 undef)
  %181 = fcmp olt float %179, %17
  br i1 %181, label %then296, label %ifmerge299

then296:                                          ; preds = %then294
  %182 = fadd float %176, 1.000000e+00
  %183 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %180, i32 1, float %182, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  br label %loop-header282.backedge

loop-header282.backedge:                          ; preds = %then296, %ifmerge300
  %color.43.be = phi <4 x float> [ %183, %then296 ], [ %select377, %ifmerge300 ]
  br label %loop-header282

ifmerge299:                                       ; preds = %then294
  br label %ifmerge300

ifmerge300:                                       ; preds = %ifmerge285, %ifmerge299
  %color.45 = phi <4 x float> [ %180, %ifmerge299 ], [ %assignment_tmp291292, %ifmerge285 ]
  %184 = extractelement <4 x float> %color.45, i32 1
  %185 = fcmp olt float %184, %17
  %186 = fadd float %184, %17
  %187 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.45, i32 2, float undef, i32 undef, float %186, i32 0, float undef, i32 undef, float undef, i32 undef)
  %188 = extractelement <4 x float> %color.45, i32 0
  %189 = fadd float %188, %17
  %190 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.45, i32 1, float %189, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select377 = select i1 %185, <4 x float> %187, <4 x float> %190
  br label %loop-header282.backedge

loop-header310:                                   ; preds = %else315, %then283
  %color.47 = phi <4 x float> [ %assignment_tmp307308, %then283 ], [ %color316, %else315 ]
  %191 = extractelement <4 x float> %color.47, i32 0
  %192 = fcmp ult float %191, %.pre397
  br i1 %192, label %ifmerge313, label %then311

then311:                                          ; preds = %loop-header310
  %color319 = fadd <4 x float> %color.47, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre398 = load float addrspace(2)* @d16, align 4
  br label %loop-header320

ifmerge313:                                       ; preds = %loop-header310
  %193 = extractelement <4 x float> %color.47, i32 1
  %194 = fcmp olt float %193, %173
  br i1 %194, label %then314, label %else315

then314:                                          ; preds = %ifmerge313
  br label %stage-epilogue

else315:                                          ; preds = %ifmerge313
  %color316 = fadd <4 x float> %color.47, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header310

loop-header320:                                   ; preds = %ifmerge323, %then311
  %color.48 = phi <4 x float> [ %color319, %then311 ], [ %198, %ifmerge323 ]
  %195 = extractelement <4 x float> %color.48, i32 3
  %196 = fcmp ult float %195, %.pre398
  br i1 %196, label %ifmerge323, label %then321

then321:                                          ; preds = %loop-header320
  br label %loop-header326

ifmerge323:                                       ; preds = %loop-header320
  %197 = fadd float %195, 1.000000e+00
  %198 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.48, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %197, i32 0)
  br label %loop-header320

loop-header326:                                   ; preds = %ifmerge340, %then321
  %color.49 = phi <4 x float> [ %color.48, %then321 ], [ %assignment_tmp335336, %ifmerge340 ]
  %199 = extractelement <4 x float> %color.49, i32 3
  %200 = extractelement <4 x float> %color.49, i32 1
  %phitmp367 = fcmp uge float %200, %.pre385
  %not.383 = fcmp uge float %199, %.pre384
  %select380 = or i1 %phitmp367, %not.383
  br i1 %select380, label %then332, label %ifmerge334

then332:                                          ; preds = %loop-header326
  %.pre399 = load float addrspace(2)* @d18, align 4
  %201 = load float addrspace(2)* @d17, align 4
  br label %loop-header342

ifmerge334:                                       ; preds = %loop-header326
  %assignment_tmp335336 = fadd <4 x float> %color.49, %13
  %202 = extractelement <4 x float> %assignment_tmp335336, i32 2
  %203 = fcmp olt float %202, %.pre385
  br i1 %203, label %then338, label %ifmerge340

then338:                                          ; preds = %ifmerge334
  br label %stage-epilogue

ifmerge340:                                       ; preds = %ifmerge334
  br label %loop-header326

loop-header342:                                   ; preds = %ifmerge351, %then332
  %color.50 = phi <4 x float> [ %color.49, %then332 ], [ %assignment_tmp346347, %ifmerge351 ]
  %204 = extractelement <4 x float> %color.50, i32 1
  %205 = fcmp olt float %204, %.pre399
  br i1 %205, label %then343, label %ifmerge345

then343:                                          ; preds = %loop-header342
  br label %stage-epilogue

ifmerge345:                                       ; preds = %loop-header342
  %assignment_tmp346347 = fadd <4 x float> %color.50, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %206 = extractelement <4 x float> %assignment_tmp346347, i32 0
  %207 = fcmp ult float %206, %201
  br i1 %207, label %ifmerge351, label %then349

then349:                                          ; preds = %ifmerge345
  br label %loop-header353

ifmerge351:                                       ; preds = %ifmerge345
  br label %loop-header342

loop-header353:                                   ; preds = %else358, %then349
  %color.51 = phi <4 x float> [ %assignment_tmp346347, %then349 ], [ %color359, %else358 ]
  %208 = extractelement <4 x float> %color.51, i32 1
  %209 = fcmp ult float %208, %.pre398
  br i1 %209, label %ifmerge356, label %then354

then354:                                          ; preds = %loop-header353
  %assignment_tmp362363 = fadd <4 x float> %color.51, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %stage-epilogue

ifmerge356:                                       ; preds = %loop-header353
  %210 = extractelement <4 x float> %color.51, i32 3
  %211 = fcmp olt float %210, %.pre398
  br i1 %211, label %then357, label %else358

then357:                                          ; preds = %ifmerge356
  call void @llvm.gla.discard()
  br label %stage-exit

else358:                                          ; preds = %ifmerge356
  %color359 = fadd <4 x float> %color.51, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header353

stage-epilogue:                                   ; preds = %then354, %then343, %then338, %then314
  %gl_FragColor366.0 = phi <4 x float> [ %assignment_tmp307308, %then343 ], [ %assignment_tmp362363, %then354 ], [ %assignment_tmp307308, %then338 ], [ %assignment_tmp307308, %then314 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor366.0)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then357
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

inductive variable:  %indvar458 = phi i32 [ %indvar.next459, %loop-header72 ], [ 0, %then67 ]
  trip count:        42
  increment:         %indvar.next459 = add i32 %indvar458, 1
  exit condition:    %exitcond460 = icmp eq i32 %indvar.next459, 42

inductive variable:  %indvar454 = phi i32 [ %indvar.next455, %loop-header77 ], [ 0, %loop-merge75 ]
  trip count:        100
  increment:         %indvar.next455 = add i32 %indvar454, 1
  exit condition:    %exitcond456 = icmp eq i32 %indvar.next455, 100

inductive variable:  %indvar452 = phi i32 [ %indvar.next453, %loop-header90 ], [ 0, %loop-merge88 ]
  trip count:        120
  increment:         %indvar.next453 = add i32 %indvar452, 1
  exit condition:    %exitcond = icmp eq i32 %indvar.next453, 120
compiling loops.frag...
uniform vec4 bigColor ; 
uniform vec4 bigColor1_1 ; 
uniform vec4 bigColor1_2 ; 
uniform vec4 bigColor1_3 ; 
uniform vec4 bigColor2 ; 
uniform vec4 bigColor3 ; 
uniform vec4 bigColor4 ; 
uniform vec4 bigColor5 ; 
uniform vec4 bigColor6 ; 
uniform vec4 bigColor7 ; 
uniform vec4 bigColor8 ; 
varying vec4 BaseColor ; 
uniform float d ; 
uniform float d2 ; 
uniform float d3 ; 
uniform float d4 ; 
uniform float d5 ; 
uniform float d6 ; 
uniform float d7 ; 
uniform float d8 ; 
uniform float d9 ; 
uniform float d10 ; 
uniform float d11 ; 
uniform float d12 ; 
uniform float d13 ; 
uniform float d14 ; 
uniform float d15 ; 
uniform float d16 ; 
uniform float d17 ; 
uniform float d18 ; 
uniform float d19 ; 
uniform float d20 ; 
uniform float d21 ; 
uniform float d22 ; 
uniform float d23 ; 
uniform float d24 ; 
uniform float d25 ; 
uniform float d26 ; 
uniform float d27 ; 
uniform float d28 ; 
uniform float d29 ; 
uniform float d30 ; 
uniform float d31 ; 
uniform float d32 ; 
uniform float d33 ; 
uniform float d34 ; 
uniform int Count ; 
void  main (){
vec4 color = BaseColor ; while ( true ) {
if ( color . x < 0.330000 ) {
color += vec4 ( 0.330000 ) ; break; }
if ( color . x < 0.660000 ) {
color += vec4 ( 0.660000 ) ; break; }
color += vec4 ( 0.330000 ) ; break; }
while ( color . x < d ) {
color += bigColor ; }
while ( color . z < d ) {
color += bigColor1_1 ; if ( color . w < d ) continue; color += bigColor1_1 ; }
while ( color . x < 42.000000 ) {
++ color ; }
while ( color . w < d2 && color . y < d3 ) {
color += bigColor1_2 ; }
while ( color . z < d3 ) {
color += bigColor1_3 ; if ( color . y < d4 ) break; color += bigColor1_3 ; }
for( int i = 0 ; ; i < Count ; ++ i ) {
color += bigColor2 ; }
do {
color += bigColor3 ; }
while ( color . x < d2 ); for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; }
for( int i = 0 ; ; i < 100 ; ++ i ) {
if ( color . z < 20.000000 ) color . x ++ ; else color . y ++ ; if ( color . w < 20.000000 ) if ( color . z > color . y ) 0 ; }
for( int i = 0 ; ; i < 120 ; ++ i ) {
if ( color . z < 20.000000 ) color . x ++ ; else color . y ++ ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) continue; ++ color . w ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) break; ++ color . w ; }
do {
color += bigColor4 ; if ( color . x < d4 ) continue; if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor4 ; if ( color . x < d4 ) {
color . z += 2.000000 ; if ( color . z < d4 ) {
color . x ++ ; continue; }
}
if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor5 ; if ( color . y < d5 ) color . y += d5 ; }
while ( color . x < d5 ); if ( color . x < d6 ) {
while ( color . y < d6 ) color += bigColor6 ; }
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
if ( color . x < d6 ) {
while ( color . y < d6 ) {
color += bigColor6 ; if ( d7 < 1.000000 ) break; }
}
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
do {
if ( d7 < 0.000000 ) break; color += bigColor7 ; if ( d7 < 1.000000 ) {
color . z ++ ; break; }
color += BaseColor ; }
while ( true ); do {
if ( d8 < 0.000000 ) break; color += bigColor7 ; if ( d8 < 1.000000 ) {
color . z ++ ; if ( d8 < 2.000000 ) {
color . y ++ ; }
else {
color . x ++ ; }
break; }
color += BaseColor ; }
while ( color . z < d8 ); while ( color . w < d9 ) {
if ( d9 > d8 ) {
if ( color . x <= d7 ) {
if ( color . z == 5.000000 ) color . w ++ ; else break; }
}
}
while ( color . z < d10 ) {
color . y ++ ; if ( color . y < d11 ) {
color . z ++ ; if ( color . w < d12 ) color . w ++ ; else color . x ++ ; continue; }
color ++ ; break; }
while ( color . x < 10 ) {
color += bigColor8 ; if ( color . z < d8 ) if ( color . w < d6 ) continue; color . y += bigColor8 . x ; }
while ( color . w < d13 ) {
if ( color . z < d13 ) color ++ ; else color -- ; color += bigColor4 ; if ( color . x < d4 ) {
color . z += 2.000000 ; if ( color . z < d4 ) {
color . x ++ ; continue; }
}
if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
color ++ ; gl_FragColor = color ; while ( color . x < d14 ) {
if ( color . y < d15 ) {
return ; }
else color ++ ; }
color ++ ; while ( color . w < d16 ) {
color . w ++ ; }
while ( color . w < d2 && color . y < d3 ) {
color += bigColor1_2 ; if ( color . z < d3 ) return ; }
do {
if ( color . y < d18 ) return ; color ++ ; }
while ( color . x < d17 ); while ( color . y < d16 ) {
if ( color . w < d16 ) {
discard; }
else color ++ ; }
color ++ ; gl_FragColor = color ; }



(
(declare (uniform ) int Count)
(declare (uniform ) float d18)
(declare (uniform ) float d17)
(declare (uniform ) float d16)
(declare (uniform ) float d15)
(declare (uniform ) float d14)
(declare (uniform ) float d13)
(declare (uniform ) float d12)
(declare (uniform ) float d11)
(declare (uniform ) float d10)
(declare (uniform ) float d9)
(declare (uniform ) float d8)
(declare (uniform ) float d7)
(declare (uniform ) float d6)
(declare (uniform ) float d5)
(declare (uniform ) float d4)
(declare (uniform ) float d3)
(declare (uniform ) float d2)
(declare (uniform ) float d)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor8)
(declare (uniform ) vec4 bigColor7)
(declare (uniform ) vec4 bigColor6)
(declare (uniform ) vec4 bigColor5)
(declare (uniform ) vec4 bigColor4)
(declare (uniform ) vec4 bigColor3)
(declare (uniform ) vec4 bigColor2)
(declare (uniform ) vec4 bigColor1_3)
(declare (uniform ) vec4 bigColor1_2)
(declare (uniform ) vec4 bigColor1_1)
(declare (uniform ) vec4 bigColor)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (loop () () () () (
        (if (expression bool < (swiz x (var_ref color) )(constant float (0.330000)) ) (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant vec4 (0.330000 0.330000 0.330000 0.330000)) ) ) 
          break
        )
        ())

        (if (expression bool < (swiz x (var_ref color) )(constant float (0.660000)) ) (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant vec4 (0.660000 0.660000 0.660000 0.660000)) ) ) 
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant vec4 (0.330000 0.330000 0.330000 0.330000)) ) ) 
        break
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_1) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz w (var_ref assignment_tmp) )(var_ref d) ) (
          continue
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_1) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (42.000000)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) bool and_tmp)
        (if (expression bool < (swiz w (var_ref color) )(var_ref d2) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool < (swiz y (var_ref color) )(var_ref d3) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (if (expression bool ! (var_ref and_tmp) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor1_2) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d3) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_3) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (var_ref Count) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor2) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d2) ) (
          break
        )
        ())

      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (100)) ) ((constant int (1)) ) (
        (if (expression bool < (swiz z (var_ref color) )(constant float (20.000000)) ) (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        ))

        (if (expression bool < (swiz w (var_ref color) )(constant float (20.000000)) ) (
          (if (expression bool > (swiz z (var_ref color) )(swiz y (var_ref color) )) (
          )
          ())

        )
        ())

        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (120)) ) ((constant int (1)) ) (
        (if (expression bool < (swiz z (var_ref color) )(constant float (20.000000)) ) (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (constant int (42)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
          continue
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          continue
        )
        ())

        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (2.000000)) ) ) 
          (if (expression bool < (swiz z (var_ref color) )(var_ref d4) ) (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
            continue
          )
          ())

        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor5) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d5) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d5) ) ) 
        )
        ())

        (if (expression bool >= (swiz x (var_ref color) )(var_ref d5) ) (
          break
        )
        ())

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
          (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
            break
          )
          ())

        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (loop () () () () (
        (if (expression bool < (var_ref d7) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool < (var_ref d8) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d8) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          (if (expression bool < (var_ref d8) (constant float (2.000000)) ) (
            (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (if (expression bool >= (swiz w (var_ref color) )(var_ref d9) ) (
          break
        )
        ())

        (if (expression bool > (var_ref d9) (var_ref d8) ) (
          (if (expression bool <= (swiz x (var_ref color) )(var_ref d7) ) (
            (if (expression bool all_equal (swiz z (var_ref color) )(constant float (5.000000)) ) (
              (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
            )
            (
              break
            ))

          )
          ())

        )
        ())

      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d10) ) (
          break
        )
        ())

        (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        (if (expression bool < (swiz y (var_ref color) )(var_ref d11) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(constant float (1.000000)) ) ) 
          (if (expression bool < (swiz w (var_ref color) )(var_ref d12) ) (
            (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          continue
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        break
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (10.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor8) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          (if (expression bool < (swiz w (var_ref assignment_tmp) )(var_ref d6) ) (
            continue
          )
          ())

        )
        ())

        (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(swiz x (var_ref bigColor8) )) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz w (var_ref color) )(var_ref d13) ) (
          break
        )
        ())

        (if (expression bool < (swiz z (var_ref color) )(var_ref d13) ) (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 - (var_ref color) (constant float (1.000000)) ) ) 
        ))

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (2.000000)) ) ) 
          (if (expression bool < (swiz z (var_ref color) )(var_ref d4) ) (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
            continue
          )
          ())

        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d14) ) (
          break
        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d15) ) (
          (return)
        )
        (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        ))

      ))

      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (loop () () () () (
        (if (expression bool >= (swiz w (var_ref color) )(var_ref d16) ) (
          break
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) bool and_tmp)
        (if (expression bool < (swiz w (var_ref color) )(var_ref d2) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool < (swiz y (var_ref color) )(var_ref d3) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (if (expression bool ! (var_ref and_tmp) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_2) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz z (var_ref assignment_tmp) )(var_ref d3) ) (
          (return)
        )
        ())

      ))

      (loop () () () () (
        (if (expression bool < (swiz y (var_ref color) )(var_ref d18) ) (
          (return)
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d17) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (if (expression bool >= (swiz y (var_ref color) )(var_ref d16) ) (
          break
        )
        ())

        (if (expression bool < (swiz w (var_ref color) )(var_ref d16) ) (
          (discard )
        )
        (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        ))

      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d13;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
in vec4 BaseColor;
const float const78_0f = 0.33;
const float const80_1f = 0.66;
const vec4 const82 = vec4(0.66);
const vec4 const83 = vec4(0.33);
const float const91_42f = 42.0;
const vec4 const93 = vec4(1.0);
vec4 assignment_tmp4849;
const int const102_0 = 0;
const int const107_1 = 1;
vec4 assignment_tmp6465;
vec4 temp111;
const float const113_20f = 20.0;
const float const115_1f = 1.0;
vec4 select382;
vec4 select368;
const int const127_42 = 42;
vec4 temp137;
vec4 temp140;
const int const143_41 = 41;
vec4 select;
const float const156_2f = 2.0;
vec4 select376;
vec4 select378;
float temp173;
vec4 color186;
const float const185_0f = 0.0;
vec4 assignment_tmp203204;
const bool const191_false = false;
vec4 assignment_tmp217218;
vec4 assignment_tmp229231;
const float const207_5f = 5.0;
vec4 temp211;
const float const221_10f = 10.0;
const vec4 const229 = vec4(-1.0);
vec4 assignment_tmp346347;

void main()
{
    vec4 color_1;
    vec4 color_2;
    vec4 color_3;
    vec4 color_4;
    vec4 color_5;
    vec4 color_6;
    int indvar461;
    vec4 color_7;
    vec4 color_8;
    int indvar458;
    vec4 color_9;
    int indvar454;
    vec4 color_10;
    int indvar452;
    vec4 color_12;
    int indvar;
    vec4 color_14;
    int temp38;
    vec4 color_15;
    vec4 color_16;
    vec4 color_17;
    vec4 color_17_be;
    vec4 color_19;
    vec4 color_19_be;
    vec4 color_20;
    vec4 color_22;
    vec4 color_24;
    vec4 color_25;
    vec4 temp49;
    vec4 color_26;
    vec4 color_27;
    vec4 color_28;
    vec4 color_29;
    vec4 color_30;
    bool _pre_phi;
    vec4 color_31;
    vec4 color_32;
    bool _pre_phi402;
    vec4 color_33;
    vec4 color_35;
    vec4 color_36;
    vec4 color_37;
    vec4 color_38;
    vec4 color_39;
    vec4 color_41;
    vec4 color_42;
    vec4 color_42_be;
    vec4 color_43;
    vec4 color_43_be;
    vec4 color_45;
    vec4 color_47;
    vec4 color_48;
    vec4 color_49;
    vec4 color_50;
    vec4 color_51;
    vec4 gla_copyout_gl_FragColor366_0;
    bool temp77 = BaseColor.x < const78_0f;
    bool temp79 = BaseColor.x < const80_1f;
    vec4 select373_v = temp79 ? const82 : const83;
    vec4 select374_v = temp77 ? const83 : select373_v;
    vec4 select374 = BaseColor + select374_v;
    color_1 = select374;
    while (color_1.x < d){
        vec4 color17 = color_1 + bigColor;
        color_1 = color17;
    }
    
    color_2 = color_1;
    while (color_2.z < d){
        vec4 assignment_tmp23 = color_2 + bigColor1_1;
        bool temp88 = assignment_tmp23.w < d;
        vec4 color27 = assignment_tmp23 + bigColor1_1;
        vec4 select381 = temp88 ? assignment_tmp23 : color27;
        color_2 = select381;
    }
    
    color_3 = color_2;
    while (color_3.x < const91_42f){
        vec4 color33 = color_3 + const93;
        color_3 = color33;
    }
    
    color_4 = color_3;
    while (true) {
        bool phitmp = color_4.y >= d3;
        bool not_ = color_4.w >= d2;
        bool select379 = phitmp || not_;
        if (select379) {
            break;
        }
        
        vec4 color42 = color_4 + bigColor1_2;
        color_4 = color42;
    }
    
    color_5 = color_4;
    while (color_5.z < d3){
        assignment_tmp4849 = color_5 + bigColor1_3;
        bool temp99 = assignment_tmp4849.y < d4;
        if (temp99) {
            color_6 = assignment_tmp4849;
            break;
        }
        
        vec4 color54 = assignment_tmp4849 + bigColor1_3;
        color_5 = color54;
    }
    
    color_6 = color_5;
    bool tmp463 = Count > const102_0;
    int smax = tmp463 ? Count : const102_0;
    indvar461 = const102_0;
    color_7 = color_6;
    while (true) {
        bool exitcond464 = indvar461 == smax;
        if (exitcond464) {
            break;
        }
        
        vec4 color60 = color_7 + bigColor2;
        int indvar_next462 = indvar461 + const107_1;
        indvar461 = indvar_next462;
        color_7 = color60;
    }
    
    color_8 = color_7;
    while (true) {
        assignment_tmp6465 = color_8 + bigColor3;
        bool temp109 = assignment_tmp6465.x < d2;
        if (! temp109) {
            break;
        }
        
        color_8 = assignment_tmp6465;
    }
    
    indvar458 = const102_0;
    color_9 = assignment_tmp6465;
    for (indvar458 = 0; indvar458 < 42; ++indvar458) {
        float temp110 = color_9.z + d3;
        temp111 = color_9;
        temp111.z = temp110;
        color_9 = temp111;
    }
    
    indvar454 = const102_0;
    color_10 = temp111;
    for (indvar454 = 0; indvar454 < 100; ++indvar454) {
        bool temp112 = color_10.z < const113_20f;
        float temp114 = color_10.x + const115_1f;
        vec4 temp116 = color_10;
        temp116.x = temp114;
        float temp117 = color_10.y + const115_1f;
        vec4 temp118 = color_10;
        temp118.y = temp117;
        select382 = temp112 ? temp116 : temp118;
        color_10 = select382;
    }
    
    indvar452 = const102_0;
    color_12 = select382;
    for (indvar452 = 0; indvar452 < 120; ++indvar452) {
        bool temp120 = color_12.z < const113_20f;
        float temp121 = color_12.x + const115_1f;
        vec4 temp122 = color_12;
        temp122.x = temp121;
        float temp123 = color_12.y + const115_1f;
        vec4 temp124 = color_12;
        temp124.y = temp123;
        select368 = temp120 ? temp122 : temp124;
        color_12 = select368;
    }
    
    indvar = const102_0;
    color_14 = select368;
    while (true) {
        bool exitcond451 = indvar == const127_42;
        if (exitcond451) {
            break;
        }
        
        float temp128 = color_14.z + d3;
        vec4 temp129 = color_14;
        temp129.z = temp128;
        bool temp130 = color_14.x < d4;
        float temp131 = color_14.w + const115_1f;
        vec4 temp132 = color_14;
        temp132.zw = vec2(temp128, temp131);
        vec4 select370 = temp130 ? temp129 : temp132;
        int indvar_next = indvar + const107_1;
        indvar = indvar_next;
        color_14 = select370;
    }
    
    temp38 = const102_0;
    color_15 = color_14;
    while (true) {
        int tmp = temp38 + const107_1;
        float temp136 = color_15.z + d3;
        temp137 = color_15;
        temp137.z = temp136;
        bool temp138 = color_15.x < d4;
        if (temp138) {
            color_16 = temp137;
            break;
        }
        
        float temp139 = color_15.w + const115_1f;
        temp140 = temp137;
        temp140.w = temp139;
        int temp141 = temp38 + const107_1;
        bool temp142 = tmp > const143_41;
        if (temp142) {
            color_16 = temp140;
            break;
        }
        
        temp38 = temp141;
        color_15 = temp140;
    }
    
    color_17 = color_16;
    while (true) {
        vec4 assignment_tmp120121 = color_17 + bigColor4;
        bool temp145 = assignment_tmp120121.x < d4;
        if (temp145) {
            color_17_be = assignment_tmp120121;
        }
        else {
            bool temp146 = assignment_tmp120121.y < d4;
            float temp147 = assignment_tmp120121.y + d4;
            vec4 temp148 = assignment_tmp120121;
            temp148.y = temp147;
            float temp149 = assignment_tmp120121.x + d4;
            vec4 temp150 = assignment_tmp120121;
            temp150.x = temp149;
            select = temp146 ? temp148 : temp150;
            bool temp152 = select.z < d4;
            if (! temp152) {
                break;
            }
            
            color_17_be = select;
        }
        
        color_17 = color_17_be;
    }
    
    color_19 = select;
    while (true) {
        vec4 assignment_tmp136137 = color_19 + bigColor4;
        bool temp154 = assignment_tmp136137.x < d4;
        color_20 = assignment_tmp136137;
        if (temp154) {
            float temp155 = assignment_tmp136137.z + const156_2f;
            vec4 temp157 = assignment_tmp136137;
            temp157.z = temp155;
            bool temp158 = temp155 < d4;
            if (temp158) {
                float temp159 = assignment_tmp136137.x + const115_1f;
                vec4 temp160 = temp157;
                temp160.x = temp159;
                color_19_be = temp160;
                color_19 = color_19_be;
                continue;
            }
            else {
                color_20 = temp157;
            }
            
        }
        else {
            bool temp161 = color_20.y < d4;
            float temp162 = color_20.y + d4;
            vec4 temp163 = color_20;
            temp163.y = temp162;
            float temp164 = color_20.x + d4;
            vec4 temp165 = color_20;
            temp165.x = temp164;
            select376 = temp161 ? temp163 : temp165;
            bool temp167 = select376.z < d4;
            if (! temp167) {
                break;
            }
            
            color_19_be = select376;
            color_19 = color_19_be;
            continue;
        }
        
    }
    
    color_22 = select376;
    while (true) {
        vec4 assignment_tmp156157 = color_22 + bigColor5;
        bool temp169 = assignment_tmp156157.y < d5;
        float temp170 = assignment_tmp156157.y + d5;
        vec4 temp171 = assignment_tmp156157;
        temp171.y = temp170;
        select378 = temp169 ? temp171 : assignment_tmp156157;
        bool temp174 = select378.x < d5;
        if (! temp174) {
            break;
        }
        
        color_22 = select378;
    }
    
    bool temp175 = select378.x < d6;
    if (temp175) {
        color_24 = select378;
        while (color_24.y < d6){
            vec4 color171 = color_24 + bigColor6;
            color_24 = color171;
        }
        
        temp49 = bigColor6;
        color_26 = color_24;
    }
    else {
        color_25 = select378;
        while (color_25.z < d6){
            float temp177 = color_25.z + bigColor6.z;
            vec4 temp178 = color_25;
            temp178.z = temp177;
            color_25 = temp178;
        }
        
        temp49 = bigColor6;
        color_26 = color_25;
    }
    
    bool temp179 = color_26.x < d6;
    if (temp179) {
        bool temp180 = d7 < const115_1f;
        color_27 = color_26;
        while (color_27.y < d6){
            color186 = color_27 + temp49;
            if (temp180) {
                color_28 = color186;
                break;
            }
            
            color_27 = color186;
        }
        
        color_28 = color_27;
        color_30 = color_28;
    }
    else {
        color_29 = color_26;
        while (color_29.z < d6){
            float temp182 = color_29.z + temp49.z;
            vec4 temp183 = color_29;
            temp183.z = temp182;
            color_29 = temp183;
        }
        
        color_30 = color_29;
    }
    
    bool _pre400 = d7 < const185_0f;
    bool temp186 = d7 < const115_1f;
    _pre_phi = _pre400;
    color_31 = color_30;
    while (true) {
        if (_pre_phi) {
            color_32 = color_31;
            break;
        }
        
        assignment_tmp203204 = color_31 + bigColor7;
        if (temp186) {
            float temp188 = assignment_tmp203204.z + const115_1f;
            vec4 temp189 = assignment_tmp203204;
            temp189.z = temp188;
            color_32 = temp189;
            break;
        }
        
        vec4 color211 = assignment_tmp203204 + BaseColor;
        _pre_phi = const191_false;
        color_31 = color211;
    }
    
    bool _pre401 = d8 < const185_0f;
    bool temp193 = d8 < const115_1f;
    _pre_phi402 = _pre401;
    color_33 = color_32;
    while (true) {
        if (_pre_phi402) {
            color_35 = color_33;
            break;
        }
        
        assignment_tmp217218 = color_33 + bigColor7;
        if (temp193) {
            float temp195 = assignment_tmp217218.z + const115_1f;
            bool temp196 = d8 < const156_2f;
            float temp197 = assignment_tmp217218.y + const115_1f;
            vec4 temp198 = assignment_tmp217218;
            temp198.yz = vec2(temp197, temp195);
            float temp199 = assignment_tmp217218.x + const115_1f;
            vec4 temp200 = assignment_tmp217218;
            temp200.xz = vec2(temp199, temp195);
            vec4 select372 = temp196 ? temp198 : temp200;
            color_35 = select372;
            break;
        }
        
        assignment_tmp229231 = assignment_tmp217218 + BaseColor;
        bool temp203 = assignment_tmp229231.z < d8;
        if (! temp203) {
            color_35 = assignment_tmp229231;
            break;
        }
        
        _pre_phi402 = const191_false;
        color_33 = assignment_tmp229231;
    }
    
    bool temp204 = d9 > d8;
    color_36 = color_35;
    while (color_36.w < d9){
        color_38 = color_36;
        if (temp204) {
            bool temp205 = color_36.x > d7;
            color_37 = color_36;
            if (! temp205) {
                bool temp206 = color_36.z == const207_5f;
                if (! temp206) {
                    break;
                }
                
                float temp208 = color_36.w + const115_1f;
                vec4 temp209 = color_36;
                temp209.w = temp208;
                color_37 = temp209;
            }
            
            color_38 = color_37;
        }
        
        color_36 = color_38;
    }
    
    color_39 = color_36;
    while (color_39.z < d10){
        float temp210 = color_39.y + const115_1f;
        temp211 = color_39;
        temp211.y = temp210;
        bool temp212 = temp210 < d11;
        if (! temp212) {
            vec4 color265 = temp211 + const93;
            color_41 = color265;
            break;
        }
        
        float temp214 = color_39.z + const115_1f;
        bool temp215 = color_39.w < d12;
        float temp216 = color_39.w + const115_1f;
        vec4 temp217 = temp211;
        temp217.zw = vec2(temp214, temp216);
        float temp218 = color_39.x + const115_1f;
        vec4 temp219 = temp211;
        temp219.xz = vec2(temp218, temp214);
        vec4 select369 = temp215 ? temp217 : temp219;
        color_39 = select369;
    }
    
    color_41 = color_39;
    color_42 = color_41;
    while (color_42.x < const221_10f){
        vec4 assignment_tmp272273 = color_42 + bigColor8;
        bool temp223 = assignment_tmp272273.z < d8;
        if (temp223) {
            bool temp224 = assignment_tmp272273.w < d6;
            if (temp224) {
                color_42_be = assignment_tmp272273;
                color_42 = color_42_be;
                continue;
            }
            else {
            }
            
        }
        else {
            float temp225 = assignment_tmp272273.y + bigColor8.x;
            vec4 temp226 = assignment_tmp272273;
            temp226.y = temp225;
            color_42_be = temp226;
            color_42 = color_42_be;
            continue;
        }
        
    }
    
    color_43 = color_42;
    while (color_43.w < d13){
        bool temp227 = color_43.z < d13;
        vec4 select375_v = temp227 ? const93 : const229;
        vec4 select375 = color_43 + select375_v;
        vec4 assignment_tmp291292 = select375 + bigColor4;
        bool temp232 = assignment_tmp291292.x < d4;
        color_45 = assignment_tmp291292;
        if (temp232) {
            float temp233 = assignment_tmp291292.z + const156_2f;
            vec4 temp234 = assignment_tmp291292;
            temp234.z = temp233;
            bool temp235 = temp233 < d4;
            if (temp235) {
                float temp236 = assignment_tmp291292.x + const115_1f;
                vec4 temp237 = temp234;
                temp237.x = temp236;
                color_43_be = temp237;
                color_43 = color_43_be;
                continue;
            }
            else {
                color_45 = temp234;
            }
            
        }
        else {
            bool temp238 = color_45.y < d4;
            float temp239 = color_45.y + d4;
            vec4 temp240 = color_45;
            temp240.y = temp239;
            float temp241 = color_45.x + d4;
            vec4 temp242 = color_45;
            temp242.x = temp241;
            vec4 select377 = temp238 ? temp240 : temp242;
            color_43_be = select377;
            color_43 = color_43_be;
            continue;
        }
        
    }
    
    vec4 assignment_tmp307308 = color_43 + const93;
    color_47 = assignment_tmp307308;
    while (color_47.x < d14){
        bool temp245 = color_47.y < d15;
        if (temp245) {
            gla_copyout_gl_FragColor366_0 = assignment_tmp307308;
            gl_FragColor = gla_copyout_gl_FragColor366_0;
            return;
        }
        
        vec4 color316 = color_47 + const93;
        color_47 = color316;
    }
    
    vec4 color319 = color_47 + const93;
    color_48 = color319;
    while (color_48.w < d16){
        float temp248 = color_48.w + const115_1f;
        vec4 temp249 = color_48;
        temp249.w = temp248;
        color_48 = temp249;
    }
    
    color_49 = color_48;
    while (true) {
        bool phitmp367 = color_49.y >= d3;
        bool not_383 = color_49.w >= d2;
        bool select380 = phitmp367 || not_383;
        if (select380) {
            color_50 = color_49;
            while (! (color_50.y < d18)){
                assignment_tmp346347 = color_50 + const93;
                bool temp254 = assignment_tmp346347.x < d17;
                if (! temp254) {
                    color_51 = assignment_tmp346347;
                    while (color_51.y < d16){
                        bool temp255 = color_51.w < d16;
                        if (temp255) {
                            discard;
                        }
                        
                        vec4 color359 = color_51 + const93;
                        color_51 = color359;
                    }
                    
                    vec4 assignment_tmp362363 = color_51 + const93;
                    gla_copyout_gl_FragColor366_0 = assignment_tmp362363;
                    gl_FragColor = gla_copyout_gl_FragColor366_0;
                    return;
                }
                
                color_50 = assignment_tmp346347;
            }
            
            gla_copyout_gl_FragColor366_0 = assignment_tmp307308;
            gl_FragColor = gla_copyout_gl_FragColor366_0;
            return;
        }
        
        vec4 assignment_tmp335336 = color_49 + bigColor1_2;
        bool temp259 = assignment_tmp335336.z < d3;
        if (temp259) {
            gla_copyout_gl_FragColor366_0 = assignment_tmp307308;
            gl_FragColor = gla_copyout_gl_FragColor366_0;
            return;
        }
        
        color_49 = assignment_tmp335336;
    }
    
}
