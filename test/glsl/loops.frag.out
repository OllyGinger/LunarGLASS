
Top IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@d13 = external addrspace(2) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %assignment_tmp350 = alloca <4 x float>
  %assignment_tmp334 = alloca <4 x float>
  %assignment_tmp323 = alloca <4 x float>
  %and_tmp315 = alloca i1
  %assignment_tmp295 = alloca <4 x float>
  %assignment_tmp279 = alloca <4 x float>
  %assignment_tmp260 = alloca <4 x float>
  %assignment_tmp217 = alloca <4 x float>
  %assignment_tmp205 = alloca <4 x float>
  %assignment_tmp191 = alloca <4 x float>
  %assignment_tmp144 = alloca <4 x float>
  %assignment_tmp124 = alloca <4 x float>
  %assignment_tmp108 = alloca <4 x float>
  %i98 = alloca i32
  %i77 = alloca i32
  %i64 = alloca i32
  %i59 = alloca i32
  %assignment_tmp52 = alloca <4 x float>
  %assignment_tmp36 = alloca <4 x float>
  %and_tmp = alloca i1
  %assignment_tmp = alloca <4 x float>
  %color = alloca <4 x float>
  %i5 = alloca i32
  %i4 = alloca i32
  %i3 = alloca i32
  %i2 = alloca i32
  %i1 = alloca i32
  %i = alloca i32
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = load float addrspace(2)* @d
  %3 = fcmp oge float %1, %2
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %4 = load <4 x float>* %color
  %5 = load <4 x float> addrspace(2)* @bigColor
  %color6 = fadd <4 x float> %4, %5
  store <4 x float> %color6, <4 x float>* %color
  br label %loop-header

loop-merge:                                       ; preds = %then
  br label %loop-header7

loop-header7:                                     ; preds = %ifmerge14, %then13, %loop-merge
  %6 = load <4 x float>* %color
  %7 = extractelement <4 x float> %6, i32 2
  %8 = load float addrspace(2)* @d
  %9 = fcmp oge float %7, %8
  br i1 %9, label %then8, label %ifmerge10

then8:                                            ; preds = %loop-header7
  br label %loop-merge16

post-loop-break9:                                 ; No predecessors!
  br label %ifmerge10

ifmerge10:                                        ; preds = %loop-header7, %post-loop-break9
  %10 = load <4 x float>* %color
  %11 = load <4 x float> addrspace(2)* @bigColor1_1
  %assignment_tmp11 = fadd <4 x float> %10, %11
  store <4 x float> %assignment_tmp11, <4 x float>* %assignment_tmp
  %color12 = load <4 x float>* %assignment_tmp
  store <4 x float> %color12, <4 x float>* %color
  %12 = load <4 x float>* %assignment_tmp
  %13 = extractelement <4 x float> %12, i32 3
  %14 = load float addrspace(2)* @d
  %15 = fcmp olt float %13, %14
  br i1 %15, label %then13, label %ifmerge14

then13:                                           ; preds = %ifmerge10
  br label %loop-header7

post-loop-continue:                               ; No predecessors!
  br label %ifmerge14

ifmerge14:                                        ; preds = %ifmerge10, %post-loop-continue
  %16 = load <4 x float>* %assignment_tmp
  %17 = load <4 x float> addrspace(2)* @bigColor1_1
  %color15 = fadd <4 x float> %16, %17
  store <4 x float> %color15, <4 x float>* %color
  br label %loop-header7

loop-merge16:                                     ; preds = %then8
  br label %loop-header17

loop-header17:                                    ; preds = %ifmerge20, %loop-merge16
  %18 = load <4 x float>* %color
  %19 = extractelement <4 x float> %18, i32 0
  %20 = fcmp oge float %19, 4.200000e+01
  br i1 %20, label %then18, label %ifmerge20

then18:                                           ; preds = %loop-header17
  br label %loop-merge22

post-loop-break19:                                ; No predecessors!
  br label %ifmerge20

ifmerge20:                                        ; preds = %loop-header17, %post-loop-break19
  %21 = load <4 x float>* %color
  %22 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color21 = fadd <4 x float> %21, %22
  store <4 x float> %color21, <4 x float>* %color
  br label %loop-header17

loop-merge22:                                     ; preds = %then18
  br label %loop-header23

loop-header23:                                    ; preds = %ifmerge29, %loop-merge22
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(2)* @d2
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then24, label %else

then24:                                           ; preds = %loop-header23
  %27 = load <4 x float>* %color
  %28 = extractelement <4 x float> %27, i32 1
  %29 = load float addrspace(2)* @d3
  %and_tmp25 = fcmp olt float %28, %29
  store i1 %and_tmp25, i1* %and_tmp
  br label %ifmerge26

else:                                             ; preds = %loop-header23
  store i1 false, i1* %and_tmp
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then24
  %30 = load i1* %and_tmp
  %31 = xor i1 %30, true
  br i1 %31, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  br label %loop-merge31

post-loop-break28:                                ; No predecessors!
  br label %ifmerge29

ifmerge29:                                        ; preds = %ifmerge26, %post-loop-break28
  %32 = load <4 x float>* %color
  %33 = load <4 x float> addrspace(2)* @bigColor1_2
  %color30 = fadd <4 x float> %32, %33
  store <4 x float> %color30, <4 x float>* %color
  br label %loop-header23

loop-merge31:                                     ; preds = %then27
  br label %loop-header32

loop-header32:                                    ; preds = %ifmerge41, %loop-merge31
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 2
  %36 = load float addrspace(2)* @d3
  %37 = fcmp oge float %35, %36
  br i1 %37, label %then33, label %ifmerge35

then33:                                           ; preds = %loop-header32
  br label %loop-merge43

post-loop-break34:                                ; No predecessors!
  br label %ifmerge35

ifmerge35:                                        ; preds = %loop-header32, %post-loop-break34
  %38 = load <4 x float>* %color
  %39 = load <4 x float> addrspace(2)* @bigColor1_3
  %assignment_tmp3637 = fadd <4 x float> %38, %39
  store <4 x float> %assignment_tmp3637, <4 x float>* %assignment_tmp36
  %color38 = load <4 x float>* %assignment_tmp36
  store <4 x float> %color38, <4 x float>* %color
  %40 = load <4 x float>* %assignment_tmp36
  %41 = extractelement <4 x float> %40, i32 1
  %42 = load float addrspace(2)* @d4
  %43 = fcmp olt float %41, %42
  br i1 %43, label %then39, label %ifmerge41

then39:                                           ; preds = %ifmerge35
  br label %loop-merge43

post-loop-break40:                                ; No predecessors!
  br label %ifmerge41

ifmerge41:                                        ; preds = %ifmerge35, %post-loop-break40
  %44 = load <4 x float>* %assignment_tmp36
  %45 = load <4 x float> addrspace(2)* @bigColor1_3
  %color42 = fadd <4 x float> %44, %45
  store <4 x float> %color42, <4 x float>* %color
  br label %loop-header32

loop-merge43:                                     ; preds = %then39, %then33
  store i32 0, i32* %i5
  br label %loop-header44

loop-header44:                                    ; preds = %ifmerge47, %loop-merge43
  %46 = load i32* %i5
  %47 = load i32 addrspace(2)* @Count
  %48 = icmp sge i32 %46, %47
  br i1 %48, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge50

post-loop-break46:                                ; No predecessors!
  br label %ifmerge47

ifmerge47:                                        ; preds = %loop-header44, %post-loop-break46
  %49 = load <4 x float>* %color
  %50 = load <4 x float> addrspace(2)* @bigColor2
  %color48 = fadd <4 x float> %49, %50
  store <4 x float> %color48, <4 x float>* %color
  %51 = load i32* %i5
  %i549 = add i32 %51, 1
  store i32 %i549, i32* %i5
  br label %loop-header44

loop-merge50:                                     ; preds = %then45
  br label %loop-header51

loop-header51:                                    ; preds = %ifmerge57, %loop-merge50
  %52 = load <4 x float>* %color
  %53 = load <4 x float> addrspace(2)* @bigColor3
  %assignment_tmp5253 = fadd <4 x float> %52, %53
  store <4 x float> %assignment_tmp5253, <4 x float>* %assignment_tmp52
  %color54 = load <4 x float>* %assignment_tmp52
  store <4 x float> %color54, <4 x float>* %color
  %54 = load <4 x float>* %assignment_tmp52
  %55 = extractelement <4 x float> %54, i32 0
  %56 = load float addrspace(2)* @d2
  %57 = fcmp oge float %55, %56
  br i1 %57, label %then55, label %ifmerge57

then55:                                           ; preds = %loop-header51
  br label %loop-merge58

post-loop-break56:                                ; No predecessors!
  br label %ifmerge57

ifmerge57:                                        ; preds = %loop-header51, %post-loop-break56
  br label %loop-header51

loop-merge58:                                     ; preds = %then55
  store i32 0, i32* %i4
  store i32 0, i32* %i59
  br label %loop-header60

loop-header60:                                    ; preds = %loop-header60, %loop-merge58
  %58 = load <4 x float>* %color
  %59 = extractelement <4 x float> %58, i32 2
  %60 = load float addrspace(2)* @d3
  %61 = fadd float %59, %60
  %62 = load <4 x float>* %color
  %color61 = insertelement <4 x float> %62, float %61, i32 2
  store <4 x float> %color61, <4 x float>* %color
  %63 = load i32* %i4
  %i462 = add i32 %63, 1
  store i32 %i462, i32* %i4
  %64 = load i32* %i59
  %65 = add i32 %64, 1
  %66 = icmp sge i32 %65, 42
  store i32 %65, i32* %i59
  br i1 %66, label %loop-merge63, label %loop-header60

loop-merge63:                                     ; preds = %loop-header60
  store i32 0, i32* %i3
  store i32 0, i32* %i64
  br label %loop-header65

loop-header65:                                    ; preds = %ifmerge74, %loop-merge63
  %67 = load <4 x float>* %color
  %68 = extractelement <4 x float> %67, i32 2
  %69 = fcmp olt float %68, 2.000000e+01
  br i1 %69, label %then66, label %else68

then66:                                           ; preds = %loop-header65
  %70 = load <4 x float>* %color
  %71 = extractelement <4 x float> %70, i32 0
  %72 = fadd float %71, 1.000000e+00
  %73 = load <4 x float>* %color
  %color67 = insertelement <4 x float> %73, float %72, i32 0
  store <4 x float> %color67, <4 x float>* %color
  br label %ifmerge70

else68:                                           ; preds = %loop-header65
  %74 = load <4 x float>* %color
  %75 = extractelement <4 x float> %74, i32 1
  %76 = fadd float %75, 1.000000e+00
  %77 = load <4 x float>* %color
  %color69 = insertelement <4 x float> %77, float %76, i32 1
  store <4 x float> %color69, <4 x float>* %color
  br label %ifmerge70

ifmerge70:                                        ; preds = %else68, %then66
  %78 = load <4 x float>* %color
  %79 = extractelement <4 x float> %78, i32 3
  %80 = fcmp olt float %79, 2.000000e+01
  br i1 %80, label %then71, label %ifmerge74

then71:                                           ; preds = %ifmerge70
  %81 = load <4 x float>* %color
  %82 = extractelement <4 x float> %81, i32 2
  %83 = load <4 x float>* %color
  %84 = extractelement <4 x float> %83, i32 1
  %85 = fcmp ogt float %82, %84
  br i1 %85, label %then72, label %ifmerge73

then72:                                           ; preds = %then71
  br label %ifmerge73

ifmerge73:                                        ; preds = %then71, %then72
  br label %ifmerge74

ifmerge74:                                        ; preds = %ifmerge70, %ifmerge73
  %86 = load i32* %i3
  %i375 = add i32 %86, 1
  store i32 %i375, i32* %i3
  %87 = load i32* %i64
  %88 = add i32 %87, 1
  %89 = icmp sge i32 %88, 100
  store i32 %88, i32* %i64
  br i1 %89, label %loop-merge76, label %loop-header65

loop-merge76:                                     ; preds = %ifmerge74
  store i32 0, i32* %i2
  store i32 0, i32* %i77
  br label %loop-header78

loop-header78:                                    ; preds = %ifmerge83, %loop-merge76
  %90 = load <4 x float>* %color
  %91 = extractelement <4 x float> %90, i32 2
  %92 = fcmp olt float %91, 2.000000e+01
  br i1 %92, label %then79, label %else81

then79:                                           ; preds = %loop-header78
  %93 = load <4 x float>* %color
  %94 = extractelement <4 x float> %93, i32 0
  %95 = fadd float %94, 1.000000e+00
  %96 = load <4 x float>* %color
  %color80 = insertelement <4 x float> %96, float %95, i32 0
  store <4 x float> %color80, <4 x float>* %color
  br label %ifmerge83

else81:                                           ; preds = %loop-header78
  %97 = load <4 x float>* %color
  %98 = extractelement <4 x float> %97, i32 1
  %99 = fadd float %98, 1.000000e+00
  %100 = load <4 x float>* %color
  %color82 = insertelement <4 x float> %100, float %99, i32 1
  store <4 x float> %color82, <4 x float>* %color
  br label %ifmerge83

ifmerge83:                                        ; preds = %else81, %then79
  %101 = load i32* %i2
  %i284 = add i32 %101, 1
  store i32 %i284, i32* %i2
  %102 = load i32* %i77
  %103 = add i32 %102, 1
  %104 = icmp sge i32 %103, 120
  store i32 %103, i32* %i77
  br i1 %104, label %loop-merge85, label %loop-header78

loop-merge85:                                     ; preds = %ifmerge83
  store i32 0, i32* %i1
  br label %loop-header86

loop-header86:                                    ; preds = %ifmerge94, %then91, %loop-merge85
  %105 = load i32* %i1
  %106 = icmp sge i32 %105, 42
  br i1 %106, label %then87, label %ifmerge89

then87:                                           ; preds = %loop-header86
  br label %loop-merge97

post-loop-break88:                                ; No predecessors!
  br label %ifmerge89

ifmerge89:                                        ; preds = %loop-header86, %post-loop-break88
  %107 = load <4 x float>* %color
  %108 = extractelement <4 x float> %107, i32 2
  %109 = load float addrspace(2)* @d3
  %110 = fadd float %108, %109
  %111 = load <4 x float>* %color
  %color90 = insertelement <4 x float> %111, float %110, i32 2
  store <4 x float> %color90, <4 x float>* %color
  %112 = load <4 x float>* %color
  %113 = extractelement <4 x float> %112, i32 0
  %114 = load float addrspace(2)* @d4
  %115 = fcmp olt float %113, %114
  br i1 %115, label %then91, label %ifmerge94

then91:                                           ; preds = %ifmerge89
  %116 = load i32* %i1
  %i192 = add i32 %116, 1
  store i32 %i192, i32* %i1
  br label %loop-header86

post-loop-continue93:                             ; No predecessors!
  br label %ifmerge94

ifmerge94:                                        ; preds = %ifmerge89, %post-loop-continue93
  %117 = load <4 x float>* %color
  %118 = extractelement <4 x float> %117, i32 3
  %119 = fadd float %118, 1.000000e+00
  %120 = load <4 x float>* %color
  %color95 = insertelement <4 x float> %120, float %119, i32 3
  store <4 x float> %color95, <4 x float>* %color
  %121 = load i32* %i1
  %i196 = add i32 %121, 1
  store i32 %i196, i32* %i1
  br label %loop-header86

loop-merge97:                                     ; preds = %then87
  store i32 0, i32* %i
  store i32 0, i32* %i98
  br label %loop-header99

loop-header99:                                    ; preds = %ifmerge103, %loop-merge97
  %122 = load <4 x float>* %color
  %123 = extractelement <4 x float> %122, i32 2
  %124 = load float addrspace(2)* @d3
  %125 = fadd float %123, %124
  %126 = load <4 x float>* %color
  %color100 = insertelement <4 x float> %126, float %125, i32 2
  store <4 x float> %color100, <4 x float>* %color
  %127 = load <4 x float>* %color
  %128 = extractelement <4 x float> %127, i32 0
  %129 = load float addrspace(2)* @d4
  %130 = fcmp olt float %128, %129
  br i1 %130, label %then101, label %ifmerge103

then101:                                          ; preds = %loop-header99
  br label %loop-merge106

post-loop-break102:                               ; No predecessors!
  br label %ifmerge103

ifmerge103:                                       ; preds = %loop-header99, %post-loop-break102
  %131 = load <4 x float>* %color
  %132 = extractelement <4 x float> %131, i32 3
  %133 = fadd float %132, 1.000000e+00
  %134 = load <4 x float>* %color
  %color104 = insertelement <4 x float> %134, float %133, i32 3
  store <4 x float> %color104, <4 x float>* %color
  %135 = load i32* %i
  %i105 = add i32 %135, 1
  store i32 %i105, i32* %i
  %136 = load i32* %i98
  %137 = add i32 %136, 1
  %138 = icmp sge i32 %137, 42
  store i32 %137, i32* %i98
  br i1 %138, label %loop-merge106, label %loop-header99

loop-merge106:                                    ; preds = %ifmerge103, %then101
  br label %loop-header107

loop-header107:                                   ; preds = %ifmerge121, %then111, %loop-merge106
  %139 = load <4 x float>* %color
  %140 = load <4 x float> addrspace(2)* @bigColor4
  %assignment_tmp108109 = fadd <4 x float> %139, %140
  store <4 x float> %assignment_tmp108109, <4 x float>* %assignment_tmp108
  %color110 = load <4 x float>* %assignment_tmp108
  store <4 x float> %color110, <4 x float>* %color
  %141 = load <4 x float>* %assignment_tmp108
  %142 = extractelement <4 x float> %141, i32 0
  %143 = load float addrspace(2)* @d4
  %144 = fcmp olt float %142, %143
  br i1 %144, label %then111, label %ifmerge113

then111:                                          ; preds = %loop-header107
  br label %loop-header107

post-loop-continue112:                            ; No predecessors!
  br label %ifmerge113

ifmerge113:                                       ; preds = %loop-header107, %post-loop-continue112
  %145 = load <4 x float>* %assignment_tmp108
  %146 = extractelement <4 x float> %145, i32 1
  %147 = load float addrspace(2)* @d4
  %148 = fcmp olt float %146, %147
  br i1 %148, label %then114, label %else116

then114:                                          ; preds = %ifmerge113
  %149 = load <4 x float>* %assignment_tmp108
  %150 = extractelement <4 x float> %149, i32 1
  %151 = load float addrspace(2)* @d4
  %152 = fadd float %150, %151
  %153 = load <4 x float>* %color
  %color115 = insertelement <4 x float> %153, float %152, i32 1
  store <4 x float> %color115, <4 x float>* %color
  br label %ifmerge118

else116:                                          ; preds = %ifmerge113
  %154 = load <4 x float>* %color
  %155 = extractelement <4 x float> %154, i32 0
  %156 = load float addrspace(2)* @d4
  %157 = fadd float %155, %156
  %158 = load <4 x float>* %color
  %color117 = insertelement <4 x float> %158, float %157, i32 0
  store <4 x float> %color117, <4 x float>* %color
  br label %ifmerge118

ifmerge118:                                       ; preds = %else116, %then114
  %159 = load <4 x float>* %color
  %160 = extractelement <4 x float> %159, i32 2
  %161 = load float addrspace(2)* @d4
  %162 = fcmp oge float %160, %161
  br i1 %162, label %then119, label %ifmerge121

then119:                                          ; preds = %ifmerge118
  br label %loop-merge122

post-loop-break120:                               ; No predecessors!
  br label %ifmerge121

ifmerge121:                                       ; preds = %ifmerge118, %post-loop-break120
  br label %loop-header107

loop-merge122:                                    ; preds = %then119
  br label %loop-header123

loop-header123:                                   ; preds = %ifmerge141, %then129, %loop-merge122
  %163 = load <4 x float>* %color
  %164 = load <4 x float> addrspace(2)* @bigColor4
  %assignment_tmp124125 = fadd <4 x float> %163, %164
  store <4 x float> %assignment_tmp124125, <4 x float>* %assignment_tmp124
  %color126 = load <4 x float>* %assignment_tmp124
  store <4 x float> %color126, <4 x float>* %color
  %165 = load <4 x float>* %assignment_tmp124
  %166 = extractelement <4 x float> %165, i32 0
  %167 = load float addrspace(2)* @d4
  %168 = fcmp olt float %166, %167
  br i1 %168, label %then127, label %ifmerge133

then127:                                          ; preds = %loop-header123
  %169 = load <4 x float>* %assignment_tmp124
  %170 = extractelement <4 x float> %169, i32 2
  %171 = fadd float %170, 2.000000e+00
  %172 = load <4 x float>* %color
  %color128 = insertelement <4 x float> %172, float %171, i32 2
  store <4 x float> %color128, <4 x float>* %color
  %173 = load <4 x float>* %color
  %174 = extractelement <4 x float> %173, i32 2
  %175 = load float addrspace(2)* @d4
  %176 = fcmp olt float %174, %175
  br i1 %176, label %then129, label %ifmerge132

then129:                                          ; preds = %then127
  %177 = load <4 x float>* %color
  %178 = extractelement <4 x float> %177, i32 0
  %179 = fadd float %178, 1.000000e+00
  %180 = load <4 x float>* %color
  %color130 = insertelement <4 x float> %180, float %179, i32 0
  store <4 x float> %color130, <4 x float>* %color
  br label %loop-header123

post-loop-continue131:                            ; No predecessors!
  br label %ifmerge132

ifmerge132:                                       ; preds = %then127, %post-loop-continue131
  br label %ifmerge133

ifmerge133:                                       ; preds = %loop-header123, %ifmerge132
  %181 = load <4 x float>* %color
  %182 = extractelement <4 x float> %181, i32 1
  %183 = load float addrspace(2)* @d4
  %184 = fcmp olt float %182, %183
  br i1 %184, label %then134, label %else136

then134:                                          ; preds = %ifmerge133
  %185 = load <4 x float>* %color
  %186 = extractelement <4 x float> %185, i32 1
  %187 = load float addrspace(2)* @d4
  %188 = fadd float %186, %187
  %189 = load <4 x float>* %color
  %color135 = insertelement <4 x float> %189, float %188, i32 1
  store <4 x float> %color135, <4 x float>* %color
  br label %ifmerge138

else136:                                          ; preds = %ifmerge133
  %190 = load <4 x float>* %color
  %191 = extractelement <4 x float> %190, i32 0
  %192 = load float addrspace(2)* @d4
  %193 = fadd float %191, %192
  %194 = load <4 x float>* %color
  %color137 = insertelement <4 x float> %194, float %193, i32 0
  store <4 x float> %color137, <4 x float>* %color
  br label %ifmerge138

ifmerge138:                                       ; preds = %else136, %then134
  %195 = load <4 x float>* %color
  %196 = extractelement <4 x float> %195, i32 2
  %197 = load float addrspace(2)* @d4
  %198 = fcmp oge float %196, %197
  br i1 %198, label %then139, label %ifmerge141

then139:                                          ; preds = %ifmerge138
  br label %loop-merge142

post-loop-break140:                               ; No predecessors!
  br label %ifmerge141

ifmerge141:                                       ; preds = %ifmerge138, %post-loop-break140
  br label %loop-header123

loop-merge142:                                    ; preds = %then139
  br label %loop-header143

loop-header143:                                   ; preds = %ifmerge152, %loop-merge142
  %199 = load <4 x float>* %color
  %200 = load <4 x float> addrspace(2)* @bigColor5
  %assignment_tmp144145 = fadd <4 x float> %199, %200
  store <4 x float> %assignment_tmp144145, <4 x float>* %assignment_tmp144
  %color146 = load <4 x float>* %assignment_tmp144
  store <4 x float> %color146, <4 x float>* %color
  %201 = load <4 x float>* %assignment_tmp144
  %202 = extractelement <4 x float> %201, i32 1
  %203 = load float addrspace(2)* @d5
  %204 = fcmp olt float %202, %203
  br i1 %204, label %then147, label %ifmerge149

then147:                                          ; preds = %loop-header143
  %205 = load <4 x float>* %assignment_tmp144
  %206 = extractelement <4 x float> %205, i32 1
  %207 = load float addrspace(2)* @d5
  %208 = fadd float %206, %207
  %209 = load <4 x float>* %color
  %color148 = insertelement <4 x float> %209, float %208, i32 1
  store <4 x float> %color148, <4 x float>* %color
  br label %ifmerge149

ifmerge149:                                       ; preds = %loop-header143, %then147
  %210 = load <4 x float>* %color
  %211 = extractelement <4 x float> %210, i32 0
  %212 = load float addrspace(2)* @d5
  %213 = fcmp oge float %211, %212
  br i1 %213, label %then150, label %ifmerge152

then150:                                          ; preds = %ifmerge149
  br label %loop-merge153

post-loop-break151:                               ; No predecessors!
  br label %ifmerge152

ifmerge152:                                       ; preds = %ifmerge149, %post-loop-break151
  br label %loop-header143

loop-merge153:                                    ; preds = %then150
  %214 = load <4 x float>* %color
  %215 = extractelement <4 x float> %214, i32 0
  %216 = load float addrspace(2)* @d6
  %217 = fcmp olt float %215, %216
  br i1 %217, label %then154, label %else161

then154:                                          ; preds = %loop-merge153
  br label %loop-header155

loop-header155:                                   ; preds = %ifmerge158, %then154
  %218 = load <4 x float>* %color
  %219 = extractelement <4 x float> %218, i32 1
  %220 = load float addrspace(2)* @d6
  %221 = fcmp oge float %219, %220
  br i1 %221, label %then156, label %ifmerge158

then156:                                          ; preds = %loop-header155
  br label %loop-merge160

post-loop-break157:                               ; No predecessors!
  br label %ifmerge158

ifmerge158:                                       ; preds = %loop-header155, %post-loop-break157
  %222 = load <4 x float>* %color
  %223 = load <4 x float> addrspace(2)* @bigColor6
  %color159 = fadd <4 x float> %222, %223
  store <4 x float> %color159, <4 x float>* %color
  br label %loop-header155

loop-merge160:                                    ; preds = %then156
  br label %ifmerge168

else161:                                          ; preds = %loop-merge153
  br label %loop-header162

loop-header162:                                   ; preds = %ifmerge165, %else161
  %224 = load <4 x float>* %color
  %225 = extractelement <4 x float> %224, i32 2
  %226 = load float addrspace(2)* @d6
  %227 = fcmp oge float %225, %226
  br i1 %227, label %then163, label %ifmerge165

then163:                                          ; preds = %loop-header162
  br label %loop-merge167

post-loop-break164:                               ; No predecessors!
  br label %ifmerge165

ifmerge165:                                       ; preds = %loop-header162, %post-loop-break164
  %228 = load <4 x float>* %color
  %229 = extractelement <4 x float> %228, i32 2
  %230 = load <4 x float> addrspace(2)* @bigColor6
  %231 = extractelement <4 x float> %230, i32 2
  %232 = fadd float %229, %231
  %233 = load <4 x float>* %color
  %color166 = insertelement <4 x float> %233, float %232, i32 2
  store <4 x float> %color166, <4 x float>* %color
  br label %loop-header162

loop-merge167:                                    ; preds = %then163
  br label %ifmerge168

ifmerge168:                                       ; preds = %loop-merge167, %loop-merge160
  %234 = load <4 x float>* %color
  %235 = extractelement <4 x float> %234, i32 0
  %236 = load float addrspace(2)* @d6
  %237 = fcmp olt float %235, %236
  br i1 %237, label %then169, label %else179

then169:                                          ; preds = %ifmerge168
  br label %loop-header170

loop-header170:                                   ; preds = %ifmerge177, %then169
  %238 = load <4 x float>* %color
  %239 = extractelement <4 x float> %238, i32 1
  %240 = load float addrspace(2)* @d6
  %241 = fcmp oge float %239, %240
  br i1 %241, label %then171, label %ifmerge173

then171:                                          ; preds = %loop-header170
  br label %loop-merge178

post-loop-break172:                               ; No predecessors!
  br label %ifmerge173

ifmerge173:                                       ; preds = %loop-header170, %post-loop-break172
  %242 = load <4 x float>* %color
  %243 = load <4 x float> addrspace(2)* @bigColor6
  %color174 = fadd <4 x float> %242, %243
  store <4 x float> %color174, <4 x float>* %color
  %244 = load float addrspace(2)* @d7
  %245 = fcmp olt float %244, 1.000000e+00
  br i1 %245, label %then175, label %ifmerge177

then175:                                          ; preds = %ifmerge173
  br label %loop-merge178

post-loop-break176:                               ; No predecessors!
  br label %ifmerge177

ifmerge177:                                       ; preds = %ifmerge173, %post-loop-break176
  br label %loop-header170

loop-merge178:                                    ; preds = %then175, %then171
  br label %ifmerge186

else179:                                          ; preds = %ifmerge168
  br label %loop-header180

loop-header180:                                   ; preds = %ifmerge183, %else179
  %246 = load <4 x float>* %color
  %247 = extractelement <4 x float> %246, i32 2
  %248 = load float addrspace(2)* @d6
  %249 = fcmp oge float %247, %248
  br i1 %249, label %then181, label %ifmerge183

then181:                                          ; preds = %loop-header180
  br label %loop-merge185

post-loop-break182:                               ; No predecessors!
  br label %ifmerge183

ifmerge183:                                       ; preds = %loop-header180, %post-loop-break182
  %250 = load <4 x float>* %color
  %251 = extractelement <4 x float> %250, i32 2
  %252 = load <4 x float> addrspace(2)* @bigColor6
  %253 = extractelement <4 x float> %252, i32 2
  %254 = fadd float %251, %253
  %255 = load <4 x float>* %color
  %color184 = insertelement <4 x float> %255, float %254, i32 2
  store <4 x float> %color184, <4 x float>* %color
  br label %loop-header180

loop-merge185:                                    ; preds = %then181
  br label %ifmerge186

ifmerge186:                                       ; preds = %loop-merge185, %loop-merge178
  br label %loop-header187

loop-header187:                                   ; preds = %ifmerge197, %ifmerge186
  %256 = load float addrspace(2)* @d7
  %257 = fcmp olt float %256, 0.000000e+00
  br i1 %257, label %then188, label %ifmerge190

then188:                                          ; preds = %loop-header187
  br label %loop-merge200

post-loop-break189:                               ; No predecessors!
  br label %ifmerge190

ifmerge190:                                       ; preds = %loop-header187, %post-loop-break189
  %258 = load <4 x float>* %color
  %259 = load <4 x float> addrspace(2)* @bigColor7
  %assignment_tmp191192 = fadd <4 x float> %258, %259
  store <4 x float> %assignment_tmp191192, <4 x float>* %assignment_tmp191
  %color193 = load <4 x float>* %assignment_tmp191
  store <4 x float> %color193, <4 x float>* %color
  %260 = load float addrspace(2)* @d7
  %261 = fcmp olt float %260, 1.000000e+00
  br i1 %261, label %then194, label %ifmerge197

then194:                                          ; preds = %ifmerge190
  %262 = load <4 x float>* %assignment_tmp191
  %263 = extractelement <4 x float> %262, i32 2
  %264 = fadd float %263, 1.000000e+00
  %265 = load <4 x float>* %color
  %color195 = insertelement <4 x float> %265, float %264, i32 2
  store <4 x float> %color195, <4 x float>* %color
  br label %loop-merge200

post-loop-break196:                               ; No predecessors!
  br label %ifmerge197

ifmerge197:                                       ; preds = %ifmerge190, %post-loop-break196
  %266 = load <4 x float>* %color
  %BaseColor198 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %color199 = fadd <4 x float> %266, %BaseColor198
  store <4 x float> %color199, <4 x float>* %color
  br label %loop-header187

loop-merge200:                                    ; preds = %then194, %then188
  br label %loop-header201

loop-header201:                                   ; preds = %ifmerge223, %loop-merge200
  %267 = load float addrspace(2)* @d8
  %268 = fcmp olt float %267, 0.000000e+00
  br i1 %268, label %then202, label %ifmerge204

then202:                                          ; preds = %loop-header201
  br label %loop-merge224

post-loop-break203:                               ; No predecessors!
  br label %ifmerge204

ifmerge204:                                       ; preds = %loop-header201, %post-loop-break203
  %269 = load <4 x float>* %color
  %270 = load <4 x float> addrspace(2)* @bigColor7
  %assignment_tmp205206 = fadd <4 x float> %269, %270
  store <4 x float> %assignment_tmp205206, <4 x float>* %assignment_tmp205
  %color207 = load <4 x float>* %assignment_tmp205
  store <4 x float> %color207, <4 x float>* %color
  %271 = load float addrspace(2)* @d8
  %272 = fcmp olt float %271, 1.000000e+00
  br i1 %272, label %then208, label %ifmerge216

then208:                                          ; preds = %ifmerge204
  %273 = load <4 x float>* %assignment_tmp205
  %274 = extractelement <4 x float> %273, i32 2
  %275 = fadd float %274, 1.000000e+00
  %276 = load <4 x float>* %color
  %color209 = insertelement <4 x float> %276, float %275, i32 2
  store <4 x float> %color209, <4 x float>* %color
  %277 = load float addrspace(2)* @d8
  %278 = fcmp olt float %277, 2.000000e+00
  br i1 %278, label %then210, label %else212

then210:                                          ; preds = %then208
  %279 = load <4 x float>* %color
  %280 = extractelement <4 x float> %279, i32 1
  %281 = fadd float %280, 1.000000e+00
  %282 = load <4 x float>* %color
  %color211 = insertelement <4 x float> %282, float %281, i32 1
  store <4 x float> %color211, <4 x float>* %color
  br label %ifmerge214

else212:                                          ; preds = %then208
  %283 = load <4 x float>* %color
  %284 = extractelement <4 x float> %283, i32 0
  %285 = fadd float %284, 1.000000e+00
  %286 = load <4 x float>* %color
  %color213 = insertelement <4 x float> %286, float %285, i32 0
  store <4 x float> %color213, <4 x float>* %color
  br label %ifmerge214

ifmerge214:                                       ; preds = %else212, %then210
  br label %loop-merge224

post-loop-break215:                               ; No predecessors!
  br label %ifmerge216

ifmerge216:                                       ; preds = %ifmerge204, %post-loop-break215
  %287 = load <4 x float>* %color
  %BaseColor218 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %assignment_tmp217219 = fadd <4 x float> %287, %BaseColor218
  store <4 x float> %assignment_tmp217219, <4 x float>* %assignment_tmp217
  %color220 = load <4 x float>* %assignment_tmp217
  store <4 x float> %color220, <4 x float>* %color
  %288 = load <4 x float>* %assignment_tmp217
  %289 = extractelement <4 x float> %288, i32 2
  %290 = load float addrspace(2)* @d8
  %291 = fcmp oge float %289, %290
  br i1 %291, label %then221, label %ifmerge223

then221:                                          ; preds = %ifmerge216
  br label %loop-merge224

post-loop-break222:                               ; No predecessors!
  br label %ifmerge223

ifmerge223:                                       ; preds = %ifmerge216, %post-loop-break222
  br label %loop-header201

loop-merge224:                                    ; preds = %then221, %ifmerge214, %then202
  br label %loop-header225

loop-header225:                                   ; preds = %ifmerge237, %loop-merge224
  %292 = load <4 x float>* %color
  %293 = extractelement <4 x float> %292, i32 3
  %294 = load float addrspace(2)* @d9
  %295 = fcmp oge float %293, %294
  br i1 %295, label %then226, label %ifmerge228

then226:                                          ; preds = %loop-header225
  br label %loop-merge238

post-loop-break227:                               ; No predecessors!
  br label %ifmerge228

ifmerge228:                                       ; preds = %loop-header225, %post-loop-break227
  %296 = load float addrspace(2)* @d9
  %297 = load float addrspace(2)* @d8
  %298 = fcmp ogt float %296, %297
  br i1 %298, label %then229, label %ifmerge237

then229:                                          ; preds = %ifmerge228
  %299 = load <4 x float>* %color
  %300 = extractelement <4 x float> %299, i32 0
  %301 = load float addrspace(2)* @d7
  %302 = fcmp ole float %300, %301
  br i1 %302, label %then230, label %ifmerge236

then230:                                          ; preds = %then229
  %303 = load <4 x float>* %color
  %304 = extractelement <4 x float> %303, i32 2
  %305 = fcmp oeq float %304, 5.000000e+00
  br i1 %305, label %then231, label %else233

then231:                                          ; preds = %then230
  %306 = load <4 x float>* %color
  %307 = extractelement <4 x float> %306, i32 3
  %308 = fadd float %307, 1.000000e+00
  %309 = load <4 x float>* %color
  %color232 = insertelement <4 x float> %309, float %308, i32 3
  store <4 x float> %color232, <4 x float>* %color
  br label %ifmerge235

else233:                                          ; preds = %then230
  br label %loop-merge238

post-loop-break234:                               ; No predecessors!
  br label %ifmerge235

ifmerge235:                                       ; preds = %post-loop-break234, %then231
  br label %ifmerge236

ifmerge236:                                       ; preds = %then229, %ifmerge235
  br label %ifmerge237

ifmerge237:                                       ; preds = %ifmerge228, %ifmerge236
  br label %loop-header225

loop-merge238:                                    ; preds = %else233, %then226
  br label %loop-header239

loop-header239:                                   ; preds = %post-loop-break254, %ifmerge250, %loop-merge238
  %310 = load <4 x float>* %color
  %311 = extractelement <4 x float> %310, i32 2
  %312 = load float addrspace(2)* @d10
  %313 = fcmp oge float %311, %312
  br i1 %313, label %then240, label %ifmerge242

then240:                                          ; preds = %loop-header239
  br label %loop-merge255

post-loop-break241:                               ; No predecessors!
  br label %ifmerge242

ifmerge242:                                       ; preds = %loop-header239, %post-loop-break241
  %314 = load <4 x float>* %color
  %315 = extractelement <4 x float> %314, i32 1
  %316 = fadd float %315, 1.000000e+00
  %317 = load <4 x float>* %color
  %color243 = insertelement <4 x float> %317, float %316, i32 1
  store <4 x float> %color243, <4 x float>* %color
  %318 = load <4 x float>* %color
  %319 = extractelement <4 x float> %318, i32 1
  %320 = load float addrspace(2)* @d11
  %321 = fcmp olt float %319, %320
  br i1 %321, label %then244, label %ifmerge252

then244:                                          ; preds = %ifmerge242
  %322 = load <4 x float>* %color
  %323 = extractelement <4 x float> %322, i32 2
  %324 = fadd float %323, 1.000000e+00
  %325 = load <4 x float>* %color
  %color245 = insertelement <4 x float> %325, float %324, i32 2
  store <4 x float> %color245, <4 x float>* %color
  %326 = load <4 x float>* %color
  %327 = extractelement <4 x float> %326, i32 3
  %328 = load float addrspace(2)* @d12
  %329 = fcmp olt float %327, %328
  br i1 %329, label %then246, label %else248

then246:                                          ; preds = %then244
  %330 = load <4 x float>* %color
  %331 = extractelement <4 x float> %330, i32 3
  %332 = fadd float %331, 1.000000e+00
  %333 = load <4 x float>* %color
  %color247 = insertelement <4 x float> %333, float %332, i32 3
  store <4 x float> %color247, <4 x float>* %color
  br label %ifmerge250

else248:                                          ; preds = %then244
  %334 = load <4 x float>* %color
  %335 = extractelement <4 x float> %334, i32 0
  %336 = fadd float %335, 1.000000e+00
  %337 = load <4 x float>* %color
  %color249 = insertelement <4 x float> %337, float %336, i32 0
  store <4 x float> %color249, <4 x float>* %color
  br label %ifmerge250

ifmerge250:                                       ; preds = %else248, %then246
  br label %loop-header239

post-loop-continue251:                            ; No predecessors!
  br label %ifmerge252

ifmerge252:                                       ; preds = %ifmerge242, %post-loop-continue251
  %338 = load <4 x float>* %color
  %339 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color253 = fadd <4 x float> %338, %339
  store <4 x float> %color253, <4 x float>* %color
  br label %loop-merge255

post-loop-break254:                               ; No predecessors!
  br label %loop-header239

loop-merge255:                                    ; preds = %ifmerge252, %then240
  br label %loop-header256

loop-header256:                                   ; preds = %ifmerge267, %then264, %loop-merge255
  %340 = load <4 x float>* %color
  %341 = extractelement <4 x float> %340, i32 0
  %342 = fcmp oge float %341, 1.000000e+01
  br i1 %342, label %then257, label %ifmerge259

then257:                                          ; preds = %loop-header256
  br label %loop-merge269

post-loop-break258:                               ; No predecessors!
  br label %ifmerge259

ifmerge259:                                       ; preds = %loop-header256, %post-loop-break258
  %343 = load <4 x float>* %color
  %344 = load <4 x float> addrspace(2)* @bigColor8
  %assignment_tmp260261 = fadd <4 x float> %343, %344
  store <4 x float> %assignment_tmp260261, <4 x float>* %assignment_tmp260
  %color262 = load <4 x float>* %assignment_tmp260
  store <4 x float> %color262, <4 x float>* %color
  %345 = load <4 x float>* %assignment_tmp260
  %346 = extractelement <4 x float> %345, i32 2
  %347 = load float addrspace(2)* @d8
  %348 = fcmp olt float %346, %347
  br i1 %348, label %then263, label %ifmerge267

then263:                                          ; preds = %ifmerge259
  %349 = load <4 x float>* %assignment_tmp260
  %350 = extractelement <4 x float> %349, i32 3
  %351 = load float addrspace(2)* @d6
  %352 = fcmp olt float %350, %351
  br i1 %352, label %then264, label %ifmerge266

then264:                                          ; preds = %then263
  br label %loop-header256

post-loop-continue265:                            ; No predecessors!
  br label %ifmerge266

ifmerge266:                                       ; preds = %then263, %post-loop-continue265
  br label %ifmerge267

ifmerge267:                                       ; preds = %ifmerge259, %ifmerge266
  %353 = load <4 x float>* %assignment_tmp260
  %354 = extractelement <4 x float> %353, i32 1
  %355 = load <4 x float> addrspace(2)* @bigColor8
  %356 = extractelement <4 x float> %355, i32 0
  %357 = fadd float %354, %356
  %358 = load <4 x float>* %color
  %color268 = insertelement <4 x float> %358, float %357, i32 1
  store <4 x float> %color268, <4 x float>* %color
  br label %loop-header256

loop-merge269:                                    ; preds = %then257
  br label %loop-header270

loop-header270:                                   ; preds = %ifmerge293, %then284, %loop-merge269
  %359 = load <4 x float>* %color
  %360 = extractelement <4 x float> %359, i32 3
  %361 = load float addrspace(2)* @d13
  %362 = fcmp oge float %360, %361
  br i1 %362, label %then271, label %ifmerge273

then271:                                          ; preds = %loop-header270
  br label %loop-merge294

post-loop-break272:                               ; No predecessors!
  br label %ifmerge273

ifmerge273:                                       ; preds = %loop-header270, %post-loop-break272
  %363 = load <4 x float>* %color
  %364 = extractelement <4 x float> %363, i32 2
  %365 = load float addrspace(2)* @d13
  %366 = fcmp olt float %364, %365
  br i1 %366, label %then274, label %else276

then274:                                          ; preds = %ifmerge273
  %367 = load <4 x float>* %color
  %368 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color275 = fadd <4 x float> %367, %368
  store <4 x float> %color275, <4 x float>* %color
  br label %ifmerge278

else276:                                          ; preds = %ifmerge273
  %369 = load <4 x float>* %color
  %370 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color277 = fsub <4 x float> %369, %370
  store <4 x float> %color277, <4 x float>* %color
  br label %ifmerge278

ifmerge278:                                       ; preds = %else276, %then274
  %371 = load <4 x float>* %color
  %372 = load <4 x float> addrspace(2)* @bigColor4
  %assignment_tmp279280 = fadd <4 x float> %371, %372
  store <4 x float> %assignment_tmp279280, <4 x float>* %assignment_tmp279
  %color281 = load <4 x float>* %assignment_tmp279
  store <4 x float> %color281, <4 x float>* %color
  %373 = load <4 x float>* %assignment_tmp279
  %374 = extractelement <4 x float> %373, i32 0
  %375 = load float addrspace(2)* @d4
  %376 = fcmp olt float %374, %375
  br i1 %376, label %then282, label %ifmerge288

then282:                                          ; preds = %ifmerge278
  %377 = load <4 x float>* %assignment_tmp279
  %378 = extractelement <4 x float> %377, i32 2
  %379 = fadd float %378, 2.000000e+00
  %380 = load <4 x float>* %color
  %color283 = insertelement <4 x float> %380, float %379, i32 2
  store <4 x float> %color283, <4 x float>* %color
  %381 = load <4 x float>* %color
  %382 = extractelement <4 x float> %381, i32 2
  %383 = load float addrspace(2)* @d4
  %384 = fcmp olt float %382, %383
  br i1 %384, label %then284, label %ifmerge287

then284:                                          ; preds = %then282
  %385 = load <4 x float>* %color
  %386 = extractelement <4 x float> %385, i32 0
  %387 = fadd float %386, 1.000000e+00
  %388 = load <4 x float>* %color
  %color285 = insertelement <4 x float> %388, float %387, i32 0
  store <4 x float> %color285, <4 x float>* %color
  br label %loop-header270

post-loop-continue286:                            ; No predecessors!
  br label %ifmerge287

ifmerge287:                                       ; preds = %then282, %post-loop-continue286
  br label %ifmerge288

ifmerge288:                                       ; preds = %ifmerge278, %ifmerge287
  %389 = load <4 x float>* %color
  %390 = extractelement <4 x float> %389, i32 1
  %391 = load float addrspace(2)* @d4
  %392 = fcmp olt float %390, %391
  br i1 %392, label %then289, label %else291

then289:                                          ; preds = %ifmerge288
  %393 = load <4 x float>* %color
  %394 = extractelement <4 x float> %393, i32 1
  %395 = load float addrspace(2)* @d4
  %396 = fadd float %394, %395
  %397 = load <4 x float>* %color
  %color290 = insertelement <4 x float> %397, float %396, i32 1
  store <4 x float> %color290, <4 x float>* %color
  br label %ifmerge293

else291:                                          ; preds = %ifmerge288
  %398 = load <4 x float>* %color
  %399 = extractelement <4 x float> %398, i32 0
  %400 = load float addrspace(2)* @d4
  %401 = fadd float %399, %400
  %402 = load <4 x float>* %color
  %color292 = insertelement <4 x float> %402, float %401, i32 0
  store <4 x float> %color292, <4 x float>* %color
  br label %ifmerge293

ifmerge293:                                       ; preds = %else291, %then289
  br label %loop-header270

loop-merge294:                                    ; preds = %then271
  %403 = load <4 x float>* %color
  %404 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %assignment_tmp295296 = fadd <4 x float> %403, %404
  store <4 x float> %assignment_tmp295296, <4 x float>* %assignment_tmp295
  %color297 = load <4 x float>* %assignment_tmp295
  store <4 x float> %color297, <4 x float>* %color
  %gl_FragColor = load <4 x float>* %assignment_tmp295
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %loop-header298

loop-header298:                                   ; preds = %ifmerge305, %loop-merge294
  %405 = load <4 x float>* %color
  %406 = extractelement <4 x float> %405, i32 0
  %407 = load float addrspace(2)* @d14
  %408 = fcmp oge float %406, %407
  br i1 %408, label %then299, label %ifmerge301

then299:                                          ; preds = %loop-header298
  br label %loop-merge306

post-loop-break300:                               ; No predecessors!
  br label %ifmerge301

ifmerge301:                                       ; preds = %loop-header298, %post-loop-break300
  %409 = load <4 x float>* %color
  %410 = extractelement <4 x float> %409, i32 1
  %411 = load float addrspace(2)* @d15
  %412 = fcmp olt float %410, %411
  br i1 %412, label %then302, label %else303

then302:                                          ; preds = %ifmerge301
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge305

else303:                                          ; preds = %ifmerge301
  %413 = load <4 x float>* %color
  %414 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color304 = fadd <4 x float> %413, %414
  store <4 x float> %color304, <4 x float>* %color
  br label %ifmerge305

ifmerge305:                                       ; preds = %else303, %post-return
  br label %loop-header298

loop-merge306:                                    ; preds = %then299
  %415 = load <4 x float>* %color
  %416 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color307 = fadd <4 x float> %415, %416
  store <4 x float> %color307, <4 x float>* %color
  br label %loop-header308

loop-header308:                                   ; preds = %ifmerge311, %loop-merge306
  %417 = load <4 x float>* %color
  %418 = extractelement <4 x float> %417, i32 3
  %419 = load float addrspace(2)* @d16
  %420 = fcmp oge float %418, %419
  br i1 %420, label %then309, label %ifmerge311

then309:                                          ; preds = %loop-header308
  br label %loop-merge313

post-loop-break310:                               ; No predecessors!
  br label %ifmerge311

ifmerge311:                                       ; preds = %loop-header308, %post-loop-break310
  %421 = load <4 x float>* %color
  %422 = extractelement <4 x float> %421, i32 3
  %423 = fadd float %422, 1.000000e+00
  %424 = load <4 x float>* %color
  %color312 = insertelement <4 x float> %424, float %423, i32 3
  store <4 x float> %color312, <4 x float>* %color
  br label %loop-header308

loop-merge313:                                    ; preds = %then309
  br label %loop-header314

loop-header314:                                   ; preds = %ifmerge328, %loop-merge313
  %425 = load <4 x float>* %color
  %426 = extractelement <4 x float> %425, i32 3
  %427 = load float addrspace(2)* @d2
  %428 = fcmp olt float %426, %427
  br i1 %428, label %then316, label %else318

then316:                                          ; preds = %loop-header314
  %429 = load <4 x float>* %color
  %430 = extractelement <4 x float> %429, i32 1
  %431 = load float addrspace(2)* @d3
  %and_tmp315317 = fcmp olt float %430, %431
  store i1 %and_tmp315317, i1* %and_tmp315
  br label %ifmerge319

else318:                                          ; preds = %loop-header314
  store i1 false, i1* %and_tmp315
  br label %ifmerge319

ifmerge319:                                       ; preds = %else318, %then316
  %432 = load i1* %and_tmp315
  %433 = xor i1 %432, true
  br i1 %433, label %then320, label %ifmerge322

then320:                                          ; preds = %ifmerge319
  br label %loop-merge329

post-loop-break321:                               ; No predecessors!
  br label %ifmerge322

ifmerge322:                                       ; preds = %ifmerge319, %post-loop-break321
  %434 = load <4 x float>* %color
  %435 = load <4 x float> addrspace(2)* @bigColor1_2
  %assignment_tmp323324 = fadd <4 x float> %434, %435
  store <4 x float> %assignment_tmp323324, <4 x float>* %assignment_tmp323
  %color325 = load <4 x float>* %assignment_tmp323
  store <4 x float> %color325, <4 x float>* %color
  %436 = load <4 x float>* %assignment_tmp323
  %437 = extractelement <4 x float> %436, i32 2
  %438 = load float addrspace(2)* @d3
  %439 = fcmp olt float %437, %438
  br i1 %439, label %then326, label %ifmerge328

then326:                                          ; preds = %ifmerge322
  br label %stage-epilogue

post-return327:                                   ; No predecessors!
  br label %ifmerge328

ifmerge328:                                       ; preds = %ifmerge322, %post-return327
  br label %loop-header314

loop-merge329:                                    ; preds = %then320
  br label %loop-header330

loop-header330:                                   ; preds = %ifmerge339, %loop-merge329
  %440 = load <4 x float>* %color
  %441 = extractelement <4 x float> %440, i32 1
  %442 = load float addrspace(2)* @d18
  %443 = fcmp olt float %441, %442
  br i1 %443, label %then331, label %ifmerge333

then331:                                          ; preds = %loop-header330
  br label %stage-epilogue

post-return332:                                   ; No predecessors!
  br label %ifmerge333

ifmerge333:                                       ; preds = %loop-header330, %post-return332
  %444 = load <4 x float>* %color
  %445 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %assignment_tmp334335 = fadd <4 x float> %444, %445
  store <4 x float> %assignment_tmp334335, <4 x float>* %assignment_tmp334
  %color336 = load <4 x float>* %assignment_tmp334
  store <4 x float> %color336, <4 x float>* %color
  %446 = load <4 x float>* %assignment_tmp334
  %447 = extractelement <4 x float> %446, i32 0
  %448 = load float addrspace(2)* @d17
  %449 = fcmp oge float %447, %448
  br i1 %449, label %then337, label %ifmerge339

then337:                                          ; preds = %ifmerge333
  br label %loop-merge340

post-loop-break338:                               ; No predecessors!
  br label %ifmerge339

ifmerge339:                                       ; preds = %ifmerge333, %post-loop-break338
  br label %loop-header330

loop-merge340:                                    ; preds = %then337
  br label %loop-header341

loop-header341:                                   ; preds = %ifmerge348, %loop-merge340
  %450 = load <4 x float>* %color
  %451 = extractelement <4 x float> %450, i32 1
  %452 = load float addrspace(2)* @d16
  %453 = fcmp oge float %451, %452
  br i1 %453, label %then342, label %ifmerge344

then342:                                          ; preds = %loop-header341
  br label %loop-merge349

post-loop-break343:                               ; No predecessors!
  br label %ifmerge344

ifmerge344:                                       ; preds = %loop-header341, %post-loop-break343
  %454 = load <4 x float>* %color
  %455 = extractelement <4 x float> %454, i32 3
  %456 = load float addrspace(2)* @d16
  %457 = fcmp olt float %455, %456
  br i1 %457, label %then345, label %else346

then345:                                          ; preds = %ifmerge344
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge348

else346:                                          ; preds = %ifmerge344
  %458 = load <4 x float>* %color
  %459 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color347 = fadd <4 x float> %458, %459
  store <4 x float> %color347, <4 x float>* %color
  br label %ifmerge348

ifmerge348:                                       ; preds = %else346, %post-discard
  br label %loop-header341

loop-merge349:                                    ; preds = %then342
  %460 = load <4 x float>* %color
  %461 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %assignment_tmp350351 = fadd <4 x float> %460, %461
  store <4 x float> %assignment_tmp350351, <4 x float>* %assignment_tmp350
  %color352 = load <4 x float>* %assignment_tmp350
  store <4 x float> %color352, <4 x float>* %color
  %gl_FragColor353 = load <4 x float>* %assignment_tmp350
  store <4 x float> %gl_FragColor353, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge349, %then331, %then326, %then302
  %462 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %462)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then345
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@d13 = external addrspace(2) constant float
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %.pre = load float addrspace(2)* @d
  %0 = load <4 x float> addrspace(2)* @bigColor
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %color.0 = phi <4 x float> [ %BaseColor, %entry ], [ %color6, %ifmerge ]
  %1 = extractelement <4 x float> %color.0, i32 0
  %2 = fcmp ult float %1, %.pre
  br i1 %2, label %ifmerge, label %then

then:                                             ; preds = %loop-header
  %3 = load <4 x float> addrspace(2)* @bigColor1_1
  br label %loop-header7

ifmerge:                                          ; preds = %loop-header
  %color6 = fadd <4 x float> %color.0, %0
  br label %loop-header

loop-header7:                                     ; preds = %loop-header7.backedge, %then
  %color.1 = phi <4 x float> [ %color.0, %then ], [ %color.1.be, %loop-header7.backedge ]
  %4 = extractelement <4 x float> %color.1, i32 2
  %5 = fcmp ult float %4, %.pre
  br i1 %5, label %ifmerge10, label %then8

then8:                                            ; preds = %loop-header7
  br label %loop-header17

ifmerge10:                                        ; preds = %loop-header7
  %assignment_tmp11 = fadd <4 x float> %color.1, %3
  %6 = extractelement <4 x float> %assignment_tmp11, i32 3
  %7 = fcmp olt float %6, %.pre
  br i1 %7, label %then13, label %ifmerge14

then13:                                           ; preds = %ifmerge10
  br label %loop-header7.backedge

loop-header7.backedge:                            ; preds = %then13, %ifmerge14
  %color.1.be = phi <4 x float> [ %assignment_tmp11, %then13 ], [ %color15, %ifmerge14 ]
  br label %loop-header7

ifmerge14:                                        ; preds = %ifmerge10
  %color15 = fadd <4 x float> %assignment_tmp11, %3
  br label %loop-header7.backedge

loop-header17:                                    ; preds = %ifmerge20, %then8
  %color.2 = phi <4 x float> [ %color.1, %then8 ], [ %color21, %ifmerge20 ]
  %8 = extractelement <4 x float> %color.2, i32 0
  %9 = fcmp ult float %8, 4.200000e+01
  br i1 %9, label %ifmerge20, label %then18

then18:                                           ; preds = %loop-header17
  %.pre355 = load float addrspace(2)* @d2
  %10 = load float addrspace(2)* @d3
  %11 = load <4 x float> addrspace(2)* @bigColor1_2
  br label %loop-header23

ifmerge20:                                        ; preds = %loop-header17
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color21 = fadd <4 x float> %color.2, %12
  br label %loop-header17

loop-header23:                                    ; preds = %ifmerge29, %then18
  %color.3 = phi <4 x float> [ %color.2, %then18 ], [ %color30, %ifmerge29 ]
  %13 = extractelement <4 x float> %color.3, i32 3
  %14 = fcmp olt float %13, %.pre355
  br i1 %14, label %then24, label %else

then24:                                           ; preds = %loop-header23
  %15 = extractelement <4 x float> %color.3, i32 1
  %phitmp = fcmp uge float %15, %10
  br label %ifmerge26

else:                                             ; preds = %loop-header23
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then24
  %and_tmp.0 = phi i1 [ %phitmp, %then24 ], [ true, %else ]
  br i1 %and_tmp.0, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  %16 = load <4 x float> addrspace(2)* @bigColor1_3
  %17 = load float addrspace(2)* @d4
  br label %loop-header32

ifmerge29:                                        ; preds = %ifmerge26
  %color30 = fadd <4 x float> %color.3, %11
  br label %loop-header23

loop-header32:                                    ; preds = %ifmerge41, %then27
  %color.4 = phi <4 x float> [ %color.3, %then27 ], [ %color42, %ifmerge41 ]
  %18 = extractelement <4 x float> %color.4, i32 2
  %19 = fcmp ult float %18, %10
  br i1 %19, label %ifmerge35, label %then33

then33:                                           ; preds = %loop-header32
  br label %loop-merge43

ifmerge35:                                        ; preds = %loop-header32
  %assignment_tmp3637 = fadd <4 x float> %color.4, %16
  %20 = extractelement <4 x float> %assignment_tmp3637, i32 1
  %21 = fcmp olt float %20, %17
  br i1 %21, label %then39, label %ifmerge41

then39:                                           ; preds = %ifmerge35
  br label %loop-merge43

ifmerge41:                                        ; preds = %ifmerge35
  %color42 = fadd <4 x float> %assignment_tmp3637, %16
  br label %loop-header32

loop-merge43:                                     ; preds = %then39, %then33
  %color.5 = phi <4 x float> [ %color.4, %then33 ], [ %assignment_tmp3637, %then39 ]
  %.pre357 = load i32 addrspace(2)* @Count
  %22 = load <4 x float> addrspace(2)* @bigColor2
  %tmp429 = icmp sgt i32 %.pre357, 0
  %smax = select i1 %tmp429, i32 %.pre357, i32 0
  br label %loop-header44

loop-header44:                                    ; preds = %ifmerge47, %loop-merge43
  %indvar427 = phi i32 [ %indvar.next428, %ifmerge47 ], [ 0, %loop-merge43 ]
  %color.6 = phi <4 x float> [ %color48, %ifmerge47 ], [ %color.5, %loop-merge43 ]
  %exitcond430 = icmp eq i32 %indvar427, %smax
  br i1 %exitcond430, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  %.pre358 = load <4 x float> addrspace(2)* @bigColor3
  br label %loop-header51

ifmerge47:                                        ; preds = %loop-header44
  %color48 = fadd <4 x float> %color.6, %22
  %indvar.next428 = add i32 %indvar427, 1
  br label %loop-header44

loop-header51:                                    ; preds = %ifmerge57, %then45
  %color.7 = phi <4 x float> [ %color.6, %then45 ], [ %assignment_tmp5253, %ifmerge57 ]
  %assignment_tmp5253 = fadd <4 x float> %color.7, %.pre358
  %23 = extractelement <4 x float> %assignment_tmp5253, i32 0
  %24 = fcmp ult float %23, %.pre355
  br i1 %24, label %ifmerge57, label %then55

then55:                                           ; preds = %loop-header51
  br label %loop-header60

ifmerge57:                                        ; preds = %loop-header51
  br label %loop-header51

loop-header60:                                    ; preds = %loop-header60, %then55
  %indvar424 = phi i32 [ %indvar.next425, %loop-header60 ], [ 0, %then55 ]
  %color.8 = phi <4 x float> [ %27, %loop-header60 ], [ %assignment_tmp5253, %then55 ]
  %25 = extractelement <4 x float> %color.8, i32 2
  %26 = fadd float %25, %10
  %27 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.8, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %26, i32 -1, float 0.000000e+00, i32 -1)
  %indvar.next425 = add i32 %indvar424, 1
  %exitcond426 = icmp eq i32 %indvar.next425, 42
  br i1 %exitcond426, label %loop-merge63, label %loop-header60

loop-merge63:                                     ; preds = %loop-header60
  br label %loop-header65

loop-header65:                                    ; preds = %ifmerge74, %loop-merge63
  %indvar421 = phi i32 [ %indvar.next422, %ifmerge74 ], [ 0, %loop-merge63 ]
  %color.9 = phi <4 x float> [ %color.10, %ifmerge74 ], [ %27, %loop-merge63 ]
  %28 = extractelement <4 x float> %color.9, i32 2
  %29 = fcmp olt float %28, 2.000000e+01
  br i1 %29, label %then66, label %else68

then66:                                           ; preds = %loop-header65
  %30 = extractelement <4 x float> %color.9, i32 0
  %31 = fadd float %30, 1.000000e+00
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.9, i32 1, float %31, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge70

else68:                                           ; preds = %loop-header65
  %33 = extractelement <4 x float> %color.9, i32 1
  %34 = fadd float %33, 1.000000e+00
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.9, i32 2, float 0.000000e+00, i32 -1, float %34, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge70

ifmerge70:                                        ; preds = %else68, %then66
  %color.10 = phi <4 x float> [ %32, %then66 ], [ %35, %else68 ]
  %36 = extractelement <4 x float> %color.10, i32 3
  %37 = fcmp olt float %36, 2.000000e+01
  br i1 %37, label %then71, label %ifmerge74

then71:                                           ; preds = %ifmerge70
  br label %ifmerge74

ifmerge74:                                        ; preds = %ifmerge70, %then71
  %indvar.next422 = add i32 %indvar421, 1
  %exitcond = icmp eq i32 %indvar.next422, 100
  br i1 %exitcond, label %loop-merge76, label %loop-header65

loop-merge76:                                     ; preds = %ifmerge74
  br label %loop-header78

loop-header78:                                    ; preds = %ifmerge83, %loop-merge76
  %indvar = phi i32 [ %indvar.next, %ifmerge83 ], [ 0, %loop-merge76 ]
  %color.11 = phi <4 x float> [ %color.12, %ifmerge83 ], [ %color.10, %loop-merge76 ]
  %38 = extractelement <4 x float> %color.11, i32 2
  %39 = fcmp olt float %38, 2.000000e+01
  br i1 %39, label %then79, label %else81

then79:                                           ; preds = %loop-header78
  %40 = extractelement <4 x float> %color.11, i32 0
  %41 = fadd float %40, 1.000000e+00
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.11, i32 1, float %41, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge83

else81:                                           ; preds = %loop-header78
  %43 = extractelement <4 x float> %color.11, i32 1
  %44 = fadd float %43, 1.000000e+00
  %45 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.11, i32 2, float 0.000000e+00, i32 -1, float %44, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge83

ifmerge83:                                        ; preds = %else81, %then79
  %color.12 = phi <4 x float> [ %42, %then79 ], [ %45, %else81 ]
  %indvar.next = add i32 %indvar, 1
  %exitcond420 = icmp eq i32 %indvar.next, 120
  br i1 %exitcond420, label %loop-merge85, label %loop-header78

loop-merge85:                                     ; preds = %ifmerge83
  br label %loop-header86

loop-header86:                                    ; preds = %loop-header86.backedge, %loop-merge85
  %color.13 = phi <4 x float> [ %color.12, %loop-merge85 ], [ %color.13.be, %loop-header86.backedge ]
  %i1.0 = phi i32 [ 0, %loop-merge85 ], [ %i1.0.be, %loop-header86.backedge ]
  %exitcond419 = icmp eq i32 %i1.0, 42
  br i1 %exitcond419, label %then87, label %ifmerge89

then87:                                           ; preds = %loop-header86
  br label %loop-header99

ifmerge89:                                        ; preds = %loop-header86
  %46 = extractelement <4 x float> %color.13, i32 2
  %47 = fadd float %46, %10
  %48 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.13, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %47, i32 -1, float 0.000000e+00, i32 -1)
  %49 = extractelement <4 x float> %48, i32 0
  %50 = fcmp olt float %49, %17
  br i1 %50, label %then91, label %ifmerge94

then91:                                           ; preds = %ifmerge89
  br label %loop-header86.backedge

loop-header86.backedge:                           ; preds = %then91, %ifmerge94
  %color.13.be = phi <4 x float> [ %48, %then91 ], [ %53, %ifmerge94 ]
  %i1.0.be = add i32 %i1.0, 1
  br label %loop-header86

ifmerge94:                                        ; preds = %ifmerge89
  %51 = extractelement <4 x float> %48, i32 3
  %52 = fadd float %51, 1.000000e+00
  %53 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %48, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %52, i32 -1)
  br label %loop-header86.backedge

loop-header99:                                    ; preds = %ifmerge103, %then87
  %i98.0 = phi i32 [ 0, %then87 ], [ %62, %ifmerge103 ]
  %color.14 = phi <4 x float> [ %color.13, %then87 ], [ %61, %ifmerge103 ]
  %tmp = add i32 %i98.0, 1
  %54 = extractelement <4 x float> %color.14, i32 2
  %55 = fadd float %54, %10
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %55, i32 -1, float 0.000000e+00, i32 -1)
  %57 = extractelement <4 x float> %56, i32 0
  %58 = fcmp olt float %57, %17
  br i1 %58, label %then101, label %ifmerge103

then101:                                          ; preds = %loop-header99
  br label %loop-merge106

ifmerge103:                                       ; preds = %loop-header99
  %59 = extractelement <4 x float> %56, i32 3
  %60 = fadd float %59, 1.000000e+00
  %61 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %56, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %60, i32 -1)
  %62 = add i32 %i98.0, 1
  %63 = icmp sgt i32 %tmp, 41
  br i1 %63, label %loop-merge106.loopexit, label %loop-header99

loop-merge106.loopexit:                           ; preds = %ifmerge103
  br label %loop-merge106

loop-merge106:                                    ; preds = %loop-merge106.loopexit, %then101
  %color.15 = phi <4 x float> [ %56, %then101 ], [ %61, %loop-merge106.loopexit ]
  %.pre360 = load <4 x float> addrspace(2)* @bigColor4
  br label %loop-header107

loop-header107:                                   ; preds = %loop-header107.backedge, %loop-merge106
  %color.16 = phi <4 x float> [ %color.15, %loop-merge106 ], [ %color.16.be, %loop-header107.backedge ]
  %assignment_tmp108109 = fadd <4 x float> %color.16, %.pre360
  %64 = extractelement <4 x float> %assignment_tmp108109, i32 0
  %65 = fcmp olt float %64, %17
  br i1 %65, label %then111, label %ifmerge113

then111:                                          ; preds = %loop-header107
  br label %loop-header107.backedge

loop-header107.backedge:                          ; preds = %then111, %ifmerge121
  %color.16.be = phi <4 x float> [ %assignment_tmp108109, %then111 ], [ %color.17, %ifmerge121 ]
  br label %loop-header107

ifmerge113:                                       ; preds = %loop-header107
  %66 = extractelement <4 x float> %assignment_tmp108109, i32 1
  %67 = fcmp olt float %66, %17
  br i1 %67, label %then114, label %else116

then114:                                          ; preds = %ifmerge113
  %68 = fadd float %66, %17
  %69 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp108109, i32 2, float 0.000000e+00, i32 -1, float %68, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge118

else116:                                          ; preds = %ifmerge113
  %70 = fadd float %64, %17
  %71 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp108109, i32 1, float %70, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge118

ifmerge118:                                       ; preds = %else116, %then114
  %color.17 = phi <4 x float> [ %69, %then114 ], [ %71, %else116 ]
  %72 = extractelement <4 x float> %color.17, i32 2
  %73 = fcmp ult float %72, %17
  br i1 %73, label %ifmerge121, label %then119

then119:                                          ; preds = %ifmerge118
  br label %loop-header123

ifmerge121:                                       ; preds = %ifmerge118
  br label %loop-header107.backedge

loop-header123:                                   ; preds = %loop-header123.backedge, %then119
  %color.18 = phi <4 x float> [ %color.17, %then119 ], [ %color.18.be, %loop-header123.backedge ]
  %assignment_tmp124125 = fadd <4 x float> %color.18, %.pre360
  %74 = extractelement <4 x float> %assignment_tmp124125, i32 0
  %75 = fcmp olt float %74, %17
  br i1 %75, label %then127, label %ifmerge133

then127:                                          ; preds = %loop-header123
  %76 = extractelement <4 x float> %assignment_tmp124125, i32 2
  %77 = fadd float %76, 2.000000e+00
  %78 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp124125, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %77, i32 -1, float 0.000000e+00, i32 -1)
  %79 = extractelement <4 x float> %78, i32 2
  %80 = fcmp olt float %79, %17
  br i1 %80, label %then129, label %ifmerge132

then129:                                          ; preds = %then127
  %81 = extractelement <4 x float> %78, i32 0
  %82 = fadd float %81, 1.000000e+00
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %78, i32 1, float %82, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header123.backedge

loop-header123.backedge:                          ; preds = %then129, %ifmerge141
  %color.18.be = phi <4 x float> [ %83, %then129 ], [ %color.20, %ifmerge141 ]
  br label %loop-header123

ifmerge132:                                       ; preds = %then127
  br label %ifmerge133

ifmerge133:                                       ; preds = %loop-header123, %ifmerge132
  %color.19 = phi <4 x float> [ %78, %ifmerge132 ], [ %assignment_tmp124125, %loop-header123 ]
  %84 = extractelement <4 x float> %color.19, i32 1
  %85 = fcmp olt float %84, %17
  br i1 %85, label %then134, label %else136

then134:                                          ; preds = %ifmerge133
  %86 = fadd float %84, %17
  %87 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.19, i32 2, float 0.000000e+00, i32 -1, float %86, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge138

else136:                                          ; preds = %ifmerge133
  %88 = extractelement <4 x float> %color.19, i32 0
  %89 = fadd float %88, %17
  %90 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.19, i32 1, float %89, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge138

ifmerge138:                                       ; preds = %else136, %then134
  %color.20 = phi <4 x float> [ %87, %then134 ], [ %90, %else136 ]
  %91 = extractelement <4 x float> %color.20, i32 2
  %92 = fcmp ult float %91, %17
  br i1 %92, label %ifmerge141, label %then139

then139:                                          ; preds = %ifmerge138
  %.pre361 = load <4 x float> addrspace(2)* @bigColor5
  %.pre362 = load float addrspace(2)* @d5
  br label %loop-header143

ifmerge141:                                       ; preds = %ifmerge138
  br label %loop-header123.backedge

loop-header143:                                   ; preds = %ifmerge152, %then139
  %color.21 = phi <4 x float> [ %color.20, %then139 ], [ %color.22, %ifmerge152 ]
  %assignment_tmp144145 = fadd <4 x float> %color.21, %.pre361
  %93 = extractelement <4 x float> %assignment_tmp144145, i32 1
  %94 = fcmp olt float %93, %.pre362
  br i1 %94, label %then147, label %ifmerge149

then147:                                          ; preds = %loop-header143
  %95 = fadd float %93, %.pre362
  %96 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp144145, i32 2, float 0.000000e+00, i32 -1, float %95, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge149

ifmerge149:                                       ; preds = %loop-header143, %then147
  %color.22 = phi <4 x float> [ %96, %then147 ], [ %assignment_tmp144145, %loop-header143 ]
  %97 = extractelement <4 x float> %color.22, i32 0
  %98 = fcmp ult float %97, %.pre362
  br i1 %98, label %ifmerge152, label %then150

then150:                                          ; preds = %ifmerge149
  %99 = load float addrspace(2)* @d6
  %100 = fcmp olt float %97, %99
  br i1 %100, label %then154, label %else161

ifmerge152:                                       ; preds = %ifmerge149
  br label %loop-header143

then154:                                          ; preds = %then150
  %101 = load <4 x float> addrspace(2)* @bigColor6
  br label %loop-header155

loop-header155:                                   ; preds = %ifmerge158, %then154
  %color.23 = phi <4 x float> [ %color.22, %then154 ], [ %color159, %ifmerge158 ]
  %102 = extractelement <4 x float> %color.23, i32 1
  %103 = fcmp ult float %102, %99
  br i1 %103, label %ifmerge158, label %then156

then156:                                          ; preds = %loop-header155
  br label %ifmerge168

ifmerge158:                                       ; preds = %loop-header155
  %color159 = fadd <4 x float> %color.23, %101
  br label %loop-header155

else161:                                          ; preds = %then150
  %104 = load <4 x float> addrspace(2)* @bigColor6
  %105 = extractelement <4 x float> %104, i32 2
  br label %loop-header162

loop-header162:                                   ; preds = %ifmerge165, %else161
  %color.24 = phi <4 x float> [ %color.22, %else161 ], [ %109, %ifmerge165 ]
  %106 = extractelement <4 x float> %color.24, i32 2
  %107 = fcmp ult float %106, %99
  br i1 %107, label %ifmerge165, label %then163

then163:                                          ; preds = %loop-header162
  br label %ifmerge168

ifmerge165:                                       ; preds = %loop-header162
  %108 = fadd float %106, %105
  %109 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.24, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %108, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header162

ifmerge168:                                       ; preds = %then163, %then156
  %110 = phi <4 x float> [ %101, %then156 ], [ %104, %then163 ]
  %color.25 = phi <4 x float> [ %color.23, %then156 ], [ %color.24, %then163 ]
  %111 = extractelement <4 x float> %color.25, i32 0
  %112 = fcmp olt float %111, %99
  br i1 %112, label %then169, label %else179

then169:                                          ; preds = %ifmerge168
  %113 = load float addrspace(2)* @d7
  %114 = fcmp olt float %113, 1.000000e+00
  br label %loop-header170

loop-header170:                                   ; preds = %ifmerge177, %then169
  %color.26 = phi <4 x float> [ %color.25, %then169 ], [ %color174, %ifmerge177 ]
  %115 = extractelement <4 x float> %color.26, i32 1
  %116 = fcmp ult float %115, %99
  br i1 %116, label %ifmerge173, label %then171

then171:                                          ; preds = %loop-header170
  br label %loop-merge178

ifmerge173:                                       ; preds = %loop-header170
  %color174 = fadd <4 x float> %color.26, %110
  br i1 %114, label %then175, label %ifmerge177

then175:                                          ; preds = %ifmerge173
  br label %loop-merge178

ifmerge177:                                       ; preds = %ifmerge173
  br label %loop-header170

loop-merge178:                                    ; preds = %then175, %then171
  %color.27 = phi <4 x float> [ %color.26, %then171 ], [ %color174, %then175 ]
  br label %ifmerge186

else179:                                          ; preds = %ifmerge168
  %117 = extractelement <4 x float> %110, i32 2
  br label %loop-header180

loop-header180:                                   ; preds = %ifmerge183, %else179
  %color.28 = phi <4 x float> [ %color.25, %else179 ], [ %121, %ifmerge183 ]
  %118 = extractelement <4 x float> %color.28, i32 2
  %119 = fcmp ult float %118, %99
  br i1 %119, label %ifmerge183, label %then181

then181:                                          ; preds = %loop-header180
  br label %ifmerge186

ifmerge183:                                       ; preds = %loop-header180
  %120 = fadd float %118, %117
  %121 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.28, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %120, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header180

ifmerge186:                                       ; preds = %then181, %loop-merge178
  %color.29 = phi <4 x float> [ %color.27, %loop-merge178 ], [ %color.28, %then181 ]
  %.pre363 = load float addrspace(2)* @d7
  %.pre371 = fcmp olt float %.pre363, 0.000000e+00
  %122 = load <4 x float> addrspace(2)* @bigColor7
  %123 = fcmp olt float %.pre363, 1.000000e+00
  br label %loop-header187

loop-header187:                                   ; preds = %ifmerge197, %ifmerge186
  %.pre-phi = phi i1 [ false, %ifmerge197 ], [ %.pre371, %ifmerge186 ]
  %color.30 = phi <4 x float> [ %color199, %ifmerge197 ], [ %color.29, %ifmerge186 ]
  br i1 %.pre-phi, label %then188, label %ifmerge190

then188:                                          ; preds = %loop-header187
  br label %loop-merge200

ifmerge190:                                       ; preds = %loop-header187
  %assignment_tmp191192 = fadd <4 x float> %color.30, %122
  br i1 %123, label %then194, label %ifmerge197

then194:                                          ; preds = %ifmerge190
  %124 = extractelement <4 x float> %assignment_tmp191192, i32 2
  %125 = fadd float %124, 1.000000e+00
  %126 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp191192, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %125, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-merge200

ifmerge197:                                       ; preds = %ifmerge190
  %color199 = fadd <4 x float> %assignment_tmp191192, %BaseColor
  br label %loop-header187

loop-merge200:                                    ; preds = %then194, %then188
  %color.31 = phi <4 x float> [ %color.30, %then188 ], [ %126, %then194 ]
  %.pre364 = load float addrspace(2)* @d8
  %.pre372 = fcmp olt float %.pre364, 0.000000e+00
  %127 = fcmp olt float %.pre364, 1.000000e+00
  br label %loop-header201

loop-header201:                                   ; preds = %ifmerge223, %loop-merge200
  %.pre-phi373 = phi i1 [ false, %ifmerge223 ], [ %.pre372, %loop-merge200 ]
  %color.32 = phi <4 x float> [ %assignment_tmp217219, %ifmerge223 ], [ %color.31, %loop-merge200 ]
  br i1 %.pre-phi373, label %then202, label %ifmerge204

then202:                                          ; preds = %loop-header201
  br label %loop-merge224

ifmerge204:                                       ; preds = %loop-header201
  %assignment_tmp205206 = fadd <4 x float> %color.32, %122
  br i1 %127, label %then208, label %ifmerge216

then208:                                          ; preds = %ifmerge204
  %128 = extractelement <4 x float> %assignment_tmp205206, i32 2
  %129 = fadd float %128, 1.000000e+00
  %130 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp205206, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %129, i32 -1, float 0.000000e+00, i32 -1)
  %131 = fcmp olt float %.pre364, 2.000000e+00
  br i1 %131, label %then210, label %else212

then210:                                          ; preds = %then208
  %132 = extractelement <4 x float> %130, i32 1
  %133 = fadd float %132, 1.000000e+00
  %134 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %130, i32 2, float 0.000000e+00, i32 -1, float %133, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge214

else212:                                          ; preds = %then208
  %135 = extractelement <4 x float> %130, i32 0
  %136 = fadd float %135, 1.000000e+00
  %137 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %130, i32 1, float %136, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge214

ifmerge214:                                       ; preds = %else212, %then210
  %color.33 = phi <4 x float> [ %134, %then210 ], [ %137, %else212 ]
  br label %loop-merge224

ifmerge216:                                       ; preds = %ifmerge204
  %assignment_tmp217219 = fadd <4 x float> %assignment_tmp205206, %BaseColor
  %138 = extractelement <4 x float> %assignment_tmp217219, i32 2
  %139 = fcmp ult float %138, %.pre364
  br i1 %139, label %ifmerge223, label %then221

then221:                                          ; preds = %ifmerge216
  br label %loop-merge224

ifmerge223:                                       ; preds = %ifmerge216
  br label %loop-header201

loop-merge224:                                    ; preds = %then221, %ifmerge214, %then202
  %color.34 = phi <4 x float> [ %color.32, %then202 ], [ %color.33, %ifmerge214 ], [ %assignment_tmp217219, %then221 ]
  %.pre365 = load float addrspace(2)* @d9
  %140 = fcmp ogt float %.pre365, %.pre364
  br label %loop-header225

loop-header225:                                   ; preds = %ifmerge237, %loop-merge224
  %color.35 = phi <4 x float> [ %color.34, %loop-merge224 ], [ %color.37, %ifmerge237 ]
  %141 = extractelement <4 x float> %color.35, i32 3
  %142 = fcmp ult float %141, %.pre365
  br i1 %142, label %ifmerge228, label %then226

then226:                                          ; preds = %loop-header225
  br label %loop-merge238

ifmerge228:                                       ; preds = %loop-header225
  br i1 %140, label %then229, label %ifmerge237

then229:                                          ; preds = %ifmerge228
  %143 = extractelement <4 x float> %color.35, i32 0
  %144 = fcmp ugt float %143, %.pre363
  br i1 %144, label %ifmerge236, label %then230

then230:                                          ; preds = %then229
  %145 = extractelement <4 x float> %color.35, i32 2
  %146 = fcmp oeq float %145, 5.000000e+00
  br i1 %146, label %then231, label %else233

then231:                                          ; preds = %then230
  %147 = fadd float %141, 1.000000e+00
  %148 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.35, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %147, i32 -1)
  br label %ifmerge236

else233:                                          ; preds = %then230
  br label %loop-merge238

ifmerge236:                                       ; preds = %then229, %then231
  %color.36 = phi <4 x float> [ %148, %then231 ], [ %color.35, %then229 ]
  br label %ifmerge237

ifmerge237:                                       ; preds = %ifmerge228, %ifmerge236
  %color.37 = phi <4 x float> [ %color.36, %ifmerge236 ], [ %color.35, %ifmerge228 ]
  br label %loop-header225

loop-merge238:                                    ; preds = %else233, %then226
  %.pre366 = load float addrspace(2)* @d10
  %149 = load float addrspace(2)* @d11
  %150 = load float addrspace(2)* @d12
  br label %loop-header239

loop-header239:                                   ; preds = %ifmerge250, %loop-merge238
  %color.38 = phi <4 x float> [ %color.35, %loop-merge238 ], [ %color.39, %ifmerge250 ]
  %151 = extractelement <4 x float> %color.38, i32 2
  %152 = fcmp ult float %151, %.pre366
  br i1 %152, label %ifmerge242, label %then240

then240:                                          ; preds = %loop-header239
  br label %loop-merge255

ifmerge242:                                       ; preds = %loop-header239
  %153 = extractelement <4 x float> %color.38, i32 1
  %154 = fadd float %153, 1.000000e+00
  %155 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.38, i32 2, float 0.000000e+00, i32 -1, float %154, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  %156 = extractelement <4 x float> %155, i32 1
  %157 = fcmp olt float %156, %149
  br i1 %157, label %then244, label %ifmerge252

then244:                                          ; preds = %ifmerge242
  %158 = extractelement <4 x float> %155, i32 2
  %159 = fadd float %158, 1.000000e+00
  %160 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %155, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %159, i32 -1, float 0.000000e+00, i32 -1)
  %161 = extractelement <4 x float> %160, i32 3
  %162 = fcmp olt float %161, %150
  br i1 %162, label %then246, label %else248

then246:                                          ; preds = %then244
  %163 = fadd float %161, 1.000000e+00
  %164 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %160, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %163, i32 -1)
  br label %ifmerge250

else248:                                          ; preds = %then244
  %165 = extractelement <4 x float> %160, i32 0
  %166 = fadd float %165, 1.000000e+00
  %167 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %160, i32 1, float %166, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge250

ifmerge250:                                       ; preds = %else248, %then246
  %color.39 = phi <4 x float> [ %164, %then246 ], [ %167, %else248 ]
  br label %loop-header239

ifmerge252:                                       ; preds = %ifmerge242
  %168 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color253 = fadd <4 x float> %155, %168
  br label %loop-merge255

loop-merge255:                                    ; preds = %ifmerge252, %then240
  %color.40 = phi <4 x float> [ %color.38, %then240 ], [ %color253, %ifmerge252 ]
  %169 = load <4 x float> addrspace(2)* @bigColor8
  %170 = extractelement <4 x float> %169, i32 0
  br label %loop-header256

loop-header256:                                   ; preds = %loop-header256.backedge, %loop-merge255
  %color.41 = phi <4 x float> [ %color.40, %loop-merge255 ], [ %color.41.be, %loop-header256.backedge ]
  %171 = extractelement <4 x float> %color.41, i32 0
  %172 = fcmp ult float %171, 1.000000e+01
  br i1 %172, label %ifmerge259, label %then257

then257:                                          ; preds = %loop-header256
  %.pre367 = load float addrspace(2)* @d13
  br label %loop-header270

ifmerge259:                                       ; preds = %loop-header256
  %assignment_tmp260261 = fadd <4 x float> %color.41, %169
  %173 = extractelement <4 x float> %assignment_tmp260261, i32 2
  %174 = fcmp olt float %173, %.pre364
  br i1 %174, label %then263, label %ifmerge267

then263:                                          ; preds = %ifmerge259
  %175 = extractelement <4 x float> %assignment_tmp260261, i32 3
  %176 = fcmp olt float %175, %99
  br i1 %176, label %then264, label %ifmerge266

then264:                                          ; preds = %then263
  br label %loop-header256.backedge

loop-header256.backedge:                          ; preds = %then264, %ifmerge267
  %color.41.be = phi <4 x float> [ %assignment_tmp260261, %then264 ], [ %179, %ifmerge267 ]
  br label %loop-header256

ifmerge266:                                       ; preds = %then263
  br label %ifmerge267

ifmerge267:                                       ; preds = %ifmerge259, %ifmerge266
  %177 = extractelement <4 x float> %assignment_tmp260261, i32 1
  %178 = fadd float %177, %170
  %179 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp260261, i32 2, float 0.000000e+00, i32 -1, float %178, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header256.backedge

loop-header270:                                   ; preds = %loop-header270.backedge, %then257
  %color.42 = phi <4 x float> [ %color.41, %then257 ], [ %color.42.be, %loop-header270.backedge ]
  %180 = extractelement <4 x float> %color.42, i32 3
  %181 = fcmp ult float %180, %.pre367
  br i1 %181, label %ifmerge273, label %then271

then271:                                          ; preds = %loop-header270
  %182 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %assignment_tmp295296 = fadd <4 x float> %color.42, %182
  %.pre368 = load float addrspace(2)* @d14
  %183 = load float addrspace(2)* @d15
  br label %loop-header298

ifmerge273:                                       ; preds = %loop-header270
  %184 = extractelement <4 x float> %color.42, i32 2
  %185 = fcmp olt float %184, %.pre367
  br i1 %185, label %then274, label %else276

then274:                                          ; preds = %ifmerge273
  %186 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color275 = fadd <4 x float> %color.42, %186
  br label %ifmerge278

else276:                                          ; preds = %ifmerge273
  %187 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float 1.000000e+00, i32 0)
  %color277 = fsub <4 x float> %color.42, %187
  br label %ifmerge278

ifmerge278:                                       ; preds = %else276, %then274
  %color.43 = phi <4 x float> [ %color275, %then274 ], [ %color277, %else276 ]
  %assignment_tmp279280 = fadd <4 x float> %color.43, %.pre360
  %188 = extractelement <4 x float> %assignment_tmp279280, i32 0
  %189 = fcmp olt float %188, %17
  br i1 %189, label %then282, label %ifmerge288

then282:                                          ; preds = %ifmerge278
  %190 = extractelement <4 x float> %assignment_tmp279280, i32 2
  %191 = fadd float %190, 2.000000e+00
  %192 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp279280, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %191, i32 -1, float 0.000000e+00, i32 -1)
  %193 = extractelement <4 x float> %192, i32 2
  %194 = fcmp olt float %193, %17
  br i1 %194, label %then284, label %ifmerge287

then284:                                          ; preds = %then282
  %195 = extractelement <4 x float> %192, i32 0
  %196 = fadd float %195, 1.000000e+00
  %197 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %192, i32 1, float %196, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header270.backedge

loop-header270.backedge:                          ; preds = %then284, %ifmerge293
  %color.42.be = phi <4 x float> [ %197, %then284 ], [ %color.45, %ifmerge293 ]
  br label %loop-header270

ifmerge287:                                       ; preds = %then282
  br label %ifmerge288

ifmerge288:                                       ; preds = %ifmerge278, %ifmerge287
  %color.44 = phi <4 x float> [ %192, %ifmerge287 ], [ %assignment_tmp279280, %ifmerge278 ]
  %198 = extractelement <4 x float> %color.44, i32 1
  %199 = fcmp olt float %198, %17
  br i1 %199, label %then289, label %else291

then289:                                          ; preds = %ifmerge288
  %200 = fadd float %198, %17
  %201 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.44, i32 2, float 0.000000e+00, i32 -1, float %200, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge293

else291:                                          ; preds = %ifmerge288
  %202 = extractelement <4 x float> %color.44, i32 0
  %203 = fadd float %202, %17
  %204 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.44, i32 1, float %203, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge293

ifmerge293:                                       ; preds = %else291, %then289
  %color.45 = phi <4 x float> [ %201, %then289 ], [ %204, %else291 ]
  br label %loop-header270.backedge

loop-header298:                                   ; preds = %else303, %then271
  %color.46 = phi <4 x float> [ %assignment_tmp295296, %then271 ], [ %color304, %else303 ]
  %205 = extractelement <4 x float> %color.46, i32 0
  %206 = fcmp ult float %205, %.pre368
  br i1 %206, label %ifmerge301, label %then299

then299:                                          ; preds = %loop-header298
  %color307 = fadd <4 x float> %color.46, %182
  %.pre369 = load float addrspace(2)* @d16
  br label %loop-header308

ifmerge301:                                       ; preds = %loop-header298
  %207 = extractelement <4 x float> %color.46, i32 1
  %208 = fcmp olt float %207, %183
  br i1 %208, label %then302, label %else303

then302:                                          ; preds = %ifmerge301
  br label %stage-epilogue

else303:                                          ; preds = %ifmerge301
  %color304 = fadd <4 x float> %color.46, %182
  br label %loop-header298

loop-header308:                                   ; preds = %ifmerge311, %then299
  %color.47 = phi <4 x float> [ %color307, %then299 ], [ %212, %ifmerge311 ]
  %209 = extractelement <4 x float> %color.47, i32 3
  %210 = fcmp ult float %209, %.pre369
  br i1 %210, label %ifmerge311, label %then309

then309:                                          ; preds = %loop-header308
  br label %loop-header314

ifmerge311:                                       ; preds = %loop-header308
  %211 = fadd float %209, 1.000000e+00
  %212 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.47, i32 8, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %211, i32 -1)
  br label %loop-header308

loop-header314:                                   ; preds = %ifmerge328, %then309
  %color.48 = phi <4 x float> [ %color.47, %then309 ], [ %assignment_tmp323324, %ifmerge328 ]
  %213 = extractelement <4 x float> %color.48, i32 3
  %214 = fcmp olt float %213, %.pre355
  br i1 %214, label %then316, label %else318

then316:                                          ; preds = %loop-header314
  %215 = extractelement <4 x float> %color.48, i32 1
  %phitmp374 = fcmp uge float %215, %10
  br label %ifmerge319

else318:                                          ; preds = %loop-header314
  br label %ifmerge319

ifmerge319:                                       ; preds = %else318, %then316
  %and_tmp315.0 = phi i1 [ %phitmp374, %then316 ], [ true, %else318 ]
  br i1 %and_tmp315.0, label %then320, label %ifmerge322

then320:                                          ; preds = %ifmerge319
  %.pre370 = load float addrspace(2)* @d18
  %216 = load float addrspace(2)* @d17
  br label %loop-header330

ifmerge322:                                       ; preds = %ifmerge319
  %assignment_tmp323324 = fadd <4 x float> %color.48, %11
  %217 = extractelement <4 x float> %assignment_tmp323324, i32 2
  %218 = fcmp olt float %217, %10
  br i1 %218, label %then326, label %ifmerge328

then326:                                          ; preds = %ifmerge322
  br label %stage-epilogue

ifmerge328:                                       ; preds = %ifmerge322
  br label %loop-header314

loop-header330:                                   ; preds = %ifmerge339, %then320
  %color.49 = phi <4 x float> [ %color.48, %then320 ], [ %assignment_tmp334335, %ifmerge339 ]
  %219 = extractelement <4 x float> %color.49, i32 1
  %220 = fcmp olt float %219, %.pre370
  br i1 %220, label %then331, label %ifmerge333

then331:                                          ; preds = %loop-header330
  br label %stage-epilogue

ifmerge333:                                       ; preds = %loop-header330
  %assignment_tmp334335 = fadd <4 x float> %color.49, %182
  %221 = extractelement <4 x float> %assignment_tmp334335, i32 0
  %222 = fcmp ult float %221, %216
  br i1 %222, label %ifmerge339, label %then337

then337:                                          ; preds = %ifmerge333
  br label %loop-header341

ifmerge339:                                       ; preds = %ifmerge333
  br label %loop-header330

loop-header341:                                   ; preds = %else346, %then337
  %color.50 = phi <4 x float> [ %assignment_tmp334335, %then337 ], [ %color347, %else346 ]
  %223 = extractelement <4 x float> %color.50, i32 1
  %224 = fcmp ult float %223, %.pre369
  br i1 %224, label %ifmerge344, label %then342

then342:                                          ; preds = %loop-header341
  %assignment_tmp350351 = fadd <4 x float> %color.50, %182
  br label %stage-epilogue

ifmerge344:                                       ; preds = %loop-header341
  %225 = extractelement <4 x float> %color.50, i32 3
  %226 = fcmp olt float %225, %.pre369
  br i1 %226, label %then345, label %else346

then345:                                          ; preds = %ifmerge344
  br label %stage-exit

else346:                                          ; preds = %ifmerge344
  %color347 = fadd <4 x float> %color.50, %182
  br label %loop-header341

stage-epilogue:                                   ; preds = %then342, %then331, %then326, %then302
  %gl_FragColor354.0 = phi <4 x float> [ %assignment_tmp295296, %then331 ], [ %assignment_tmp350351, %then342 ], [ %assignment_tmp295296, %then326 ], [ %assignment_tmp295296, %then302 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor354.0)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then345
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

inductive variable:  %indvar424 = phi i32 [ %indvar.next425, %loop-header60 ], [ 0, %then55 ]
  trip count:        42
  increment:         %indvar.next425 = add i32 %indvar424, 1
  exit condition:    %exitcond426 = icmp eq i32 %indvar.next425, 42

inductive variable:  %indvar421 = phi i32 [ %indvar.next422, %ifmerge74 ], [ 0, %loop-merge63 ]
  trip count:        100
  increment:         %indvar.next422 = add i32 %indvar421, 1
  exit condition:    %exitcond = icmp eq i32 %indvar.next422, 100

inductive variable:  %indvar = phi i32 [ %indvar.next, %ifmerge83 ], [ 0, %loop-merge76 ]
  trip count:        120
  increment:         %indvar.next = add i32 %indvar, 1
  exit condition:    %exitcond420 = icmp eq i32 %indvar.next, 120
compiling loops.frag...
uniform vec4 bigColor ; 
uniform vec4 bigColor1_1 ; 
uniform vec4 bigColor1_2 ; 
uniform vec4 bigColor1_3 ; 
uniform vec4 bigColor2 ; 
uniform vec4 bigColor3 ; 
uniform vec4 bigColor4 ; 
uniform vec4 bigColor5 ; 
uniform vec4 bigColor6 ; 
uniform vec4 bigColor7 ; 
uniform vec4 bigColor8 ; 
varying vec4 BaseColor ; 
uniform float d ; 
uniform float d2 ; 
uniform float d3 ; 
uniform float d4 ; 
uniform float d5 ; 
uniform float d6 ; 
uniform float d7 ; 
uniform float d8 ; 
uniform float d9 ; 
uniform float d10 ; 
uniform float d11 ; 
uniform float d12 ; 
uniform float d13 ; 
uniform float d14 ; 
uniform float d15 ; 
uniform float d16 ; 
uniform float d17 ; 
uniform float d18 ; 
uniform float d19 ; 
uniform float d20 ; 
uniform float d21 ; 
uniform float d22 ; 
uniform float d23 ; 
uniform float d24 ; 
uniform float d25 ; 
uniform float d26 ; 
uniform float d27 ; 
uniform float d28 ; 
uniform float d29 ; 
uniform float d30 ; 
uniform float d31 ; 
uniform float d32 ; 
uniform float d33 ; 
uniform float d34 ; 
uniform int Count ; 
void  main (){
vec4 color = BaseColor ; while ( color . x < d ) {
color += bigColor ; }
while ( color . z < d ) {
color += bigColor1_1 ; if ( color . w < d ) continue; color += bigColor1_1 ; }
while ( color . x < 42.000000 ) {
++ color ; }
while ( color . w < d2 && color . y < d3 ) {
color += bigColor1_2 ; }
while ( color . z < d3 ) {
color += bigColor1_3 ; if ( color . y < d4 ) break; color += bigColor1_3 ; }
for( int i = 0 ; ; i < Count ; ++ i ) {
color += bigColor2 ; }
do {
color += bigColor3 ; }
while ( color . x < d2 ); for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; }
for( int i = 0 ; ; i < 100 ; ++ i ) {
if ( color . z < 20.000000 ) color . x ++ ; else color . y ++ ; if ( color . w < 20.000000 ) if ( color . z > color . y ) 0 ; }
for( int i = 0 ; ; i < 120 ; ++ i ) {
if ( color . z < 20.000000 ) color . x ++ ; else color . y ++ ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) continue; ++ color . w ; }
for( int i = 0 ; ; i < 42 ; ++ i ) {
color . z += d3 ; if ( color . x < d4 ) break; ++ color . w ; }
do {
color += bigColor4 ; if ( color . x < d4 ) continue; if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor4 ; if ( color . x < d4 ) {
color . z += 2.000000 ; if ( color . z < d4 ) {
color . x ++ ; continue; }
}
if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor5 ; if ( color . y < d5 ) color . y += d5 ; }
while ( color . x < d5 ); if ( color . x < d6 ) {
while ( color . y < d6 ) color += bigColor6 ; }
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
if ( color . x < d6 ) {
while ( color . y < d6 ) {
color += bigColor6 ; if ( d7 < 1.000000 ) break; }
}
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
do {
if ( d7 < 0.000000 ) break; color += bigColor7 ; if ( d7 < 1.000000 ) {
color . z ++ ; break; }
color += BaseColor ; }
while ( true ); do {
if ( d8 < 0.000000 ) break; color += bigColor7 ; if ( d8 < 1.000000 ) {
color . z ++ ; if ( d8 < 2.000000 ) {
color . y ++ ; }
else {
color . x ++ ; }
break; }
color += BaseColor ; }
while ( color . z < d8 ); while ( color . w < d9 ) {
if ( d9 > d8 ) {
if ( color . x <= d7 ) {
if ( color . z == 5.000000 ) color . w ++ ; else break; }
}
}
while ( color . z < d10 ) {
color . y ++ ; if ( color . y < d11 ) {
color . z ++ ; if ( color . w < d12 ) color . w ++ ; else color . x ++ ; continue; }
color ++ ; break; }
while ( color . x < 10 ) {
color += bigColor8 ; if ( color . z < d8 ) if ( color . w < d6 ) continue; color . y += bigColor8 . x ; }
while ( color . w < d13 ) {
if ( color . z < d13 ) color ++ ; else color -- ; color += bigColor4 ; if ( color . x < d4 ) {
color . z += 2.000000 ; if ( color . z < d4 ) {
color . x ++ ; continue; }
}
if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
color ++ ; gl_FragColor = color ; while ( color . x < d14 ) {
if ( color . y < d15 ) {
return ; }
else color ++ ; }
color ++ ; while ( color . w < d16 ) {
color . w ++ ; }
while ( color . w < d2 && color . y < d3 ) {
color += bigColor1_2 ; if ( color . z < d3 ) return ; }
do {
if ( color . y < d18 ) return ; color ++ ; }
while ( color . x < d17 ); while ( color . y < d16 ) {
if ( color . w < d16 ) {
discard; }
else color ++ ; }
color ++ ; gl_FragColor = color ; }



(
(declare (uniform ) int Count)
(declare (uniform ) float d18)
(declare (uniform ) float d17)
(declare (uniform ) float d16)
(declare (uniform ) float d15)
(declare (uniform ) float d14)
(declare (uniform ) float d13)
(declare (uniform ) float d12)
(declare (uniform ) float d11)
(declare (uniform ) float d10)
(declare (uniform ) float d9)
(declare (uniform ) float d8)
(declare (uniform ) float d7)
(declare (uniform ) float d6)
(declare (uniform ) float d5)
(declare (uniform ) float d4)
(declare (uniform ) float d3)
(declare (uniform ) float d2)
(declare (uniform ) float d)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor8)
(declare (uniform ) vec4 bigColor7)
(declare (uniform ) vec4 bigColor6)
(declare (uniform ) vec4 bigColor5)
(declare (uniform ) vec4 bigColor4)
(declare (uniform ) vec4 bigColor3)
(declare (uniform ) vec4 bigColor2)
(declare (uniform ) vec4 bigColor1_3)
(declare (uniform ) vec4 bigColor1_2)
(declare (uniform ) vec4 bigColor1_1)
(declare (uniform ) vec4 bigColor)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () int i)
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_1) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz w (var_ref assignment_tmp) )(var_ref d) ) (
          continue
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_1) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (42.000000)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) bool and_tmp)
        (if (expression bool < (swiz w (var_ref color) )(var_ref d2) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool < (swiz y (var_ref color) )(var_ref d3) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (if (expression bool ! (var_ref and_tmp) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor1_2) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d3) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref bigColor1_3) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (var_ref Count) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor2) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d2) ) (
          break
        )
        ())

      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (100)) ) ((constant int (1)) ) (
        (if (expression bool < (swiz z (var_ref color) )(constant float (20.000000)) ) (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        ))

        (if (expression bool < (swiz w (var_ref color) )(constant float (20.000000)) ) (
          (if (expression bool > (swiz z (var_ref color) )(swiz y (var_ref color) )) (
          )
          ())

        )
        ())

        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (120)) ) ((constant int (1)) ) (
        (if (expression bool < (swiz z (var_ref color) )(constant float (20.000000)) ) (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (constant int (42)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
          continue
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop ((declare () int i)) ((constant int (0)) ) ((constant int (42)) ) ((constant int (1)) ) (
        (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(var_ref d3) ) ) 
        (if (expression bool < (swiz x (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          continue
        )
        ())

        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (2.000000)) ) ) 
          (if (expression bool < (swiz z (var_ref color) )(var_ref d4) ) (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
            continue
          )
          ())

        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor5) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d5) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d5) ) ) 
        )
        ())

        (if (expression bool >= (swiz x (var_ref color) )(var_ref d5) ) (
          break
        )
        ())

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
          (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
            break
          )
          ())

        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (loop () () () () (
        (if (expression bool < (var_ref d7) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool < (var_ref d8) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d8) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          (if (expression bool < (var_ref d8) (constant float (2.000000)) ) (
            (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (if (expression bool >= (swiz w (var_ref color) )(var_ref d9) ) (
          break
        )
        ())

        (if (expression bool > (var_ref d9) (var_ref d8) ) (
          (if (expression bool <= (swiz x (var_ref color) )(var_ref d7) ) (
            (if (expression bool all_equal (swiz z (var_ref color) )(constant float (5.000000)) ) (
              (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
            )
            (
              break
            ))

          )
          ())

        )
        ())

      ))

      (loop () () () () (
        (if (expression bool >= (swiz z (var_ref color) )(var_ref d10) ) (
          break
        )
        ())

        (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
        (if (expression bool < (swiz y (var_ref color) )(var_ref d11) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(constant float (1.000000)) ) ) 
          (if (expression bool < (swiz w (var_ref color) )(var_ref d12) ) (
            (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          continue
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        break
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (10.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor8) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          (if (expression bool < (swiz w (var_ref assignment_tmp) )(var_ref d6) ) (
            continue
          )
          ())

        )
        ())

        (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(swiz x (var_ref bigColor8) )) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz w (var_ref color) )(var_ref d13) ) (
          break
        )
        ())

        (if (expression bool < (swiz z (var_ref color) )(var_ref d13) ) (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 - (var_ref color) (constant float (1.000000)) ) ) 
        ))

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (2.000000)) ) ) 
          (if (expression bool < (swiz z (var_ref color) )(var_ref d4) ) (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
            continue
          )
          ())

        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d14) ) (
          break
        )
        ())

        (if (expression bool < (swiz y (var_ref color) )(var_ref d15) ) (
          (return)
        )
        (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        ))

      ))

      (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (loop () () () () (
        (if (expression bool >= (swiz w (var_ref color) )(var_ref d16) ) (
          break
        )
        ())

        (assign (constant bool (1)) (w) (var_ref color)  (expression float + (swiz w (var_ref color) )(constant float (1.000000)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) bool and_tmp)
        (if (expression bool < (swiz w (var_ref color) )(var_ref d2) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool < (swiz y (var_ref color) )(var_ref d3) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (if (expression bool ! (var_ref and_tmp) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor1_2) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz z (var_ref assignment_tmp) )(var_ref d3) ) (
          (return)
        )
        ())

      ))

      (loop () () () () (
        (if (expression bool < (swiz y (var_ref color) )(var_ref d18) ) (
          (return)
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d17) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (if (expression bool >= (swiz y (var_ref color) )(var_ref d16) ) (
          break
        )
        ())

        (if (expression bool < (swiz w (var_ref color) )(var_ref d16) ) (
          (discard )
        )
        (
          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
        ))

      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref assignment_tmp) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d13;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
in vec4 BaseColor;
const float const94_42f = 42.0;
const float const96_1f = 1.0;
const bool const100_true = true;
vec4 assignment_tmp3637;
const int const106_0 = 0;
const int const111_1 = 1;
vec4 assignment_tmp5253;
vec4 temp115;
const float const117_20f = 20.0;
const int const129_42 = 42;
int temp133;
vec4 temp138;
vec4 temp141;
const int const144_41 = 41;
const float const156_2f = 2.0;
float temp171;
vec4 color174;
const float const183_0f = 0.0;
vec4 assignment_tmp191192;
const bool const189_false = false;
vec4 assignment_tmp205206;
vec4 assignment_tmp217219;
const float const205_5f = 5.0;
vec4 temp209;
const float const220_10f = 10.0;
vec4 assignment_tmp334335;

void main()
{
    vec4 color_0;
    vec4 color_1;
    vec4 color_1_be;
    vec4 color_2;
    vec4 color_3;
    bool and_tmp_0;
    vec4 color_4;
    vec4 color_5;
    int indvar427;
    vec4 color_6;
    vec4 color_7;
    int indvar424;
    vec4 color_8;
    int indvar421;
    vec4 color_9;
    vec4 color_10;
    int indvar;
    vec4 color_11;
    vec4 color_12;
    vec4 color_13;
    int temp41;
    vec4 color_13_be;
    int temp43;
    vec4 color_14;
    vec4 color_15;
    vec4 color_16;
    vec4 color_16_be;
    vec4 color_17;
    vec4 color_18;
    vec4 color_18_be;
    vec4 color_19;
    vec4 color_20;
    vec4 color_21;
    vec4 color_22;
    vec4 color_23;
    vec4 color_24;
    vec4 temp57;
    vec4 color_25;
    vec4 color_26;
    vec4 color_27;
    vec4 color_28;
    vec4 color_29;
    bool _pre_phi;
    vec4 color_30;
    vec4 color_31;
    bool _pre_phi373;
    vec4 color_32;
    vec4 color_33;
    vec4 color_34;
    vec4 color_35;
    vec4 color_36;
    vec4 color_37;
    vec4 color_38;
    vec4 color_39;
    vec4 color_40;
    vec4 color_41;
    vec4 color_41_be;
    vec4 color_42;
    vec4 color_43;
    vec4 color_42_be;
    vec4 color_44;
    vec4 color_45;
    vec4 color_46;
    vec4 color_47;
    vec4 color_48;
    bool and_tmp315_0;
    vec4 color_49;
    vec4 color_50;
    vec4 gla_copyout_gl_FragColor354_0;
    color_0 = BaseColor;
    while (color_0.x < d){
        vec4 color6 = color_0 + bigColor;
        color_0 = color6;
    }
    
    color_1 = color_0;
    while (color_1.z < d){
        vec4 assignment_tmp11 = color_1 + bigColor1_1;
        bool temp92 = assignment_tmp11.w < d;
        if (temp92) {
            color_1_be = assignment_tmp11;
            color_1 = color_1_be;
            continue;
        }
        else {
            vec4 color15 = assignment_tmp11 + bigColor1_1;
            color_1_be = color15;
            color_1 = color_1_be;
            continue;
        }
        
    }
    
    color_2 = color_1;
    while (color_2.x < const94_42f){
        vec4 temp95 = vec4(const96_1f);
        vec4 color21 = color_2 + temp95;
        color_2 = color21;
    }
    
    color_3 = color_2;
    while (true) {
        bool temp98 = color_3.w < d2;
        if (temp98) {
            bool phitmp = color_3.y >= d3;
            and_tmp_0 = phitmp;
        }
        else {
            and_tmp_0 = const100_true;
        }
        
        if (and_tmp_0) {
            break;
        }
        
        vec4 color30 = color_3 + bigColor1_2;
        color_3 = color30;
    }
    
    color_4 = color_3;
    while (color_4.z < d3){
        assignment_tmp3637 = color_4 + bigColor1_3;
        bool temp103 = assignment_tmp3637.y < d4;
        if (temp103) {
            color_5 = assignment_tmp3637;
            break;
        }
        
        vec4 color42 = assignment_tmp3637 + bigColor1_3;
        color_4 = color42;
    }
    
    color_5 = color_4;
    bool tmp429 = Count > const106_0;
    int smax = tmp429 ? Count : const106_0;
    indvar427 = const106_0;
    color_6 = color_5;
    while (true) {
        bool exitcond430 = indvar427 == smax;
        if (exitcond430) {
            break;
        }
        
        vec4 color48 = color_6 + bigColor2;
        int indvar_next428 = indvar427 + const111_1;
        indvar427 = indvar_next428;
        color_6 = color48;
    }
    
    color_7 = color_6;
    while (true) {
        assignment_tmp5253 = color_7 + bigColor3;
        bool temp113 = assignment_tmp5253.x < d2;
        if (! temp113) {
            break;
        }
        
        color_7 = assignment_tmp5253;
    }
    
    indvar424 = const106_0;
    color_8 = assignment_tmp5253;
    for (indvar424 = 0; indvar424 < 42; ++indvar424) {
        float temp114 = color_8.z + d3;
        temp115 = color_8;
        temp115.z = temp114;
        color_8 = temp115;
    }
    
    indvar421 = const106_0;
    color_9 = temp115;
    for (indvar421 = 0; indvar421 < 100; ++indvar421) {
        bool temp116 = color_9.z < const117_20f;
        if (temp116) {
            float temp118 = color_9.x + const96_1f;
            vec4 temp119 = color_9;
            temp119.x = temp118;
            color_10 = temp119;
        }
        else {
            float temp120 = color_9.y + const96_1f;
            vec4 temp121 = color_9;
            temp121.y = temp120;
            color_10 = temp121;
        }
        
        bool temp122 = color_10.w < const117_20f;
        if (temp122) {
        }
        else {
            color_9 = color_10;
        }
        
    }
    
    indvar = const106_0;
    color_11 = color_10;
    for (indvar = 0; indvar < 120; ++indvar) {
        bool temp123 = color_11.z < const117_20f;
        if (temp123) {
            float temp124 = color_11.x + const96_1f;
            vec4 temp125 = color_11;
            temp125.x = temp124;
            color_12 = temp125;
        }
        else {
            float temp126 = color_11.y + const96_1f;
            vec4 temp127 = color_11;
            temp127.y = temp126;
            color_12 = temp127;
        }
        
        color_11 = color_12;
    }
    
    color_13 = color_12;
    temp41 = const106_0;
    while (true) {
        bool exitcond419 = temp41 == const129_42;
        if (exitcond419) {
            break;
        }
        
        float temp130 = color_13.z + d3;
        vec4 temp131 = color_13;
        temp131.z = temp130;
        bool temp132 = temp131.x < d4;
        if (temp132) {
            color_13_be = temp131;
            temp133 = temp41 + const111_1;
            color_13 = color_13_be;
            temp41 = temp133;
            continue;
        }
        else {
            float temp134 = temp131.w + const96_1f;
            vec4 temp135 = temp131;
            temp135.w = temp134;
            color_13_be = temp135;
            temp133 = temp41 + const111_1;
            color_13 = color_13_be;
            temp41 = temp133;
            continue;
        }
        
    }
    
    temp43 = const106_0;
    color_14 = color_13;
    while (true) {
        int tmp = temp43 + const111_1;
        float temp137 = color_14.z + d3;
        temp138 = color_14;
        temp138.z = temp137;
        bool temp139 = temp138.x < d4;
        if (temp139) {
            color_15 = temp138;
            break;
        }
        
        float temp140 = temp138.w + const96_1f;
        temp141 = temp138;
        temp141.w = temp140;
        int temp142 = temp43 + const111_1;
        bool temp143 = tmp > const144_41;
        if (temp143) {
            color_15 = temp141;
            break;
        }
        
        temp43 = temp142;
        color_14 = temp141;
    }
    
    color_16 = color_15;
    while (true) {
        vec4 assignment_tmp108109 = color_16 + bigColor4;
        bool temp146 = assignment_tmp108109.x < d4;
        if (temp146) {
            color_16_be = assignment_tmp108109;
            color_16 = color_16_be;
            continue;
        }
        else {
            bool temp147 = assignment_tmp108109.y < d4;
            if (temp147) {
                float temp148 = assignment_tmp108109.y + d4;
                vec4 temp149 = assignment_tmp108109;
                temp149.y = temp148;
                color_17 = temp149;
            }
            else {
                float temp150 = assignment_tmp108109.x + d4;
                vec4 temp151 = assignment_tmp108109;
                temp151.x = temp150;
                color_17 = temp151;
            }
            
            bool temp152 = color_17.z < d4;
            if (! temp152) {
                break;
            }
            
            color_16_be = color_17;
            color_16 = color_16_be;
            continue;
        }
        
    }
    
    color_18 = color_17;
    while (true) {
        vec4 assignment_tmp124125 = color_18 + bigColor4;
        bool temp154 = assignment_tmp124125.x < d4;
        color_19 = assignment_tmp124125;
        if (temp154) {
            float temp155 = assignment_tmp124125.z + const156_2f;
            vec4 temp157 = assignment_tmp124125;
            temp157.z = temp155;
            bool temp158 = temp157.z < d4;
            if (temp158) {
                float temp159 = temp157.x + const96_1f;
                vec4 temp160 = temp157;
                temp160.x = temp159;
                color_18_be = temp160;
                color_18 = color_18_be;
                continue;
            }
            else {
                color_19 = temp157;
            }
            
        }
        
        bool temp161 = color_19.y < d4;
        if (temp161) {
            float temp162 = color_19.y + d4;
            vec4 temp163 = color_19;
            temp163.y = temp162;
            color_20 = temp163;
        }
        else {
            float temp164 = color_19.x + d4;
            vec4 temp165 = color_19;
            temp165.x = temp164;
            color_20 = temp165;
        }
        
        bool temp166 = color_20.z < d4;
        if (! temp166) {
            break;
        }
        
        color_18_be = color_20;
        color_18 = color_18_be;
        continue;
    }
    
    color_21 = color_20;
    while (true) {
        vec4 assignment_tmp144145 = color_21 + bigColor5;
        bool temp168 = assignment_tmp144145.y < d5;
        color_22 = assignment_tmp144145;
        if (temp168) {
            float temp169 = assignment_tmp144145.y + d5;
            vec4 temp170 = assignment_tmp144145;
            temp170.y = temp169;
            color_22 = temp170;
        }
        
        bool temp172 = color_22.x < d5;
        if (! temp172) {
            break;
        }
        
        color_21 = color_22;
    }
    
    bool temp173 = color_22.x < d6;
    if (temp173) {
        color_23 = color_22;
        while (color_23.y < d6){
            vec4 color159 = color_23 + bigColor6;
            color_23 = color159;
        }
        
        temp57 = bigColor6;
        color_25 = color_23;
    }
    else {
        color_24 = color_22;
        while (color_24.z < d6){
            float temp175 = color_24.z + bigColor6.z;
            vec4 temp176 = color_24;
            temp176.z = temp175;
            color_24 = temp176;
        }
        
        temp57 = bigColor6;
        color_25 = color_24;
    }
    
    bool temp177 = color_25.x < d6;
    if (temp177) {
        bool temp178 = d7 < const96_1f;
        color_26 = color_25;
        while (color_26.y < d6){
            color174 = color_26 + temp57;
            if (temp178) {
                color_27 = color174;
                break;
            }
            
            color_26 = color174;
        }
        
        color_27 = color_26;
        color_29 = color_27;
    }
    else {
        color_28 = color_25;
        while (color_28.z < d6){
            float temp180 = color_28.z + temp57.z;
            vec4 temp181 = color_28;
            temp181.z = temp180;
            color_28 = temp181;
        }
        
        color_29 = color_28;
    }
    
    bool _pre371 = d7 < const183_0f;
    bool temp184 = d7 < const96_1f;
    _pre_phi = _pre371;
    color_30 = color_29;
    while (true) {
        if (_pre_phi) {
            color_31 = color_30;
            break;
        }
        
        assignment_tmp191192 = color_30 + bigColor7;
        if (temp184) {
            float temp186 = assignment_tmp191192.z + const96_1f;
            vec4 temp187 = assignment_tmp191192;
            temp187.z = temp186;
            color_31 = temp187;
            break;
        }
        
        vec4 color199 = assignment_tmp191192 + BaseColor;
        _pre_phi = const189_false;
        color_30 = color199;
    }
    
    bool _pre372 = d8 < const183_0f;
    bool temp191 = d8 < const96_1f;
    _pre_phi373 = _pre372;
    color_32 = color_31;
    while (true) {
        if (_pre_phi373) {
            color_34 = color_32;
            break;
        }
        
        assignment_tmp205206 = color_32 + bigColor7;
        if (temp191) {
            float temp193 = assignment_tmp205206.z + const96_1f;
            vec4 temp194 = assignment_tmp205206;
            temp194.z = temp193;
            bool temp195 = d8 < const156_2f;
            if (temp195) {
                float temp196 = temp194.y + const96_1f;
                vec4 temp197 = temp194;
                temp197.y = temp196;
                color_33 = temp197;
            }
            else {
                float temp198 = temp194.x + const96_1f;
                vec4 temp199 = temp194;
                temp199.x = temp198;
                color_33 = temp199;
            }
            
            color_34 = color_33;
            break;
        }
        
        assignment_tmp217219 = assignment_tmp205206 + BaseColor;
        bool temp201 = assignment_tmp217219.z < d8;
        if (! temp201) {
            color_34 = assignment_tmp217219;
            break;
        }
        
        _pre_phi373 = const189_false;
        color_32 = assignment_tmp217219;
    }
    
    bool temp202 = d9 > d8;
    color_35 = color_34;
    while (color_35.w < d9){
        color_37 = color_35;
        if (temp202) {
            bool temp203 = color_35.x > d7;
            color_36 = color_35;
            if (! temp203) {
                bool temp204 = color_35.z == const205_5f;
                if (! temp204) {
                    break;
                }
                
                float temp206 = color_35.w + const96_1f;
                vec4 temp207 = color_35;
                temp207.w = temp206;
                color_36 = temp207;
            }
            
            color_37 = color_36;
            color_35 = color_37;
            continue;
        }
        else {
            color_35 = color_37;
            continue;
        }
        
    }
    
    color_38 = color_35;
    while (color_38.z < d10){
        float temp208 = color_38.y + const96_1f;
        temp209 = color_38;
        temp209.y = temp208;
        bool temp210 = temp209.y < d11;
        if (! temp210) {
            vec4 temp211 = vec4(const96_1f);
            vec4 color253 = temp209 + temp211;
            color_40 = color253;
            break;
        }
        
        float temp213 = temp209.z + const96_1f;
        vec4 temp214 = temp209;
        temp214.z = temp213;
        bool temp215 = temp214.w < d12;
        if (temp215) {
            float temp216 = temp214.w + const96_1f;
            vec4 temp217 = temp214;
            temp217.w = temp216;
            color_39 = temp217;
            color_38 = color_39;
            continue;
        }
        else {
            float temp218 = temp214.x + const96_1f;
            vec4 temp219 = temp214;
            temp219.x = temp218;
            color_39 = temp219;
            color_38 = color_39;
            continue;
        }
        
    }
    
    color_40 = color_38;
    color_41 = color_40;
    while (color_41.x < const220_10f){
        vec4 assignment_tmp260261 = color_41 + bigColor8;
        bool temp222 = assignment_tmp260261.z < d8;
        if (temp222) {
            bool temp223 = assignment_tmp260261.w < d6;
            if (temp223) {
                color_41_be = assignment_tmp260261;
                color_41 = color_41_be;
                continue;
            }
            else {
            }
            
        }
        
        float temp224 = assignment_tmp260261.y + bigColor8.x;
        vec4 temp225 = assignment_tmp260261;
        temp225.y = temp224;
        color_41_be = temp225;
        color_41 = color_41_be;
        continue;
    }
    
    color_42 = color_41;
    while (color_42.w < d13){
        bool temp226 = color_42.z < d13;
        if (temp226) {
            vec4 temp227 = vec4(const96_1f);
            vec4 color275 = color_42 + temp227;
            color_43 = color275;
        }
        else {
            vec4 temp229 = vec4(const96_1f);
            vec4 color277 = color_42 - temp229;
            color_43 = color277;
        }
        
        vec4 assignment_tmp279280 = color_43 + bigColor4;
        bool temp232 = assignment_tmp279280.x < d4;
        color_44 = assignment_tmp279280;
        if (temp232) {
            float temp233 = assignment_tmp279280.z + const156_2f;
            vec4 temp234 = assignment_tmp279280;
            temp234.z = temp233;
            bool temp235 = temp234.z < d4;
            if (temp235) {
                float temp236 = temp234.x + const96_1f;
                vec4 temp237 = temp234;
                temp237.x = temp236;
                color_42_be = temp237;
                color_42 = color_42_be;
                continue;
            }
            else {
                color_44 = temp234;
            }
            
        }
        
        bool temp238 = color_44.y < d4;
        if (temp238) {
            float temp239 = color_44.y + d4;
            vec4 temp240 = color_44;
            temp240.y = temp239;
            color_45 = temp240;
        }
        else {
            float temp241 = color_44.x + d4;
            vec4 temp242 = color_44;
            temp242.x = temp241;
            color_45 = temp242;
        }
        
        color_42_be = color_45;
        color_42 = color_42_be;
        continue;
    }
    
    vec4 temp243 = vec4(const96_1f);
    vec4 assignment_tmp295296 = color_42 + temp243;
    color_46 = assignment_tmp295296;
    while (color_46.x < d14){
        bool temp245 = color_46.y < d15;
        if (temp245) {
            gla_copyout_gl_FragColor354_0 = assignment_tmp295296;
            gl_FragColor = gla_copyout_gl_FragColor354_0;
            return;
        }
        
        vec4 color304 = color_46 + temp243;
        color_46 = color304;
    }
    
    vec4 color307 = color_46 + temp243;
    color_47 = color307;
    while (color_47.w < d16){
        float temp248 = color_47.w + const96_1f;
        vec4 temp249 = color_47;
        temp249.w = temp248;
        color_47 = temp249;
    }
    
    color_48 = color_47;
    while (true) {
        bool temp250 = color_48.w < d2;
        if (temp250) {
            bool phitmp374 = color_48.y >= d3;
            and_tmp315_0 = phitmp374;
        }
        else {
            and_tmp315_0 = const100_true;
        }
        
        if (and_tmp315_0) {
            color_49 = color_48;
            while (! (color_49.y < d18)){
                assignment_tmp334335 = color_49 + temp243;
                bool temp253 = assignment_tmp334335.x < d17;
                if (! temp253) {
                    color_50 = assignment_tmp334335;
                    while (color_50.y < d16){
                        bool temp254 = color_50.w < d16;
                        if (temp254) {
                            discard;
                        }
                        
                        vec4 color347 = color_50 + temp243;
                        color_50 = color347;
                    }
                    
                    vec4 assignment_tmp350351 = color_50 + temp243;
                    gla_copyout_gl_FragColor354_0 = assignment_tmp350351;
                    gl_FragColor = gla_copyout_gl_FragColor354_0;
                    return;
                }
                
                color_49 = assignment_tmp334335;
            }
            
            gla_copyout_gl_FragColor354_0 = assignment_tmp295296;
            gl_FragColor = gla_copyout_gl_FragColor354_0;
            return;
        }
        
        vec4 assignment_tmp323324 = color_48 + bigColor1_2;
        bool temp258 = assignment_tmp323324.z < d3;
        if (temp258) {
            gla_copyout_gl_FragColor354_0 = assignment_tmp295296;
            gl_FragColor = gla_copyout_gl_FragColor354_0;
            return;
        }
        
        color_48 = assignment_tmp323324;
    }
    
}
