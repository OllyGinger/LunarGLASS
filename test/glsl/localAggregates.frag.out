
Top IR:
; ModuleID = 'Top'

%s1 = type { i32, float }
%s2 = type { i32, float, %s1, <4 x float> }
%s3 = type { %s2, i32, float, %s1 }

@foo3 = external addrspace(2) constant %s3
@condition = external addrspace(2) constant i32
@FragColor_shadow = internal global <4 x float> zeroinitializer
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %assignment_tmp = alloca %s2
  %locals2_bleh = alloca <4 x float>
  %locals2_s1_1 = alloca %s1
  %localFArray = alloca [16 x float]
  %localIArray = alloca [8 x i32]
  %localArray = alloca [16 x float]
  %a = alloca [16 x float]
  %assignment_tmp1 = load %s2 addrspace(2)* getelementptr inbounds (%s3 addrspace(2)* @foo3, i32 0, i32 0)
  store %s2 %assignment_tmp1, %s2* %assignment_tmp
  %0 = load %s2* %assignment_tmp
  %locals2_s1_12 = extractvalue %s2 %0, 2
  store %s1 %locals2_s1_12, %s1* %locals2_s1_1
  %1 = load %s2* %assignment_tmp
  %locals2_bleh3 = extractvalue %s2 %1, 3
  store <4 x float> %locals2_bleh3, <4 x float>* %locals2_bleh
  %2 = load i32 addrspace(2)* getelementptr inbounds (%s3 addrspace(2)* @foo3, i32 0, i32 0, i32 0)
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load %s1* %locals2_s1_1
  %locals2_s1_14 = insertvalue %s1 %4, float 1.000000e+00, 1
  store %s1 %locals2_s1_14, %s1* %locals2_s1_1
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %5 = extractelement <2 x float> %coord, i32 0
  %6 = load [16 x float]* %localFArray
  %localFArray5 = insertvalue [16 x float] %6, float %5, 4
  store [16 x float] %localFArray5, [16 x float]* %localFArray
  %7 = load i32 addrspace(2)* getelementptr inbounds (%s3 addrspace(2)* @foo3, i32 0, i32 0, i32 0)
  %8 = load [8 x i32]* %localIArray
  %localIArray6 = insertvalue [8 x i32] %8, i32 %7, 2
  store [8 x i32] %localIArray6, [8 x i32]* %localIArray
  br label %ifmerge

else:                                             ; preds = %entry
  %coord7 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %9 = extractelement <2 x float> %coord7, i32 0
  %10 = load %s1* %locals2_s1_1
  %locals2_s1_18 = insertvalue %s1 %10, float %9, 1
  store %s1 %locals2_s1_18, %s1* %locals2_s1_1
  %11 = load [16 x float]* %localFArray
  %localFArray9 = insertvalue [16 x float] %11, float 1.000000e+00, 4
  store [16 x float] %localFArray9, [16 x float]* %localFArray
  %12 = load [8 x i32]* %localIArray
  %localIArray10 = insertvalue [8 x i32] %12, i32 0, 2
  store [8 x i32] %localIArray10, [8 x i32]* %localIArray
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %13 = load [8 x i32]* %localIArray
  %14 = extractvalue [8 x i32] %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %then11, label %ifmerge13

then11:                                           ; preds = %ifmerge
  %16 = load [16 x float]* %localFArray
  %17 = extractvalue [16 x float] %16, 4
  %18 = fadd float %17, 1.000000e+00
  %19 = load [16 x float]* %localFArray
  %localFArray12 = insertvalue [16 x float] %19, float %18, 4
  store [16 x float] %localFArray12, [16 x float]* %localFArray
  br label %ifmerge13

ifmerge13:                                        ; preds = %ifmerge, %then11
  %coord14 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %20 = extractelement <2 x float> %coord14, i32 0
  %21 = load [16 x float]* %localArray
  %localArray15 = insertvalue [16 x float] %21, float %20, 5
  store [16 x float] %localArray15, [16 x float]* %localArray
  %22 = load [16 x float]* %a
  %a16 = insertvalue [16 x float] %22, float 0.000000e+00, 0
  store [16 x float] %a16, [16 x float]* %a
  %23 = load [16 x float]* %a
  %a17 = insertvalue [16 x float] %23, float 0.000000e+00, 1
  store [16 x float] %a17, [16 x float]* %a
  %24 = load [16 x float]* %a
  %a18 = insertvalue [16 x float] %24, float 0.000000e+00, 2
  store [16 x float] %a18, [16 x float]* %a
  %25 = load [16 x float]* %a
  %a19 = insertvalue [16 x float] %25, float 0.000000e+00, 3
  store [16 x float] %a19, [16 x float]* %a
  %26 = load [16 x float]* %a
  %a20 = insertvalue [16 x float] %26, float 0.000000e+00, 4
  store [16 x float] %a20, [16 x float]* %a
  %27 = load [16 x float]* %a
  %a21 = insertvalue [16 x float] %27, float 0.000000e+00, 5
  store [16 x float] %a21, [16 x float]* %a
  %28 = load [16 x float]* %a
  %a22 = insertvalue [16 x float] %28, float 0.000000e+00, 6
  store [16 x float] %a22, [16 x float]* %a
  %29 = load [16 x float]* %a
  %a23 = insertvalue [16 x float] %29, float 0.000000e+00, 7
  store [16 x float] %a23, [16 x float]* %a
  %30 = load [16 x float]* %a
  %a24 = insertvalue [16 x float] %30, float 0.000000e+00, 8
  store [16 x float] %a24, [16 x float]* %a
  %31 = load [16 x float]* %a
  %a25 = insertvalue [16 x float] %31, float 0.000000e+00, 9
  store [16 x float] %a25, [16 x float]* %a
  %32 = load [16 x float]* %a
  %a26 = insertvalue [16 x float] %32, float 0.000000e+00, 10
  store [16 x float] %a26, [16 x float]* %a
  %33 = load [16 x float]* %a
  %a27 = insertvalue [16 x float] %33, float 0.000000e+00, 11
  store [16 x float] %a27, [16 x float]* %a
  %34 = load [16 x float]* %a
  %a28 = insertvalue [16 x float] %34, float 0.000000e+00, 12
  store [16 x float] %a28, [16 x float]* %a
  %35 = load [16 x float]* %a
  %a29 = insertvalue [16 x float] %35, float 0.000000e+00, 13
  store [16 x float] %a29, [16 x float]* %a
  %36 = load [16 x float]* %a
  %a30 = insertvalue [16 x float] %36, float 0.000000e+00, 14
  store [16 x float] %a30, [16 x float]* %a
  %37 = load [16 x float]* %a
  %a31 = insertvalue [16 x float] %37, float 0.000000e+00, 15
  store [16 x float] %a31, [16 x float]* %a
  %38 = load i32 addrspace(2)* @condition
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %then32, label %ifmerge34

then32:                                           ; preds = %ifmerge13
  %a33 = load [16 x float]* %localArray
  store [16 x float] %a33, [16 x float]* %a
  br label %ifmerge34

ifmerge34:                                        ; preds = %ifmerge13, %then32
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %color, <4 x float>* %locals2_bleh
  %coord35 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %40 = extractelement <2 x float> %coord35, i32 1
  %41 = load <4 x float>* %locals2_bleh
  %locals2_bleh36 = insertelement <4 x float> %41, float %40, i32 2
  store <4 x float> %locals2_bleh36, <4 x float>* %locals2_bleh
  %42 = load <4 x float>* %locals2_bleh
  %43 = load [16 x float]* %localFArray
  %44 = extractvalue [16 x float] %43, 4
  %45 = load %s1* %locals2_s1_1
  %46 = extractvalue %s1 %45, 1
  %47 = fadd float %44, %46
  %48 = load [16 x float]* %localArray
  %49 = extractvalue [16 x float] %48, 5
  %50 = fadd float %47, %49
  %51 = load [16 x float]* %a
  %52 = extractvalue [16 x float] %51, 5
  %53 = fadd float %50, %52
  %54 = insertelement <4 x float> undef, float %53, i32 0
  %55 = insertelement <4 x float> %54, float %53, i32 1
  %56 = insertelement <4 x float> %55, float %53, i32 2
  %57 = insertelement <4 x float> %56, float %53, i32 3
  %58 = fmul <4 x float> %42, %57
  %coord37 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %59 = load i32 addrspace(1)* @"sampler2D sampler"
  %60 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %59, i32 0, <2 x float> %coord37)
  %FragColor_shadow = fmul <4 x float> %58, %60
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge34
  %61 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %61)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

%s1 = type { i32, float }
%s2 = type { i32, float, %s1, <4 x float> }
%s3 = type { %s2, i32, float, %s1 }

@foo3 = external addrspace(2) constant %s3
@condition = external addrspace(2) constant i32
@"sampler2D sampler" = external addrspace(1) constant i32
@gla_globalAgg = internal global [16 x float] undef
@gla_globalAgg1 = internal global [8 x i32] undef
@gla_globalAgg2 = internal global [8 x i32] [i32 undef, i32 undef, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef]
@gla_globalAgg3 = internal global [16 x float] [float undef, float undef, float undef, float undef, float 1.000000e+00, float undef, float undef, float undef, float undef, float undef, float undef, float undef, float undef, float undef, float undef, float undef]
@gla_globalAgg4 = internal global [16 x float] undef

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr %s3 addrspace(2)* @foo3, i32 0, i32 0, i32 2
  %0 = load %s1 addrspace(2)* %gla_constGEP, align 8
  %gla_constGEP43 = getelementptr %s3 addrspace(2)* @foo3, i32 0, i32 0, i32 0
  %1 = load i32 addrspace(2)* %gla_constGEP43, align 16
  %2 = icmp sgt i32 %1, 0
  %locals2_s1_14 = insertvalue %s1 %0, float 1.000000e+00, 1
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %3 = extractelement <2 x float> %coord, i32 0
  %aggregate = load [16 x float]* @gla_globalAgg
  %localFArray5 = insertvalue [16 x float] %aggregate, float %3, 4
  %aggregate44 = load [8 x i32]* @gla_globalAgg1
  %localIArray6 = insertvalue [8 x i32] %aggregate44, i32 %1, 2
  %locals2_s1_18 = insertvalue %s1 %0, float %3, 1
  %aggregate45 = load [8 x i32]* @gla_globalAgg2
  %select39 = select i1 %2, [8 x i32] %localIArray6, [8 x i32] %aggregate45
  %aggregate46 = load [16 x float]* @gla_globalAgg3
  %select40 = select i1 %2, [16 x float] %localFArray5, [16 x float] %aggregate46
  %select41 = select i1 %2, %s1 %locals2_s1_14, %s1 %locals2_s1_18
  %4 = extractvalue [8 x i32] %select39, 2
  %5 = icmp eq i32 %4, 0
  %6 = extractvalue [16 x float] %select40, 4
  %7 = fadd float %6, 1.000000e+00
  %localFArray12 = insertvalue [16 x float] %select40, float %7, 4
  %select = select i1 %5, [16 x float] %localFArray12, [16 x float] %select40
  %8 = load i32 addrspace(2)* @condition, align 4
  %9 = icmp eq i32 %8, 1
  %aggregate47 = load [16 x float]* @gla_globalAgg4
  %localArray15 = insertvalue [16 x float] %aggregate47, float %3, 5
  %select42 = select i1 %9, [16 x float] %localArray15, [16 x float] zeroinitializer
  %10 = extractvalue [16 x float] %select, 4
  %11 = extractvalue %s1 %select41, 1
  %12 = fadd float %10, %11
  %13 = fadd float %12, %3
  %14 = extractvalue [16 x float] %select42, 5
  %15 = fadd float %13, %14
  %16 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %15, <4 x i32> zeroinitializer)
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %17 = load i32 addrspace(1)* @"sampler2D sampler", align 4
  %18 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.v2f32.f32(<4 x float> %color, i32 4, float undef, i32 undef, float undef, i32 undef, <2 x float> %coord, i32 1, float undef, i32 undef)
  %19 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %17, i32 0, <2 x float> %coord)
  %20 = fmul <4 x float> %18, %16
  %FragColor_shadow = fmul <4 x float> %20, %19
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %FragColor_shadow)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.v2f32.f32(<4 x float>, i32, float, i32, float, i32, <2 x float>, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone
compiling localAggregates.frag...
uniform sampler2D sampler ; 
varying vec2 coord ; 
varying vec4 color ; 
struct s1 { int i ; float f ; } ; 
struct s2 { int i ; float f ; s1 s1_1 ; vec4 bleh ; } ; 
struct s3 { s2 s2_1 ; int i ; float f ; s1 s1_1 ; } ; 
uniform s1 foo ; 
uniform s2 foo2 ; 
uniform s3 foo3 ; 
uniform float [ 16 ] uFloatArray ; 
uniform int condition ; 
void  main (){
s2 locals2 ; s3 locals3 ; float localFArray [ 16 ] ; int localIArray [ 8 ] ; locals2 = foo3 . s2_1 ; if ( foo3 . s2_1 . i > 0 ) {
locals2 . s1_1 . f = 1.000000 ; localFArray [ 4 ] = coord . x ; localIArray [ 2 ] = foo3 . s2_1 . i ; }
else {
locals2 . s1_1 . f = coord . x ; localFArray [ 4 ] = 1.000000 ; localIArray [ 2 ] = 0 ; }
if ( localIArray [ 2 ] == 0 ) ++ localFArray [ 4 ] ; float localArray [ 16 ] ; int x = 5 ; localArray [ x ] = coord . x ; float [ 16 ] a ; for( int i = 0 ; ; i < 16 ; i ++ ) a [ i ] = 0.000000 ; if ( condition == 1 ) a = localArray ; locals2 . bleh = color ; locals2 . bleh . z = coord . y ; gl_FragColor = locals2 . bleh * localFArray [ 4 ] + locals2 . s1_1 . f + localArray [ x ] + a [ x ] * texture2D ( sampler , coord ) ; }



(
(declare (uniform ) int condition)
(declare (uniform ) s3 foo3)
(declare (in ) vec4 color)
(declare (in ) vec2 coord)
(declare (uniform ) sampler2D sampler)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () (array float 16) a)
      (declare () (array float 16) localArray)
      (declare () (array int 8) localIArray)
      (declare () (array float 16) localFArray)
      (declare (temporary ) s1 locals2_s1_1)
      (declare (temporary ) vec4 locals2_bleh)
      (declare (temporary ) s2 assignment_tmp)
      (assign (constant bool (1)) () (var_ref assignment_tmp)  (record_ref (var_ref foo3)  s2_1) ) 
      (assign (constant bool (1)) () (var_ref locals2_s1_1)  (record_ref (var_ref assignment_tmp)  s1_1) ) 
      (assign (constant bool (1)) (xyzw) (var_ref locals2_bleh)  (record_ref (var_ref assignment_tmp)  bleh) ) 
      (if (expression bool > (record_ref (record_ref (var_ref foo3)  s2_1)  i) (constant int (0)) ) (
        (assign (constant bool (1)) (x) (record_ref (var_ref locals2_s1_1)  f)  (constant float (1.000000)) ) 
        (assign (constant bool (1)) (x) (array_ref (var_ref localFArray) (constant int (4)) )  (swiz x (var_ref coord) )) 
        (assign (constant bool (1)) (x) (array_ref (var_ref localIArray) (constant int (2)) )  (record_ref (record_ref (var_ref foo3)  s2_1)  i) ) 
      )
      (
        (assign (constant bool (1)) (x) (record_ref (var_ref locals2_s1_1)  f)  (swiz x (var_ref coord) )) 
        (assign (constant bool (1)) (x) (array_ref (var_ref localFArray) (constant int (4)) )  (constant float (1.000000)) ) 
        (assign (constant bool (1)) (x) (array_ref (var_ref localIArray) (constant int (2)) )  (constant int (0)) ) 
      ))

      (if (expression bool all_equal (array_ref (var_ref localIArray) (constant int (2)) ) (constant int (0)) ) (
        (assign (constant bool (1)) (x) (array_ref (var_ref localFArray) (constant int (4)) )  (expression float + (array_ref (var_ref localFArray) (constant int (4)) ) (constant float (1.000000)) ) ) 
      )
      ())

      (assign (constant bool (1)) (x) (array_ref (var_ref localArray) (constant int (5)) )  (swiz x (var_ref coord) )) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (0)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (1)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (2)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (3)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (4)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (5)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (6)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (7)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (8)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (9)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (10)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (11)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (12)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (13)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (14)) )  (constant float (0.000000)) ) 
      (assign (constant bool (1)) (x) (array_ref (var_ref a) (constant int (15)) )  (constant float (0.000000)) ) 
      (if (expression bool all_equal (var_ref condition) (constant int (1)) ) (
        (assign (constant bool (1)) () (var_ref a)  (var_ref localArray) ) 
      )
      ())

      (assign (constant bool (1)) (xyzw) (var_ref locals2_bleh)  (var_ref color) ) 
      (assign (constant bool (1)) (z) (var_ref locals2_bleh)  (swiz y (var_ref coord) )) 
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (expression vec4 * (var_ref locals2_bleh) (expression float + (expression float + (expression float + (array_ref (var_ref localFArray) (constant int (4)) ) (record_ref (var_ref locals2_s1_1)  f) ) (array_ref (var_ref localArray) (constant int (5)) ) ) (array_ref (var_ref a) (constant int (5)) ) ) ) (tex (var_ref sampler)  (var_ref coord)  (0 0 0) 1 () )) ) 
    ))

)


)
// LunarGOO output
#version 130
struct s1 {
    int member0;
    float member1;
};

struct s2 {
    int member0;
    float member1;
    s1 member2;
    vec4 member3;
};

struct s3 {
    s2 member0;
    int member1;
    float member2;
    s1 member3;
};

uniform s3 foo3;
uniform int condition;
uniform sampler2D sampler;
float[16] gla_globalAgg;
int[8] gla_globalAgg1;
int[8] gla_globalAgg2;
const int const21_0 = 0;
float[16] gla_globalAgg3;
const float const22_1f = 1.0;
float[16] gla_globalAgg4;
in vec2 coord;
const int const35_1 = 1;
const float[16] const37 = float[16](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
in vec4 color;

void main()
{
    gla_globalAgg2[2] = const21_0;
    gla_globalAgg3[4] = const22_1f;
    
    s1 temp23 = foo3.member0.member2;
    int temp24 = foo3.member0.member0;
    bool temp25 = temp24 > const21_0;
    temp23.member1 = const22_1f;
    gla_globalAgg[4] = coord.x;
    gla_globalAgg1[2] = temp24;
    temp23.member1 = coord.x;
    int[8] select39 = temp25 ? gla_globalAgg1 : gla_globalAgg2;
    float[16] select40 = temp25 ? gla_globalAgg : gla_globalAgg3;
    s1 select41 = temp25 ? temp23 : temp23;
    int temp29 = select39[2];
    bool temp30 = temp29 == const21_0;
    float temp31 = select40[4];
    float temp32 = temp31 + const22_1f;
    select40[4] = temp32;
    float[16] select = temp30 ? select40 : select40;
    bool temp34 = condition == const35_1;
    gla_globalAgg4[5] = coord.x;
    float[16] select42 = temp34 ? gla_globalAgg4 : const37;
    float temp38 = select[4];
    float temp39 = select41.member1;
    float temp40 = temp38 + temp39;
    float temp41 = temp40 + coord.x;
    float temp42 = select42[5];
    float temp43 = temp41 + temp42;
    vec4 temp44 = vec4(temp43);
    vec4 temp45 = color;
    temp45.z = coord.y;
    vec4 temp46 = texture2D(sampler, coord);
    vec4 temp47 = temp45 * temp44;
    vec4 FragColor_shadow = temp47 * temp46;
    gl_FragColor = FragColor_shadow;
    
}
