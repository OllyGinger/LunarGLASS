
Top IR:
; ModuleID = 'Top'

@uv4 = external addrspace(2) constant <4 x float>
@ub = external addrspace(2) constant i1
@uf = external addrspace(2) constant float
@ui = external addrspace(2) constant i32
@ub41 = external addrspace(2) constant <4 x i1>
@ub42 = external addrspace(2) constant <4 x i1>
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %conditional_tmp = alloca <4 x float>
  %assignment_tmp193 = alloca i32
  %and_tmp183 = alloca i1
  %or_tmp180 = alloca i1
  %assignment_tmp177 = alloca float
  %b = alloca <3 x float>
  %a = alloca <3 x float>
  %p = alloca <4 x float>
  %and_tmp160 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp155 = alloca i32
  %and_tmp150 = alloca i1
  %and_tmp145 = alloca i1
  %and_tmp140 = alloca i1
  %and_tmp135 = alloca i1
  %and_tmp130 = alloca i1
  %and_tmp125 = alloca i1
  %and_tmp120 = alloca i1
  %and_tmp = alloca i1
  %assignment_tmp113 = alloca i32
  %assignment_tmp111 = alloca i32
  %assignment_tmp109 = alloca i32
  %assignment_tmp106 = alloca <4 x float>
  %assignment_tmp104 = alloca <4 x float>
  %assignment_tmp102 = alloca <4 x float>
  %k = alloca float
  %return_value96 = alloca <4 x float>
  %assignment_tmp93 = alloca <4 x float>
  %assignment_tmp91 = alloca <4 x float>
  %return_value = alloca <4 x float>
  %assignment_tmp86 = alloca <4 x float>
  %assignment_tmp84 = alloca <4 x float>
  %t82 = alloca <4 x float>
  %assignment_tmp80 = alloca <4 x float>
  %t = alloca <4 x float>
  %assignment_tmp74 = alloca <4 x float>
  %mix_retval72 = alloca <4 x float>
  %assignment_tmp69 = alloca <4 x float>
  %mix_retval = alloca <4 x float>
  %assignment_tmp65 = alloca <4 x float>
  %assignment_tmp63 = alloca <4 x float>
  %assignment_tmp61 = alloca <4 x float>
  %assignment_tmp59 = alloca <4 x float>
  %assignment_tmp57 = alloca <4 x float>
  %assignment_tmp55 = alloca <4 x float>
  %assignment_tmp53 = alloca <4 x float>
  %assignment_tmp51 = alloca <4 x float>
  %assignment_tmp49 = alloca <4 x float>
  %assignment_tmp47 = alloca <4 x float>
  %assignment_tmp45 = alloca <4 x float>
  %assignment_tmp43 = alloca <4 x float>
  %assignment_tmp41 = alloca <4 x float>
  %assignment_tmp39 = alloca <4 x float>
  %assignment_tmp37 = alloca <4 x float>
  %assignment_tmp35 = alloca <4 x float>
  %assignment_tmp33 = alloca <4 x float>
  %assignment_tmp31 = alloca <4 x float>
  %assignment_tmp29 = alloca <4 x float>
  %assignment_tmp27 = alloca <4 x float>
  %assignment_tmp25 = alloca <4 x float>
  %assignment_tmp23 = alloca <4 x float>
  %assignment_tmp21 = alloca <4 x float>
  %assignment_tmp19 = alloca <4 x float>
  %assignment_tmp17 = alloca <4 x float>
  %assignment_tmp15 = alloca <4 x float>
  %assignment_tmp13 = alloca <4 x float>
  %assignment_tmp11 = alloca <4 x float>
  %assignment_tmp9 = alloca <4 x float>
  %assignment_tmp7 = alloca <4 x float>
  %assignment_tmp5 = alloca <4 x float>
  %assignment_tmp3 = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %_ret_val = alloca <4 x float>
  %v = alloca <4 x float>
  %f = alloca float
  %i = alloca i32
  %0 = load <4 x float> addrspace(2)* @uv4
  %_ret_val1 = fmul <4 x float> %0, <float 0x3F91DF3300000000, float 0x3F91DF3300000000, float 0x3F91DF3300000000, float 0x3F91DF3300000000>
  store <4 x float> %_ret_val1, <4 x float>* %_ret_val
  %1 = load <4 x float>* %_ret_val
  %2 = load <4 x float>* %_ret_val
  %3 = fmul <4 x float> %2, <float 0x404CA5DC20000000, float 0x404CA5DC20000000, float 0x404CA5DC20000000, float 0x404CA5DC20000000>
  %assignment_tmp2 = fadd <4 x float> %1, %3
  store <4 x float> %assignment_tmp2, <4 x float>* %assignment_tmp
  %4 = load <4 x float>* %assignment_tmp
  %5 = load <4 x float>* %assignment_tmp
  %6 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %5)
  %assignment_tmp34 = fadd <4 x float> %4, %6
  store <4 x float> %assignment_tmp34, <4 x float>* %assignment_tmp3
  %7 = load <4 x float>* %assignment_tmp3
  %8 = load <4 x float>* %assignment_tmp3
  %9 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %8)
  %assignment_tmp56 = fadd <4 x float> %7, %9
  store <4 x float> %assignment_tmp56, <4 x float>* %assignment_tmp5
  %10 = load <4 x float>* %assignment_tmp5
  %11 = load <4 x float>* %assignment_tmp5
  %12 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %11)
  %assignment_tmp78 = fadd <4 x float> %10, %12
  store <4 x float> %assignment_tmp78, <4 x float>* %assignment_tmp7
  %13 = load <4 x float>* %assignment_tmp7
  %14 = load <4 x float>* %assignment_tmp7
  %15 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %14)
  %assignment_tmp910 = fadd <4 x float> %13, %15
  store <4 x float> %assignment_tmp910, <4 x float>* %assignment_tmp9
  %16 = load <4 x float>* %assignment_tmp9
  %17 = load <4 x float>* %assignment_tmp9
  %18 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %17)
  %assignment_tmp1112 = fadd <4 x float> %16, %18
  store <4 x float> %assignment_tmp1112, <4 x float>* %assignment_tmp11
  %19 = load <4 x float>* %assignment_tmp11
  %20 = load <4 x float>* %assignment_tmp11
  %21 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %20)
  %assignment_tmp1314 = fadd <4 x float> %19, %21
  store <4 x float> %assignment_tmp1314, <4 x float>* %assignment_tmp13
  %22 = load <4 x float>* %assignment_tmp13
  %23 = load <4 x float>* %assignment_tmp13
  %24 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %23)
  %assignment_tmp1516 = fadd <4 x float> %22, %24
  store <4 x float> %assignment_tmp1516, <4 x float>* %assignment_tmp15
  %25 = load <4 x float>* %assignment_tmp15
  %26 = load <4 x float>* %assignment_tmp15
  %27 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %26)
  %assignment_tmp1718 = fadd <4 x float> %25, %27
  store <4 x float> %assignment_tmp1718, <4 x float>* %assignment_tmp17
  %28 = load <4 x float>* %assignment_tmp17
  %29 = load <4 x float>* %assignment_tmp17
  %30 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %29)
  %assignment_tmp1920 = fadd <4 x float> %28, %30
  store <4 x float> %assignment_tmp1920, <4 x float>* %assignment_tmp19
  %31 = load <4 x float>* %assignment_tmp19
  %32 = load <4 x float>* %assignment_tmp19
  %33 = call <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float> %32)
  %assignment_tmp2122 = fadd <4 x float> %31, %33
  store <4 x float> %assignment_tmp2122, <4 x float>* %assignment_tmp21
  %34 = load <4 x float>* %assignment_tmp21
  %35 = load <4 x float>* %assignment_tmp21
  %36 = call <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float> %35)
  %assignment_tmp2324 = fadd <4 x float> %34, %36
  store <4 x float> %assignment_tmp2324, <4 x float>* %assignment_tmp23
  %37 = load <4 x float>* %assignment_tmp23
  %38 = load <4 x float>* %assignment_tmp23
  %39 = call <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float> %38)
  %assignment_tmp2526 = fadd <4 x float> %37, %39
  store <4 x float> %assignment_tmp2526, <4 x float>* %assignment_tmp25
  %40 = load <4 x float>* %assignment_tmp25
  %41 = load <4 x float>* %assignment_tmp25
  %42 = load <4 x float>* %assignment_tmp25
  %43 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %41, <4 x float> %42)
  %assignment_tmp2728 = fadd <4 x float> %40, %43
  store <4 x float> %assignment_tmp2728, <4 x float>* %assignment_tmp27
  %44 = load <4 x float>* %assignment_tmp27
  %45 = load <4 x float>* %assignment_tmp27
  %46 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %45)
  %assignment_tmp2930 = fadd <4 x float> %44, %46
  store <4 x float> %assignment_tmp2930, <4 x float>* %assignment_tmp29
  %47 = load <4 x float>* %assignment_tmp29
  %48 = load <4 x float>* %assignment_tmp29
  %49 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %48)
  %assignment_tmp3132 = fadd <4 x float> %47, %49
  store <4 x float> %assignment_tmp3132, <4 x float>* %assignment_tmp31
  %50 = load <4 x float>* %assignment_tmp31
  %51 = load <4 x float>* %assignment_tmp31
  %52 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %51)
  %assignment_tmp3334 = fadd <4 x float> %50, %52
  store <4 x float> %assignment_tmp3334, <4 x float>* %assignment_tmp33
  %53 = load <4 x float>* %assignment_tmp33
  %54 = load <4 x float>* %assignment_tmp33
  %55 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %54)
  %assignment_tmp3536 = fadd <4 x float> %53, %55
  store <4 x float> %assignment_tmp3536, <4 x float>* %assignment_tmp35
  %56 = load <4 x float>* %assignment_tmp35
  %57 = load <4 x float>* %assignment_tmp35
  %58 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %57)
  %assignment_tmp3738 = fadd <4 x float> %56, %58
  store <4 x float> %assignment_tmp3738, <4 x float>* %assignment_tmp37
  %59 = load <4 x float>* %assignment_tmp37
  %60 = load <4 x float>* %assignment_tmp37
  %61 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %60)
  %assignment_tmp3940 = fadd <4 x float> %59, %61
  store <4 x float> %assignment_tmp3940, <4 x float>* %assignment_tmp39
  %62 = load <4 x float>* %assignment_tmp39
  %63 = load <4 x float>* %assignment_tmp39
  %64 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %63)
  %assignment_tmp4142 = fadd <4 x float> %62, %64
  store <4 x float> %assignment_tmp4142, <4 x float>* %assignment_tmp41
  %65 = load <4 x float>* %assignment_tmp41
  %66 = load <4 x float>* %assignment_tmp41
  %67 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %66)
  %assignment_tmp4344 = fadd <4 x float> %65, %67
  store <4 x float> %assignment_tmp4344, <4 x float>* %assignment_tmp43
  %68 = load <4 x float>* %assignment_tmp43
  %69 = load <4 x float>* %assignment_tmp43
  %70 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %69)
  %assignment_tmp4546 = fadd <4 x float> %68, %70
  store <4 x float> %assignment_tmp4546, <4 x float>* %assignment_tmp45
  %71 = load <4 x float>* %assignment_tmp45
  %72 = load <4 x float>* %assignment_tmp45
  %73 = call <4 x float> @llvm.gla.fRoundZero.v4f32.v4f32(<4 x float> %72)
  %assignment_tmp4748 = fadd <4 x float> %71, %73
  store <4 x float> %assignment_tmp4748, <4 x float>* %assignment_tmp47
  %74 = load <4 x float>* %assignment_tmp47
  %75 = load <4 x float>* %assignment_tmp47
  %76 = call <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float> %75)
  %assignment_tmp4950 = fadd <4 x float> %74, %76
  store <4 x float> %assignment_tmp4950, <4 x float>* %assignment_tmp49
  %77 = load <4 x float>* %assignment_tmp49
  %78 = load <4 x float>* %assignment_tmp49
  %79 = call <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float> %78)
  %assignment_tmp5152 = fadd <4 x float> %77, %79
  store <4 x float> %assignment_tmp5152, <4 x float>* %assignment_tmp51
  %80 = load <4 x float>* %assignment_tmp51
  %81 = load <4 x float>* %assignment_tmp51
  %82 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %81)
  %assignment_tmp5354 = fadd <4 x float> %80, %82
  store <4 x float> %assignment_tmp5354, <4 x float>* %assignment_tmp53
  %83 = load <4 x float>* %assignment_tmp53
  %84 = load <4 x float>* %assignment_tmp53
  %85 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %84)
  %assignment_tmp5556 = fadd <4 x float> %83, %85
  store <4 x float> %assignment_tmp5556, <4 x float>* %assignment_tmp55
  %86 = load <4 x float>* %assignment_tmp55
  %87 = load <4 x float>* %assignment_tmp55
  %88 = load <4 x float>* %assignment_tmp55
  %89 = frem <4 x float> %87, %88
  %assignment_tmp5758 = fadd <4 x float> %86, %89
  store <4 x float> %assignment_tmp5758, <4 x float>* %assignment_tmp57
  %90 = load <4 x float>* %assignment_tmp57
  %91 = load <4 x float>* %assignment_tmp57
  %92 = load <4 x float>* %assignment_tmp57
  %93 = extractelement <4 x float> %92, i32 0
  %94 = insertelement <4 x float> undef, float %93, i32 0
  %95 = insertelement <4 x float> %94, float %93, i32 1
  %96 = insertelement <4 x float> %95, float %93, i32 2
  %97 = insertelement <4 x float> %96, float %93, i32 3
  %98 = frem <4 x float> %91, %97
  %assignment_tmp5960 = fadd <4 x float> %90, %98
  store <4 x float> %assignment_tmp5960, <4 x float>* %assignment_tmp59
  %99 = load <4 x float>* %assignment_tmp59
  %100 = load <4 x float>* %assignment_tmp59
  %101 = load <4 x float> addrspace(2)* @uv4
  %102 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %100, <4 x float> %101)
  %assignment_tmp6162 = fadd <4 x float> %99, %102
  store <4 x float> %assignment_tmp6162, <4 x float>* %assignment_tmp61
  %103 = load <4 x float>* %assignment_tmp61
  %104 = load <4 x float>* %assignment_tmp61
  %105 = load <4 x float> addrspace(2)* @uv4
  %106 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %104, <4 x float> %105)
  %assignment_tmp6364 = fadd <4 x float> %103, %106
  store <4 x float> %assignment_tmp6364, <4 x float>* %assignment_tmp63
  %107 = load <4 x float>* %assignment_tmp63
  %108 = load <4 x float>* %assignment_tmp63
  %109 = load <4 x float> addrspace(2)* @uv4
  %110 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %108, <4 x float> %109)
  %111 = load <4 x float> addrspace(2)* @uv4
  %112 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %110, <4 x float> %111)
  %assignment_tmp6566 = fadd <4 x float> %107, %112
  store <4 x float> %assignment_tmp6566, <4 x float>* %assignment_tmp65
  %v67 = load <4 x float>* %assignment_tmp65
  store <4 x float> %v67, <4 x float>* %v
  %113 = load <4 x float>* %assignment_tmp65
  %114 = load <4 x float>* %assignment_tmp65
  %115 = load <4 x float>* %assignment_tmp65
  %mix_retval68 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %113, <4 x float> %114, <4 x float> %115)
  store <4 x float> %mix_retval68, <4 x float>* %mix_retval
  %116 = load <4 x float>* %v
  %117 = load <4 x float>* %mix_retval
  %assignment_tmp6970 = fadd <4 x float> %116, %117
  store <4 x float> %assignment_tmp6970, <4 x float>* %assignment_tmp69
  %v71 = load <4 x float>* %assignment_tmp69
  store <4 x float> %v71, <4 x float>* %v
  %118 = load <4 x float>* %assignment_tmp69
  %119 = load <4 x float>* %assignment_tmp69
  %120 = load i1 addrspace(2)* @ub
  %121 = uitofp i1 %120 to float
  %mix_retval7273 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %118, <4 x float> %119, float %121)
  store <4 x float> %mix_retval7273, <4 x float>* %mix_retval72
  %122 = load <4 x float>* %v
  %123 = load <4 x float>* %mix_retval72
  %assignment_tmp7475 = fadd <4 x float> %122, %123
  store <4 x float> %assignment_tmp7475, <4 x float>* %assignment_tmp74
  %124 = load <4 x float>* %assignment_tmp74
  %125 = extractelement <4 x float> %124, i32 0
  %126 = load <4 x float>* %assignment_tmp74
  %127 = extractelement <4 x float> %126, i32 0
  %128 = fcmp oge float %125, %127
  %129 = uitofp i1 %128 to float
  %130 = load <4 x float>* %t
  %t76 = insertelement <4 x float> %130, float %129, i32 0
  store <4 x float> %t76, <4 x float>* %t
  %131 = load <4 x float>* %assignment_tmp74
  %132 = extractelement <4 x float> %131, i32 1
  %133 = load <4 x float>* %assignment_tmp74
  %134 = extractelement <4 x float> %133, i32 1
  %135 = fcmp oge float %132, %134
  %136 = uitofp i1 %135 to float
  %137 = load <4 x float>* %t
  %t77 = insertelement <4 x float> %137, float %136, i32 1
  store <4 x float> %t77, <4 x float>* %t
  %138 = load <4 x float>* %assignment_tmp74
  %139 = extractelement <4 x float> %138, i32 2
  %140 = load <4 x float>* %assignment_tmp74
  %141 = extractelement <4 x float> %140, i32 2
  %142 = fcmp oge float %139, %141
  %143 = uitofp i1 %142 to float
  %144 = load <4 x float>* %t
  %t78 = insertelement <4 x float> %144, float %143, i32 2
  store <4 x float> %t78, <4 x float>* %t
  %145 = load <4 x float>* %assignment_tmp74
  %146 = extractelement <4 x float> %145, i32 3
  %147 = load <4 x float>* %assignment_tmp74
  %148 = extractelement <4 x float> %147, i32 3
  %149 = fcmp oge float %146, %148
  %150 = uitofp i1 %149 to float
  %151 = load <4 x float>* %t
  %t79 = insertelement <4 x float> %151, float %150, i32 3
  store <4 x float> %t79, <4 x float>* %t
  %152 = load <4 x float>* %assignment_tmp74
  %153 = load <4 x float>* %t
  %assignment_tmp8081 = fadd <4 x float> %152, %153
  store <4 x float> %assignment_tmp8081, <4 x float>* %assignment_tmp80
  %154 = load <4 x float>* %assignment_tmp80
  %155 = load <4 x float>* %assignment_tmp80
  %156 = fsub <4 x float> %154, %155
  %157 = load <4 x float>* %assignment_tmp80
  %158 = load <4 x float>* %assignment_tmp80
  %159 = fsub <4 x float> %157, %158
  %160 = fdiv <4 x float> %156, %159
  %161 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float> %160, float 1.000000e+00)
  %t8283 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float> %161, float 0.000000e+00)
  store <4 x float> %t8283, <4 x float>* %t82
  %162 = load <4 x float>* %assignment_tmp80
  %163 = load <4 x float>* %t82
  %164 = load <4 x float>* %t82
  %165 = load <4 x float>* %t82
  %166 = fmul <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %165
  %167 = fsub <4 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, %166
  %168 = fmul <4 x float> %164, %167
  %169 = fmul <4 x float> %163, %168
  %assignment_tmp8485 = fadd <4 x float> %162, %169
  store <4 x float> %assignment_tmp8485, <4 x float>* %assignment_tmp84
  %170 = load <4 x float>* %assignment_tmp84
  %171 = load <4 x float>* %assignment_tmp84
  %172 = load <4 x float>* %assignment_tmp84
  %173 = load <4 x float>* %assignment_tmp84
  %174 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %172, <4 x float> %173)
  %175 = call float @llvm.gla.fInverseSqrt.f32.f32(float %174)
  %176 = insertelement <4 x float> undef, float %175, i32 0
  %177 = insertelement <4 x float> %176, float %175, i32 1
  %178 = insertelement <4 x float> %177, float %175, i32 2
  %179 = insertelement <4 x float> %178, float %175, i32 3
  %180 = fmul <4 x float> %171, %179
  %assignment_tmp8687 = fadd <4 x float> %170, %180
  store <4 x float> %assignment_tmp8687, <4 x float>* %assignment_tmp86
  %v88 = load <4 x float>* %assignment_tmp86
  store <4 x float> %v88, <4 x float>* %v
  %181 = load <4 x float>* %assignment_tmp86
  %182 = load <4 x float>* %assignment_tmp86
  %183 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %181, <4 x float> %182)
  %184 = fcmp olt float %183, 0.000000e+00
  br i1 %184, label %then, label %else

then:                                             ; preds = %entry
  %return_value89 = load <4 x float>* %assignment_tmp86
  store <4 x float> %return_value89, <4 x float>* %return_value
  br label %ifmerge

else:                                             ; preds = %entry
  %185 = load <4 x float>* %assignment_tmp86
  %return_value90 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %185
  store <4 x float> %return_value90, <4 x float>* %return_value
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %186 = load <4 x float>* %assignment_tmp86
  %187 = load <4 x float>* %return_value
  %assignment_tmp9192 = fadd <4 x float> %186, %187
  store <4 x float> %assignment_tmp9192, <4 x float>* %assignment_tmp91
  %188 = load <4 x float>* %assignment_tmp91
  %189 = load <4 x float>* %assignment_tmp91
  %190 = load <4 x float>* %assignment_tmp91
  %191 = load <4 x float>* %assignment_tmp91
  %192 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %190, <4 x float> %191)
  %193 = load <4 x float>* %assignment_tmp91
  %194 = insertelement <4 x float> undef, float %192, i32 0
  %195 = insertelement <4 x float> %194, float %192, i32 1
  %196 = insertelement <4 x float> %195, float %192, i32 2
  %197 = insertelement <4 x float> %196, float %192, i32 3
  %198 = fmul <4 x float> %197, %193
  %199 = fmul <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %198
  %200 = fsub <4 x float> %189, %199
  %assignment_tmp9394 = fadd <4 x float> %188, %200
  store <4 x float> %assignment_tmp9394, <4 x float>* %assignment_tmp93
  %v95 = load <4 x float>* %assignment_tmp93
  store <4 x float> %v95, <4 x float>* %v
  %201 = load float addrspace(2)* @uf
  %202 = load float addrspace(2)* @uf
  %203 = load <4 x float>* %assignment_tmp93
  %204 = load <4 x float>* %assignment_tmp93
  %205 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %203, <4 x float> %204)
  %206 = load <4 x float>* %assignment_tmp93
  %207 = load <4 x float>* %assignment_tmp93
  %208 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %206, <4 x float> %207)
  %209 = fmul float %205, %208
  %210 = fsub float 1.000000e+00, %209
  %211 = fmul float %202, %210
  %212 = fmul float %201, %211
  %k97 = fsub float 1.000000e+00, %212
  store float %k97, float* %k
  %213 = load float* %k
  %214 = fcmp olt float %213, 0.000000e+00
  br i1 %214, label %then98, label %else99

then98:                                           ; preds = %ifmerge
  store <4 x float> zeroinitializer, <4 x float>* %return_value96
  br label %ifmerge101

else99:                                           ; preds = %ifmerge
  %215 = load float addrspace(2)* @uf
  %216 = load <4 x float>* %assignment_tmp93
  %217 = insertelement <4 x float> undef, float %215, i32 0
  %218 = insertelement <4 x float> %217, float %215, i32 1
  %219 = insertelement <4 x float> %218, float %215, i32 2
  %220 = insertelement <4 x float> %219, float %215, i32 3
  %221 = fmul <4 x float> %220, %216
  %222 = load float addrspace(2)* @uf
  %223 = load <4 x float>* %assignment_tmp93
  %224 = load <4 x float>* %assignment_tmp93
  %225 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %223, <4 x float> %224)
  %226 = fmul float %222, %225
  %227 = load float* %k
  %228 = call float @llvm.gla.fSqrt.f32.f32(float %227)
  %229 = fadd float %226, %228
  %230 = load <4 x float>* %assignment_tmp93
  %231 = insertelement <4 x float> undef, float %229, i32 0
  %232 = insertelement <4 x float> %231, float %229, i32 1
  %233 = insertelement <4 x float> %232, float %229, i32 2
  %234 = insertelement <4 x float> %233, float %229, i32 3
  %235 = fmul <4 x float> %234, %230
  %return_value96100 = fsub <4 x float> %221, %235
  store <4 x float> %return_value96100, <4 x float>* %return_value96
  br label %ifmerge101

ifmerge101:                                       ; preds = %else99, %then98
  %236 = load <4 x float>* %assignment_tmp93
  %237 = load <4 x float>* %return_value96
  %assignment_tmp102103 = fadd <4 x float> %236, %237
  store <4 x float> %assignment_tmp102103, <4 x float>* %assignment_tmp102
  %238 = load <4 x float>* %assignment_tmp102
  %239 = load <4 x float>* %assignment_tmp102
  %240 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %239)
  %assignment_tmp104105 = fadd <4 x float> %238, %240
  store <4 x float> %assignment_tmp104105, <4 x float>* %assignment_tmp104
  %241 = load <4 x float>* %assignment_tmp104
  %242 = load <4 x float>* %assignment_tmp104
  %243 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %242)
  %assignment_tmp106107 = fadd <4 x float> %241, %243
  store <4 x float> %assignment_tmp106107, <4 x float>* %assignment_tmp106
  %244 = load <4 x float>* %assignment_tmp106
  %245 = load <4 x float>* %assignment_tmp106
  %246 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %245)
  %247 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %246)
  %248 = load <4 x float>* %assignment_tmp106
  %249 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %248)
  %250 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %249)
  %251 = fadd <4 x float> %247, %250
  %v108 = fadd <4 x float> %244, %251
  store <4 x float> %v108, <4 x float>* %v
  %252 = load i32 addrspace(2)* @ui
  %assignment_tmp109110 = call i32 @llvm.gla.abs.i32.i32(i32 %252)
  store i32 %assignment_tmp109110, i32* %assignment_tmp109
  %253 = load i32* %assignment_tmp109
  %254 = load i32* %assignment_tmp109
  %255 = load i32 addrspace(2)* @ui
  %256 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %254, i32 %255)
  %assignment_tmp111112 = add i32 %253, %256
  store i32 %assignment_tmp111112, i32* %assignment_tmp111
  %257 = load i32* %assignment_tmp111
  %258 = load i32* %assignment_tmp111
  %259 = load i32 addrspace(2)* @ui
  %260 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %258, i32 %259)
  %assignment_tmp113114 = add i32 %257, %260
  store i32 %assignment_tmp113114, i32* %assignment_tmp113
  %261 = load i32* %assignment_tmp113
  %262 = load i32* %assignment_tmp113
  %263 = load i32 addrspace(2)* @ui
  %264 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %262, i32 %263)
  %265 = load i32 addrspace(2)* @ui
  %266 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %264, i32 %265)
  %i115 = add i32 %261, %266
  store i32 %i115, i32* %i
  %267 = load <4 x float>* %v
  %268 = load <4 x float>* %v
  %269 = fcmp olt <4 x float> %267, %268
  %270 = call i1 @llvm.gla.any.v4i1(<4 x i1> %269)
  br i1 %270, label %then116, label %else118

then116:                                          ; preds = %ifmerge101
  %271 = load <4 x float>* %v
  %272 = load <4 x float>* %v
  %273 = fcmp ole <4 x float> %271, %272
  %and_tmp117 = call i1 @llvm.gla.any.v4i1(<4 x i1> %273)
  store i1 %and_tmp117, i1* %and_tmp
  br label %ifmerge119

else118:                                          ; preds = %ifmerge101
  store i1 false, i1* %and_tmp
  br label %ifmerge119

ifmerge119:                                       ; preds = %else118, %then116
  %274 = load i1* %and_tmp
  br i1 %274, label %then121, label %else123

then121:                                          ; preds = %ifmerge119
  %275 = load <4 x float>* %v
  %276 = load <4 x float>* %v
  %277 = fcmp ogt <4 x float> %275, %276
  %and_tmp120122 = call i1 @llvm.gla.any.v4i1(<4 x i1> %277)
  store i1 %and_tmp120122, i1* %and_tmp120
  br label %ifmerge124

else123:                                          ; preds = %ifmerge119
  store i1 false, i1* %and_tmp120
  br label %ifmerge124

ifmerge124:                                       ; preds = %else123, %then121
  %278 = load i1* %and_tmp120
  br i1 %278, label %then126, label %else128

then126:                                          ; preds = %ifmerge124
  %279 = load <4 x float>* %v
  %280 = load <4 x float>* %v
  %281 = fcmp oge <4 x float> %279, %280
  %and_tmp125127 = call i1 @llvm.gla.any.v4i1(<4 x i1> %281)
  store i1 %and_tmp125127, i1* %and_tmp125
  br label %ifmerge129

else128:                                          ; preds = %ifmerge124
  store i1 false, i1* %and_tmp125
  br label %ifmerge129

ifmerge129:                                       ; preds = %else128, %then126
  %282 = load i1* %and_tmp125
  br i1 %282, label %then131, label %else133

then131:                                          ; preds = %ifmerge129
  %283 = load <4 x i1> addrspace(2)* @ub41
  %284 = load <4 x i1> addrspace(2)* @ub42
  %285 = icmp eq <4 x i1> %283, %284
  %and_tmp130132 = call i1 @llvm.gla.any.v4i1(<4 x i1> %285)
  store i1 %and_tmp130132, i1* %and_tmp130
  br label %ifmerge134

else133:                                          ; preds = %ifmerge129
  store i1 false, i1* %and_tmp130
  br label %ifmerge134

ifmerge134:                                       ; preds = %else133, %then131
  %286 = load i1* %and_tmp130
  br i1 %286, label %then136, label %else138

then136:                                          ; preds = %ifmerge134
  %287 = load <4 x i1> addrspace(2)* @ub41
  %288 = load <4 x i1> addrspace(2)* @ub42
  %289 = icmp ne <4 x i1> %287, %288
  %and_tmp135137 = call i1 @llvm.gla.any.v4i1(<4 x i1> %289)
  store i1 %and_tmp135137, i1* %and_tmp135
  br label %ifmerge139

else138:                                          ; preds = %ifmerge134
  store i1 false, i1* %and_tmp135
  br label %ifmerge139

ifmerge139:                                       ; preds = %else138, %then136
  %290 = load i1* %and_tmp135
  br i1 %290, label %then141, label %else143

then141:                                          ; preds = %ifmerge139
  %291 = load <4 x i1> addrspace(2)* @ub41
  %and_tmp140142 = call i1 @llvm.gla.any.v4i1(<4 x i1> %291)
  store i1 %and_tmp140142, i1* %and_tmp140
  br label %ifmerge144

else143:                                          ; preds = %ifmerge139
  store i1 false, i1* %and_tmp140
  br label %ifmerge144

ifmerge144:                                       ; preds = %else143, %then141
  %292 = load i1* %and_tmp140
  br i1 %292, label %then146, label %else148

then146:                                          ; preds = %ifmerge144
  %293 = load <4 x i1> addrspace(2)* @ub41
  %and_tmp145147 = call i1 @llvm.gla.all.v4i1(<4 x i1> %293)
  store i1 %and_tmp145147, i1* %and_tmp145
  br label %ifmerge149

else148:                                          ; preds = %ifmerge144
  store i1 false, i1* %and_tmp145
  br label %ifmerge149

ifmerge149:                                       ; preds = %else148, %then146
  %294 = load i1* %and_tmp145
  br i1 %294, label %then151, label %else153

then151:                                          ; preds = %ifmerge149
  %295 = load <4 x i1> addrspace(2)* @ub41
  %296 = xor <4 x i1> %295, <i1 true, i1 true, i1 true, i1 true>
  %and_tmp150152 = call i1 @llvm.gla.any.v4i1(<4 x i1> %296)
  store i1 %and_tmp150152, i1* %and_tmp150
  br label %ifmerge154

else153:                                          ; preds = %ifmerge149
  store i1 false, i1* %and_tmp150
  br label %ifmerge154

ifmerge154:                                       ; preds = %else153, %then151
  %297 = load i32* %i
  %298 = load i32 addrspace(2)* @ui
  %299 = add i32 %297, %298
  %300 = load i32* %i
  %301 = mul i32 %299, %300
  %302 = load i32 addrspace(2)* @ui
  %303 = sub i32 %301, %302
  %304 = load i32* %i
  %305 = sdiv i32 %303, %304
  %306 = load i32 addrspace(2)* @ui
  %assignment_tmp155156 = srem i32 %305, %306
  store i32 %assignment_tmp155156, i32* %assignment_tmp155
  %i157 = load i32* %assignment_tmp155
  store i32 %i157, i32* %i
  %307 = load i32* %assignment_tmp155
  %308 = load i32 addrspace(2)* @ui
  %309 = icmp eq i32 %307, %308
  br i1 %309, label %then158, label %else159

then158:                                          ; preds = %ifmerge154
  store i1 true, i1* %or_tmp
  br label %ifmerge166

else159:                                          ; preds = %ifmerge154
  %310 = load i32* %assignment_tmp155
  %311 = load i32 addrspace(2)* @ui
  %312 = icmp ne i32 %310, %311
  br i1 %312, label %then161, label %else163

then161:                                          ; preds = %else159
  %313 = load i32* %assignment_tmp155
  %314 = load i32 addrspace(2)* @ui
  %and_tmp160162 = icmp eq i32 %313, %314
  store i1 %and_tmp160162, i1* %and_tmp160
  br label %ifmerge164

else163:                                          ; preds = %else159
  store i1 false, i1* %and_tmp160
  br label %ifmerge164

ifmerge164:                                       ; preds = %else163, %then161
  %315 = load i1* %and_tmp160
  %316 = load i32* %assignment_tmp155
  %317 = icmp ne i32 %316, 2
  %or_tmp165 = xor i1 %315, %317
  store i1 %or_tmp165, i1* %or_tmp
  br label %ifmerge166

ifmerge166:                                       ; preds = %ifmerge164, %then158
  %318 = load i1* %or_tmp
  br i1 %318, label %then167, label %ifmerge169

then167:                                          ; preds = %ifmerge166
  %319 = load i32* %assignment_tmp155
  %i168 = add i32 %319, 1
  store i32 %i168, i32* %i
  br label %ifmerge169

ifmerge169:                                       ; preds = %ifmerge166, %then167
  %320 = load float addrspace(2)* @uf
  %321 = load float addrspace(2)* @uf
  %322 = fadd float %320, %321
  %323 = load float addrspace(2)* @uf
  %324 = fmul float %322, %323
  %325 = load float addrspace(2)* @uf
  %326 = fsub float %324, %325
  %327 = load float addrspace(2)* @uf
  %f170 = fdiv float %326, %327
  store float %f170, float* %f
  %328 = load float* %f
  %329 = load <4 x float>* %v
  %330 = load <4 x float>* %v
  %331 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %329, <4 x float> %330)
  %332 = call float @llvm.gla.fSqrt.f32.f32(float %331)
  %f171 = fadd float %328, %332
  store float %f171, float* %f
  %333 = load <4 x float>* %v
  %334 = load <4 x float>* %v
  %p172 = fsub <4 x float> %333, %334
  store <4 x float> %p172, <4 x float>* %p
  %335 = load float* %f
  %336 = load <4 x float>* %p
  %337 = load <4 x float>* %p
  %338 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %336, <4 x float> %337)
  %339 = call float @llvm.gla.fSqrt.f32.f32(float %338)
  %f173 = fadd float %335, %339
  store float %f173, float* %f
  %340 = load float* %f
  %341 = load <4 x float>* %v
  %342 = load <4 x float>* %v
  %343 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %341, <4 x float> %342)
  %f174 = fadd float %340, %343
  store float %f174, float* %f
  %344 = load <4 x float>* %v
  %345 = extractelement <4 x float> %344, i32 0
  %346 = insertelement <3 x float> undef, float %345, i32 0
  %347 = extractelement <4 x float> %344, i32 1
  %348 = insertelement <3 x float> %346, float %347, i32 1
  %349 = extractelement <4 x float> %344, i32 2
  %a175 = insertelement <3 x float> %348, float %349, i32 2
  store <3 x float> %a175, <3 x float>* %a
  %350 = load <4 x float>* %v
  %351 = extractelement <4 x float> %350, i32 0
  %352 = insertelement <3 x float> undef, float %351, i32 0
  %353 = extractelement <4 x float> %350, i32 1
  %354 = insertelement <3 x float> %352, float %353, i32 1
  %355 = extractelement <4 x float> %350, i32 2
  %b176 = insertelement <3 x float> %354, float %355, i32 2
  store <3 x float> %b176, <3 x float>* %b
  %356 = load float* %f
  %357 = load <3 x float>* %a
  %358 = extractelement <3 x float> %357, i32 1
  %359 = insertelement <3 x float> undef, float %358, i32 0
  %360 = extractelement <3 x float> %357, i32 2
  %361 = insertelement <3 x float> %359, float %360, i32 1
  %362 = extractelement <3 x float> %357, i32 0
  %363 = insertelement <3 x float> %361, float %362, i32 2
  %364 = load <3 x float>* %b
  %365 = extractelement <3 x float> %364, i32 2
  %366 = insertelement <3 x float> undef, float %365, i32 0
  %367 = extractelement <3 x float> %364, i32 0
  %368 = insertelement <3 x float> %366, float %367, i32 1
  %369 = extractelement <3 x float> %364, i32 1
  %370 = insertelement <3 x float> %368, float %369, i32 2
  %371 = fmul <3 x float> %363, %370
  %372 = load <3 x float>* %a
  %373 = extractelement <3 x float> %372, i32 2
  %374 = insertelement <3 x float> undef, float %373, i32 0
  %375 = extractelement <3 x float> %372, i32 0
  %376 = insertelement <3 x float> %374, float %375, i32 1
  %377 = extractelement <3 x float> %372, i32 1
  %378 = insertelement <3 x float> %376, float %377, i32 2
  %379 = load <3 x float>* %b
  %380 = extractelement <3 x float> %379, i32 1
  %381 = insertelement <3 x float> undef, float %380, i32 0
  %382 = extractelement <3 x float> %379, i32 2
  %383 = insertelement <3 x float> %381, float %382, i32 1
  %384 = extractelement <3 x float> %379, i32 0
  %385 = insertelement <3 x float> %383, float %384, i32 2
  %386 = fmul <3 x float> %378, %385
  %387 = fsub <3 x float> %371, %386
  %388 = extractelement <3 x float> %387, i32 0
  %assignment_tmp177178 = fadd float %356, %388
  store float %assignment_tmp177178, float* %assignment_tmp177
  %f179 = load float* %assignment_tmp177
  store float %f179, float* %f
  %389 = load float* %assignment_tmp177
  %390 = load float addrspace(2)* @uf
  %391 = fcmp oeq float %389, %390
  br i1 %391, label %then181, label %else182

then181:                                          ; preds = %ifmerge169
  store i1 true, i1* %or_tmp180
  br label %ifmerge189

else182:                                          ; preds = %ifmerge169
  %392 = load float* %assignment_tmp177
  %393 = load float addrspace(2)* @uf
  %394 = fcmp one float %392, %393
  br i1 %394, label %then184, label %else186

then184:                                          ; preds = %else182
  %395 = load float* %assignment_tmp177
  %and_tmp183185 = fcmp one float %395, 2.000000e+00
  store i1 %and_tmp183185, i1* %and_tmp183
  br label %ifmerge187

else186:                                          ; preds = %else182
  store i1 false, i1* %and_tmp183
  br label %ifmerge187

ifmerge187:                                       ; preds = %else186, %then184
  %or_tmp180188 = load i1* %and_tmp183
  store i1 %or_tmp180188, i1* %or_tmp180
  br label %ifmerge189

ifmerge189:                                       ; preds = %ifmerge187, %then181
  %396 = load i1* %or_tmp180
  br i1 %396, label %then190, label %ifmerge192

then190:                                          ; preds = %ifmerge189
  %397 = load float* %assignment_tmp177
  %f191 = fadd float %397, 1.000000e+00
  store float %f191, float* %f
  br label %ifmerge192

ifmerge192:                                       ; preds = %ifmerge189, %then190
  %398 = load i32* %i
  %399 = load i32 addrspace(2)* @ui
  %400 = and i32 %398, %399
  %401 = or i32 %400, 66
  %402 = load i32 addrspace(2)* @ui
  %403 = xor i32 %401, %402
  %404 = srem i32 %403, 17
  %405 = lshr i32 %404, 2
  %406 = load i32 addrspace(2)* @ui
  %407 = shl i32 %405, %406
  %assignment_tmp193194 = xor i32 %407, -1
  store i32 %assignment_tmp193194, i32* %assignment_tmp193
  %i195 = load i32* %assignment_tmp193
  store i32 %i195, i32* %i
  %408 = load i1* %and_tmp150
  %409 = xor i1 %408, true
  br i1 %409, label %then196, label %else198

then196:                                          ; preds = %ifmerge192
  %410 = load i32* %assignment_tmp193
  %411 = sitofp i32 %410 to float
  %412 = insertelement <4 x float> undef, float %411, i32 0
  %413 = insertelement <4 x float> %412, float %411, i32 1
  %414 = insertelement <4 x float> %413, float %411, i32 2
  %415 = insertelement <4 x float> %414, float %411, i32 3
  %416 = load float* %f
  %417 = insertelement <4 x float> undef, float %416, i32 0
  %418 = insertelement <4 x float> %417, float %416, i32 1
  %419 = insertelement <4 x float> %418, float %416, i32 2
  %420 = insertelement <4 x float> %419, float %416, i32 3
  %421 = fadd <4 x float> %415, %420
  %422 = load <4 x float>* %v
  %conditional_tmp197 = fadd <4 x float> %421, %422
  store <4 x float> %conditional_tmp197, <4 x float>* %conditional_tmp
  br label %ifmerge200

else198:                                          ; preds = %ifmerge192
  %conditional_tmp199 = load <4 x float>* %v
  store <4 x float> %conditional_tmp199, <4 x float>* %conditional_tmp
  br label %ifmerge200

ifmerge200:                                       ; preds = %else198, %then196
  %gl_FragColor = load <4 x float>* %conditional_tmp
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge200
  %423 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %423)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRoundZero.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fInverseSqrt.f32.f32(float) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@uv4 = external addrspace(2) constant <4 x float>
@ub = external addrspace(2) constant i1
@uf = external addrspace(2) constant float
@ui = external addrspace(2) constant i32
@ub41 = external addrspace(2) constant <4 x i1>
@ub42 = external addrspace(2) constant <4 x i1>

define fastcc void @main() {
entry:
  %0 = load <4 x float> addrspace(2)* @uv4, align 16
  %_ret_val1 = fmul <4 x float> %0, <float 0x3F91DF3300000000, float 0x3F91DF3300000000, float 0x3F91DF3300000000, float 0x3F91DF3300000000>
  %1 = fmul <4 x float> %_ret_val1, <float 0x404CA5DC20000000, float 0x404CA5DC20000000, float 0x404CA5DC20000000, float 0x404CA5DC20000000>
  %assignment_tmp2 = fadd <4 x float> %_ret_val1, %1
  %2 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %assignment_tmp2)
  %assignment_tmp34 = fadd <4 x float> %assignment_tmp2, %2
  %3 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %assignment_tmp34)
  %assignment_tmp56 = fadd <4 x float> %assignment_tmp34, %3
  %4 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %assignment_tmp56)
  %assignment_tmp78 = fadd <4 x float> %assignment_tmp56, %4
  %5 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %assignment_tmp78)
  %assignment_tmp910 = fadd <4 x float> %assignment_tmp78, %5
  %6 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %assignment_tmp910)
  %assignment_tmp1112 = fadd <4 x float> %assignment_tmp910, %6
  %7 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %assignment_tmp1112)
  %assignment_tmp1314 = fadd <4 x float> %assignment_tmp1112, %7
  %8 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %assignment_tmp1314)
  %assignment_tmp1516 = fadd <4 x float> %assignment_tmp1314, %8
  %9 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %assignment_tmp1516)
  %assignment_tmp1718 = fadd <4 x float> %assignment_tmp1516, %9
  %10 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %assignment_tmp1718)
  %assignment_tmp1920 = fadd <4 x float> %assignment_tmp1718, %10
  %11 = call <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float> %assignment_tmp1920)
  %assignment_tmp2122 = fadd <4 x float> %assignment_tmp1920, %11
  %12 = call <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float> %assignment_tmp2122)
  %assignment_tmp2324 = fadd <4 x float> %assignment_tmp2122, %12
  %13 = call <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float> %assignment_tmp2324)
  %assignment_tmp2526 = fadd <4 x float> %assignment_tmp2324, %13
  %14 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp2526, <4 x float> %assignment_tmp2526)
  %assignment_tmp2728 = fadd <4 x float> %assignment_tmp2526, %14
  %15 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %assignment_tmp2728)
  %assignment_tmp2930 = fadd <4 x float> %assignment_tmp2728, %15
  %16 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %assignment_tmp2930)
  %assignment_tmp3132 = fadd <4 x float> %assignment_tmp2930, %16
  %17 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %assignment_tmp3132)
  %assignment_tmp3334 = fadd <4 x float> %assignment_tmp3132, %17
  %18 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %assignment_tmp3334)
  %assignment_tmp3536 = fadd <4 x float> %assignment_tmp3334, %18
  %19 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %assignment_tmp3536)
  %assignment_tmp3738 = fadd <4 x float> %assignment_tmp3536, %19
  %20 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %assignment_tmp3738)
  %assignment_tmp3940 = fadd <4 x float> %assignment_tmp3738, %20
  %21 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %assignment_tmp3940)
  %assignment_tmp4142 = fadd <4 x float> %assignment_tmp3940, %21
  %22 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %assignment_tmp4142)
  %assignment_tmp4344 = fadd <4 x float> %assignment_tmp4142, %22
  %23 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %assignment_tmp4344)
  %assignment_tmp4546 = fadd <4 x float> %assignment_tmp4344, %23
  %24 = call <4 x float> @llvm.gla.fRoundZero.v4f32.v4f32(<4 x float> %assignment_tmp4546)
  %assignment_tmp4748 = fadd <4 x float> %assignment_tmp4546, %24
  %25 = call <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float> %assignment_tmp4748)
  %assignment_tmp4950 = fadd <4 x float> %assignment_tmp4748, %25
  %26 = call <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float> %assignment_tmp4950)
  %assignment_tmp5152 = fadd <4 x float> %assignment_tmp4950, %26
  %27 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %assignment_tmp5152)
  %assignment_tmp5354 = fadd <4 x float> %assignment_tmp5152, %27
  %28 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %assignment_tmp5354)
  %assignment_tmp5556 = fadd <4 x float> %assignment_tmp5354, %28
  %29 = frem <4 x float> %assignment_tmp5556, %assignment_tmp5556
  %assignment_tmp5758 = fadd <4 x float> %assignment_tmp5556, %29
  %30 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %assignment_tmp5758, <4 x i32> zeroinitializer)
  %31 = frem <4 x float> %assignment_tmp5758, %30
  %assignment_tmp5960 = fadd <4 x float> %assignment_tmp5758, %31
  %32 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp5960, <4 x float> %0)
  %assignment_tmp6162 = fadd <4 x float> %assignment_tmp5960, %32
  %33 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp6162, <4 x float> %0)
  %assignment_tmp6364 = fadd <4 x float> %assignment_tmp6162, %33
  %34 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp6364, <4 x float> %0)
  %35 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %34, <4 x float> %0)
  %assignment_tmp6566 = fadd <4 x float> %assignment_tmp6364, %35
  %mix_retval68 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp6566, <4 x float> %assignment_tmp6566, <4 x float> %assignment_tmp6566)
  %assignment_tmp6970 = fadd <4 x float> %assignment_tmp6566, %mix_retval68
  %36 = load i1 addrspace(2)* @ub, align 1
  %37 = uitofp i1 %36 to float
  %mix_retval7273 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %assignment_tmp6970, <4 x float> %assignment_tmp6970, float %37)
  %assignment_tmp7475 = fadd <4 x float> %assignment_tmp6970, %mix_retval7273
  %38 = extractelement <4 x float> %assignment_tmp7475, i32 0
  %ord = fcmp oeq float %38, %38
  %39 = uitofp i1 %ord to float
  %40 = extractelement <4 x float> %assignment_tmp7475, i32 1
  %ord219 = fcmp oeq float %40, %40
  %41 = uitofp i1 %ord219 to float
  %42 = extractelement <4 x float> %assignment_tmp7475, i32 2
  %ord220 = fcmp oeq float %42, %42
  %43 = uitofp i1 %ord220 to float
  %44 = extractelement <4 x float> %assignment_tmp7475, i32 3
  %ord221 = fcmp oeq float %44, %44
  %45 = uitofp i1 %ord221 to float
  %46 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %39, i32 0, float %41, i32 0, float %43, i32 0, float %45, i32 0)
  %assignment_tmp8081 = fadd <4 x float> %assignment_tmp7475, %46
  %47 = fsub <4 x float> %assignment_tmp8081, %assignment_tmp8081
  %48 = fdiv <4 x float> %47, %47
  %49 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float> %48, float 1.000000e+00)
  %t8283 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float> %49, float 0.000000e+00)
  %50 = fmul <4 x float> %t8283, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %51 = fsub <4 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, %50
  %52 = fmul <4 x float> %t8283, %51
  %53 = fmul <4 x float> %t8283, %52
  %assignment_tmp8485 = fadd <4 x float> %assignment_tmp8081, %53
  %54 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %assignment_tmp8485, <4 x float> %assignment_tmp8485)
  %55 = call float @llvm.gla.fInverseSqrt.f32.f32(float %54)
  %56 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %55, <4 x i32> zeroinitializer)
  %57 = fmul <4 x float> %assignment_tmp8485, %56
  %assignment_tmp8687 = fadd <4 x float> %assignment_tmp8485, %57
  %58 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %assignment_tmp8687, <4 x float> %assignment_tmp8687)
  %59 = fcmp olt float %58, 0.000000e+00
  %return_value90 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %assignment_tmp8687
  %select204 = select i1 %59, <4 x float> %assignment_tmp8687, <4 x float> %return_value90
  %assignment_tmp9192 = fadd <4 x float> %assignment_tmp8687, %select204
  %60 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %assignment_tmp9192, <4 x float> %assignment_tmp9192)
  %61 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %60, <4 x i32> zeroinitializer)
  %62 = fmul <4 x float> %61, %assignment_tmp9192
  %63 = fmul <4 x float> %62, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %64 = fsub <4 x float> %assignment_tmp9192, %63
  %assignment_tmp9394 = fadd <4 x float> %assignment_tmp9192, %64
  %65 = load float addrspace(2)* @uf, align 4
  %66 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %65, <4 x i32> zeroinitializer)
  %67 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %assignment_tmp9394, <4 x float> %assignment_tmp9394)
  %68 = fmul float %67, %67
  %69 = fsub float 1.000000e+00, %68
  %70 = fmul float %65, %69
  %71 = fmul float %65, %70
  %k97 = fsub float 1.000000e+00, %71
  %72 = fcmp olt float %k97, 0.000000e+00
  %73 = fmul <4 x float> %66, %assignment_tmp9394
  %74 = fmul float %65, %67
  %75 = call float @llvm.gla.fSqrt.f32.f32(float %k97)
  %76 = fadd float %74, %75
  %77 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %76, <4 x i32> zeroinitializer)
  %78 = fmul <4 x float> %77, %assignment_tmp9394
  %return_value96100 = fsub <4 x float> %73, %78
  %select203 = select i1 %72, <4 x float> zeroinitializer, <4 x float> %return_value96100
  %assignment_tmp102103 = fadd <4 x float> %assignment_tmp9394, %select203
  %79 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %assignment_tmp102103)
  %assignment_tmp104105 = fadd <4 x float> %assignment_tmp102103, %79
  %80 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %assignment_tmp104105)
  %assignment_tmp106107 = fadd <4 x float> %assignment_tmp104105, %80
  %81 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %assignment_tmp106107)
  %82 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %81)
  %83 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %assignment_tmp106107)
  %84 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %83)
  %85 = fadd <4 x float> %82, %84
  %v108 = fadd <4 x float> %assignment_tmp106107, %85
  %86 = load i32 addrspace(2)* @ui, align 4
  %assignment_tmp109110 = call i32 @llvm.gla.abs.i32.i32(i32 %86)
  %87 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %assignment_tmp109110, i32 %86)
  %assignment_tmp111112 = add i32 %87, %assignment_tmp109110
  %88 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %assignment_tmp111112, i32 %86)
  %assignment_tmp113114 = add i32 %assignment_tmp111112, %88
  %89 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %assignment_tmp113114, i32 %86)
  %90 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %89, i32 %86)
  %i115 = add i32 %90, %assignment_tmp113114
  %91 = call i1 @llvm.gla.any.v4i1(<4 x i1> zeroinitializer)
  %ord222 = fcmp oeq <4 x float> %v108, %v108
  %and_tmp117 = call i1 @llvm.gla.any.v4i1(<4 x i1> %ord222)
  %. = and i1 %91, %and_tmp117
  %92 = load <4 x i1> addrspace(2)* @ub41, align 4
  %93 = load <4 x i1> addrspace(2)* @ub42, align 4
  %94 = icmp eq <4 x i1> %92, %93
  %and_tmp130132 = call i1 @llvm.gla.any.v4i1(<4 x i1> %94)
  %select214 = and i1 %., %and_tmp130132
  %95 = icmp ne <4 x i1> %92, %93
  %and_tmp135137 = call i1 @llvm.gla.any.v4i1(<4 x i1> %95)
  %select207 = and i1 %select214, %and_tmp135137
  %and_tmp140142 = call i1 @llvm.gla.any.v4i1(<4 x i1> %92)
  %select218 = and i1 %select207, %and_tmp140142
  %and_tmp145147 = call i1 @llvm.gla.all.v4i1(<4 x i1> %92)
  %select = and i1 %select218, %and_tmp145147
  %96 = xor <4 x i1> %92, <i1 true, i1 true, i1 true, i1 true>
  %and_tmp150152 = call i1 @llvm.gla.any.v4i1(<4 x i1> %96)
  %select211.demorgan = and i1 %select, %and_tmp150152
  %97 = add i32 %86, %i115
  %98 = mul i32 %97, %i115
  %99 = sub i32 %98, %86
  %100 = sdiv i32 %99, %i115
  %assignment_tmp155156 = srem i32 %100, %86
  %101 = fadd float %65, %65
  %102 = fmul float %101, %65
  %103 = fsub float %102, %65
  %f170 = fdiv float %103, %65
  %104 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v108, <4 x float> %v108)
  %105 = call float @llvm.gla.fSqrt.f32.f32(float %104)
  %f171 = fadd float %f170, %105
  %p172 = fsub <4 x float> %v108, %v108
  %106 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %p172, <4 x float> %p172)
  %107 = call float @llvm.gla.fSqrt.f32.f32(float %106)
  %f173 = fadd float %f171, %107
  %f174 = fadd float %f173, %104
  %108 = extractelement <4 x float> %v108, i32 1
  %109 = extractelement <4 x float> %v108, i32 2
  %.lhs = fmul float %108, %109
  %.rhs = fmul float %109, %108
  %110 = fsub float %.lhs, %.rhs
  %assignment_tmp177178 = fadd float %f174, %110
  %111 = fcmp oeq float %assignment_tmp177178, %65
  %and_tmp183185 = fcmp one float %assignment_tmp177178, 2.000000e+00
  %not. = fcmp one float %assignment_tmp177178, %65
  %select206 = and i1 %and_tmp183185, %not.
  %select208 = or i1 %111, %select206
  %f191 = fadd float %assignment_tmp177178, 1.000000e+00
  %select205 = select i1 %select208, float %f191, float %assignment_tmp177178
  %112 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %select205, <4 x i32> zeroinitializer)
  %113 = icmp ne i32 %assignment_tmp155156, 2
  %i168 = zext i1 %113 to i32
  %i.0 = add i32 %assignment_tmp155156, %i168
  %114 = and i32 %86, %i.0
  %115 = or i32 %114, 66
  %116 = xor i32 %115, %86
  %117 = srem i32 %116, 17
  %118 = lshr i32 %117, 2
  %119 = shl i32 %118, %86
  %assignment_tmp193194 = xor i32 %119, -1
  %120 = sitofp i32 %assignment_tmp193194 to float
  %121 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %120, <4 x i32> zeroinitializer)
  %122 = fadd <4 x float> %121, %112
  %conditional_tmp197 = fadd <4 x float> %122, %v108
  %select217 = select i1 %select211.demorgan, <4 x float> %v108, <4 x float> %conditional_tmp197
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %select217)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRoundZero.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fInverseSqrt.f32.f32(float) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

***Unsupported functionality: Opcode in Bottom IR: 31

***Unsupported functionality: Opcode in Bottom IR: 31
compiling Operations.frag...
uniform ivec4 uiv4 ; 
uniform vec4 uv4 ; 
uniform bool ub ; 
uniform bvec4 ub41 , ub42 ; 
uniform float uf ; 
uniform int ui ; 
void  main (){
vec4 v ; float f ; bool b ; bvec4 bv4 ; int i ; v = radians ( uv4 ) ; v += degrees ( v ) ; v += sin ( v ) ; v += cos ( v ) ; v += tan ( v ) ; v += asin ( v ) ; v += acos ( v ) ; v += atan ( v ) ; v += sinh ( v ) ; v += cosh ( v ) ; v += tanh ( v ) ; v += asinh ( v ) ; v += acosh ( v ) ; v += atanh ( v ) ; v += pow ( v , v ) ; v += exp ( v ) ; v += log ( v ) ; v += exp2 ( v ) ; v += log2 ( v ) ; v += sqrt ( v ) ; v += inversesqrt ( v ) ; v += abs ( v ) ; v += sign ( v ) ; v += floor ( v ) ; v += trunc ( v ) ; v += round ( v ) ; v += roundEven ( v ) ; v += ceil ( v ) ; v += fract ( v ) ; v += mod ( v , v ) ; v += mod ( v , v . x ) ; v += min ( v , uv4 ) ; v += max ( v , uv4 ) ; v += clamp ( v , uv4 , uv4 ) ; v += mix ( v , v , v ) ; v += mix ( v , v , ub ) ; v += step ( v , v ) ; v += smoothstep ( v , v , v ) ; v += normalize ( v ) ; v += faceforward ( v , v , v ) ; v += reflect ( v , v ) ; v += refract ( v , v , uf ) ; v += dFdx ( v ) ; v += dFdy ( v ) ; v += fwidth ( v ) ; i = 0 ; i += abs ( ui ) ; i += min ( i , ui ) ; i += max ( i , ui ) ; i += clamp ( i , ui , ui ) ; b = any ( lessThan ( v , v ) ) ; b = b && any ( lessThanEqual ( v , v ) ) ; b = b && any ( greaterThan ( v , v ) ) ; b = b && any ( greaterThanEqual ( v , v ) ) ; b = b && any ( equal ( ub41 , ub42 ) ) ; b = b && any ( notEqual ( ub41 , ub42 ) ) ; b = b && any ( ub41 ) ; b = b && all ( ub41 ) ; b = b && any ( not ( ub41 ) ) ; i = i + ui * i - ui / i ; i = i % ui ; if ( i == ui || i != ui && i == ui ^^ i != 2 ) ++ i ; f = uf + uf * uf - uf / uf ; f += length ( v ) ; f += distance ( v , v ) ; f += dot ( v , v ) ; f += cross ( v . xyz , v . xyz ) . x ; if ( f == uf || f != uf && f != 2.000000 ) ++ f ; i &= ui ; i |= 66 ; i ^= ui ; i %= 17 ; i >>= 2 ; i <<= ui ; i = ~ i ; b = ! b ; gl_FragColor = b ? vec4 ( i ) + vec4 ( f ) + v : vec4 ( i ) + vec4 ( f ) + v ; }



(
(declare (uniform ) int ui)
(declare (uniform ) float uf)
(declare (uniform ) bvec4 ub42)
(declare (uniform ) bvec4 ub41)
(declare (uniform ) bool ub)
(declare (uniform ) vec4 uv4)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () float f)
      (declare () vec4 v)
      (declare () vec4 _ret_val)
      (assign (constant bool (1)) (xyzw) (var_ref _ret_val)  (expression vec4 * (var_ref uv4) (constant float (0.017453)) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref _ret_val) (expression vec4 * (var_ref _ret_val) (constant float (57.295780)) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sin (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 cos (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 tan (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 asin (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 acos (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 atan (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sinh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 cosh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 tanh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 asinh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 acosh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 atanh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 pow (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 exp (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 log (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 exp2 (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 log2 (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sqrt (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 rsq (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 abs (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sign (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 floor (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 trunc (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 round_even (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 round_even (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 ceil (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 fract (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 % (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 % (var_ref assignment_tmp) (swiz x (var_ref assignment_tmp) )) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 min (var_ref assignment_tmp) (var_ref uv4) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 max (var_ref assignment_tmp) (var_ref uv4) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 max (expression vec4 min (var_ref assignment_tmp) (var_ref uv4) ) (var_ref uv4) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (expression float b2f (var_ref ub) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (declare () vec4 t)
      (assign (constant bool (1)) (x) (var_ref t)  (expression float b2f (expression bool >= (swiz x (var_ref assignment_tmp) )(swiz x (var_ref assignment_tmp) )) ) ) 
      (assign (constant bool (1)) (y) (var_ref t)  (expression float b2f (expression bool >= (swiz y (var_ref assignment_tmp) )(swiz y (var_ref assignment_tmp) )) ) ) 
      (assign (constant bool (1)) (z) (var_ref t)  (expression float b2f (expression bool >= (swiz z (var_ref assignment_tmp) )(swiz z (var_ref assignment_tmp) )) ) ) 
      (assign (constant bool (1)) (w) (var_ref t)  (expression float b2f (expression bool >= (swiz w (var_ref assignment_tmp) )(swiz w (var_ref assignment_tmp) )) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (var_ref t) ) ) 
      (declare () vec4 t)
      (assign (constant bool (1)) (xyzw) (var_ref t)  (expression vec4 max (expression vec4 min (expression vec4 / (expression vec4 - (var_ref assignment_tmp) (var_ref assignment_tmp) ) (expression vec4 - (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) (constant float (1.000000)) ) (constant float (0.000000)) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 * (var_ref t) (expression vec4 * (var_ref t) (expression vec4 - (constant float (3.000000)) (expression vec4 * (constant float (2.000000)) (var_ref t) ) ) ) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 * (var_ref assignment_tmp) (expression float rsq (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 return_value)
      (if (expression bool < (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) (constant float (0.000000)) ) (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (var_ref assignment_tmp) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (expression vec4 neg (var_ref assignment_tmp) ) ) 
      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (var_ref return_value) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 - (var_ref assignment_tmp) (expression vec4 * (constant float (2.000000)) (expression vec4 * (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) (var_ref assignment_tmp) ) ) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 return_value)
      (declare () float k)
      (assign (constant bool (1)) (x) (var_ref k)  (expression float - (constant float (1.000000)) (expression float * (var_ref uf) (expression float * (var_ref uf) (expression float - (constant float (1.000000)) (expression float * (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) ) ) ) ) 
      (if (expression bool < (var_ref k) (constant float (0.000000)) ) (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (constant vec4 (0.000000 0.000000 0.000000 0.000000)) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (expression vec4 - (expression vec4 * (var_ref uf) (var_ref assignment_tmp) ) (expression vec4 * (expression float + (expression float * (var_ref uf) (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) (expression float sqrt (var_ref k) ) ) (var_ref assignment_tmp) ) ) ) 
      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (var_ref return_value) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 dFdx (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 dFdy (var_ref assignment_tmp) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 + (expression vec4 abs (expression vec4 dFdx (var_ref assignment_tmp) ) ) (expression vec4 abs (expression vec4 dFdy (var_ref assignment_tmp) ) ) ) ) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int abs (var_ref ui) ) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref assignment_tmp) (expression int min (var_ref assignment_tmp) (var_ref ui) ) ) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref assignment_tmp) (expression int max (var_ref assignment_tmp) (var_ref ui) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref assignment_tmp) (expression int max (expression int min (var_ref assignment_tmp) (var_ref ui) ) (var_ref ui) ) ) ) 
      (declare (temporary ) bool and_tmp)
      (if (expression bool any (expression bvec4 < (var_ref v) (var_ref v) ) ) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 <= (var_ref v) (var_ref v) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 > (var_ref v) (var_ref v) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 >= (var_ref v) (var_ref v) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 == (var_ref ub41) (var_ref ub42) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 != (var_ref ub41) (var_ref ub42) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (var_ref ub41) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all (var_ref ub41) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 ! (var_ref ub41) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int % (expression int / (expression int - (expression int * (expression int + (var_ref i) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref ui) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (expression bool ^^ (var_ref and_tmp) (expression bool any_nequal (var_ref assignment_tmp) (constant int (2)) ) ) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref assignment_tmp) (constant int (1)) ) ) 
      )
      ())

      (assign (constant bool (1)) (x) (var_ref f)  (expression float / (expression float - (expression float * (expression float + (var_ref uf) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (expression float sqrt (expression float dot (var_ref v) (var_ref v) ) ) ) ) 
      (declare () vec4 p)
      (assign (constant bool (1)) (xyzw) (var_ref p)  (expression vec4 - (var_ref v) (var_ref v) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (expression float sqrt (expression float dot (var_ref p) (var_ref p) ) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (expression float dot (var_ref v) (var_ref v) ) ) ) 
      (declare () vec3 a)
      (assign (constant bool (1)) (xyz) (var_ref a)  (swiz xyz (var_ref v) )) 
      (declare () vec3 b)
      (assign (constant bool (1)) (xyz) (var_ref b)  (swiz xyz (var_ref v) )) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (swiz x (expression vec3 - (expression vec3 * (swiz yzx (var_ref a) )(swiz zxy (var_ref b) )) (expression vec3 * (swiz zxy (var_ref a) )(swiz yzx (var_ref b) )) ) )) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref uf) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref uf) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any_nequal (var_ref assignment_tmp) (constant float (2.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (var_ref and_tmp) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref assignment_tmp) (constant float (1.000000)) ) ) 
      )
      ())

      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int ~ (expression int << (expression int >> (expression int % (expression int ^ (expression int | (expression int & (var_ref i) (var_ref ui) ) (constant int (66)) ) (var_ref ui) ) (constant int (17)) ) (constant int (2)) ) (var_ref ui) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 conditional_tmp)
      (if (expression bool ! (var_ref and_tmp) ) (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (expression vec4 + (expression vec4 + (swiz xxxx (expression float i2f (var_ref assignment_tmp) ) )(swiz xxxx (var_ref f) )) (var_ref v) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (var_ref v) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref conditional_tmp) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform vec4 uv4;
uniform bool ub;
uniform float uf;
uniform int ui;
uniform bvec4 ub41;
uniform bvec4 ub42;
const vec4 const22 = vec4(0.017453);
const vec4 const24 = vec4(57.2958);
const float const110_1f = 1.0;
const float const112_0f = 0.0;
const vec4 const114 = vec4(2.0);
const vec4 const116 = vec4(3.0);
const vec4 const128 = vec4(0.0);
const vec4 const153 = vec4(0.0);
const bvec4 const174 = bvec4(false);
const float const214_2f = 2.0;
const int const222_2 = 2;
const int const227_66 = 66;
const int const230_17 = 17;

void main()
{
    vec4 _ret_val1 = uv4 * const22;
    vec4 temp23 = _ret_val1 * const24;
    vec4 assignment_tmp2 = _ret_val1 + temp23;
    vec4 temp26 = sin(assignment_tmp2);
    vec4 assignment_tmp34 = assignment_tmp2 + temp26;
    vec4 temp28 = cos(assignment_tmp34);
    vec4 assignment_tmp56 = assignment_tmp34 + temp28;
    vec4 temp30 = tan(assignment_tmp56);
    vec4 assignment_tmp78 = assignment_tmp56 + temp30;
    vec4 temp32 = asin(assignment_tmp78);
    vec4 assignment_tmp910 = assignment_tmp78 + temp32;
    vec4 temp34 = acos(assignment_tmp910);
    vec4 assignment_tmp1112 = assignment_tmp910 + temp34;
    vec4 temp36 = atan(assignment_tmp1112);
    vec4 assignment_tmp1314 = assignment_tmp1112 + temp36;
    vec4 temp38 = sinh(assignment_tmp1314);
    vec4 assignment_tmp1516 = assignment_tmp1314 + temp38;
    vec4 temp40 = cosh(assignment_tmp1516);
    vec4 assignment_tmp1718 = assignment_tmp1516 + temp40;
    vec4 temp42 = tanh(assignment_tmp1718);
    vec4 assignment_tmp1920 = assignment_tmp1718 + temp42;
    vec4 temp44 = asinh(assignment_tmp1920);
    vec4 assignment_tmp2122 = assignment_tmp1920 + temp44;
    vec4 temp46 = acosh(assignment_tmp2122);
    vec4 assignment_tmp2324 = assignment_tmp2122 + temp46;
    vec4 temp48 = atanh(assignment_tmp2324);
    vec4 assignment_tmp2526 = assignment_tmp2324 + temp48;
    vec4 temp50 = pow(assignment_tmp2526, assignment_tmp2526);
    vec4 assignment_tmp2728 = assignment_tmp2526 + temp50;
    vec4 temp52 = exp(assignment_tmp2728);
    vec4 assignment_tmp2930 = assignment_tmp2728 + temp52;
    vec4 temp54 = log(assignment_tmp2930);
    vec4 assignment_tmp3132 = assignment_tmp2930 + temp54;
    vec4 temp56 = exp2(assignment_tmp3132);
    vec4 assignment_tmp3334 = assignment_tmp3132 + temp56;
    vec4 temp58 = log2(assignment_tmp3334);
    vec4 assignment_tmp3536 = assignment_tmp3334 + temp58;
    vec4 temp60 = sqrt(assignment_tmp3536);
    vec4 assignment_tmp3738 = assignment_tmp3536 + temp60;
    vec4 temp62 = inversesqrt(assignment_tmp3738);
    vec4 assignment_tmp3940 = assignment_tmp3738 + temp62;
    vec4 temp64 = abs(assignment_tmp3940);
    vec4 assignment_tmp4142 = assignment_tmp3940 + temp64;
    vec4 temp66 = sign(assignment_tmp4142);
    vec4 assignment_tmp4344 = assignment_tmp4142 + temp66;
    vec4 temp68 = floor(assignment_tmp4344);
    vec4 assignment_tmp4546 = assignment_tmp4344 + temp68;
    vec4 temp70 = trunc(assignment_tmp4546);
    vec4 assignment_tmp4748 = assignment_tmp4546 + temp70;
    vec4 temp72 = roundEven(assignment_tmp4748);
    vec4 assignment_tmp4950 = assignment_tmp4748 + temp72;
    vec4 temp74 = roundEven(assignment_tmp4950);
    vec4 assignment_tmp5152 = assignment_tmp4950 + temp74;
    vec4 temp76 = ceil(assignment_tmp5152);
    vec4 assignment_tmp5354 = assignment_tmp5152 + temp76;
    vec4 temp78 = fract(assignment_tmp5354);
    vec4 assignment_tmp5556 = assignment_tmp5354 + temp78;
    vec4 temp80 = mod(assignment_tmp5556, assignment_tmp5556);
    vec4 assignment_tmp5758 = assignment_tmp5556 + temp80;
    vec4 temp82 = assignment_tmp5758.xxxx;
    vec4 temp83 = mod(assignment_tmp5758, temp82);
    vec4 assignment_tmp5960 = assignment_tmp5758 + temp83;
    vec4 temp85 = min(assignment_tmp5960, uv4);
    vec4 assignment_tmp6162 = assignment_tmp5960 + temp85;
    vec4 temp87 = max(assignment_tmp6162, uv4);
    vec4 assignment_tmp6364 = assignment_tmp6162 + temp87;
    vec4 temp89 = min(assignment_tmp6364, uv4);
    vec4 temp90 = max(temp89, uv4);
    vec4 assignment_tmp6566 = assignment_tmp6364 + temp90;
    vec4 mix_retval68 = mix(assignment_tmp6566, assignment_tmp6566, assignment_tmp6566);
    vec4 assignment_tmp6970 = assignment_tmp6566 + mix_retval68;
    float temp94 = float(ub);
    vec4 mix_retval7273 = mix(assignment_tmp6970, assignment_tmp6970, temp94);
    vec4 assignment_tmp7475 = assignment_tmp6970 + mix_retval7273;
    bool ord = assignment_tmp7475.x == assignment_tmp7475.x;
    float temp98 = float(ord);
    bool ord219 = assignment_tmp7475.y == assignment_tmp7475.y;
    float temp100 = float(ord219);
    bool ord220 = assignment_tmp7475.z == assignment_tmp7475.z;
    float temp102 = float(ord220);
    bool ord221 = assignment_tmp7475.w == assignment_tmp7475.w;
    float temp104 = float(ord221);
    vec4 temp105 = vec4(temp98, temp100, temp102, temp104);
    vec4 assignment_tmp8081 = assignment_tmp7475 + temp105;
    vec4 temp107 = assignment_tmp8081 - assignment_tmp8081;
    vec4 temp108 = temp107 / temp107;
    vec4 temp109 = min(temp108, const110_1f);
    vec4 temp111 = max(temp109, const112_0f);
    vec4 temp113 = temp111 * const114;
    vec4 temp115 = const116 - temp113;
    vec4 temp117 = temp111 * temp115;
    vec4 temp118 = temp111 * temp117;
    vec4 assignment_tmp8485 = assignment_tmp8081 + temp118;
    float temp120 = dot(assignment_tmp8485, assignment_tmp8485);
    float temp121 = inversesqrt(temp120);
    vec4 temp122 = vec4(temp121);
    vec4 temp123 = assignment_tmp8485 * temp122;
    vec4 assignment_tmp8687 = assignment_tmp8485 + temp123;
    float temp125 = dot(assignment_tmp8687, assignment_tmp8687);
    bool temp126 = temp125 < const112_0f;
    vec4 return_value90 = const128 - assignment_tmp8687;
    vec4 select204 = temp126 ? assignment_tmp8687 : return_value90;
    vec4 assignment_tmp9192 = assignment_tmp8687 + select204;
    float temp131 = dot(assignment_tmp9192, assignment_tmp9192);
    vec4 temp132 = vec4(temp131);
    vec4 temp133 = temp132 * assignment_tmp9192;
    vec4 temp134 = temp133 * const114;
    vec4 temp135 = assignment_tmp9192 - temp134;
    vec4 assignment_tmp9394 = assignment_tmp9192 + temp135;
    vec4 temp137 = vec4(uf);
    float temp138 = dot(assignment_tmp9394, assignment_tmp9394);
    float temp139 = temp138 * temp138;
    float temp140 = const110_1f - temp139;
    float temp141 = uf * temp140;
    float temp142 = uf * temp141;
    float temp143 = const110_1f - temp142;
    bool temp144 = temp143 < const112_0f;
    vec4 temp145 = temp137 * assignment_tmp9394;
    float temp146 = uf * temp138;
    float temp147 = sqrt(temp143);
    float temp148 = temp146 + temp147;
    vec4 temp149 = vec4(temp148);
    vec4 temp150 = temp149 * assignment_tmp9394;
    vec4 return_value96100 = temp145 - temp150;
    vec4 select203 = temp144 ? const153 : return_value96100;
    vec4 assignment_tmp102103 = assignment_tmp9394 + select203;
    vec4 temp155 = dFdx(assignment_tmp102103);
    vec4 assignment_tmp104105 = assignment_tmp102103 + temp155;
    vec4 temp157 = dFdy(assignment_tmp104105);
    vec4 assignment_tmp106107 = assignment_tmp104105 + temp157;
    vec4 temp159 = dFdx(assignment_tmp106107);
    vec4 temp160 = abs(temp159);
    vec4 temp161 = dFdy(assignment_tmp106107);
    vec4 temp162 = abs(temp161);
    vec4 temp163 = temp160 + temp162;
    vec4 temp164 = assignment_tmp106107 + temp163;
    int assignment_tmp109110 = abs(ui);
    int temp166 = min(assignment_tmp109110, ui);
    int assignment_tmp111112 = temp166 + assignment_tmp109110;
    int temp168 = max(assignment_tmp111112, ui);
    int assignment_tmp113114 = assignment_tmp111112 + temp168;
    int temp170 = min(assignment_tmp113114, ui);
    int temp171 = max(temp170, ui);
    int temp172 = temp171 + assignment_tmp113114;
    bool temp173 = any(const174);
    bvec4 ord222 = equal(temp164, temp164);
    bool and_tmp117 = any(ord222);
    bool temp177 = temp173 && and_tmp117;
    bvec4 temp178 = equal(ub41, ub42);
    bool and_tmp130132 = any(temp178);
    bool select214 = temp177 && and_tmp130132;
    bvec4 temp181 = notEqual(ub41, ub42);
    bool and_tmp135137 = any(temp181);
    bool select207 = select214 && and_tmp135137;
    bool and_tmp140142 = any(ub41);
    bool select218 = select207 && and_tmp140142;
    bool and_tmp145147 = all(ub41);
    bool select = select218 && and_tmp145147;
    bvec4 temp188 = not(ub41);
    bool and_tmp150152 = any(temp188);
    bool select211_demorgan = select && and_tmp150152;
    int temp191 = ui + temp172;
    int temp192 = temp191 * temp172;
    int temp193 = temp192 - ui;
    int temp194 = temp193 / temp172;
    int assignment_tmp155156 = temp194 % ui;
    float temp196 = uf + uf;
    float temp197 = temp196 * uf;
    float temp198 = temp197 - uf;
    float temp199 = temp198 / uf;
    float temp200 = dot(temp164, temp164);
    float temp201 = sqrt(temp200);
    float temp202 = temp199 + temp201;
    vec4 temp203 = temp164 - temp164;
    float temp204 = dot(temp203, temp203);
    float temp205 = sqrt(temp204);
    float temp206 = temp202 + temp205;
    float temp207 = temp206 + temp200;
    float _lhs = temp164.y * temp164.z;
    float _rhs = temp164.z * temp164.y;
    float temp210 = _lhs - _rhs;
    float assignment_tmp177178 = temp207 + temp210;
    bool temp212 = assignment_tmp177178 == uf;
    bool and_tmp183185 = assignment_tmp177178 != const214_2f;
    bool not_ = assignment_tmp177178 != uf;
    bool select206 = and_tmp183185 && not_;
    bool select208 = temp212 || select206;
    float temp218 = assignment_tmp177178 + const110_1f;
    float select205 = select208 ? temp218 : assignment_tmp177178;
    vec4 temp220 = vec4(select205);
    bool temp221 = assignment_tmp155156 != const222_2;
    int i_0 = assignment_tmp155156 + int temp224;
    int temp225 = ui & i_0;
    int temp226 = temp225 | const227_66;
    int temp228 = ~(temp226);
    int temp229 = temp228 % const230_17;
    int temp231 = temp229 >> const222_2;
    int temp232 = temp231 << ui;
    int assignment_tmp193194 = ~(temp232);
    float temp234 = float(assignment_tmp193194);
    vec4 temp235 = vec4(temp234);
    vec4 temp236 = temp235 + temp220;
    vec4 conditional_tmp197 = temp236 + temp164;
    vec4 select217 = select211_demorgan ? temp164 : conditional_tmp197;
    gl_FragColor = select217;
    
}
