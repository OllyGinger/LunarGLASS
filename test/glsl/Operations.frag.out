
Top IR:
; ModuleID = 'Top'

@uv4 = external addrspace(2) constant <4 x float>
@ub = external addrspace(2) constant i1
@uf = external addrspace(2) constant float
@ui = external addrspace(2) constant i32
@ub41 = external addrspace(2) constant <4 x i1>
@ub42 = external addrspace(2) constant <4 x i1>
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %conditional_tmp = alloca <4 x float>
  %assignment_tmp192 = alloca i32
  %and_tmp182 = alloca i1
  %or_tmp179 = alloca i1
  %assignment_tmp176 = alloca float
  %b = alloca <3 x float>
  %a = alloca <3 x float>
  %p = alloca <4 x float>
  %and_tmp159 = alloca i1
  %or_tmp = alloca i1
  %assignment_tmp154 = alloca i32
  %and_tmp149 = alloca i1
  %and_tmp144 = alloca i1
  %and_tmp139 = alloca i1
  %and_tmp134 = alloca i1
  %and_tmp129 = alloca i1
  %and_tmp124 = alloca i1
  %and_tmp119 = alloca i1
  %and_tmp = alloca i1
  %assignment_tmp112 = alloca i32
  %assignment_tmp110 = alloca i32
  %assignment_tmp108 = alloca i32
  %assignment_tmp105 = alloca <4 x float>
  %assignment_tmp103 = alloca <4 x float>
  %assignment_tmp101 = alloca <4 x float>
  %k = alloca float
  %return_value95 = alloca <4 x float>
  %assignment_tmp92 = alloca <4 x float>
  %assignment_tmp90 = alloca <4 x float>
  %return_value = alloca <4 x float>
  %assignment_tmp85 = alloca <4 x float>
  %assignment_tmp83 = alloca <4 x float>
  %t81 = alloca <4 x float>
  %assignment_tmp79 = alloca <4 x float>
  %t = alloca <4 x float>
  %assignment_tmp72 = alloca <4 x float>
  %mix_retval70 = alloca <4 x float>
  %assignment_tmp67 = alloca <4 x float>
  %mix_retval = alloca <4 x float>
  %assignment_tmp63 = alloca <4 x float>
  %assignment_tmp61 = alloca <4 x float>
  %assignment_tmp59 = alloca <4 x float>
  %assignment_tmp57 = alloca <4 x float>
  %assignment_tmp55 = alloca <4 x float>
  %assignment_tmp53 = alloca <4 x float>
  %assignment_tmp51 = alloca <4 x float>
  %assignment_tmp49 = alloca <4 x float>
  %assignment_tmp47 = alloca <4 x float>
  %assignment_tmp45 = alloca <4 x float>
  %assignment_tmp43 = alloca <4 x float>
  %assignment_tmp41 = alloca <4 x float>
  %assignment_tmp39 = alloca <4 x float>
  %assignment_tmp37 = alloca <4 x float>
  %assignment_tmp35 = alloca <4 x float>
  %assignment_tmp33 = alloca <4 x float>
  %assignment_tmp31 = alloca <4 x float>
  %assignment_tmp29 = alloca <4 x float>
  %assignment_tmp27 = alloca <4 x float>
  %assignment_tmp25 = alloca <4 x float>
  %assignment_tmp23 = alloca <4 x float>
  %assignment_tmp21 = alloca <4 x float>
  %assignment_tmp19 = alloca <4 x float>
  %assignment_tmp17 = alloca <4 x float>
  %assignment_tmp15 = alloca <4 x float>
  %assignment_tmp13 = alloca <4 x float>
  %assignment_tmp11 = alloca <4 x float>
  %assignment_tmp9 = alloca <4 x float>
  %assignment_tmp7 = alloca <4 x float>
  %assignment_tmp5 = alloca <4 x float>
  %assignment_tmp3 = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %_ret_val = alloca <4 x float>
  %v = alloca <4 x float>
  %f = alloca float
  %i = alloca i32
  %0 = load <4 x float> addrspace(2)* @uv4
  %1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float 0x3F91DF3300000000, <4 x i32> zeroinitializer)
  %_ret_val1 = fmul <4 x float> %0, %1
  store <4 x float> %_ret_val1, <4 x float>* %_ret_val
  %2 = load <4 x float>* %_ret_val
  %3 = load <4 x float>* %_ret_val
  %4 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float 0x404CA5DC20000000, <4 x i32> zeroinitializer)
  %5 = fmul <4 x float> %3, %4
  %assignment_tmp2 = fadd <4 x float> %2, %5
  store <4 x float> %assignment_tmp2, <4 x float>* %assignment_tmp
  %6 = load <4 x float>* %assignment_tmp
  %7 = load <4 x float>* %assignment_tmp
  %8 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %7)
  %assignment_tmp34 = fadd <4 x float> %6, %8
  store <4 x float> %assignment_tmp34, <4 x float>* %assignment_tmp3
  %9 = load <4 x float>* %assignment_tmp3
  %10 = load <4 x float>* %assignment_tmp3
  %11 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %10)
  %assignment_tmp56 = fadd <4 x float> %9, %11
  store <4 x float> %assignment_tmp56, <4 x float>* %assignment_tmp5
  %12 = load <4 x float>* %assignment_tmp5
  %13 = load <4 x float>* %assignment_tmp5
  %14 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %13)
  %assignment_tmp78 = fadd <4 x float> %12, %14
  store <4 x float> %assignment_tmp78, <4 x float>* %assignment_tmp7
  %15 = load <4 x float>* %assignment_tmp7
  %16 = load <4 x float>* %assignment_tmp7
  %17 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %16)
  %assignment_tmp910 = fadd <4 x float> %15, %17
  store <4 x float> %assignment_tmp910, <4 x float>* %assignment_tmp9
  %18 = load <4 x float>* %assignment_tmp9
  %19 = load <4 x float>* %assignment_tmp9
  %20 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %19)
  %assignment_tmp1112 = fadd <4 x float> %18, %20
  store <4 x float> %assignment_tmp1112, <4 x float>* %assignment_tmp11
  %21 = load <4 x float>* %assignment_tmp11
  %22 = load <4 x float>* %assignment_tmp11
  %23 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %22)
  %assignment_tmp1314 = fadd <4 x float> %21, %23
  store <4 x float> %assignment_tmp1314, <4 x float>* %assignment_tmp13
  %24 = load <4 x float>* %assignment_tmp13
  %25 = load <4 x float>* %assignment_tmp13
  %26 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %25)
  %assignment_tmp1516 = fadd <4 x float> %24, %26
  store <4 x float> %assignment_tmp1516, <4 x float>* %assignment_tmp15
  %27 = load <4 x float>* %assignment_tmp15
  %28 = load <4 x float>* %assignment_tmp15
  %29 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %28)
  %assignment_tmp1718 = fadd <4 x float> %27, %29
  store <4 x float> %assignment_tmp1718, <4 x float>* %assignment_tmp17
  %30 = load <4 x float>* %assignment_tmp17
  %31 = load <4 x float>* %assignment_tmp17
  %32 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %31)
  %assignment_tmp1920 = fadd <4 x float> %30, %32
  store <4 x float> %assignment_tmp1920, <4 x float>* %assignment_tmp19
  %33 = load <4 x float>* %assignment_tmp19
  %34 = load <4 x float>* %assignment_tmp19
  %35 = call <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float> %34)
  %assignment_tmp2122 = fadd <4 x float> %33, %35
  store <4 x float> %assignment_tmp2122, <4 x float>* %assignment_tmp21
  %36 = load <4 x float>* %assignment_tmp21
  %37 = load <4 x float>* %assignment_tmp21
  %38 = call <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float> %37)
  %assignment_tmp2324 = fadd <4 x float> %36, %38
  store <4 x float> %assignment_tmp2324, <4 x float>* %assignment_tmp23
  %39 = load <4 x float>* %assignment_tmp23
  %40 = load <4 x float>* %assignment_tmp23
  %41 = call <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float> %40)
  %assignment_tmp2526 = fadd <4 x float> %39, %41
  store <4 x float> %assignment_tmp2526, <4 x float>* %assignment_tmp25
  %42 = load <4 x float>* %assignment_tmp25
  %43 = load <4 x float>* %assignment_tmp25
  %44 = load <4 x float>* %assignment_tmp25
  %45 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %43, <4 x float> %44)
  %assignment_tmp2728 = fadd <4 x float> %42, %45
  store <4 x float> %assignment_tmp2728, <4 x float>* %assignment_tmp27
  %46 = load <4 x float>* %assignment_tmp27
  %47 = load <4 x float>* %assignment_tmp27
  %48 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %47)
  %assignment_tmp2930 = fadd <4 x float> %46, %48
  store <4 x float> %assignment_tmp2930, <4 x float>* %assignment_tmp29
  %49 = load <4 x float>* %assignment_tmp29
  %50 = load <4 x float>* %assignment_tmp29
  %51 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %50)
  %assignment_tmp3132 = fadd <4 x float> %49, %51
  store <4 x float> %assignment_tmp3132, <4 x float>* %assignment_tmp31
  %52 = load <4 x float>* %assignment_tmp31
  %53 = load <4 x float>* %assignment_tmp31
  %54 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %53)
  %assignment_tmp3334 = fadd <4 x float> %52, %54
  store <4 x float> %assignment_tmp3334, <4 x float>* %assignment_tmp33
  %55 = load <4 x float>* %assignment_tmp33
  %56 = load <4 x float>* %assignment_tmp33
  %57 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %56)
  %assignment_tmp3536 = fadd <4 x float> %55, %57
  store <4 x float> %assignment_tmp3536, <4 x float>* %assignment_tmp35
  %58 = load <4 x float>* %assignment_tmp35
  %59 = load <4 x float>* %assignment_tmp35
  %60 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %59)
  %assignment_tmp3738 = fadd <4 x float> %58, %60
  store <4 x float> %assignment_tmp3738, <4 x float>* %assignment_tmp37
  %61 = load <4 x float>* %assignment_tmp37
  %62 = load <4 x float>* %assignment_tmp37
  %63 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %62)
  %assignment_tmp3940 = fadd <4 x float> %61, %63
  store <4 x float> %assignment_tmp3940, <4 x float>* %assignment_tmp39
  %64 = load <4 x float>* %assignment_tmp39
  %65 = load <4 x float>* %assignment_tmp39
  %66 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %65)
  %assignment_tmp4142 = fadd <4 x float> %64, %66
  store <4 x float> %assignment_tmp4142, <4 x float>* %assignment_tmp41
  %67 = load <4 x float>* %assignment_tmp41
  %68 = load <4 x float>* %assignment_tmp41
  %69 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %68)
  %assignment_tmp4344 = fadd <4 x float> %67, %69
  store <4 x float> %assignment_tmp4344, <4 x float>* %assignment_tmp43
  %70 = load <4 x float>* %assignment_tmp43
  %71 = load <4 x float>* %assignment_tmp43
  %72 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %71)
  %assignment_tmp4546 = fadd <4 x float> %70, %72
  store <4 x float> %assignment_tmp4546, <4 x float>* %assignment_tmp45
  %73 = load <4 x float>* %assignment_tmp45
  %74 = load <4 x float>* %assignment_tmp45
  %75 = call <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float> %74)
  %assignment_tmp4748 = fadd <4 x float> %73, %75
  store <4 x float> %assignment_tmp4748, <4 x float>* %assignment_tmp47
  %76 = load <4 x float>* %assignment_tmp47
  %77 = load <4 x float>* %assignment_tmp47
  %78 = call <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float> %77)
  %assignment_tmp4950 = fadd <4 x float> %76, %78
  store <4 x float> %assignment_tmp4950, <4 x float>* %assignment_tmp49
  %79 = load <4 x float>* %assignment_tmp49
  %80 = load <4 x float>* %assignment_tmp49
  %81 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %80)
  %assignment_tmp5152 = fadd <4 x float> %79, %81
  store <4 x float> %assignment_tmp5152, <4 x float>* %assignment_tmp51
  %82 = load <4 x float>* %assignment_tmp51
  %83 = load <4 x float>* %assignment_tmp51
  %84 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %83)
  %assignment_tmp5354 = fadd <4 x float> %82, %84
  store <4 x float> %assignment_tmp5354, <4 x float>* %assignment_tmp53
  %85 = load <4 x float>* %assignment_tmp53
  %86 = load <4 x float>* %assignment_tmp53
  %87 = load <4 x float>* %assignment_tmp53
  %88 = frem <4 x float> %86, %87
  %assignment_tmp5556 = fadd <4 x float> %85, %88
  store <4 x float> %assignment_tmp5556, <4 x float>* %assignment_tmp55
  %89 = load <4 x float>* %assignment_tmp55
  %90 = load <4 x float>* %assignment_tmp55
  %91 = load <4 x float>* %assignment_tmp55
  %92 = extractelement <4 x float> %91, i32 0
  %93 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %92, <4 x i32> zeroinitializer)
  %94 = frem <4 x float> %90, %93
  %assignment_tmp5758 = fadd <4 x float> %89, %94
  store <4 x float> %assignment_tmp5758, <4 x float>* %assignment_tmp57
  %95 = load <4 x float>* %assignment_tmp57
  %96 = load <4 x float>* %assignment_tmp57
  %97 = load <4 x float> addrspace(2)* @uv4
  %98 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %96, <4 x float> %97)
  %assignment_tmp5960 = fadd <4 x float> %95, %98
  store <4 x float> %assignment_tmp5960, <4 x float>* %assignment_tmp59
  %99 = load <4 x float>* %assignment_tmp59
  %100 = load <4 x float>* %assignment_tmp59
  %101 = load <4 x float> addrspace(2)* @uv4
  %102 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %100, <4 x float> %101)
  %assignment_tmp6162 = fadd <4 x float> %99, %102
  store <4 x float> %assignment_tmp6162, <4 x float>* %assignment_tmp61
  %103 = load <4 x float>* %assignment_tmp61
  %104 = load <4 x float>* %assignment_tmp61
  %105 = load <4 x float> addrspace(2)* @uv4
  %106 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %104, <4 x float> %105)
  %107 = load <4 x float> addrspace(2)* @uv4
  %108 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %106, <4 x float> %107)
  %assignment_tmp6364 = fadd <4 x float> %103, %108
  store <4 x float> %assignment_tmp6364, <4 x float>* %assignment_tmp63
  %v65 = load <4 x float>* %assignment_tmp63
  store <4 x float> %v65, <4 x float>* %v
  %109 = load <4 x float>* %assignment_tmp63
  %110 = load <4 x float>* %assignment_tmp63
  %111 = load <4 x float>* %assignment_tmp63
  %mix_retval66 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %109, <4 x float> %110, <4 x float> %111)
  store <4 x float> %mix_retval66, <4 x float>* %mix_retval
  %112 = load <4 x float>* %v
  %113 = load <4 x float>* %mix_retval
  %assignment_tmp6768 = fadd <4 x float> %112, %113
  store <4 x float> %assignment_tmp6768, <4 x float>* %assignment_tmp67
  %v69 = load <4 x float>* %assignment_tmp67
  store <4 x float> %v69, <4 x float>* %v
  %114 = load <4 x float>* %assignment_tmp67
  %115 = load <4 x float>* %assignment_tmp67
  %116 = load i1 addrspace(2)* @ub
  %117 = uitofp i1 %116 to float
  %mix_retval7071 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %114, <4 x float> %115, float %117)
  store <4 x float> %mix_retval7071, <4 x float>* %mix_retval70
  %118 = load <4 x float>* %v
  %119 = load <4 x float>* %mix_retval70
  %assignment_tmp7273 = fadd <4 x float> %118, %119
  store <4 x float> %assignment_tmp7273, <4 x float>* %assignment_tmp72
  %120 = load <4 x float>* %assignment_tmp72
  %121 = extractelement <4 x float> %120, i32 0
  %122 = load <4 x float>* %assignment_tmp72
  %123 = extractelement <4 x float> %122, i32 0
  %124 = fcmp oge float %121, %123
  %125 = uitofp i1 %124 to float
  %126 = load <4 x float>* %t
  %t74 = insertelement <4 x float> %126, float %125, i32 0
  store <4 x float> %t74, <4 x float>* %t
  %127 = load <4 x float>* %assignment_tmp72
  %128 = extractelement <4 x float> %127, i32 1
  %129 = load <4 x float>* %assignment_tmp72
  %130 = extractelement <4 x float> %129, i32 1
  %131 = fcmp oge float %128, %130
  %132 = uitofp i1 %131 to float
  %133 = load <4 x float>* %t
  %t75 = insertelement <4 x float> %133, float %132, i32 1
  store <4 x float> %t75, <4 x float>* %t
  %134 = load <4 x float>* %assignment_tmp72
  %135 = extractelement <4 x float> %134, i32 2
  %136 = load <4 x float>* %assignment_tmp72
  %137 = extractelement <4 x float> %136, i32 2
  %138 = fcmp oge float %135, %137
  %139 = uitofp i1 %138 to float
  %140 = load <4 x float>* %t
  %t76 = insertelement <4 x float> %140, float %139, i32 2
  store <4 x float> %t76, <4 x float>* %t
  %141 = load <4 x float>* %assignment_tmp72
  %142 = extractelement <4 x float> %141, i32 3
  %143 = load <4 x float>* %assignment_tmp72
  %144 = extractelement <4 x float> %143, i32 3
  %145 = fcmp oge float %142, %144
  %146 = uitofp i1 %145 to float
  %147 = load <4 x float>* %t
  %t77 = insertelement <4 x float> %147, float %146, i32 3
  store <4 x float> %t77, <4 x float>* %t
  %148 = load <4 x float>* %assignment_tmp72
  %149 = load <4 x float>* %t
  %assignment_tmp7980 = fadd <4 x float> %148, %149
  store <4 x float> %assignment_tmp7980, <4 x float>* %assignment_tmp79
  %150 = load <4 x float>* %assignment_tmp79
  %151 = load <4 x float>* %assignment_tmp79
  %152 = fsub <4 x float> %150, %151
  %153 = load <4 x float>* %assignment_tmp79
  %154 = load <4 x float>* %assignment_tmp79
  %155 = fsub <4 x float> %153, %154
  %156 = fdiv <4 x float> %152, %155
  %157 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float> %156, float 1.000000e+00)
  %t8182 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float> %157, float 0.000000e+00)
  store <4 x float> %t8182, <4 x float>* %t81
  %158 = load <4 x float>* %assignment_tmp79
  %159 = load <4 x float>* %t81
  %160 = load <4 x float>* %t81
  %161 = load <4 x float>* %t81
  %162 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float 2.000000e+00, <4 x i32> zeroinitializer)
  %163 = fmul <4 x float> %162, %161
  %164 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float 3.000000e+00, <4 x i32> zeroinitializer)
  %165 = fsub <4 x float> %164, %163
  %166 = fmul <4 x float> %160, %165
  %167 = fmul <4 x float> %159, %166
  %assignment_tmp8384 = fadd <4 x float> %158, %167
  store <4 x float> %assignment_tmp8384, <4 x float>* %assignment_tmp83
  %168 = load <4 x float>* %assignment_tmp83
  %169 = load <4 x float>* %assignment_tmp83
  %170 = load <4 x float>* %assignment_tmp83
  %171 = load <4 x float>* %assignment_tmp83
  %172 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %170, <4 x float> %171)
  %173 = call float @llvm.gla.fInverseSqrt.f32.f32(float %172)
  %174 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %173, <4 x i32> zeroinitializer)
  %175 = fmul <4 x float> %169, %174
  %assignment_tmp8586 = fadd <4 x float> %168, %175
  store <4 x float> %assignment_tmp8586, <4 x float>* %assignment_tmp85
  %v87 = load <4 x float>* %assignment_tmp85
  store <4 x float> %v87, <4 x float>* %v
  %176 = load <4 x float>* %assignment_tmp85
  %177 = load <4 x float>* %assignment_tmp85
  %178 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %176, <4 x float> %177)
  %179 = fcmp olt float %178, 0.000000e+00
  br i1 %179, label %then, label %else

then:                                             ; preds = %entry
  %return_value88 = load <4 x float>* %assignment_tmp85
  store <4 x float> %return_value88, <4 x float>* %return_value
  br label %ifmerge

else:                                             ; preds = %entry
  %180 = load <4 x float>* %assignment_tmp85
  %return_value89 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %180
  store <4 x float> %return_value89, <4 x float>* %return_value
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %181 = load <4 x float>* %assignment_tmp85
  %182 = load <4 x float>* %return_value
  %assignment_tmp9091 = fadd <4 x float> %181, %182
  store <4 x float> %assignment_tmp9091, <4 x float>* %assignment_tmp90
  %183 = load <4 x float>* %assignment_tmp90
  %184 = load <4 x float>* %assignment_tmp90
  %185 = load <4 x float>* %assignment_tmp90
  %186 = load <4 x float>* %assignment_tmp90
  %187 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %185, <4 x float> %186)
  %188 = load <4 x float>* %assignment_tmp90
  %189 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %187, <4 x i32> zeroinitializer)
  %190 = fmul <4 x float> %189, %188
  %191 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float 2.000000e+00, <4 x i32> zeroinitializer)
  %192 = fmul <4 x float> %191, %190
  %193 = fsub <4 x float> %184, %192
  %assignment_tmp9293 = fadd <4 x float> %183, %193
  store <4 x float> %assignment_tmp9293, <4 x float>* %assignment_tmp92
  %v94 = load <4 x float>* %assignment_tmp92
  store <4 x float> %v94, <4 x float>* %v
  %194 = load float addrspace(2)* @uf
  %195 = load float addrspace(2)* @uf
  %196 = load <4 x float>* %assignment_tmp92
  %197 = load <4 x float>* %assignment_tmp92
  %198 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %196, <4 x float> %197)
  %199 = load <4 x float>* %assignment_tmp92
  %200 = load <4 x float>* %assignment_tmp92
  %201 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %199, <4 x float> %200)
  %202 = fmul float %198, %201
  %203 = fsub float 1.000000e+00, %202
  %204 = fmul float %195, %203
  %205 = fmul float %194, %204
  %k96 = fsub float 1.000000e+00, %205
  store float %k96, float* %k
  %206 = load float* %k
  %207 = fcmp olt float %206, 0.000000e+00
  br i1 %207, label %then97, label %else98

then97:                                           ; preds = %ifmerge
  store <4 x float> zeroinitializer, <4 x float>* %return_value95
  br label %ifmerge100

else98:                                           ; preds = %ifmerge
  %208 = load float addrspace(2)* @uf
  %209 = load <4 x float>* %assignment_tmp92
  %210 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %208, <4 x i32> zeroinitializer)
  %211 = fmul <4 x float> %210, %209
  %212 = load float addrspace(2)* @uf
  %213 = load <4 x float>* %assignment_tmp92
  %214 = load <4 x float>* %assignment_tmp92
  %215 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %213, <4 x float> %214)
  %216 = fmul float %212, %215
  %217 = load float* %k
  %218 = call float @llvm.gla.fSqrt.f32.f32(float %217)
  %219 = fadd float %216, %218
  %220 = load <4 x float>* %assignment_tmp92
  %221 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %219, <4 x i32> zeroinitializer)
  %222 = fmul <4 x float> %221, %220
  %return_value9599 = fsub <4 x float> %211, %222
  store <4 x float> %return_value9599, <4 x float>* %return_value95
  br label %ifmerge100

ifmerge100:                                       ; preds = %else98, %then97
  %223 = load <4 x float>* %assignment_tmp92
  %224 = load <4 x float>* %return_value95
  %assignment_tmp101102 = fadd <4 x float> %223, %224
  store <4 x float> %assignment_tmp101102, <4 x float>* %assignment_tmp101
  %225 = load <4 x float>* %assignment_tmp101
  %226 = load <4 x float>* %assignment_tmp101
  %227 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %226)
  %assignment_tmp103104 = fadd <4 x float> %225, %227
  store <4 x float> %assignment_tmp103104, <4 x float>* %assignment_tmp103
  %228 = load <4 x float>* %assignment_tmp103
  %229 = load <4 x float>* %assignment_tmp103
  %230 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %229)
  %assignment_tmp105106 = fadd <4 x float> %228, %230
  store <4 x float> %assignment_tmp105106, <4 x float>* %assignment_tmp105
  %231 = load <4 x float>* %assignment_tmp105
  %232 = load <4 x float>* %assignment_tmp105
  %233 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %232)
  %234 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %233)
  %235 = load <4 x float>* %assignment_tmp105
  %236 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %235)
  %237 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %236)
  %238 = fadd <4 x float> %234, %237
  %v107 = fadd <4 x float> %231, %238
  store <4 x float> %v107, <4 x float>* %v
  %239 = load i32 addrspace(2)* @ui
  %assignment_tmp108109 = call i32 @llvm.gla.abs.i32.i32(i32 %239)
  store i32 %assignment_tmp108109, i32* %assignment_tmp108
  %240 = load i32* %assignment_tmp108
  %241 = load i32* %assignment_tmp108
  %242 = load i32 addrspace(2)* @ui
  %243 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %241, i32 %242)
  %assignment_tmp110111 = add i32 %240, %243
  store i32 %assignment_tmp110111, i32* %assignment_tmp110
  %244 = load i32* %assignment_tmp110
  %245 = load i32* %assignment_tmp110
  %246 = load i32 addrspace(2)* @ui
  %247 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %245, i32 %246)
  %assignment_tmp112113 = add i32 %244, %247
  store i32 %assignment_tmp112113, i32* %assignment_tmp112
  %248 = load i32* %assignment_tmp112
  %249 = load i32* %assignment_tmp112
  %250 = load i32 addrspace(2)* @ui
  %251 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %249, i32 %250)
  %252 = load i32 addrspace(2)* @ui
  %253 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %251, i32 %252)
  %i114 = add i32 %248, %253
  store i32 %i114, i32* %i
  %254 = load <4 x float>* %v
  %255 = load <4 x float>* %v
  %256 = fcmp olt <4 x float> %254, %255
  %257 = call i1 @llvm.gla.any.v4i1(<4 x i1> %256)
  br i1 %257, label %then115, label %else117

then115:                                          ; preds = %ifmerge100
  %258 = load <4 x float>* %v
  %259 = load <4 x float>* %v
  %260 = fcmp ole <4 x float> %258, %259
  %and_tmp116 = call i1 @llvm.gla.any.v4i1(<4 x i1> %260)
  store i1 %and_tmp116, i1* %and_tmp
  br label %ifmerge118

else117:                                          ; preds = %ifmerge100
  store i1 false, i1* %and_tmp
  br label %ifmerge118

ifmerge118:                                       ; preds = %else117, %then115
  %261 = load i1* %and_tmp
  br i1 %261, label %then120, label %else122

then120:                                          ; preds = %ifmerge118
  %262 = load <4 x float>* %v
  %263 = load <4 x float>* %v
  %264 = fcmp ogt <4 x float> %262, %263
  %and_tmp119121 = call i1 @llvm.gla.any.v4i1(<4 x i1> %264)
  store i1 %and_tmp119121, i1* %and_tmp119
  br label %ifmerge123

else122:                                          ; preds = %ifmerge118
  store i1 false, i1* %and_tmp119
  br label %ifmerge123

ifmerge123:                                       ; preds = %else122, %then120
  %265 = load i1* %and_tmp119
  br i1 %265, label %then125, label %else127

then125:                                          ; preds = %ifmerge123
  %266 = load <4 x float>* %v
  %267 = load <4 x float>* %v
  %268 = fcmp oge <4 x float> %266, %267
  %and_tmp124126 = call i1 @llvm.gla.any.v4i1(<4 x i1> %268)
  store i1 %and_tmp124126, i1* %and_tmp124
  br label %ifmerge128

else127:                                          ; preds = %ifmerge123
  store i1 false, i1* %and_tmp124
  br label %ifmerge128

ifmerge128:                                       ; preds = %else127, %then125
  %269 = load i1* %and_tmp124
  br i1 %269, label %then130, label %else132

then130:                                          ; preds = %ifmerge128
  %270 = load <4 x i1> addrspace(2)* @ub41
  %271 = load <4 x i1> addrspace(2)* @ub42
  %272 = icmp eq <4 x i1> %270, %271
  %and_tmp129131 = call i1 @llvm.gla.any.v4i1(<4 x i1> %272)
  store i1 %and_tmp129131, i1* %and_tmp129
  br label %ifmerge133

else132:                                          ; preds = %ifmerge128
  store i1 false, i1* %and_tmp129
  br label %ifmerge133

ifmerge133:                                       ; preds = %else132, %then130
  %273 = load i1* %and_tmp129
  br i1 %273, label %then135, label %else137

then135:                                          ; preds = %ifmerge133
  %274 = load <4 x i1> addrspace(2)* @ub41
  %275 = load <4 x i1> addrspace(2)* @ub42
  %276 = icmp ne <4 x i1> %274, %275
  %and_tmp134136 = call i1 @llvm.gla.any.v4i1(<4 x i1> %276)
  store i1 %and_tmp134136, i1* %and_tmp134
  br label %ifmerge138

else137:                                          ; preds = %ifmerge133
  store i1 false, i1* %and_tmp134
  br label %ifmerge138

ifmerge138:                                       ; preds = %else137, %then135
  %277 = load i1* %and_tmp134
  br i1 %277, label %then140, label %else142

then140:                                          ; preds = %ifmerge138
  %278 = load <4 x i1> addrspace(2)* @ub41
  %and_tmp139141 = call i1 @llvm.gla.any.v4i1(<4 x i1> %278)
  store i1 %and_tmp139141, i1* %and_tmp139
  br label %ifmerge143

else142:                                          ; preds = %ifmerge138
  store i1 false, i1* %and_tmp139
  br label %ifmerge143

ifmerge143:                                       ; preds = %else142, %then140
  %279 = load i1* %and_tmp139
  br i1 %279, label %then145, label %else147

then145:                                          ; preds = %ifmerge143
  %280 = load <4 x i1> addrspace(2)* @ub41
  %and_tmp144146 = call i1 @llvm.gla.all.v4i1(<4 x i1> %280)
  store i1 %and_tmp144146, i1* %and_tmp144
  br label %ifmerge148

else147:                                          ; preds = %ifmerge143
  store i1 false, i1* %and_tmp144
  br label %ifmerge148

ifmerge148:                                       ; preds = %else147, %then145
  %281 = load i1* %and_tmp144
  br i1 %281, label %then150, label %else152

then150:                                          ; preds = %ifmerge148
  %282 = load <4 x i1> addrspace(2)* @ub41
  %283 = xor <4 x i1> %282, <i1 true, i1 true, i1 true, i1 true>
  %and_tmp149151 = call i1 @llvm.gla.any.v4i1(<4 x i1> %283)
  store i1 %and_tmp149151, i1* %and_tmp149
  br label %ifmerge153

else152:                                          ; preds = %ifmerge148
  store i1 false, i1* %and_tmp149
  br label %ifmerge153

ifmerge153:                                       ; preds = %else152, %then150
  %284 = load i32* %i
  %285 = load i32 addrspace(2)* @ui
  %286 = add i32 %284, %285
  %287 = load i32* %i
  %288 = mul i32 %286, %287
  %289 = load i32 addrspace(2)* @ui
  %290 = sub i32 %288, %289
  %291 = load i32* %i
  %292 = sdiv i32 %290, %291
  %293 = load i32 addrspace(2)* @ui
  %assignment_tmp154155 = srem i32 %292, %293
  store i32 %assignment_tmp154155, i32* %assignment_tmp154
  %i156 = load i32* %assignment_tmp154
  store i32 %i156, i32* %i
  %294 = load i32* %assignment_tmp154
  %295 = load i32 addrspace(2)* @ui
  %296 = icmp eq i32 %294, %295
  br i1 %296, label %then157, label %else158

then157:                                          ; preds = %ifmerge153
  store i1 true, i1* %or_tmp
  br label %ifmerge165

else158:                                          ; preds = %ifmerge153
  %297 = load i32* %assignment_tmp154
  %298 = load i32 addrspace(2)* @ui
  %299 = icmp ne i32 %297, %298
  br i1 %299, label %then160, label %else162

then160:                                          ; preds = %else158
  %300 = load i32* %assignment_tmp154
  %301 = load i32 addrspace(2)* @ui
  %and_tmp159161 = icmp eq i32 %300, %301
  store i1 %and_tmp159161, i1* %and_tmp159
  br label %ifmerge163

else162:                                          ; preds = %else158
  store i1 false, i1* %and_tmp159
  br label %ifmerge163

ifmerge163:                                       ; preds = %else162, %then160
  %302 = load i1* %and_tmp159
  %303 = load i32* %assignment_tmp154
  %304 = icmp ne i32 %303, 2
  %or_tmp164 = xor i1 %302, %304
  store i1 %or_tmp164, i1* %or_tmp
  br label %ifmerge165

ifmerge165:                                       ; preds = %ifmerge163, %then157
  %305 = load i1* %or_tmp
  br i1 %305, label %then166, label %ifmerge168

then166:                                          ; preds = %ifmerge165
  %306 = load i32* %assignment_tmp154
  %i167 = add i32 %306, 1
  store i32 %i167, i32* %i
  br label %ifmerge168

ifmerge168:                                       ; preds = %ifmerge165, %then166
  %307 = load float addrspace(2)* @uf
  %308 = load float addrspace(2)* @uf
  %309 = fadd float %307, %308
  %310 = load float addrspace(2)* @uf
  %311 = fmul float %309, %310
  %312 = load float addrspace(2)* @uf
  %313 = fsub float %311, %312
  %314 = load float addrspace(2)* @uf
  %f169 = fdiv float %313, %314
  store float %f169, float* %f
  %315 = load float* %f
  %316 = load <4 x float>* %v
  %317 = load <4 x float>* %v
  %318 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %316, <4 x float> %317)
  %319 = call float @llvm.gla.fSqrt.f32.f32(float %318)
  %f170 = fadd float %315, %319
  store float %f170, float* %f
  %320 = load <4 x float>* %v
  %321 = load <4 x float>* %v
  %p171 = fsub <4 x float> %320, %321
  store <4 x float> %p171, <4 x float>* %p
  %322 = load float* %f
  %323 = load <4 x float>* %p
  %324 = load <4 x float>* %p
  %325 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %323, <4 x float> %324)
  %326 = call float @llvm.gla.fSqrt.f32.f32(float %325)
  %f172 = fadd float %322, %326
  store float %f172, float* %f
  %327 = load float* %f
  %328 = load <4 x float>* %v
  %329 = load <4 x float>* %v
  %330 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %328, <4 x float> %329)
  %f173 = fadd float %327, %330
  store float %f173, float* %f
  %331 = load <4 x float>* %v
  %332 = extractelement <4 x float> %331, i32 0
  %333 = insertelement <3 x float> undef, float %332, i32 0
  %334 = extractelement <4 x float> %331, i32 1
  %335 = insertelement <3 x float> %333, float %334, i32 1
  %336 = extractelement <4 x float> %331, i32 2
  %a174 = insertelement <3 x float> %335, float %336, i32 2
  store <3 x float> %a174, <3 x float>* %a
  %337 = load <4 x float>* %v
  %338 = extractelement <4 x float> %337, i32 0
  %339 = insertelement <3 x float> undef, float %338, i32 0
  %340 = extractelement <4 x float> %337, i32 1
  %341 = insertelement <3 x float> %339, float %340, i32 1
  %342 = extractelement <4 x float> %337, i32 2
  %b175 = insertelement <3 x float> %341, float %342, i32 2
  store <3 x float> %b175, <3 x float>* %b
  %343 = load float* %f
  %344 = load <3 x float>* %a
  %345 = extractelement <3 x float> %344, i32 1
  %346 = insertelement <3 x float> undef, float %345, i32 0
  %347 = extractelement <3 x float> %344, i32 2
  %348 = insertelement <3 x float> %346, float %347, i32 1
  %349 = extractelement <3 x float> %344, i32 0
  %350 = insertelement <3 x float> %348, float %349, i32 2
  %351 = load <3 x float>* %b
  %352 = extractelement <3 x float> %351, i32 2
  %353 = insertelement <3 x float> undef, float %352, i32 0
  %354 = extractelement <3 x float> %351, i32 0
  %355 = insertelement <3 x float> %353, float %354, i32 1
  %356 = extractelement <3 x float> %351, i32 1
  %357 = insertelement <3 x float> %355, float %356, i32 2
  %358 = fmul <3 x float> %350, %357
  %359 = load <3 x float>* %a
  %360 = extractelement <3 x float> %359, i32 2
  %361 = insertelement <3 x float> undef, float %360, i32 0
  %362 = extractelement <3 x float> %359, i32 0
  %363 = insertelement <3 x float> %361, float %362, i32 1
  %364 = extractelement <3 x float> %359, i32 1
  %365 = insertelement <3 x float> %363, float %364, i32 2
  %366 = load <3 x float>* %b
  %367 = extractelement <3 x float> %366, i32 1
  %368 = insertelement <3 x float> undef, float %367, i32 0
  %369 = extractelement <3 x float> %366, i32 2
  %370 = insertelement <3 x float> %368, float %369, i32 1
  %371 = extractelement <3 x float> %366, i32 0
  %372 = insertelement <3 x float> %370, float %371, i32 2
  %373 = fmul <3 x float> %365, %372
  %374 = fsub <3 x float> %358, %373
  %375 = extractelement <3 x float> %374, i32 0
  %assignment_tmp176177 = fadd float %343, %375
  store float %assignment_tmp176177, float* %assignment_tmp176
  %f178 = load float* %assignment_tmp176
  store float %f178, float* %f
  %376 = load float* %assignment_tmp176
  %377 = load float addrspace(2)* @uf
  %378 = fcmp oeq float %376, %377
  br i1 %378, label %then180, label %else181

then180:                                          ; preds = %ifmerge168
  store i1 true, i1* %or_tmp179
  br label %ifmerge188

else181:                                          ; preds = %ifmerge168
  %379 = load float* %assignment_tmp176
  %380 = load float addrspace(2)* @uf
  %381 = fcmp one float %379, %380
  br i1 %381, label %then183, label %else185

then183:                                          ; preds = %else181
  %382 = load float* %assignment_tmp176
  %and_tmp182184 = fcmp one float %382, 2.000000e+00
  store i1 %and_tmp182184, i1* %and_tmp182
  br label %ifmerge186

else185:                                          ; preds = %else181
  store i1 false, i1* %and_tmp182
  br label %ifmerge186

ifmerge186:                                       ; preds = %else185, %then183
  %or_tmp179187 = load i1* %and_tmp182
  store i1 %or_tmp179187, i1* %or_tmp179
  br label %ifmerge188

ifmerge188:                                       ; preds = %ifmerge186, %then180
  %383 = load i1* %or_tmp179
  br i1 %383, label %then189, label %ifmerge191

then189:                                          ; preds = %ifmerge188
  %384 = load float* %assignment_tmp176
  %f190 = fadd float %384, 1.000000e+00
  store float %f190, float* %f
  br label %ifmerge191

ifmerge191:                                       ; preds = %ifmerge188, %then189
  %385 = load i32* %i
  %386 = load i32 addrspace(2)* @ui
  %387 = and i32 %385, %386
  %388 = or i32 %387, 66
  %389 = load i32 addrspace(2)* @ui
  %390 = xor i32 %388, %389
  %391 = srem i32 %390, 17
  %392 = lshr i32 %391, 2
  %393 = load i32 addrspace(2)* @ui
  %394 = shl i32 %392, %393
  %assignment_tmp192193 = xor i32 %394, -1
  store i32 %assignment_tmp192193, i32* %assignment_tmp192
  %i194 = load i32* %assignment_tmp192
  store i32 %i194, i32* %i
  %395 = load i1* %and_tmp149
  %396 = xor i1 %395, true
  br i1 %396, label %then195, label %else197

then195:                                          ; preds = %ifmerge191
  %397 = load i32* %assignment_tmp192
  %398 = sitofp i32 %397 to float
  %399 = insertelement <4 x float> undef, float %398, i32 0
  %400 = insertelement <4 x float> %399, float %398, i32 1
  %401 = insertelement <4 x float> %400, float %398, i32 2
  %402 = insertelement <4 x float> %401, float %398, i32 3
  %403 = load float* %f
  %404 = insertelement <4 x float> undef, float %403, i32 0
  %405 = insertelement <4 x float> %404, float %403, i32 1
  %406 = insertelement <4 x float> %405, float %403, i32 2
  %407 = insertelement <4 x float> %406, float %403, i32 3
  %408 = fadd <4 x float> %402, %407
  %409 = load <4 x float>* %v
  %conditional_tmp196 = fadd <4 x float> %408, %409
  store <4 x float> %conditional_tmp196, <4 x float>* %conditional_tmp
  br label %ifmerge199

else197:                                          ; preds = %ifmerge191
  %conditional_tmp198 = load <4 x float>* %v
  store <4 x float> %conditional_tmp198, <4 x float>* %conditional_tmp
  br label %ifmerge199

ifmerge199:                                       ; preds = %else197, %then195
  %gl_FragColor = load <4 x float>* %conditional_tmp
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge199
  %410 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %410)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare float @llvm.gla.fDot4.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fInverseSqrt.f32.f32(float) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@uv4 = external addrspace(2) constant <4 x float>
@ub = external addrspace(2) constant i1
@uf = external addrspace(2) constant float
@ui = external addrspace(2) constant i32
@ub41 = external addrspace(2) constant <4 x i1>
@ub42 = external addrspace(2) constant <4 x i1>

define fastcc void @main() {
entry:
  %0 = load <4 x float> addrspace(2)* @uv4
  %1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float 0x3F91DF3300000000, <4 x i32> zeroinitializer)
  %_ret_val1 = fmul <4 x float> %0, %1
  %2 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float 0x404CA5DC20000000, <4 x i32> zeroinitializer)
  %3 = fmul <4 x float> %_ret_val1, %2
  %assignment_tmp2 = fadd <4 x float> %_ret_val1, %3
  %4 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %assignment_tmp2)
  %assignment_tmp34 = fadd <4 x float> %assignment_tmp2, %4
  %5 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %assignment_tmp34)
  %assignment_tmp56 = fadd <4 x float> %assignment_tmp34, %5
  %6 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %assignment_tmp56)
  %assignment_tmp78 = fadd <4 x float> %assignment_tmp56, %6
  %7 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %assignment_tmp78)
  %assignment_tmp910 = fadd <4 x float> %assignment_tmp78, %7
  %8 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %assignment_tmp910)
  %assignment_tmp1112 = fadd <4 x float> %assignment_tmp910, %8
  %9 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %assignment_tmp1112)
  %assignment_tmp1314 = fadd <4 x float> %assignment_tmp1112, %9
  %10 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %assignment_tmp1314)
  %assignment_tmp1516 = fadd <4 x float> %assignment_tmp1314, %10
  %11 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %assignment_tmp1516)
  %assignment_tmp1718 = fadd <4 x float> %assignment_tmp1516, %11
  %12 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %assignment_tmp1718)
  %assignment_tmp1920 = fadd <4 x float> %assignment_tmp1718, %12
  %13 = call <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float> %assignment_tmp1920)
  %assignment_tmp2122 = fadd <4 x float> %assignment_tmp1920, %13
  %14 = call <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float> %assignment_tmp2122)
  %assignment_tmp2324 = fadd <4 x float> %assignment_tmp2122, %14
  %15 = call <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float> %assignment_tmp2324)
  %assignment_tmp2526 = fadd <4 x float> %assignment_tmp2324, %15
  %16 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp2526, <4 x float> %assignment_tmp2526)
  %assignment_tmp2728 = fadd <4 x float> %assignment_tmp2526, %16
  %17 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %assignment_tmp2728)
  %assignment_tmp2930 = fadd <4 x float> %assignment_tmp2728, %17
  %18 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %assignment_tmp2930)
  %assignment_tmp3132 = fadd <4 x float> %assignment_tmp2930, %18
  %19 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %assignment_tmp3132)
  %assignment_tmp3334 = fadd <4 x float> %assignment_tmp3132, %19
  %20 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %assignment_tmp3334)
  %assignment_tmp3536 = fadd <4 x float> %assignment_tmp3334, %20
  %21 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %assignment_tmp3536)
  %assignment_tmp3738 = fadd <4 x float> %assignment_tmp3536, %21
  %22 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %assignment_tmp3738)
  %assignment_tmp3940 = fadd <4 x float> %assignment_tmp3738, %22
  %23 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %assignment_tmp3940)
  %assignment_tmp4142 = fadd <4 x float> %assignment_tmp3940, %23
  %24 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %assignment_tmp4142)
  %assignment_tmp4344 = fadd <4 x float> %assignment_tmp4142, %24
  %25 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %assignment_tmp4344)
  %assignment_tmp4546 = fadd <4 x float> %assignment_tmp4344, %25
  %26 = call <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float> %assignment_tmp4546)
  %assignment_tmp4748 = fadd <4 x float> %assignment_tmp4546, %26
  %27 = call <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float> %assignment_tmp4748)
  %assignment_tmp4950 = fadd <4 x float> %assignment_tmp4748, %27
  %28 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %assignment_tmp4950)
  %assignment_tmp5152 = fadd <4 x float> %assignment_tmp4950, %28
  %29 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %assignment_tmp5152)
  %assignment_tmp5354 = fadd <4 x float> %assignment_tmp5152, %29
  %30 = frem <4 x float> %assignment_tmp5354, %assignment_tmp5354
  %assignment_tmp5556 = fadd <4 x float> %assignment_tmp5354, %30
  %31 = extractelement <4 x float> %assignment_tmp5556, i32 0
  %32 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %31, <4 x i32> zeroinitializer)
  %33 = frem <4 x float> %assignment_tmp5556, %32
  %assignment_tmp5758 = fadd <4 x float> %assignment_tmp5556, %33
  %34 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp5758, <4 x float> %0)
  %assignment_tmp5960 = fadd <4 x float> %assignment_tmp5758, %34
  %35 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp5960, <4 x float> %0)
  %assignment_tmp6162 = fadd <4 x float> %assignment_tmp5960, %35
  %36 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp6162, <4 x float> %0)
  %37 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %36, <4 x float> %0)
  %assignment_tmp6364 = fadd <4 x float> %assignment_tmp6162, %37
  %mix_retval66 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %assignment_tmp6364, <4 x float> %assignment_tmp6364, <4 x float> %assignment_tmp6364)
  %assignment_tmp6768 = fadd <4 x float> %assignment_tmp6364, %mix_retval66
  %38 = load i1 addrspace(2)* @ub
  %39 = uitofp i1 %38 to float
  %mix_retval7071 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %assignment_tmp6768, <4 x float> %assignment_tmp6768, float %39)
  %assignment_tmp7273 = fadd <4 x float> %assignment_tmp6768, %mix_retval7071
  %40 = extractelement <4 x float> %assignment_tmp7273, i32 0
  %ord = fcmp oeq float %40, %40
  %41 = uitofp i1 %ord to float
  %42 = extractelement <4 x float> %assignment_tmp7273, i32 1
  %ord201 = fcmp oeq float %42, %42
  %43 = uitofp i1 %ord201 to float
  %44 = extractelement <4 x float> %assignment_tmp7273, i32 2
  %ord202 = fcmp oeq float %44, %44
  %45 = uitofp i1 %ord202 to float
  %46 = extractelement <4 x float> %assignment_tmp7273, i32 3
  %ord203 = fcmp oeq float %46, %46
  %47 = uitofp i1 %ord203 to float
  %48 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %41, i32 0, float %43, i32 0, float %45, i32 0, float %47, i32 0)
  %assignment_tmp7980 = fadd <4 x float> %assignment_tmp7273, %48
  %49 = fsub <4 x float> %assignment_tmp7980, %assignment_tmp7980
  %50 = fdiv <4 x float> %49, %49
  %51 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float> %50, float 1.000000e+00)
  %t8182 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float> %51, float 0.000000e+00)
  %52 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float 2.000000e+00, <4 x i32> zeroinitializer)
  %53 = fmul <4 x float> %52, %t8182
  %54 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float 3.000000e+00, <4 x i32> zeroinitializer)
  %55 = fsub <4 x float> %54, %53
  %56 = fmul <4 x float> %t8182, %55
  %57 = fmul <4 x float> %t8182, %56
  %assignment_tmp8384 = fadd <4 x float> %assignment_tmp7980, %57
  %58 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %assignment_tmp8384, <4 x float> %assignment_tmp8384)
  %59 = call float @llvm.gla.fInverseSqrt.f32.f32(float %58)
  %60 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %59, <4 x i32> zeroinitializer)
  %61 = fmul <4 x float> %assignment_tmp8384, %60
  %assignment_tmp8586 = fadd <4 x float> %assignment_tmp8384, %61
  %62 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %assignment_tmp8586, <4 x float> %assignment_tmp8586)
  %63 = fcmp olt float %62, 0.000000e+00
  br i1 %63, label %then, label %else

then:                                             ; preds = %entry
  br label %ifmerge

else:                                             ; preds = %entry
  %return_value89 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %assignment_tmp8586
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %return_value.0 = phi <4 x float> [ %assignment_tmp8586, %then ], [ %return_value89, %else ]
  %assignment_tmp9091 = fadd <4 x float> %assignment_tmp8586, %return_value.0
  %64 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %assignment_tmp9091, <4 x float> %assignment_tmp9091)
  %65 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %64, <4 x i32> zeroinitializer)
  %66 = fmul <4 x float> %65, %assignment_tmp9091
  %67 = fmul <4 x float> %52, %66
  %68 = fsub <4 x float> %assignment_tmp9091, %67
  %assignment_tmp9293 = fadd <4 x float> %assignment_tmp9091, %68
  %69 = load float addrspace(2)* @uf
  %70 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %assignment_tmp9293, <4 x float> %assignment_tmp9293)
  %71 = fmul float %70, %70
  %72 = fsub float 1.000000e+00, %71
  %73 = fmul float %69, %72
  %74 = fmul float %69, %73
  %k96 = fsub float 1.000000e+00, %74
  %75 = fcmp olt float %k96, 0.000000e+00
  br i1 %75, label %then97, label %else98

then97:                                           ; preds = %ifmerge
  br label %ifmerge100

else98:                                           ; preds = %ifmerge
  %76 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %69, <4 x i32> zeroinitializer)
  %77 = fmul <4 x float> %76, %assignment_tmp9293
  %78 = fmul float %69, %70
  %79 = call float @llvm.gla.fSqrt.f32.f32(float %k96)
  %80 = fadd float %78, %79
  %81 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %80, <4 x i32> zeroinitializer)
  %82 = fmul <4 x float> %81, %assignment_tmp9293
  %return_value9599 = fsub <4 x float> %77, %82
  br label %ifmerge100

ifmerge100:                                       ; preds = %else98, %then97
  %return_value95.0 = phi <4 x float> [ zeroinitializer, %then97 ], [ %return_value9599, %else98 ]
  %assignment_tmp101102 = fadd <4 x float> %assignment_tmp9293, %return_value95.0
  %83 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %assignment_tmp101102)
  %assignment_tmp103104 = fadd <4 x float> %assignment_tmp101102, %83
  %84 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %assignment_tmp103104)
  %assignment_tmp105106 = fadd <4 x float> %assignment_tmp103104, %84
  %85 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %assignment_tmp105106)
  %86 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %85)
  %87 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %assignment_tmp105106)
  %88 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %87)
  %89 = fadd <4 x float> %86, %88
  %v107 = fadd <4 x float> %assignment_tmp105106, %89
  %90 = load i32 addrspace(2)* @ui
  %assignment_tmp108109 = call i32 @llvm.gla.abs.i32.i32(i32 %90)
  %91 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %assignment_tmp108109, i32 %90)
  %assignment_tmp110111 = add i32 %91, %assignment_tmp108109
  %92 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %assignment_tmp110111, i32 %90)
  %assignment_tmp112113 = add i32 %assignment_tmp110111, %92
  %93 = call i32 @llvm.gla.sMin.i32.i32.i32(i32 %assignment_tmp112113, i32 %90)
  %94 = call i32 @llvm.gla.sMax.i32.i32.i32(i32 %93, i32 %90)
  %i114 = add i32 %94, %assignment_tmp112113
  %95 = call i1 @llvm.gla.any.v4i1(<4 x i1> zeroinitializer)
  br i1 %95, label %then115, label %else117

then115:                                          ; preds = %ifmerge100
  %ord204 = fcmp oeq <4 x float> %v107, %v107
  %and_tmp116 = call i1 @llvm.gla.any.v4i1(<4 x i1> %ord204)
  br label %ifmerge118

else117:                                          ; preds = %ifmerge100
  br label %ifmerge118

ifmerge118:                                       ; preds = %else117, %then115
  %and_tmp.0 = phi i1 [ %and_tmp116, %then115 ], [ false, %else117 ]
  %select = and i1 %and_tmp.0, %95
  br i1 %select, label %then125, label %else127

then125:                                          ; preds = %ifmerge118
  %ord205 = fcmp oeq <4 x float> %v107, %v107
  %and_tmp124126 = call i1 @llvm.gla.any.v4i1(<4 x i1> %ord205)
  br label %ifmerge128

else127:                                          ; preds = %ifmerge118
  br label %ifmerge128

ifmerge128:                                       ; preds = %else127, %then125
  %and_tmp124.0 = phi i1 [ %and_tmp124126, %then125 ], [ false, %else127 ]
  br i1 %and_tmp124.0, label %then130, label %else132

then130:                                          ; preds = %ifmerge128
  %96 = load <4 x i1> addrspace(2)* @ub41
  %97 = load <4 x i1> addrspace(2)* @ub42
  %98 = icmp eq <4 x i1> %96, %97
  %and_tmp129131 = call i1 @llvm.gla.any.v4i1(<4 x i1> %98)
  br label %ifmerge133

else132:                                          ; preds = %ifmerge128
  br label %ifmerge133

ifmerge133:                                       ; preds = %else132, %then130
  %and_tmp129.0 = phi i1 [ %and_tmp129131, %then130 ], [ false, %else132 ]
  br i1 %and_tmp129.0, label %then135, label %else137

then135:                                          ; preds = %ifmerge133
  %99 = load <4 x i1> addrspace(2)* @ub41
  %100 = load <4 x i1> addrspace(2)* @ub42
  %101 = icmp ne <4 x i1> %99, %100
  %and_tmp134136 = call i1 @llvm.gla.any.v4i1(<4 x i1> %101)
  br label %ifmerge138

else137:                                          ; preds = %ifmerge133
  br label %ifmerge138

ifmerge138:                                       ; preds = %else137, %then135
  %and_tmp134.0 = phi i1 [ %and_tmp134136, %then135 ], [ false, %else137 ]
  br i1 %and_tmp134.0, label %then140, label %else142

then140:                                          ; preds = %ifmerge138
  %102 = load <4 x i1> addrspace(2)* @ub41
  %and_tmp139141 = call i1 @llvm.gla.any.v4i1(<4 x i1> %102)
  br label %ifmerge143

else142:                                          ; preds = %ifmerge138
  br label %ifmerge143

ifmerge143:                                       ; preds = %else142, %then140
  %and_tmp139.0 = phi i1 [ %and_tmp139141, %then140 ], [ false, %else142 ]
  br i1 %and_tmp139.0, label %then145, label %else147

then145:                                          ; preds = %ifmerge143
  %103 = load <4 x i1> addrspace(2)* @ub41
  %and_tmp144146 = call i1 @llvm.gla.all.v4i1(<4 x i1> %103)
  br label %ifmerge148

else147:                                          ; preds = %ifmerge143
  br label %ifmerge148

ifmerge148:                                       ; preds = %else147, %then145
  %and_tmp144.0 = phi i1 [ %and_tmp144146, %then145 ], [ false, %else147 ]
  br i1 %and_tmp144.0, label %then150, label %else152

then150:                                          ; preds = %ifmerge148
  %104 = load <4 x i1> addrspace(2)* @ub41
  %105 = xor <4 x i1> %104, <i1 true, i1 true, i1 true, i1 true>
  %and_tmp149151 = call i1 @llvm.gla.any.v4i1(<4 x i1> %105)
  %phitmp = xor i1 %and_tmp149151, true
  br label %ifmerge153

else152:                                          ; preds = %ifmerge148
  br label %ifmerge153

ifmerge153:                                       ; preds = %else152, %then150
  %and_tmp149.0 = phi i1 [ %phitmp, %then150 ], [ true, %else152 ]
  %106 = add i32 %90, %i114
  %107 = mul i32 %106, %i114
  %108 = sub i32 %107, %90
  %109 = sdiv i32 %108, %i114
  %assignment_tmp154155 = srem i32 %109, %90
  %110 = icmp eq i32 %assignment_tmp154155, 2
  br i1 %110, label %ifmerge168, label %then166

then166:                                          ; preds = %ifmerge153
  %i167 = add i32 %assignment_tmp154155, 1
  br label %ifmerge168

ifmerge168:                                       ; preds = %ifmerge153, %then166
  %i.0 = phi i32 [ %i167, %then166 ], [ 2, %ifmerge153 ]
  %111 = fadd float %69, %69
  %112 = fmul float %111, %69
  %113 = fsub float %112, %69
  %f169 = fdiv float %113, %69
  %114 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %v107, <4 x float> %v107)
  %115 = call float @llvm.gla.fSqrt.f32.f32(float %114)
  %f170 = fadd float %f169, %115
  %p171 = fsub <4 x float> %v107, %v107
  %116 = call float @llvm.gla.fDot4.v4f32.v4f32(<4 x float> %p171, <4 x float> %p171)
  %117 = call float @llvm.gla.fSqrt.f32.f32(float %116)
  %f172 = fadd float %f170, %117
  %f173 = fadd float %f172, %114
  %118 = extractelement <4 x float> %v107, i32 1
  %119 = extractelement <4 x float> %v107, i32 2
  %.lhs = fmul float %118, %119
  %.rhs = fmul float %119, %118
  %120 = fsub float %.lhs, %.rhs
  %assignment_tmp176177 = fadd float %f173, %120
  %121 = fcmp oeq float %assignment_tmp176177, %69
  br i1 %121, label %then180, label %else181

then180:                                          ; preds = %ifmerge168
  br label %ifmerge188

else181:                                          ; preds = %ifmerge168
  %122 = fcmp ueq float %assignment_tmp176177, %69
  br i1 %122, label %else185, label %then183

then183:                                          ; preds = %else181
  %and_tmp182184 = fcmp one float %assignment_tmp176177, 2.000000e+00
  br label %ifmerge186

else185:                                          ; preds = %else181
  br label %ifmerge186

ifmerge186:                                       ; preds = %else185, %then183
  %and_tmp182.0 = phi i1 [ %and_tmp182184, %then183 ], [ false, %else185 ]
  br label %ifmerge188

ifmerge188:                                       ; preds = %ifmerge186, %then180
  %or_tmp179.0 = phi i1 [ true, %then180 ], [ %and_tmp182.0, %ifmerge186 ]
  br i1 %or_tmp179.0, label %then189, label %ifmerge191

then189:                                          ; preds = %ifmerge188
  %f190 = fadd float %assignment_tmp176177, 1.000000e+00
  br label %ifmerge191

ifmerge191:                                       ; preds = %ifmerge188, %then189
  %f.0 = phi float [ %f190, %then189 ], [ %assignment_tmp176177, %ifmerge188 ]
  %123 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %f.0, <4 x i32> zeroinitializer)
  br i1 %and_tmp149.0, label %then195, label %else197

then195:                                          ; preds = %ifmerge191
  %124 = and i32 %90, %i.0
  %125 = or i32 %124, 66
  %126 = xor i32 %125, %90
  %127 = srem i32 %126, 17
  %128 = lshr i32 %127, 2
  %129 = shl i32 %128, %90
  %assignment_tmp192193 = xor i32 %129, -1
  %130 = sitofp i32 %assignment_tmp192193 to float
  %131 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %130, <4 x i32> zeroinitializer)
  %132 = fadd <4 x float> %131, %123
  %conditional_tmp196 = fadd <4 x float> %132, %v107
  br label %ifmerge199

else197:                                          ; preds = %ifmerge191
  br label %ifmerge199

ifmerge199:                                       ; preds = %else197, %then195
  %conditional_tmp.0 = phi <4 x float> [ %conditional_tmp196, %then195 ], [ %v107, %else197 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %conditional_tmp.0)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge199
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRoundEven.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.f32(<4 x float>, float) nounwind readnone

declare float @llvm.gla.fDot4.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fInverseSqrt.f32.f32(float) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare i32 @llvm.gla.abs.i32.i32(i32) nounwind readnone

declare i32 @llvm.gla.sMin.i32.i32.i32(i32, i32) nounwind readnone

declare i32 @llvm.gla.sMax.i32.i32.i32(i32, i32) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone
compiling Operations.frag...
uniform ivec4 uiv4 ; 
uniform vec4 uv4 ; 
uniform bool ub ; 
uniform bvec4 ub41 , ub42 ; 
uniform float uf ; 
uniform int ui ; 
void  main (){
vec4 v ; float f ; bool b ; bvec4 bv4 ; int i ; v = radians ( uv4 ) ; v += degrees ( v ) ; v += sin ( v ) ; v += cos ( v ) ; v += tan ( v ) ; v += asin ( v ) ; v += acos ( v ) ; v += atan ( v ) ; v += sinh ( v ) ; v += cosh ( v ) ; v += tanh ( v ) ; v += asinh ( v ) ; v += acosh ( v ) ; v += atanh ( v ) ; v += pow ( v , v ) ; v += exp ( v ) ; v += log ( v ) ; v += exp2 ( v ) ; v += log2 ( v ) ; v += sqrt ( v ) ; v += inversesqrt ( v ) ; v += abs ( v ) ; v += sign ( v ) ; v += floor ( v ) ; v += round ( v ) ; v += roundEven ( v ) ; v += ceil ( v ) ; v += fract ( v ) ; v += mod ( v , v ) ; v += mod ( v , v . x ) ; v += min ( v , uv4 ) ; v += max ( v , uv4 ) ; v += clamp ( v , uv4 , uv4 ) ; v += mix ( v , v , v ) ; v += mix ( v , v , ub ) ; v += step ( v , v ) ; v += smoothstep ( v , v , v ) ; v += normalize ( v ) ; v += faceforward ( v , v , v ) ; v += reflect ( v , v ) ; v += refract ( v , v , uf ) ; v += dFdx ( v ) ; v += dFdy ( v ) ; v += fwidth ( v ) ; i = 0 ; i += abs ( ui ) ; i += min ( i , ui ) ; i += max ( i , ui ) ; i += clamp ( i , ui , ui ) ; b = any ( lessThan ( v , v ) ) ; b = b && any ( lessThanEqual ( v , v ) ) ; b = b && any ( greaterThan ( v , v ) ) ; b = b && any ( greaterThanEqual ( v , v ) ) ; b = b && any ( equal ( ub41 , ub42 ) ) ; b = b && any ( notEqual ( ub41 , ub42 ) ) ; b = b && any ( ub41 ) ; b = b && all ( ub41 ) ; b = b && any ( not ( ub41 ) ) ; i = i + ui * i - ui / i ; i = i % ui ; if ( i == ui || i != ui && i == ui ^^ i != 2 ) ++ i ; f = uf + uf * uf - uf / uf ; f += length ( v ) ; f += distance ( v , v ) ; f += dot ( v , v ) ; f += cross ( v . xyz , v . xyz ) . x ; if ( f == uf || f != uf && f != 2.000000 ) ++ f ; i &= ui ; i |= 66 ; i ^= ui ; i %= 17 ; i >>= 2 ; i <<= ui ; i = ~ i ; b = ! b ; gl_FragColor = b ? vec4 ( i ) + vec4 ( f ) + v : vec4 ( i ) + vec4 ( f ) + v ; }



(
(declare (uniform ) int ui)
(declare (uniform ) float uf)
(declare (uniform ) bvec4 ub42)
(declare (uniform ) bvec4 ub41)
(declare (uniform ) bool ub)
(declare (uniform ) vec4 uv4)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () float f)
      (declare () vec4 v)
      (declare () vec4 _ret_val)
      (assign (constant bool (1)) (xyzw) (var_ref _ret_val)  (expression vec4 * (var_ref uv4) (constant float (0.017453)) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref _ret_val) (expression vec4 * (var_ref _ret_val) (constant float (57.295780)) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sin (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 cos (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 tan (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 asin (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 acos (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 atan (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sinh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 cosh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 tanh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 asinh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 acosh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 atanh (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 pow (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 exp (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 log (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 exp2 (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 log2 (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sqrt (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 rsq (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 abs (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 sign (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 floor (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 round_even (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 round_even (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 ceil (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 fract (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 % (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 % (var_ref assignment_tmp) (swiz x (var_ref assignment_tmp) )) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 min (var_ref assignment_tmp) (var_ref uv4) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 max (var_ref assignment_tmp) (var_ref uv4) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 max (expression vec4 min (var_ref assignment_tmp) (var_ref uv4) ) (var_ref uv4) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (var_ref assignment_tmp) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 mix_retval)
      (assign (constant bool (1)) (xyzw) (var_ref mix_retval)  (call mix ((var_ref assignment_tmp) (var_ref assignment_tmp) (expression float b2f (var_ref ub) ) ))
) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref v) (var_ref mix_retval) ) ) 
      (declare () vec4 t)
      (assign (constant bool (1)) (x) (var_ref t)  (expression float b2f (expression bool >= (swiz x (var_ref assignment_tmp) )(swiz x (var_ref assignment_tmp) )) ) ) 
      (assign (constant bool (1)) (y) (var_ref t)  (expression float b2f (expression bool >= (swiz y (var_ref assignment_tmp) )(swiz y (var_ref assignment_tmp) )) ) ) 
      (assign (constant bool (1)) (z) (var_ref t)  (expression float b2f (expression bool >= (swiz z (var_ref assignment_tmp) )(swiz z (var_ref assignment_tmp) )) ) ) 
      (assign (constant bool (1)) (w) (var_ref t)  (expression float b2f (expression bool >= (swiz w (var_ref assignment_tmp) )(swiz w (var_ref assignment_tmp) )) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (var_ref t) ) ) 
      (declare () vec4 t)
      (assign (constant bool (1)) (xyzw) (var_ref t)  (expression vec4 max (expression vec4 min (expression vec4 / (expression vec4 - (var_ref assignment_tmp) (var_ref assignment_tmp) ) (expression vec4 - (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) (constant float (1.000000)) ) (constant float (0.000000)) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 * (var_ref t) (expression vec4 * (var_ref t) (expression vec4 - (constant float (3.000000)) (expression vec4 * (constant float (2.000000)) (var_ref t) ) ) ) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 * (var_ref assignment_tmp) (expression float rsq (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 return_value)
      (if (expression bool < (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) (constant float (0.000000)) ) (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (var_ref assignment_tmp) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (expression vec4 neg (var_ref assignment_tmp) ) ) 
      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (var_ref return_value) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 - (var_ref assignment_tmp) (expression vec4 * (constant float (2.000000)) (expression vec4 * (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) (var_ref assignment_tmp) ) ) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 return_value)
      (declare () float k)
      (assign (constant bool (1)) (x) (var_ref k)  (expression float - (constant float (1.000000)) (expression float * (var_ref uf) (expression float * (var_ref uf) (expression float - (constant float (1.000000)) (expression float * (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) ) ) ) ) ) 
      (if (expression bool < (var_ref k) (constant float (0.000000)) ) (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (constant vec4 (0.000000 0.000000 0.000000 0.000000)) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref return_value)  (expression vec4 - (expression vec4 * (var_ref uf) (var_ref assignment_tmp) ) (expression vec4 * (expression float + (expression float * (var_ref uf) (expression float dot (var_ref assignment_tmp) (var_ref assignment_tmp) ) ) (expression float sqrt (var_ref k) ) ) (var_ref assignment_tmp) ) ) ) 
      ))

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (var_ref return_value) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 dFdx (var_ref assignment_tmp) ) ) ) 
      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 dFdy (var_ref assignment_tmp) ) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref v)  (expression vec4 + (var_ref assignment_tmp) (expression vec4 + (expression vec4 abs (expression vec4 dFdx (var_ref assignment_tmp) ) ) (expression vec4 abs (expression vec4 dFdy (var_ref assignment_tmp) ) ) ) ) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int abs (var_ref ui) ) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref assignment_tmp) (expression int min (var_ref assignment_tmp) (var_ref ui) ) ) ) 
      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int + (var_ref assignment_tmp) (expression int max (var_ref assignment_tmp) (var_ref ui) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref assignment_tmp) (expression int max (expression int min (var_ref assignment_tmp) (var_ref ui) ) (var_ref ui) ) ) ) 
      (declare (temporary ) bool and_tmp)
      (if (expression bool any (expression bvec4 < (var_ref v) (var_ref v) ) ) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 <= (var_ref v) (var_ref v) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 > (var_ref v) (var_ref v) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 >= (var_ref v) (var_ref v) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 == (var_ref ub41) (var_ref ub42) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 != (var_ref ub41) (var_ref ub42) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (var_ref ub41) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all (var_ref ub41) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) bool and_tmp)
      (if (var_ref and_tmp) (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any (expression bvec4 ! (var_ref ub41) ) ) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
      ))

      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int % (expression int / (expression int - (expression int * (expression int + (var_ref i) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) (var_ref i) ) (var_ref ui) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref ui) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool all_equal (var_ref assignment_tmp) (var_ref ui) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (expression bool ^^ (var_ref and_tmp) (expression bool any_nequal (var_ref assignment_tmp) (constant int (2)) ) ) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref assignment_tmp) (constant int (1)) ) ) 
      )
      ())

      (assign (constant bool (1)) (x) (var_ref f)  (expression float / (expression float - (expression float * (expression float + (var_ref uf) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) (var_ref uf) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (expression float sqrt (expression float dot (var_ref v) (var_ref v) ) ) ) ) 
      (declare () vec4 p)
      (assign (constant bool (1)) (xyzw) (var_ref p)  (expression vec4 - (var_ref v) (var_ref v) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (expression float sqrt (expression float dot (var_ref p) (var_ref p) ) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref f) (expression float dot (var_ref v) (var_ref v) ) ) ) 
      (declare () vec3 a)
      (assign (constant bool (1)) (xyz) (var_ref a)  (swiz xyz (var_ref v) )) 
      (declare () vec3 b)
      (assign (constant bool (1)) (xyz) (var_ref b)  (swiz xyz (var_ref v) )) 
      (declare (temporary ) float assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression float + (var_ref f) (swiz x (expression vec3 - (expression vec3 * (swiz yzx (var_ref a) )(swiz zxy (var_ref b) )) (expression vec3 * (swiz zxy (var_ref a) )(swiz yzx (var_ref b) )) ) )) ) 
      (assign (constant bool (1)) (x) (var_ref f)  (var_ref assignment_tmp) ) 
      (declare (temporary ) bool or_tmp)
      (if (expression bool all_equal (var_ref assignment_tmp) (var_ref uf) ) (
        (assign (constant bool (1)) (x) (var_ref or_tmp)  (constant bool (1)) ) 
      )
      (
        (declare (temporary ) bool and_tmp)
        (if (expression bool any_nequal (var_ref assignment_tmp) (var_ref uf) ) (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (expression bool any_nequal (var_ref assignment_tmp) (constant float (2.000000)) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref and_tmp)  (constant bool (0)) ) 
        ))

        (assign (constant bool (1)) (x) (var_ref or_tmp)  (var_ref and_tmp) ) 
      ))

      (if (var_ref or_tmp) (
        (assign (constant bool (1)) (x) (var_ref f)  (expression float + (var_ref assignment_tmp) (constant float (1.000000)) ) ) 
      )
      ())

      (declare (temporary ) int assignment_tmp)
      (assign (constant bool (1)) (x) (var_ref assignment_tmp)  (expression int ~ (expression int << (expression int >> (expression int % (expression int ^ (expression int | (expression int & (var_ref i) (var_ref ui) ) (constant int (66)) ) (var_ref ui) ) (constant int (17)) ) (constant int (2)) ) (var_ref ui) ) ) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (var_ref assignment_tmp) ) 
      (declare (temporary ) vec4 conditional_tmp)
      (if (expression bool ! (var_ref and_tmp) ) (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (expression vec4 + (expression vec4 + (swiz xxxx (expression float i2f (var_ref assignment_tmp) ) )(swiz xxxx (var_ref f) )) (var_ref v) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref conditional_tmp)  (var_ref v) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref conditional_tmp) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform vec4 uv4;
uniform bool ub;
uniform float uf;
uniform int ui;
uniform bvec4 ub41;
uniform bvec4 ub42;
const float const36_0f = 0.017453;
const float const39_57f = 57.2958;
const float const124_1f = 1.0;
const float const126_0f = 0.0;
const float const128_2f = 2.0;
const float const131_3f = 3.0;
const vec4 const144 = vec4(0.0);
const vec4 const159 = vec4(0.0);
const bvec4 const188 = bvec4(false);
const bool const191_false = false;
const bool const204_true = true;
const int const211_2 = 2;
const int const213_1 = 1;
const int const237_66 = 66;
const int const240_17 = 17;

void main()
{
    vec4 return_value_0;
    vec4 return_value95_0;
    bool and_tmp_0;
    bool and_tmp124_0;
    bool and_tmp129_0;
    bool and_tmp134_0;
    bool and_tmp139_0;
    bool and_tmp144_0;
    bool and_tmp149_0;
    int i_0;
    bool and_tmp182_0;
    bool or_tmp179_0;
    float f_0;
    vec4 conditional_tmp_0;
    vec4 temp35 = vec4(const36_0f);
    vec4 _ret_val1 = uv4 * temp35;
    vec4 temp38 = vec4(const39_57f);
    vec4 temp40 = _ret_val1 * temp38;
    vec4 assignment_tmp2 = _ret_val1 + temp40;
    vec4 temp42 = sin(assignment_tmp2);
    vec4 assignment_tmp34 = assignment_tmp2 + temp42;
    vec4 temp44 = cos(assignment_tmp34);
    vec4 assignment_tmp56 = assignment_tmp34 + temp44;
    vec4 temp46 = tan(assignment_tmp56);
    vec4 assignment_tmp78 = assignment_tmp56 + temp46;
    vec4 temp48 = asin(assignment_tmp78);
    vec4 assignment_tmp910 = assignment_tmp78 + temp48;
    vec4 temp50 = acos(assignment_tmp910);
    vec4 assignment_tmp1112 = assignment_tmp910 + temp50;
    vec4 temp52 = atan(assignment_tmp1112);
    vec4 assignment_tmp1314 = assignment_tmp1112 + temp52;
    vec4 temp54 = sinh(assignment_tmp1314);
    vec4 assignment_tmp1516 = assignment_tmp1314 + temp54;
    vec4 temp56 = cosh(assignment_tmp1516);
    vec4 assignment_tmp1718 = assignment_tmp1516 + temp56;
    vec4 temp58 = tanh(assignment_tmp1718);
    vec4 assignment_tmp1920 = assignment_tmp1718 + temp58;
    vec4 temp60 = asinh(assignment_tmp1920);
    vec4 assignment_tmp2122 = assignment_tmp1920 + temp60;
    vec4 temp62 = acosh(assignment_tmp2122);
    vec4 assignment_tmp2324 = assignment_tmp2122 + temp62;
    vec4 temp64 = atanh(assignment_tmp2324);
    vec4 assignment_tmp2526 = assignment_tmp2324 + temp64;
    vec4 temp66 = pow(assignment_tmp2526, assignment_tmp2526);
    vec4 assignment_tmp2728 = assignment_tmp2526 + temp66;
    vec4 temp68 = exp(assignment_tmp2728);
    vec4 assignment_tmp2930 = assignment_tmp2728 + temp68;
    vec4 temp70 = log(assignment_tmp2930);
    vec4 assignment_tmp3132 = assignment_tmp2930 + temp70;
    vec4 temp72 = exp2(assignment_tmp3132);
    vec4 assignment_tmp3334 = assignment_tmp3132 + temp72;
    vec4 temp74 = log2(assignment_tmp3334);
    vec4 assignment_tmp3536 = assignment_tmp3334 + temp74;
    vec4 temp76 = sqrt(assignment_tmp3536);
    vec4 assignment_tmp3738 = assignment_tmp3536 + temp76;
    vec4 temp78 = inversesqrt(assignment_tmp3738);
    vec4 assignment_tmp3940 = assignment_tmp3738 + temp78;
    vec4 temp80 = abs(assignment_tmp3940);
    vec4 assignment_tmp4142 = assignment_tmp3940 + temp80;
    vec4 temp82 = sign(assignment_tmp4142);
    vec4 assignment_tmp4344 = assignment_tmp4142 + temp82;
    vec4 temp84 = floor(assignment_tmp4344);
    vec4 assignment_tmp4546 = assignment_tmp4344 + temp84;
    vec4 temp86 = roundEven(assignment_tmp4546);
    vec4 assignment_tmp4748 = assignment_tmp4546 + temp86;
    vec4 temp88 = roundEven(assignment_tmp4748);
    vec4 assignment_tmp4950 = assignment_tmp4748 + temp88;
    vec4 temp90 = ceil(assignment_tmp4950);
    vec4 assignment_tmp5152 = assignment_tmp4950 + temp90;
    vec4 temp92 = fract(assignment_tmp5152);
    vec4 assignment_tmp5354 = assignment_tmp5152 + temp92;
    vec4 temp94 = mod(assignment_tmp5354, assignment_tmp5354);
    vec4 assignment_tmp5556 = assignment_tmp5354 + temp94;
    vec4 temp96 = vec4(assignment_tmp5556.x);
    vec4 temp97 = mod(assignment_tmp5556, temp96);
    vec4 assignment_tmp5758 = assignment_tmp5556 + temp97;
    vec4 temp99 = min(assignment_tmp5758, uv4);
    vec4 assignment_tmp5960 = assignment_tmp5758 + temp99;
    vec4 temp101 = max(assignment_tmp5960, uv4);
    vec4 assignment_tmp6162 = assignment_tmp5960 + temp101;
    vec4 temp103 = min(assignment_tmp6162, uv4);
    vec4 temp104 = max(temp103, uv4);
    vec4 assignment_tmp6364 = assignment_tmp6162 + temp104;
    vec4 mix_retval66 = mix(assignment_tmp6364, assignment_tmp6364, assignment_tmp6364);
    vec4 assignment_tmp6768 = assignment_tmp6364 + mix_retval66;
    float temp108 = float(ub);
    vec4 mix_retval7071 = mix(assignment_tmp6768, assignment_tmp6768, temp108);
    vec4 assignment_tmp7273 = assignment_tmp6768 + mix_retval7071;
    bool ord = assignment_tmp7273.x == assignment_tmp7273.x;
    float temp112 = float(ord);
    bool ord201 = assignment_tmp7273.y == assignment_tmp7273.y;
    float temp114 = float(ord201);
    bool ord202 = assignment_tmp7273.z == assignment_tmp7273.z;
    float temp116 = float(ord202);
    bool ord203 = assignment_tmp7273.w == assignment_tmp7273.w;
    float temp118 = float(ord203);
    vec4 temp119 = vec4(temp112, temp114, temp116, temp118);
    vec4 assignment_tmp7980 = assignment_tmp7273 + temp119;
    vec4 temp121 = assignment_tmp7980 - assignment_tmp7980;
    vec4 temp122 = temp121 / temp121;
    vec4 temp123 = min(temp122, const124_1f);
    vec4 temp125 = max(temp123, const126_0f);
    vec4 temp127 = vec4(const128_2f);
    vec4 temp129 = temp127 * temp125;
    vec4 temp130 = vec4(const131_3f);
    vec4 temp132 = temp130 - temp129;
    vec4 temp133 = temp125 * temp132;
    vec4 temp134 = temp125 * temp133;
    vec4 assignment_tmp8384 = assignment_tmp7980 + temp134;
    float temp136 = dot(assignment_tmp8384, assignment_tmp8384);
    float temp137 = inversesqrt(temp136);
    vec4 temp138 = vec4(temp137);
    vec4 temp139 = assignment_tmp8384 * temp138;
    vec4 assignment_tmp8586 = assignment_tmp8384 + temp139;
    float temp141 = dot(assignment_tmp8586, assignment_tmp8586);
    bool temp142 = temp141 < const126_0f;
    if (temp142) {
        return_value_0 = assignment_tmp8586;
    }
    else {
        vec4 return_value89 = const144 - assignment_tmp8586;
        return_value_0 = return_value89;
    }
    
    vec4 assignment_tmp9091 = assignment_tmp8586 + return_value_0;
    float temp146 = dot(assignment_tmp9091, assignment_tmp9091);
    vec4 temp147 = vec4(temp146);
    vec4 temp148 = temp147 * assignment_tmp9091;
    vec4 temp149 = temp127 * temp148;
    vec4 temp150 = assignment_tmp9091 - temp149;
    vec4 assignment_tmp9293 = assignment_tmp9091 + temp150;
    float temp152 = dot(assignment_tmp9293, assignment_tmp9293);
    float temp153 = temp152 * temp152;
    float temp154 = const124_1f - temp153;
    float temp155 = uf * temp154;
    float temp156 = uf * temp155;
    float temp157 = const124_1f - temp156;
    bool temp158 = temp157 < const126_0f;
    if (temp158) {
        return_value95_0 = const159;
    }
    else {
        vec4 temp160 = vec4(uf);
        vec4 temp161 = temp160 * assignment_tmp9293;
        float temp162 = uf * temp152;
        float temp163 = sqrt(temp157);
        float temp164 = temp162 + temp163;
        vec4 temp165 = vec4(temp164);
        vec4 temp166 = temp165 * assignment_tmp9293;
        vec4 return_value9599 = temp161 - temp166;
        return_value95_0 = return_value9599;
    }
    
    vec4 assignment_tmp101102 = assignment_tmp9293 + return_value95_0;
    vec4 temp169 = dFdx(assignment_tmp101102);
    vec4 assignment_tmp103104 = assignment_tmp101102 + temp169;
    vec4 temp171 = dFdy(assignment_tmp103104);
    vec4 assignment_tmp105106 = assignment_tmp103104 + temp171;
    vec4 temp173 = dFdx(assignment_tmp105106);
    vec4 temp174 = abs(temp173);
    vec4 temp175 = dFdy(assignment_tmp105106);
    vec4 temp176 = abs(temp175);
    vec4 temp177 = temp174 + temp176;
    vec4 temp178 = assignment_tmp105106 + temp177;
    int assignment_tmp108109 = abs(ui);
    int temp180 = min(assignment_tmp108109, ui);
    int assignment_tmp110111 = temp180 + assignment_tmp108109;
    int temp182 = max(assignment_tmp110111, ui);
    int assignment_tmp112113 = assignment_tmp110111 + temp182;
    int temp184 = min(assignment_tmp112113, ui);
    int temp185 = max(temp184, ui);
    int temp186 = temp185 + assignment_tmp112113;
    bool temp187 = any(const188);
    if (temp187) {
        bvec4 ord204 = equal(temp178, temp178);
        bool and_tmp116 = any(ord204);
        and_tmp_0 = and_tmp116;
    }
    else {
        and_tmp_0 = const191_false;
    }
    
    bool select = and_tmp_0 && temp187;
    if (select) {
        bvec4 ord205 = equal(temp178, temp178);
        bool and_tmp124126 = any(ord205);
        and_tmp124_0 = and_tmp124126;
    }
    else {
        and_tmp124_0 = const191_false;
    }
    
    if (and_tmp124_0) {
        bvec4 temp195 = equal(ub41, ub42);
        bool and_tmp129131 = any(temp195);
        and_tmp129_0 = and_tmp129131;
    }
    else {
        and_tmp129_0 = const191_false;
    }
    
    if (and_tmp129_0) {
        bvec4 temp197 = notEqual(ub41, ub42);
        bool and_tmp134136 = any(temp197);
        and_tmp134_0 = and_tmp134136;
    }
    else {
        and_tmp134_0 = const191_false;
    }
    
    if (and_tmp134_0) {
        bool and_tmp139141 = any(ub41);
        and_tmp139_0 = and_tmp139141;
    }
    else {
        and_tmp139_0 = const191_false;
    }
    
    if (and_tmp139_0) {
        bool and_tmp144146 = all(ub41);
        and_tmp144_0 = and_tmp144146;
    }
    else {
        and_tmp144_0 = const191_false;
    }
    
    if (and_tmp144_0) {
        bvec4 temp201 = not(ub41);
        bool and_tmp149151 = any(temp201);
        bool phitmp = !(and_tmp149151);
        and_tmp149_0 = phitmp;
    }
    else {
        and_tmp149_0 = const204_true;
    }
    
    int temp205 = ui + temp186;
    int temp206 = temp205 * temp186;
    int temp207 = temp206 - ui;
    int temp208 = temp207 / temp186;
    int assignment_tmp154155 = temp208 % ui;
    bool temp210 = assignment_tmp154155 == const211_2;
    i_0 = const211_2;
    if (! temp210) {
        int temp212 = assignment_tmp154155 + const213_1;
        i_0 = temp212;
    }
    
    float temp214 = uf + uf;
    float temp215 = temp214 * uf;
    float temp216 = temp215 - uf;
    float temp217 = temp216 / uf;
    float temp218 = dot(temp178, temp178);
    float temp219 = sqrt(temp218);
    float temp220 = temp217 + temp219;
    vec4 temp221 = temp178 - temp178;
    float temp222 = dot(temp221, temp221);
    float temp223 = sqrt(temp222);
    float temp224 = temp220 + temp223;
    float temp225 = temp224 + temp218;
    float _lhs = temp178.y * temp178.z;
    float _rhs = temp178.z * temp178.y;
    float temp228 = _lhs - _rhs;
    float assignment_tmp176177 = temp225 + temp228;
    bool temp230 = assignment_tmp176177 == uf;
    if (temp230) {
        or_tmp179_0 = const204_true;
    }
    else {
        bool temp231 = assignment_tmp176177 == uf;
        if (temp231) {
            and_tmp182_0 = const191_false;
        }
        else {
            bool and_tmp182184 = assignment_tmp176177 != const128_2f;
            and_tmp182_0 = and_tmp182184;
        }
        
        or_tmp179_0 = and_tmp182_0;
    }
    
    f_0 = assignment_tmp176177;
    if (or_tmp179_0) {
        float temp233 = assignment_tmp176177 + const124_1f;
        f_0 = temp233;
    }
    
    vec4 temp234 = vec4(f_0);
    if (and_tmp149_0) {
        int temp235 = ui & i_0;
        int temp236 = temp235 | const237_66;
        int temp238 = ~(temp236);
        int temp239 = temp238 % const240_17;
        int temp241 = temp239 >> const211_2;
        int temp242 = temp241 << ui;
        int assignment_tmp192193 = ~(temp242);
        float temp244 = float(assignment_tmp192193);
        vec4 temp245 = vec4(temp244);
        vec4 temp246 = temp245 + temp234;
        vec4 conditional_tmp196 = temp246 + temp178;
        conditional_tmp_0 = conditional_tmp196;
    }
    else {
        conditional_tmp_0 = temp178;
    }
    
    gl_FragColor = conditional_tmp_0;
    
}
