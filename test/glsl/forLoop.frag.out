
Top IR:
; ModuleID = 'Top'

@Count = external addrspace(2) constant i32
@bigColor = external addrspace(2) constant <4 x float>
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  %i = alloca i32
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  store i32 0, i32* %i
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %0 = load i32* %i
  %1 = load i32 addrspace(2)* @Count
  %2 = icmp sge i32 %0, %1
  br i1 %2, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %3 = load <4 x float>* %color
  %4 = load <4 x float> addrspace(2)* @bigColor
  %color1 = fadd <4 x float> %3, %4
  store <4 x float> %color1, <4 x float>* %color
  %5 = load i32* %i
  %i2 = add i32 %5, 1
  store i32 %i2, i32* %i
  br label %loop-header

loop-merge:                                       ; preds = %then
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge
  %6 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %6)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@Count = external addrspace(2) constant i32
@bigColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %.pre = load i32 addrspace(2)* @Count, align 4
  %0 = load <4 x float> addrspace(2)* @bigColor, align 16
  %1 = icmp sgt i32 %.pre, 0
  br i1 %1, label %ifmerge.lr.ph, label %then

ifmerge.lr.ph:                                    ; preds = %entry
  br label %ifmerge

loop-header.then_crit_edge:                       ; preds = %ifmerge
  br label %then

then:                                             ; preds = %loop-header.then_crit_edge, %entry
  %color.0.lcssa = phi <4 x float> [ %color1, %loop-header.then_crit_edge ], [ %BaseColor, %entry ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %color.0.lcssa)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %then
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void

ifmerge:                                          ; preds = %ifmerge, %ifmerge.lr.ph
  %indvar = phi i32 [ %indvar.next, %ifmerge ], [ 0, %ifmerge.lr.ph ]
  %color.06 = phi <4 x float> [ %BaseColor, %ifmerge.lr.ph ], [ %color1, %ifmerge ]
  %color1 = fadd <4 x float> %color.06, %0
  %indvar.next = add i32 %indvar, 1
  %exitcond = icmp eq i32 %indvar.next, %.pre
  br i1 %exitcond, label %loop-header.then_crit_edge, label %ifmerge
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind
  %.pre = load i32 addrspace(2)* @Count, align 4

***Unsupported functionality: non-simple constant
compiling forLoop.frag...
uniform vec4 bigColor ; 
varying vec4 BaseColor ; 
uniform int Count ; 
void  main (){
vec4 color = BaseColor ; for( int i = 0 ; ; i < Count ; ++ i ) {
color += bigColor ; }
gl_FragColor = color ; }



(
(declare (uniform ) int Count)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (var_ref Count) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref color) ) 
    ))

)


)