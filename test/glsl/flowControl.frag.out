
Top IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@FragColor_shadow = internal global <4 x float> zeroinitializer
@otherColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 -1, i32 1)
  %0 = load float addrspace(2)* @d
  %1 = fcmp ogt float %c, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %BaseColor1 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %2 = load <4 x float> addrspace(2)* @bigColor
  %color2 = fadd <4 x float> %BaseColor1, %2
  store <4 x float> %color2, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %entry
  %3 = load <4 x float>* %color
  %4 = load <4 x float> addrspace(2)* @smallColor
  %color3 = fadd <4 x float> %3, %4
  store <4 x float> %color3, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %5 = load <4 x float>* %color
  %6 = load <4 x float> addrspace(2)* @otherColor
  %FragColor_shadow = fmul <4 x float> %5, %6
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %7 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %7)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@otherColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 -1, i32 1)
  %0 = load float addrspace(2)* @d, align 4
  %1 = fcmp ogt float %c, %0
  %BaseColor1 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %2 = load <4 x float> addrspace(2)* @bigColor, align 16
  %3 = load <4 x float> addrspace(2)* @smallColor, align 16
  %select.v = select i1 %1, <4 x float> %2, <4 x float> %3
  %select = fadd <4 x float> %BaseColor1, %select.v
  %4 = load <4 x float> addrspace(2)* @otherColor, align 16
  %FragColor_shadow = fmul <4 x float> %select, %4
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %FragColor_shadow)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind
compiling flowControl.frag...
uniform float d ; 
uniform vec4 bigColor , smallColor ; 
uniform vec4 otherColor ; 
varying float c ; 
varying vec4 BaseColor ; 
void  main (){
vec4 color = BaseColor ; vec4 color2 ; color2 = otherColor ; if ( c > d ) color += bigColor ; else color += smallColor ; gl_FragColor = color * color2 ; }



(
(declare (in ) vec4 BaseColor)
(declare (in ) float c)
(declare (uniform ) vec4 otherColor)
(declare (uniform ) vec4 smallColor)
(declare (uniform ) vec4 bigColor)
(declare (uniform ) float d)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (if (expression bool > (var_ref c) (var_ref d) ) (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref BaseColor) (var_ref bigColor) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref smallColor) ) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (var_ref color) (var_ref otherColor) ) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform vec4 otherColor;
in float c;
in vec4 BaseColor1;

void main()
{
    bool temp21 = c > d;
    vec4 select_v = temp21 ? bigColor : smallColor;
    vec4 select = BaseColor1 + select_v;
    vec4 FragColor_shadow = select * otherColor;
    gl_FragColor = FragColor_shadow;
    
}
