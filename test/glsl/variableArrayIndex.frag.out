
Top IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, float }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }

@foo3 = external addrspace(2) constant %lunarStruct3
@foo = external addrspace(2) constant %lunarStruct1
@Count = external addrspace(2) constant i32
@foo2 = external addrspace(2) constant [6 x %lunarStruct2]
@gl_FragColor = internal global <4 x float> zeroinitializer
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %scale = alloca float
  %0 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 1, i32 0)
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct1 addrspace(2)* @foo, i32 0, i32 0)
  %3 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 %2, i32 0
  %4 = load i32 addrspace(2)* %3
  %5 = add i32 %4, 2
  %6 = load i32 addrspace(2)* @Count
  %7 = add i32 %6, 1
  %8 = add i32 %5, %7
  %9 = getelementptr [6 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 %8, i32 2, i32 1
  %scale1 = load float addrspace(2)* %9
  store float %scale1, float* %scale
  br label %ifmerge

else:                                             ; preds = %entry
  %scale2 = load float addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1)
  store float %scale2, float* %scale
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %10 = load float* %scale
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %11 = load i32 addrspace(1)* @"sampler2D sampler"
  %12 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %11, i32 0, <2 x float> %coord)
  %13 = insertelement <4 x float> undef, float %10, i32 0
  %14 = insertelement <4 x float> %13, float %10, i32 1
  %15 = insertelement <4 x float> %14, float %10, i32 2
  %16 = insertelement <4 x float> %15, float %10, i32 3
  %gl_FragColor = fmul <4 x float> %16, %12
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %17 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %17)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, float }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }

@foo3 = external addrspace(2) constant %lunarStruct3
@foo = external addrspace(2) constant %lunarStruct1
@Count = external addrspace(2) constant i32
@foo2 = external addrspace(2) constant [6 x %lunarStruct2]
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 1, i32 0
  %0 = load i32 addrspace(2)* %gla_constGEP, align 4
  %1 = icmp sgt i32 %0, 0
  %gla_constGEP4 = getelementptr %lunarStruct1 addrspace(2)* @foo, i32 0, i32 0
  %2 = load i32 addrspace(2)* %gla_constGEP4, align 4
  %3 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 %2, i32 0
  %4 = load i32 addrspace(2)* %3, align 4
  %5 = load i32 addrspace(2)* @Count, align 4
  %6 = add i32 %4, 3
  %7 = add i32 %6, %5
  %8 = getelementptr [6 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 %7, i32 2, i32 1
  %gla_constGEP5 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1
  %select = select i1 %1, float addrspace(2)* %8, float addrspace(2)* %gla_constGEP5
  %scale.0 = load float addrspace(2)* %select, align 4
  %9 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %scale.0, <4 x i32> zeroinitializer)
  %10 = load i32 addrspace(1)* @"sampler2D sampler", align 4
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %11 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %10, i32 0, <2 x float> %coord)
  %gl_FragColor = fmul <4 x float> %9, %11
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone
compiling variableArrayIndex.frag...
uniform sampler2D sampler ; 
varying vec2 coord ; 
struct lunarStruct1 { int i ; float f ; } ; 
struct lunarStruct2 { int i ; float f ; lunarStruct1 s1_1 ; } ; 
struct lunarStruct3 { lunarStruct2 s2_1 [ 3 ] ; int i ; float f ; lunarStruct1 s1_1 ; } ; 
uniform lunarStruct1 foo ; 
uniform lunarStruct2 foo2 [ 5 ] ; 
uniform lunarStruct3 foo3 ; 
uniform int Count ; 
void  main (){
float scale ; int iLocal = Count ; if ( foo3 . s2_1 [ 1 ] . i > 0 ) scale = foo2 [ foo3 . s2_1 [ foo . i ] . i + 2 + ++ iLocal ] . s1_1 . f ; else scale = foo3 . s2_1 [ 0 ] . s1_1 . f ; gl_FragColor = scale * texture2D ( sampler , coord ) ; }



(
(declare (uniform ) int Count)
(declare (uniform ) lunarStruct3 foo3)
(declare (uniform ) (array lunarStruct2 6) foo2)
(declare (uniform ) lunarStruct1 foo)
(declare (in ) vec2 coord)
(declare (uniform ) sampler2D sampler)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () float scale)
      (if (expression bool > (record_ref (array_ref (record_ref (var_ref foo3)  s2_1) (constant int (1)) )  i) (constant int (0)) ) (
        (assign (constant bool (1)) (x) (var_ref scale)  (record_ref (record_ref (array_ref (var_ref foo2) (expression int + (expression int + (record_ref (array_ref (record_ref (var_ref foo3)  s2_1) (record_ref (var_ref foo)  i) )  i) (constant int (2)) ) (expression int + (var_ref Count) (constant int (1)) ) ) )  s1_1)  f) ) 
      )
      (
        (assign (constant bool (1)) (x) (var_ref scale)  (record_ref (record_ref (array_ref (record_ref (var_ref foo3)  s2_1) (constant int (0)) )  s1_1)  f) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (var_ref scale) (tex (var_ref sampler)  (var_ref coord)  (0 0 0) 1 () )) ) 
    ))

)


)
// LunarGOO output
#version 130
struct lunarStruct1 {
    int member0;
    float member1;
};

struct lunarStruct2 {
    int member0;
    float member1;
    lunarStruct1 member2;
};

struct lunarStruct3 {
    lunarStruct2[3] member0;
    int member1;
    float member2;
    lunarStruct1 member3;
};

uniform lunarStruct3 foo3;
uniform lunarStruct1 foo;
uniform int Count;
uniform lunarStruct2[6] foo2;
uniform sampler2D sampler;
const int const23_0 = 0;
const int const27_3 = 3;
in vec2 coord;

void main()
{
    int temp21 = foo3.member0[1].member0;
    bool temp22 = temp21 > const23_0;
    int temp24 = foo.member0;
    int temp25 = foo3.member0[temp24].member0;
    int temp26 = temp25 + const27_3;
    int temp28 = temp26 + Count;
    float select = temp22 ? foo2[temp28].member2.member1 : foo3.member0[0].member2.member1;
    vec4 temp30 = vec4(select);
    vec4 temp31 = texture2D(sampler, coord);
    vec4 gla_copyout_gl_FragColor = temp30 * temp31;
    gl_FragColor = gla_copyout_gl_FragColor;
    
}
