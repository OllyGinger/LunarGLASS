
Top IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1
@gl_FragColor = internal global <4 x float> zeroinitializer
@otherColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %assignment_tmp = alloca <4 x float>
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 -1, i32 1)
  %0 = load float addrspace(2)* @d
  %1 = fcmp ogt float %c, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %BaseColor1 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %2 = load <4 x float> addrspace(2)* @bigColor
  %color2 = fadd <4 x float> %BaseColor1, %2
  store <4 x float> %color2, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %entry
  %3 = load <4 x float>* %color
  %4 = load <4 x float> addrspace(2)* @smallColor
  %color3 = fadd <4 x float> %3, %4
  store <4 x float> %color3, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %5 = load <4 x float>* %color
  %6 = extractelement <4 x float> %5, i32 2
  %7 = load float addrspace(2)* @minimum
  %8 = fcmp olt float %6, %7
  br i1 %8, label %then4, label %ifmerge5

then4:                                            ; preds = %ifmerge
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge5

ifmerge5:                                         ; preds = %ifmerge, %post-return
  %9 = load <4 x float>* %color
  %10 = extractelement <4 x float> %9, i32 2
  %11 = fadd float %10, 1.000000e+00
  %12 = load <4 x float>* %color
  %color6 = insertelement <4 x float> %12, float %11, i32 2
  store <4 x float> %color6, <4 x float>* %color
  %13 = load <4 x float>* %color
  %14 = extractelement <4 x float> %13, i32 2
  %15 = load float addrspace(2)* @threshhold
  %16 = fcmp ogt float %14, %15
  br i1 %16, label %then7, label %ifmerge8

then7:                                            ; preds = %ifmerge5
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge8

ifmerge8:                                         ; preds = %ifmerge5, %post-discard
  %17 = load <4 x float>* %color
  %assignment_tmp9 = fadd <4 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %assignment_tmp9, <4 x float>* %assignment_tmp
  %color10 = load <4 x float>* %assignment_tmp
  store <4 x float> %color10, <4 x float>* %color
  %18 = load <4 x float>* %assignment_tmp
  %19 = extractelement <4 x float> %18, i32 3
  %20 = load float addrspace(2)* @threshhold2
  %21 = fcmp ogt float %19, %20
  br i1 %21, label %then11, label %else25

then11:                                           ; preds = %ifmerge8
  %22 = load <4 x float>* %assignment_tmp
  %23 = extractelement <4 x float> %22, i32 2
  %24 = load float addrspace(2)* @threshhold2
  %25 = fcmp ogt float %23, %24
  br i1 %25, label %then12, label %else14

then12:                                           ; preds = %then11
  br label %stage-epilogue

post-return13:                                    ; No predecessors!
  br label %ifmerge24

else14:                                           ; preds = %then11
  %26 = load i1 addrspace(2)* @b
  br i1 %26, label %then15, label %else17

then15:                                           ; preds = %else14
  %27 = load <4 x float>* %assignment_tmp
  %28 = extractelement <4 x float> %27, i32 2
  %29 = fadd float %28, 1.000000e+00
  %30 = load <4 x float>* %color
  %color16 = insertelement <4 x float> %30, float %29, i32 2
  store <4 x float> %color16, <4 x float>* %color
  br label %ifmerge23

else17:                                           ; preds = %else14
  %31 = load <4 x float>* %color
  %32 = extractelement <4 x float> %31, i32 0
  %33 = load float addrspace(2)* @minimum
  %34 = fcmp olt float %32, %33
  br i1 %34, label %then18, label %else20

then18:                                           ; preds = %else17
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard19:                                   ; No predecessors!
  br label %ifmerge22

else20:                                           ; preds = %else17
  %35 = load <4 x float>* %color
  %color21 = fadd <4 x float> %35, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color21, <4 x float>* %color
  br label %ifmerge22

ifmerge22:                                        ; preds = %else20, %post-discard19
  br label %ifmerge23

ifmerge23:                                        ; preds = %ifmerge22, %then15
  br label %ifmerge24

ifmerge24:                                        ; preds = %ifmerge23, %post-return13
  br label %ifmerge31

else25:                                           ; preds = %ifmerge8
  %36 = load i1 addrspace(2)* @b
  br i1 %36, label %then26, label %else28

then26:                                           ; preds = %else25
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard27:                                   ; No predecessors!
  br label %ifmerge30

else28:                                           ; preds = %else25
  br label %stage-epilogue

post-return29:                                    ; No predecessors!
  br label %ifmerge30

ifmerge30:                                        ; preds = %post-return29, %post-discard27
  br label %ifmerge31

ifmerge31:                                        ; preds = %ifmerge30, %ifmerge24
  %37 = load <4 x float>* %color
  %38 = load <4 x float> addrspace(2)* @otherColor
  %gl_FragColor = fmul <4 x float> %37, %38
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge31, %else28, %then12, %then4
  %39 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %39)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then26, %then18, %then7
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1
@otherColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 -1, i32 1)
  %0 = load float addrspace(2)* @d, align 4
  %1 = fcmp ogt float %c, %0
  %BaseColor1 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %2 = load <4 x float> addrspace(2)* @bigColor, align 16
  %3 = load <4 x float> addrspace(2)* @smallColor, align 16
  %select.v = select i1 %1, <4 x float> %2, <4 x float> %3
  %select = fadd <4 x float> %BaseColor1, %select.v
  %4 = extractelement <4 x float> %select, i32 2
  %5 = load float addrspace(2)* @minimum, align 4
  %6 = fcmp olt float %4, %5
  br i1 %6, label %then4, label %ifmerge5

then4:                                            ; preds = %entry
  br label %stage-epilogue

ifmerge5:                                         ; preds = %entry
  %7 = fadd float %4, 1.000000e+00
  %8 = load float addrspace(2)* @threshhold, align 4
  %9 = fcmp ogt float %7, %8
  br i1 %9, label %then7, label %ifmerge8

then7:                                            ; preds = %ifmerge5
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge8:                                         ; preds = %ifmerge5
  %10 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %select, i32 4, float undef, i32 undef, float undef, i32 undef, float %7, i32 0, float undef, i32 undef)
  %assignment_tmp9 = fadd <4 x float> %10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %11 = extractelement <4 x float> %assignment_tmp9, i32 3
  %12 = load float addrspace(2)* @threshhold2, align 4
  %13 = fcmp ogt float %11, %12
  br i1 %13, label %then11, label %else25

then11:                                           ; preds = %ifmerge8
  %14 = extractelement <4 x float> %assignment_tmp9, i32 2
  %15 = fcmp ogt float %14, %12
  br i1 %15, label %then12, label %else14

then12:                                           ; preds = %then11
  br label %stage-epilogue

else14:                                           ; preds = %then11
  %16 = load i1 addrspace(2)* @b, align 1
  br i1 %16, label %then15, label %else17

then15:                                           ; preds = %else14
  %17 = fadd float %14, 1.000000e+00
  %18 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp9, i32 4, float undef, i32 undef, float undef, i32 undef, float %17, i32 0, float undef, i32 undef)
  br label %ifmerge23

else17:                                           ; preds = %else14
  %19 = extractelement <4 x float> %assignment_tmp9, i32 0
  %20 = fcmp olt float %19, %5
  br i1 %20, label %then18, label %else20

then18:                                           ; preds = %else17
  call void @llvm.gla.discard()
  br label %stage-exit

else20:                                           ; preds = %else17
  %color21 = fadd <4 x float> %assignment_tmp9, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %ifmerge23

ifmerge23:                                        ; preds = %else20, %then15
  %color.1 = phi <4 x float> [ %18, %then15 ], [ %color21, %else20 ]
  %21 = load <4 x float> addrspace(2)* @otherColor, align 16
  %gl_FragColor = fmul <4 x float> %color.1, %21
  br label %stage-epilogue

else25:                                           ; preds = %ifmerge8
  %22 = load i1 addrspace(2)* @b, align 1
  br i1 %22, label %then26, label %else28

then26:                                           ; preds = %else25
  call void @llvm.gla.discard()
  br label %stage-exit

else28:                                           ; preds = %else25
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge23, %else28, %then12, %then4
  %gl_FragColor32.0 = phi <4 x float> [ zeroinitializer, %then4 ], [ zeroinitializer, %then12 ], [ %gl_FragColor, %ifmerge23 ], [ zeroinitializer, %else28 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor32.0)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then26, %then18, %then7
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone
compiling earlyReturnDiscard.frag...
uniform float d ; 
uniform vec4 bigColor , smallColor ; 
uniform vec4 otherColor ; 
varying float c ; 
uniform float threshhold ; 
uniform float threshhold2 ; 
uniform float threshhold3 ; 
uniform float minimum ; 
varying vec4 BaseColor ; 
uniform bool b ; 
void  main (){
vec4 color = BaseColor ; vec4 color2 ; color2 = otherColor ; if ( c > d ) color += bigColor ; else color += smallColor ; if ( color . z < minimum ) return ; color . z ++ ; if ( color . z > threshhold ) discard; color ++ ; if ( color . w > threshhold2 ) {
if ( color . z > threshhold2 ) return ; else if ( b ) color . z ++ ; else {
if ( color . x < minimum ) {
discard; }
else {
color ++ ; }
}
}
else {
if ( b ) discard; else return ; }
gl_FragColor = color * color2 ; }



(
(declare (uniform ) bool b)
(declare (in ) vec4 BaseColor)
(declare (uniform ) float minimum)
(declare (uniform ) float threshhold2)
(declare (uniform ) float threshhold)
(declare (in ) float c)
(declare (uniform ) vec4 otherColor)
(declare (uniform ) vec4 smallColor)
(declare (uniform ) vec4 bigColor)
(declare (uniform ) float d)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (if (expression bool > (var_ref c) (var_ref d) ) (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref BaseColor) (var_ref bigColor) ) ) 
      )
      (
        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref smallColor) ) ) 
      ))

      (if (expression bool < (swiz z (var_ref color) )(var_ref minimum) ) (
        (return)
      )
      ())

      (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(constant float (1.000000)) ) ) 
      (if (expression bool > (swiz z (var_ref color) )(var_ref threshhold) ) (
        (discard )
      )
      ())

      (declare (temporary ) vec4 assignment_tmp)
      (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
      (if (expression bool > (swiz w (var_ref assignment_tmp) )(var_ref threshhold2) ) (
        (if (expression bool > (swiz z (var_ref assignment_tmp) )(var_ref threshhold2) ) (
          (return)
        )
        (
          (if (var_ref b) (
            (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          )
          (
            (if (expression bool < (swiz x (var_ref color) )(var_ref minimum) ) (
              (discard )
            )
            (
              (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (constant float (1.000000)) ) ) 
            ))

          ))

        ))

      )
      (
        (if (var_ref b) (
          (discard )
        )
        (
          (return)
        ))

      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (var_ref color) (var_ref otherColor) ) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform float minimum;
uniform float threshhold;
uniform float threshhold2;
uniform bool b;
uniform vec4 otherColor;
in float c;
in vec4 BaseColor1;
const vec4 const27 = vec4(0.0);
const float const29_1f = 1.0;
const vec4 const33 = vec4(1.0);

void main()
{
    vec4 color_1;
    vec4 gla_copyout_gl_FragColor32_0;
    bool temp23 = c > d;
    vec4 select_v = temp23 ? bigColor : smallColor;
    vec4 select = BaseColor1 + select_v;
    bool temp26 = select.z < minimum;
    if (temp26) {
        gla_copyout_gl_FragColor32_0 = const27;
        gl_FragColor = gla_copyout_gl_FragColor32_0;
        return;
    }
    else {
        float temp28 = select.z + const29_1f;
        bool temp30 = temp28 > threshhold;
        if (temp30) {
            discard;
        }
        
        vec4 temp31 = select;
        temp31.z = temp28;
        vec4 assignment_tmp9 = temp31 + const33;
        bool temp34 = assignment_tmp9.w > threshhold2;
        if (temp34) {
            bool temp35 = assignment_tmp9.z > threshhold2;
            if (temp35) {
                gla_copyout_gl_FragColor32_0 = const27;
                gl_FragColor = gla_copyout_gl_FragColor32_0;
                return;
            }
            else {
                if (b) {
                    float temp36 = assignment_tmp9.z + const29_1f;
                    vec4 temp37 = assignment_tmp9;
                    temp37.z = temp36;
                    color_1 = temp37;
                }
                else {
                    bool temp38 = assignment_tmp9.x < minimum;
                    if (temp38) {
                        discard;
                    }
                    else {
                        vec4 color21 = assignment_tmp9 + const33;
                        color_1 = color21;
                    }
                    
                }
                
                vec4 gla_copyout_gl_FragColor = color_1 * otherColor;
                gla_copyout_gl_FragColor32_0 = gla_copyout_gl_FragColor;
                gl_FragColor = gla_copyout_gl_FragColor32_0;
                return;
            }
            
        }
        else {
            if (b) {
                discard;
            }
            else {
                gla_copyout_gl_FragColor32_0 = const27;
                gl_FragColor = gla_copyout_gl_FragColor32_0;
                
            }
            
        }
        
    }
    
}
