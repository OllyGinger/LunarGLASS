
Top IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, float }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct3 = type { %lunarStruct2, i32, float, %lunarStruct1 }

@foo3 = external addrspace(2) constant %lunarStruct3
@foo2 = external addrspace(2) constant %lunarStruct2
@gl_FragColor = internal global <4 x float> zeroinitializer
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %assignment_tmp = alloca %lunarStruct2
  %locals2_s1_1 = alloca %lunarStruct1
  %0 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0)
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %assignment_tmp1 = load %lunarStruct2 addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0)
  store %lunarStruct2 %assignment_tmp1, %lunarStruct2* %assignment_tmp
  %2 = load %lunarStruct2* %assignment_tmp
  %locals2_s1_12 = extractvalue %lunarStruct2 %2, 2
  store %lunarStruct1 %locals2_s1_12, %lunarStruct1* %locals2_s1_1
  br label %ifmerge

else:                                             ; preds = %entry
  %locals2_s1_13 = load %lunarStruct1 addrspace(2)* getelementptr inbounds (%lunarStruct2 addrspace(2)* @foo2, i32 0, i32 2)
  store %lunarStruct1 %locals2_s1_13, %lunarStruct1* %locals2_s1_1
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %3 = load %lunarStruct1* %locals2_s1_1
  %4 = extractvalue %lunarStruct1 %3, 1
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %5 = load i32 addrspace(1)* @"sampler2D sampler"
  %6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %5, i32 0, <2 x float> %coord)
  %7 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %4, i32 0)
  %gl_FragColor = fmul <4 x float> %7, %6
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %8 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %8)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, float }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct3 = type { %lunarStruct2, i32, float, %lunarStruct1 }

@foo3 = external addrspace(2) constant %lunarStruct3
@foo2 = external addrspace(2) constant %lunarStruct2
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0
  %0 = load i32 addrspace(2)* %gla_constGEP
  %1 = icmp sgt i32 %0, 0
  %gla_constGEP5 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 2
  %gla_constGEP6 = getelementptr %lunarStruct2 addrspace(2)* @foo2, i32 0, i32 2
  %select = select i1 %1, %lunarStruct1 addrspace(2)* %gla_constGEP5, %lunarStruct1 addrspace(2)* %gla_constGEP6
  %2 = getelementptr inbounds %lunarStruct1 addrspace(2)* %select, i32 0, i32 1
  %3 = load float addrspace(2)* %2
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %4 = load i32 addrspace(1)* @"sampler2D sampler"
  %5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %4, i32 0, <2 x float> %coord)
  %6 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float %3, i32 0)
  %gl_FragColor = fmul <4 x float> %6, %5
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32(float, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind
compiling structAssignment.frag...
uniform sampler2D sampler ; 
varying vec2 coord ; 
struct lunarStruct1 { int i ; float f ; } ; 
struct lunarStruct2 { int i ; float f ; lunarStruct1 s1_1 ; } ; 
struct lunarStruct3 { lunarStruct2 s2_1 ; int i ; float f ; lunarStruct1 s1_1 ; } ; 
uniform lunarStruct1 foo ; 
uniform lunarStruct2 foo2 ; 
uniform lunarStruct3 foo3 ; 
void  main (){
lunarStruct2 locals2 ; if ( foo3 . s2_1 . i > 0 ) locals2 = foo3 . s2_1 ; else locals2 = foo2 ; gl_FragColor = locals2 . s1_1 . f * texture2D ( sampler , coord ) ; }



(
(declare (uniform ) lunarStruct3 foo3)
(declare (uniform ) lunarStruct2 foo2)
(declare (in ) vec2 coord)
(declare (uniform ) sampler2D sampler)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (declare (temporary ) lunarStruct1 locals2_s1_1)
      (if (expression bool > (record_ref (record_ref (var_ref foo3)  s2_1)  i) (constant int (0)) ) (
        (declare (temporary ) lunarStruct2 assignment_tmp)
        (assign (constant bool (1)) () (var_ref assignment_tmp)  (record_ref (var_ref foo3)  s2_1) ) 
        (assign (constant bool (1)) () (var_ref locals2_s1_1)  (record_ref (var_ref assignment_tmp)  s1_1) ) 
      )
      (
        (assign (constant bool (1)) () (var_ref locals2_s1_1)  (record_ref (var_ref foo2)  s1_1) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (expression vec4 * (record_ref (var_ref locals2_s1_1)  f) (tex (var_ref sampler)  (var_ref coord)  (0 0 0) 1 () )) ) 
    ))

)


)
// LunarGOO output
#version 130
struct lunarStruct1 {
    int member0;
    float member1;
};

struct lunarStruct2 {
    int member0;
    float member1;
    lunarStruct1 member2;
};

struct lunarStruct3 {
    lunarStruct2 member0;
    int member1;
    float member2;
    lunarStruct1 member3;
};

uniform lunarStruct3 foo3;
uniform lunarStruct2 foo2;
uniform sampler2D sampler;
const int const23_0 = 0;
in vec2 coord;

void main()
{
    int temp21 = foo3.member0.member0;
    bool temp22 = temp21 > const23_0;
    lunarStruct1 select = temp22 ? foo3.member0.member2 : foo2.member2;
    float temp25 = select.member1;
    vec4 temp26 = texture2D(sampler, coord);
    vec4 temp27 = vec4(temp25);
    vec4 gla_copyout_gl_FragColor = temp27 * temp26;
    gl_FragColor = gla_copyout_gl_FragColor;
    
}
