
Top IR:
; ModuleID = 'Glslang'

@c = external addrspace(2) constant i32
@x = global float 0.000000e+00
@d = external addrspace(2) constant i32
@color = global float 0.000000e+00
@v = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %param74 = alloca i32
  %param73 = alloca <4 x float>
  %param72 = alloca <4 x float>
  %param67 = alloca i32
  %param66 = alloca <4 x float>
  %param = alloca <4 x float>
  %j = alloca i32
  %i = alloca i32
  %f = alloca float
  %local = alloca i32
  %local1 = load i32 addrspace(2)* @c, !gla.uniform !1
  store i32 %local1, i32* %local
  %0 = load i32* %local
  %local2 = add i32 %0, 1, !gla.precision !9
  store i32 %local2, i32* %local
  %1 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %1, label %switch-segment4 [
    i32 1, label %switch-segment
    i32 2, label %switch-segment3
  ]

switch-segment:                                   ; preds = %entry
  %2 = load float* @x
  %f6 = call float @llvm.gla.fSin.f32.f32(float %2), !gla.precision !9
  store float %f6, float* %f
  br label %switch-merge

switch-segment3:                                  ; preds = %entry
  %3 = load float* @x
  %f8 = call float @llvm.gla.fCos.f32.f32(float %3), !gla.precision !9
  store float %f8, float* %f
  br label %switch-merge

switch-segment4:                                  ; preds = %entry
  %4 = load float* @x
  %f10 = call float @llvm.gla.fTan.f32.f32(float %4), !gla.precision !9
  store float %f10, float* %f
  br label %switch-merge

switch-merge:                                     ; preds = %switch-segment4, %switch-segment3, %switch-segment
  %5 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %5, label %switch-segment13 [
    i32 1, label %switch-segment11
    i32 2, label %switch-segment12
  ]

switch-segment11:                                 ; preds = %switch-merge
  %6 = load float* @x
  %f15 = call float @llvm.gla.fSin.f32.f32(float %6), !gla.precision !9
  %7 = load float* %f
  %f16 = fadd float %7, %f15, !gla.precision !9
  store float %f16, float* %f
  br label %switch-segment12

switch-segment12:                                 ; preds = %switch-segment11, %switch-merge
  %8 = load float* @x
  %f17 = call float @llvm.gla.fCos.f32.f32(float %8), !gla.precision !9
  %9 = load float* %f
  %f18 = fadd float %9, %f17, !gla.precision !9
  store float %f18, float* %f
  br label %switch-merge14

switch-segment13:                                 ; preds = %switch-merge
  %10 = load float* @x
  %f19 = call float @llvm.gla.fTan.f32.f32(float %10), !gla.precision !9
  %11 = load float* %f
  %f20 = fadd float %11, %f19, !gla.precision !9
  store float %f20, float* %f
  br label %switch-merge14

switch-merge14:                                   ; preds = %switch-segment13, %switch-segment12
  %12 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %12, label %switch-merge23 [
    i32 1, label %switch-segment21
    i32 2, label %switch-segment22
  ]

switch-segment21:                                 ; preds = %switch-merge14
  %13 = load float* @x
  %f24 = call float @llvm.gla.fSin.f32.f32(float %13), !gla.precision !9
  %14 = load float* %f
  %f25 = fadd float %14, %f24, !gla.precision !9
  store float %f25, float* %f
  br label %switch-merge23

switch-segment22:                                 ; preds = %switch-merge14
  %15 = load float* @x
  %f26 = call float @llvm.gla.fCos.f32.f32(float %15), !gla.precision !9
  %16 = load float* %f
  %f27 = fadd float %16, %f26, !gla.precision !9
  store float %f27, float* %f
  br label %switch-merge23

switch-merge23:                                   ; preds = %switch-segment22, %switch-segment21, %switch-merge14
  %17 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %17, label %switch-segment30 [
    i32 1, label %switch-segment28
    i32 2, label %switch-segment29
  ]

switch-segment28:                                 ; preds = %switch-merge23
  %18 = load float* @x
  %f32 = call float @llvm.gla.fSin.f32.f32(float %18), !gla.precision !9
  %19 = load float* %f
  %f33 = fadd float %19, %f32, !gla.precision !9
  store float %f33, float* %f
  br label %switch-merge31

switch-segment29:                                 ; preds = %switch-merge23
  %20 = load i32 addrspace(2)* @d, !gla.uniform !3
  switch i32 %20, label %switch-merge36 [
    i32 1, label %switch-segment34
    i32 2, label %switch-segment35
  ]

switch-segment30:                                 ; preds = %switch-merge23
  %21 = load float* @x
  %f39 = call float @llvm.gla.fTan.f32.f32(float %21), !gla.precision !9
  %22 = load float* %f
  %f40 = fadd float %22, %f39, !gla.precision !9
  store float %f40, float* %f
  br label %switch-merge31

switch-merge31:                                   ; preds = %switch-segment30, %switch-merge36, %switch-segment28
  store i32 0, i32* %i
  br label %loop-header

switch-segment34:                                 ; preds = %switch-segment29
  %23 = load float* @x
  %24 = load float* @x
  %25 = fmul float %23, %24, !gla.precision !9
  %26 = load float* @x
  %27 = fmul float %25, %26, !gla.precision !9
  %28 = load float* %f
  %f37 = fadd float %28, %27, !gla.precision !9
  store float %f37, float* %f
  br label %switch-merge36

switch-segment35:                                 ; preds = %switch-segment29
  %29 = load float* @x
  %30 = load float* @x
  %31 = fmul float %29, %30, !gla.precision !9
  %32 = load float* %f
  %f38 = fadd float %32, %31, !gla.precision !9
  store float %f38, float* %f
  br label %switch-merge36

switch-merge36:                                   ; preds = %switch-segment35, %switch-segment34, %switch-segment29
  br label %switch-merge31

loop-header:                                      ; preds = %post-loop-continue64, %ifmerge62, %switch-merge31
  %33 = load i32* %i
  %34 = icmp slt i32 %33, 10
  %35 = xor i1 %34, true
  br i1 %35, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge65

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %36 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %36, label %switch-segment43 [
    i32 1, label %switch-segment41
    i32 2, label %switch-segment42
  ]

switch-segment41:                                 ; preds = %ifmerge
  %37 = load float* @x
  %f45 = call float @llvm.gla.fSin.f32.f32(float %37), !gla.precision !9
  %38 = load float* %f
  %f46 = fadd float %38, %f45, !gla.precision !9
  store float %f46, float* %f
  store i32 20, i32* %j
  br label %loop-header47

switch-segment42:                                 ; preds = %ifmerge
  %39 = load float* @x
  %f56 = call float @llvm.gla.fCos.f32.f32(float %39), !gla.precision !9
  %40 = load float* %f
  %f57 = fadd float %40, %f56, !gla.precision !9
  store float %f57, float* %f
  br label %switch-merge44

switch-segment43:                                 ; preds = %ifmerge
  %41 = load float* @x
  %f58 = call float @llvm.gla.fTan.f32.f32(float %41), !gla.precision !9
  %42 = load float* %f
  %f59 = fadd float %42, %f58, !gla.precision !9
  store float %f59, float* %f
  br label %switch-merge44

switch-merge44:                                   ; preds = %switch-segment43, %switch-segment42, %loop-merge
  %43 = load float* %f
  %44 = fcmp olt float %43, 0x400B70A3E0000000
  br i1 %44, label %then60, label %ifmerge62

loop-header47:                                    ; preds = %post-loop-continue, %ifmerge54, %switch-segment41
  %45 = load i32* %j
  %46 = icmp slt i32 %45, 30
  %47 = xor i1 %46, true
  br i1 %47, label %then48, label %ifmerge50

then48:                                           ; preds = %loop-header47
  br label %loop-merge

post-loop-break49:                                ; No predecessors!
  br label %ifmerge50

ifmerge50:                                        ; preds = %loop-header47, %post-loop-break49
  %48 = load float* %f
  %f51 = fadd float %48, 1.000000e+00, !gla.precision !9
  store float %f51, float* %f
  %49 = load float* %f
  %50 = fcmp olt float %49, 0x40590CCCC0000000
  br i1 %50, label %then52, label %ifmerge54

then52:                                           ; preds = %ifmerge50
  br label %loop-merge

post-loop-break53:                                ; No predecessors!
  br label %ifmerge54

ifmerge54:                                        ; preds = %ifmerge50, %post-loop-break53
  %51 = load i32* %j
  %j55 = add i32 %51, 1, !gla.precision !9
  store i32 %j55, i32* %j
  br label %loop-header47

post-loop-continue:                               ; No predecessors!
  br label %loop-header47

loop-merge:                                       ; preds = %then52, %then48
  br label %switch-merge44

then60:                                           ; preds = %switch-merge44
  br label %loop-merge65

post-loop-break61:                                ; No predecessors!
  br label %ifmerge62

ifmerge62:                                        ; preds = %switch-merge44, %post-loop-break61
  %52 = load i32* %i
  %i63 = add i32 %52, 1, !gla.precision !9
  store i32 %i63, i32* %i
  br label %loop-header

post-loop-continue64:                             ; No predecessors!
  br label %loop-header

loop-merge65:                                     ; preds = %then60, %then
  %53 = load float* %f
  %54 = load i32* %local
  %55 = sitofp i32 %54 to float, !gla.precision !9
  %color = fadd float %53, %55, !gla.precision !9
  store float %color, float* @color
  %param68 = load <4 x float> addrspace(2)* @v, !gla.uniform !4
  store <4 x float> %param68, <4 x float>* %param
  %param6669 = load <4 x float> addrspace(2)* @v, !gla.uniform !4
  store <4 x float> %param6669, <4 x float>* %param66
  %param6770 = load i32 addrspace(2)* @c, !gla.uniform !1
  store i32 %param6770, i32* %param67
  %56 = call <4 x float> @"foo1(vf4;vf4;i1;"(<4 x float>* %param, <4 x float>* %param66, i32* %param67)
  %57 = extractelement <4 x float> %56, i32 1, !gla.precision !9
  %58 = load float* @color
  %color71 = fadd float %58, %57, !gla.precision !9
  store float %color71, float* @color
  %param7275 = load <4 x float> addrspace(2)* @v, !gla.uniform !4
  store <4 x float> %param7275, <4 x float>* %param72
  %param7376 = load <4 x float> addrspace(2)* @v, !gla.uniform !4
  store <4 x float> %param7376, <4 x float>* %param73
  %param7477 = load i32 addrspace(2)* @c, !gla.uniform !1
  store i32 %param7477, i32* %param74
  %59 = call <4 x float> @"foo2(vf4;vf4;i1;"(<4 x float>* %param72, <4 x float>* %param73, i32* %param74)
  %60 = extractelement <4 x float> %59, i32 2, !gla.precision !9
  %61 = load float* @color
  %color78 = fadd float %61, %60, !gla.precision !9
  store float %color78, float* @color
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge65
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc <4 x float> @"foo1(vf4;vf4;i1;"(<4 x float>*, <4 x float>*, i32*) #0 {
entry:
  %3 = load i32* %2
  switch i32 %3, label %switch-merge [
    i32 0, label %switch-segment
    i32 2, label %switch-segment1
    i32 1, label %switch-segment1
    i32 3, label %switch-segment2
  ]

switch-segment:                                   ; preds = %entry
  %4 = load <4 x float>* %0
  ret <4 x float> %4

switch-segment1:                                  ; preds = %post-return, %entry, %entry
  %5 = load <4 x float>* %1
  ret <4 x float> %5

switch-segment2:                                  ; preds = %post-return3, %entry
  %6 = load <4 x float>* %0
  %7 = load <4 x float>* %1
  %8 = fmul <4 x float> %6, %7, !gla.precision !9
  ret <4 x float> %8

switch-merge:                                     ; preds = %post-return4, %entry
  ret <4 x float> zeroinitializer

post-return:                                      ; No predecessors!
  br label %switch-segment1

post-return3:                                     ; No predecessors!
  br label %switch-segment2

post-return4:                                     ; No predecessors!
  br label %switch-merge

post-return5:                                     ; No predecessors!
  unreachable
}

; Function Attrs: alwaysinline
define internal fastcc <4 x float> @"foo2(vf4;vf4;i1;"(<4 x float>*, <4 x float>*, i32*) #0 {
entry:
  %3 = load i32* %2
  switch i32 %3, label %switch-merge [
    i32 0, label %switch-segment
    i32 2, label %switch-segment1
    i32 1, label %switch-segment2
    i32 3, label %switch-segment3
  ]

switch-segment:                                   ; preds = %entry
  %4 = load <4 x float>* %0
  ret <4 x float> %4

switch-segment1:                                  ; preds = %post-return, %entry
  ret <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>

switch-segment2:                                  ; preds = %post-return4, %entry
  %5 = load <4 x float>* %1
  ret <4 x float> %5

switch-segment3:                                  ; preds = %post-return5, %entry
  %6 = load <4 x float>* %0
  %7 = load <4 x float>* %1
  %8 = fmul <4 x float> %6, %7, !gla.precision !9
  ret <4 x float> %8

switch-merge:                                     ; preds = %post-return6, %entry
  ret <4 x float> zeroinitializer

post-return:                                      ; No predecessors!
  br label %switch-segment1

post-return4:                                     ; No predecessors!
  br label %switch-segment2

post-return5:                                     ; No predecessors!
  br label %switch-segment3

post-return6:                                     ; No predecessors!
  br label %switch-merge

post-return7:                                     ; No predecessors!
  unreachable
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fSin.f32.f32(float) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fCos.f32.f32(float) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTan.f32.f32(float) #1

attributes #0 = { alwaysinline }
attributes #1 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4}
!gla.inputs = !{!5}
!gla.outputs = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"c", i32 12, i32* @c_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null}
!3 = metadata !{metadata !"d", i32 12, i32* @d_typeProxy, metadata !2}
!4 = metadata !{metadata !"v", i32 12, <4 x float>* @v_typeProxy, metadata !2}
!5 = metadata !{metadata !"x", i32 1, float* @x_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 2, i32 1024, null, i32 1}
!7 = metadata !{metadata !"color", i32 7, float* @color_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 2, i32 1025, null, i32 0}
!9 = metadata !{i32 2}


Bottom IR:
; ModuleID = 'Glslang'

@c = external addrspace(2) constant i32
@x = global float 0.000000e+00
@d = external addrspace(2) constant i32
@color = global float 0.000000e+00
@v = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %local1 = load i32 addrspace(2)* @c, align 4, !gla.uniform !1
  %local2 = add i32 %local1, 1, !gla.precision !9
  switch i32 %local1, label %switch-segment4 [
    i32 1, label %switch-segment
    i32 2, label %switch-segment3
  ]

switch-segment:                                   ; preds = %entry
  %0 = load float* @x, align 4
  %f6 = call float @llvm.gla.fSin.f32.f32(float %0), !gla.precision !9
  br label %switch-merge

switch-segment3:                                  ; preds = %entry
  %1 = load float* @x, align 4
  %f8 = call float @llvm.gla.fCos.f32.f32(float %1), !gla.precision !9
  br label %switch-merge

switch-segment4:                                  ; preds = %entry
  %2 = load float* @x, align 4
  %f10 = call float @llvm.gla.fTan.f32.f32(float %2), !gla.precision !9
  br label %switch-merge

switch-merge:                                     ; preds = %switch-segment4, %switch-segment3, %switch-segment
  %3 = phi float [ %2, %switch-segment4 ], [ %1, %switch-segment3 ], [ %0, %switch-segment ]
  %f.0 = phi float [ %f10, %switch-segment4 ], [ %f8, %switch-segment3 ], [ %f6, %switch-segment ]
  switch i32 %local1, label %switch-segment13 [
    i32 1, label %switch-segment11
    i32 2, label %switch-segment12
  ]

switch-segment11:                                 ; preds = %switch-merge
  %f15 = call float @llvm.gla.fSin.f32.f32(float %3), !gla.precision !9
  %f16 = fadd float %f.0, %f15, !gla.precision !9
  br label %switch-segment12

switch-segment12:                                 ; preds = %switch-segment11, %switch-merge
  %f.1 = phi float [ %f.0, %switch-merge ], [ %f16, %switch-segment11 ]
  %f17 = call float @llvm.gla.fCos.f32.f32(float %3), !gla.precision !9
  %f18 = fadd float %f.1, %f17, !gla.precision !9
  br label %switch-merge14

switch-segment13:                                 ; preds = %switch-merge
  %f19 = call float @llvm.gla.fTan.f32.f32(float %3), !gla.precision !9
  %f20 = fadd float %f.0, %f19, !gla.precision !9
  br label %switch-merge14

switch-merge14:                                   ; preds = %switch-segment13, %switch-segment12
  %f.2 = phi float [ %f20, %switch-segment13 ], [ %f18, %switch-segment12 ]
  switch i32 %local1, label %switch-merge23 [
    i32 1, label %switch-segment21
    i32 2, label %switch-segment22
  ]

switch-segment21:                                 ; preds = %switch-merge14
  %f24 = call float @llvm.gla.fSin.f32.f32(float %3), !gla.precision !9
  %f25 = fadd float %f.2, %f24, !gla.precision !9
  br label %switch-merge23

switch-segment22:                                 ; preds = %switch-merge14
  %f26 = call float @llvm.gla.fCos.f32.f32(float %3), !gla.precision !9
  %f27 = fadd float %f.2, %f26, !gla.precision !9
  br label %switch-merge23

switch-merge23:                                   ; preds = %switch-segment22, %switch-segment21, %switch-merge14
  %f.3 = phi float [ %f.2, %switch-merge14 ], [ %f27, %switch-segment22 ], [ %f25, %switch-segment21 ]
  switch i32 %local1, label %switch-segment30 [
    i32 1, label %switch-segment28
    i32 2, label %switch-segment29
  ]

switch-segment28:                                 ; preds = %switch-merge23
  %f32 = call float @llvm.gla.fSin.f32.f32(float %3), !gla.precision !9
  %f33 = fadd float %f.3, %f32, !gla.precision !9
  br label %switch-merge31

switch-segment29:                                 ; preds = %switch-merge23
  %4 = load i32 addrspace(2)* @d, align 4, !gla.uniform !3
  switch i32 %4, label %switch-merge36 [
    i32 1, label %switch-segment34
    i32 2, label %switch-segment35
  ]

switch-segment30:                                 ; preds = %switch-merge23
  %f39 = call float @llvm.gla.fTan.f32.f32(float %3), !gla.precision !9
  %f40 = fadd float %f.3, %f39, !gla.precision !9
  br label %switch-merge31

switch-merge31:                                   ; preds = %switch-segment30, %switch-merge36, %switch-segment28
  %f.4 = phi float [ %f40, %switch-segment30 ], [ %f.5, %switch-merge36 ], [ %f33, %switch-segment28 ]
  %f58 = call float @llvm.gla.fTan.f32.f32(float %3), !gla.precision !9
  %f45 = call float @llvm.gla.fSin.f32.f32(float %3), !gla.precision !9
  %f56 = call float @llvm.gla.fCos.f32.f32(float %3), !gla.precision !9
  br label %loop-header

switch-segment34:                                 ; preds = %switch-segment29
  %5 = fmul float %3, %3, !gla.precision !9
  %6 = fmul float %3, %5, !gla.precision !9
  %f37 = fadd float %f.3, %6, !gla.precision !9
  br label %switch-merge36

switch-segment35:                                 ; preds = %switch-segment29
  %7 = fmul float %3, %3, !gla.precision !9
  %f38 = fadd float %f.3, %7, !gla.precision !9
  br label %switch-merge36

switch-merge36:                                   ; preds = %switch-segment35, %switch-segment34, %switch-segment29
  %f.5 = phi float [ %f.3, %switch-segment29 ], [ %f38, %switch-segment35 ], [ %f37, %switch-segment34 ]
  br label %switch-merge31

loop-header:                                      ; preds = %switch-merge44, %switch-merge31
  %i.0 = phi i32 [ 0, %switch-merge31 ], [ %i63, %switch-merge44 ]
  %f.6 = phi float [ %f.4, %switch-merge31 ], [ %f.7, %switch-merge44 ]
  %8 = icmp sgt i32 %i.0, 9
  br i1 %8, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge65

ifmerge:                                          ; preds = %loop-header
  switch i32 %local1, label %switch-segment43 [
    i32 1, label %switch-segment41
    i32 2, label %switch-segment42
  ]

switch-segment41:                                 ; preds = %ifmerge
  %f46 = fadd float %f.6, %f45, !gla.precision !9
  br label %loop-header47

switch-segment42:                                 ; preds = %ifmerge
  %f57 = fadd float %f.6, %f56, !gla.precision !9
  br label %switch-merge44

switch-segment43:                                 ; preds = %ifmerge
  %f59 = fadd float %f.6, %f58, !gla.precision !9
  br label %switch-merge44

switch-merge44:                                   ; preds = %switch-segment43, %switch-segment42, %loop-merge
  %f.7 = phi float [ %f59, %switch-segment43 ], [ %f57, %switch-segment42 ], [ %f.9, %loop-merge ]
  %9 = fcmp olt float %f.7, 0x400B70A3E0000000
  %i63 = add i32 %i.0, 1, !gla.precision !9
  br i1 %9, label %then60, label %loop-header

loop-header47:                                    ; preds = %ifmerge50, %switch-segment41
  %j.0 = phi i32 [ 20, %switch-segment41 ], [ %j55, %ifmerge50 ]
  %f.8 = phi float [ %f46, %switch-segment41 ], [ %f51, %ifmerge50 ]
  %10 = icmp sgt i32 %j.0, 29
  br i1 %10, label %then48, label %ifmerge50

then48:                                           ; preds = %loop-header47
  br label %loop-merge

ifmerge50:                                        ; preds = %loop-header47
  %f51 = fadd float %f.8, 1.000000e+00, !gla.precision !9
  %11 = fcmp olt float %f51, 0x40590CCCC0000000
  %j55 = add i32 %j.0, 1, !gla.precision !9
  br i1 %11, label %then52, label %loop-header47

then52:                                           ; preds = %ifmerge50
  br label %loop-merge

loop-merge:                                       ; preds = %then52, %then48
  %f.9 = phi float [ %f.8, %then48 ], [ %f51, %then52 ]
  br label %switch-merge44

then60:                                           ; preds = %switch-merge44
  br label %loop-merge65

loop-merge65:                                     ; preds = %then60, %then
  %f.10 = phi float [ %f.6, %then ], [ %f.7, %then60 ]
  %12 = sitofp i32 %local2 to float, !gla.precision !9
  %color = fadd float %12, %f.10, !gla.precision !9
  store float %color, float* @color, align 4
  %param68 = load <4 x float> addrspace(2)* @v, align 16, !gla.uniform !4
  switch i32 %local1, label %switch-merge.i [
    i32 0, label %switch-segment.i
    i32 2, label %switch-segment1.i
    i32 1, label %switch-segment1.i
    i32 3, label %switch-segment2.i
  ]

switch-segment.i:                                 ; preds = %loop-merge65
  br label %"foo1(vf4;vf4;i1;.exit"

switch-segment1.i:                                ; preds = %loop-merge65, %loop-merge65
  br label %"foo1(vf4;vf4;i1;.exit"

switch-segment2.i:                                ; preds = %loop-merge65
  %13 = fmul <4 x float> %param68, %param68, !gla.precision !9
  br label %"foo1(vf4;vf4;i1;.exit"

switch-merge.i:                                   ; preds = %loop-merge65
  br label %"foo1(vf4;vf4;i1;.exit"

"foo1(vf4;vf4;i1;.exit":                          ; preds = %switch-merge.i, %switch-segment2.i, %switch-segment1.i, %switch-segment.i
  %14 = phi <4 x float> [ %param68, %switch-segment.i ], [ %param68, %switch-segment1.i ], [ %13, %switch-segment2.i ], [ zeroinitializer, %switch-merge.i ]
  %15 = extractelement <4 x float> %14, i32 1, !gla.precision !9
  %color71 = fadd float %color, %15, !gla.precision !9
  store float %color71, float* @color, align 4
  switch i32 %local1, label %switch-merge.i82 [
    i32 0, label %switch-segment.i79
    i32 2, label %switch-segment1.i80
    i32 1, label %switch-segment2.i81
    i32 3, label %switch-segment3.i
  ]

switch-segment.i79:                               ; preds = %"foo1(vf4;vf4;i1;.exit"
  br label %"foo2(vf4;vf4;i1;.exit"

switch-segment1.i80:                              ; preds = %"foo1(vf4;vf4;i1;.exit"
  br label %"foo2(vf4;vf4;i1;.exit"

switch-segment2.i81:                              ; preds = %"foo1(vf4;vf4;i1;.exit"
  br label %"foo2(vf4;vf4;i1;.exit"

switch-segment3.i:                                ; preds = %"foo1(vf4;vf4;i1;.exit"
  %16 = fmul <4 x float> %param68, %param68, !gla.precision !9
  br label %"foo2(vf4;vf4;i1;.exit"

switch-merge.i82:                                 ; preds = %"foo1(vf4;vf4;i1;.exit"
  br label %"foo2(vf4;vf4;i1;.exit"

"foo2(vf4;vf4;i1;.exit":                          ; preds = %switch-merge.i82, %switch-segment3.i, %switch-segment2.i81, %switch-segment1.i80, %switch-segment.i79
  %17 = phi <4 x float> [ %param68, %switch-segment.i79 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %switch-segment1.i80 ], [ %param68, %switch-segment2.i81 ], [ %16, %switch-segment3.i ], [ zeroinitializer, %switch-merge.i82 ]
  %18 = extractelement <4 x float> %17, i32 2, !gla.precision !9
  %color78 = fadd float %color71, %18, !gla.precision !9
  store float %color78, float* @color, align 4
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %"foo2(vf4;vf4;i1;.exit"
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fSin.f32.f32(float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fCos.f32.f32(float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTan.f32.f32(float) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4}
!gla.inputs = !{!5}
!gla.outputs = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"c", i32 12, i32* @c_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null}
!3 = metadata !{metadata !"d", i32 12, i32* @d_typeProxy, metadata !2}
!4 = metadata !{metadata !"v", i32 12, <4 x float>* @v_typeProxy, metadata !2}
!5 = metadata !{metadata !"x", i32 1, float* @x_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 2, i32 1024, null, i32 1}
!7 = metadata !{metadata !"color", i32 7, float* @color_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 2, i32 1025, null, i32 0}
!9 = metadata !{i32 2}

***Unsupported functionality: switch terminator

Linked fragment stage:

ERROR: Linking fragment stage: Missing entry point: Each stage requires one "void main()" entry point

