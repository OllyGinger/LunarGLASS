
Top IR:
; ModuleID = 'Glslang'

@BaseColor_shadow = internal global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@FragColor_shadow = internal global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float
@d13 = external addrspace(2) constant float
@d19 = external addrspace(2) constant float
@d20 = external addrspace(2) constant float
@d21 = external addrspace(2) constant float
@d22 = external addrspace(2) constant float
@d23 = external addrspace(2) constant float
@d24 = external addrspace(2) constant float
@d25 = external addrspace(2) constant float
@d26 = external addrspace(2) constant float
@d27 = external addrspace(2) constant float
@d28 = external addrspace(2) constant float
@d29 = external addrspace(2) constant float
@d30 = external addrspace(2) constant float
@d31 = external addrspace(2) constant float
@d32 = external addrspace(2) constant float
@d33 = external addrspace(2) constant float
@d34 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %i121 = alloca i32
  %i108 = alloca i32
  %i95 = alloca i32
  %i79 = alloca i32
  %i70 = alloca i32
  %i = alloca i32
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor, <4 x float>* @BaseColor_shadow
  %color1 = load <4 x float>* @BaseColor_shadow
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %post-loop-break11, %entry
  br i1 false, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fcmp olt float %1, 0x3FD51EB860000000
  br i1 %2, label %then2, label %ifmerge5

then2:                                            ; preds = %ifmerge
  %3 = load <4 x float>* %color
  %color3 = fadd <4 x float> %3, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color3, <4 x float>* %color
  br label %loop-merge

post-loop-break4:                                 ; No predecessors!
  br label %ifmerge5

ifmerge5:                                         ; preds = %ifmerge, %post-loop-break4
  %4 = load <4 x float>* %color
  %5 = extractelement <4 x float> %4, i32 0
  %6 = fcmp olt float %5, 0x3FE51EB860000000
  br i1 %6, label %then6, label %ifmerge9

then6:                                            ; preds = %ifmerge5
  %7 = load <4 x float>* %color
  %color7 = fadd <4 x float> %7, <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>
  store <4 x float> %color7, <4 x float>* %color
  br label %loop-merge

post-loop-break8:                                 ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge5, %post-loop-break8
  %8 = load <4 x float>* %color
  %color10 = fadd <4 x float> %8, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color10, <4 x float>* %color
  br label %loop-merge

post-loop-break11:                                ; No predecessors!
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %ifmerge9, %then6, %then2, %then
  br label %loop-header12

loop-header12:                                    ; preds = %post-loop-continue17, %ifmerge15, %loop-merge
  %9 = load <4 x float>* %color
  %10 = extractelement <4 x float> %9, i32 0
  %11 = load float addrspace(2)* @d, !gla.uniform !3
  %12 = fcmp olt float %10, %11
  %13 = xor i1 %12, true
  br i1 %13, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  br label %loop-merge18

post-loop-break14:                                ; No predecessors!
  br label %ifmerge15

ifmerge15:                                        ; preds = %loop-header12, %post-loop-break14
  %14 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %15 = load <4 x float>* %color
  %color16 = fadd <4 x float> %15, %14
  store <4 x float> %color16, <4 x float>* %color
  br label %loop-header12

post-loop-continue17:                             ; No predecessors!
  br label %loop-header12

loop-merge18:                                     ; preds = %then13
  br label %loop-header19

loop-header19:                                    ; preds = %post-loop-continue28, %ifmerge26, %then24, %loop-merge18
  %16 = load <4 x float>* %color
  %17 = extractelement <4 x float> %16, i32 2
  %18 = load float addrspace(2)* @d, !gla.uniform !3
  %19 = fcmp olt float %17, %18
  %20 = xor i1 %19, true
  br i1 %20, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header19
  br label %loop-merge29

post-loop-break21:                                ; No predecessors!
  br label %ifmerge22

ifmerge22:                                        ; preds = %loop-header19, %post-loop-break21
  %21 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %22 = load <4 x float>* %color
  %color23 = fadd <4 x float> %22, %21
  store <4 x float> %color23, <4 x float>* %color
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(2)* @d, !gla.uniform !3
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then24, label %ifmerge26

then24:                                           ; preds = %ifmerge22
  br label %loop-header19

post-loop-continue25:                             ; No predecessors!
  br label %ifmerge26

ifmerge26:                                        ; preds = %ifmerge22, %post-loop-continue25
  %27 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %28 = load <4 x float>* %color
  %color27 = fadd <4 x float> %28, %27
  store <4 x float> %color27, <4 x float>* %color
  br label %loop-header19

post-loop-continue28:                             ; No predecessors!
  br label %loop-header19

loop-merge29:                                     ; preds = %then20
  br label %loop-header30

loop-header30:                                    ; preds = %post-loop-continue35, %ifmerge33, %loop-merge29
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 0
  %31 = fcmp olt float %30, 4.200000e+01
  %32 = xor i1 %31, true
  br i1 %32, label %then31, label %ifmerge33

then31:                                           ; preds = %loop-header30
  br label %loop-merge36

post-loop-break32:                                ; No predecessors!
  br label %ifmerge33

ifmerge33:                                        ; preds = %loop-header30, %post-loop-break32
  %33 = load <4 x float>* %color
  %color34 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color34, <4 x float>* %color
  br label %loop-header30

post-loop-continue35:                             ; No predecessors!
  br label %loop-header30

loop-merge36:                                     ; preds = %then31
  br label %loop-header37

loop-header37:                                    ; preds = %post-loop-continue42, %ifmerge40, %loop-merge36
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 3
  %36 = load float addrspace(2)* @d2, !gla.uniform !7
  %37 = fcmp olt float %35, %36
  %38 = load <4 x float>* %color
  %39 = extractelement <4 x float> %38, i32 1
  %40 = load float addrspace(2)* @d3, !gla.uniform !8
  %41 = fcmp olt float %39, %40
  %42 = and i1 %37, %41
  %43 = xor i1 %42, true
  br i1 %43, label %then38, label %ifmerge40

then38:                                           ; preds = %loop-header37
  br label %loop-merge43

post-loop-break39:                                ; No predecessors!
  br label %ifmerge40

ifmerge40:                                        ; preds = %loop-header37, %post-loop-break39
  %44 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %45 = load <4 x float>* %color
  %color41 = fadd <4 x float> %45, %44
  store <4 x float> %color41, <4 x float>* %color
  br label %loop-header37

post-loop-continue42:                             ; No predecessors!
  br label %loop-header37

loop-merge43:                                     ; preds = %then38
  br label %loop-header44

loop-header44:                                    ; preds = %post-loop-continue53, %ifmerge51, %loop-merge43
  %46 = load <4 x float>* %color
  %47 = extractelement <4 x float> %46, i32 2
  %48 = load float addrspace(2)* @d3, !gla.uniform !8
  %49 = fcmp olt float %47, %48
  %50 = xor i1 %49, true
  br i1 %50, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge54

post-loop-break46:                                ; No predecessors!
  br label %ifmerge47

ifmerge47:                                        ; preds = %loop-header44, %post-loop-break46
  %51 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %52 = load <4 x float>* %color
  %color48 = fadd <4 x float> %52, %51
  store <4 x float> %color48, <4 x float>* %color
  %53 = load <4 x float>* %color
  %54 = extractelement <4 x float> %53, i32 1
  %55 = load float addrspace(2)* @d4, !gla.uniform !11
  %56 = fcmp olt float %54, %55
  br i1 %56, label %then49, label %ifmerge51

then49:                                           ; preds = %ifmerge47
  br label %loop-merge54

post-loop-break50:                                ; No predecessors!
  br label %ifmerge51

ifmerge51:                                        ; preds = %ifmerge47, %post-loop-break50
  %57 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %58 = load <4 x float>* %color
  %color52 = fadd <4 x float> %58, %57
  store <4 x float> %color52, <4 x float>* %color
  br label %loop-header44

post-loop-continue53:                             ; No predecessors!
  br label %loop-header44

loop-merge54:                                     ; preds = %then49, %then45
  store i32 0, i32* %i
  br label %loop-header55

loop-header55:                                    ; preds = %post-loop-continue61, %ifmerge58, %loop-merge54
  %59 = load i32* %i
  %60 = load i32 addrspace(2)* @Count, !gla.uniform !12
  %61 = icmp slt i32 %59, %60
  %62 = xor i1 %61, true
  br i1 %62, label %then56, label %ifmerge58

then56:                                           ; preds = %loop-header55
  br label %loop-merge62

post-loop-break57:                                ; No predecessors!
  br label %ifmerge58

ifmerge58:                                        ; preds = %loop-header55, %post-loop-break57
  %63 = load <4 x float> addrspace(2)* @bigColor2, !gla.uniform !13
  %64 = load <4 x float>* %color
  %color59 = fadd <4 x float> %64, %63
  store <4 x float> %color59, <4 x float>* %color
  %65 = load i32* %i
  %i60 = add i32 %65, 1
  store i32 %i60, i32* %i
  br label %loop-header55

post-loop-continue61:                             ; No predecessors!
  br label %loop-header55

loop-merge62:                                     ; preds = %then56
  br label %loop-header63

loop-header63:                                    ; preds = %post-loop-continue68, %ifmerge67, %loop-merge62
  %66 = load <4 x float> addrspace(2)* @bigColor3, !gla.uniform !14
  %67 = load <4 x float>* %color
  %color64 = fadd <4 x float> %67, %66
  store <4 x float> %color64, <4 x float>* %color
  %68 = load <4 x float>* %color
  %69 = extractelement <4 x float> %68, i32 0
  %70 = load float addrspace(2)* @d2, !gla.uniform !7
  %71 = fcmp olt float %69, %70
  %72 = xor i1 %71, true
  br i1 %72, label %then65, label %ifmerge67

then65:                                           ; preds = %loop-header63
  br label %loop-merge69

post-loop-break66:                                ; No predecessors!
  br label %ifmerge67

ifmerge67:                                        ; preds = %loop-header63, %post-loop-break66
  br label %loop-header63

post-loop-continue68:                             ; No predecessors!
  br label %loop-header63

loop-merge69:                                     ; preds = %then65
  store i32 0, i32* %i70
  br label %loop-header71

loop-header71:                                    ; preds = %post-loop-continue77, %ifmerge74, %loop-merge69
  %73 = load i32* %i70
  %74 = icmp slt i32 %73, 42
  %75 = xor i1 %74, true
  br i1 %75, label %then72, label %ifmerge74

then72:                                           ; preds = %loop-header71
  br label %loop-merge78

post-loop-break73:                                ; No predecessors!
  br label %ifmerge74

ifmerge74:                                        ; preds = %loop-header71, %post-loop-break73
  %76 = load float addrspace(2)* @d3, !gla.uniform !8
  %77 = load <4 x float>* %color
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %76
  %80 = load <4 x float>* %color
  %color75 = insertelement <4 x float> %80, float %79, i32 2
  store <4 x float> %color75, <4 x float>* %color
  %81 = load i32* %i70
  %i7076 = add i32 %81, 1
  store i32 %i7076, i32* %i70
  br label %loop-header71

post-loop-continue77:                             ; No predecessors!
  br label %loop-header71

loop-merge78:                                     ; preds = %then72
  store i32 0, i32* %i79
  br label %loop-header80

loop-header80:                                    ; preds = %post-loop-continue93, %ifmerge91, %loop-merge78
  %82 = load i32* %i79
  %83 = icmp slt i32 %82, 100
  %84 = xor i1 %83, true
  br i1 %84, label %then81, label %ifmerge83

then81:                                           ; preds = %loop-header80
  br label %loop-merge94

post-loop-break82:                                ; No predecessors!
  br label %ifmerge83

ifmerge83:                                        ; preds = %loop-header80, %post-loop-break82
  %85 = load <4 x float>* %color
  %86 = extractelement <4 x float> %85, i32 2
  %87 = fcmp olt float %86, 2.000000e+01
  br i1 %87, label %then84, label %else

then84:                                           ; preds = %ifmerge83
  %88 = load <4 x float>* %color
  %89 = extractelement <4 x float> %88, i32 0
  %90 = fadd float %89, 1.000000e+00
  %91 = load <4 x float>* %color
  %color85 = insertelement <4 x float> %91, float %90, i32 0
  store <4 x float> %color85, <4 x float>* %color
  br label %ifmerge87

else:                                             ; preds = %ifmerge83
  %92 = load <4 x float>* %color
  %93 = extractelement <4 x float> %92, i32 1
  %94 = fadd float %93, 1.000000e+00
  %95 = load <4 x float>* %color
  %color86 = insertelement <4 x float> %95, float %94, i32 1
  store <4 x float> %color86, <4 x float>* %color
  br label %ifmerge87

ifmerge87:                                        ; preds = %else, %then84
  %96 = load <4 x float>* %color
  %97 = extractelement <4 x float> %96, i32 3
  %98 = fcmp olt float %97, 2.000000e+01
  br i1 %98, label %then88, label %ifmerge91

then88:                                           ; preds = %ifmerge87
  %99 = load <4 x float>* %color
  %100 = extractelement <4 x float> %99, i32 2
  %101 = load <4 x float>* %color
  %102 = extractelement <4 x float> %101, i32 1
  %103 = fcmp ogt float %100, %102
  br i1 %103, label %then89, label %ifmerge90

then89:                                           ; preds = %then88
  br label %ifmerge90

ifmerge90:                                        ; preds = %then88, %then89
  br label %ifmerge91

ifmerge91:                                        ; preds = %ifmerge87, %ifmerge90
  %104 = load i32* %i79
  %i7992 = add i32 %104, 1
  store i32 %i7992, i32* %i79
  br label %loop-header80

post-loop-continue93:                             ; No predecessors!
  br label %loop-header80

loop-merge94:                                     ; preds = %then81
  store i32 0, i32* %i95
  br label %loop-header96

loop-header96:                                    ; preds = %post-loop-continue106, %ifmerge104, %loop-merge94
  %105 = load i32* %i95
  %106 = icmp slt i32 %105, 120
  %107 = xor i1 %106, true
  br i1 %107, label %then97, label %ifmerge99

then97:                                           ; preds = %loop-header96
  br label %loop-merge107

post-loop-break98:                                ; No predecessors!
  br label %ifmerge99

ifmerge99:                                        ; preds = %loop-header96, %post-loop-break98
  %108 = load <4 x float>* %color
  %109 = extractelement <4 x float> %108, i32 2
  %110 = fcmp olt float %109, 2.000000e+01
  br i1 %110, label %then100, label %else102

then100:                                          ; preds = %ifmerge99
  %111 = load <4 x float>* %color
  %112 = extractelement <4 x float> %111, i32 0
  %113 = fadd float %112, 1.000000e+00
  %114 = load <4 x float>* %color
  %color101 = insertelement <4 x float> %114, float %113, i32 0
  store <4 x float> %color101, <4 x float>* %color
  br label %ifmerge104

else102:                                          ; preds = %ifmerge99
  %115 = load <4 x float>* %color
  %116 = extractelement <4 x float> %115, i32 1
  %117 = fadd float %116, 1.000000e+00
  %118 = load <4 x float>* %color
  %color103 = insertelement <4 x float> %118, float %117, i32 1
  store <4 x float> %color103, <4 x float>* %color
  br label %ifmerge104

ifmerge104:                                       ; preds = %else102, %then100
  %119 = load i32* %i95
  %i95105 = add i32 %119, 1
  store i32 %i95105, i32* %i95
  br label %loop-header96

post-loop-continue106:                            ; No predecessors!
  br label %loop-header96

loop-merge107:                                    ; preds = %then97
  store i32 0, i32* %i108
  br label %loop-header109

loop-header109:                                   ; preds = %post-loop-continue119, %ifmerge116, %then114, %loop-merge107
  %120 = load i32* %i108
  %121 = icmp slt i32 %120, 42
  %122 = xor i1 %121, true
  br i1 %122, label %then110, label %ifmerge112

then110:                                          ; preds = %loop-header109
  br label %loop-merge120

post-loop-break111:                               ; No predecessors!
  br label %ifmerge112

ifmerge112:                                       ; preds = %loop-header109, %post-loop-break111
  %123 = load float addrspace(2)* @d3, !gla.uniform !8
  %124 = load <4 x float>* %color
  %125 = extractelement <4 x float> %124, i32 2
  %126 = fadd float %125, %123
  %127 = load <4 x float>* %color
  %color113 = insertelement <4 x float> %127, float %126, i32 2
  store <4 x float> %color113, <4 x float>* %color
  %128 = load <4 x float>* %color
  %129 = extractelement <4 x float> %128, i32 0
  %130 = load float addrspace(2)* @d4, !gla.uniform !11
  %131 = fcmp olt float %129, %130
  br i1 %131, label %then114, label %ifmerge116

then114:                                          ; preds = %ifmerge112
  br label %loop-header109

post-loop-continue115:                            ; No predecessors!
  br label %ifmerge116

ifmerge116:                                       ; preds = %ifmerge112, %post-loop-continue115
  %132 = load <4 x float>* %color
  %133 = extractelement <4 x float> %132, i32 3
  %134 = fadd float %133, 1.000000e+00
  %135 = load <4 x float>* %color
  %color117 = insertelement <4 x float> %135, float %134, i32 3
  store <4 x float> %color117, <4 x float>* %color
  %136 = load i32* %i108
  %i108118 = add i32 %136, 1
  store i32 %i108118, i32* %i108
  br label %loop-header109

post-loop-continue119:                            ; No predecessors!
  br label %loop-header109

loop-merge120:                                    ; preds = %then110
  store i32 0, i32* %i121
  br label %loop-header122

loop-header122:                                   ; preds = %post-loop-continue132, %ifmerge129, %loop-merge120
  %137 = load i32* %i121
  %138 = icmp slt i32 %137, 42
  %139 = xor i1 %138, true
  br i1 %139, label %then123, label %ifmerge125

then123:                                          ; preds = %loop-header122
  br label %loop-merge133

post-loop-break124:                               ; No predecessors!
  br label %ifmerge125

ifmerge125:                                       ; preds = %loop-header122, %post-loop-break124
  %140 = load float addrspace(2)* @d3, !gla.uniform !8
  %141 = load <4 x float>* %color
  %142 = extractelement <4 x float> %141, i32 2
  %143 = fadd float %142, %140
  %144 = load <4 x float>* %color
  %color126 = insertelement <4 x float> %144, float %143, i32 2
  store <4 x float> %color126, <4 x float>* %color
  %145 = load <4 x float>* %color
  %146 = extractelement <4 x float> %145, i32 0
  %147 = load float addrspace(2)* @d4, !gla.uniform !11
  %148 = fcmp olt float %146, %147
  br i1 %148, label %then127, label %ifmerge129

then127:                                          ; preds = %ifmerge125
  br label %loop-merge133

post-loop-break128:                               ; No predecessors!
  br label %ifmerge129

ifmerge129:                                       ; preds = %ifmerge125, %post-loop-break128
  %149 = load <4 x float>* %color
  %150 = extractelement <4 x float> %149, i32 3
  %151 = fadd float %150, 1.000000e+00
  %152 = load <4 x float>* %color
  %color130 = insertelement <4 x float> %152, float %151, i32 3
  store <4 x float> %color130, <4 x float>* %color
  %153 = load i32* %i121
  %i121131 = add i32 %153, 1
  store i32 %i121131, i32* %i121
  br label %loop-header122

post-loop-continue132:                            ; No predecessors!
  br label %loop-header122

loop-merge133:                                    ; preds = %then127, %then123
  br label %loop-header134

loop-header134:                                   ; preds = %post-loop-continue147, %ifmerge146, %then136, %loop-merge133
  %154 = load <4 x float> addrspace(2)* @bigColor4, !gla.uniform !15
  %155 = load <4 x float>* %color
  %color135 = fadd <4 x float> %155, %154
  store <4 x float> %color135, <4 x float>* %color
  %156 = load <4 x float>* %color
  %157 = extractelement <4 x float> %156, i32 0
  %158 = load float addrspace(2)* @d4, !gla.uniform !11
  %159 = fcmp olt float %157, %158
  br i1 %159, label %then136, label %ifmerge138

then136:                                          ; preds = %loop-header134
  br label %loop-header134

post-loop-continue137:                            ; No predecessors!
  br label %ifmerge138

ifmerge138:                                       ; preds = %loop-header134, %post-loop-continue137
  %160 = load <4 x float>* %color
  %161 = extractelement <4 x float> %160, i32 1
  %162 = load float addrspace(2)* @d4, !gla.uniform !11
  %163 = fcmp olt float %161, %162
  br i1 %163, label %then139, label %else141

then139:                                          ; preds = %ifmerge138
  %164 = load float addrspace(2)* @d4, !gla.uniform !11
  %165 = load <4 x float>* %color
  %166 = extractelement <4 x float> %165, i32 1
  %167 = fadd float %166, %164
  %168 = load <4 x float>* %color
  %color140 = insertelement <4 x float> %168, float %167, i32 1
  store <4 x float> %color140, <4 x float>* %color
  br label %ifmerge143

else141:                                          ; preds = %ifmerge138
  %169 = load float addrspace(2)* @d4, !gla.uniform !11
  %170 = load <4 x float>* %color
  %171 = extractelement <4 x float> %170, i32 0
  %172 = fadd float %171, %169
  %173 = load <4 x float>* %color
  %color142 = insertelement <4 x float> %173, float %172, i32 0
  store <4 x float> %color142, <4 x float>* %color
  br label %ifmerge143

ifmerge143:                                       ; preds = %else141, %then139
  %174 = load <4 x float>* %color
  %175 = extractelement <4 x float> %174, i32 2
  %176 = load float addrspace(2)* @d4, !gla.uniform !11
  %177 = fcmp olt float %175, %176
  %178 = xor i1 %177, true
  br i1 %178, label %then144, label %ifmerge146

then144:                                          ; preds = %ifmerge143
  br label %loop-merge148

post-loop-break145:                               ; No predecessors!
  br label %ifmerge146

ifmerge146:                                       ; preds = %ifmerge143, %post-loop-break145
  br label %loop-header134

post-loop-continue147:                            ; No predecessors!
  br label %loop-header134

loop-merge148:                                    ; preds = %then144
  br label %loop-header149

loop-header149:                                   ; preds = %post-loop-continue157, %ifmerge156, %loop-merge148
  %179 = load <4 x float> addrspace(2)* @bigColor5, !gla.uniform !16
  %180 = load <4 x float>* %color
  %color150 = fadd <4 x float> %180, %179
  store <4 x float> %color150, <4 x float>* %color
  %181 = load <4 x float>* %color
  %182 = extractelement <4 x float> %181, i32 1
  %183 = load float addrspace(2)* @d5, !gla.uniform !17
  %184 = fcmp olt float %182, %183
  br i1 %184, label %then151, label %ifmerge153

then151:                                          ; preds = %loop-header149
  %185 = load float addrspace(2)* @d5, !gla.uniform !17
  %186 = load <4 x float>* %color
  %187 = extractelement <4 x float> %186, i32 1
  %188 = fadd float %187, %185
  %189 = load <4 x float>* %color
  %color152 = insertelement <4 x float> %189, float %188, i32 1
  store <4 x float> %color152, <4 x float>* %color
  br label %ifmerge153

ifmerge153:                                       ; preds = %loop-header149, %then151
  %190 = load <4 x float>* %color
  %191 = extractelement <4 x float> %190, i32 0
  %192 = load float addrspace(2)* @d5, !gla.uniform !17
  %193 = fcmp olt float %191, %192
  %194 = xor i1 %193, true
  br i1 %194, label %then154, label %ifmerge156

then154:                                          ; preds = %ifmerge153
  br label %loop-merge158

post-loop-break155:                               ; No predecessors!
  br label %ifmerge156

ifmerge156:                                       ; preds = %ifmerge153, %post-loop-break155
  br label %loop-header149

post-loop-continue157:                            ; No predecessors!
  br label %loop-header149

loop-merge158:                                    ; preds = %then154
  %195 = load <4 x float>* %color
  %196 = extractelement <4 x float> %195, i32 0
  %197 = load float addrspace(2)* @d6, !gla.uniform !18
  %198 = fcmp olt float %196, %197
  br i1 %198, label %then159, label %else167

then159:                                          ; preds = %loop-merge158
  br label %loop-header160

loop-header160:                                   ; preds = %post-loop-continue165, %ifmerge163, %then159
  %199 = load <4 x float>* %color
  %200 = extractelement <4 x float> %199, i32 1
  %201 = load float addrspace(2)* @d6, !gla.uniform !18
  %202 = fcmp olt float %200, %201
  %203 = xor i1 %202, true
  br i1 %203, label %then161, label %ifmerge163

then161:                                          ; preds = %loop-header160
  br label %loop-merge166

post-loop-break162:                               ; No predecessors!
  br label %ifmerge163

ifmerge163:                                       ; preds = %loop-header160, %post-loop-break162
  %204 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %205 = load <4 x float>* %color
  %color164 = fadd <4 x float> %205, %204
  store <4 x float> %color164, <4 x float>* %color
  br label %loop-header160

post-loop-continue165:                            ; No predecessors!
  br label %loop-header160

loop-merge166:                                    ; preds = %then161
  br label %ifmerge175

else167:                                          ; preds = %loop-merge158
  br label %loop-header168

loop-header168:                                   ; preds = %post-loop-continue173, %ifmerge171, %else167
  %206 = load <4 x float>* %color
  %207 = extractelement <4 x float> %206, i32 2
  %208 = load float addrspace(2)* @d6, !gla.uniform !18
  %209 = fcmp olt float %207, %208
  %210 = xor i1 %209, true
  br i1 %210, label %then169, label %ifmerge171

then169:                                          ; preds = %loop-header168
  br label %loop-merge174

post-loop-break170:                               ; No predecessors!
  br label %ifmerge171

ifmerge171:                                       ; preds = %loop-header168, %post-loop-break170
  %211 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %212 = extractelement <4 x float> %211, i32 2
  %213 = load <4 x float>* %color
  %214 = extractelement <4 x float> %213, i32 2
  %215 = fadd float %214, %212
  %216 = load <4 x float>* %color
  %color172 = insertelement <4 x float> %216, float %215, i32 2
  store <4 x float> %color172, <4 x float>* %color
  br label %loop-header168

post-loop-continue173:                            ; No predecessors!
  br label %loop-header168

loop-merge174:                                    ; preds = %then169
  br label %ifmerge175

ifmerge175:                                       ; preds = %loop-merge174, %loop-merge166
  %217 = load <4 x float>* %color
  %218 = extractelement <4 x float> %217, i32 0
  %219 = load float addrspace(2)* @d6, !gla.uniform !18
  %220 = fcmp olt float %218, %219
  br i1 %220, label %then176, label %else187

then176:                                          ; preds = %ifmerge175
  br label %loop-header177

loop-header177:                                   ; preds = %post-loop-continue185, %ifmerge184, %then176
  %221 = load <4 x float>* %color
  %222 = extractelement <4 x float> %221, i32 1
  %223 = load float addrspace(2)* @d6, !gla.uniform !18
  %224 = fcmp olt float %222, %223
  %225 = xor i1 %224, true
  br i1 %225, label %then178, label %ifmerge180

then178:                                          ; preds = %loop-header177
  br label %loop-merge186

post-loop-break179:                               ; No predecessors!
  br label %ifmerge180

ifmerge180:                                       ; preds = %loop-header177, %post-loop-break179
  %226 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %227 = load <4 x float>* %color
  %color181 = fadd <4 x float> %227, %226
  store <4 x float> %color181, <4 x float>* %color
  %228 = load float addrspace(2)* @d7, !gla.uniform !20
  %229 = fcmp olt float %228, 1.000000e+00
  br i1 %229, label %then182, label %ifmerge184

then182:                                          ; preds = %ifmerge180
  br label %loop-merge186

post-loop-break183:                               ; No predecessors!
  br label %ifmerge184

ifmerge184:                                       ; preds = %ifmerge180, %post-loop-break183
  br label %loop-header177

post-loop-continue185:                            ; No predecessors!
  br label %loop-header177

loop-merge186:                                    ; preds = %then182, %then178
  br label %ifmerge195

else187:                                          ; preds = %ifmerge175
  br label %loop-header188

loop-header188:                                   ; preds = %post-loop-continue193, %ifmerge191, %else187
  %230 = load <4 x float>* %color
  %231 = extractelement <4 x float> %230, i32 2
  %232 = load float addrspace(2)* @d6, !gla.uniform !18
  %233 = fcmp olt float %231, %232
  %234 = xor i1 %233, true
  br i1 %234, label %then189, label %ifmerge191

then189:                                          ; preds = %loop-header188
  br label %loop-merge194

post-loop-break190:                               ; No predecessors!
  br label %ifmerge191

ifmerge191:                                       ; preds = %loop-header188, %post-loop-break190
  %235 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %236 = extractelement <4 x float> %235, i32 2
  %237 = load <4 x float>* %color
  %238 = extractelement <4 x float> %237, i32 2
  %239 = fadd float %238, %236
  %240 = load <4 x float>* %color
  %color192 = insertelement <4 x float> %240, float %239, i32 2
  store <4 x float> %color192, <4 x float>* %color
  br label %loop-header188

post-loop-continue193:                            ; No predecessors!
  br label %loop-header188

loop-merge194:                                    ; preds = %then189
  br label %ifmerge195

ifmerge195:                                       ; preds = %loop-merge194, %loop-merge186
  br label %loop-header196

loop-header196:                                   ; preds = %post-loop-continue210, %ifmerge209, %ifmerge195
  %241 = load float addrspace(2)* @d7, !gla.uniform !20
  %242 = fcmp olt float %241, 0.000000e+00
  br i1 %242, label %then197, label %ifmerge199

then197:                                          ; preds = %loop-header196
  br label %loop-merge211

post-loop-break198:                               ; No predecessors!
  br label %ifmerge199

ifmerge199:                                       ; preds = %loop-header196, %post-loop-break198
  %243 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %244 = load <4 x float>* %color
  %color200 = fadd <4 x float> %244, %243
  store <4 x float> %color200, <4 x float>* %color
  %245 = load float addrspace(2)* @d7, !gla.uniform !20
  %246 = fcmp olt float %245, 1.000000e+00
  br i1 %246, label %then201, label %ifmerge204

then201:                                          ; preds = %ifmerge199
  %247 = load <4 x float>* %color
  %248 = extractelement <4 x float> %247, i32 2
  %249 = fadd float %248, 1.000000e+00
  %250 = load <4 x float>* %color
  %color202 = insertelement <4 x float> %250, float %249, i32 2
  store <4 x float> %color202, <4 x float>* %color
  br label %loop-merge211

post-loop-break203:                               ; No predecessors!
  br label %ifmerge204

ifmerge204:                                       ; preds = %ifmerge199, %post-loop-break203
  %BaseColor205 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor205, <4 x float>* @BaseColor_shadow
  %251 = load <4 x float>* @BaseColor_shadow
  %252 = load <4 x float>* %color
  %color206 = fadd <4 x float> %252, %251
  store <4 x float> %color206, <4 x float>* %color
  br i1 false, label %then207, label %ifmerge209

then207:                                          ; preds = %ifmerge204
  br label %loop-merge211

post-loop-break208:                               ; No predecessors!
  br label %ifmerge209

ifmerge209:                                       ; preds = %ifmerge204, %post-loop-break208
  br label %loop-header196

post-loop-continue210:                            ; No predecessors!
  br label %loop-header196

loop-merge211:                                    ; preds = %then207, %then201, %then197
  br label %loop-header212

loop-header212:                                   ; preds = %post-loop-continue231, %ifmerge230, %loop-merge211
  %253 = load float addrspace(2)* @d8, !gla.uniform !22
  %254 = fcmp olt float %253, 0.000000e+00
  br i1 %254, label %then213, label %ifmerge215

then213:                                          ; preds = %loop-header212
  br label %loop-merge232

post-loop-break214:                               ; No predecessors!
  br label %ifmerge215

ifmerge215:                                       ; preds = %loop-header212, %post-loop-break214
  %255 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %256 = load <4 x float>* %color
  %color216 = fadd <4 x float> %256, %255
  store <4 x float> %color216, <4 x float>* %color
  %257 = load float addrspace(2)* @d8, !gla.uniform !22
  %258 = fcmp olt float %257, 1.000000e+00
  br i1 %258, label %then217, label %ifmerge225

then217:                                          ; preds = %ifmerge215
  %259 = load <4 x float>* %color
  %260 = extractelement <4 x float> %259, i32 2
  %261 = fadd float %260, 1.000000e+00
  %262 = load <4 x float>* %color
  %color218 = insertelement <4 x float> %262, float %261, i32 2
  store <4 x float> %color218, <4 x float>* %color
  %263 = load float addrspace(2)* @d8, !gla.uniform !22
  %264 = fcmp olt float %263, 2.000000e+00
  br i1 %264, label %then219, label %else221

then219:                                          ; preds = %then217
  %265 = load <4 x float>* %color
  %266 = extractelement <4 x float> %265, i32 1
  %267 = fadd float %266, 1.000000e+00
  %268 = load <4 x float>* %color
  %color220 = insertelement <4 x float> %268, float %267, i32 1
  store <4 x float> %color220, <4 x float>* %color
  br label %ifmerge223

else221:                                          ; preds = %then217
  %269 = load <4 x float>* %color
  %270 = extractelement <4 x float> %269, i32 0
  %271 = fadd float %270, 1.000000e+00
  %272 = load <4 x float>* %color
  %color222 = insertelement <4 x float> %272, float %271, i32 0
  store <4 x float> %color222, <4 x float>* %color
  br label %ifmerge223

ifmerge223:                                       ; preds = %else221, %then219
  br label %loop-merge232

post-loop-break224:                               ; No predecessors!
  br label %ifmerge225

ifmerge225:                                       ; preds = %ifmerge215, %post-loop-break224
  %BaseColor226 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor226, <4 x float>* @BaseColor_shadow
  %273 = load <4 x float>* @BaseColor_shadow
  %274 = load <4 x float>* %color
  %color227 = fadd <4 x float> %274, %273
  store <4 x float> %color227, <4 x float>* %color
  %275 = load <4 x float>* %color
  %276 = extractelement <4 x float> %275, i32 2
  %277 = load float addrspace(2)* @d8, !gla.uniform !22
  %278 = fcmp olt float %276, %277
  %279 = xor i1 %278, true
  br i1 %279, label %then228, label %ifmerge230

then228:                                          ; preds = %ifmerge225
  br label %loop-merge232

post-loop-break229:                               ; No predecessors!
  br label %ifmerge230

ifmerge230:                                       ; preds = %ifmerge225, %post-loop-break229
  br label %loop-header212

post-loop-continue231:                            ; No predecessors!
  br label %loop-header212

loop-merge232:                                    ; preds = %then228, %ifmerge223, %then213
  br label %loop-header233

loop-header233:                                   ; preds = %post-loop-continue246, %ifmerge245, %loop-merge232
  %280 = load <4 x float>* %color
  %281 = extractelement <4 x float> %280, i32 3
  %282 = load float addrspace(2)* @d9, !gla.uniform !23
  %283 = fcmp olt float %281, %282
  %284 = xor i1 %283, true
  br i1 %284, label %then234, label %ifmerge236

then234:                                          ; preds = %loop-header233
  br label %loop-merge247

post-loop-break235:                               ; No predecessors!
  br label %ifmerge236

ifmerge236:                                       ; preds = %loop-header233, %post-loop-break235
  %285 = load float addrspace(2)* @d9, !gla.uniform !23
  %286 = load float addrspace(2)* @d8, !gla.uniform !22
  %287 = fcmp ogt float %285, %286
  br i1 %287, label %then237, label %ifmerge245

then237:                                          ; preds = %ifmerge236
  %288 = load <4 x float>* %color
  %289 = extractelement <4 x float> %288, i32 0
  %290 = load float addrspace(2)* @d7, !gla.uniform !20
  %291 = fcmp ole float %289, %290
  br i1 %291, label %then238, label %ifmerge244

then238:                                          ; preds = %then237
  %292 = load <4 x float>* %color
  %293 = extractelement <4 x float> %292, i32 2
  %294 = fcmp oeq float %293, 5.000000e+00
  br i1 %294, label %then239, label %else241

then239:                                          ; preds = %then238
  %295 = load <4 x float>* %color
  %296 = extractelement <4 x float> %295, i32 3
  %297 = fadd float %296, 1.000000e+00
  %298 = load <4 x float>* %color
  %color240 = insertelement <4 x float> %298, float %297, i32 3
  store <4 x float> %color240, <4 x float>* %color
  br label %ifmerge243

else241:                                          ; preds = %then238
  br label %loop-merge247

post-loop-break242:                               ; No predecessors!
  br label %ifmerge243

ifmerge243:                                       ; preds = %post-loop-break242, %then239
  br label %ifmerge244

ifmerge244:                                       ; preds = %then237, %ifmerge243
  br label %ifmerge245

ifmerge245:                                       ; preds = %ifmerge236, %ifmerge244
  br label %loop-header233

post-loop-continue246:                            ; No predecessors!
  br label %loop-header233

loop-merge247:                                    ; preds = %else241, %then234
  br label %loop-header248

loop-header248:                                   ; preds = %post-loop-continue264, %post-loop-break263, %ifmerge259, %loop-merge247
  %299 = load <4 x float>* %color
  %300 = extractelement <4 x float> %299, i32 2
  %301 = load float addrspace(2)* @d10, !gla.uniform !24
  %302 = fcmp olt float %300, %301
  %303 = xor i1 %302, true
  br i1 %303, label %then249, label %ifmerge251

then249:                                          ; preds = %loop-header248
  br label %loop-merge265

post-loop-break250:                               ; No predecessors!
  br label %ifmerge251

ifmerge251:                                       ; preds = %loop-header248, %post-loop-break250
  %304 = load <4 x float>* %color
  %305 = extractelement <4 x float> %304, i32 1
  %306 = fadd float %305, 1.000000e+00
  %307 = load <4 x float>* %color
  %color252 = insertelement <4 x float> %307, float %306, i32 1
  store <4 x float> %color252, <4 x float>* %color
  %308 = load <4 x float>* %color
  %309 = extractelement <4 x float> %308, i32 1
  %310 = load float addrspace(2)* @d11, !gla.uniform !25
  %311 = fcmp olt float %309, %310
  br i1 %311, label %then253, label %ifmerge261

then253:                                          ; preds = %ifmerge251
  %312 = load <4 x float>* %color
  %313 = extractelement <4 x float> %312, i32 2
  %314 = fadd float %313, 1.000000e+00
  %315 = load <4 x float>* %color
  %color254 = insertelement <4 x float> %315, float %314, i32 2
  store <4 x float> %color254, <4 x float>* %color
  %316 = load <4 x float>* %color
  %317 = extractelement <4 x float> %316, i32 3
  %318 = load float addrspace(2)* @d12, !gla.uniform !26
  %319 = fcmp olt float %317, %318
  br i1 %319, label %then255, label %else257

then255:                                          ; preds = %then253
  %320 = load <4 x float>* %color
  %321 = extractelement <4 x float> %320, i32 3
  %322 = fadd float %321, 1.000000e+00
  %323 = load <4 x float>* %color
  %color256 = insertelement <4 x float> %323, float %322, i32 3
  store <4 x float> %color256, <4 x float>* %color
  br label %ifmerge259

else257:                                          ; preds = %then253
  %324 = load <4 x float>* %color
  %325 = extractelement <4 x float> %324, i32 0
  %326 = fadd float %325, 1.000000e+00
  %327 = load <4 x float>* %color
  %color258 = insertelement <4 x float> %327, float %326, i32 0
  store <4 x float> %color258, <4 x float>* %color
  br label %ifmerge259

ifmerge259:                                       ; preds = %else257, %then255
  br label %loop-header248

post-loop-continue260:                            ; No predecessors!
  br label %ifmerge261

ifmerge261:                                       ; preds = %ifmerge251, %post-loop-continue260
  %328 = load <4 x float>* %color
  %color262 = fadd <4 x float> %328, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color262, <4 x float>* %color
  br label %loop-merge265

post-loop-break263:                               ; No predecessors!
  br label %loop-header248

post-loop-continue264:                            ; No predecessors!
  br label %loop-header248

loop-merge265:                                    ; preds = %ifmerge261, %then249
  br label %loop-header266

loop-header266:                                   ; preds = %post-loop-continue277, %ifmerge275, %then272, %loop-merge265
  %329 = load <4 x float>* %color
  %330 = extractelement <4 x float> %329, i32 0
  %331 = fcmp olt float %330, 1.000000e+01
  %332 = xor i1 %331, true
  br i1 %332, label %then267, label %ifmerge269

then267:                                          ; preds = %loop-header266
  br label %loop-merge278

post-loop-break268:                               ; No predecessors!
  br label %ifmerge269

ifmerge269:                                       ; preds = %loop-header266, %post-loop-break268
  %333 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %334 = load <4 x float>* %color
  %color270 = fadd <4 x float> %334, %333
  store <4 x float> %color270, <4 x float>* %color
  %335 = load <4 x float>* %color
  %336 = extractelement <4 x float> %335, i32 2
  %337 = load float addrspace(2)* @d8, !gla.uniform !22
  %338 = fcmp olt float %336, %337
  br i1 %338, label %then271, label %ifmerge275

then271:                                          ; preds = %ifmerge269
  %339 = load <4 x float>* %color
  %340 = extractelement <4 x float> %339, i32 3
  %341 = load float addrspace(2)* @d6, !gla.uniform !18
  %342 = fcmp olt float %340, %341
  br i1 %342, label %then272, label %ifmerge274

then272:                                          ; preds = %then271
  br label %loop-header266

post-loop-continue273:                            ; No predecessors!
  br label %ifmerge274

ifmerge274:                                       ; preds = %then271, %post-loop-continue273
  br label %ifmerge275

ifmerge275:                                       ; preds = %ifmerge269, %ifmerge274
  %343 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %344 = extractelement <4 x float> %343, i32 0
  %345 = load <4 x float>* %color
  %346 = extractelement <4 x float> %345, i32 1
  %347 = fadd float %346, %344
  %348 = load <4 x float>* %color
  %color276 = insertelement <4 x float> %348, float %347, i32 1
  store <4 x float> %color276, <4 x float>* %color
  br label %loop-header266

post-loop-continue277:                            ; No predecessors!
  br label %loop-header266

loop-merge278:                                    ; preds = %then267
  %349 = load <4 x float>* %color
  %color279 = fadd <4 x float> %349, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color279, <4 x float>* %color
  %FragColor_shadow = load <4 x float>* %color
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %loop-header280

loop-header280:                                   ; preds = %post-loop-continue288, %ifmerge287, %loop-merge278
  %350 = load <4 x float>* %color
  %351 = extractelement <4 x float> %350, i32 0
  %352 = load float addrspace(2)* @d14, !gla.uniform !28
  %353 = fcmp olt float %351, %352
  %354 = xor i1 %353, true
  br i1 %354, label %then281, label %ifmerge283

then281:                                          ; preds = %loop-header280
  br label %loop-merge289

post-loop-break282:                               ; No predecessors!
  br label %ifmerge283

ifmerge283:                                       ; preds = %loop-header280, %post-loop-break282
  %355 = load <4 x float>* %color
  %356 = extractelement <4 x float> %355, i32 1
  %357 = load float addrspace(2)* @d15, !gla.uniform !29
  %358 = fcmp olt float %356, %357
  br i1 %358, label %then284, label %else285

then284:                                          ; preds = %ifmerge283
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge287

else285:                                          ; preds = %ifmerge283
  %359 = load <4 x float>* %color
  %color286 = fadd <4 x float> %359, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color286, <4 x float>* %color
  br label %ifmerge287

ifmerge287:                                       ; preds = %else285, %post-return
  br label %loop-header280

post-loop-continue288:                            ; No predecessors!
  br label %loop-header280

loop-merge289:                                    ; preds = %then281
  %360 = load <4 x float>* %color
  %color290 = fadd <4 x float> %360, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color290, <4 x float>* %color
  br label %loop-header291

loop-header291:                                   ; preds = %post-loop-continue296, %ifmerge294, %loop-merge289
  %361 = load <4 x float>* %color
  %362 = extractelement <4 x float> %361, i32 3
  %363 = load float addrspace(2)* @d16, !gla.uniform !30
  %364 = fcmp olt float %362, %363
  %365 = xor i1 %364, true
  br i1 %365, label %then292, label %ifmerge294

then292:                                          ; preds = %loop-header291
  br label %loop-merge297

post-loop-break293:                               ; No predecessors!
  br label %ifmerge294

ifmerge294:                                       ; preds = %loop-header291, %post-loop-break293
  %366 = load <4 x float>* %color
  %367 = extractelement <4 x float> %366, i32 3
  %368 = fadd float %367, 1.000000e+00
  %369 = load <4 x float>* %color
  %color295 = insertelement <4 x float> %369, float %368, i32 3
  store <4 x float> %color295, <4 x float>* %color
  br label %loop-header291

post-loop-continue296:                            ; No predecessors!
  br label %loop-header291

loop-merge297:                                    ; preds = %then292
  br label %loop-header298

loop-header298:                                   ; preds = %post-loop-continue306, %ifmerge305, %loop-merge297
  %370 = load <4 x float>* %color
  %371 = extractelement <4 x float> %370, i32 3
  %372 = load float addrspace(2)* @d2, !gla.uniform !7
  %373 = fcmp olt float %371, %372
  %374 = load <4 x float>* %color
  %375 = extractelement <4 x float> %374, i32 1
  %376 = load float addrspace(2)* @d3, !gla.uniform !8
  %377 = fcmp olt float %375, %376
  %378 = and i1 %373, %377
  %379 = xor i1 %378, true
  br i1 %379, label %then299, label %ifmerge301

then299:                                          ; preds = %loop-header298
  br label %loop-merge307

post-loop-break300:                               ; No predecessors!
  br label %ifmerge301

ifmerge301:                                       ; preds = %loop-header298, %post-loop-break300
  %380 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %381 = load <4 x float>* %color
  %color302 = fadd <4 x float> %381, %380
  store <4 x float> %color302, <4 x float>* %color
  %382 = load <4 x float>* %color
  %383 = extractelement <4 x float> %382, i32 2
  %384 = load float addrspace(2)* @d3, !gla.uniform !8
  %385 = fcmp olt float %383, %384
  br i1 %385, label %then303, label %ifmerge305

then303:                                          ; preds = %ifmerge301
  br label %stage-epilogue

post-return304:                                   ; No predecessors!
  br label %ifmerge305

ifmerge305:                                       ; preds = %ifmerge301, %post-return304
  br label %loop-header298

post-loop-continue306:                            ; No predecessors!
  br label %loop-header298

loop-merge307:                                    ; preds = %then299
  br label %loop-header308

loop-header308:                                   ; preds = %post-loop-continue316, %ifmerge315, %loop-merge307
  %386 = load <4 x float>* %color
  %387 = extractelement <4 x float> %386, i32 1
  %388 = load float addrspace(2)* @d18, !gla.uniform !31
  %389 = fcmp olt float %387, %388
  br i1 %389, label %then309, label %ifmerge311

then309:                                          ; preds = %loop-header308
  br label %stage-epilogue

post-return310:                                   ; No predecessors!
  br label %ifmerge311

ifmerge311:                                       ; preds = %loop-header308, %post-return310
  %390 = load <4 x float>* %color
  %color312 = fadd <4 x float> %390, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color312, <4 x float>* %color
  %391 = load <4 x float>* %color
  %392 = extractelement <4 x float> %391, i32 0
  %393 = load float addrspace(2)* @d17, !gla.uniform !32
  %394 = fcmp olt float %392, %393
  %395 = xor i1 %394, true
  br i1 %395, label %then313, label %ifmerge315

then313:                                          ; preds = %ifmerge311
  br label %loop-merge317

post-loop-break314:                               ; No predecessors!
  br label %ifmerge315

ifmerge315:                                       ; preds = %ifmerge311, %post-loop-break314
  br label %loop-header308

post-loop-continue316:                            ; No predecessors!
  br label %loop-header308

loop-merge317:                                    ; preds = %then313
  br label %loop-header318

loop-header318:                                   ; preds = %post-loop-continue326, %ifmerge325, %loop-merge317
  %396 = load <4 x float>* %color
  %397 = extractelement <4 x float> %396, i32 1
  %398 = load float addrspace(2)* @d16, !gla.uniform !30
  %399 = fcmp olt float %397, %398
  %400 = xor i1 %399, true
  br i1 %400, label %then319, label %ifmerge321

then319:                                          ; preds = %loop-header318
  br label %loop-merge327

post-loop-break320:                               ; No predecessors!
  br label %ifmerge321

ifmerge321:                                       ; preds = %loop-header318, %post-loop-break320
  %401 = load <4 x float>* %color
  %402 = extractelement <4 x float> %401, i32 3
  %403 = load float addrspace(2)* @d16, !gla.uniform !30
  %404 = fcmp olt float %402, %403
  br i1 %404, label %then322, label %else323

then322:                                          ; preds = %ifmerge321
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge325

else323:                                          ; preds = %ifmerge321
  %405 = load <4 x float>* %color
  %color324 = fadd <4 x float> %405, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color324, <4 x float>* %color
  br label %ifmerge325

ifmerge325:                                       ; preds = %else323, %post-discard
  br label %loop-header318

post-loop-continue326:                            ; No predecessors!
  br label %loop-header318

loop-merge327:                                    ; preds = %then319
  %406 = load <4 x float>* %color
  %color328 = fadd <4 x float> %406, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color328, <4 x float>* %color
  %FragColor_shadow329 = load <4 x float>* %color
  store <4 x float> %FragColor_shadow329, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge327, %then309, %then303, %then284
  %407 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %407), !gla.output !50
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then322
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.discard() #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  %0 = extractelement <4 x float> %BaseColor, i32 0
  %1 = fcmp olt float %0, 0x3FD51EB860000000
  %2 = fcmp olt float %0, 0x3FE51EB860000000
  %select342.v = select i1 %2, <4 x float> <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  %select344.v = select i1 %1, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>, <4 x float> %select342.v
  %select344 = fadd <4 x float> %BaseColor, %select344.v
  %.pre = load float addrspace(2)* @d, align 4, !gla.uniform !3
  %3 = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !5
  br label %loop-header12

loop-header12:                                    ; preds = %ifmerge15, %entry
  %color.1 = phi <4 x float> [ %select344, %entry ], [ %color16, %ifmerge15 ]
  %4 = extractelement <4 x float> %color.1, i32 0
  %5 = fcmp uge float %4, %.pre
  br i1 %5, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  %6 = load <4 x float> addrspace(2)* @bigColor1_1, align 16, !gla.uniform !6
  br label %loop-header19

ifmerge15:                                        ; preds = %loop-header12
  %color16 = fadd <4 x float> %color.1, %3
  br label %loop-header12

loop-header19:                                    ; preds = %ifmerge22, %then13
  %color.2 = phi <4 x float> [ %color.1, %then13 ], [ %select340, %ifmerge22 ]
  %7 = extractelement <4 x float> %color.2, i32 2
  %8 = fcmp uge float %7, %.pre
  br i1 %8, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header19
  br label %loop-header30

ifmerge22:                                        ; preds = %loop-header19
  %color23 = fadd <4 x float> %color.2, %6
  %9 = extractelement <4 x float> %color23, i32 3
  %10 = fcmp olt float %9, %.pre
  %color27 = fadd <4 x float> %6, %color23
  %select340 = select i1 %10, <4 x float> %color23, <4 x float> %color27
  br label %loop-header19

loop-header30:                                    ; preds = %ifmerge33, %then20
  %color.3 = phi <4 x float> [ %color.2, %then20 ], [ %color34, %ifmerge33 ]
  %11 = extractelement <4 x float> %color.3, i32 0
  %12 = fcmp uge float %11, 4.200000e+01
  br i1 %12, label %then31, label %ifmerge33

then31:                                           ; preds = %loop-header30
  %.pre345 = load float addrspace(2)* @d2, align 4, !gla.uniform !7
  %.pre346 = load float addrspace(2)* @d3, align 4, !gla.uniform !8
  %13 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header37

ifmerge33:                                        ; preds = %loop-header30
  %color34 = fadd <4 x float> %color.3, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header30

loop-header37:                                    ; preds = %ifmerge40, %then31
  %color.4 = phi <4 x float> [ %color.3, %then31 ], [ %color41, %ifmerge40 ]
  %14 = extractelement <4 x float> %color.4, i32 3
  %15 = extractelement <4 x float> %color.4, i32 1
  %notlhs = fcmp uge float %14, %.pre345
  %notrhs = fcmp uge float %15, %.pre346
  %16 = or i1 %notrhs, %notlhs
  br i1 %16, label %then38, label %ifmerge40

then38:                                           ; preds = %loop-header37
  %17 = load <4 x float> addrspace(2)* @bigColor1_3, align 16, !gla.uniform !10
  %18 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header44

ifmerge40:                                        ; preds = %loop-header37
  %color41 = fadd <4 x float> %color.4, %13
  br label %loop-header37

loop-header44:                                    ; preds = %ifmerge51, %then38
  %color.5 = phi <4 x float> [ %color.4, %then38 ], [ %color52, %ifmerge51 ]
  %19 = extractelement <4 x float> %color.5, i32 2
  %20 = fcmp uge float %19, %.pre346
  br i1 %20, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge54

ifmerge47:                                        ; preds = %loop-header44
  %color48 = fadd <4 x float> %color.5, %17
  %21 = extractelement <4 x float> %color48, i32 1
  %22 = fcmp olt float %21, %18
  br i1 %22, label %then49, label %ifmerge51

then49:                                           ; preds = %ifmerge47
  br label %loop-merge54

ifmerge51:                                        ; preds = %ifmerge47
  %color52 = fadd <4 x float> %17, %color48
  br label %loop-header44

loop-merge54:                                     ; preds = %then49, %then45
  %color.6 = phi <4 x float> [ %color.5, %then45 ], [ %color48, %then49 ]
  %.pre347 = load i32 addrspace(2)* @Count, align 4, !gla.uniform !12
  %23 = load <4 x float> addrspace(2)* @bigColor2, align 16, !gla.uniform !13
  br label %loop-header55

loop-header55:                                    ; preds = %ifmerge58, %loop-merge54
  %color.7 = phi <4 x float> [ %color.6, %loop-merge54 ], [ %color59, %ifmerge58 ]
  %i.0 = phi i32 [ 0, %loop-merge54 ], [ %i60, %ifmerge58 ]
  %24 = icmp slt i32 %i.0, %.pre347
  br i1 %24, label %ifmerge58, label %then56

then56:                                           ; preds = %loop-header55
  %.pre348 = load <4 x float> addrspace(2)* @bigColor3, align 16, !gla.uniform !14
  br label %loop-header63

ifmerge58:                                        ; preds = %loop-header55
  %color59 = fadd <4 x float> %color.7, %23
  %i60 = add i32 %i.0, 1
  br label %loop-header55

loop-header63:                                    ; preds = %loop-header63, %then56
  %color.8 = phi <4 x float> [ %color.7, %then56 ], [ %color64, %loop-header63 ]
  %color64 = fadd <4 x float> %color.8, %.pre348
  %25 = extractelement <4 x float> %color64, i32 0
  %26 = fcmp uge float %25, %.pre345
  br i1 %26, label %then65, label %loop-header63

then65:                                           ; preds = %loop-header63
  %27 = extractelement <4 x float> %color64, i32 2
  %28 = fadd float %27, %.pre346
  %29 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color64, i32 4, float undef, i32 undef, float undef, i32 undef, float %28, i32 0, float undef, i32 undef)
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fadd float %30, %.pre346
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %29, i32 4, float undef, i32 undef, float undef, i32 undef, float %31, i32 0, float undef, i32 undef)
  %33 = extractelement <4 x float> %32, i32 2
  %34 = fadd float %33, %.pre346
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %32, i32 4, float undef, i32 undef, float undef, i32 undef, float %34, i32 0, float undef, i32 undef)
  %36 = extractelement <4 x float> %35, i32 2
  %37 = fadd float %36, %.pre346
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %35, i32 4, float undef, i32 undef, float undef, i32 undef, float %37, i32 0, float undef, i32 undef)
  %39 = extractelement <4 x float> %38, i32 2
  %40 = fadd float %39, %.pre346
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %38, i32 4, float undef, i32 undef, float undef, i32 undef, float %40, i32 0, float undef, i32 undef)
  %42 = extractelement <4 x float> %41, i32 2
  %43 = fadd float %42, %.pre346
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %41, i32 4, float undef, i32 undef, float undef, i32 undef, float %43, i32 0, float undef, i32 undef)
  %45 = extractelement <4 x float> %44, i32 2
  %46 = fadd float %45, %.pre346
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %44, i32 4, float undef, i32 undef, float undef, i32 undef, float %46, i32 0, float undef, i32 undef)
  %48 = extractelement <4 x float> %47, i32 2
  %49 = fadd float %48, %.pre346
  %50 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %47, i32 4, float undef, i32 undef, float undef, i32 undef, float %49, i32 0, float undef, i32 undef)
  %51 = extractelement <4 x float> %50, i32 2
  %52 = fadd float %51, %.pre346
  %53 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %50, i32 4, float undef, i32 undef, float undef, i32 undef, float %52, i32 0, float undef, i32 undef)
  %54 = extractelement <4 x float> %53, i32 2
  %55 = fadd float %54, %.pre346
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %53, i32 4, float undef, i32 undef, float undef, i32 undef, float %55, i32 0, float undef, i32 undef)
  %57 = extractelement <4 x float> %56, i32 2
  %58 = fadd float %57, %.pre346
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %56, i32 4, float undef, i32 undef, float undef, i32 undef, float %58, i32 0, float undef, i32 undef)
  %60 = extractelement <4 x float> %59, i32 2
  %61 = fadd float %60, %.pre346
  %62 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %59, i32 4, float undef, i32 undef, float undef, i32 undef, float %61, i32 0, float undef, i32 undef)
  %63 = extractelement <4 x float> %62, i32 2
  %64 = fadd float %63, %.pre346
  %65 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %62, i32 4, float undef, i32 undef, float undef, i32 undef, float %64, i32 0, float undef, i32 undef)
  %66 = extractelement <4 x float> %65, i32 2
  %67 = fadd float %66, %.pre346
  %68 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %65, i32 4, float undef, i32 undef, float undef, i32 undef, float %67, i32 0, float undef, i32 undef)
  %69 = extractelement <4 x float> %68, i32 2
  %70 = fadd float %69, %.pre346
  %71 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %68, i32 4, float undef, i32 undef, float undef, i32 undef, float %70, i32 0, float undef, i32 undef)
  %72 = extractelement <4 x float> %71, i32 2
  %73 = fadd float %72, %.pre346
  %74 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %71, i32 4, float undef, i32 undef, float undef, i32 undef, float %73, i32 0, float undef, i32 undef)
  %75 = extractelement <4 x float> %74, i32 2
  %76 = fadd float %75, %.pre346
  %77 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %74, i32 4, float undef, i32 undef, float undef, i32 undef, float %76, i32 0, float undef, i32 undef)
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %.pre346
  %80 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %77, i32 4, float undef, i32 undef, float undef, i32 undef, float %79, i32 0, float undef, i32 undef)
  %81 = extractelement <4 x float> %80, i32 2
  %82 = fadd float %81, %.pre346
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %80, i32 4, float undef, i32 undef, float undef, i32 undef, float %82, i32 0, float undef, i32 undef)
  %84 = extractelement <4 x float> %83, i32 2
  %85 = fadd float %84, %.pre346
  %86 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %83, i32 4, float undef, i32 undef, float undef, i32 undef, float %85, i32 0, float undef, i32 undef)
  %87 = extractelement <4 x float> %86, i32 2
  %88 = fadd float %87, %.pre346
  %89 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %86, i32 4, float undef, i32 undef, float undef, i32 undef, float %88, i32 0, float undef, i32 undef)
  %90 = extractelement <4 x float> %89, i32 2
  %91 = fadd float %90, %.pre346
  %92 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %89, i32 4, float undef, i32 undef, float undef, i32 undef, float %91, i32 0, float undef, i32 undef)
  %93 = extractelement <4 x float> %92, i32 2
  %94 = fadd float %93, %.pre346
  %95 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %92, i32 4, float undef, i32 undef, float undef, i32 undef, float %94, i32 0, float undef, i32 undef)
  %96 = extractelement <4 x float> %95, i32 2
  %97 = fadd float %96, %.pre346
  %98 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %95, i32 4, float undef, i32 undef, float undef, i32 undef, float %97, i32 0, float undef, i32 undef)
  %99 = extractelement <4 x float> %98, i32 2
  %100 = fadd float %99, %.pre346
  %101 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %98, i32 4, float undef, i32 undef, float undef, i32 undef, float %100, i32 0, float undef, i32 undef)
  %102 = extractelement <4 x float> %101, i32 2
  %103 = fadd float %102, %.pre346
  %104 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %101, i32 4, float undef, i32 undef, float undef, i32 undef, float %103, i32 0, float undef, i32 undef)
  %105 = extractelement <4 x float> %104, i32 2
  %106 = fadd float %105, %.pre346
  %107 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %104, i32 4, float undef, i32 undef, float undef, i32 undef, float %106, i32 0, float undef, i32 undef)
  %108 = extractelement <4 x float> %107, i32 2
  %109 = fadd float %108, %.pre346
  %110 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %107, i32 4, float undef, i32 undef, float undef, i32 undef, float %109, i32 0, float undef, i32 undef)
  %111 = extractelement <4 x float> %110, i32 2
  %112 = fadd float %111, %.pre346
  %113 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %110, i32 4, float undef, i32 undef, float undef, i32 undef, float %112, i32 0, float undef, i32 undef)
  %114 = extractelement <4 x float> %113, i32 2
  %115 = fadd float %114, %.pre346
  %116 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %113, i32 4, float undef, i32 undef, float undef, i32 undef, float %115, i32 0, float undef, i32 undef)
  %117 = extractelement <4 x float> %116, i32 2
  %118 = fadd float %117, %.pre346
  %119 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %116, i32 4, float undef, i32 undef, float undef, i32 undef, float %118, i32 0, float undef, i32 undef)
  %120 = extractelement <4 x float> %119, i32 2
  %121 = fadd float %120, %.pre346
  %122 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %119, i32 4, float undef, i32 undef, float undef, i32 undef, float %121, i32 0, float undef, i32 undef)
  %123 = extractelement <4 x float> %122, i32 2
  %124 = fadd float %123, %.pre346
  %125 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %122, i32 4, float undef, i32 undef, float undef, i32 undef, float %124, i32 0, float undef, i32 undef)
  %126 = extractelement <4 x float> %125, i32 2
  %127 = fadd float %126, %.pre346
  %128 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %125, i32 4, float undef, i32 undef, float undef, i32 undef, float %127, i32 0, float undef, i32 undef)
  %129 = extractelement <4 x float> %128, i32 2
  %130 = fadd float %129, %.pre346
  %131 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %128, i32 4, float undef, i32 undef, float undef, i32 undef, float %130, i32 0, float undef, i32 undef)
  %132 = extractelement <4 x float> %131, i32 2
  %133 = fadd float %132, %.pre346
  %134 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %131, i32 4, float undef, i32 undef, float undef, i32 undef, float %133, i32 0, float undef, i32 undef)
  %135 = extractelement <4 x float> %134, i32 2
  %136 = fadd float %135, %.pre346
  %137 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %134, i32 4, float undef, i32 undef, float undef, i32 undef, float %136, i32 0, float undef, i32 undef)
  %138 = extractelement <4 x float> %137, i32 2
  %139 = fadd float %138, %.pre346
  %140 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %137, i32 4, float undef, i32 undef, float undef, i32 undef, float %139, i32 0, float undef, i32 undef)
  %141 = extractelement <4 x float> %140, i32 2
  %142 = fadd float %141, %.pre346
  %143 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %140, i32 4, float undef, i32 undef, float undef, i32 undef, float %142, i32 0, float undef, i32 undef)
  %144 = extractelement <4 x float> %143, i32 2
  %145 = fadd float %144, %.pre346
  %146 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %143, i32 4, float undef, i32 undef, float undef, i32 undef, float %145, i32 0, float undef, i32 undef)
  %147 = extractelement <4 x float> %146, i32 2
  %148 = fadd float %147, %.pre346
  %149 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %146, i32 4, float undef, i32 undef, float undef, i32 undef, float %148, i32 0, float undef, i32 undef)
  %150 = extractelement <4 x float> %149, i32 2
  %151 = fadd float %150, %.pre346
  %152 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %149, i32 4, float undef, i32 undef, float undef, i32 undef, float %151, i32 0, float undef, i32 undef)
  br label %loop-header80

loop-header80:                                    ; preds = %ifmerge83, %then65
  %color.10 = phi <4 x float> [ %152, %then65 ], [ %select333, %ifmerge83 ]
  %i79.0 = phi i32 [ 0, %then65 ], [ %i7992, %ifmerge83 ]
  %exitcond392 = icmp eq i32 %i79.0, 100
  br i1 %exitcond392, label %then81, label %ifmerge83

then81:                                           ; preds = %loop-header80
  br label %loop-header96

ifmerge83:                                        ; preds = %loop-header80
  %153 = extractelement <4 x float> %color.10, i32 2
  %154 = fcmp olt float %153, 2.000000e+01
  %155 = extractelement <4 x float> %color.10, i32 0
  %156 = fadd float %155, 1.000000e+00
  %157 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 1, float %156, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %158 = extractelement <4 x float> %color.10, i32 1
  %159 = fadd float %158, 1.000000e+00
  %160 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 2, float undef, i32 undef, float %159, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select333 = select i1 %154, <4 x float> %157, <4 x float> %160
  %i7992 = add i32 %i79.0, 1
  br label %loop-header80

loop-header96:                                    ; preds = %ifmerge99, %then81
  %color.12 = phi <4 x float> [ %color.10, %then81 ], [ %select, %ifmerge99 ]
  %i95.0 = phi i32 [ 0, %then81 ], [ %i95105, %ifmerge99 ]
  %exitcond = icmp eq i32 %i95.0, 120
  br i1 %exitcond, label %then97, label %ifmerge99

then97:                                           ; preds = %loop-header96
  %161 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header109

ifmerge99:                                        ; preds = %loop-header96
  %162 = extractelement <4 x float> %color.12, i32 2
  %163 = fcmp olt float %162, 2.000000e+01
  %164 = extractelement <4 x float> %color.12, i32 0
  %165 = fadd float %164, 1.000000e+00
  %166 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 1, float %165, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %167 = extractelement <4 x float> %color.12, i32 1
  %168 = fadd float %167, 1.000000e+00
  %169 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 2, float undef, i32 undef, float %168, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select = select i1 %163, <4 x float> %166, <4 x float> %169
  %i95105 = add i32 %i95.0, 1
  br label %loop-header96

loop-header109:                                   ; preds = %ifmerge112, %then97
  %color.14 = phi <4 x float> [ %color.12, %then97 ], [ %select334, %ifmerge112 ]
  %i108.0 = phi i32 [ 0, %then97 ], [ %select335, %ifmerge112 ]
  %170 = icmp sgt i32 %i108.0, 41
  br i1 %170, label %then110, label %ifmerge112

then110:                                          ; preds = %loop-header109
  br label %loop-header122

ifmerge112:                                       ; preds = %loop-header109
  %171 = extractelement <4 x float> %color.14, i32 2
  %172 = fadd float %171, %.pre346
  %173 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 4, float undef, i32 undef, float undef, i32 undef, float %172, i32 0, float undef, i32 undef)
  %174 = extractelement <4 x float> %color.14, i32 0
  %175 = fcmp olt float %174, %161
  %176 = extractelement <4 x float> %color.14, i32 3
  %177 = fadd float %176, 1.000000e+00
  %178 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 12, float undef, i32 undef, float undef, i32 undef, float %172, i32 0, float %177, i32 0)
  %select334 = select i1 %175, <4 x float> %173, <4 x float> %178
  %179 = zext i1 %175 to i32
  %i108118 = xor i32 %179, 1
  %select335 = add i32 %i108.0, %i108118
  br label %loop-header109

loop-header122:                                   ; preds = %ifmerge129, %then110
  %color.15 = phi <4 x float> [ %color.14, %then110 ], [ %188, %ifmerge129 ]
  %i121.0 = phi i32 [ 0, %then110 ], [ %i121131, %ifmerge129 ]
  %180 = icmp sgt i32 %i121.0, 41
  br i1 %180, label %then123, label %ifmerge125

then123:                                          ; preds = %loop-header122
  br label %loop-merge133

ifmerge125:                                       ; preds = %loop-header122
  %181 = extractelement <4 x float> %color.15, i32 2
  %182 = fadd float %181, %.pre346
  %183 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.15, i32 4, float undef, i32 undef, float undef, i32 undef, float %182, i32 0, float undef, i32 undef)
  %184 = extractelement <4 x float> %color.15, i32 0
  %185 = fcmp olt float %184, %161
  br i1 %185, label %then127, label %ifmerge129

then127:                                          ; preds = %ifmerge125
  br label %loop-merge133

ifmerge129:                                       ; preds = %ifmerge125
  %186 = extractelement <4 x float> %color.15, i32 3
  %187 = fadd float %186, 1.000000e+00
  %188 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %183, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %187, i32 0)
  %i121131 = add i32 %i121.0, 1
  br label %loop-header122

loop-merge133:                                    ; preds = %then127, %then123
  %color.16 = phi <4 x float> [ %color.15, %then123 ], [ %183, %then127 ]
  %.pre349 = load <4 x float> addrspace(2)* @bigColor4, align 16, !gla.uniform !15
  br label %loop-header134

loop-header134:                                   ; preds = %loop-header134.backedge, %loop-merge133
  %color.17 = phi <4 x float> [ %color.16, %loop-merge133 ], [ %color.17.be, %loop-header134.backedge ]
  %color135 = fadd <4 x float> %color.17, %.pre349
  %189 = extractelement <4 x float> %color135, i32 0
  %190 = fcmp olt float %189, %161
  br i1 %190, label %then136, label %ifmerge138

then136:                                          ; preds = %loop-header134
  br label %loop-header134.backedge

loop-header134.backedge:                          ; preds = %then136, %ifmerge146
  %color.17.be = phi <4 x float> [ %color135, %then136 ], [ %select341, %ifmerge146 ]
  br label %loop-header134

ifmerge138:                                       ; preds = %loop-header134
  %191 = extractelement <4 x float> %color135, i32 1
  %192 = fcmp olt float %191, %161
  %193 = fadd float %161, %191
  %194 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color135, i32 2, float undef, i32 undef, float %193, i32 0, float undef, i32 undef, float undef, i32 undef)
  %195 = fadd float %161, %189
  %196 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color135, i32 1, float %195, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select341 = select i1 %192, <4 x float> %194, <4 x float> %196
  %197 = extractelement <4 x float> %select341, i32 2
  %198 = fcmp uge float %197, %161
  br i1 %198, label %then144, label %ifmerge146

then144:                                          ; preds = %ifmerge138
  %.pre351 = load <4 x float> addrspace(2)* @bigColor5, align 16, !gla.uniform !16
  %.pre352 = load float addrspace(2)* @d5, align 4, !gla.uniform !17
  br label %loop-header149

ifmerge146:                                       ; preds = %ifmerge138
  br label %loop-header134.backedge

loop-header149:                                   ; preds = %loop-header149, %then144
  %color.19 = phi <4 x float> [ %select341, %then144 ], [ %select338, %loop-header149 ]
  %color150 = fadd <4 x float> %color.19, %.pre351
  %199 = extractelement <4 x float> %color150, i32 1
  %200 = fcmp olt float %199, %.pre352
  %201 = fadd float %.pre352, %199
  %202 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color150, i32 2, float undef, i32 undef, float %201, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select338 = select i1 %200, <4 x float> %202, <4 x float> %color150
  %203 = extractelement <4 x float> %select338, i32 0
  %204 = fcmp uge float %203, %.pre352
  br i1 %204, label %then154, label %loop-header149

then154:                                          ; preds = %loop-header149
  %205 = load float addrspace(2)* @d6, align 4, !gla.uniform !18
  %206 = fcmp olt float %203, %205
  br i1 %206, label %then159, label %else167

then159:                                          ; preds = %then154
  %207 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  br label %loop-header160

loop-header160:                                   ; preds = %ifmerge163, %then159
  %color.21 = phi <4 x float> [ %select338, %then159 ], [ %color164, %ifmerge163 ]
  %208 = extractelement <4 x float> %color.21, i32 1
  %209 = fcmp uge float %208, %205
  br i1 %209, label %then161, label %ifmerge163

then161:                                          ; preds = %loop-header160
  br label %ifmerge175

ifmerge163:                                       ; preds = %loop-header160
  %color164 = fadd <4 x float> %color.21, %207
  br label %loop-header160

else167:                                          ; preds = %then154
  %210 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  %211 = extractelement <4 x float> %210, i32 2
  br label %loop-header168

loop-header168:                                   ; preds = %ifmerge171, %else167
  %color.22 = phi <4 x float> [ %select338, %else167 ], [ %215, %ifmerge171 ]
  %212 = extractelement <4 x float> %color.22, i32 2
  %213 = fcmp uge float %212, %205
  br i1 %213, label %then169, label %ifmerge171

then169:                                          ; preds = %loop-header168
  br label %ifmerge175

ifmerge171:                                       ; preds = %loop-header168
  %214 = fadd float %212, %211
  %215 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.22, i32 4, float undef, i32 undef, float undef, i32 undef, float %214, i32 0, float undef, i32 undef)
  br label %loop-header168

ifmerge175:                                       ; preds = %then169, %then161
  %216 = phi <4 x float> [ %207, %then161 ], [ %210, %then169 ]
  %color.23 = phi <4 x float> [ %color.21, %then161 ], [ %color.22, %then169 ]
  %217 = extractelement <4 x float> %color.23, i32 0
  %218 = fcmp olt float %217, %205
  br i1 %218, label %then176, label %else187

then176:                                          ; preds = %ifmerge175
  %219 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %220 = fcmp olt float %219, 1.000000e+00
  br label %loop-header177

loop-header177:                                   ; preds = %ifmerge180, %then176
  %color.24 = phi <4 x float> [ %color.23, %then176 ], [ %color181, %ifmerge180 ]
  %221 = extractelement <4 x float> %color.24, i32 1
  %222 = fcmp uge float %221, %205
  br i1 %222, label %then178, label %ifmerge180

then178:                                          ; preds = %loop-header177
  br label %loop-merge186

ifmerge180:                                       ; preds = %loop-header177
  %color181 = fadd <4 x float> %color.24, %216
  br i1 %220, label %then182, label %loop-header177

then182:                                          ; preds = %ifmerge180
  br label %loop-merge186

loop-merge186:                                    ; preds = %then182, %then178
  %color.25 = phi <4 x float> [ %color.24, %then178 ], [ %color181, %then182 ]
  br label %ifmerge195

else187:                                          ; preds = %ifmerge175
  %223 = extractelement <4 x float> %216, i32 2
  br label %loop-header188

loop-header188:                                   ; preds = %ifmerge191, %else187
  %color.26 = phi <4 x float> [ %color.23, %else187 ], [ %227, %ifmerge191 ]
  %224 = extractelement <4 x float> %color.26, i32 2
  %225 = fcmp uge float %224, %205
  br i1 %225, label %then189, label %ifmerge191

then189:                                          ; preds = %loop-header188
  br label %ifmerge195

ifmerge191:                                       ; preds = %loop-header188
  %226 = fadd float %224, %223
  %227 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.26, i32 4, float undef, i32 undef, float undef, i32 undef, float %226, i32 0, float undef, i32 undef)
  br label %loop-header188

ifmerge195:                                       ; preds = %then189, %loop-merge186
  %color.27 = phi <4 x float> [ %color.25, %loop-merge186 ], [ %color.26, %then189 ]
  %.pre353 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %228 = fcmp olt float %.pre353, 0.000000e+00
  %229 = load <4 x float> addrspace(2)* @bigColor7, align 16, !gla.uniform !21
  %230 = fcmp olt float %.pre353, 1.000000e+00
  br label %loop-header196

loop-header196:                                   ; preds = %ifmerge204, %ifmerge195
  %color.28 = phi <4 x float> [ %color.27, %ifmerge195 ], [ %color206, %ifmerge204 ]
  br i1 %228, label %then197, label %ifmerge199

then197:                                          ; preds = %loop-header196
  br label %loop-merge211

ifmerge199:                                       ; preds = %loop-header196
  %color200 = fadd <4 x float> %color.28, %229
  br i1 %230, label %then201, label %ifmerge204

then201:                                          ; preds = %ifmerge199
  %231 = extractelement <4 x float> %color200, i32 2
  %232 = fadd float %231, 1.000000e+00
  %233 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color200, i32 4, float undef, i32 undef, float undef, i32 undef, float %232, i32 0, float undef, i32 undef)
  br label %loop-merge211

ifmerge204:                                       ; preds = %ifmerge199
  %color206 = fadd <4 x float> %BaseColor, %color200
  br label %loop-header196

loop-merge211:                                    ; preds = %then201, %then197
  %color.29 = phi <4 x float> [ %color.28, %then197 ], [ %233, %then201 ]
  %.pre354 = load float addrspace(2)* @d8, align 4, !gla.uniform !22
  %234 = fcmp olt float %.pre354, 0.000000e+00
  %235 = fcmp olt float %.pre354, 1.000000e+00
  br label %loop-header212

loop-header212:                                   ; preds = %ifmerge225, %loop-merge211
  %color.30 = phi <4 x float> [ %color.29, %loop-merge211 ], [ %color227, %ifmerge225 ]
  br i1 %234, label %then213, label %ifmerge215

then213:                                          ; preds = %loop-header212
  br label %loop-merge232

ifmerge215:                                       ; preds = %loop-header212
  %color216 = fadd <4 x float> %color.30, %229
  br i1 %235, label %then217, label %ifmerge225

then217:                                          ; preds = %ifmerge215
  %236 = extractelement <4 x float> %color216, i32 2
  %237 = fadd float %236, 1.000000e+00
  %238 = fcmp olt float %.pre354, 2.000000e+00
  %239 = extractelement <4 x float> %color216, i32 1
  %240 = fadd float %239, 1.000000e+00
  %241 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color216, i32 6, float undef, i32 undef, float %240, i32 0, float %237, i32 0, float undef, i32 undef)
  %242 = extractelement <4 x float> %color216, i32 0
  %243 = fadd float %242, 1.000000e+00
  %244 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color216, i32 5, float %243, i32 0, float undef, i32 undef, float %237, i32 0, float undef, i32 undef)
  %select337 = select i1 %238, <4 x float> %241, <4 x float> %244
  br label %loop-merge232

ifmerge225:                                       ; preds = %ifmerge215
  %color227 = fadd <4 x float> %BaseColor, %color216
  %245 = extractelement <4 x float> %color227, i32 2
  %246 = fcmp uge float %245, %.pre354
  br i1 %246, label %then228, label %loop-header212

then228:                                          ; preds = %ifmerge225
  br label %loop-merge232

loop-merge232:                                    ; preds = %then228, %then217, %then213
  %color.32 = phi <4 x float> [ %color.30, %then213 ], [ %select337, %then217 ], [ %color227, %then228 ]
  %.pre355 = load float addrspace(2)* @d9, align 4, !gla.uniform !23
  %247 = fcmp ogt float %.pre355, %.pre354
  br label %loop-header233

loop-header233:                                   ; preds = %ifmerge245, %loop-merge232
  %color.33 = phi <4 x float> [ %color.32, %loop-merge232 ], [ %color.35, %ifmerge245 ]
  %248 = extractelement <4 x float> %color.33, i32 3
  %249 = fcmp uge float %248, %.pre355
  br i1 %249, label %then234, label %ifmerge236

then234:                                          ; preds = %loop-header233
  br label %loop-merge247

ifmerge236:                                       ; preds = %loop-header233
  br i1 %247, label %then237, label %ifmerge245

then237:                                          ; preds = %ifmerge236
  %250 = extractelement <4 x float> %color.33, i32 0
  %251 = fcmp ugt float %250, %.pre353
  br i1 %251, label %ifmerge244, label %then238

then238:                                          ; preds = %then237
  %252 = extractelement <4 x float> %color.33, i32 2
  %253 = fcmp oeq float %252, 5.000000e+00
  br i1 %253, label %then239, label %else241

then239:                                          ; preds = %then238
  %254 = fadd float %248, 1.000000e+00
  %255 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.33, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %254, i32 0)
  br label %ifmerge244

else241:                                          ; preds = %then238
  br label %loop-merge247

ifmerge244:                                       ; preds = %then237, %then239
  %color.34 = phi <4 x float> [ %255, %then239 ], [ %color.33, %then237 ]
  br label %ifmerge245

ifmerge245:                                       ; preds = %ifmerge236, %ifmerge244
  %color.35 = phi <4 x float> [ %color.34, %ifmerge244 ], [ %color.33, %ifmerge236 ]
  br label %loop-header233

loop-merge247:                                    ; preds = %else241, %then234
  %.pre356 = load float addrspace(2)* @d10, align 4, !gla.uniform !24
  %256 = load float addrspace(2)* @d11, align 4, !gla.uniform !25
  %257 = load float addrspace(2)* @d12, align 4, !gla.uniform !26
  br label %loop-header248

loop-header248:                                   ; preds = %then253, %loop-merge247
  %color.36 = phi <4 x float> [ %color.33, %loop-merge247 ], [ %select339, %then253 ]
  %258 = extractelement <4 x float> %color.36, i32 2
  %259 = fcmp uge float %258, %.pre356
  br i1 %259, label %then249, label %ifmerge251

then249:                                          ; preds = %loop-header248
  br label %loop-merge265

ifmerge251:                                       ; preds = %loop-header248
  %260 = extractelement <4 x float> %color.36, i32 1
  %261 = fadd float %260, 1.000000e+00
  %262 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.36, i32 2, float undef, i32 undef, float %261, i32 0, float undef, i32 undef, float undef, i32 undef)
  %263 = fcmp olt float %261, %256
  br i1 %263, label %then253, label %ifmerge261

then253:                                          ; preds = %ifmerge251
  %264 = fadd float %258, 1.000000e+00
  %265 = extractelement <4 x float> %color.36, i32 3
  %266 = fcmp olt float %265, %257
  %267 = fadd float %265, 1.000000e+00
  %268 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %262, i32 12, float undef, i32 undef, float undef, i32 undef, float %264, i32 0, float %267, i32 0)
  %269 = extractelement <4 x float> %color.36, i32 0
  %270 = fadd float %269, 1.000000e+00
  %271 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %262, i32 5, float %270, i32 0, float undef, i32 undef, float %264, i32 0, float undef, i32 undef)
  %select339 = select i1 %266, <4 x float> %268, <4 x float> %271
  br label %loop-header248

ifmerge261:                                       ; preds = %ifmerge251
  %color262 = fadd <4 x float> %262, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-merge265

loop-merge265:                                    ; preds = %ifmerge261, %then249
  %color.38 = phi <4 x float> [ %color.36, %then249 ], [ %color262, %ifmerge261 ]
  %272 = load <4 x float> addrspace(2)* @bigColor8, align 16, !gla.uniform !27
  %273 = extractelement <4 x float> %272, i32 0
  br label %loop-header266

loop-header266:                                   ; preds = %ifmerge269, %loop-merge265
  %color.39 = phi <4 x float> [ %color.38, %loop-merge265 ], [ %select343, %ifmerge269 ]
  %274 = extractelement <4 x float> %color.39, i32 0
  %275 = fcmp uge float %274, 1.000000e+01
  br i1 %275, label %then267, label %ifmerge269

then267:                                          ; preds = %loop-header266
  %color279 = fadd <4 x float> %color.39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre357 = load float addrspace(2)* @d14, align 4, !gla.uniform !28
  %276 = load float addrspace(2)* @d15, align 4, !gla.uniform !29
  br label %loop-header280

ifmerge269:                                       ; preds = %loop-header266
  %color270 = fadd <4 x float> %color.39, %272
  %277 = extractelement <4 x float> %color270, i32 2
  %278 = fcmp olt float %277, %.pre354
  %279 = extractelement <4 x float> %color270, i32 3
  %280 = fcmp olt float %279, %205
  %281 = extractelement <4 x float> %color270, i32 1
  %282 = fadd float %281, %273
  %283 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color270, i32 2, float undef, i32 undef, float %282, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select336 = select i1 %280, <4 x float> %color270, <4 x float> %283
  %select343 = select i1 %278, <4 x float> %select336, <4 x float> %283
  br label %loop-header266

loop-header280:                                   ; preds = %else285, %then267
  %color.40 = phi <4 x float> [ %color279, %then267 ], [ %color286, %else285 ]
  %284 = extractelement <4 x float> %color.40, i32 0
  %285 = fcmp uge float %284, %.pre357
  br i1 %285, label %then281, label %ifmerge283

then281:                                          ; preds = %loop-header280
  %color290 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre358 = load float addrspace(2)* @d16, align 4, !gla.uniform !30
  br label %loop-header291

ifmerge283:                                       ; preds = %loop-header280
  %286 = extractelement <4 x float> %color.40, i32 1
  %287 = fcmp olt float %286, %276
  br i1 %287, label %then284, label %else285

then284:                                          ; preds = %ifmerge283
  br label %stage-epilogue

else285:                                          ; preds = %ifmerge283
  %color286 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header280

loop-header291:                                   ; preds = %ifmerge294, %then281
  %color.41 = phi <4 x float> [ %color290, %then281 ], [ %292, %ifmerge294 ]
  %288 = extractelement <4 x float> %color.41, i32 3
  %289 = fcmp uge float %288, %.pre358
  br i1 %289, label %then292, label %ifmerge294

then292:                                          ; preds = %loop-header291
  %290 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header298

ifmerge294:                                       ; preds = %loop-header291
  %291 = fadd float %288, 1.000000e+00
  %292 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.41, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %291, i32 0)
  br label %loop-header291

loop-header298:                                   ; preds = %ifmerge301, %then292
  %color.42 = phi <4 x float> [ %color.41, %then292 ], [ %color302, %ifmerge301 ]
  %293 = extractelement <4 x float> %color.42, i32 3
  %294 = extractelement <4 x float> %color.42, i32 1
  %notlhs331 = fcmp uge float %293, %.pre345
  %notrhs332 = fcmp uge float %294, %.pre346
  %295 = or i1 %notrhs332, %notlhs331
  br i1 %295, label %then299, label %ifmerge301

then299:                                          ; preds = %loop-header298
  %.pre359 = load float addrspace(2)* @d18, align 4, !gla.uniform !31
  %296 = load float addrspace(2)* @d17, align 4, !gla.uniform !32
  br label %loop-header308

ifmerge301:                                       ; preds = %loop-header298
  %color302 = fadd <4 x float> %color.42, %290
  %297 = extractelement <4 x float> %color302, i32 2
  %298 = fcmp olt float %297, %.pre346
  br i1 %298, label %then303, label %loop-header298

then303:                                          ; preds = %ifmerge301
  br label %stage-epilogue

loop-header308:                                   ; preds = %ifmerge311, %then299
  %color.43 = phi <4 x float> [ %color.42, %then299 ], [ %color312, %ifmerge311 ]
  %299 = extractelement <4 x float> %color.43, i32 1
  %300 = fcmp olt float %299, %.pre359
  br i1 %300, label %then309, label %ifmerge311

then309:                                          ; preds = %loop-header308
  br label %stage-epilogue

ifmerge311:                                       ; preds = %loop-header308
  %color312 = fadd <4 x float> %color.43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %301 = extractelement <4 x float> %color312, i32 0
  %302 = fcmp uge float %301, %296
  br i1 %302, label %then313, label %loop-header308

then313:                                          ; preds = %ifmerge311
  br label %loop-header318

loop-header318:                                   ; preds = %else323, %then313
  %color.44 = phi <4 x float> [ %color312, %then313 ], [ %color324, %else323 ]
  %303 = extractelement <4 x float> %color.44, i32 1
  %304 = fcmp uge float %303, %.pre358
  br i1 %304, label %then319, label %ifmerge321

then319:                                          ; preds = %loop-header318
  %color328 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %stage-epilogue

ifmerge321:                                       ; preds = %loop-header318
  %305 = extractelement <4 x float> %color.44, i32 3
  %306 = fcmp olt float %305, %.pre358
  br i1 %306, label %then322, label %else323

then322:                                          ; preds = %ifmerge321
  call void @llvm.gla.discard()
  br label %stage-exit

else323:                                          ; preds = %ifmerge321
  %color324 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header318

stage-epilogue:                                   ; preds = %then319, %then309, %then303, %then284
  %FragColor_shadow330.0 = phi <4 x float> [ %color279, %then309 ], [ %color328, %then319 ], [ %color279, %then303 ], [ %color279, %then284 ]
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %FragColor_shadow330.0), !gla.output !50
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then322
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.discard() #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float const66 = 0.33;
const float const68 = 0.66;
const vec4 const70 = vec4(0.66);
const vec4 const71 = vec4(0.33);
const float const79 = 42.0;
const vec4 const81 = vec4(1.0);
vec4 color48;
const int const89i_0 = 0;
const int const93i_1 = 1;
vec4 color64;
const float const181 = 20.0;
const float const183 = 1.0;
const int const195i_41 = 41;
vec4 temp207;
vec4 select341;
vec4 select338;
float temp226;
vec4 color181;
const float const238 = 0.0;
vec4 color200;
vec4 color216;
const float const249 = 2.0;
vec4 color227;
const float const260 = 5.0;
vec4 temp264;
const float const274 = 10.0;
vec4 color312;

void main()
{
    vec4 color_1;
    vec4 color_2;
    vec4 color_3;
    vec4 color_4;
    vec4 color_5;
    vec4 color_6;
    vec4 color_7;
    int i_0;
    vec4 color_8;
    vec4 color_10;
    int temp31;
    vec4 color_12;
    int temp33;
    vec4 color_14;
    int temp35;
    vec4 color_15;
    int temp37;
    vec4 color_16;
    vec4 color_17;
    vec4 color_17_be;
    vec4 color_19;
    vec4 color_21;
    vec4 color_22;
    vec4 color_23;
    vec4 color_24;
    vec4 color_25;
    vec4 color_26;
    vec4 color_27;
    vec4 color_28;
    vec4 color_29;
    vec4 color_30;
    vec4 color_32;
    vec4 color_33;
    vec4 color_34;
    vec4 color_35;
    vec4 color_36;
    vec4 color_38;
    vec4 color_39;
    vec4 color_40;
    vec4 color_41;
    vec4 color_42;
    vec4 color_43;
    vec4 color_44;
    vec4 FragColor_shadow330_0;
    bool temp65 = BaseColor.x < const66;
    bool temp67 = BaseColor.x < const68;
    vec4 select342_v = temp67 ? const70 : const71;
    vec4 select344_v = temp65 ? const71 : select342_v;
    vec4 select344 = BaseColor + select344_v;
    color_1 = select344;
    while (! (color_1.x >= d)){
        vec4 color16 = color_1 + bigColor;
        color_1 = color16;
    }
    
    color_2 = color_1;
    while (! (color_2.z >= d)){
        vec4 color23 = color_2 + bigColor1_1;
        bool temp76 = color23.w < d;
        vec4 color27 = bigColor1_1 + color23;
        vec4 select340 = temp76 ? color23 : color27;
        color_2 = select340;
    }
    
    color_3 = color_2;
    while (! (color_3.x >= const79)){
        vec4 color34 = color_3 + const81;
        color_3 = color34;
    }
    
    color_4 = color_3;
    while (true) {
        bool notlhs = color_4.w >= d2;
        bool notrhs = color_4.y >= d3;
        bool temp84 = notrhs || notlhs;
        if (temp84) {
            break;
        }
        
        vec4 color41 = color_4 + bigColor1_2;
        color_4 = color41;
    }
    
    color_5 = color_4;
    while (! (color_5.z >= d3)){
        color48 = color_5 + bigColor1_3;
        bool temp87 = color48.y < d4;
        if (temp87) {
            color_6 = color48;
            break;
        }
        
        vec4 color52 = bigColor1_3 + color48;
        color_5 = color52;
    }
    
    color_6 = color_5;
    color_7 = color_6;
    i_0 = const89i_0;
    while (true) {
        bool temp90 = i_0 < Count;
        if (! temp90) {
            break;
        }
        
        vec4 color59 = color_7 + bigColor2;
        int temp92 = i_0 + const93i_1;
        color_7 = color59;
        i_0 = temp92;
    }
    
    color_8 = color_7;
    while (true) {
        color64 = color_8 + bigColor3;
        bool temp95 = color64.x >= d2;
        if (temp95) {
            break;
        }
        
        color_8 = color64;
    }
    
    float temp96 = color64.z + d3;
    vec4 temp97 = color64;
    temp97.z = temp96;
    float temp98 = temp97.z + d3;
    vec4 temp99 = temp97;
    temp99.z = temp98;
    float temp100 = temp99.z + d3;
    vec4 temp101 = temp99;
    temp101.z = temp100;
    float temp102 = temp101.z + d3;
    vec4 temp103 = temp101;
    temp103.z = temp102;
    float temp104 = temp103.z + d3;
    vec4 temp105 = temp103;
    temp105.z = temp104;
    float temp106 = temp105.z + d3;
    vec4 temp107 = temp105;
    temp107.z = temp106;
    float temp108 = temp107.z + d3;
    vec4 temp109 = temp107;
    temp109.z = temp108;
    float temp110 = temp109.z + d3;
    vec4 temp111 = temp109;
    temp111.z = temp110;
    float temp112 = temp111.z + d3;
    vec4 temp113 = temp111;
    temp113.z = temp112;
    float temp114 = temp113.z + d3;
    vec4 temp115 = temp113;
    temp115.z = temp114;
    float temp116 = temp115.z + d3;
    vec4 temp117 = temp115;
    temp117.z = temp116;
    float temp118 = temp117.z + d3;
    vec4 temp119 = temp117;
    temp119.z = temp118;
    float temp120 = temp119.z + d3;
    vec4 temp121 = temp119;
    temp121.z = temp120;
    float temp122 = temp121.z + d3;
    vec4 temp123 = temp121;
    temp123.z = temp122;
    float temp124 = temp123.z + d3;
    vec4 temp125 = temp123;
    temp125.z = temp124;
    float temp126 = temp125.z + d3;
    vec4 temp127 = temp125;
    temp127.z = temp126;
    float temp128 = temp127.z + d3;
    vec4 temp129 = temp127;
    temp129.z = temp128;
    float temp130 = temp129.z + d3;
    vec4 temp131 = temp129;
    temp131.z = temp130;
    float temp132 = temp131.z + d3;
    vec4 temp133 = temp131;
    temp133.z = temp132;
    float temp134 = temp133.z + d3;
    vec4 temp135 = temp133;
    temp135.z = temp134;
    float temp136 = temp135.z + d3;
    vec4 temp137 = temp135;
    temp137.z = temp136;
    float temp138 = temp137.z + d3;
    vec4 temp139 = temp137;
    temp139.z = temp138;
    float temp140 = temp139.z + d3;
    vec4 temp141 = temp139;
    temp141.z = temp140;
    float temp142 = temp141.z + d3;
    vec4 temp143 = temp141;
    temp143.z = temp142;
    float temp144 = temp143.z + d3;
    vec4 temp145 = temp143;
    temp145.z = temp144;
    float temp146 = temp145.z + d3;
    vec4 temp147 = temp145;
    temp147.z = temp146;
    float temp148 = temp147.z + d3;
    vec4 temp149 = temp147;
    temp149.z = temp148;
    float temp150 = temp149.z + d3;
    vec4 temp151 = temp149;
    temp151.z = temp150;
    float temp152 = temp151.z + d3;
    vec4 temp153 = temp151;
    temp153.z = temp152;
    float temp154 = temp153.z + d3;
    vec4 temp155 = temp153;
    temp155.z = temp154;
    float temp156 = temp155.z + d3;
    vec4 temp157 = temp155;
    temp157.z = temp156;
    float temp158 = temp157.z + d3;
    vec4 temp159 = temp157;
    temp159.z = temp158;
    float temp160 = temp159.z + d3;
    vec4 temp161 = temp159;
    temp161.z = temp160;
    float temp162 = temp161.z + d3;
    vec4 temp163 = temp161;
    temp163.z = temp162;
    float temp164 = temp163.z + d3;
    vec4 temp165 = temp163;
    temp165.z = temp164;
    float temp166 = temp165.z + d3;
    vec4 temp167 = temp165;
    temp167.z = temp166;
    float temp168 = temp167.z + d3;
    vec4 temp169 = temp167;
    temp169.z = temp168;
    float temp170 = temp169.z + d3;
    vec4 temp171 = temp169;
    temp171.z = temp170;
    float temp172 = temp171.z + d3;
    vec4 temp173 = temp171;
    temp173.z = temp172;
    float temp174 = temp173.z + d3;
    vec4 temp175 = temp173;
    temp175.z = temp174;
    float temp176 = temp175.z + d3;
    vec4 temp177 = temp175;
    temp177.z = temp176;
    float temp178 = temp177.z + d3;
    vec4 temp179 = temp177;
    temp179.z = temp178;
    color_10 = temp179;
    temp31 = const89i_0;
    for (temp31 = 0; temp31 < 100; ++temp31) {
        bool temp180 = color_10.z < const181;
        float temp182 = color_10.x + const183;
        vec4 temp184 = color_10;
        temp184.x = temp182;
        float temp185 = color_10.y + const183;
        vec4 temp186 = color_10;
        temp186.y = temp185;
        vec4 select333 = temp180 ? temp184 : temp186;
        color_10 = select333;
    }
    
    color_12 = color_10;
    temp33 = const89i_0;
    for (temp33 = 0; temp33 < 120; ++temp33) {
        bool temp188 = color_12.z < const181;
        float temp189 = color_12.x + const183;
        vec4 temp190 = color_12;
        temp190.x = temp189;
        float temp191 = color_12.y + const183;
        vec4 temp192 = color_12;
        temp192.y = temp191;
        vec4 select = temp188 ? temp190 : temp192;
        color_12 = select;
    }
    
    color_14 = color_12;
    temp35 = const89i_0;
    while (true) {
        bool temp194 = temp35 > const195i_41;
        if (temp194) {
            break;
        }
        
        float temp196 = color_14.z + d3;
        vec4 temp197 = color_14;
        temp197.z = temp196;
        bool temp198 = color_14.x < d4;
        float temp199 = color_14.w + const183;
        vec4 temp200 = color_14;
        temp200.zw = vec2(temp196, temp199);
        vec4 select334 = temp198 ? temp197 : temp200;
        int temp202 = int(temp198);
        int temp203 = temp202 ^ const93i_1;
        int select335 = temp35 + temp203;
        color_14 = select334;
        temp35 = select335;
    }
    
    color_15 = color_14;
    temp37 = const89i_0;
    while (true) {
        bool temp205 = temp37 > const195i_41;
        if (temp205) {
            color_16 = color_15;
            break;
        }
        
        float temp206 = color_15.z + d3;
        temp207 = color_15;
        temp207.z = temp206;
        bool temp208 = color_15.x < d4;
        if (temp208) {
            color_16 = temp207;
            break;
        }
        
        float temp209 = color_15.w + const183;
        vec4 temp210 = temp207;
        temp210.w = temp209;
        int temp211 = temp37 + const93i_1;
        color_15 = temp210;
        temp37 = temp211;
    }
    
    color_17 = color_16;
    while (true) {
        vec4 color135 = color_17 + bigColor4;
        bool temp213 = color135.x < d4;
        if (temp213) {
            color_17_be = color135;
        }
        else {
            bool temp214 = color135.y < d4;
            float temp215 = d4 + color135.y;
            vec4 temp216 = color135;
            temp216.y = temp215;
            float temp217 = d4 + color135.x;
            vec4 temp218 = color135;
            temp218.x = temp217;
            select341 = temp214 ? temp216 : temp218;
            bool temp220 = select341.z >= d4;
            if (temp220) {
                break;
            }
            
            color_17_be = select341;
        }
        
        color_17 = color_17_be;
    }
    
    color_19 = select341;
    while (true) {
        vec4 color150 = color_19 + bigColor5;
        bool temp222 = color150.y < d5;
        float temp223 = d5 + color150.y;
        vec4 temp224 = color150;
        temp224.y = temp223;
        select338 = temp222 ? temp224 : color150;
        bool temp227 = select338.x >= d5;
        if (temp227) {
            break;
        }
        
        color_19 = select338;
    }
    
    bool temp228 = select338.x < d6;
    if (temp228) {
        color_21 = select338;
        while (! (color_21.y >= d6)){
            vec4 color164 = color_21 + bigColor6;
            color_21 = color164;
        }
        
        color_23 = color_21;
    }
    else {
        color_22 = select338;
        while (! (color_22.z >= d6)){
            float temp230 = color_22.z + bigColor6.z;
            vec4 temp231 = color_22;
            temp231.z = temp230;
            color_22 = temp231;
        }
        
        color_23 = color_22;
    }
    
    bool temp232 = color_23.x < d6;
    if (temp232) {
        bool temp233 = d7 < const183;
        color_24 = color_23;
        while (! (color_24.y >= d6)){
            color181 = color_24 + bigColor6;
            if (temp233) {
                color_25 = color181;
                break;
            }
            
            color_24 = color181;
        }
        
        color_25 = color_24;
        color_27 = color_25;
    }
    else {
        color_26 = color_23;
        while (! (color_26.z >= d6)){
            float temp235 = color_26.z + bigColor6.z;
            vec4 temp236 = color_26;
            temp236.z = temp235;
            color_26 = temp236;
        }
        
        color_27 = color_26;
    }
    
    bool temp237 = d7 < const238;
    bool temp239 = d7 < const183;
    color_28 = color_27;
    while (true) {
        if (temp237) {
            color_29 = color_28;
            break;
        }
        
        color200 = color_28 + bigColor7;
        if (temp239) {
            float temp241 = color200.z + const183;
            vec4 temp242 = color200;
            temp242.z = temp241;
            color_29 = temp242;
            break;
        }
        
        vec4 color206 = BaseColor + color200;
        color_28 = color206;
    }
    
    bool temp244 = d8 < const238;
    bool temp245 = d8 < const183;
    color_30 = color_29;
    while (true) {
        if (temp244) {
            color_32 = color_30;
            break;
        }
        
        color216 = color_30 + bigColor7;
        if (temp245) {
            float temp247 = color216.z + const183;
            bool temp248 = d8 < const249;
            float temp250 = color216.y + const183;
            vec4 temp251 = color216;
            temp251.yz = vec2(temp250, temp247);
            float temp252 = color216.x + const183;
            vec4 temp253 = color216;
            temp253.xz = vec2(temp252, temp247);
            vec4 select337 = temp248 ? temp251 : temp253;
            color_32 = select337;
            break;
        }
        
        color227 = BaseColor + color216;
        bool temp256 = color227.z >= d8;
        if (temp256) {
            color_32 = color227;
            break;
        }
        
        color_30 = color227;
    }
    
    bool temp257 = d9 > d8;
    color_33 = color_32;
    while (! (color_33.w >= d9)){
        color_35 = color_33;
        if (temp257) {
            bool temp258 = color_33.x > d7;
            color_34 = color_33;
            if (! temp258) {
                bool temp259 = color_33.z == const260;
                if (! temp259) {
                    break;
                }
                
                float temp261 = color_33.w + const183;
                vec4 temp262 = color_33;
                temp262.w = temp261;
                color_34 = temp262;
            }
            
            color_35 = color_34;
        }
        
        color_33 = color_35;
    }
    
    color_36 = color_33;
    while (! (color_36.z >= d10)){
        float temp263 = color_36.y + const183;
        temp264 = color_36;
        temp264.y = temp263;
        bool temp265 = temp263 < d11;
        if (! temp265) {
            vec4 color262 = temp264 + const81;
            color_38 = color262;
            break;
        }
        
        float temp267 = color_36.z + const183;
        bool temp268 = color_36.w < d12;
        float temp269 = color_36.w + const183;
        vec4 temp270 = temp264;
        temp270.zw = vec2(temp267, temp269);
        float temp271 = color_36.x + const183;
        vec4 temp272 = temp264;
        temp272.xz = vec2(temp271, temp267);
        vec4 select339 = temp268 ? temp270 : temp272;
        color_36 = select339;
    }
    
    color_38 = color_36;
    color_39 = color_38;
    while (! (color_39.x >= const274)){
        vec4 color270 = color_39 + bigColor8;
        bool temp276 = color270.z < d8;
        bool temp277 = color270.w < d6;
        float temp278 = color270.y + bigColor8.x;
        vec4 temp279 = color270;
        temp279.y = temp278;
        vec4 select336 = temp277 ? color270 : temp279;
        vec4 select343 = temp276 ? select336 : temp279;
        color_39 = select343;
    }
    
    vec4 color279 = color_39 + const81;
    color_40 = color279;
    while (! (color_40.x >= d14)){
        bool temp283 = color_40.y < d15;
        if (temp283) {
            FragColor_shadow330_0 = color279;
            gl_FragColor = FragColor_shadow330_0;
            return;
        }
        
        vec4 color286 = color_40 + const81;
        color_40 = color286;
    }
    
    vec4 color290 = color_40 + const81;
    color_41 = color290;
    while (! (color_41.w >= d16)){
        float temp286 = color_41.w + const183;
        vec4 temp287 = color_41;
        temp287.w = temp286;
        color_41 = temp287;
    }
    
    color_42 = color_41;
    while (true) {
        bool notlhs331 = color_42.w >= d2;
        bool notrhs332 = color_42.y >= d3;
        bool temp290 = notrhs332 || notlhs331;
        if (temp290) {
            color_43 = color_42;
            while (! (color_43.y < d18)){
                color312 = color_43 + const81;
                bool temp292 = color312.x >= d17;
                if (temp292) {
                    color_44 = color312;
                    while (! (color_44.y >= d16)){
                        bool temp293 = color_44.w < d16;
                        if (temp293) {
                            discard;
                        }
                        
                        vec4 color324 = color_44 + const81;
                        color_44 = color324;
                    }
                    
                    vec4 color328 = color_44 + const81;
                    FragColor_shadow330_0 = color328;
                    gl_FragColor = FragColor_shadow330_0;
                    return;
                }
                
                color_43 = color312;
            }
            
            FragColor_shadow330_0 = color279;
            gl_FragColor = FragColor_shadow330_0;
            return;
        }
        
        vec4 color302 = color_42 + bigColor1_2;
        bool temp297 = color302.z < d3;
        if (temp297) {
            FragColor_shadow330_0 = color279;
            gl_FragColor = FragColor_shadow330_0;
            
        }
        
        color_42 = color302;
    }
    
}


#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float const63 = 0.33;
const float const65 = 0.66;
const vec4 const67 = vec4(0.66);
const vec4 const68 = vec4(0.33);
const float const76 = 42.0;
const vec4 const78 = vec4(1.0);
const int const86i_0 = 0;
const int const90i_1 = 1;
vec4 color64;
const float const137 = 20.0;
const float const139 = 1.0;
const int const151i_41 = 41;
vec4 temp163;
vec4 select681;
vec4 select680;
float temp182;
const float const194 = 0.0;
vec4 color200;
vec4 color216;
const float const205 = 2.0;
vec4 color227;
const float const216 = 5.0;
const float const229 = 10.0;
vec4 color312;

void main()
{
    vec4 color_1_0;
    vec4 color_2_0;
    vec4 color_3_0;
    vec4 color_4_0;
    vec4 color_5_0;
    int i_0_0;
    vec4 color_7_0;
    vec4 color_8_0;
    int temp31_0;
    vec4 color_10_0;
    int temp33_0;
    vec4 color_12_0;
    int temp35_0;
    vec4 color_14_0;
    int temp37_0;
    vec4 color_15_0;
    vec4 color_16_0;
    vec4 color_17_0;
    vec4 color_17_be_0;
    vec4 color_19_0;
    vec4 color_21_0;
    vec4 color_22_0;
    vec4 color_23_0;
    vec4 color_24_0;
    vec4 color_26_0;
    vec4 color_27_0;
    vec4 color_28_0;
    vec4 color_29_0;
    vec4 color_30_0;
    vec4 color_32_0;
    vec4 color_33_0;
    vec4 color_34_0;
    vec4 color_35_0;
    vec4 color_36_0;
    vec4 color_39_0;
    vec4 color_40_0;
    vec4 color_41_0;
    vec4 color_42_0;
    vec4 color_43_0;
    vec4 color_44_0;
    vec4 FragColor_shadow677_0;
    bool temp651 = BaseColor.x < const63;
    bool temp673 = BaseColor.x < const65;
    vec4 temp66 = temp673 ? const67 : const68;
    vec4 ternary5_0 = temp651 ? const68 : temp66;
    vec4 select34412 = BaseColor + ternary5_0;
    color_1_0 = select34412;
    while (color_1_0.x < d){
        vec4 color1616 = color_1_0 + bigColor;
        color_1_0 = color1616;
    }
    
    color_2_0 = color_1_0;
    while (color_2_0.z < d){
        vec4 color2323 = color_2_0 + bigColor1_1;
        bool temp7624 = color2323.w < d;
        vec4 color2725 = bigColor1_1 + color2323;
        vec4 select = temp7624 ? color2323 : color2725;
        color_2_0 = select;
    }
    
    color_3_0 = color_2_0;
    while (color_3_0.x < const76){
        vec4 color3441 = color_3_0 + const78;
        color_3_0 = color3441;
    }
    
    color_4_0 = color_3_0;
    while (true) {
        bool notlhs50 = color_4_0.w >= d2;
        bool notrhs51 = color_4_0.y >= d3;
        bool temp8452 = notrhs51 || notlhs50;
        if (temp8452) {
            break;
        }
        
        vec4 color4156 = color_4_0 + bigColor1_2;
        color_4_0 = color4156;
    }
    
    color_5_0 = color_4_0;
    while (color_5_0.z < d3){
        vec4 color48 = color_5_0 + bigColor1_3;
        bool temp8765 = color48.y < d4;
        if (temp8765) {
            break;
        }
        
        vec4 color5270 = bigColor1_3 + color48;
        color_5_0 = color5270;
    }
    
    i_0_0 = const86i_0;
    color_7_0 = color_5_0;
    while (true) {
        bool temp87 = i_0_0 < Count;
        if (! temp87) {
            break;
        }
        
        vec4 color5984 = color_7_0 + bigColor2;
        int temp9285 = i_0_0 + const90i_1;
        i_0_0 = temp9285;
        color_7_0 = color5984;
    }
    
    color_8_0 = color_7_0;
    while (true) {
        color64 = color_8_0 + bigColor3;
        bool temp9595 = color64.x < d2;
        if (! temp9595) {
            break;
        }
        
        color_8_0 = color64;
    }
    
    float temp96102 = color64.z + d3;
    float temp98105 = d3 + temp96102;
    float temp100108 = d3 + temp98105;
    float temp102111 = d3 + temp100108;
    float temp104114 = d3 + temp102111;
    float temp106117 = d3 + temp104114;
    float temp108120 = d3 + temp106117;
    float temp110123 = d3 + temp108120;
    float temp112126 = d3 + temp110123;
    float temp114129 = d3 + temp112126;
    float temp116132 = d3 + temp114129;
    float temp118135 = d3 + temp116132;
    float temp120138 = d3 + temp118135;
    float temp122141 = d3 + temp120138;
    float temp124144 = d3 + temp122141;
    float temp126147 = d3 + temp124144;
    float temp128150 = d3 + temp126147;
    float temp130153 = d3 + temp128150;
    float temp132156 = d3 + temp130153;
    float temp134159 = d3 + temp132156;
    float temp136162 = d3 + temp134159;
    float temp138165 = d3 + temp136162;
    float temp140168 = d3 + temp138165;
    float temp142171 = d3 + temp140168;
    float temp144174 = d3 + temp142171;
    float temp146177 = d3 + temp144174;
    float temp148180 = d3 + temp146177;
    float temp150183 = d3 + temp148180;
    float temp152186 = d3 + temp150183;
    float temp154189 = d3 + temp152186;
    float temp156192 = d3 + temp154189;
    float temp158195 = d3 + temp156192;
    float temp160198 = d3 + temp158195;
    float temp162201 = d3 + temp160198;
    float temp164204 = d3 + temp162201;
    float temp166207 = d3 + temp164204;
    float temp168210 = d3 + temp166207;
    float temp170213 = d3 + temp168210;
    float temp172216 = d3 + temp170213;
    float temp174219 = d3 + temp172216;
    float temp176222 = d3 + temp174219;
    float temp178225 = d3 + temp176222;
    vec4 temp135 = color64;
    temp135.z = temp178225;
    temp31_0 = const86i_0;
    color_10_0 = temp135;
    for (temp31_0 = 0; temp31_0 < 100; ++temp31_0) {
        bool temp180233 = color_10_0.z < const137;
        float temp182234 = color_10_0.x + const139;
        vec4 temp140 = color_10_0;
        temp140.x = temp182234;
        float temp185237 = color_10_0.y + const139;
        vec4 temp142 = color_10_0;
        temp142.y = temp185237;
        vec4 select685 = temp180233 ? temp140 : temp142;
        color_10_0 = select685;
    }
    
    temp33_0 = const86i_0;
    color_12_0 = color_10_0;
    for (temp33_0 = 0; temp33_0 < 120; ++temp33_0) {
        bool temp188256 = color_12_0.z < const137;
        float temp189257 = color_12_0.x + const139;
        vec4 temp146 = color_12_0;
        temp146.x = temp189257;
        float temp191260 = color_12_0.y + const139;
        vec4 temp148 = color_12_0;
        temp148.y = temp191260;
        vec4 select683 = temp188256 ? temp146 : temp148;
        color_12_0 = select683;
    }
    
    temp35_0 = const86i_0;
    color_14_0 = color_12_0;
    while (true) {
        bool temp194279 = temp35_0 > const151i_41;
        if (temp194279) {
            break;
        }
        
        float temp196283 = color_14_0.z + d3;
        bool temp198286 = color_14_0.x < d4;
        vec4 temp154 = color_14_0;
        temp154.z = temp196283;
        float temp199287 = color_14_0.w + const139;
        vec4 temp156 = color_14_0;
        temp156.zw = vec2(temp196283, temp199287);
        vec4 select684 = temp198286 ? temp154 : temp156;
        int temp202297 = int(temp198286);
        int temp203298 = temp202297 ^ const90i_1;
        int select335299 = temp203298 + temp35_0;
        temp35_0 = select335299;
        color_14_0 = select684;
    }
    
    temp37_0 = const86i_0;
    color_15_0 = color_14_0;
    while (true) {
        bool temp205309 = temp37_0 > const151i_41;
        if (temp205309) {
            color_16_0 = color_15_0;
            break;
        }
        
        float temp206314 = color_15_0.z + d3;
        temp163 = color_15_0;
        temp163.z = temp206314;
        bool temp208316 = color_15_0.x < d4;
        if (temp208316) {
            color_16_0 = temp163;
            break;
        }
        
        float temp209321 = color_15_0.w + const139;
        vec4 temp166 = temp163;
        temp166.w = temp209321;
        int temp211324 = temp37_0 + const90i_1;
        temp37_0 = temp211324;
        color_15_0 = temp166;
    }
    
    color_17_0 = color_16_0;
    while (true) {
        vec4 color135334 = color_17_0 + bigColor4;
        bool temp213335 = color135334.x < d4;
        if (temp213335) {
            color_17_be_0 = color135334;
        }
        else {
            bool temp214339 = color135334.y < d4;
            float temp215340 = d4 + color135334.y;
            vec4 temp172 = color135334;
            temp172.y = temp215340;
            float temp217343 = d4 + color135334.x;
            vec4 temp174 = color135334;
            temp174.x = temp217343;
            select681 = temp214339 ? temp172 : temp174;
            bool temp220352 = select681.z < d4;
            if (! temp220352) {
                break;
            }
            
            color_17_be_0 = select681;
        }
        
        color_17_0 = color_17_be_0;
    }
    
    color_19_0 = select681;
    while (true) {
        vec4 color150366 = color_19_0 + bigColor5;
        bool temp222367 = color150366.y < d5;
        float temp223368 = d5 + color150366.y;
        vec4 temp180 = color150366;
        temp180.y = temp223368;
        select680 = temp222367 ? temp180 : color150366;
        bool temp227377 = select680.x < d5;
        if (! temp227377) {
            break;
        }
        
        color_19_0 = select680;
    }
    
    bool temp228384 = select680.x < d6;
    if (temp228384) {
        color_21_0 = select680;
        while (color_21_0.y < d6){
            vec4 color164391 = color_21_0 + bigColor6;
            color_21_0 = color164391;
        }
        
        color_23_0 = color_21_0;
    }
    else {
        color_22_0 = select680;
        while (color_22_0.z < d6){
            float temp230402 = color_22_0.z + bigColor6.z;
            vec4 temp187 = color_22_0;
            temp187.z = temp230402;
            color_22_0 = temp187;
        }
        
        color_23_0 = color_22_0;
    }
    
    bool temp232410 = color_23_0.x < d6;
    if (temp232410) {
        bool temp233412 = d7 < const139;
        color_24_0 = color_23_0;
        while (color_24_0.y < d6){
            if (temp233412) {
                break;
            }
            
            vec4 color181 = color_24_0 + bigColor6;
            color_24_0 = color181;
        }
        
        color_27_0 = color_24_0;
    }
    else {
        color_26_0 = color_23_0;
        while (color_26_0.z < d6){
            float temp235433 = color_26_0.z + bigColor6.z;
            vec4 temp192 = color_26_0;
            temp192.z = temp235433;
            color_26_0 = temp192;
        }
        
        color_27_0 = color_26_0;
    }
    
    bool temp237441 = d7 < const194;
    bool temp239442 = d7 < const139;
    color_28_0 = color_27_0;
    while (true) {
        if (temp237441) {
            color_29_0 = color_28_0;
            break;
        }
        
        color200 = color_28_0 + bigColor7;
        if (temp239442) {
            float temp241453 = color200.z + const139;
            vec4 temp198 = color200;
            temp198.z = temp241453;
            color_29_0 = temp198;
            break;
        }
        
        vec4 color206460 = BaseColor + color200;
        color_28_0 = color206460;
    }
    
    bool temp244464 = d8 < const194;
    bool temp245465 = d8 < const139;
    color_30_0 = color_29_0;
    while (true) {
        if (temp244464) {
            color_32_0 = color_30_0;
            break;
        }
        
        color216 = color_30_0 + bigColor7;
        if (temp245465) {
            float temp247476 = color216.z + const139;
            bool temp248477 = d8 < const205;
            float temp250478 = color216.y + const139;
            vec4 temp207 = color216;
            temp207.yz = vec2(temp250478, temp247476);
            float temp252482 = color216.x + const139;
            vec4 temp209 = color216;
            temp209.xz = vec2(temp252482, temp247476);
            vec4 select679 = temp248477 ? temp207 : temp209;
            color_32_0 = select679;
            break;
        }
        
        color227 = BaseColor + color216;
        bool temp256497 = color227.z < d8;
        if (! temp256497) {
            color_32_0 = color227;
            break;
        }
        
        color_30_0 = color227;
    }
    
    bool temp257505 = d9 > d8;
    color_33_0 = color_32_0;
    while (color_33_0.w < d9){
        color_35_0 = color_33_0;
        if (temp257505) {
            bool temp214 = color_33_0.x <= d7;
            color_34_0 = color_33_0;
            if (temp214) {
                bool temp215 = color_33_0.z != const216;
                if (temp215) {
                    break;
                }
                
                float temp261520 = color_33_0.w + const139;
                vec4 temp218 = color_33_0;
                temp218.w = temp261520;
                color_34_0 = temp218;
            }
            
            color_35_0 = color_34_0;
        }
        
        color_33_0 = color_35_0;
    }
    
    color_36_0 = color_33_0;
    while (color_36_0.z < d10){
        float temp263535 = color_36_0.y + const139;
        vec4 temp220 = color_36_0;
        temp220.y = temp263535;
        bool temp221 = temp263535 >= d11;
        if (temp221) {
            break;
        }
        
        float temp267543 = color_36_0.z + const139;
        bool temp268544 = color_36_0.w < d12;
        float temp269545 = color_36_0.w + const139;
        vec4 temp225 = temp220;
        temp225.zw = vec2(temp267543, temp269545);
        float temp271549 = color_36_0.x + const139;
        vec4 temp227 = temp220;
        temp227.xz = vec2(temp271549, temp267543);
        vec4 select682 = temp268544 ? temp225 : temp227;
        color_36_0 = select682;
    }
    
    color_39_0 = color_36_0;
    while (color_39_0.x < const229){
        vec4 color270569 = color_39_0 + bigColor8;
        bool temp276570 = color270569.z < d8;
        bool temp277571 = color270569.w < d6;
        float temp278572 = bigColor8.x + color270569.y;
        vec4 temp234 = color270569;
        temp234.y = temp278572;
        vec4 color270569_temp279574 = temp277571 ? color270569 : temp234;
        vec4 ternary582_0 = temp276570 ? color270569_temp279574 : temp234;
        color_39_0 = ternary582_0;
    }
    
    vec4 color279592 = color_39_0 + const78;
    color_40_0 = color279592;
    while (color_40_0.x < d14){
        bool temp283598 = color_40_0.y < d15;
        if (temp283598) {
            FragColor_shadow677_0 = color279592;
            gl_FragColor = FragColor_shadow677_0;
            return;
        }
        
        vec4 color286602 = color_40_0 + const78;
        color_40_0 = color286602;
    }
    
    vec4 color290606 = color_40_0 + const78;
    color_41_0 = color290606;
    while (color_41_0.w < d16){
        float temp286612 = color_41_0.w + const139;
        vec4 temp242 = color_41_0;
        temp242.w = temp286612;
        color_41_0 = temp242;
    }
    
    color_42_0 = color_41_0;
    while (true) {
        bool notlhs331623 = color_42_0.w >= d2;
        bool notrhs332624 = color_42_0.y >= d3;
        bool temp290625 = notrhs332624 || notlhs331623;
        vec4 color302658 = color_42_0 + bigColor1_2;
        color_42_0 = color302658;
    }
    
    color_43_0 = color_42_0;
    while (! (color_43_0.y < d18)){
        color312 = color_43_0 + const78;
        bool temp292632 = color312.x < d17;
        if (! temp292632) {
            color_44_0 = color312;
            while (color_44_0.y < d16){
                bool temp293639 = color_44_0.w < d16;
                if (temp293639) {
                    discard;
                }
                
                vec4 color324642 = color_44_0 + const78;
                color_44_0 = color324642;
            }
            
            vec4 color328646 = color_44_0 + const78;
            FragColor_shadow677_0 = color328646;
            gl_FragColor = FragColor_shadow677_0;
            return;
        }
        
        color_43_0 = color312;
    }
    
    FragColor_shadow677_0 = color279592;
    gl_FragColor = FragColor_shadow677_0;
    
}


