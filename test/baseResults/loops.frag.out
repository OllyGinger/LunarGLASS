
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float
@d13 = external addrspace(2) constant float
@d19 = external addrspace(2) constant float
@d20 = external addrspace(2) constant float
@d21 = external addrspace(2) constant float
@d22 = external addrspace(2) constant float
@d23 = external addrspace(2) constant float
@d24 = external addrspace(2) constant float
@d25 = external addrspace(2) constant float
@d26 = external addrspace(2) constant float
@d27 = external addrspace(2) constant float
@d28 = external addrspace(2) constant float
@d29 = external addrspace(2) constant float
@d30 = external addrspace(2) constant float
@d31 = external addrspace(2) constant float
@d32 = external addrspace(2) constant float
@d33 = external addrspace(2) constant float
@d34 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %i122 = alloca i32
  %i108 = alloca i32
  %i95 = alloca i32
  %i79 = alloca i32
  %i70 = alloca i32
  %i = alloca i32
  %color = alloca <4 x float>
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %post-loop-break11, %entry
  br i1 false, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fcmp olt float %1, 0x3FD51EB860000000
  br i1 %2, label %then2, label %ifmerge5

then2:                                            ; preds = %ifmerge
  %3 = load <4 x float>* %color
  %color3 = fadd <4 x float> %3, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color3, <4 x float>* %color
  br label %loop-merge

post-loop-break4:                                 ; No predecessors!
  br label %ifmerge5

ifmerge5:                                         ; preds = %ifmerge, %post-loop-break4
  %4 = load <4 x float>* %color
  %5 = extractelement <4 x float> %4, i32 0
  %6 = fcmp olt float %5, 0x3FE51EB860000000
  br i1 %6, label %then6, label %ifmerge9

then6:                                            ; preds = %ifmerge5
  %7 = load <4 x float>* %color
  %color7 = fadd <4 x float> %7, <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>
  store <4 x float> %color7, <4 x float>* %color
  br label %loop-merge

post-loop-break8:                                 ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge5, %post-loop-break8
  %8 = load <4 x float>* %color
  %color10 = fadd <4 x float> %8, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color10, <4 x float>* %color
  br label %loop-merge

post-loop-break11:                                ; No predecessors!
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %ifmerge9, %then6, %then2, %then
  br label %loop-header12

loop-header12:                                    ; preds = %post-loop-continue17, %ifmerge15, %loop-merge
  %9 = load <4 x float>* %color
  %10 = extractelement <4 x float> %9, i32 0
  %11 = load float addrspace(2)* @d, !gla.uniform !3
  %12 = fcmp olt float %10, %11
  %13 = xor i1 %12, true
  br i1 %13, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  br label %loop-merge18

post-loop-break14:                                ; No predecessors!
  br label %ifmerge15

ifmerge15:                                        ; preds = %loop-header12, %post-loop-break14
  %14 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %15 = load <4 x float>* %color
  %color16 = fadd <4 x float> %15, %14
  store <4 x float> %color16, <4 x float>* %color
  br label %loop-header12

post-loop-continue17:                             ; No predecessors!
  br label %loop-header12

loop-merge18:                                     ; preds = %then13
  br label %loop-header19

loop-header19:                                    ; preds = %post-loop-continue28, %ifmerge26, %then24, %loop-merge18
  %16 = load <4 x float>* %color
  %17 = extractelement <4 x float> %16, i32 2
  %18 = load float addrspace(2)* @d, !gla.uniform !3
  %19 = fcmp olt float %17, %18
  %20 = xor i1 %19, true
  br i1 %20, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header19
  br label %loop-merge29

post-loop-break21:                                ; No predecessors!
  br label %ifmerge22

ifmerge22:                                        ; preds = %loop-header19, %post-loop-break21
  %21 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %22 = load <4 x float>* %color
  %color23 = fadd <4 x float> %22, %21
  store <4 x float> %color23, <4 x float>* %color
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(2)* @d, !gla.uniform !3
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then24, label %ifmerge26

then24:                                           ; preds = %ifmerge22
  br label %loop-header19

post-loop-continue25:                             ; No predecessors!
  br label %ifmerge26

ifmerge26:                                        ; preds = %ifmerge22, %post-loop-continue25
  %27 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %28 = load <4 x float>* %color
  %color27 = fadd <4 x float> %28, %27
  store <4 x float> %color27, <4 x float>* %color
  br label %loop-header19

post-loop-continue28:                             ; No predecessors!
  br label %loop-header19

loop-merge29:                                     ; preds = %then20
  br label %loop-header30

loop-header30:                                    ; preds = %post-loop-continue35, %ifmerge33, %loop-merge29
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 0
  %31 = fcmp olt float %30, 4.200000e+01
  %32 = xor i1 %31, true
  br i1 %32, label %then31, label %ifmerge33

then31:                                           ; preds = %loop-header30
  br label %loop-merge36

post-loop-break32:                                ; No predecessors!
  br label %ifmerge33

ifmerge33:                                        ; preds = %loop-header30, %post-loop-break32
  %33 = load <4 x float>* %color
  %color34 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color34, <4 x float>* %color
  br label %loop-header30

post-loop-continue35:                             ; No predecessors!
  br label %loop-header30

loop-merge36:                                     ; preds = %then31
  br label %loop-header37

loop-header37:                                    ; preds = %post-loop-continue42, %ifmerge40, %loop-merge36
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 3
  %36 = load float addrspace(2)* @d2, !gla.uniform !7
  %37 = fcmp olt float %35, %36
  %38 = load <4 x float>* %color
  %39 = extractelement <4 x float> %38, i32 1
  %40 = load float addrspace(2)* @d3, !gla.uniform !8
  %41 = fcmp olt float %39, %40
  %42 = and i1 %37, %41
  %43 = xor i1 %42, true
  br i1 %43, label %then38, label %ifmerge40

then38:                                           ; preds = %loop-header37
  br label %loop-merge43

post-loop-break39:                                ; No predecessors!
  br label %ifmerge40

ifmerge40:                                        ; preds = %loop-header37, %post-loop-break39
  %44 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %45 = load <4 x float>* %color
  %color41 = fadd <4 x float> %45, %44
  store <4 x float> %color41, <4 x float>* %color
  br label %loop-header37

post-loop-continue42:                             ; No predecessors!
  br label %loop-header37

loop-merge43:                                     ; preds = %then38
  br label %loop-header44

loop-header44:                                    ; preds = %post-loop-continue53, %ifmerge51, %loop-merge43
  %46 = load <4 x float>* %color
  %47 = extractelement <4 x float> %46, i32 2
  %48 = load float addrspace(2)* @d3, !gla.uniform !8
  %49 = fcmp olt float %47, %48
  %50 = xor i1 %49, true
  br i1 %50, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge54

post-loop-break46:                                ; No predecessors!
  br label %ifmerge47

ifmerge47:                                        ; preds = %loop-header44, %post-loop-break46
  %51 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %52 = load <4 x float>* %color
  %color48 = fadd <4 x float> %52, %51
  store <4 x float> %color48, <4 x float>* %color
  %53 = load <4 x float>* %color
  %54 = extractelement <4 x float> %53, i32 1
  %55 = load float addrspace(2)* @d4, !gla.uniform !11
  %56 = fcmp olt float %54, %55
  br i1 %56, label %then49, label %ifmerge51

then49:                                           ; preds = %ifmerge47
  br label %loop-merge54

post-loop-break50:                                ; No predecessors!
  br label %ifmerge51

ifmerge51:                                        ; preds = %ifmerge47, %post-loop-break50
  %57 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %58 = load <4 x float>* %color
  %color52 = fadd <4 x float> %58, %57
  store <4 x float> %color52, <4 x float>* %color
  br label %loop-header44

post-loop-continue53:                             ; No predecessors!
  br label %loop-header44

loop-merge54:                                     ; preds = %then49, %then45
  store i32 0, i32* %i
  br label %loop-header55

loop-header55:                                    ; preds = %post-loop-continue61, %ifmerge58, %loop-merge54
  %59 = load i32* %i
  %60 = load i32 addrspace(2)* @Count, !gla.uniform !12
  %61 = icmp slt i32 %59, %60
  %62 = xor i1 %61, true
  br i1 %62, label %then56, label %ifmerge58

then56:                                           ; preds = %loop-header55
  br label %loop-merge62

post-loop-break57:                                ; No predecessors!
  br label %ifmerge58

ifmerge58:                                        ; preds = %loop-header55, %post-loop-break57
  %63 = load <4 x float> addrspace(2)* @bigColor2, !gla.uniform !13
  %64 = load <4 x float>* %color
  %color59 = fadd <4 x float> %64, %63
  store <4 x float> %color59, <4 x float>* %color
  %65 = load i32* %i
  %i60 = add i32 %65, 1
  store i32 %i60, i32* %i
  br label %loop-header55

post-loop-continue61:                             ; No predecessors!
  br label %loop-header55

loop-merge62:                                     ; preds = %then56
  br label %loop-header63

loop-header63:                                    ; preds = %post-loop-continue68, %ifmerge67, %loop-merge62
  %66 = load <4 x float> addrspace(2)* @bigColor3, !gla.uniform !14
  %67 = load <4 x float>* %color
  %color64 = fadd <4 x float> %67, %66
  store <4 x float> %color64, <4 x float>* %color
  %68 = load <4 x float>* %color
  %69 = extractelement <4 x float> %68, i32 0
  %70 = load float addrspace(2)* @d2, !gla.uniform !7
  %71 = fcmp olt float %69, %70
  %72 = xor i1 %71, true
  br i1 %72, label %then65, label %ifmerge67

then65:                                           ; preds = %loop-header63
  br label %loop-merge69

post-loop-break66:                                ; No predecessors!
  br label %ifmerge67

ifmerge67:                                        ; preds = %loop-header63, %post-loop-break66
  br label %loop-header63

post-loop-continue68:                             ; No predecessors!
  br label %loop-header63

loop-merge69:                                     ; preds = %then65
  store i32 0, i32* %i70
  br label %loop-header71

loop-header71:                                    ; preds = %post-loop-continue77, %ifmerge74, %loop-merge69
  %73 = load i32* %i70
  %74 = icmp slt i32 %73, 42
  %75 = xor i1 %74, true
  br i1 %75, label %then72, label %ifmerge74

then72:                                           ; preds = %loop-header71
  br label %loop-merge78

post-loop-break73:                                ; No predecessors!
  br label %ifmerge74

ifmerge74:                                        ; preds = %loop-header71, %post-loop-break73
  %76 = load float addrspace(2)* @d3, !gla.uniform !8
  %77 = load <4 x float>* %color
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %76
  %80 = load <4 x float>* %color
  %color75 = insertelement <4 x float> %80, float %79, i32 2
  store <4 x float> %color75, <4 x float>* %color
  %81 = load i32* %i70
  %i7076 = add i32 %81, 1
  store i32 %i7076, i32* %i70
  br label %loop-header71

post-loop-continue77:                             ; No predecessors!
  br label %loop-header71

loop-merge78:                                     ; preds = %then72
  store i32 0, i32* %i79
  br label %loop-header80

loop-header80:                                    ; preds = %post-loop-continue93, %ifmerge91, %loop-merge78
  %82 = load i32* %i79
  %83 = icmp slt i32 %82, 100
  %84 = xor i1 %83, true
  br i1 %84, label %then81, label %ifmerge83

then81:                                           ; preds = %loop-header80
  br label %loop-merge94

post-loop-break82:                                ; No predecessors!
  br label %ifmerge83

ifmerge83:                                        ; preds = %loop-header80, %post-loop-break82
  %85 = load <4 x float>* %color
  %86 = extractelement <4 x float> %85, i32 2
  %87 = fcmp olt float %86, 2.000000e+01
  br i1 %87, label %then84, label %else

then84:                                           ; preds = %ifmerge83
  %88 = load <4 x float>* %color
  %89 = extractelement <4 x float> %88, i32 0
  %90 = fadd float %89, 1.000000e+00
  %91 = load <4 x float>* %color
  %color85 = insertelement <4 x float> %91, float %90, i32 0
  store <4 x float> %color85, <4 x float>* %color
  br label %ifmerge87

else:                                             ; preds = %ifmerge83
  %92 = load <4 x float>* %color
  %93 = extractelement <4 x float> %92, i32 1
  %94 = fadd float %93, 1.000000e+00
  %95 = load <4 x float>* %color
  %color86 = insertelement <4 x float> %95, float %94, i32 1
  store <4 x float> %color86, <4 x float>* %color
  br label %ifmerge87

ifmerge87:                                        ; preds = %else, %then84
  %96 = load <4 x float>* %color
  %97 = extractelement <4 x float> %96, i32 3
  %98 = fcmp olt float %97, 2.000000e+01
  br i1 %98, label %then88, label %ifmerge91

then88:                                           ; preds = %ifmerge87
  %99 = load <4 x float>* %color
  %100 = extractelement <4 x float> %99, i32 2
  %101 = load <4 x float>* %color
  %102 = extractelement <4 x float> %101, i32 1
  %103 = fcmp ogt float %100, %102
  br i1 %103, label %then89, label %ifmerge90

then89:                                           ; preds = %then88
  br label %ifmerge90

ifmerge90:                                        ; preds = %then88, %then89
  br label %ifmerge91

ifmerge91:                                        ; preds = %ifmerge87, %ifmerge90
  %104 = load i32* %i79
  %i7992 = add i32 %104, 1
  store i32 %i7992, i32* %i79
  br label %loop-header80

post-loop-continue93:                             ; No predecessors!
  br label %loop-header80

loop-merge94:                                     ; preds = %then81
  store i32 0, i32* %i95
  br label %loop-header96

loop-header96:                                    ; preds = %post-loop-continue106, %ifmerge104, %loop-merge94
  %105 = load i32* %i95
  %106 = icmp slt i32 %105, 120
  %107 = xor i1 %106, true
  br i1 %107, label %then97, label %ifmerge99

then97:                                           ; preds = %loop-header96
  br label %loop-merge107

post-loop-break98:                                ; No predecessors!
  br label %ifmerge99

ifmerge99:                                        ; preds = %loop-header96, %post-loop-break98
  %108 = load <4 x float>* %color
  %109 = extractelement <4 x float> %108, i32 2
  %110 = fcmp olt float %109, 2.000000e+01
  br i1 %110, label %then100, label %else102

then100:                                          ; preds = %ifmerge99
  %111 = load <4 x float>* %color
  %112 = extractelement <4 x float> %111, i32 0
  %113 = fadd float %112, 1.000000e+00
  %114 = load <4 x float>* %color
  %color101 = insertelement <4 x float> %114, float %113, i32 0
  store <4 x float> %color101, <4 x float>* %color
  br label %ifmerge104

else102:                                          ; preds = %ifmerge99
  %115 = load <4 x float>* %color
  %116 = extractelement <4 x float> %115, i32 1
  %117 = fadd float %116, 1.000000e+00
  %118 = load <4 x float>* %color
  %color103 = insertelement <4 x float> %118, float %117, i32 1
  store <4 x float> %color103, <4 x float>* %color
  br label %ifmerge104

ifmerge104:                                       ; preds = %else102, %then100
  %119 = load i32* %i95
  %i95105 = add i32 %119, 1
  store i32 %i95105, i32* %i95
  br label %loop-header96

post-loop-continue106:                            ; No predecessors!
  br label %loop-header96

loop-merge107:                                    ; preds = %then97
  store i32 0, i32* %i108
  br label %loop-header109

loop-header109:                                   ; preds = %post-loop-continue120, %ifmerge117, %then114, %loop-merge107
  %120 = load i32* %i108
  %121 = icmp slt i32 %120, 42
  %122 = xor i1 %121, true
  br i1 %122, label %then110, label %ifmerge112

then110:                                          ; preds = %loop-header109
  br label %loop-merge121

post-loop-break111:                               ; No predecessors!
  br label %ifmerge112

ifmerge112:                                       ; preds = %loop-header109, %post-loop-break111
  %123 = load float addrspace(2)* @d3, !gla.uniform !8
  %124 = load <4 x float>* %color
  %125 = extractelement <4 x float> %124, i32 2
  %126 = fadd float %125, %123
  %127 = load <4 x float>* %color
  %color113 = insertelement <4 x float> %127, float %126, i32 2
  store <4 x float> %color113, <4 x float>* %color
  %128 = load <4 x float>* %color
  %129 = extractelement <4 x float> %128, i32 0
  %130 = load float addrspace(2)* @d4, !gla.uniform !11
  %131 = fcmp olt float %129, %130
  br i1 %131, label %then114, label %ifmerge117

then114:                                          ; preds = %ifmerge112
  %132 = load i32* %i108
  %i108115 = add i32 %132, 1
  store i32 %i108115, i32* %i108
  br label %loop-header109

post-loop-continue116:                            ; No predecessors!
  br label %ifmerge117

ifmerge117:                                       ; preds = %ifmerge112, %post-loop-continue116
  %133 = load <4 x float>* %color
  %134 = extractelement <4 x float> %133, i32 3
  %135 = fadd float %134, 1.000000e+00
  %136 = load <4 x float>* %color
  %color118 = insertelement <4 x float> %136, float %135, i32 3
  store <4 x float> %color118, <4 x float>* %color
  %137 = load i32* %i108
  %i108119 = add i32 %137, 1
  store i32 %i108119, i32* %i108
  br label %loop-header109

post-loop-continue120:                            ; No predecessors!
  br label %loop-header109

loop-merge121:                                    ; preds = %then110
  store i32 0, i32* %i122
  br label %loop-header123

loop-header123:                                   ; preds = %post-loop-continue133, %ifmerge130, %loop-merge121
  %138 = load i32* %i122
  %139 = icmp slt i32 %138, 42
  %140 = xor i1 %139, true
  br i1 %140, label %then124, label %ifmerge126

then124:                                          ; preds = %loop-header123
  br label %loop-merge134

post-loop-break125:                               ; No predecessors!
  br label %ifmerge126

ifmerge126:                                       ; preds = %loop-header123, %post-loop-break125
  %141 = load float addrspace(2)* @d3, !gla.uniform !8
  %142 = load <4 x float>* %color
  %143 = extractelement <4 x float> %142, i32 2
  %144 = fadd float %143, %141
  %145 = load <4 x float>* %color
  %color127 = insertelement <4 x float> %145, float %144, i32 2
  store <4 x float> %color127, <4 x float>* %color
  %146 = load <4 x float>* %color
  %147 = extractelement <4 x float> %146, i32 0
  %148 = load float addrspace(2)* @d4, !gla.uniform !11
  %149 = fcmp olt float %147, %148
  br i1 %149, label %then128, label %ifmerge130

then128:                                          ; preds = %ifmerge126
  br label %loop-merge134

post-loop-break129:                               ; No predecessors!
  br label %ifmerge130

ifmerge130:                                       ; preds = %ifmerge126, %post-loop-break129
  %150 = load <4 x float>* %color
  %151 = extractelement <4 x float> %150, i32 3
  %152 = fadd float %151, 1.000000e+00
  %153 = load <4 x float>* %color
  %color131 = insertelement <4 x float> %153, float %152, i32 3
  store <4 x float> %color131, <4 x float>* %color
  %154 = load i32* %i122
  %i122132 = add i32 %154, 1
  store i32 %i122132, i32* %i122
  br label %loop-header123

post-loop-continue133:                            ; No predecessors!
  br label %loop-header123

loop-merge134:                                    ; preds = %then128, %then124
  br label %loop-header135

loop-header135:                                   ; preds = %post-loop-continue148, %ifmerge147, %then137, %loop-merge134
  %155 = load <4 x float> addrspace(2)* @bigColor4, !gla.uniform !15
  %156 = load <4 x float>* %color
  %color136 = fadd <4 x float> %156, %155
  store <4 x float> %color136, <4 x float>* %color
  %157 = load <4 x float>* %color
  %158 = extractelement <4 x float> %157, i32 0
  %159 = load float addrspace(2)* @d4, !gla.uniform !11
  %160 = fcmp olt float %158, %159
  br i1 %160, label %then137, label %ifmerge139

then137:                                          ; preds = %loop-header135
  br label %loop-header135

post-loop-continue138:                            ; No predecessors!
  br label %ifmerge139

ifmerge139:                                       ; preds = %loop-header135, %post-loop-continue138
  %161 = load <4 x float>* %color
  %162 = extractelement <4 x float> %161, i32 1
  %163 = load float addrspace(2)* @d4, !gla.uniform !11
  %164 = fcmp olt float %162, %163
  br i1 %164, label %then140, label %else142

then140:                                          ; preds = %ifmerge139
  %165 = load float addrspace(2)* @d4, !gla.uniform !11
  %166 = load <4 x float>* %color
  %167 = extractelement <4 x float> %166, i32 1
  %168 = fadd float %167, %165
  %169 = load <4 x float>* %color
  %color141 = insertelement <4 x float> %169, float %168, i32 1
  store <4 x float> %color141, <4 x float>* %color
  br label %ifmerge144

else142:                                          ; preds = %ifmerge139
  %170 = load float addrspace(2)* @d4, !gla.uniform !11
  %171 = load <4 x float>* %color
  %172 = extractelement <4 x float> %171, i32 0
  %173 = fadd float %172, %170
  %174 = load <4 x float>* %color
  %color143 = insertelement <4 x float> %174, float %173, i32 0
  store <4 x float> %color143, <4 x float>* %color
  br label %ifmerge144

ifmerge144:                                       ; preds = %else142, %then140
  %175 = load <4 x float>* %color
  %176 = extractelement <4 x float> %175, i32 2
  %177 = load float addrspace(2)* @d4, !gla.uniform !11
  %178 = fcmp olt float %176, %177
  %179 = xor i1 %178, true
  br i1 %179, label %then145, label %ifmerge147

then145:                                          ; preds = %ifmerge144
  br label %loop-merge149

post-loop-break146:                               ; No predecessors!
  br label %ifmerge147

ifmerge147:                                       ; preds = %ifmerge144, %post-loop-break146
  br label %loop-header135

post-loop-continue148:                            ; No predecessors!
  br label %loop-header135

loop-merge149:                                    ; preds = %then145
  br label %loop-header150

loop-header150:                                   ; preds = %post-loop-continue158, %ifmerge157, %loop-merge149
  %180 = load <4 x float> addrspace(2)* @bigColor5, !gla.uniform !16
  %181 = load <4 x float>* %color
  %color151 = fadd <4 x float> %181, %180
  store <4 x float> %color151, <4 x float>* %color
  %182 = load <4 x float>* %color
  %183 = extractelement <4 x float> %182, i32 1
  %184 = load float addrspace(2)* @d5, !gla.uniform !17
  %185 = fcmp olt float %183, %184
  br i1 %185, label %then152, label %ifmerge154

then152:                                          ; preds = %loop-header150
  %186 = load float addrspace(2)* @d5, !gla.uniform !17
  %187 = load <4 x float>* %color
  %188 = extractelement <4 x float> %187, i32 1
  %189 = fadd float %188, %186
  %190 = load <4 x float>* %color
  %color153 = insertelement <4 x float> %190, float %189, i32 1
  store <4 x float> %color153, <4 x float>* %color
  br label %ifmerge154

ifmerge154:                                       ; preds = %loop-header150, %then152
  %191 = load <4 x float>* %color
  %192 = extractelement <4 x float> %191, i32 0
  %193 = load float addrspace(2)* @d5, !gla.uniform !17
  %194 = fcmp olt float %192, %193
  %195 = xor i1 %194, true
  br i1 %195, label %then155, label %ifmerge157

then155:                                          ; preds = %ifmerge154
  br label %loop-merge159

post-loop-break156:                               ; No predecessors!
  br label %ifmerge157

ifmerge157:                                       ; preds = %ifmerge154, %post-loop-break156
  br label %loop-header150

post-loop-continue158:                            ; No predecessors!
  br label %loop-header150

loop-merge159:                                    ; preds = %then155
  %196 = load <4 x float>* %color
  %197 = extractelement <4 x float> %196, i32 0
  %198 = load float addrspace(2)* @d6, !gla.uniform !18
  %199 = fcmp olt float %197, %198
  br i1 %199, label %then160, label %else168

then160:                                          ; preds = %loop-merge159
  br label %loop-header161

loop-header161:                                   ; preds = %post-loop-continue166, %ifmerge164, %then160
  %200 = load <4 x float>* %color
  %201 = extractelement <4 x float> %200, i32 1
  %202 = load float addrspace(2)* @d6, !gla.uniform !18
  %203 = fcmp olt float %201, %202
  %204 = xor i1 %203, true
  br i1 %204, label %then162, label %ifmerge164

then162:                                          ; preds = %loop-header161
  br label %loop-merge167

post-loop-break163:                               ; No predecessors!
  br label %ifmerge164

ifmerge164:                                       ; preds = %loop-header161, %post-loop-break163
  %205 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %206 = load <4 x float>* %color
  %color165 = fadd <4 x float> %206, %205
  store <4 x float> %color165, <4 x float>* %color
  br label %loop-header161

post-loop-continue166:                            ; No predecessors!
  br label %loop-header161

loop-merge167:                                    ; preds = %then162
  br label %ifmerge176

else168:                                          ; preds = %loop-merge159
  br label %loop-header169

loop-header169:                                   ; preds = %post-loop-continue174, %ifmerge172, %else168
  %207 = load <4 x float>* %color
  %208 = extractelement <4 x float> %207, i32 2
  %209 = load float addrspace(2)* @d6, !gla.uniform !18
  %210 = fcmp olt float %208, %209
  %211 = xor i1 %210, true
  br i1 %211, label %then170, label %ifmerge172

then170:                                          ; preds = %loop-header169
  br label %loop-merge175

post-loop-break171:                               ; No predecessors!
  br label %ifmerge172

ifmerge172:                                       ; preds = %loop-header169, %post-loop-break171
  %212 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %213 = extractelement <4 x float> %212, i32 2
  %214 = load <4 x float>* %color
  %215 = extractelement <4 x float> %214, i32 2
  %216 = fadd float %215, %213
  %217 = load <4 x float>* %color
  %color173 = insertelement <4 x float> %217, float %216, i32 2
  store <4 x float> %color173, <4 x float>* %color
  br label %loop-header169

post-loop-continue174:                            ; No predecessors!
  br label %loop-header169

loop-merge175:                                    ; preds = %then170
  br label %ifmerge176

ifmerge176:                                       ; preds = %loop-merge175, %loop-merge167
  %218 = load <4 x float>* %color
  %219 = extractelement <4 x float> %218, i32 0
  %220 = load float addrspace(2)* @d6, !gla.uniform !18
  %221 = fcmp olt float %219, %220
  br i1 %221, label %then177, label %else188

then177:                                          ; preds = %ifmerge176
  br label %loop-header178

loop-header178:                                   ; preds = %post-loop-continue186, %ifmerge185, %then177
  %222 = load <4 x float>* %color
  %223 = extractelement <4 x float> %222, i32 1
  %224 = load float addrspace(2)* @d6, !gla.uniform !18
  %225 = fcmp olt float %223, %224
  %226 = xor i1 %225, true
  br i1 %226, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge187

post-loop-break180:                               ; No predecessors!
  br label %ifmerge181

ifmerge181:                                       ; preds = %loop-header178, %post-loop-break180
  %227 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %228 = load <4 x float>* %color
  %color182 = fadd <4 x float> %228, %227
  store <4 x float> %color182, <4 x float>* %color
  %229 = load float addrspace(2)* @d7, !gla.uniform !20
  %230 = fcmp olt float %229, 1.000000e+00
  br i1 %230, label %then183, label %ifmerge185

then183:                                          ; preds = %ifmerge181
  br label %loop-merge187

post-loop-break184:                               ; No predecessors!
  br label %ifmerge185

ifmerge185:                                       ; preds = %ifmerge181, %post-loop-break184
  br label %loop-header178

post-loop-continue186:                            ; No predecessors!
  br label %loop-header178

loop-merge187:                                    ; preds = %then183, %then179
  br label %ifmerge196

else188:                                          ; preds = %ifmerge176
  br label %loop-header189

loop-header189:                                   ; preds = %post-loop-continue194, %ifmerge192, %else188
  %231 = load <4 x float>* %color
  %232 = extractelement <4 x float> %231, i32 2
  %233 = load float addrspace(2)* @d6, !gla.uniform !18
  %234 = fcmp olt float %232, %233
  %235 = xor i1 %234, true
  br i1 %235, label %then190, label %ifmerge192

then190:                                          ; preds = %loop-header189
  br label %loop-merge195

post-loop-break191:                               ; No predecessors!
  br label %ifmerge192

ifmerge192:                                       ; preds = %loop-header189, %post-loop-break191
  %236 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %237 = extractelement <4 x float> %236, i32 2
  %238 = load <4 x float>* %color
  %239 = extractelement <4 x float> %238, i32 2
  %240 = fadd float %239, %237
  %241 = load <4 x float>* %color
  %color193 = insertelement <4 x float> %241, float %240, i32 2
  store <4 x float> %color193, <4 x float>* %color
  br label %loop-header189

post-loop-continue194:                            ; No predecessors!
  br label %loop-header189

loop-merge195:                                    ; preds = %then190
  br label %ifmerge196

ifmerge196:                                       ; preds = %loop-merge195, %loop-merge187
  br label %loop-header197

loop-header197:                                   ; preds = %post-loop-continue210, %ifmerge209, %ifmerge196
  %242 = load float addrspace(2)* @d7, !gla.uniform !20
  %243 = fcmp olt float %242, 0.000000e+00
  br i1 %243, label %then198, label %ifmerge200

then198:                                          ; preds = %loop-header197
  br label %loop-merge211

post-loop-break199:                               ; No predecessors!
  br label %ifmerge200

ifmerge200:                                       ; preds = %loop-header197, %post-loop-break199
  %244 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %245 = load <4 x float>* %color
  %color201 = fadd <4 x float> %245, %244
  store <4 x float> %color201, <4 x float>* %color
  %246 = load float addrspace(2)* @d7, !gla.uniform !20
  %247 = fcmp olt float %246, 1.000000e+00
  br i1 %247, label %then202, label %ifmerge205

then202:                                          ; preds = %ifmerge200
  %248 = load <4 x float>* %color
  %249 = extractelement <4 x float> %248, i32 2
  %250 = fadd float %249, 1.000000e+00
  %251 = load <4 x float>* %color
  %color203 = insertelement <4 x float> %251, float %250, i32 2
  store <4 x float> %color203, <4 x float>* %color
  br label %loop-merge211

post-loop-break204:                               ; No predecessors!
  br label %ifmerge205

ifmerge205:                                       ; preds = %ifmerge200, %post-loop-break204
  %252 = load <4 x float>* @BaseColor
  %253 = load <4 x float>* %color
  %color206 = fadd <4 x float> %253, %252
  store <4 x float> %color206, <4 x float>* %color
  br i1 false, label %then207, label %ifmerge209

then207:                                          ; preds = %ifmerge205
  br label %loop-merge211

post-loop-break208:                               ; No predecessors!
  br label %ifmerge209

ifmerge209:                                       ; preds = %ifmerge205, %post-loop-break208
  br label %loop-header197

post-loop-continue210:                            ; No predecessors!
  br label %loop-header197

loop-merge211:                                    ; preds = %then207, %then202, %then198
  br label %loop-header212

loop-header212:                                   ; preds = %post-loop-continue230, %ifmerge229, %loop-merge211
  %254 = load float addrspace(2)* @d8, !gla.uniform !22
  %255 = fcmp olt float %254, 0.000000e+00
  br i1 %255, label %then213, label %ifmerge215

then213:                                          ; preds = %loop-header212
  br label %loop-merge231

post-loop-break214:                               ; No predecessors!
  br label %ifmerge215

ifmerge215:                                       ; preds = %loop-header212, %post-loop-break214
  %256 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %257 = load <4 x float>* %color
  %color216 = fadd <4 x float> %257, %256
  store <4 x float> %color216, <4 x float>* %color
  %258 = load float addrspace(2)* @d8, !gla.uniform !22
  %259 = fcmp olt float %258, 1.000000e+00
  br i1 %259, label %then217, label %ifmerge225

then217:                                          ; preds = %ifmerge215
  %260 = load <4 x float>* %color
  %261 = extractelement <4 x float> %260, i32 2
  %262 = fadd float %261, 1.000000e+00
  %263 = load <4 x float>* %color
  %color218 = insertelement <4 x float> %263, float %262, i32 2
  store <4 x float> %color218, <4 x float>* %color
  %264 = load float addrspace(2)* @d8, !gla.uniform !22
  %265 = fcmp olt float %264, 2.000000e+00
  br i1 %265, label %then219, label %else221

then219:                                          ; preds = %then217
  %266 = load <4 x float>* %color
  %267 = extractelement <4 x float> %266, i32 1
  %268 = fadd float %267, 1.000000e+00
  %269 = load <4 x float>* %color
  %color220 = insertelement <4 x float> %269, float %268, i32 1
  store <4 x float> %color220, <4 x float>* %color
  br label %ifmerge223

else221:                                          ; preds = %then217
  %270 = load <4 x float>* %color
  %271 = extractelement <4 x float> %270, i32 0
  %272 = fadd float %271, 1.000000e+00
  %273 = load <4 x float>* %color
  %color222 = insertelement <4 x float> %273, float %272, i32 0
  store <4 x float> %color222, <4 x float>* %color
  br label %ifmerge223

ifmerge223:                                       ; preds = %else221, %then219
  br label %loop-merge231

post-loop-break224:                               ; No predecessors!
  br label %ifmerge225

ifmerge225:                                       ; preds = %ifmerge215, %post-loop-break224
  %274 = load <4 x float>* @BaseColor
  %275 = load <4 x float>* %color
  %color226 = fadd <4 x float> %275, %274
  store <4 x float> %color226, <4 x float>* %color
  %276 = load <4 x float>* %color
  %277 = extractelement <4 x float> %276, i32 2
  %278 = load float addrspace(2)* @d8, !gla.uniform !22
  %279 = fcmp olt float %277, %278
  %280 = xor i1 %279, true
  br i1 %280, label %then227, label %ifmerge229

then227:                                          ; preds = %ifmerge225
  br label %loop-merge231

post-loop-break228:                               ; No predecessors!
  br label %ifmerge229

ifmerge229:                                       ; preds = %ifmerge225, %post-loop-break228
  br label %loop-header212

post-loop-continue230:                            ; No predecessors!
  br label %loop-header212

loop-merge231:                                    ; preds = %then227, %ifmerge223, %then213
  br label %loop-header232

loop-header232:                                   ; preds = %post-loop-continue245, %ifmerge244, %loop-merge231
  %281 = load <4 x float>* %color
  %282 = extractelement <4 x float> %281, i32 3
  %283 = load float addrspace(2)* @d9, !gla.uniform !23
  %284 = fcmp olt float %282, %283
  %285 = xor i1 %284, true
  br i1 %285, label %then233, label %ifmerge235

then233:                                          ; preds = %loop-header232
  br label %loop-merge246

post-loop-break234:                               ; No predecessors!
  br label %ifmerge235

ifmerge235:                                       ; preds = %loop-header232, %post-loop-break234
  %286 = load float addrspace(2)* @d9, !gla.uniform !23
  %287 = load float addrspace(2)* @d8, !gla.uniform !22
  %288 = fcmp ogt float %286, %287
  br i1 %288, label %then236, label %ifmerge244

then236:                                          ; preds = %ifmerge235
  %289 = load <4 x float>* %color
  %290 = extractelement <4 x float> %289, i32 0
  %291 = load float addrspace(2)* @d7, !gla.uniform !20
  %292 = fcmp ole float %290, %291
  br i1 %292, label %then237, label %ifmerge243

then237:                                          ; preds = %then236
  %293 = load <4 x float>* %color
  %294 = extractelement <4 x float> %293, i32 2
  %295 = fcmp oeq float %294, 5.000000e+00
  br i1 %295, label %then238, label %else240

then238:                                          ; preds = %then237
  %296 = load <4 x float>* %color
  %297 = extractelement <4 x float> %296, i32 3
  %298 = fadd float %297, 1.000000e+00
  %299 = load <4 x float>* %color
  %color239 = insertelement <4 x float> %299, float %298, i32 3
  store <4 x float> %color239, <4 x float>* %color
  br label %ifmerge242

else240:                                          ; preds = %then237
  br label %loop-merge246

post-loop-break241:                               ; No predecessors!
  br label %ifmerge242

ifmerge242:                                       ; preds = %post-loop-break241, %then238
  br label %ifmerge243

ifmerge243:                                       ; preds = %then236, %ifmerge242
  br label %ifmerge244

ifmerge244:                                       ; preds = %ifmerge235, %ifmerge243
  br label %loop-header232

post-loop-continue245:                            ; No predecessors!
  br label %loop-header232

loop-merge246:                                    ; preds = %else240, %then233
  br label %loop-header247

loop-header247:                                   ; preds = %post-loop-continue263, %post-loop-break262, %ifmerge258, %loop-merge246
  %300 = load <4 x float>* %color
  %301 = extractelement <4 x float> %300, i32 2
  %302 = load float addrspace(2)* @d10, !gla.uniform !24
  %303 = fcmp olt float %301, %302
  %304 = xor i1 %303, true
  br i1 %304, label %then248, label %ifmerge250

then248:                                          ; preds = %loop-header247
  br label %loop-merge264

post-loop-break249:                               ; No predecessors!
  br label %ifmerge250

ifmerge250:                                       ; preds = %loop-header247, %post-loop-break249
  %305 = load <4 x float>* %color
  %306 = extractelement <4 x float> %305, i32 1
  %307 = fadd float %306, 1.000000e+00
  %308 = load <4 x float>* %color
  %color251 = insertelement <4 x float> %308, float %307, i32 1
  store <4 x float> %color251, <4 x float>* %color
  %309 = load <4 x float>* %color
  %310 = extractelement <4 x float> %309, i32 1
  %311 = load float addrspace(2)* @d11, !gla.uniform !25
  %312 = fcmp olt float %310, %311
  br i1 %312, label %then252, label %ifmerge260

then252:                                          ; preds = %ifmerge250
  %313 = load <4 x float>* %color
  %314 = extractelement <4 x float> %313, i32 2
  %315 = fadd float %314, 1.000000e+00
  %316 = load <4 x float>* %color
  %color253 = insertelement <4 x float> %316, float %315, i32 2
  store <4 x float> %color253, <4 x float>* %color
  %317 = load <4 x float>* %color
  %318 = extractelement <4 x float> %317, i32 3
  %319 = load float addrspace(2)* @d12, !gla.uniform !26
  %320 = fcmp olt float %318, %319
  br i1 %320, label %then254, label %else256

then254:                                          ; preds = %then252
  %321 = load <4 x float>* %color
  %322 = extractelement <4 x float> %321, i32 3
  %323 = fadd float %322, 1.000000e+00
  %324 = load <4 x float>* %color
  %color255 = insertelement <4 x float> %324, float %323, i32 3
  store <4 x float> %color255, <4 x float>* %color
  br label %ifmerge258

else256:                                          ; preds = %then252
  %325 = load <4 x float>* %color
  %326 = extractelement <4 x float> %325, i32 0
  %327 = fadd float %326, 1.000000e+00
  %328 = load <4 x float>* %color
  %color257 = insertelement <4 x float> %328, float %327, i32 0
  store <4 x float> %color257, <4 x float>* %color
  br label %ifmerge258

ifmerge258:                                       ; preds = %else256, %then254
  br label %loop-header247

post-loop-continue259:                            ; No predecessors!
  br label %ifmerge260

ifmerge260:                                       ; preds = %ifmerge250, %post-loop-continue259
  %329 = load <4 x float>* %color
  %color261 = fadd <4 x float> %329, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color261, <4 x float>* %color
  br label %loop-merge264

post-loop-break262:                               ; No predecessors!
  br label %loop-header247

post-loop-continue263:                            ; No predecessors!
  br label %loop-header247

loop-merge264:                                    ; preds = %ifmerge260, %then248
  br label %loop-header265

loop-header265:                                   ; preds = %post-loop-continue276, %ifmerge274, %then271, %loop-merge264
  %330 = load <4 x float>* %color
  %331 = extractelement <4 x float> %330, i32 0
  %332 = fcmp olt float %331, 1.000000e+01
  %333 = xor i1 %332, true
  br i1 %333, label %then266, label %ifmerge268

then266:                                          ; preds = %loop-header265
  br label %loop-merge277

post-loop-break267:                               ; No predecessors!
  br label %ifmerge268

ifmerge268:                                       ; preds = %loop-header265, %post-loop-break267
  %334 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %335 = load <4 x float>* %color
  %color269 = fadd <4 x float> %335, %334
  store <4 x float> %color269, <4 x float>* %color
  %336 = load <4 x float>* %color
  %337 = extractelement <4 x float> %336, i32 2
  %338 = load float addrspace(2)* @d8, !gla.uniform !22
  %339 = fcmp olt float %337, %338
  br i1 %339, label %then270, label %ifmerge274

then270:                                          ; preds = %ifmerge268
  %340 = load <4 x float>* %color
  %341 = extractelement <4 x float> %340, i32 3
  %342 = load float addrspace(2)* @d6, !gla.uniform !18
  %343 = fcmp olt float %341, %342
  br i1 %343, label %then271, label %ifmerge273

then271:                                          ; preds = %then270
  br label %loop-header265

post-loop-continue272:                            ; No predecessors!
  br label %ifmerge273

ifmerge273:                                       ; preds = %then270, %post-loop-continue272
  br label %ifmerge274

ifmerge274:                                       ; preds = %ifmerge268, %ifmerge273
  %344 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %345 = extractelement <4 x float> %344, i32 0
  %346 = load <4 x float>* %color
  %347 = extractelement <4 x float> %346, i32 1
  %348 = fadd float %347, %345
  %349 = load <4 x float>* %color
  %color275 = insertelement <4 x float> %349, float %348, i32 1
  store <4 x float> %color275, <4 x float>* %color
  br label %loop-header265

post-loop-continue276:                            ; No predecessors!
  br label %loop-header265

loop-merge277:                                    ; preds = %then266
  %350 = load <4 x float>* %color
  %color278 = fadd <4 x float> %350, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color278, <4 x float>* %color
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %loop-header279

loop-header279:                                   ; preds = %post-loop-continue287, %ifmerge286, %loop-merge277
  %351 = load <4 x float>* %color
  %352 = extractelement <4 x float> %351, i32 0
  %353 = load float addrspace(2)* @d14, !gla.uniform !28
  %354 = fcmp olt float %352, %353
  %355 = xor i1 %354, true
  br i1 %355, label %then280, label %ifmerge282

then280:                                          ; preds = %loop-header279
  br label %loop-merge288

post-loop-break281:                               ; No predecessors!
  br label %ifmerge282

ifmerge282:                                       ; preds = %loop-header279, %post-loop-break281
  %356 = load <4 x float>* %color
  %357 = extractelement <4 x float> %356, i32 1
  %358 = load float addrspace(2)* @d15, !gla.uniform !29
  %359 = fcmp olt float %357, %358
  br i1 %359, label %then283, label %else284

then283:                                          ; preds = %ifmerge282
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge286

else284:                                          ; preds = %ifmerge282
  %360 = load <4 x float>* %color
  %color285 = fadd <4 x float> %360, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color285, <4 x float>* %color
  br label %ifmerge286

ifmerge286:                                       ; preds = %else284, %post-return
  br label %loop-header279

post-loop-continue287:                            ; No predecessors!
  br label %loop-header279

loop-merge288:                                    ; preds = %then280
  %361 = load <4 x float>* %color
  %color289 = fadd <4 x float> %361, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color289, <4 x float>* %color
  br label %loop-header290

loop-header290:                                   ; preds = %post-loop-continue295, %ifmerge293, %loop-merge288
  %362 = load <4 x float>* %color
  %363 = extractelement <4 x float> %362, i32 3
  %364 = load float addrspace(2)* @d16, !gla.uniform !30
  %365 = fcmp olt float %363, %364
  %366 = xor i1 %365, true
  br i1 %366, label %then291, label %ifmerge293

then291:                                          ; preds = %loop-header290
  br label %loop-merge296

post-loop-break292:                               ; No predecessors!
  br label %ifmerge293

ifmerge293:                                       ; preds = %loop-header290, %post-loop-break292
  %367 = load <4 x float>* %color
  %368 = extractelement <4 x float> %367, i32 3
  %369 = fadd float %368, 1.000000e+00
  %370 = load <4 x float>* %color
  %color294 = insertelement <4 x float> %370, float %369, i32 3
  store <4 x float> %color294, <4 x float>* %color
  br label %loop-header290

post-loop-continue295:                            ; No predecessors!
  br label %loop-header290

loop-merge296:                                    ; preds = %then291
  br label %loop-header297

loop-header297:                                   ; preds = %post-loop-continue305, %ifmerge304, %loop-merge296
  %371 = load <4 x float>* %color
  %372 = extractelement <4 x float> %371, i32 3
  %373 = load float addrspace(2)* @d2, !gla.uniform !7
  %374 = fcmp olt float %372, %373
  %375 = load <4 x float>* %color
  %376 = extractelement <4 x float> %375, i32 1
  %377 = load float addrspace(2)* @d3, !gla.uniform !8
  %378 = fcmp olt float %376, %377
  %379 = and i1 %374, %378
  %380 = xor i1 %379, true
  br i1 %380, label %then298, label %ifmerge300

then298:                                          ; preds = %loop-header297
  br label %loop-merge306

post-loop-break299:                               ; No predecessors!
  br label %ifmerge300

ifmerge300:                                       ; preds = %loop-header297, %post-loop-break299
  %381 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %382 = load <4 x float>* %color
  %color301 = fadd <4 x float> %382, %381
  store <4 x float> %color301, <4 x float>* %color
  %383 = load <4 x float>* %color
  %384 = extractelement <4 x float> %383, i32 2
  %385 = load float addrspace(2)* @d3, !gla.uniform !8
  %386 = fcmp olt float %384, %385
  br i1 %386, label %then302, label %ifmerge304

then302:                                          ; preds = %ifmerge300
  br label %stage-epilogue

post-return303:                                   ; No predecessors!
  br label %ifmerge304

ifmerge304:                                       ; preds = %ifmerge300, %post-return303
  br label %loop-header297

post-loop-continue305:                            ; No predecessors!
  br label %loop-header297

loop-merge306:                                    ; preds = %then298
  br label %loop-header307

loop-header307:                                   ; preds = %post-loop-continue315, %ifmerge314, %loop-merge306
  %387 = load <4 x float>* %color
  %388 = extractelement <4 x float> %387, i32 1
  %389 = load float addrspace(2)* @d18, !gla.uniform !31
  %390 = fcmp olt float %388, %389
  br i1 %390, label %then308, label %ifmerge310

then308:                                          ; preds = %loop-header307
  br label %stage-epilogue

post-return309:                                   ; No predecessors!
  br label %ifmerge310

ifmerge310:                                       ; preds = %loop-header307, %post-return309
  %391 = load <4 x float>* %color
  %color311 = fadd <4 x float> %391, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color311, <4 x float>* %color
  %392 = load <4 x float>* %color
  %393 = extractelement <4 x float> %392, i32 0
  %394 = load float addrspace(2)* @d17, !gla.uniform !32
  %395 = fcmp olt float %393, %394
  %396 = xor i1 %395, true
  br i1 %396, label %then312, label %ifmerge314

then312:                                          ; preds = %ifmerge310
  br label %loop-merge316

post-loop-break313:                               ; No predecessors!
  br label %ifmerge314

ifmerge314:                                       ; preds = %ifmerge310, %post-loop-break313
  br label %loop-header307

post-loop-continue315:                            ; No predecessors!
  br label %loop-header307

loop-merge316:                                    ; preds = %then312
  br label %loop-header317

loop-header317:                                   ; preds = %post-loop-continue325, %ifmerge324, %loop-merge316
  %397 = load <4 x float>* %color
  %398 = extractelement <4 x float> %397, i32 1
  %399 = load float addrspace(2)* @d16, !gla.uniform !30
  %400 = fcmp olt float %398, %399
  %401 = xor i1 %400, true
  br i1 %401, label %then318, label %ifmerge320

then318:                                          ; preds = %loop-header317
  br label %loop-merge326

post-loop-break319:                               ; No predecessors!
  br label %ifmerge320

ifmerge320:                                       ; preds = %loop-header317, %post-loop-break319
  %402 = load <4 x float>* %color
  %403 = extractelement <4 x float> %402, i32 3
  %404 = load float addrspace(2)* @d16, !gla.uniform !30
  %405 = fcmp olt float %403, %404
  br i1 %405, label %then321, label %else322

then321:                                          ; preds = %ifmerge320
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge324

else322:                                          ; preds = %ifmerge320
  %406 = load <4 x float>* %color
  %color323 = fadd <4 x float> %406, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color323, <4 x float>* %color
  br label %ifmerge324

ifmerge324:                                       ; preds = %else322, %post-discard
  br label %loop-header317

post-loop-continue325:                            ; No predecessors!
  br label %loop-header317

loop-merge326:                                    ; preds = %then318
  %407 = load <4 x float>* %color
  %color327 = fadd <4 x float> %407, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color327, <4 x float>* %color
  %gl_FragColor328 = load <4 x float>* %color
  store <4 x float> %gl_FragColor328, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge326, %then308, %then302, %then283
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then321
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

attributes #0 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %color1 = load <4 x float>* @BaseColor, align 16
  %0 = extractelement <4 x float> %color1, i32 0
  %1 = fcmp olt float %0, 0x3FD51EB860000000
  %2 = fcmp olt float %0, 0x3FE51EB860000000
  %select334.v = select i1 %2, <4 x float> <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  %select341.v = select i1 %1, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>, <4 x float> %select334.v
  %select341 = fadd <4 x float> %color1, %select341.v
  %.pre = load float addrspace(2)* @d, align 4, !gla.uniform !3
  %3 = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !5
  br label %loop-header12

loop-header12:                                    ; preds = %ifmerge15, %entry
  %color.1 = phi <4 x float> [ %select341, %entry ], [ %color16, %ifmerge15 ]
  %4 = extractelement <4 x float> %color.1, i32 0
  %5 = fcmp uge float %4, %.pre
  br i1 %5, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  %6 = load <4 x float> addrspace(2)* @bigColor1_1, align 16, !gla.uniform !6
  br label %loop-header19

ifmerge15:                                        ; preds = %loop-header12
  %color16 = fadd <4 x float> %color.1, %3
  br label %loop-header12

loop-header19:                                    ; preds = %ifmerge22, %then13
  %color.2 = phi <4 x float> [ %color.1, %then13 ], [ %select333, %ifmerge22 ]
  %7 = extractelement <4 x float> %color.2, i32 2
  %8 = fcmp uge float %7, %.pre
  br i1 %8, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header19
  br label %loop-header30

ifmerge22:                                        ; preds = %loop-header19
  %color23 = fadd <4 x float> %color.2, %6
  %9 = extractelement <4 x float> %color23, i32 3
  %10 = fcmp olt float %9, %.pre
  %color27 = fadd <4 x float> %6, %color23
  %select333 = select i1 %10, <4 x float> %color23, <4 x float> %color27
  br label %loop-header19

loop-header30:                                    ; preds = %ifmerge33, %then20
  %color.3 = phi <4 x float> [ %color.2, %then20 ], [ %color34, %ifmerge33 ]
  %11 = extractelement <4 x float> %color.3, i32 0
  %12 = fcmp uge float %11, 4.200000e+01
  br i1 %12, label %then31, label %ifmerge33

then31:                                           ; preds = %loop-header30
  %.pre343 = load float addrspace(2)* @d2, align 4, !gla.uniform !7
  %.pre344 = load float addrspace(2)* @d3, align 4, !gla.uniform !8
  %13 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header37

ifmerge33:                                        ; preds = %loop-header30
  %color34 = fadd <4 x float> %color.3, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header30

loop-header37:                                    ; preds = %ifmerge40, %then31
  %color.4 = phi <4 x float> [ %color.3, %then31 ], [ %color41, %ifmerge40 ]
  %14 = extractelement <4 x float> %color.4, i32 3
  %15 = extractelement <4 x float> %color.4, i32 1
  %notlhs = fcmp uge float %14, %.pre343
  %notrhs = fcmp uge float %15, %.pre344
  %16 = or i1 %notrhs, %notlhs
  br i1 %16, label %then38, label %ifmerge40

then38:                                           ; preds = %loop-header37
  %17 = load <4 x float> addrspace(2)* @bigColor1_3, align 16, !gla.uniform !10
  %18 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header44

ifmerge40:                                        ; preds = %loop-header37
  %color41 = fadd <4 x float> %color.4, %13
  br label %loop-header37

loop-header44:                                    ; preds = %ifmerge51, %then38
  %color.5 = phi <4 x float> [ %color.4, %then38 ], [ %color52, %ifmerge51 ]
  %19 = extractelement <4 x float> %color.5, i32 2
  %20 = fcmp uge float %19, %.pre344
  br i1 %20, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge54

ifmerge47:                                        ; preds = %loop-header44
  %color48 = fadd <4 x float> %color.5, %17
  %21 = extractelement <4 x float> %color48, i32 1
  %22 = fcmp olt float %21, %18
  br i1 %22, label %then49, label %ifmerge51

then49:                                           ; preds = %ifmerge47
  br label %loop-merge54

ifmerge51:                                        ; preds = %ifmerge47
  %color52 = fadd <4 x float> %17, %color48
  br label %loop-header44

loop-merge54:                                     ; preds = %then49, %then45
  %color.6 = phi <4 x float> [ %color.5, %then45 ], [ %color48, %then49 ]
  %.pre345 = load i32 addrspace(2)* @Count, align 4, !gla.uniform !12
  %23 = load <4 x float> addrspace(2)* @bigColor2, align 16, !gla.uniform !13
  br label %loop-header55

loop-header55:                                    ; preds = %ifmerge58, %loop-merge54
  %color.7 = phi <4 x float> [ %color.6, %loop-merge54 ], [ %color59, %ifmerge58 ]
  %i.0 = phi i32 [ 0, %loop-merge54 ], [ %i60, %ifmerge58 ]
  %24 = icmp slt i32 %i.0, %.pre345
  br i1 %24, label %ifmerge58, label %then56

then56:                                           ; preds = %loop-header55
  %.pre346 = load <4 x float> addrspace(2)* @bigColor3, align 16, !gla.uniform !14
  br label %loop-header63

ifmerge58:                                        ; preds = %loop-header55
  %color59 = fadd <4 x float> %color.7, %23
  %i60 = add i32 %i.0, 1
  br label %loop-header55

loop-header63:                                    ; preds = %loop-header63, %then56
  %color.8 = phi <4 x float> [ %color.7, %then56 ], [ %color64, %loop-header63 ]
  %color64 = fadd <4 x float> %color.8, %.pre346
  %25 = extractelement <4 x float> %color64, i32 0
  %26 = fcmp uge float %25, %.pre343
  br i1 %26, label %then65, label %loop-header63

then65:                                           ; preds = %loop-header63
  %27 = extractelement <4 x float> %color64, i32 2
  %28 = fadd float %27, %.pre344
  %29 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color64, i32 4, float undef, i32 undef, float undef, i32 undef, float %28, i32 0, float undef, i32 undef)
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fadd float %30, %.pre344
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %29, i32 4, float undef, i32 undef, float undef, i32 undef, float %31, i32 0, float undef, i32 undef)
  %33 = extractelement <4 x float> %32, i32 2
  %34 = fadd float %33, %.pre344
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %32, i32 4, float undef, i32 undef, float undef, i32 undef, float %34, i32 0, float undef, i32 undef)
  %36 = extractelement <4 x float> %35, i32 2
  %37 = fadd float %36, %.pre344
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %35, i32 4, float undef, i32 undef, float undef, i32 undef, float %37, i32 0, float undef, i32 undef)
  %39 = extractelement <4 x float> %38, i32 2
  %40 = fadd float %39, %.pre344
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %38, i32 4, float undef, i32 undef, float undef, i32 undef, float %40, i32 0, float undef, i32 undef)
  %42 = extractelement <4 x float> %41, i32 2
  %43 = fadd float %42, %.pre344
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %41, i32 4, float undef, i32 undef, float undef, i32 undef, float %43, i32 0, float undef, i32 undef)
  %45 = extractelement <4 x float> %44, i32 2
  %46 = fadd float %45, %.pre344
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %44, i32 4, float undef, i32 undef, float undef, i32 undef, float %46, i32 0, float undef, i32 undef)
  %48 = extractelement <4 x float> %47, i32 2
  %49 = fadd float %48, %.pre344
  %50 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %47, i32 4, float undef, i32 undef, float undef, i32 undef, float %49, i32 0, float undef, i32 undef)
  %51 = extractelement <4 x float> %50, i32 2
  %52 = fadd float %51, %.pre344
  %53 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %50, i32 4, float undef, i32 undef, float undef, i32 undef, float %52, i32 0, float undef, i32 undef)
  %54 = extractelement <4 x float> %53, i32 2
  %55 = fadd float %54, %.pre344
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %53, i32 4, float undef, i32 undef, float undef, i32 undef, float %55, i32 0, float undef, i32 undef)
  %57 = extractelement <4 x float> %56, i32 2
  %58 = fadd float %57, %.pre344
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %56, i32 4, float undef, i32 undef, float undef, i32 undef, float %58, i32 0, float undef, i32 undef)
  %60 = extractelement <4 x float> %59, i32 2
  %61 = fadd float %60, %.pre344
  %62 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %59, i32 4, float undef, i32 undef, float undef, i32 undef, float %61, i32 0, float undef, i32 undef)
  %63 = extractelement <4 x float> %62, i32 2
  %64 = fadd float %63, %.pre344
  %65 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %62, i32 4, float undef, i32 undef, float undef, i32 undef, float %64, i32 0, float undef, i32 undef)
  %66 = extractelement <4 x float> %65, i32 2
  %67 = fadd float %66, %.pre344
  %68 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %65, i32 4, float undef, i32 undef, float undef, i32 undef, float %67, i32 0, float undef, i32 undef)
  %69 = extractelement <4 x float> %68, i32 2
  %70 = fadd float %69, %.pre344
  %71 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %68, i32 4, float undef, i32 undef, float undef, i32 undef, float %70, i32 0, float undef, i32 undef)
  %72 = extractelement <4 x float> %71, i32 2
  %73 = fadd float %72, %.pre344
  %74 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %71, i32 4, float undef, i32 undef, float undef, i32 undef, float %73, i32 0, float undef, i32 undef)
  %75 = extractelement <4 x float> %74, i32 2
  %76 = fadd float %75, %.pre344
  %77 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %74, i32 4, float undef, i32 undef, float undef, i32 undef, float %76, i32 0, float undef, i32 undef)
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %.pre344
  %80 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %77, i32 4, float undef, i32 undef, float undef, i32 undef, float %79, i32 0, float undef, i32 undef)
  %81 = extractelement <4 x float> %80, i32 2
  %82 = fadd float %81, %.pre344
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %80, i32 4, float undef, i32 undef, float undef, i32 undef, float %82, i32 0, float undef, i32 undef)
  %84 = extractelement <4 x float> %83, i32 2
  %85 = fadd float %84, %.pre344
  %86 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %83, i32 4, float undef, i32 undef, float undef, i32 undef, float %85, i32 0, float undef, i32 undef)
  %87 = extractelement <4 x float> %86, i32 2
  %88 = fadd float %87, %.pre344
  %89 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %86, i32 4, float undef, i32 undef, float undef, i32 undef, float %88, i32 0, float undef, i32 undef)
  %90 = extractelement <4 x float> %89, i32 2
  %91 = fadd float %90, %.pre344
  %92 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %89, i32 4, float undef, i32 undef, float undef, i32 undef, float %91, i32 0, float undef, i32 undef)
  %93 = extractelement <4 x float> %92, i32 2
  %94 = fadd float %93, %.pre344
  %95 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %92, i32 4, float undef, i32 undef, float undef, i32 undef, float %94, i32 0, float undef, i32 undef)
  %96 = extractelement <4 x float> %95, i32 2
  %97 = fadd float %96, %.pre344
  %98 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %95, i32 4, float undef, i32 undef, float undef, i32 undef, float %97, i32 0, float undef, i32 undef)
  %99 = extractelement <4 x float> %98, i32 2
  %100 = fadd float %99, %.pre344
  %101 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %98, i32 4, float undef, i32 undef, float undef, i32 undef, float %100, i32 0, float undef, i32 undef)
  %102 = extractelement <4 x float> %101, i32 2
  %103 = fadd float %102, %.pre344
  %104 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %101, i32 4, float undef, i32 undef, float undef, i32 undef, float %103, i32 0, float undef, i32 undef)
  %105 = extractelement <4 x float> %104, i32 2
  %106 = fadd float %105, %.pre344
  %107 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %104, i32 4, float undef, i32 undef, float undef, i32 undef, float %106, i32 0, float undef, i32 undef)
  %108 = extractelement <4 x float> %107, i32 2
  %109 = fadd float %108, %.pre344
  %110 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %107, i32 4, float undef, i32 undef, float undef, i32 undef, float %109, i32 0, float undef, i32 undef)
  %111 = extractelement <4 x float> %110, i32 2
  %112 = fadd float %111, %.pre344
  %113 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %110, i32 4, float undef, i32 undef, float undef, i32 undef, float %112, i32 0, float undef, i32 undef)
  %114 = extractelement <4 x float> %113, i32 2
  %115 = fadd float %114, %.pre344
  %116 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %113, i32 4, float undef, i32 undef, float undef, i32 undef, float %115, i32 0, float undef, i32 undef)
  %117 = extractelement <4 x float> %116, i32 2
  %118 = fadd float %117, %.pre344
  %119 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %116, i32 4, float undef, i32 undef, float undef, i32 undef, float %118, i32 0, float undef, i32 undef)
  %120 = extractelement <4 x float> %119, i32 2
  %121 = fadd float %120, %.pre344
  %122 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %119, i32 4, float undef, i32 undef, float undef, i32 undef, float %121, i32 0, float undef, i32 undef)
  %123 = extractelement <4 x float> %122, i32 2
  %124 = fadd float %123, %.pre344
  %125 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %122, i32 4, float undef, i32 undef, float undef, i32 undef, float %124, i32 0, float undef, i32 undef)
  %126 = extractelement <4 x float> %125, i32 2
  %127 = fadd float %126, %.pre344
  %128 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %125, i32 4, float undef, i32 undef, float undef, i32 undef, float %127, i32 0, float undef, i32 undef)
  %129 = extractelement <4 x float> %128, i32 2
  %130 = fadd float %129, %.pre344
  %131 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %128, i32 4, float undef, i32 undef, float undef, i32 undef, float %130, i32 0, float undef, i32 undef)
  %132 = extractelement <4 x float> %131, i32 2
  %133 = fadd float %132, %.pre344
  %134 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %131, i32 4, float undef, i32 undef, float undef, i32 undef, float %133, i32 0, float undef, i32 undef)
  %135 = extractelement <4 x float> %134, i32 2
  %136 = fadd float %135, %.pre344
  %137 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %134, i32 4, float undef, i32 undef, float undef, i32 undef, float %136, i32 0, float undef, i32 undef)
  %138 = extractelement <4 x float> %137, i32 2
  %139 = fadd float %138, %.pre344
  %140 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %137, i32 4, float undef, i32 undef, float undef, i32 undef, float %139, i32 0, float undef, i32 undef)
  %141 = extractelement <4 x float> %140, i32 2
  %142 = fadd float %141, %.pre344
  %143 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %140, i32 4, float undef, i32 undef, float undef, i32 undef, float %142, i32 0, float undef, i32 undef)
  %144 = extractelement <4 x float> %143, i32 2
  %145 = fadd float %144, %.pre344
  %146 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %143, i32 4, float undef, i32 undef, float undef, i32 undef, float %145, i32 0, float undef, i32 undef)
  %147 = extractelement <4 x float> %146, i32 2
  %148 = fadd float %147, %.pre344
  %149 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %146, i32 4, float undef, i32 undef, float undef, i32 undef, float %148, i32 0, float undef, i32 undef)
  %150 = extractelement <4 x float> %149, i32 2
  %151 = fadd float %150, %.pre344
  %152 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %149, i32 4, float undef, i32 undef, float undef, i32 undef, float %151, i32 0, float undef, i32 undef)
  br label %loop-header80

loop-header80:                                    ; preds = %ifmerge83, %then65
  %color.10 = phi <4 x float> [ %152, %then65 ], [ %select335, %ifmerge83 ]
  %i79.0 = phi i32 [ 0, %then65 ], [ %i7992, %ifmerge83 ]
  %exitcond391 = icmp eq i32 %i79.0, 100
  br i1 %exitcond391, label %then81, label %ifmerge83

then81:                                           ; preds = %loop-header80
  br label %loop-header96

ifmerge83:                                        ; preds = %loop-header80
  %153 = extractelement <4 x float> %color.10, i32 2
  %154 = fcmp olt float %153, 2.000000e+01
  %155 = extractelement <4 x float> %color.10, i32 0
  %156 = fadd float %155, 1.000000e+00
  %157 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 1, float %156, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %158 = extractelement <4 x float> %color.10, i32 1
  %159 = fadd float %158, 1.000000e+00
  %160 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 2, float undef, i32 undef, float %159, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select335 = select i1 %154, <4 x float> %157, <4 x float> %160
  %i7992 = add i32 %i79.0, 1
  br label %loop-header80

loop-header96:                                    ; preds = %ifmerge99, %then81
  %color.12 = phi <4 x float> [ %color.10, %then81 ], [ %select336, %ifmerge99 ]
  %i95.0 = phi i32 [ 0, %then81 ], [ %i95105, %ifmerge99 ]
  %exitcond390 = icmp eq i32 %i95.0, 120
  br i1 %exitcond390, label %then97, label %ifmerge99

then97:                                           ; preds = %loop-header96
  %161 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header109

ifmerge99:                                        ; preds = %loop-header96
  %162 = extractelement <4 x float> %color.12, i32 2
  %163 = fcmp olt float %162, 2.000000e+01
  %164 = extractelement <4 x float> %color.12, i32 0
  %165 = fadd float %164, 1.000000e+00
  %166 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 1, float %165, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %167 = extractelement <4 x float> %color.12, i32 1
  %168 = fadd float %167, 1.000000e+00
  %169 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 2, float undef, i32 undef, float %168, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select336 = select i1 %163, <4 x float> %166, <4 x float> %169
  %i95105 = add i32 %i95.0, 1
  br label %loop-header96

loop-header109:                                   ; preds = %ifmerge112, %then97
  %color.14 = phi <4 x float> [ %color.12, %then97 ], [ %select, %ifmerge112 ]
  %i108.0 = phi i32 [ 0, %then97 ], [ %select331, %ifmerge112 ]
  %exitcond = icmp eq i32 %i108.0, 42
  br i1 %exitcond, label %then110, label %ifmerge112

then110:                                          ; preds = %loop-header109
  br label %loop-header123

ifmerge112:                                       ; preds = %loop-header109
  %170 = extractelement <4 x float> %color.14, i32 2
  %171 = fadd float %170, %.pre344
  %172 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 4, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float undef, i32 undef)
  %173 = extractelement <4 x float> %color.14, i32 0
  %174 = fcmp olt float %173, %161
  %175 = extractelement <4 x float> %color.14, i32 3
  %176 = fadd float %175, 1.000000e+00
  %177 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 12, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float %176, i32 0)
  %select = select i1 %174, <4 x float> %172, <4 x float> %177
  %select331 = add i32 %i108.0, 1
  br label %loop-header109

loop-header123:                                   ; preds = %ifmerge130, %then110
  %color.15 = phi <4 x float> [ %color.14, %then110 ], [ %186, %ifmerge130 ]
  %i122.0 = phi i32 [ 0, %then110 ], [ %i122132, %ifmerge130 ]
  %178 = icmp sgt i32 %i122.0, 41
  br i1 %178, label %then124, label %ifmerge126

then124:                                          ; preds = %loop-header123
  br label %loop-merge134

ifmerge126:                                       ; preds = %loop-header123
  %179 = extractelement <4 x float> %color.15, i32 2
  %180 = fadd float %179, %.pre344
  %181 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.15, i32 4, float undef, i32 undef, float undef, i32 undef, float %180, i32 0, float undef, i32 undef)
  %182 = extractelement <4 x float> %color.15, i32 0
  %183 = fcmp olt float %182, %161
  br i1 %183, label %then128, label %ifmerge130

then128:                                          ; preds = %ifmerge126
  br label %loop-merge134

ifmerge130:                                       ; preds = %ifmerge126
  %184 = extractelement <4 x float> %color.15, i32 3
  %185 = fadd float %184, 1.000000e+00
  %186 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %181, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %185, i32 0)
  %i122132 = add i32 %i122.0, 1
  br label %loop-header123

loop-merge134:                                    ; preds = %then128, %then124
  %color.16 = phi <4 x float> [ %color.15, %then124 ], [ %181, %then128 ]
  %.pre347 = load <4 x float> addrspace(2)* @bigColor4, align 16, !gla.uniform !15
  br label %loop-header135

loop-header135:                                   ; preds = %loop-header135.backedge, %loop-merge134
  %color.17 = phi <4 x float> [ %color.16, %loop-merge134 ], [ %color.17.be, %loop-header135.backedge ]
  %color136 = fadd <4 x float> %color.17, %.pre347
  %187 = extractelement <4 x float> %color136, i32 0
  %188 = fcmp olt float %187, %161
  br i1 %188, label %then137, label %ifmerge139

then137:                                          ; preds = %loop-header135
  br label %loop-header135.backedge

loop-header135.backedge:                          ; preds = %then137, %ifmerge147
  %color.17.be = phi <4 x float> [ %color136, %then137 ], [ %select332, %ifmerge147 ]
  br label %loop-header135

ifmerge139:                                       ; preds = %loop-header135
  %189 = extractelement <4 x float> %color136, i32 1
  %190 = fcmp olt float %189, %161
  %191 = fadd float %161, %189
  %192 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color136, i32 2, float undef, i32 undef, float %191, i32 0, float undef, i32 undef, float undef, i32 undef)
  %193 = fadd float %161, %187
  %194 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color136, i32 1, float %193, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select332 = select i1 %190, <4 x float> %192, <4 x float> %194
  %195 = extractelement <4 x float> %select332, i32 2
  %196 = fcmp uge float %195, %161
  br i1 %196, label %then145, label %ifmerge147

then145:                                          ; preds = %ifmerge139
  %.pre349 = load <4 x float> addrspace(2)* @bigColor5, align 16, !gla.uniform !16
  %.pre350 = load float addrspace(2)* @d5, align 4, !gla.uniform !17
  br label %loop-header150

ifmerge147:                                       ; preds = %ifmerge139
  br label %loop-header135.backedge

loop-header150:                                   ; preds = %loop-header150, %then145
  %color.19 = phi <4 x float> [ %select332, %then145 ], [ %select337, %loop-header150 ]
  %color151 = fadd <4 x float> %color.19, %.pre349
  %197 = extractelement <4 x float> %color151, i32 1
  %198 = fcmp olt float %197, %.pre350
  %199 = fadd float %.pre350, %197
  %200 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color151, i32 2, float undef, i32 undef, float %199, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select337 = select i1 %198, <4 x float> %200, <4 x float> %color151
  %201 = extractelement <4 x float> %select337, i32 0
  %202 = fcmp uge float %201, %.pre350
  br i1 %202, label %then155, label %loop-header150

then155:                                          ; preds = %loop-header150
  %203 = load float addrspace(2)* @d6, align 4, !gla.uniform !18
  %204 = fcmp olt float %201, %203
  br i1 %204, label %then160, label %else168

then160:                                          ; preds = %then155
  %205 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  br label %loop-header161

loop-header161:                                   ; preds = %ifmerge164, %then160
  %color.21 = phi <4 x float> [ %select337, %then160 ], [ %color165, %ifmerge164 ]
  %206 = extractelement <4 x float> %color.21, i32 1
  %207 = fcmp uge float %206, %203
  br i1 %207, label %then162, label %ifmerge164

then162:                                          ; preds = %loop-header161
  br label %ifmerge176

ifmerge164:                                       ; preds = %loop-header161
  %color165 = fadd <4 x float> %color.21, %205
  br label %loop-header161

else168:                                          ; preds = %then155
  %208 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  %209 = extractelement <4 x float> %208, i32 2
  br label %loop-header169

loop-header169:                                   ; preds = %ifmerge172, %else168
  %color.22 = phi <4 x float> [ %select337, %else168 ], [ %213, %ifmerge172 ]
  %210 = extractelement <4 x float> %color.22, i32 2
  %211 = fcmp uge float %210, %203
  br i1 %211, label %then170, label %ifmerge172

then170:                                          ; preds = %loop-header169
  br label %ifmerge176

ifmerge172:                                       ; preds = %loop-header169
  %212 = fadd float %210, %209
  %213 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.22, i32 4, float undef, i32 undef, float undef, i32 undef, float %212, i32 0, float undef, i32 undef)
  br label %loop-header169

ifmerge176:                                       ; preds = %then170, %then162
  %214 = phi <4 x float> [ %205, %then162 ], [ %208, %then170 ]
  %color.23 = phi <4 x float> [ %color.21, %then162 ], [ %color.22, %then170 ]
  %215 = extractelement <4 x float> %color.23, i32 0
  %216 = fcmp olt float %215, %203
  br i1 %216, label %then177, label %else188

then177:                                          ; preds = %ifmerge176
  %217 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %218 = fcmp olt float %217, 1.000000e+00
  br label %loop-header178

loop-header178:                                   ; preds = %ifmerge181, %then177
  %color.24 = phi <4 x float> [ %color.23, %then177 ], [ %color182, %ifmerge181 ]
  %219 = extractelement <4 x float> %color.24, i32 1
  %220 = fcmp uge float %219, %203
  br i1 %220, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge187

ifmerge181:                                       ; preds = %loop-header178
  %color182 = fadd <4 x float> %color.24, %214
  br i1 %218, label %then183, label %loop-header178

then183:                                          ; preds = %ifmerge181
  br label %loop-merge187

loop-merge187:                                    ; preds = %then183, %then179
  %color.25 = phi <4 x float> [ %color.24, %then179 ], [ %color182, %then183 ]
  br label %ifmerge196

else188:                                          ; preds = %ifmerge176
  %221 = extractelement <4 x float> %214, i32 2
  br label %loop-header189

loop-header189:                                   ; preds = %ifmerge192, %else188
  %color.26 = phi <4 x float> [ %color.23, %else188 ], [ %225, %ifmerge192 ]
  %222 = extractelement <4 x float> %color.26, i32 2
  %223 = fcmp uge float %222, %203
  br i1 %223, label %then190, label %ifmerge192

then190:                                          ; preds = %loop-header189
  br label %ifmerge196

ifmerge192:                                       ; preds = %loop-header189
  %224 = fadd float %222, %221
  %225 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.26, i32 4, float undef, i32 undef, float undef, i32 undef, float %224, i32 0, float undef, i32 undef)
  br label %loop-header189

ifmerge196:                                       ; preds = %then190, %loop-merge187
  %color.27 = phi <4 x float> [ %color.25, %loop-merge187 ], [ %color.26, %then190 ]
  %.pre351 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %226 = fcmp olt float %.pre351, 0.000000e+00
  %227 = load <4 x float> addrspace(2)* @bigColor7, align 16, !gla.uniform !21
  %228 = fcmp olt float %.pre351, 1.000000e+00
  br label %loop-header197

loop-header197:                                   ; preds = %ifmerge205, %ifmerge196
  %color.28 = phi <4 x float> [ %color.27, %ifmerge196 ], [ %color206, %ifmerge205 ]
  br i1 %226, label %then198, label %ifmerge200

then198:                                          ; preds = %loop-header197
  br label %loop-merge211

ifmerge200:                                       ; preds = %loop-header197
  %color201 = fadd <4 x float> %color.28, %227
  br i1 %228, label %then202, label %ifmerge205

then202:                                          ; preds = %ifmerge200
  %229 = extractelement <4 x float> %color201, i32 2
  %230 = fadd float %229, 1.000000e+00
  %231 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color201, i32 4, float undef, i32 undef, float undef, i32 undef, float %230, i32 0, float undef, i32 undef)
  br label %loop-merge211

ifmerge205:                                       ; preds = %ifmerge200
  %color206 = fadd <4 x float> %color201, %color1
  br label %loop-header197

loop-merge211:                                    ; preds = %then202, %then198
  %color.29 = phi <4 x float> [ %color.28, %then198 ], [ %231, %then202 ]
  %.pre352 = load float addrspace(2)* @d8, align 4, !gla.uniform !22
  %232 = fcmp olt float %.pre352, 0.000000e+00
  %233 = fcmp olt float %.pre352, 1.000000e+00
  br label %loop-header212

loop-header212:                                   ; preds = %ifmerge225, %loop-merge211
  %color.30 = phi <4 x float> [ %color.29, %loop-merge211 ], [ %color226, %ifmerge225 ]
  br i1 %232, label %then213, label %ifmerge215

then213:                                          ; preds = %loop-header212
  br label %loop-merge231

ifmerge215:                                       ; preds = %loop-header212
  %color216 = fadd <4 x float> %color.30, %227
  br i1 %233, label %then217, label %ifmerge225

then217:                                          ; preds = %ifmerge215
  %234 = extractelement <4 x float> %color216, i32 2
  %235 = fadd float %234, 1.000000e+00
  %236 = fcmp olt float %.pre352, 2.000000e+00
  %237 = extractelement <4 x float> %color216, i32 1
  %238 = fadd float %237, 1.000000e+00
  %239 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color216, i32 6, float undef, i32 undef, float %238, i32 0, float %235, i32 0, float undef, i32 undef)
  %240 = extractelement <4 x float> %color216, i32 0
  %241 = fadd float %240, 1.000000e+00
  %242 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color216, i32 5, float %241, i32 0, float undef, i32 undef, float %235, i32 0, float undef, i32 undef)
  %select338 = select i1 %236, <4 x float> %239, <4 x float> %242
  br label %loop-merge231

ifmerge225:                                       ; preds = %ifmerge215
  %color226 = fadd <4 x float> %color216, %color1
  %243 = extractelement <4 x float> %color226, i32 2
  %244 = fcmp uge float %243, %.pre352
  br i1 %244, label %then227, label %loop-header212

then227:                                          ; preds = %ifmerge225
  br label %loop-merge231

loop-merge231:                                    ; preds = %then227, %then217, %then213
  %color.32 = phi <4 x float> [ %color.30, %then213 ], [ %select338, %then217 ], [ %color226, %then227 ]
  %.pre353 = load float addrspace(2)* @d9, align 4, !gla.uniform !23
  %245 = fcmp ogt float %.pre353, %.pre352
  br label %loop-header232

loop-header232:                                   ; preds = %ifmerge244, %loop-merge231
  %color.33 = phi <4 x float> [ %color.32, %loop-merge231 ], [ %color.35, %ifmerge244 ]
  %246 = extractelement <4 x float> %color.33, i32 3
  %247 = fcmp uge float %246, %.pre353
  br i1 %247, label %then233, label %ifmerge235

then233:                                          ; preds = %loop-header232
  br label %loop-merge246

ifmerge235:                                       ; preds = %loop-header232
  br i1 %245, label %then236, label %ifmerge244

then236:                                          ; preds = %ifmerge235
  %248 = extractelement <4 x float> %color.33, i32 0
  %249 = fcmp ugt float %248, %.pre351
  br i1 %249, label %ifmerge243, label %then237

then237:                                          ; preds = %then236
  %250 = extractelement <4 x float> %color.33, i32 2
  %251 = fcmp oeq float %250, 5.000000e+00
  br i1 %251, label %then238, label %else240

then238:                                          ; preds = %then237
  %252 = fadd float %246, 1.000000e+00
  %253 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.33, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %252, i32 0)
  br label %ifmerge243

else240:                                          ; preds = %then237
  br label %loop-merge246

ifmerge243:                                       ; preds = %then236, %then238
  %color.34 = phi <4 x float> [ %253, %then238 ], [ %color.33, %then236 ]
  br label %ifmerge244

ifmerge244:                                       ; preds = %ifmerge235, %ifmerge243
  %color.35 = phi <4 x float> [ %color.34, %ifmerge243 ], [ %color.33, %ifmerge235 ]
  br label %loop-header232

loop-merge246:                                    ; preds = %else240, %then233
  %.pre354 = load float addrspace(2)* @d10, align 4, !gla.uniform !24
  %254 = load float addrspace(2)* @d11, align 4, !gla.uniform !25
  %255 = load float addrspace(2)* @d12, align 4, !gla.uniform !26
  br label %loop-header247

loop-header247:                                   ; preds = %then252, %loop-merge246
  %color.36 = phi <4 x float> [ %color.33, %loop-merge246 ], [ %select339, %then252 ]
  %256 = extractelement <4 x float> %color.36, i32 2
  %257 = fcmp uge float %256, %.pre354
  br i1 %257, label %then248, label %ifmerge250

then248:                                          ; preds = %loop-header247
  br label %loop-merge264

ifmerge250:                                       ; preds = %loop-header247
  %258 = extractelement <4 x float> %color.36, i32 1
  %259 = fadd float %258, 1.000000e+00
  %260 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.36, i32 2, float undef, i32 undef, float %259, i32 0, float undef, i32 undef, float undef, i32 undef)
  %261 = fcmp olt float %259, %254
  br i1 %261, label %then252, label %ifmerge260

then252:                                          ; preds = %ifmerge250
  %262 = fadd float %256, 1.000000e+00
  %263 = extractelement <4 x float> %color.36, i32 3
  %264 = fcmp olt float %263, %255
  %265 = fadd float %263, 1.000000e+00
  %266 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %260, i32 12, float undef, i32 undef, float undef, i32 undef, float %262, i32 0, float %265, i32 0)
  %267 = extractelement <4 x float> %color.36, i32 0
  %268 = fadd float %267, 1.000000e+00
  %269 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %260, i32 5, float %268, i32 0, float undef, i32 undef, float %262, i32 0, float undef, i32 undef)
  %select339 = select i1 %264, <4 x float> %266, <4 x float> %269
  br label %loop-header247

ifmerge260:                                       ; preds = %ifmerge250
  %color261 = fadd <4 x float> %260, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-merge264

loop-merge264:                                    ; preds = %ifmerge260, %then248
  %color.38 = phi <4 x float> [ %color.36, %then248 ], [ %color261, %ifmerge260 ]
  %270 = load <4 x float> addrspace(2)* @bigColor8, align 16, !gla.uniform !27
  %271 = extractelement <4 x float> %270, i32 0
  br label %loop-header265

loop-header265:                                   ; preds = %ifmerge268, %loop-merge264
  %color.39 = phi <4 x float> [ %color.38, %loop-merge264 ], [ %select342, %ifmerge268 ]
  %272 = extractelement <4 x float> %color.39, i32 0
  %273 = fcmp uge float %272, 1.000000e+01
  br i1 %273, label %then266, label %ifmerge268

then266:                                          ; preds = %loop-header265
  %color278 = fadd <4 x float> %color.39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color278, <4 x float>* @gl_FragColor, align 16
  %.pre355 = load float addrspace(2)* @d14, align 4, !gla.uniform !28
  %274 = load float addrspace(2)* @d15, align 4, !gla.uniform !29
  br label %loop-header279

ifmerge268:                                       ; preds = %loop-header265
  %color269 = fadd <4 x float> %color.39, %270
  %275 = extractelement <4 x float> %color269, i32 2
  %276 = fcmp olt float %275, %.pre352
  %277 = extractelement <4 x float> %color269, i32 3
  %278 = fcmp olt float %277, %203
  %279 = extractelement <4 x float> %color269, i32 1
  %280 = fadd float %279, %271
  %281 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color269, i32 2, float undef, i32 undef, float %280, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select340 = select i1 %278, <4 x float> %color269, <4 x float> %281
  %select342 = select i1 %276, <4 x float> %select340, <4 x float> %281
  br label %loop-header265

loop-header279:                                   ; preds = %else284, %then266
  %color.40 = phi <4 x float> [ %color278, %then266 ], [ %color285, %else284 ]
  %282 = extractelement <4 x float> %color.40, i32 0
  %283 = fcmp uge float %282, %.pre355
  br i1 %283, label %then280, label %ifmerge282

then280:                                          ; preds = %loop-header279
  %color289 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre356 = load float addrspace(2)* @d16, align 4, !gla.uniform !30
  br label %loop-header290

ifmerge282:                                       ; preds = %loop-header279
  %284 = extractelement <4 x float> %color.40, i32 1
  %285 = fcmp olt float %284, %274
  br i1 %285, label %then283, label %else284

then283:                                          ; preds = %ifmerge282
  br label %stage-epilogue

else284:                                          ; preds = %ifmerge282
  %color285 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header279

loop-header290:                                   ; preds = %ifmerge293, %then280
  %color.41 = phi <4 x float> [ %color289, %then280 ], [ %290, %ifmerge293 ]
  %286 = extractelement <4 x float> %color.41, i32 3
  %287 = fcmp uge float %286, %.pre356
  br i1 %287, label %then291, label %ifmerge293

then291:                                          ; preds = %loop-header290
  %288 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header297

ifmerge293:                                       ; preds = %loop-header290
  %289 = fadd float %286, 1.000000e+00
  %290 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.41, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %289, i32 0)
  br label %loop-header290

loop-header297:                                   ; preds = %ifmerge300, %then291
  %color.42 = phi <4 x float> [ %color.41, %then291 ], [ %color301, %ifmerge300 ]
  %291 = extractelement <4 x float> %color.42, i32 3
  %292 = extractelement <4 x float> %color.42, i32 1
  %notlhs329 = fcmp uge float %291, %.pre343
  %notrhs330 = fcmp uge float %292, %.pre344
  %293 = or i1 %notrhs330, %notlhs329
  br i1 %293, label %then298, label %ifmerge300

then298:                                          ; preds = %loop-header297
  %.pre357 = load float addrspace(2)* @d18, align 4, !gla.uniform !31
  %294 = load float addrspace(2)* @d17, align 4, !gla.uniform !32
  br label %loop-header307

ifmerge300:                                       ; preds = %loop-header297
  %color301 = fadd <4 x float> %color.42, %288
  %295 = extractelement <4 x float> %color301, i32 2
  %296 = fcmp olt float %295, %.pre344
  br i1 %296, label %then302, label %loop-header297

then302:                                          ; preds = %ifmerge300
  br label %stage-epilogue

loop-header307:                                   ; preds = %ifmerge310, %then298
  %color.43 = phi <4 x float> [ %color.42, %then298 ], [ %color311, %ifmerge310 ]
  %297 = extractelement <4 x float> %color.43, i32 1
  %298 = fcmp olt float %297, %.pre357
  br i1 %298, label %then308, label %ifmerge310

then308:                                          ; preds = %loop-header307
  br label %stage-epilogue

ifmerge310:                                       ; preds = %loop-header307
  %color311 = fadd <4 x float> %color.43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %299 = extractelement <4 x float> %color311, i32 0
  %300 = fcmp uge float %299, %294
  br i1 %300, label %then312, label %loop-header307

then312:                                          ; preds = %ifmerge310
  br label %loop-header317

loop-header317:                                   ; preds = %else322, %then312
  %color.44 = phi <4 x float> [ %color311, %then312 ], [ %color323, %else322 ]
  %301 = extractelement <4 x float> %color.44, i32 1
  %302 = fcmp uge float %301, %.pre356
  br i1 %302, label %then318, label %ifmerge320

then318:                                          ; preds = %loop-header317
  %color327 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color327, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

ifmerge320:                                       ; preds = %loop-header317
  %303 = extractelement <4 x float> %color.44, i32 3
  %304 = fcmp olt float %303, %.pre356
  br i1 %304, label %then321, label %else322

then321:                                          ; preds = %ifmerge320
  call void @llvm.gla.discard()
  br label %stage-exit

else322:                                          ; preds = %ifmerge320
  %color323 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header317

stage-epilogue:                                   ; preds = %then318, %then308, %then302, %then283
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then321
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #1

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float C_0d33 = 0.33;
const float C_0d66 = 0.66;
const vec4 C_vec4p0d66p = vec4(0.66);
const vec4 C_vec4p0d33p = vec4(0.33);
const float C_42d0 = 42.0;
const vec4 C_vec4p1d0p = vec4(1.0);
vec4 color_c51;
const int C_0 = 0;
vec4 color_c54;
const float C_20d0 = 20.0;
const float C_1d0 = 1.0;
const int C_41 = 41;
vec4 Lg_5;
const int C_1 = 1;
vec4 select_c59;
vec4 select_c61;
float Lg_6;
vec4 color_c63;
const float C_0d0 = 0.0;
vec4 color_c64;
vec4 color_c66;
const float C_2d0 = 2.0;
vec4 color_c68;
const float C_5d0 = 5.0;
vec4 Lg_7;
const float C_10d0 = 10.0;
vec4 color_c79;

void main()
{
	vec4 color_uc1;
	vec4 color_uc2;
	vec4 color_uc3;
	vec4 color_uc4;
	vec4 color_uc5;
	vec4 color_uc6;
	vec4 color_uc7;
	int i_uc8;
	vec4 color_uc9;
	vec4 color_uc10;
	int Lg_1;
	vec4 color_uc11;
	int Lg_2;
	vec4 color_uc12;
	int Lg_3;
	vec4 color_uc13;
	int Lg_4;
	vec4 color_uc14;
	vec4 color_uc15;
	vec4 color_uc16;
	vec4 color_uc17;
	vec4 color_uc18;
	vec4 color_uc19;
	vec4 color_uc20;
	vec4 color_uc21;
	vec4 color_uc22;
	vec4 color_uc23;
	vec4 color_uc24;
	vec4 color_uc25;
	vec4 color_uc26;
	vec4 color_uc27;
	vec4 color_uc28;
	vec4 color_uc29;
	vec4 color_uc30;
	vec4 color_uc31;
	vec4 color_uc32;
	vec4 color_uc33;
	vec4 color_uc34;
	vec4 color_uc35;
	vec4 color_uc36;
	vec4 color_uc37;
	vec4 color_uc38;
	vec4 color_uc39;
	bool H_bghf2q1 = BaseColor.x < C_0d33;
	bool H_9j9phn = BaseColor.x < C_0d66;
	vec4 select_c40 = H_9j9phn ? C_vec4p0d66p : C_vec4p0d33p;
	vec4 select_c41 = H_bghf2q1 ? C_vec4p0d33p : select_c40;
	vec4 select_c42 = BaseColor + select_c41;
	color_uc1 = select_c42;
	while (color_uc1.x < d) {
		vec4 color_c43 = bigColor + color_uc1;
		color_uc1 = color_c43;
	}
	
	color_uc2 = color_uc1;
	while (color_uc2.z < d) {
		vec4 color_c44 = bigColor1_1 + color_uc2;
		bool H_9uygn3 = color_c44.w < d;
		vec4 color_c45 = bigColor1_1 + color_c44;
		vec4 select_c46 = H_9uygn3 ? color_c44 : color_c45;
		color_uc2 = select_c46;
	}
	
	color_uc3 = color_uc2;
	while (color_uc3.x < C_42d0) {
		vec4 color_c47 = color_uc3 + C_vec4p1d0p;
		color_uc3 = color_c47;
	}
	
	color_uc4 = color_uc3;
	while (true) {
		bool notlhs_c48 = color_uc4.w >= d2;
		bool notrhs_c49 = color_uc4.y >= d3;
		bool H_ovju521 = notrhs_c49 || notlhs_c48;
		if (H_ovju521) {
			break;
		}
		
		vec4 color_c50 = bigColor1_2 + color_uc4;
		color_uc4 = color_c50;
	}
	
	color_uc5 = color_uc4;
	while (color_uc5.z < d3) {
		color_c51 = bigColor1_3 + color_uc5;
		bool H_bexx0e = color_c51.y < d4;
		if (H_bexx0e) {
			color_uc6 = color_c51;
			break;
		}
		
		vec4 color_c52 = bigColor1_3 + color_c51;
		color_uc5 = color_c52;
	}
	
	color_uc6 = color_uc5;
	color_uc7 = color_uc6;
	i_uc8 = C_0;
	for (i_uc8 = 0; i_uc8 < Count; ++i_uc8) {
		vec4 color_c53 = bigColor2 + color_uc7;
		color_uc7 = color_c53;
	}
	
	color_uc9 = color_uc7;
	while (true) {
		color_c54 = bigColor3 + color_uc9;
		bool H_cs7yci1 = color_c54.x >= d2;
		if (H_cs7yci1) {
			break;
		}
		
		color_uc9 = color_c54;
	}
	
	float H_vyzw2b = color_c54.z + d3;
	vec4 H_fd63r6 = color_c54;
	H_fd63r6.z = H_vyzw2b;
	float H_9qflpq1 = H_fd63r6.z + d3;
	vec4 H_x2i0301 = H_fd63r6;
	H_x2i0301.z = H_9qflpq1;
	float H_3q7aot = H_x2i0301.z + d3;
	vec4 H_zndv9t = H_x2i0301;
	H_zndv9t.z = H_3q7aot;
	float H_fwyio61 = H_zndv9t.z + d3;
	vec4 H_3mu9re = H_zndv9t;
	H_3mu9re.z = H_fwyio61;
	float H_bzb32f = H_3mu9re.z + d3;
	vec4 H_v5m98q = H_3mu9re;
	H_v5m98q.z = H_bzb32f;
	float H_iecv0e = H_v5m98q.z + d3;
	vec4 H_khmpqq = H_v5m98q;
	H_khmpqq.z = H_iecv0e;
	float H_ir2w7v = H_khmpqq.z + d3;
	vec4 H_o7p6w41 = H_khmpqq;
	H_o7p6w41.z = H_ir2w7v;
	float H_s15iag = H_o7p6w41.z + d3;
	vec4 H_2y8jys1 = H_o7p6w41;
	H_2y8jys1.z = H_s15iag;
	float H_gnb8lt1 = H_2y8jys1.z + d3;
	vec4 H_668tsk1 = H_2y8jys1;
	H_668tsk1.z = H_gnb8lt1;
	float H_548xpi1 = H_668tsk1.z + d3;
	vec4 H_pb0i6y = H_668tsk1;
	H_pb0i6y.z = H_548xpi1;
	float H_2x5lms1 = H_pb0i6y.z + d3;
	vec4 H_8lgpgh1 = H_pb0i6y;
	H_8lgpgh1.z = H_2x5lms1;
	float H_rg8wzn1 = H_8lgpgh1.z + d3;
	vec4 H_r950by = H_8lgpgh1;
	H_r950by.z = H_rg8wzn1;
	float H_tsxxf8 = H_r950by.z + d3;
	vec4 H_xb2rg6 = H_r950by;
	H_xb2rg6.z = H_tsxxf8;
	float H_fu8bzn = H_xb2rg6.z + d3;
	vec4 H_be5nwn = H_xb2rg6;
	H_be5nwn.z = H_fu8bzn;
	float H_fx7sxq = H_be5nwn.z + d3;
	vec4 H_bzievh1 = H_be5nwn;
	H_bzievh1.z = H_fx7sxq;
	float H_fyr8fb1 = H_bzievh1.z + d3;
	vec4 H_zo5hmu1 = H_bzievh1;
	H_zo5hmu1.z = H_fyr8fb1;
	float H_v537m61 = H_zo5hmu1.z + d3;
	vec4 H_rbx0ka1 = H_zo5hmu1;
	H_rbx0ka1.z = H_v537m61;
	float H_r2w7cc = H_rbx0ka1.z + d3;
	vec4 H_rrrwkk = H_rbx0ka1;
	H_rrrwkk.z = H_r2w7cc;
	float H_p3vl4h1 = H_rrrwkk.z + d3;
	vec4 H_t6dxxu = H_rrrwkk;
	H_t6dxxu.z = H_p3vl4h1;
	float H_9yiytp1 = H_t6dxxu.z + d3;
	vec4 H_tjbf5p1 = H_t6dxxu;
	H_tjbf5p1.z = H_9yiytp1;
	float H_cf31kp1 = H_tjbf5p1.z + d3;
	vec4 H_iww0k3 = H_tjbf5p1;
	H_iww0k3.z = H_cf31kp1;
	float H_hu1imo1 = H_iww0k3.z + d3;
	vec4 H_lvxh8c = H_iww0k3;
	H_lvxh8c.z = H_hu1imo1;
	float H_r7fz2o1 = H_lvxh8c.z + d3;
	vec4 H_bys1dr1 = H_lvxh8c;
	H_bys1dr1.z = H_r7fz2o1;
	float H_cdqbxn1 = H_bys1dr1.z + d3;
	vec4 H_iudik21 = H_bys1dr1;
	H_iudik21.z = H_cdqbxn1;
	float H_zylovr1 = H_iudik21.z + d3;
	vec4 H_jve7br1 = H_iudik21;
	H_jve7br1.z = H_zylovr1;
	float H_7pcpfs = H_jve7br1.z + d3;
	vec4 H_zn61y31 = H_jve7br1;
	H_zn61y31.z = H_7pcpfs;
	float H_aylm4o = H_zn61y31.z + d3;
	vec4 H_oqha4v1 = H_zn61y31;
	H_oqha4v1.z = H_aylm4o;
	float H_ibo2221 = H_oqha4v1.z + d3;
	vec4 H_wpy4af1 = H_oqha4v1;
	H_wpy4af1.z = H_ibo2221;
	float H_a3c8e21 = H_wpy4af1.z + d3;
	vec4 H_ke30d01 = H_wpy4af1;
	H_ke30d01.z = H_a3c8e21;
	float H_gpgm7l1 = H_ke30d01.z + d3;
	vec4 H_a7fenb = H_ke30d01;
	H_a7fenb.z = H_gpgm7l1;
	float H_tayfmd = H_a7fenb.z + d3;
	vec4 H_1t0e4i1 = H_a7fenb;
	H_1t0e4i1.z = H_tayfmd;
	float H_6mldwa1 = H_1t0e4i1.z + d3;
	vec4 H_kgqyks1 = H_1t0e4i1;
	H_kgqyks1.z = H_6mldwa1;
	float H_5uvt8c = H_kgqyks1.z + d3;
	vec4 H_ptdcbe = H_kgqyks1;
	H_ptdcbe.z = H_5uvt8c;
	float H_avyc8o = H_ptdcbe.z + d3;
	vec4 H_kuelwa1 = H_ptdcbe;
	H_kuelwa1.z = H_avyc8o;
	float H_ug39fu = H_kuelwa1.z + d3;
	vec4 H_cel7hh1 = H_kuelwa1;
	H_cel7hh1.z = H_ug39fu;
	float H_iv9e9d1 = H_cel7hh1.z + d3;
	vec4 H_05jjqx = H_cel7hh1;
	H_05jjqx.z = H_iv9e9d1;
	float H_s80dx6 = H_05jjqx.z + d3;
	vec4 H_y7wsd91 = H_05jjqx;
	H_y7wsd91.z = H_s80dx6;
	float H_me3hib = H_y7wsd91.z + d3;
	vec4 H_sic97k1 = H_y7wsd91;
	H_sic97k1.z = H_me3hib;
	float H_h09owb1 = H_sic97k1.z + d3;
	vec4 H_5drdmv1 = H_sic97k1;
	H_5drdmv1.z = H_h09owb1;
	float H_jlpxbl1 = H_5drdmv1.z + d3;
	vec4 H_nbubs8 = H_5drdmv1;
	H_nbubs8.z = H_jlpxbl1;
	float H_648qkp = H_nbubs8.z + d3;
	vec4 H_wrr8bj = H_nbubs8;
	H_wrr8bj.z = H_648qkp;
	float H_flcax71 = H_wrr8bj.z + d3;
	vec4 H_jlf92q = H_wrr8bj;
	H_jlf92q.z = H_flcax71;
	color_uc10 = H_jlf92q;
	Lg_1 = C_0;
	for ( ; Lg_1 != 100; ++Lg_1) {
		bool H_srs02c = color_uc10.z < C_20d0;
		float H_m7of8x = color_uc10.x + C_1d0;
		vec4 H_gad7u3 = color_uc10;
		H_gad7u3.x = H_m7of8x;
		float H_hzo9cd = C_1d0 + color_uc10.y;
		vec4 H_gad7u3r = color_uc10;
		H_gad7u3r.y = H_hzo9cd;
		vec4 select_c55 = H_srs02c ? H_gad7u3 : H_gad7u3r;
		color_uc10 = select_c55;
	}
	
	color_uc11 = color_uc10;
	Lg_2 = C_0;
	for ( ; Lg_2 != 120; ++Lg_2) {
		bool H_9rohuj1 = color_uc11.z < C_20d0;
		float H_dlxvr51 = C_1d0 + color_uc11.x;
		vec4 H_fzy644 = color_uc11;
		H_fzy644.x = H_dlxvr51;
		float H_ewbwh51 = C_1d0 + color_uc11.y;
		vec4 H_fzy644r = color_uc11;
		H_fzy644r.y = H_ewbwh51;
		vec4 select_c56 = H_9rohuj1 ? H_fzy644 : H_fzy644r;
		color_uc11 = select_c56;
	}
	
	color_uc12 = color_uc11;
	Lg_3 = C_0;
	for ( ; Lg_3 != 42; ++Lg_3) {
		float H_4u7iav = color_uc12.z + d3;
		vec4 H_eok6e4 = color_uc12;
		H_eok6e4.z = H_4u7iav;
		bool H_c0hc0a = color_uc12.x < d4;
		float H_5txvxx1 = C_1d0 + color_uc12.w;
		vec4 H_eok6e4r = color_uc12;
		H_eok6e4r.zw = vec2(H_4u7iav, H_5txvxx1);
		vec4 select_c57 = H_c0hc0a ? H_eok6e4 : H_eok6e4r;
		color_uc12 = select_c57;
	}
	
	color_uc13 = color_uc12;
	Lg_4 = C_0;
	while (Lg_4 <= C_41) {
		float H_9gp8pd1 = color_uc13.z + d3;
		Lg_5 = color_uc13;
		Lg_5.z = H_9gp8pd1;
		bool H_l15dou = color_uc13.x < d4;
		if (H_l15dou) {
			color_uc14 = Lg_5;
			break;
		}
		
		float H_aiv74t = C_1d0 + color_uc13.w;
		vec4 H_0vqk2y = Lg_5;
		H_0vqk2y.w = H_aiv74t;
		int H_zk97sd1 = Lg_4 + C_1;
		color_uc13 = H_0vqk2y;
		Lg_4 = H_zk97sd1;
	}
	
	color_uc14 = color_uc13;
	color_uc15 = color_uc14;
	while (true) {
		vec4 color_c58 = bigColor4 + color_uc15;
		bool H_vkfixg1 = color_c58.x < d4;
		if (H_vkfixg1) {
			color_uc16 = color_c58;
		} else {
			bool H_us9p8u = color_c58.y < d4;
			float H_ttvxha1 = color_c58.y + d4;
			vec4 H_3pey2a = color_c58;
			H_3pey2a.y = H_ttvxha1;
			float H_496sel = color_c58.x + d4;
			vec4 H_3pey2ar = color_c58;
			H_3pey2ar.x = H_496sel;
			select_c59 = H_us9p8u ? H_3pey2a : H_3pey2ar;
			bool H_erv7ze = select_c59.z >= d4;
			if (H_erv7ze) {
				break;
			}
			
			color_uc16 = select_c59;
		}
		
		color_uc15 = color_uc16;
	}
	
	color_uc17 = select_c59;
	while (true) {
		vec4 color_c60 = bigColor5 + color_uc17;
		bool H_4hdqfx = color_c60.y < d5;
		float H_n6uuaf1 = color_c60.y + d5;
		vec4 H_ojh59b1 = color_c60;
		H_ojh59b1.y = H_n6uuaf1;
		select_c61 = H_4hdqfx ? H_ojh59b1 : color_c60;
		bool H_gddgna1 = select_c61.x >= d5;
		if (H_gddgna1) {
			break;
		}
		
		color_uc17 = select_c61;
	}
	
	bool H_2wl9ix = select_c61.x < d6;
	if (H_2wl9ix) {
		color_uc18 = select_c61;
		while (color_uc18.y < d6) {
			vec4 color_c62 = bigColor6 + color_uc18;
			color_uc18 = color_c62;
		}
		
		color_uc20 = color_uc18;
	} else {
		color_uc19 = select_c61;
		while (color_uc19.z < d6) {
			float H_3ummgd1 = bigColor6.z + color_uc19.z;
			vec4 H_nf5aw1 = color_uc19;
			H_nf5aw1.z = H_3ummgd1;
			color_uc19 = H_nf5aw1;
		}
		
		color_uc20 = color_uc19;
	}
	
	bool H_5xpk8h = color_uc20.x < d6;
	if (H_5xpk8h) {
		bool H_lmykhx1 = d7 < C_1d0;
		color_uc21 = color_uc20;
		while (color_uc21.y < d6) {
			color_c63 = bigColor6 + color_uc21;
			if (H_lmykhx1) {
				color_uc22 = color_c63;
				break;
			}
			
			color_uc21 = color_c63;
		}
		
		color_uc22 = color_uc21;
		color_uc24 = color_uc22;
	} else {
		color_uc23 = color_uc20;
		while (color_uc23.z < d6) {
			float H_evc5jl = bigColor6.z + color_uc23.z;
			vec4 H_6k47rz = color_uc23;
			H_6k47rz.z = H_evc5jl;
			color_uc23 = H_6k47rz;
		}
		
		color_uc24 = color_uc23;
	}
	
	bool H_2ecxn2 = d7 < C_0d0;
	bool H_lmykhx1r = d7 < C_1d0;
	color_uc25 = color_uc24;
	while (true) {
		if (H_2ecxn2) {
			color_uc26 = color_uc25;
			break;
		}
		
		color_c64 = bigColor7 + color_uc25;
		if (H_lmykhx1r) {
			float H_wpuavb1 = C_1d0 + color_c64.z;
			vec4 H_sr275a1 = color_c64;
			H_sr275a1.z = H_wpuavb1;
			color_uc26 = H_sr275a1;
			break;
		}
		
		vec4 color_c65 = BaseColor + color_c64;
		color_uc25 = color_c65;
	}
	
	bool H_zt4vz81 = d8 < C_0d0;
	bool H_cokhy9 = d8 < C_1d0;
	color_uc27 = color_uc26;
	while (true) {
		if (H_zt4vz81) {
			color_uc28 = color_uc27;
			break;
		}
		
		color_c66 = bigColor7 + color_uc27;
		if (H_cokhy9) {
			float H_2ahnb11 = C_1d0 + color_c66.z;
			bool H_hrxnuy1 = d8 < C_2d0;
			float H_3lvn111 = C_1d0 + color_c66.y;
			vec4 H_q5a6pa1 = color_c66;
			H_q5a6pa1.yz = vec2(H_3lvn111, H_2ahnb11);
			float H_4w9or01 = C_1d0 + color_c66.x;
			vec4 H_q5a6pa1r = color_c66;
			H_q5a6pa1r.xz = vec2(H_4w9or01, H_2ahnb11);
			vec4 select_c67 = H_hrxnuy1 ? H_q5a6pa1 : H_q5a6pa1r;
			color_uc28 = select_c67;
			break;
		}
		
		color_c68 = BaseColor + color_c66;
		bool H_vyol08 = color_c68.z >= d8;
		if (H_vyol08) {
			color_uc28 = color_c68;
			break;
		}
		
		color_uc27 = color_c68;
	}
	
	bool H_45lodh = d9 > d8;
	color_uc29 = color_uc28;
	while (color_uc29.w < d9) {
		color_uc31 = color_uc29;
		if (H_45lodh) {
			bool H_pfqu9s = color_uc29.x > d7;
			color_uc30 = color_uc29;
			if (! H_pfqu9s) {
				bool H_3n928g = color_uc29.z == C_5d0;
				if (! H_3n928g) {
					break;
				}
				
				float H_z4tx07 = C_1d0 + color_uc29.w;
				vec4 H_0qq4f11 = color_uc29;
				H_0qq4f11.w = H_z4tx07;
				color_uc30 = H_0qq4f11;
			}
			
			color_uc31 = color_uc30;
		}
		
		color_uc29 = color_uc31;
	}
	
	color_uc32 = color_uc29;
	while (color_uc32.z < d10) {
		float H_57pw0y1 = C_1d0 + color_uc32.y;
		Lg_7 = color_uc32;
		Lg_7.y = H_57pw0y1;
		bool H_v107ur1 = H_57pw0y1 < d11;
		if (! H_v107ur1) {
			vec4 color_c69 = C_vec4p1d0p + Lg_7;
			color_uc33 = color_c69;
			break;
		}
		
		float H_84wx6x1 = C_1d0 + color_uc32.z;
		bool H_c4uhhm1 = color_uc32.w < d12;
		float H_b13zcw1 = C_1d0 + color_uc32.w;
		vec4 H_y8yjmy = Lg_7;
		H_y8yjmy.zw = vec2(H_84wx6x1, H_b13zcw1);
		float H_6i3xqx1 = C_1d0 + color_uc32.x;
		vec4 H_y8yjmyr = Lg_7;
		H_y8yjmyr.xz = vec2(H_6i3xqx1, H_84wx6x1);
		vec4 select_c70 = H_c4uhhm1 ? H_y8yjmy : H_y8yjmyr;
		color_uc32 = select_c70;
	}
	
	color_uc33 = color_uc32;
	color_uc34 = color_uc33;
	while (color_uc34.x < C_10d0) {
		vec4 color_c71 = bigColor8 + color_uc34;
		bool H_ytqqfr1 = color_c71.z < d8;
		bool H_lu7upc1 = color_c71.w < d6;
		float H_bn2c7b = bigColor8.x + color_c71.y;
		vec4 H_iin6nc1 = color_c71;
		H_iin6nc1.y = H_bn2c7b;
		vec4 select_c72 = H_lu7upc1 ? color_c71 : H_iin6nc1;
		vec4 select_c73 = H_ytqqfr1 ? select_c72 : H_iin6nc1;
		color_uc34 = select_c73;
	}
	
	vec4 color_c74 = C_vec4p1d0p + color_uc34;
	gl_FragColor = color_c74;
	color_uc35 = color_c74;
	while (color_uc35.x < d14) {
		bool H_6axrgm1 = color_uc35.y < d15;
		if (H_6axrgm1) {
			return;
		}
		
		vec4 color_c75 = C_vec4p1d0p + color_uc35;
		color_uc35 = color_c75;
	}
	
	vec4 color_c76 = C_vec4p1d0p + color_uc35;
	color_uc36 = color_c76;
	while (color_uc36.w < d16) {
		float H_zu8gmf1 = C_1d0 + color_uc36.w;
		vec4 H_o8fw051 = color_uc36;
		H_o8fw051.w = H_zu8gmf1;
		color_uc36 = H_o8fw051;
	}
	
	color_uc37 = color_uc36;
	while (true) {
		bool notlhs_c77 = color_uc37.w >= d2;
		bool notrhs_c78 = color_uc37.y >= d3;
		bool H_uay5wm = notrhs_c78 || notlhs_c77;
		if (H_uay5wm) {
			color_uc38 = color_uc37;
			while (color_uc38.y >= d18) {
				color_c79 = C_vec4p1d0p + color_uc38;
				bool H_hoahck = color_c79.x >= d17;
				if (H_hoahck) {
					color_uc39 = color_c79;
					while (color_uc39.y < d16) {
						bool H_h1aocs = color_uc39.w < d16;
						if (H_h1aocs) {
							discard;
						}
						
						vec4 color_c80 = C_vec4p1d0p + color_uc39;
						color_uc39 = color_c80;
					}
					
					vec4 color_c81 = C_vec4p1d0p + color_uc39;
					gl_FragColor = color_c81;
					return;
				}
				
				color_uc38 = color_c79;
			}
			
			return;
		}
		
		vec4 color_c82 = bigColor1_2 + color_uc37;
		bool H_htk8ek1 = color_c82.z < d3;
		if (H_htk8ek1) {
			
		}
		
		color_uc37 = color_c82;
	}
	
}

#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float C_0d33 = 0.33;
const float C_0d66 = 0.66;
const vec4 C_vec4p0d66p = vec4(0.66);
const vec4 C_vec4p0d33p = vec4(0.33);
const float C_42d0 = 42.0;
const vec4 C_vec4p1d0p = vec4(1.0);
const int C_0 = 0;
vec4 color_c58;
const float C_20d0 = 20.0;
const float C_1d0 = 1.0;
const int C_41 = 41;
const int C_1 = 1;
vec4 select_c123;
vec4 select_c128;
float Lg_1;
const float C_0d0 = 0.0;
vec4 color_c139;
vec4 color_c144;
const float C_2d0 = 2.0;
vec4 color_c150;
const float C_5d0 = 5.0;
const float C_10d0 = 10.0;
vec4 color_c175;

void main()
{
	vec4 color_uc_c1;
	vec4 color_uc_c2;
	vec4 color_uc_c3;
	vec4 color_uc_c4;
	vec4 color_uc_c5;
	int i_uc_c6;
	vec4 color_uc_c7;
	vec4 color_uc_c8;
	int Lg_uc9;
	vec4 color_uc_c10;
	int Lg_uc11;
	vec4 color_uc_c12;
	int Lg_uc13;
	vec4 color_uc_c14;
	int Lg_uc15;
	vec4 color_uc_c16;
	vec4 color_uc_c17;
	vec4 color_uc_c18;
	vec4 color_uc_c19;
	vec4 color_uc_c20;
	vec4 color_uc_c21;
	vec4 color_uc_c22;
	vec4 color_uc_c23;
	vec4 color_uc_c24;
	vec4 color_uc_c25;
	vec4 color_uc_c26;
	vec4 color_uc_c27;
	vec4 color_uc_c28;
	vec4 color_uc_c29;
	vec4 color_uc_c30;
	vec4 color_uc_c31;
	vec4 color_uc_c32;
	vec4 color_uc_c33;
	vec4 color_uc_c34;
	vec4 color_uc_c35;
	vec4 color_uc_c36;
	vec4 color_uc_c37;
	vec4 color_uc_c38;
	vec4 color_uc_c39;
	bool H_bghf_c40 = BaseColor.x < C_0d33;
	bool H_uc41 = BaseColor.x < C_0d66;
	vec4 H_u43d6v = H_uc41 ? C_vec4p0d66p : C_vec4p0d33p;
	vec4 ternary_c42 = H_bghf_c40 ? C_vec4p0d33p : H_u43d6v;
	vec4 select_c43 = BaseColor + ternary_c42;
	color_uc_c1 = select_c43;
	while (color_uc_c1.x < d) {
		vec4 color_c44 = bigColor + color_uc_c1;
		color_uc_c1 = color_c44;
	}
	
	color_uc_c2 = color_uc_c1;
	while (color_uc_c2.z < d) {
		vec4 color_c45 = bigColor1_1 + color_uc_c2;
		bool H_uc46 = color_c45.w < d;
		vec4 color_c47 = bigColor1_1 + color_c45;
		vec4 select_c48 = H_uc46 ? color_c45 : color_c47;
		color_uc_c2 = select_c48;
	}
	
	color_uc_c3 = color_uc_c2;
	while (color_uc_c3.x < C_42d0) {
		vec4 color_c49 = color_uc_c3 + C_vec4p1d0p;
		color_uc_c3 = color_c49;
	}
	
	color_uc_c4 = color_uc_c3;
	while (true) {
		bool notlhs_c50 = color_uc_c4.w >= d2;
		bool notrhs_c51 = color_uc_c4.y >= d3;
		bool H_ovju_c52 = notrhs_c51 || notlhs_c50;
		if (H_ovju_c52) {
			break;
		}
		
		vec4 color_c53 = bigColor1_2 + color_uc_c4;
		color_uc_c4 = color_c53;
	}
	
	color_uc_c5 = color_uc_c4;
	while (color_uc_c5.z < d3) {
		vec4 color_c54 = bigColor1_3 + color_uc_c5;
		bool H_bexx_c55 = color_c54.y < d4;
		if (H_bexx_c55) {
			break;
		}
		
		vec4 color_c56 = bigColor1_3 + color_c54;
		color_uc_c5 = color_c56;
	}
	
	i_uc_c6 = C_0;
	color_uc_c7 = color_uc_c5;
	for (i_uc_c6 = 0; i_uc_c6 < Count; ++i_uc_c6) {
		vec4 color_c57 = bigColor2 + color_uc_c7;
		color_uc_c7 = color_c57;
	}
	
	color_uc_c8 = color_uc_c7;
	while (true) {
		color_c58 = bigColor3 + color_uc_c8;
		bool H_cs_c59 = color_c58.x < d2;
		if (! H_cs_c59) {
			break;
		}
		
		color_uc_c8 = color_c58;
	}
	
	float H_vyzw_c60 = color_c58.z + d3;
	float H_uc61 = H_vyzw_c60 + d3;
	float H_uc62 = H_uc61 + d3;
	float H_fwyio_c63 = H_uc62 + d3;
	float H_bzb_c64 = H_fwyio_c63 + d3;
	float H_iecv_c65 = H_bzb_c64 + d3;
	float H_ir_c66 = H_iecv_c65 + d3;
	float H_s_c67 = H_ir_c66 + d3;
	float H_gnb_c68 = H_s_c67 + d3;
	float H_uc69 = H_gnb_c68 + d3;
	float H_uc70 = H_uc69 + d3;
	float H_rg_c71 = H_uc70 + d3;
	float H_tsxxf_c72 = H_rg_c71 + d3;
	float H_fu_c73 = H_tsxxf_c72 + d3;
	float H_fx_c74 = H_fu_c73 + d3;
	float H_fyr_c75 = H_fx_c74 + d3;
	float H_v_c76 = H_fyr_c75 + d3;
	float H_r_c77 = H_v_c76 + d3;
	float H_p_c78 = H_r_c77 + d3;
	float H_uc79 = H_p_c78 + d3;
	float H_cf_c80 = H_uc79 + d3;
	float H_hu_c81 = H_cf_c80 + d3;
	float H_r_c82 = H_hu_c81 + d3;
	float H_cdqbxn_c83 = H_r_c82 + d3;
	float H_zylovr_c84 = H_cdqbxn_c83 + d3;
	float H_uc85 = H_zylovr_c84 + d3;
	float H_aylm_c86 = H_uc85 + d3;
	float H_ibo_c87 = H_aylm_c86 + d3;
	float H_a_c88 = H_ibo_c87 + d3;
	float H_gpgm_c89 = H_a_c88 + d3;
	float H_tayfmd_c90 = H_gpgm_c89 + d3;
	float H_uc91 = H_tayfmd_c90 + d3;
	float H_uc92 = H_uc91 + d3;
	float H_avyc_c93 = H_uc92 + d3;
	float H_ug_c94 = H_avyc_c93 + d3;
	float H_iv_c95 = H_ug_c94 + d3;
	float H_s_c96 = H_iv_c95 + d3;
	float H_me_c97 = H_s_c96 + d3;
	float H_h_c98 = H_me_c97 + d3;
	float H_jlpxbl_c99 = H_h_c98 + d3;
	float H_uc100 = H_jlpxbl_c99 + d3;
	float H_flcax_c101 = H_uc100 + d3;
	vec4 H_3pey2a = color_c58;
	H_3pey2a.z = H_flcax_c101;
	Lg_uc9 = C_0;
	color_uc_c10 = H_3pey2a;
	for ( ; Lg_uc9 != 100; ++Lg_uc9) {
		bool H_srs_c102 = color_uc_c10.z < C_20d0;
		float H_m_c103 = color_uc_c10.x + C_1d0;
		vec4 H_670lme = color_uc_c10;
		H_670lme.x = H_m_c103;
		float H_hzo_c104 = C_1d0 + color_uc_c10.y;
		vec4 H_670lmer = color_uc_c10;
		H_670lmer.y = H_hzo_c104;
		vec4 select_c105 = H_srs_c102 ? H_670lme : H_670lmer;
		color_uc_c10 = select_c105;
	}
	
	Lg_uc11 = C_0;
	color_uc_c12 = color_uc_c10;
	for ( ; Lg_uc11 != 120; ++Lg_uc11) {
		bool H_uc106 = color_uc_c12.z < C_20d0;
		float H_dlxvr_c107 = C_1d0 + color_uc_c12.x;
		vec4 H_8tsl2e = color_uc_c12;
		H_8tsl2e.x = H_dlxvr_c107;
		float H_ewbwh_c108 = C_1d0 + color_uc_c12.y;
		vec4 H_8tsl2er = color_uc_c12;
		H_8tsl2er.y = H_ewbwh_c108;
		vec4 select_c109 = H_uc106 ? H_8tsl2e : H_8tsl2er;
		color_uc_c12 = select_c109;
	}
	
	Lg_uc13 = C_0;
	color_uc_c14 = color_uc_c12;
	for ( ; Lg_uc13 != 42; ++Lg_uc13) {
		float H_uc110 = color_uc_c14.z + d3;
		bool H_c111 = color_uc_c14.x < d4;
		vec4 H_aflmid = color_uc_c14;
		H_aflmid.z = H_uc110;
		float H_uc112 = C_1d0 + color_uc_c14.w;
		vec4 H_aflmidr = color_uc_c14;
		H_aflmidr.zw = vec2(H_uc110, H_uc112);
		vec4 select_c113 = H_c111 ? H_aflmid : H_aflmidr;
		color_uc_c14 = select_c113;
	}
	
	Lg_uc15 = C_0;
	color_uc_c16 = color_uc_c14;
	while (Lg_uc15 <= C_41) {
		bool H_l_c114 = color_uc_c16.x < d4;
		if (H_l_c114) {
			break;
		}
		
		float H_uc115 = color_uc_c16.z + d3;
		float H_aiv_c116 = C_1d0 + color_uc_c16.w;
		vec4 H_c1enyc = color_uc_c16;
		H_c1enyc.zw = vec2(H_uc115, H_aiv_c116);
		int H_zk_c117 = Lg_uc15 + C_1;
		Lg_uc15 = H_zk_c117;
		color_uc_c16 = H_c1enyc;
	}
	
	color_uc_c17 = color_uc_c16;
	while (true) {
		vec4 color_c118 = bigColor4 + color_uc_c17;
		bool H_vkfixg_c119 = color_c118.x < d4;
		if (H_vkfixg_c119) {
			color_uc_c18 = color_c118;
		} else {
			bool H_us_c120 = color_c118.y < d4;
			float H_ttvxha_c121 = color_c118.y + d4;
			vec4 H_kjcljm = color_c118;
			H_kjcljm.y = H_ttvxha_c121;
			float H_uc122 = color_c118.x + d4;
			vec4 H_kjcljmr = color_c118;
			H_kjcljmr.x = H_uc122;
			select_c123 = H_us_c120 ? H_kjcljm : H_kjcljmr;
			bool H_erv_c124 = select_c123.z < d4;
			if (! H_erv_c124) {
				break;
			}
			
			color_uc_c18 = select_c123;
		}
		
		color_uc_c17 = color_uc_c18;
	}
	
	color_uc_c19 = select_c123;
	while (true) {
		vec4 color_c125 = bigColor5 + color_uc_c19;
		bool H_uc126 = color_c125.y < d5;
		float H_n_c127 = color_c125.y + d5;
		vec4 H_0r4h8l1 = color_c125;
		H_0r4h8l1.y = H_n_c127;
		select_c128 = H_uc126 ? H_0r4h8l1 : color_c125;
		bool H_gddgna_c129 = select_c128.x < d5;
		if (! H_gddgna_c129) {
			break;
		}
		
		color_uc_c19 = select_c128;
	}
	
	bool H_uc130 = select_c128.x < d6;
	if (H_uc130) {
		color_uc_c20 = select_c128;
		while (color_uc_c20.y < d6) {
			vec4 color_c131 = bigColor6 + color_uc_c20;
			color_uc_c20 = color_c131;
		}
		
		color_uc_c22 = color_uc_c20;
	} else {
		color_uc_c21 = select_c128;
		while (color_uc_c21.z < d6) {
			float H_uc132 = bigColor6.z + color_uc_c21.z;
			vec4 H_21k37c1 = color_uc_c21;
			H_21k37c1.z = H_uc132;
			color_uc_c21 = H_21k37c1;
		}
		
		color_uc_c22 = color_uc_c21;
	}
	
	bool H_uc133 = color_uc_c22.x < d6;
	if (H_uc133) {
		bool H_lmykhx_c134 = d7 < C_1d0;
		color_uc_c23 = color_uc_c22;
		while (color_uc_c23.y < d6) {
			if (H_lmykhx_c134) {
				break;
			}
			
			vec4 color_c135 = bigColor6 + color_uc_c23;
			color_uc_c23 = color_c135;
		}
		
		color_uc_c25 = color_uc_c23;
	} else {
		color_uc_c24 = color_uc_c22;
		while (color_uc_c24.z < d6) {
			float H_evc_c136 = bigColor6.z + color_uc_c24.z;
			vec4 H_xhk1ld1 = color_uc_c24;
			H_xhk1ld1.z = H_evc_c136;
			color_uc_c24 = H_xhk1ld1;
		}
		
		color_uc_c25 = color_uc_c24;
	}
	
	bool H_uc137 = d7 < C_0d0;
	bool H_lmykhx_c138 = d7 < C_1d0;
	color_uc_c26 = color_uc_c25;
	while (true) {
		if (H_uc137) {
			color_uc_c27 = color_uc_c26;
			break;
		}
		
		color_c139 = bigColor7 + color_uc_c26;
		if (H_lmykhx_c138) {
			float H_wpuavb_c140 = C_1d0 + color_c139.z;
			vec4 H_lcm7op1 = color_c139;
			H_lcm7op1.z = H_wpuavb_c140;
			color_uc_c27 = H_lcm7op1;
			break;
		}
		
		vec4 color_c141 = BaseColor + color_c139;
		color_uc_c26 = color_c141;
	}
	
	bool H_zt_c142 = d8 < C_0d0;
	bool H_cokhy_c143 = d8 < C_1d0;
	color_uc_c28 = color_uc_c27;
	while (true) {
		if (H_zt_c142) {
			color_uc_c29 = color_uc_c28;
			break;
		}
		
		color_c144 = bigColor7 + color_uc_c28;
		if (H_cokhy_c143) {
			float H_uc145 = C_1d0 + color_c144.z;
			bool H_hrxnuy_c146 = d8 < C_2d0;
			float H_uc147 = C_1d0 + color_c144.y;
			vec4 H_51j24n = color_c144;
			H_51j24n.yz = vec2(H_uc147, H_uc145);
			float H_uc148 = C_1d0 + color_c144.x;
			vec4 H_51j24nr = color_c144;
			H_51j24nr.xz = vec2(H_uc148, H_uc145);
			vec4 select_c149 = H_hrxnuy_c146 ? H_51j24n : H_51j24nr;
			color_uc_c29 = select_c149;
			break;
		}
		
		color_c150 = BaseColor + color_c144;
		bool H_vyol_c151 = color_c150.z < d8;
		if (! H_vyol_c151) {
			color_uc_c29 = color_c150;
			break;
		}
		
		color_uc_c28 = color_c150;
	}
	
	bool H_uc152 = d9 > d8;
	color_uc_c30 = color_uc_c29;
	while (color_uc_c30.w < d9) {
		color_uc_c32 = color_uc_c30;
		if (H_uc152) {
			bool H_qusc2o = color_uc_c30.x <= d7;
			color_uc_c31 = color_uc_c30;
			if (H_qusc2o) {
				bool H_fzxb861 = color_uc_c30.z != C_5d0;
				if (H_fzxb861) {
					break;
				}
				
				float H_z_c153 = C_1d0 + color_uc_c30.w;
				vec4 H_82e2ta1 = color_uc_c30;
				H_82e2ta1.w = H_z_c153;
				color_uc_c31 = H_82e2ta1;
			}
			
			color_uc_c32 = color_uc_c31;
		}
		
		color_uc_c30 = color_uc_c32;
	}
	
	color_uc_c33 = color_uc_c30;
	while (color_uc_c33.z < d10) {
		float H_uc154 = C_1d0 + color_uc_c33.y;
		vec4 H_5571nb1 = color_uc_c33;
		H_5571nb1.y = H_uc154;
		bool H_h047o1 = H_uc154 >= d11;
		if (H_h047o1) {
			break;
		}
		
		float H_uc155 = C_1d0 + color_uc_c33.z;
		bool H_c156 = color_uc_c33.w < d12;
		float H_b_c157 = C_1d0 + color_uc_c33.w;
		vec4 H_17cpp6 = H_5571nb1;
		H_17cpp6.zw = vec2(H_uc155, H_b_c157);
		float H_uc158 = C_1d0 + color_uc_c33.x;
		vec4 H_17cpp6r = H_5571nb1;
		H_17cpp6r.xz = vec2(H_uc158, H_uc155);
		vec4 select_c159 = H_c156 ? H_17cpp6 : H_17cpp6r;
		color_uc_c33 = select_c159;
	}
	
	color_uc_c34 = color_uc_c33;
	while (color_uc_c34.x < C_10d0) {
		vec4 color_c160 = bigColor8 + color_uc_c34;
		bool H_ytqqfr_c161 = color_c160.z < d8;
		bool H_lu_c162 = color_c160.w < d6;
		float H_bn_c163 = bigColor8.x + color_c160.y;
		vec4 H_n4h2kr = color_c160;
		H_n4h2kr.y = H_bn_c163;
		vec4 color_c164 = H_lu_c162 ? color_c160 : H_n4h2kr;
		vec4 ternary_c165 = H_ytqqfr_c161 ? color_c164 : H_n4h2kr;
		color_uc_c34 = ternary_c165;
	}
	
	vec4 color_c166 = C_vec4p1d0p + color_uc_c34;
	gl_FragColor = color_c166;
	color_uc_c35 = color_c166;
	while (color_uc_c35.x < d14) {
		bool H_uc167 = color_uc_c35.y < d15;
		if (H_uc167) {
			return;
		}
		
		vec4 color_c168 = C_vec4p1d0p + color_uc_c35;
		color_uc_c35 = color_c168;
	}
	
	vec4 color_c169 = C_vec4p1d0p + color_uc_c35;
	color_uc_c36 = color_c169;
	while (color_uc_c36.w < d16) {
		float H_zu_c170 = C_1d0 + color_uc_c36.w;
		vec4 H_2800hc1 = color_uc_c36;
		H_2800hc1.w = H_zu_c170;
		color_uc_c36 = H_2800hc1;
	}
	
	color_uc_c37 = color_uc_c36;
	while (true) {
		bool notlhs_c171 = color_uc_c37.w >= d2;
		bool notrhs_c172 = color_uc_c37.y >= d3;
		bool H_uay_c173 = notrhs_c172 || notlhs_c171;
		vec4 color_c174 = bigColor1_2 + color_uc_c37;
		color_uc_c37 = color_c174;
	}
	
	color_uc_c38 = color_uc_c37;
	while (color_uc_c38.y >= d18) {
		color_c175 = C_vec4p1d0p + color_uc_c38;
		bool H_hoahck_c176 = color_c175.x < d17;
		if (! H_hoahck_c176) {
			color_uc_c39 = color_c175;
			while (color_uc_c39.y < d16) {
				bool H_h_c177 = color_uc_c39.w < d16;
				if (H_h_c177) {
					discard;
				}
				
				vec4 color_c178 = C_vec4p1d0p + color_uc_c39;
				color_uc_c39 = color_c178;
			}
			
			vec4 color_c179 = C_vec4p1d0p + color_uc_c39;
			gl_FragColor = color_c179;
			return;
		}
		
		color_uc_c38 = color_c175;
	}
	
	
}

