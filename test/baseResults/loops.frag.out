
Top IR:
; ModuleID = 'Glslang'

@BaseColor_shadow = internal global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@FragColor_shadow = internal global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float
@d13 = external addrspace(2) constant float
@d19 = external addrspace(2) constant float
@d20 = external addrspace(2) constant float
@d21 = external addrspace(2) constant float
@d22 = external addrspace(2) constant float
@d23 = external addrspace(2) constant float
@d24 = external addrspace(2) constant float
@d25 = external addrspace(2) constant float
@d26 = external addrspace(2) constant float
@d27 = external addrspace(2) constant float
@d28 = external addrspace(2) constant float
@d29 = external addrspace(2) constant float
@d30 = external addrspace(2) constant float
@d31 = external addrspace(2) constant float
@d32 = external addrspace(2) constant float
@d33 = external addrspace(2) constant float
@d34 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %i122 = alloca i32
  %i108 = alloca i32
  %i95 = alloca i32
  %i79 = alloca i32
  %i70 = alloca i32
  %i = alloca i32
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor, <4 x float>* @BaseColor_shadow
  %color1 = load <4 x float>* @BaseColor_shadow
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %post-loop-break11, %entry
  br i1 false, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fcmp olt float %1, 0x3FD51EB860000000
  br i1 %2, label %then2, label %ifmerge5

then2:                                            ; preds = %ifmerge
  %3 = load <4 x float>* %color
  %color3 = fadd <4 x float> %3, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color3, <4 x float>* %color
  br label %loop-merge

post-loop-break4:                                 ; No predecessors!
  br label %ifmerge5

ifmerge5:                                         ; preds = %ifmerge, %post-loop-break4
  %4 = load <4 x float>* %color
  %5 = extractelement <4 x float> %4, i32 0
  %6 = fcmp olt float %5, 0x3FE51EB860000000
  br i1 %6, label %then6, label %ifmerge9

then6:                                            ; preds = %ifmerge5
  %7 = load <4 x float>* %color
  %color7 = fadd <4 x float> %7, <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>
  store <4 x float> %color7, <4 x float>* %color
  br label %loop-merge

post-loop-break8:                                 ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge5, %post-loop-break8
  %8 = load <4 x float>* %color
  %color10 = fadd <4 x float> %8, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color10, <4 x float>* %color
  br label %loop-merge

post-loop-break11:                                ; No predecessors!
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %ifmerge9, %then6, %then2, %then
  br label %loop-header12

loop-header12:                                    ; preds = %post-loop-continue17, %ifmerge15, %loop-merge
  %9 = load <4 x float>* %color
  %10 = extractelement <4 x float> %9, i32 0
  %11 = load float addrspace(2)* @d, !gla.uniform !3
  %12 = fcmp olt float %10, %11
  %13 = xor i1 %12, true
  br i1 %13, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  br label %loop-merge18

post-loop-break14:                                ; No predecessors!
  br label %ifmerge15

ifmerge15:                                        ; preds = %loop-header12, %post-loop-break14
  %14 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %15 = load <4 x float>* %color
  %color16 = fadd <4 x float> %15, %14
  store <4 x float> %color16, <4 x float>* %color
  br label %loop-header12

post-loop-continue17:                             ; No predecessors!
  br label %loop-header12

loop-merge18:                                     ; preds = %then13
  br label %loop-header19

loop-header19:                                    ; preds = %post-loop-continue28, %ifmerge26, %then24, %loop-merge18
  %16 = load <4 x float>* %color
  %17 = extractelement <4 x float> %16, i32 2
  %18 = load float addrspace(2)* @d, !gla.uniform !3
  %19 = fcmp olt float %17, %18
  %20 = xor i1 %19, true
  br i1 %20, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header19
  br label %loop-merge29

post-loop-break21:                                ; No predecessors!
  br label %ifmerge22

ifmerge22:                                        ; preds = %loop-header19, %post-loop-break21
  %21 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %22 = load <4 x float>* %color
  %color23 = fadd <4 x float> %22, %21
  store <4 x float> %color23, <4 x float>* %color
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(2)* @d, !gla.uniform !3
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then24, label %ifmerge26

then24:                                           ; preds = %ifmerge22
  br label %loop-header19

post-loop-continue25:                             ; No predecessors!
  br label %ifmerge26

ifmerge26:                                        ; preds = %ifmerge22, %post-loop-continue25
  %27 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %28 = load <4 x float>* %color
  %color27 = fadd <4 x float> %28, %27
  store <4 x float> %color27, <4 x float>* %color
  br label %loop-header19

post-loop-continue28:                             ; No predecessors!
  br label %loop-header19

loop-merge29:                                     ; preds = %then20
  br label %loop-header30

loop-header30:                                    ; preds = %post-loop-continue35, %ifmerge33, %loop-merge29
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 0
  %31 = fcmp olt float %30, 4.200000e+01
  %32 = xor i1 %31, true
  br i1 %32, label %then31, label %ifmerge33

then31:                                           ; preds = %loop-header30
  br label %loop-merge36

post-loop-break32:                                ; No predecessors!
  br label %ifmerge33

ifmerge33:                                        ; preds = %loop-header30, %post-loop-break32
  %33 = load <4 x float>* %color
  %color34 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color34, <4 x float>* %color
  br label %loop-header30

post-loop-continue35:                             ; No predecessors!
  br label %loop-header30

loop-merge36:                                     ; preds = %then31
  br label %loop-header37

loop-header37:                                    ; preds = %post-loop-continue42, %ifmerge40, %loop-merge36
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 3
  %36 = load float addrspace(2)* @d2, !gla.uniform !7
  %37 = fcmp olt float %35, %36
  %38 = load <4 x float>* %color
  %39 = extractelement <4 x float> %38, i32 1
  %40 = load float addrspace(2)* @d3, !gla.uniform !8
  %41 = fcmp olt float %39, %40
  %42 = and i1 %37, %41
  %43 = xor i1 %42, true
  br i1 %43, label %then38, label %ifmerge40

then38:                                           ; preds = %loop-header37
  br label %loop-merge43

post-loop-break39:                                ; No predecessors!
  br label %ifmerge40

ifmerge40:                                        ; preds = %loop-header37, %post-loop-break39
  %44 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %45 = load <4 x float>* %color
  %color41 = fadd <4 x float> %45, %44
  store <4 x float> %color41, <4 x float>* %color
  br label %loop-header37

post-loop-continue42:                             ; No predecessors!
  br label %loop-header37

loop-merge43:                                     ; preds = %then38
  br label %loop-header44

loop-header44:                                    ; preds = %post-loop-continue53, %ifmerge51, %loop-merge43
  %46 = load <4 x float>* %color
  %47 = extractelement <4 x float> %46, i32 2
  %48 = load float addrspace(2)* @d3, !gla.uniform !8
  %49 = fcmp olt float %47, %48
  %50 = xor i1 %49, true
  br i1 %50, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge54

post-loop-break46:                                ; No predecessors!
  br label %ifmerge47

ifmerge47:                                        ; preds = %loop-header44, %post-loop-break46
  %51 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %52 = load <4 x float>* %color
  %color48 = fadd <4 x float> %52, %51
  store <4 x float> %color48, <4 x float>* %color
  %53 = load <4 x float>* %color
  %54 = extractelement <4 x float> %53, i32 1
  %55 = load float addrspace(2)* @d4, !gla.uniform !11
  %56 = fcmp olt float %54, %55
  br i1 %56, label %then49, label %ifmerge51

then49:                                           ; preds = %ifmerge47
  br label %loop-merge54

post-loop-break50:                                ; No predecessors!
  br label %ifmerge51

ifmerge51:                                        ; preds = %ifmerge47, %post-loop-break50
  %57 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %58 = load <4 x float>* %color
  %color52 = fadd <4 x float> %58, %57
  store <4 x float> %color52, <4 x float>* %color
  br label %loop-header44

post-loop-continue53:                             ; No predecessors!
  br label %loop-header44

loop-merge54:                                     ; preds = %then49, %then45
  store i32 0, i32* %i
  br label %loop-header55

loop-header55:                                    ; preds = %post-loop-continue61, %ifmerge58, %loop-merge54
  %59 = load i32* %i
  %60 = load i32 addrspace(2)* @Count, !gla.uniform !12
  %61 = icmp slt i32 %59, %60
  %62 = xor i1 %61, true
  br i1 %62, label %then56, label %ifmerge58

then56:                                           ; preds = %loop-header55
  br label %loop-merge62

post-loop-break57:                                ; No predecessors!
  br label %ifmerge58

ifmerge58:                                        ; preds = %loop-header55, %post-loop-break57
  %63 = load <4 x float> addrspace(2)* @bigColor2, !gla.uniform !13
  %64 = load <4 x float>* %color
  %color59 = fadd <4 x float> %64, %63
  store <4 x float> %color59, <4 x float>* %color
  %65 = load i32* %i
  %i60 = add i32 %65, 1
  store i32 %i60, i32* %i
  br label %loop-header55

post-loop-continue61:                             ; No predecessors!
  br label %loop-header55

loop-merge62:                                     ; preds = %then56
  br label %loop-header63

loop-header63:                                    ; preds = %post-loop-continue68, %ifmerge67, %loop-merge62
  %66 = load <4 x float> addrspace(2)* @bigColor3, !gla.uniform !14
  %67 = load <4 x float>* %color
  %color64 = fadd <4 x float> %67, %66
  store <4 x float> %color64, <4 x float>* %color
  %68 = load <4 x float>* %color
  %69 = extractelement <4 x float> %68, i32 0
  %70 = load float addrspace(2)* @d2, !gla.uniform !7
  %71 = fcmp olt float %69, %70
  %72 = xor i1 %71, true
  br i1 %72, label %then65, label %ifmerge67

then65:                                           ; preds = %loop-header63
  br label %loop-merge69

post-loop-break66:                                ; No predecessors!
  br label %ifmerge67

ifmerge67:                                        ; preds = %loop-header63, %post-loop-break66
  br label %loop-header63

post-loop-continue68:                             ; No predecessors!
  br label %loop-header63

loop-merge69:                                     ; preds = %then65
  store i32 0, i32* %i70
  br label %loop-header71

loop-header71:                                    ; preds = %post-loop-continue77, %ifmerge74, %loop-merge69
  %73 = load i32* %i70
  %74 = icmp slt i32 %73, 42
  %75 = xor i1 %74, true
  br i1 %75, label %then72, label %ifmerge74

then72:                                           ; preds = %loop-header71
  br label %loop-merge78

post-loop-break73:                                ; No predecessors!
  br label %ifmerge74

ifmerge74:                                        ; preds = %loop-header71, %post-loop-break73
  %76 = load float addrspace(2)* @d3, !gla.uniform !8
  %77 = load <4 x float>* %color
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %76
  %80 = load <4 x float>* %color
  %color75 = insertelement <4 x float> %80, float %79, i32 2
  store <4 x float> %color75, <4 x float>* %color
  %81 = load i32* %i70
  %i7076 = add i32 %81, 1
  store i32 %i7076, i32* %i70
  br label %loop-header71

post-loop-continue77:                             ; No predecessors!
  br label %loop-header71

loop-merge78:                                     ; preds = %then72
  store i32 0, i32* %i79
  br label %loop-header80

loop-header80:                                    ; preds = %post-loop-continue93, %ifmerge91, %loop-merge78
  %82 = load i32* %i79
  %83 = icmp slt i32 %82, 100
  %84 = xor i1 %83, true
  br i1 %84, label %then81, label %ifmerge83

then81:                                           ; preds = %loop-header80
  br label %loop-merge94

post-loop-break82:                                ; No predecessors!
  br label %ifmerge83

ifmerge83:                                        ; preds = %loop-header80, %post-loop-break82
  %85 = load <4 x float>* %color
  %86 = extractelement <4 x float> %85, i32 2
  %87 = fcmp olt float %86, 2.000000e+01
  br i1 %87, label %then84, label %else

then84:                                           ; preds = %ifmerge83
  %88 = load <4 x float>* %color
  %89 = extractelement <4 x float> %88, i32 0
  %90 = fadd float %89, 1.000000e+00
  %91 = load <4 x float>* %color
  %color85 = insertelement <4 x float> %91, float %90, i32 0
  store <4 x float> %color85, <4 x float>* %color
  br label %ifmerge87

else:                                             ; preds = %ifmerge83
  %92 = load <4 x float>* %color
  %93 = extractelement <4 x float> %92, i32 1
  %94 = fadd float %93, 1.000000e+00
  %95 = load <4 x float>* %color
  %color86 = insertelement <4 x float> %95, float %94, i32 1
  store <4 x float> %color86, <4 x float>* %color
  br label %ifmerge87

ifmerge87:                                        ; preds = %else, %then84
  %96 = load <4 x float>* %color
  %97 = extractelement <4 x float> %96, i32 3
  %98 = fcmp olt float %97, 2.000000e+01
  br i1 %98, label %then88, label %ifmerge91

then88:                                           ; preds = %ifmerge87
  %99 = load <4 x float>* %color
  %100 = extractelement <4 x float> %99, i32 2
  %101 = load <4 x float>* %color
  %102 = extractelement <4 x float> %101, i32 1
  %103 = fcmp ogt float %100, %102
  br i1 %103, label %then89, label %ifmerge90

then89:                                           ; preds = %then88
  br label %ifmerge90

ifmerge90:                                        ; preds = %then88, %then89
  br label %ifmerge91

ifmerge91:                                        ; preds = %ifmerge87, %ifmerge90
  %104 = load i32* %i79
  %i7992 = add i32 %104, 1
  store i32 %i7992, i32* %i79
  br label %loop-header80

post-loop-continue93:                             ; No predecessors!
  br label %loop-header80

loop-merge94:                                     ; preds = %then81
  store i32 0, i32* %i95
  br label %loop-header96

loop-header96:                                    ; preds = %post-loop-continue106, %ifmerge104, %loop-merge94
  %105 = load i32* %i95
  %106 = icmp slt i32 %105, 120
  %107 = xor i1 %106, true
  br i1 %107, label %then97, label %ifmerge99

then97:                                           ; preds = %loop-header96
  br label %loop-merge107

post-loop-break98:                                ; No predecessors!
  br label %ifmerge99

ifmerge99:                                        ; preds = %loop-header96, %post-loop-break98
  %108 = load <4 x float>* %color
  %109 = extractelement <4 x float> %108, i32 2
  %110 = fcmp olt float %109, 2.000000e+01
  br i1 %110, label %then100, label %else102

then100:                                          ; preds = %ifmerge99
  %111 = load <4 x float>* %color
  %112 = extractelement <4 x float> %111, i32 0
  %113 = fadd float %112, 1.000000e+00
  %114 = load <4 x float>* %color
  %color101 = insertelement <4 x float> %114, float %113, i32 0
  store <4 x float> %color101, <4 x float>* %color
  br label %ifmerge104

else102:                                          ; preds = %ifmerge99
  %115 = load <4 x float>* %color
  %116 = extractelement <4 x float> %115, i32 1
  %117 = fadd float %116, 1.000000e+00
  %118 = load <4 x float>* %color
  %color103 = insertelement <4 x float> %118, float %117, i32 1
  store <4 x float> %color103, <4 x float>* %color
  br label %ifmerge104

ifmerge104:                                       ; preds = %else102, %then100
  %119 = load i32* %i95
  %i95105 = add i32 %119, 1
  store i32 %i95105, i32* %i95
  br label %loop-header96

post-loop-continue106:                            ; No predecessors!
  br label %loop-header96

loop-merge107:                                    ; preds = %then97
  store i32 0, i32* %i108
  br label %loop-header109

loop-header109:                                   ; preds = %post-loop-continue120, %ifmerge117, %then114, %loop-merge107
  %120 = load i32* %i108
  %121 = icmp slt i32 %120, 42
  %122 = xor i1 %121, true
  br i1 %122, label %then110, label %ifmerge112

then110:                                          ; preds = %loop-header109
  br label %loop-merge121

post-loop-break111:                               ; No predecessors!
  br label %ifmerge112

ifmerge112:                                       ; preds = %loop-header109, %post-loop-break111
  %123 = load float addrspace(2)* @d3, !gla.uniform !8
  %124 = load <4 x float>* %color
  %125 = extractelement <4 x float> %124, i32 2
  %126 = fadd float %125, %123
  %127 = load <4 x float>* %color
  %color113 = insertelement <4 x float> %127, float %126, i32 2
  store <4 x float> %color113, <4 x float>* %color
  %128 = load <4 x float>* %color
  %129 = extractelement <4 x float> %128, i32 0
  %130 = load float addrspace(2)* @d4, !gla.uniform !11
  %131 = fcmp olt float %129, %130
  br i1 %131, label %then114, label %ifmerge117

then114:                                          ; preds = %ifmerge112
  %132 = load i32* %i108
  %i108115 = add i32 %132, 1
  store i32 %i108115, i32* %i108
  br label %loop-header109

post-loop-continue116:                            ; No predecessors!
  br label %ifmerge117

ifmerge117:                                       ; preds = %ifmerge112, %post-loop-continue116
  %133 = load <4 x float>* %color
  %134 = extractelement <4 x float> %133, i32 3
  %135 = fadd float %134, 1.000000e+00
  %136 = load <4 x float>* %color
  %color118 = insertelement <4 x float> %136, float %135, i32 3
  store <4 x float> %color118, <4 x float>* %color
  %137 = load i32* %i108
  %i108119 = add i32 %137, 1
  store i32 %i108119, i32* %i108
  br label %loop-header109

post-loop-continue120:                            ; No predecessors!
  br label %loop-header109

loop-merge121:                                    ; preds = %then110
  store i32 0, i32* %i122
  br label %loop-header123

loop-header123:                                   ; preds = %post-loop-continue133, %ifmerge130, %loop-merge121
  %138 = load i32* %i122
  %139 = icmp slt i32 %138, 42
  %140 = xor i1 %139, true
  br i1 %140, label %then124, label %ifmerge126

then124:                                          ; preds = %loop-header123
  br label %loop-merge134

post-loop-break125:                               ; No predecessors!
  br label %ifmerge126

ifmerge126:                                       ; preds = %loop-header123, %post-loop-break125
  %141 = load float addrspace(2)* @d3, !gla.uniform !8
  %142 = load <4 x float>* %color
  %143 = extractelement <4 x float> %142, i32 2
  %144 = fadd float %143, %141
  %145 = load <4 x float>* %color
  %color127 = insertelement <4 x float> %145, float %144, i32 2
  store <4 x float> %color127, <4 x float>* %color
  %146 = load <4 x float>* %color
  %147 = extractelement <4 x float> %146, i32 0
  %148 = load float addrspace(2)* @d4, !gla.uniform !11
  %149 = fcmp olt float %147, %148
  br i1 %149, label %then128, label %ifmerge130

then128:                                          ; preds = %ifmerge126
  br label %loop-merge134

post-loop-break129:                               ; No predecessors!
  br label %ifmerge130

ifmerge130:                                       ; preds = %ifmerge126, %post-loop-break129
  %150 = load <4 x float>* %color
  %151 = extractelement <4 x float> %150, i32 3
  %152 = fadd float %151, 1.000000e+00
  %153 = load <4 x float>* %color
  %color131 = insertelement <4 x float> %153, float %152, i32 3
  store <4 x float> %color131, <4 x float>* %color
  %154 = load i32* %i122
  %i122132 = add i32 %154, 1
  store i32 %i122132, i32* %i122
  br label %loop-header123

post-loop-continue133:                            ; No predecessors!
  br label %loop-header123

loop-merge134:                                    ; preds = %then128, %then124
  br label %loop-header135

loop-header135:                                   ; preds = %post-loop-continue148, %ifmerge147, %then137, %loop-merge134
  %155 = load <4 x float> addrspace(2)* @bigColor4, !gla.uniform !15
  %156 = load <4 x float>* %color
  %color136 = fadd <4 x float> %156, %155
  store <4 x float> %color136, <4 x float>* %color
  %157 = load <4 x float>* %color
  %158 = extractelement <4 x float> %157, i32 0
  %159 = load float addrspace(2)* @d4, !gla.uniform !11
  %160 = fcmp olt float %158, %159
  br i1 %160, label %then137, label %ifmerge139

then137:                                          ; preds = %loop-header135
  br label %loop-header135

post-loop-continue138:                            ; No predecessors!
  br label %ifmerge139

ifmerge139:                                       ; preds = %loop-header135, %post-loop-continue138
  %161 = load <4 x float>* %color
  %162 = extractelement <4 x float> %161, i32 1
  %163 = load float addrspace(2)* @d4, !gla.uniform !11
  %164 = fcmp olt float %162, %163
  br i1 %164, label %then140, label %else142

then140:                                          ; preds = %ifmerge139
  %165 = load float addrspace(2)* @d4, !gla.uniform !11
  %166 = load <4 x float>* %color
  %167 = extractelement <4 x float> %166, i32 1
  %168 = fadd float %167, %165
  %169 = load <4 x float>* %color
  %color141 = insertelement <4 x float> %169, float %168, i32 1
  store <4 x float> %color141, <4 x float>* %color
  br label %ifmerge144

else142:                                          ; preds = %ifmerge139
  %170 = load float addrspace(2)* @d4, !gla.uniform !11
  %171 = load <4 x float>* %color
  %172 = extractelement <4 x float> %171, i32 0
  %173 = fadd float %172, %170
  %174 = load <4 x float>* %color
  %color143 = insertelement <4 x float> %174, float %173, i32 0
  store <4 x float> %color143, <4 x float>* %color
  br label %ifmerge144

ifmerge144:                                       ; preds = %else142, %then140
  %175 = load <4 x float>* %color
  %176 = extractelement <4 x float> %175, i32 2
  %177 = load float addrspace(2)* @d4, !gla.uniform !11
  %178 = fcmp olt float %176, %177
  %179 = xor i1 %178, true
  br i1 %179, label %then145, label %ifmerge147

then145:                                          ; preds = %ifmerge144
  br label %loop-merge149

post-loop-break146:                               ; No predecessors!
  br label %ifmerge147

ifmerge147:                                       ; preds = %ifmerge144, %post-loop-break146
  br label %loop-header135

post-loop-continue148:                            ; No predecessors!
  br label %loop-header135

loop-merge149:                                    ; preds = %then145
  br label %loop-header150

loop-header150:                                   ; preds = %post-loop-continue158, %ifmerge157, %loop-merge149
  %180 = load <4 x float> addrspace(2)* @bigColor5, !gla.uniform !16
  %181 = load <4 x float>* %color
  %color151 = fadd <4 x float> %181, %180
  store <4 x float> %color151, <4 x float>* %color
  %182 = load <4 x float>* %color
  %183 = extractelement <4 x float> %182, i32 1
  %184 = load float addrspace(2)* @d5, !gla.uniform !17
  %185 = fcmp olt float %183, %184
  br i1 %185, label %then152, label %ifmerge154

then152:                                          ; preds = %loop-header150
  %186 = load float addrspace(2)* @d5, !gla.uniform !17
  %187 = load <4 x float>* %color
  %188 = extractelement <4 x float> %187, i32 1
  %189 = fadd float %188, %186
  %190 = load <4 x float>* %color
  %color153 = insertelement <4 x float> %190, float %189, i32 1
  store <4 x float> %color153, <4 x float>* %color
  br label %ifmerge154

ifmerge154:                                       ; preds = %loop-header150, %then152
  %191 = load <4 x float>* %color
  %192 = extractelement <4 x float> %191, i32 0
  %193 = load float addrspace(2)* @d5, !gla.uniform !17
  %194 = fcmp olt float %192, %193
  %195 = xor i1 %194, true
  br i1 %195, label %then155, label %ifmerge157

then155:                                          ; preds = %ifmerge154
  br label %loop-merge159

post-loop-break156:                               ; No predecessors!
  br label %ifmerge157

ifmerge157:                                       ; preds = %ifmerge154, %post-loop-break156
  br label %loop-header150

post-loop-continue158:                            ; No predecessors!
  br label %loop-header150

loop-merge159:                                    ; preds = %then155
  %196 = load <4 x float>* %color
  %197 = extractelement <4 x float> %196, i32 0
  %198 = load float addrspace(2)* @d6, !gla.uniform !18
  %199 = fcmp olt float %197, %198
  br i1 %199, label %then160, label %else168

then160:                                          ; preds = %loop-merge159
  br label %loop-header161

loop-header161:                                   ; preds = %post-loop-continue166, %ifmerge164, %then160
  %200 = load <4 x float>* %color
  %201 = extractelement <4 x float> %200, i32 1
  %202 = load float addrspace(2)* @d6, !gla.uniform !18
  %203 = fcmp olt float %201, %202
  %204 = xor i1 %203, true
  br i1 %204, label %then162, label %ifmerge164

then162:                                          ; preds = %loop-header161
  br label %loop-merge167

post-loop-break163:                               ; No predecessors!
  br label %ifmerge164

ifmerge164:                                       ; preds = %loop-header161, %post-loop-break163
  %205 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %206 = load <4 x float>* %color
  %color165 = fadd <4 x float> %206, %205
  store <4 x float> %color165, <4 x float>* %color
  br label %loop-header161

post-loop-continue166:                            ; No predecessors!
  br label %loop-header161

loop-merge167:                                    ; preds = %then162
  br label %ifmerge176

else168:                                          ; preds = %loop-merge159
  br label %loop-header169

loop-header169:                                   ; preds = %post-loop-continue174, %ifmerge172, %else168
  %207 = load <4 x float>* %color
  %208 = extractelement <4 x float> %207, i32 2
  %209 = load float addrspace(2)* @d6, !gla.uniform !18
  %210 = fcmp olt float %208, %209
  %211 = xor i1 %210, true
  br i1 %211, label %then170, label %ifmerge172

then170:                                          ; preds = %loop-header169
  br label %loop-merge175

post-loop-break171:                               ; No predecessors!
  br label %ifmerge172

ifmerge172:                                       ; preds = %loop-header169, %post-loop-break171
  %212 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %213 = extractelement <4 x float> %212, i32 2
  %214 = load <4 x float>* %color
  %215 = extractelement <4 x float> %214, i32 2
  %216 = fadd float %215, %213
  %217 = load <4 x float>* %color
  %color173 = insertelement <4 x float> %217, float %216, i32 2
  store <4 x float> %color173, <4 x float>* %color
  br label %loop-header169

post-loop-continue174:                            ; No predecessors!
  br label %loop-header169

loop-merge175:                                    ; preds = %then170
  br label %ifmerge176

ifmerge176:                                       ; preds = %loop-merge175, %loop-merge167
  %218 = load <4 x float>* %color
  %219 = extractelement <4 x float> %218, i32 0
  %220 = load float addrspace(2)* @d6, !gla.uniform !18
  %221 = fcmp olt float %219, %220
  br i1 %221, label %then177, label %else188

then177:                                          ; preds = %ifmerge176
  br label %loop-header178

loop-header178:                                   ; preds = %post-loop-continue186, %ifmerge185, %then177
  %222 = load <4 x float>* %color
  %223 = extractelement <4 x float> %222, i32 1
  %224 = load float addrspace(2)* @d6, !gla.uniform !18
  %225 = fcmp olt float %223, %224
  %226 = xor i1 %225, true
  br i1 %226, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge187

post-loop-break180:                               ; No predecessors!
  br label %ifmerge181

ifmerge181:                                       ; preds = %loop-header178, %post-loop-break180
  %227 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %228 = load <4 x float>* %color
  %color182 = fadd <4 x float> %228, %227
  store <4 x float> %color182, <4 x float>* %color
  %229 = load float addrspace(2)* @d7, !gla.uniform !20
  %230 = fcmp olt float %229, 1.000000e+00
  br i1 %230, label %then183, label %ifmerge185

then183:                                          ; preds = %ifmerge181
  br label %loop-merge187

post-loop-break184:                               ; No predecessors!
  br label %ifmerge185

ifmerge185:                                       ; preds = %ifmerge181, %post-loop-break184
  br label %loop-header178

post-loop-continue186:                            ; No predecessors!
  br label %loop-header178

loop-merge187:                                    ; preds = %then183, %then179
  br label %ifmerge196

else188:                                          ; preds = %ifmerge176
  br label %loop-header189

loop-header189:                                   ; preds = %post-loop-continue194, %ifmerge192, %else188
  %231 = load <4 x float>* %color
  %232 = extractelement <4 x float> %231, i32 2
  %233 = load float addrspace(2)* @d6, !gla.uniform !18
  %234 = fcmp olt float %232, %233
  %235 = xor i1 %234, true
  br i1 %235, label %then190, label %ifmerge192

then190:                                          ; preds = %loop-header189
  br label %loop-merge195

post-loop-break191:                               ; No predecessors!
  br label %ifmerge192

ifmerge192:                                       ; preds = %loop-header189, %post-loop-break191
  %236 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %237 = extractelement <4 x float> %236, i32 2
  %238 = load <4 x float>* %color
  %239 = extractelement <4 x float> %238, i32 2
  %240 = fadd float %239, %237
  %241 = load <4 x float>* %color
  %color193 = insertelement <4 x float> %241, float %240, i32 2
  store <4 x float> %color193, <4 x float>* %color
  br label %loop-header189

post-loop-continue194:                            ; No predecessors!
  br label %loop-header189

loop-merge195:                                    ; preds = %then190
  br label %ifmerge196

ifmerge196:                                       ; preds = %loop-merge195, %loop-merge187
  br label %loop-header197

loop-header197:                                   ; preds = %post-loop-continue211, %ifmerge210, %ifmerge196
  %242 = load float addrspace(2)* @d7, !gla.uniform !20
  %243 = fcmp olt float %242, 0.000000e+00
  br i1 %243, label %then198, label %ifmerge200

then198:                                          ; preds = %loop-header197
  br label %loop-merge212

post-loop-break199:                               ; No predecessors!
  br label %ifmerge200

ifmerge200:                                       ; preds = %loop-header197, %post-loop-break199
  %244 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %245 = load <4 x float>* %color
  %color201 = fadd <4 x float> %245, %244
  store <4 x float> %color201, <4 x float>* %color
  %246 = load float addrspace(2)* @d7, !gla.uniform !20
  %247 = fcmp olt float %246, 1.000000e+00
  br i1 %247, label %then202, label %ifmerge205

then202:                                          ; preds = %ifmerge200
  %248 = load <4 x float>* %color
  %249 = extractelement <4 x float> %248, i32 2
  %250 = fadd float %249, 1.000000e+00
  %251 = load <4 x float>* %color
  %color203 = insertelement <4 x float> %251, float %250, i32 2
  store <4 x float> %color203, <4 x float>* %color
  br label %loop-merge212

post-loop-break204:                               ; No predecessors!
  br label %ifmerge205

ifmerge205:                                       ; preds = %ifmerge200, %post-loop-break204
  %BaseColor206 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor206, <4 x float>* @BaseColor_shadow
  %252 = load <4 x float>* @BaseColor_shadow
  %253 = load <4 x float>* %color
  %color207 = fadd <4 x float> %253, %252
  store <4 x float> %color207, <4 x float>* %color
  br i1 false, label %then208, label %ifmerge210

then208:                                          ; preds = %ifmerge205
  br label %loop-merge212

post-loop-break209:                               ; No predecessors!
  br label %ifmerge210

ifmerge210:                                       ; preds = %ifmerge205, %post-loop-break209
  br label %loop-header197

post-loop-continue211:                            ; No predecessors!
  br label %loop-header197

loop-merge212:                                    ; preds = %then208, %then202, %then198
  br label %loop-header213

loop-header213:                                   ; preds = %post-loop-continue232, %ifmerge231, %loop-merge212
  %254 = load float addrspace(2)* @d8, !gla.uniform !22
  %255 = fcmp olt float %254, 0.000000e+00
  br i1 %255, label %then214, label %ifmerge216

then214:                                          ; preds = %loop-header213
  br label %loop-merge233

post-loop-break215:                               ; No predecessors!
  br label %ifmerge216

ifmerge216:                                       ; preds = %loop-header213, %post-loop-break215
  %256 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %257 = load <4 x float>* %color
  %color217 = fadd <4 x float> %257, %256
  store <4 x float> %color217, <4 x float>* %color
  %258 = load float addrspace(2)* @d8, !gla.uniform !22
  %259 = fcmp olt float %258, 1.000000e+00
  br i1 %259, label %then218, label %ifmerge226

then218:                                          ; preds = %ifmerge216
  %260 = load <4 x float>* %color
  %261 = extractelement <4 x float> %260, i32 2
  %262 = fadd float %261, 1.000000e+00
  %263 = load <4 x float>* %color
  %color219 = insertelement <4 x float> %263, float %262, i32 2
  store <4 x float> %color219, <4 x float>* %color
  %264 = load float addrspace(2)* @d8, !gla.uniform !22
  %265 = fcmp olt float %264, 2.000000e+00
  br i1 %265, label %then220, label %else222

then220:                                          ; preds = %then218
  %266 = load <4 x float>* %color
  %267 = extractelement <4 x float> %266, i32 1
  %268 = fadd float %267, 1.000000e+00
  %269 = load <4 x float>* %color
  %color221 = insertelement <4 x float> %269, float %268, i32 1
  store <4 x float> %color221, <4 x float>* %color
  br label %ifmerge224

else222:                                          ; preds = %then218
  %270 = load <4 x float>* %color
  %271 = extractelement <4 x float> %270, i32 0
  %272 = fadd float %271, 1.000000e+00
  %273 = load <4 x float>* %color
  %color223 = insertelement <4 x float> %273, float %272, i32 0
  store <4 x float> %color223, <4 x float>* %color
  br label %ifmerge224

ifmerge224:                                       ; preds = %else222, %then220
  br label %loop-merge233

post-loop-break225:                               ; No predecessors!
  br label %ifmerge226

ifmerge226:                                       ; preds = %ifmerge216, %post-loop-break225
  %BaseColor227 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor227, <4 x float>* @BaseColor_shadow
  %274 = load <4 x float>* @BaseColor_shadow
  %275 = load <4 x float>* %color
  %color228 = fadd <4 x float> %275, %274
  store <4 x float> %color228, <4 x float>* %color
  %276 = load <4 x float>* %color
  %277 = extractelement <4 x float> %276, i32 2
  %278 = load float addrspace(2)* @d8, !gla.uniform !22
  %279 = fcmp olt float %277, %278
  %280 = xor i1 %279, true
  br i1 %280, label %then229, label %ifmerge231

then229:                                          ; preds = %ifmerge226
  br label %loop-merge233

post-loop-break230:                               ; No predecessors!
  br label %ifmerge231

ifmerge231:                                       ; preds = %ifmerge226, %post-loop-break230
  br label %loop-header213

post-loop-continue232:                            ; No predecessors!
  br label %loop-header213

loop-merge233:                                    ; preds = %then229, %ifmerge224, %then214
  br label %loop-header234

loop-header234:                                   ; preds = %post-loop-continue247, %ifmerge246, %loop-merge233
  %281 = load <4 x float>* %color
  %282 = extractelement <4 x float> %281, i32 3
  %283 = load float addrspace(2)* @d9, !gla.uniform !23
  %284 = fcmp olt float %282, %283
  %285 = xor i1 %284, true
  br i1 %285, label %then235, label %ifmerge237

then235:                                          ; preds = %loop-header234
  br label %loop-merge248

post-loop-break236:                               ; No predecessors!
  br label %ifmerge237

ifmerge237:                                       ; preds = %loop-header234, %post-loop-break236
  %286 = load float addrspace(2)* @d9, !gla.uniform !23
  %287 = load float addrspace(2)* @d8, !gla.uniform !22
  %288 = fcmp ogt float %286, %287
  br i1 %288, label %then238, label %ifmerge246

then238:                                          ; preds = %ifmerge237
  %289 = load <4 x float>* %color
  %290 = extractelement <4 x float> %289, i32 0
  %291 = load float addrspace(2)* @d7, !gla.uniform !20
  %292 = fcmp ole float %290, %291
  br i1 %292, label %then239, label %ifmerge245

then239:                                          ; preds = %then238
  %293 = load <4 x float>* %color
  %294 = extractelement <4 x float> %293, i32 2
  %295 = fcmp oeq float %294, 5.000000e+00
  br i1 %295, label %then240, label %else242

then240:                                          ; preds = %then239
  %296 = load <4 x float>* %color
  %297 = extractelement <4 x float> %296, i32 3
  %298 = fadd float %297, 1.000000e+00
  %299 = load <4 x float>* %color
  %color241 = insertelement <4 x float> %299, float %298, i32 3
  store <4 x float> %color241, <4 x float>* %color
  br label %ifmerge244

else242:                                          ; preds = %then239
  br label %loop-merge248

post-loop-break243:                               ; No predecessors!
  br label %ifmerge244

ifmerge244:                                       ; preds = %post-loop-break243, %then240
  br label %ifmerge245

ifmerge245:                                       ; preds = %then238, %ifmerge244
  br label %ifmerge246

ifmerge246:                                       ; preds = %ifmerge237, %ifmerge245
  br label %loop-header234

post-loop-continue247:                            ; No predecessors!
  br label %loop-header234

loop-merge248:                                    ; preds = %else242, %then235
  br label %loop-header249

loop-header249:                                   ; preds = %post-loop-continue265, %post-loop-break264, %ifmerge260, %loop-merge248
  %300 = load <4 x float>* %color
  %301 = extractelement <4 x float> %300, i32 2
  %302 = load float addrspace(2)* @d10, !gla.uniform !24
  %303 = fcmp olt float %301, %302
  %304 = xor i1 %303, true
  br i1 %304, label %then250, label %ifmerge252

then250:                                          ; preds = %loop-header249
  br label %loop-merge266

post-loop-break251:                               ; No predecessors!
  br label %ifmerge252

ifmerge252:                                       ; preds = %loop-header249, %post-loop-break251
  %305 = load <4 x float>* %color
  %306 = extractelement <4 x float> %305, i32 1
  %307 = fadd float %306, 1.000000e+00
  %308 = load <4 x float>* %color
  %color253 = insertelement <4 x float> %308, float %307, i32 1
  store <4 x float> %color253, <4 x float>* %color
  %309 = load <4 x float>* %color
  %310 = extractelement <4 x float> %309, i32 1
  %311 = load float addrspace(2)* @d11, !gla.uniform !25
  %312 = fcmp olt float %310, %311
  br i1 %312, label %then254, label %ifmerge262

then254:                                          ; preds = %ifmerge252
  %313 = load <4 x float>* %color
  %314 = extractelement <4 x float> %313, i32 2
  %315 = fadd float %314, 1.000000e+00
  %316 = load <4 x float>* %color
  %color255 = insertelement <4 x float> %316, float %315, i32 2
  store <4 x float> %color255, <4 x float>* %color
  %317 = load <4 x float>* %color
  %318 = extractelement <4 x float> %317, i32 3
  %319 = load float addrspace(2)* @d12, !gla.uniform !26
  %320 = fcmp olt float %318, %319
  br i1 %320, label %then256, label %else258

then256:                                          ; preds = %then254
  %321 = load <4 x float>* %color
  %322 = extractelement <4 x float> %321, i32 3
  %323 = fadd float %322, 1.000000e+00
  %324 = load <4 x float>* %color
  %color257 = insertelement <4 x float> %324, float %323, i32 3
  store <4 x float> %color257, <4 x float>* %color
  br label %ifmerge260

else258:                                          ; preds = %then254
  %325 = load <4 x float>* %color
  %326 = extractelement <4 x float> %325, i32 0
  %327 = fadd float %326, 1.000000e+00
  %328 = load <4 x float>* %color
  %color259 = insertelement <4 x float> %328, float %327, i32 0
  store <4 x float> %color259, <4 x float>* %color
  br label %ifmerge260

ifmerge260:                                       ; preds = %else258, %then256
  br label %loop-header249

post-loop-continue261:                            ; No predecessors!
  br label %ifmerge262

ifmerge262:                                       ; preds = %ifmerge252, %post-loop-continue261
  %329 = load <4 x float>* %color
  %color263 = fadd <4 x float> %329, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color263, <4 x float>* %color
  br label %loop-merge266

post-loop-break264:                               ; No predecessors!
  br label %loop-header249

post-loop-continue265:                            ; No predecessors!
  br label %loop-header249

loop-merge266:                                    ; preds = %ifmerge262, %then250
  br label %loop-header267

loop-header267:                                   ; preds = %post-loop-continue278, %ifmerge276, %then273, %loop-merge266
  %330 = load <4 x float>* %color
  %331 = extractelement <4 x float> %330, i32 0
  %332 = fcmp olt float %331, 1.000000e+01
  %333 = xor i1 %332, true
  br i1 %333, label %then268, label %ifmerge270

then268:                                          ; preds = %loop-header267
  br label %loop-merge279

post-loop-break269:                               ; No predecessors!
  br label %ifmerge270

ifmerge270:                                       ; preds = %loop-header267, %post-loop-break269
  %334 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %335 = load <4 x float>* %color
  %color271 = fadd <4 x float> %335, %334
  store <4 x float> %color271, <4 x float>* %color
  %336 = load <4 x float>* %color
  %337 = extractelement <4 x float> %336, i32 2
  %338 = load float addrspace(2)* @d8, !gla.uniform !22
  %339 = fcmp olt float %337, %338
  br i1 %339, label %then272, label %ifmerge276

then272:                                          ; preds = %ifmerge270
  %340 = load <4 x float>* %color
  %341 = extractelement <4 x float> %340, i32 3
  %342 = load float addrspace(2)* @d6, !gla.uniform !18
  %343 = fcmp olt float %341, %342
  br i1 %343, label %then273, label %ifmerge275

then273:                                          ; preds = %then272
  br label %loop-header267

post-loop-continue274:                            ; No predecessors!
  br label %ifmerge275

ifmerge275:                                       ; preds = %then272, %post-loop-continue274
  br label %ifmerge276

ifmerge276:                                       ; preds = %ifmerge270, %ifmerge275
  %344 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %345 = extractelement <4 x float> %344, i32 0
  %346 = load <4 x float>* %color
  %347 = extractelement <4 x float> %346, i32 1
  %348 = fadd float %347, %345
  %349 = load <4 x float>* %color
  %color277 = insertelement <4 x float> %349, float %348, i32 1
  store <4 x float> %color277, <4 x float>* %color
  br label %loop-header267

post-loop-continue278:                            ; No predecessors!
  br label %loop-header267

loop-merge279:                                    ; preds = %then268
  %350 = load <4 x float>* %color
  %color280 = fadd <4 x float> %350, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color280, <4 x float>* %color
  %FragColor_shadow = load <4 x float>* %color
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %loop-header281

loop-header281:                                   ; preds = %post-loop-continue289, %ifmerge288, %loop-merge279
  %351 = load <4 x float>* %color
  %352 = extractelement <4 x float> %351, i32 0
  %353 = load float addrspace(2)* @d14, !gla.uniform !28
  %354 = fcmp olt float %352, %353
  %355 = xor i1 %354, true
  br i1 %355, label %then282, label %ifmerge284

then282:                                          ; preds = %loop-header281
  br label %loop-merge290

post-loop-break283:                               ; No predecessors!
  br label %ifmerge284

ifmerge284:                                       ; preds = %loop-header281, %post-loop-break283
  %356 = load <4 x float>* %color
  %357 = extractelement <4 x float> %356, i32 1
  %358 = load float addrspace(2)* @d15, !gla.uniform !29
  %359 = fcmp olt float %357, %358
  br i1 %359, label %then285, label %else286

then285:                                          ; preds = %ifmerge284
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge288

else286:                                          ; preds = %ifmerge284
  %360 = load <4 x float>* %color
  %color287 = fadd <4 x float> %360, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color287, <4 x float>* %color
  br label %ifmerge288

ifmerge288:                                       ; preds = %else286, %post-return
  br label %loop-header281

post-loop-continue289:                            ; No predecessors!
  br label %loop-header281

loop-merge290:                                    ; preds = %then282
  %361 = load <4 x float>* %color
  %color291 = fadd <4 x float> %361, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color291, <4 x float>* %color
  br label %loop-header292

loop-header292:                                   ; preds = %post-loop-continue297, %ifmerge295, %loop-merge290
  %362 = load <4 x float>* %color
  %363 = extractelement <4 x float> %362, i32 3
  %364 = load float addrspace(2)* @d16, !gla.uniform !30
  %365 = fcmp olt float %363, %364
  %366 = xor i1 %365, true
  br i1 %366, label %then293, label %ifmerge295

then293:                                          ; preds = %loop-header292
  br label %loop-merge298

post-loop-break294:                               ; No predecessors!
  br label %ifmerge295

ifmerge295:                                       ; preds = %loop-header292, %post-loop-break294
  %367 = load <4 x float>* %color
  %368 = extractelement <4 x float> %367, i32 3
  %369 = fadd float %368, 1.000000e+00
  %370 = load <4 x float>* %color
  %color296 = insertelement <4 x float> %370, float %369, i32 3
  store <4 x float> %color296, <4 x float>* %color
  br label %loop-header292

post-loop-continue297:                            ; No predecessors!
  br label %loop-header292

loop-merge298:                                    ; preds = %then293
  br label %loop-header299

loop-header299:                                   ; preds = %post-loop-continue307, %ifmerge306, %loop-merge298
  %371 = load <4 x float>* %color
  %372 = extractelement <4 x float> %371, i32 3
  %373 = load float addrspace(2)* @d2, !gla.uniform !7
  %374 = fcmp olt float %372, %373
  %375 = load <4 x float>* %color
  %376 = extractelement <4 x float> %375, i32 1
  %377 = load float addrspace(2)* @d3, !gla.uniform !8
  %378 = fcmp olt float %376, %377
  %379 = and i1 %374, %378
  %380 = xor i1 %379, true
  br i1 %380, label %then300, label %ifmerge302

then300:                                          ; preds = %loop-header299
  br label %loop-merge308

post-loop-break301:                               ; No predecessors!
  br label %ifmerge302

ifmerge302:                                       ; preds = %loop-header299, %post-loop-break301
  %381 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %382 = load <4 x float>* %color
  %color303 = fadd <4 x float> %382, %381
  store <4 x float> %color303, <4 x float>* %color
  %383 = load <4 x float>* %color
  %384 = extractelement <4 x float> %383, i32 2
  %385 = load float addrspace(2)* @d3, !gla.uniform !8
  %386 = fcmp olt float %384, %385
  br i1 %386, label %then304, label %ifmerge306

then304:                                          ; preds = %ifmerge302
  br label %stage-epilogue

post-return305:                                   ; No predecessors!
  br label %ifmerge306

ifmerge306:                                       ; preds = %ifmerge302, %post-return305
  br label %loop-header299

post-loop-continue307:                            ; No predecessors!
  br label %loop-header299

loop-merge308:                                    ; preds = %then300
  br label %loop-header309

loop-header309:                                   ; preds = %post-loop-continue317, %ifmerge316, %loop-merge308
  %387 = load <4 x float>* %color
  %388 = extractelement <4 x float> %387, i32 1
  %389 = load float addrspace(2)* @d18, !gla.uniform !31
  %390 = fcmp olt float %388, %389
  br i1 %390, label %then310, label %ifmerge312

then310:                                          ; preds = %loop-header309
  br label %stage-epilogue

post-return311:                                   ; No predecessors!
  br label %ifmerge312

ifmerge312:                                       ; preds = %loop-header309, %post-return311
  %391 = load <4 x float>* %color
  %color313 = fadd <4 x float> %391, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color313, <4 x float>* %color
  %392 = load <4 x float>* %color
  %393 = extractelement <4 x float> %392, i32 0
  %394 = load float addrspace(2)* @d17, !gla.uniform !32
  %395 = fcmp olt float %393, %394
  %396 = xor i1 %395, true
  br i1 %396, label %then314, label %ifmerge316

then314:                                          ; preds = %ifmerge312
  br label %loop-merge318

post-loop-break315:                               ; No predecessors!
  br label %ifmerge316

ifmerge316:                                       ; preds = %ifmerge312, %post-loop-break315
  br label %loop-header309

post-loop-continue317:                            ; No predecessors!
  br label %loop-header309

loop-merge318:                                    ; preds = %then314
  br label %loop-header319

loop-header319:                                   ; preds = %post-loop-continue327, %ifmerge326, %loop-merge318
  %397 = load <4 x float>* %color
  %398 = extractelement <4 x float> %397, i32 1
  %399 = load float addrspace(2)* @d16, !gla.uniform !30
  %400 = fcmp olt float %398, %399
  %401 = xor i1 %400, true
  br i1 %401, label %then320, label %ifmerge322

then320:                                          ; preds = %loop-header319
  br label %loop-merge328

post-loop-break321:                               ; No predecessors!
  br label %ifmerge322

ifmerge322:                                       ; preds = %loop-header319, %post-loop-break321
  %402 = load <4 x float>* %color
  %403 = extractelement <4 x float> %402, i32 3
  %404 = load float addrspace(2)* @d16, !gla.uniform !30
  %405 = fcmp olt float %403, %404
  br i1 %405, label %then323, label %else324

then323:                                          ; preds = %ifmerge322
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge326

else324:                                          ; preds = %ifmerge322
  %406 = load <4 x float>* %color
  %color325 = fadd <4 x float> %406, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color325, <4 x float>* %color
  br label %ifmerge326

ifmerge326:                                       ; preds = %else324, %post-discard
  br label %loop-header319

post-loop-continue327:                            ; No predecessors!
  br label %loop-header319

loop-merge328:                                    ; preds = %then320
  %407 = load <4 x float>* %color
  %color329 = fadd <4 x float> %407, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color329, <4 x float>* %color
  %FragColor_shadow330 = load <4 x float>* %color
  store <4 x float> %FragColor_shadow330, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge328, %then310, %then304, %then285
  %408 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %408), !gla.output !50
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then323
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.discard() #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  %0 = extractelement <4 x float> %BaseColor, i32 0
  %1 = fcmp olt float %0, 0x3FD51EB860000000
  %2 = fcmp olt float %0, 0x3FE51EB860000000
  %select338.v = select i1 %2, <4 x float> <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  %select345.v = select i1 %1, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>, <4 x float> %select338.v
  %select345 = fadd <4 x float> %BaseColor, %select345.v
  %.pre = load float addrspace(2)* @d, align 4, !gla.uniform !3
  %3 = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !5
  br label %loop-header12

loop-header12:                                    ; preds = %ifmerge15, %entry
  %color.1 = phi <4 x float> [ %select345, %entry ], [ %color16, %ifmerge15 ]
  %4 = extractelement <4 x float> %color.1, i32 0
  %5 = fcmp uge float %4, %.pre
  br i1 %5, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  %6 = load <4 x float> addrspace(2)* @bigColor1_1, align 16, !gla.uniform !6
  br label %loop-header19

ifmerge15:                                        ; preds = %loop-header12
  %color16 = fadd <4 x float> %color.1, %3
  br label %loop-header12

loop-header19:                                    ; preds = %ifmerge22, %then13
  %color.2 = phi <4 x float> [ %color.1, %then13 ], [ %select335, %ifmerge22 ]
  %7 = extractelement <4 x float> %color.2, i32 2
  %8 = fcmp uge float %7, %.pre
  br i1 %8, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header19
  br label %loop-header30

ifmerge22:                                        ; preds = %loop-header19
  %color23 = fadd <4 x float> %color.2, %6
  %9 = extractelement <4 x float> %color23, i32 3
  %10 = fcmp olt float %9, %.pre
  %color27 = fadd <4 x float> %6, %color23
  %select335 = select i1 %10, <4 x float> %color23, <4 x float> %color27
  br label %loop-header19

loop-header30:                                    ; preds = %ifmerge33, %then20
  %color.3 = phi <4 x float> [ %color.2, %then20 ], [ %color34, %ifmerge33 ]
  %11 = extractelement <4 x float> %color.3, i32 0
  %12 = fcmp uge float %11, 4.200000e+01
  br i1 %12, label %then31, label %ifmerge33

then31:                                           ; preds = %loop-header30
  %.pre346 = load float addrspace(2)* @d2, align 4, !gla.uniform !7
  %.pre347 = load float addrspace(2)* @d3, align 4, !gla.uniform !8
  %13 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header37

ifmerge33:                                        ; preds = %loop-header30
  %color34 = fadd <4 x float> %color.3, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header30

loop-header37:                                    ; preds = %ifmerge40, %then31
  %color.4 = phi <4 x float> [ %color.3, %then31 ], [ %color41, %ifmerge40 ]
  %14 = extractelement <4 x float> %color.4, i32 3
  %15 = extractelement <4 x float> %color.4, i32 1
  %notlhs = fcmp uge float %14, %.pre346
  %notrhs = fcmp uge float %15, %.pre347
  %16 = or i1 %notrhs, %notlhs
  br i1 %16, label %then38, label %ifmerge40

then38:                                           ; preds = %loop-header37
  %17 = load <4 x float> addrspace(2)* @bigColor1_3, align 16, !gla.uniform !10
  %18 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header44

ifmerge40:                                        ; preds = %loop-header37
  %color41 = fadd <4 x float> %color.4, %13
  br label %loop-header37

loop-header44:                                    ; preds = %ifmerge51, %then38
  %color.5 = phi <4 x float> [ %color.4, %then38 ], [ %color52, %ifmerge51 ]
  %19 = extractelement <4 x float> %color.5, i32 2
  %20 = fcmp uge float %19, %.pre347
  br i1 %20, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge54

ifmerge47:                                        ; preds = %loop-header44
  %color48 = fadd <4 x float> %color.5, %17
  %21 = extractelement <4 x float> %color48, i32 1
  %22 = fcmp olt float %21, %18
  br i1 %22, label %then49, label %ifmerge51

then49:                                           ; preds = %ifmerge47
  br label %loop-merge54

ifmerge51:                                        ; preds = %ifmerge47
  %color52 = fadd <4 x float> %17, %color48
  br label %loop-header44

loop-merge54:                                     ; preds = %then49, %then45
  %color.6 = phi <4 x float> [ %color.5, %then45 ], [ %color48, %then49 ]
  %.pre348 = load i32 addrspace(2)* @Count, align 4, !gla.uniform !12
  %23 = load <4 x float> addrspace(2)* @bigColor2, align 16, !gla.uniform !13
  br label %loop-header55

loop-header55:                                    ; preds = %ifmerge58, %loop-merge54
  %color.7 = phi <4 x float> [ %color.6, %loop-merge54 ], [ %color59, %ifmerge58 ]
  %i.0 = phi i32 [ 0, %loop-merge54 ], [ %i60, %ifmerge58 ]
  %24 = icmp slt i32 %i.0, %.pre348
  br i1 %24, label %ifmerge58, label %then56

then56:                                           ; preds = %loop-header55
  %.pre349 = load <4 x float> addrspace(2)* @bigColor3, align 16, !gla.uniform !14
  br label %loop-header63

ifmerge58:                                        ; preds = %loop-header55
  %color59 = fadd <4 x float> %color.7, %23
  %i60 = add i32 %i.0, 1
  br label %loop-header55

loop-header63:                                    ; preds = %loop-header63, %then56
  %color.8 = phi <4 x float> [ %color.7, %then56 ], [ %color64, %loop-header63 ]
  %color64 = fadd <4 x float> %color.8, %.pre349
  %25 = extractelement <4 x float> %color64, i32 0
  %26 = fcmp uge float %25, %.pre346
  br i1 %26, label %then65, label %loop-header63

then65:                                           ; preds = %loop-header63
  %27 = extractelement <4 x float> %color64, i32 2
  %28 = fadd float %27, %.pre347
  %29 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color64, i32 4, float undef, i32 undef, float undef, i32 undef, float %28, i32 0, float undef, i32 undef)
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fadd float %30, %.pre347
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %29, i32 4, float undef, i32 undef, float undef, i32 undef, float %31, i32 0, float undef, i32 undef)
  %33 = extractelement <4 x float> %32, i32 2
  %34 = fadd float %33, %.pre347
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %32, i32 4, float undef, i32 undef, float undef, i32 undef, float %34, i32 0, float undef, i32 undef)
  %36 = extractelement <4 x float> %35, i32 2
  %37 = fadd float %36, %.pre347
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %35, i32 4, float undef, i32 undef, float undef, i32 undef, float %37, i32 0, float undef, i32 undef)
  %39 = extractelement <4 x float> %38, i32 2
  %40 = fadd float %39, %.pre347
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %38, i32 4, float undef, i32 undef, float undef, i32 undef, float %40, i32 0, float undef, i32 undef)
  %42 = extractelement <4 x float> %41, i32 2
  %43 = fadd float %42, %.pre347
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %41, i32 4, float undef, i32 undef, float undef, i32 undef, float %43, i32 0, float undef, i32 undef)
  %45 = extractelement <4 x float> %44, i32 2
  %46 = fadd float %45, %.pre347
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %44, i32 4, float undef, i32 undef, float undef, i32 undef, float %46, i32 0, float undef, i32 undef)
  %48 = extractelement <4 x float> %47, i32 2
  %49 = fadd float %48, %.pre347
  %50 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %47, i32 4, float undef, i32 undef, float undef, i32 undef, float %49, i32 0, float undef, i32 undef)
  %51 = extractelement <4 x float> %50, i32 2
  %52 = fadd float %51, %.pre347
  %53 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %50, i32 4, float undef, i32 undef, float undef, i32 undef, float %52, i32 0, float undef, i32 undef)
  %54 = extractelement <4 x float> %53, i32 2
  %55 = fadd float %54, %.pre347
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %53, i32 4, float undef, i32 undef, float undef, i32 undef, float %55, i32 0, float undef, i32 undef)
  %57 = extractelement <4 x float> %56, i32 2
  %58 = fadd float %57, %.pre347
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %56, i32 4, float undef, i32 undef, float undef, i32 undef, float %58, i32 0, float undef, i32 undef)
  %60 = extractelement <4 x float> %59, i32 2
  %61 = fadd float %60, %.pre347
  %62 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %59, i32 4, float undef, i32 undef, float undef, i32 undef, float %61, i32 0, float undef, i32 undef)
  %63 = extractelement <4 x float> %62, i32 2
  %64 = fadd float %63, %.pre347
  %65 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %62, i32 4, float undef, i32 undef, float undef, i32 undef, float %64, i32 0, float undef, i32 undef)
  %66 = extractelement <4 x float> %65, i32 2
  %67 = fadd float %66, %.pre347
  %68 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %65, i32 4, float undef, i32 undef, float undef, i32 undef, float %67, i32 0, float undef, i32 undef)
  %69 = extractelement <4 x float> %68, i32 2
  %70 = fadd float %69, %.pre347
  %71 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %68, i32 4, float undef, i32 undef, float undef, i32 undef, float %70, i32 0, float undef, i32 undef)
  %72 = extractelement <4 x float> %71, i32 2
  %73 = fadd float %72, %.pre347
  %74 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %71, i32 4, float undef, i32 undef, float undef, i32 undef, float %73, i32 0, float undef, i32 undef)
  %75 = extractelement <4 x float> %74, i32 2
  %76 = fadd float %75, %.pre347
  %77 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %74, i32 4, float undef, i32 undef, float undef, i32 undef, float %76, i32 0, float undef, i32 undef)
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %.pre347
  %80 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %77, i32 4, float undef, i32 undef, float undef, i32 undef, float %79, i32 0, float undef, i32 undef)
  %81 = extractelement <4 x float> %80, i32 2
  %82 = fadd float %81, %.pre347
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %80, i32 4, float undef, i32 undef, float undef, i32 undef, float %82, i32 0, float undef, i32 undef)
  %84 = extractelement <4 x float> %83, i32 2
  %85 = fadd float %84, %.pre347
  %86 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %83, i32 4, float undef, i32 undef, float undef, i32 undef, float %85, i32 0, float undef, i32 undef)
  %87 = extractelement <4 x float> %86, i32 2
  %88 = fadd float %87, %.pre347
  %89 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %86, i32 4, float undef, i32 undef, float undef, i32 undef, float %88, i32 0, float undef, i32 undef)
  %90 = extractelement <4 x float> %89, i32 2
  %91 = fadd float %90, %.pre347
  %92 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %89, i32 4, float undef, i32 undef, float undef, i32 undef, float %91, i32 0, float undef, i32 undef)
  %93 = extractelement <4 x float> %92, i32 2
  %94 = fadd float %93, %.pre347
  %95 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %92, i32 4, float undef, i32 undef, float undef, i32 undef, float %94, i32 0, float undef, i32 undef)
  %96 = extractelement <4 x float> %95, i32 2
  %97 = fadd float %96, %.pre347
  %98 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %95, i32 4, float undef, i32 undef, float undef, i32 undef, float %97, i32 0, float undef, i32 undef)
  %99 = extractelement <4 x float> %98, i32 2
  %100 = fadd float %99, %.pre347
  %101 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %98, i32 4, float undef, i32 undef, float undef, i32 undef, float %100, i32 0, float undef, i32 undef)
  %102 = extractelement <4 x float> %101, i32 2
  %103 = fadd float %102, %.pre347
  %104 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %101, i32 4, float undef, i32 undef, float undef, i32 undef, float %103, i32 0, float undef, i32 undef)
  %105 = extractelement <4 x float> %104, i32 2
  %106 = fadd float %105, %.pre347
  %107 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %104, i32 4, float undef, i32 undef, float undef, i32 undef, float %106, i32 0, float undef, i32 undef)
  %108 = extractelement <4 x float> %107, i32 2
  %109 = fadd float %108, %.pre347
  %110 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %107, i32 4, float undef, i32 undef, float undef, i32 undef, float %109, i32 0, float undef, i32 undef)
  %111 = extractelement <4 x float> %110, i32 2
  %112 = fadd float %111, %.pre347
  %113 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %110, i32 4, float undef, i32 undef, float undef, i32 undef, float %112, i32 0, float undef, i32 undef)
  %114 = extractelement <4 x float> %113, i32 2
  %115 = fadd float %114, %.pre347
  %116 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %113, i32 4, float undef, i32 undef, float undef, i32 undef, float %115, i32 0, float undef, i32 undef)
  %117 = extractelement <4 x float> %116, i32 2
  %118 = fadd float %117, %.pre347
  %119 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %116, i32 4, float undef, i32 undef, float undef, i32 undef, float %118, i32 0, float undef, i32 undef)
  %120 = extractelement <4 x float> %119, i32 2
  %121 = fadd float %120, %.pre347
  %122 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %119, i32 4, float undef, i32 undef, float undef, i32 undef, float %121, i32 0, float undef, i32 undef)
  %123 = extractelement <4 x float> %122, i32 2
  %124 = fadd float %123, %.pre347
  %125 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %122, i32 4, float undef, i32 undef, float undef, i32 undef, float %124, i32 0, float undef, i32 undef)
  %126 = extractelement <4 x float> %125, i32 2
  %127 = fadd float %126, %.pre347
  %128 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %125, i32 4, float undef, i32 undef, float undef, i32 undef, float %127, i32 0, float undef, i32 undef)
  %129 = extractelement <4 x float> %128, i32 2
  %130 = fadd float %129, %.pre347
  %131 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %128, i32 4, float undef, i32 undef, float undef, i32 undef, float %130, i32 0, float undef, i32 undef)
  %132 = extractelement <4 x float> %131, i32 2
  %133 = fadd float %132, %.pre347
  %134 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %131, i32 4, float undef, i32 undef, float undef, i32 undef, float %133, i32 0, float undef, i32 undef)
  %135 = extractelement <4 x float> %134, i32 2
  %136 = fadd float %135, %.pre347
  %137 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %134, i32 4, float undef, i32 undef, float undef, i32 undef, float %136, i32 0, float undef, i32 undef)
  %138 = extractelement <4 x float> %137, i32 2
  %139 = fadd float %138, %.pre347
  %140 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %137, i32 4, float undef, i32 undef, float undef, i32 undef, float %139, i32 0, float undef, i32 undef)
  %141 = extractelement <4 x float> %140, i32 2
  %142 = fadd float %141, %.pre347
  %143 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %140, i32 4, float undef, i32 undef, float undef, i32 undef, float %142, i32 0, float undef, i32 undef)
  %144 = extractelement <4 x float> %143, i32 2
  %145 = fadd float %144, %.pre347
  %146 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %143, i32 4, float undef, i32 undef, float undef, i32 undef, float %145, i32 0, float undef, i32 undef)
  %147 = extractelement <4 x float> %146, i32 2
  %148 = fadd float %147, %.pre347
  %149 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %146, i32 4, float undef, i32 undef, float undef, i32 undef, float %148, i32 0, float undef, i32 undef)
  %150 = extractelement <4 x float> %149, i32 2
  %151 = fadd float %150, %.pre347
  %152 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %149, i32 4, float undef, i32 undef, float undef, i32 undef, float %151, i32 0, float undef, i32 undef)
  br label %loop-header80

loop-header80:                                    ; preds = %ifmerge83, %then65
  %color.10 = phi <4 x float> [ %152, %then65 ], [ %select342, %ifmerge83 ]
  %i79.0 = phi i32 [ 0, %then65 ], [ %i7992, %ifmerge83 ]
  %exitcond394 = icmp eq i32 %i79.0, 100
  br i1 %exitcond394, label %then81, label %ifmerge83

then81:                                           ; preds = %loop-header80
  br label %loop-header96

ifmerge83:                                        ; preds = %loop-header80
  %153 = extractelement <4 x float> %color.10, i32 2
  %154 = fcmp olt float %153, 2.000000e+01
  %155 = extractelement <4 x float> %color.10, i32 0
  %156 = fadd float %155, 1.000000e+00
  %157 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 1, float %156, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %158 = extractelement <4 x float> %color.10, i32 1
  %159 = fadd float %158, 1.000000e+00
  %160 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 2, float undef, i32 undef, float %159, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select342 = select i1 %154, <4 x float> %157, <4 x float> %160
  %i7992 = add i32 %i79.0, 1
  br label %loop-header80

loop-header96:                                    ; preds = %ifmerge99, %then81
  %color.12 = phi <4 x float> [ %color.10, %then81 ], [ %select339, %ifmerge99 ]
  %i95.0 = phi i32 [ 0, %then81 ], [ %i95105, %ifmerge99 ]
  %exitcond393 = icmp eq i32 %i95.0, 120
  br i1 %exitcond393, label %then97, label %ifmerge99

then97:                                           ; preds = %loop-header96
  %161 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header109

ifmerge99:                                        ; preds = %loop-header96
  %162 = extractelement <4 x float> %color.12, i32 2
  %163 = fcmp olt float %162, 2.000000e+01
  %164 = extractelement <4 x float> %color.12, i32 0
  %165 = fadd float %164, 1.000000e+00
  %166 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 1, float %165, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %167 = extractelement <4 x float> %color.12, i32 1
  %168 = fadd float %167, 1.000000e+00
  %169 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 2, float undef, i32 undef, float %168, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select339 = select i1 %163, <4 x float> %166, <4 x float> %169
  %i95105 = add i32 %i95.0, 1
  br label %loop-header96

loop-header109:                                   ; preds = %ifmerge112, %then97
  %color.14 = phi <4 x float> [ %color.12, %then97 ], [ %select336, %ifmerge112 ]
  %i108.0 = phi i32 [ 0, %then97 ], [ %select337, %ifmerge112 ]
  %exitcond = icmp eq i32 %i108.0, 42
  br i1 %exitcond, label %then110, label %ifmerge112

then110:                                          ; preds = %loop-header109
  br label %loop-header123

ifmerge112:                                       ; preds = %loop-header109
  %170 = extractelement <4 x float> %color.14, i32 2
  %171 = fadd float %170, %.pre347
  %172 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 4, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float undef, i32 undef)
  %173 = extractelement <4 x float> %color.14, i32 0
  %174 = fcmp olt float %173, %161
  %175 = extractelement <4 x float> %color.14, i32 3
  %176 = fadd float %175, 1.000000e+00
  %177 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 12, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float %176, i32 0)
  %select336 = select i1 %174, <4 x float> %172, <4 x float> %177
  %select337 = add i32 %i108.0, 1
  br label %loop-header109

loop-header123:                                   ; preds = %ifmerge130, %then110
  %color.15 = phi <4 x float> [ %color.14, %then110 ], [ %186, %ifmerge130 ]
  %i122.0 = phi i32 [ 0, %then110 ], [ %i122132, %ifmerge130 ]
  %178 = icmp sgt i32 %i122.0, 41
  br i1 %178, label %then124, label %ifmerge126

then124:                                          ; preds = %loop-header123
  br label %loop-merge134

ifmerge126:                                       ; preds = %loop-header123
  %179 = extractelement <4 x float> %color.15, i32 2
  %180 = fadd float %179, %.pre347
  %181 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.15, i32 4, float undef, i32 undef, float undef, i32 undef, float %180, i32 0, float undef, i32 undef)
  %182 = extractelement <4 x float> %color.15, i32 0
  %183 = fcmp olt float %182, %161
  br i1 %183, label %then128, label %ifmerge130

then128:                                          ; preds = %ifmerge126
  br label %loop-merge134

ifmerge130:                                       ; preds = %ifmerge126
  %184 = extractelement <4 x float> %color.15, i32 3
  %185 = fadd float %184, 1.000000e+00
  %186 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %181, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %185, i32 0)
  %i122132 = add i32 %i122.0, 1
  br label %loop-header123

loop-merge134:                                    ; preds = %then128, %then124
  %color.16 = phi <4 x float> [ %color.15, %then124 ], [ %181, %then128 ]
  %.pre350 = load <4 x float> addrspace(2)* @bigColor4, align 16, !gla.uniform !15
  br label %loop-header135

loop-header135:                                   ; preds = %loop-header135.backedge, %loop-merge134
  %color.17 = phi <4 x float> [ %color.16, %loop-merge134 ], [ %color.17.be, %loop-header135.backedge ]
  %color136 = fadd <4 x float> %color.17, %.pre350
  %187 = extractelement <4 x float> %color136, i32 0
  %188 = fcmp olt float %187, %161
  br i1 %188, label %then137, label %ifmerge139

then137:                                          ; preds = %loop-header135
  br label %loop-header135.backedge

loop-header135.backedge:                          ; preds = %then137, %ifmerge147
  %color.17.be = phi <4 x float> [ %color136, %then137 ], [ %select, %ifmerge147 ]
  br label %loop-header135

ifmerge139:                                       ; preds = %loop-header135
  %189 = extractelement <4 x float> %color136, i32 1
  %190 = fcmp olt float %189, %161
  %191 = fadd float %161, %189
  %192 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color136, i32 2, float undef, i32 undef, float %191, i32 0, float undef, i32 undef, float undef, i32 undef)
  %193 = fadd float %161, %187
  %194 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color136, i32 1, float %193, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select = select i1 %190, <4 x float> %192, <4 x float> %194
  %195 = extractelement <4 x float> %select, i32 2
  %196 = fcmp uge float %195, %161
  br i1 %196, label %then145, label %ifmerge147

then145:                                          ; preds = %ifmerge139
  %.pre352 = load <4 x float> addrspace(2)* @bigColor5, align 16, !gla.uniform !16
  %.pre353 = load float addrspace(2)* @d5, align 4, !gla.uniform !17
  br label %loop-header150

ifmerge147:                                       ; preds = %ifmerge139
  br label %loop-header135.backedge

loop-header150:                                   ; preds = %loop-header150, %then145
  %color.19 = phi <4 x float> [ %select, %then145 ], [ %select341, %loop-header150 ]
  %color151 = fadd <4 x float> %color.19, %.pre352
  %197 = extractelement <4 x float> %color151, i32 1
  %198 = fcmp olt float %197, %.pre353
  %199 = fadd float %.pre353, %197
  %200 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color151, i32 2, float undef, i32 undef, float %199, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select341 = select i1 %198, <4 x float> %200, <4 x float> %color151
  %201 = extractelement <4 x float> %select341, i32 0
  %202 = fcmp uge float %201, %.pre353
  br i1 %202, label %then155, label %loop-header150

then155:                                          ; preds = %loop-header150
  %203 = load float addrspace(2)* @d6, align 4, !gla.uniform !18
  %204 = fcmp olt float %201, %203
  br i1 %204, label %then160, label %else168

then160:                                          ; preds = %then155
  %205 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  br label %loop-header161

loop-header161:                                   ; preds = %ifmerge164, %then160
  %color.21 = phi <4 x float> [ %select341, %then160 ], [ %color165, %ifmerge164 ]
  %206 = extractelement <4 x float> %color.21, i32 1
  %207 = fcmp uge float %206, %203
  br i1 %207, label %then162, label %ifmerge164

then162:                                          ; preds = %loop-header161
  br label %ifmerge176

ifmerge164:                                       ; preds = %loop-header161
  %color165 = fadd <4 x float> %color.21, %205
  br label %loop-header161

else168:                                          ; preds = %then155
  %208 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  %209 = extractelement <4 x float> %208, i32 2
  br label %loop-header169

loop-header169:                                   ; preds = %ifmerge172, %else168
  %color.22 = phi <4 x float> [ %select341, %else168 ], [ %213, %ifmerge172 ]
  %210 = extractelement <4 x float> %color.22, i32 2
  %211 = fcmp uge float %210, %203
  br i1 %211, label %then170, label %ifmerge172

then170:                                          ; preds = %loop-header169
  br label %ifmerge176

ifmerge172:                                       ; preds = %loop-header169
  %212 = fadd float %210, %209
  %213 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.22, i32 4, float undef, i32 undef, float undef, i32 undef, float %212, i32 0, float undef, i32 undef)
  br label %loop-header169

ifmerge176:                                       ; preds = %then170, %then162
  %214 = phi <4 x float> [ %205, %then162 ], [ %208, %then170 ]
  %color.23 = phi <4 x float> [ %color.21, %then162 ], [ %color.22, %then170 ]
  %215 = extractelement <4 x float> %color.23, i32 0
  %216 = fcmp olt float %215, %203
  br i1 %216, label %then177, label %else188

then177:                                          ; preds = %ifmerge176
  %217 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %218 = fcmp olt float %217, 1.000000e+00
  br label %loop-header178

loop-header178:                                   ; preds = %ifmerge181, %then177
  %color.24 = phi <4 x float> [ %color.23, %then177 ], [ %color182, %ifmerge181 ]
  %219 = extractelement <4 x float> %color.24, i32 1
  %220 = fcmp uge float %219, %203
  br i1 %220, label %then179, label %ifmerge181

then179:                                          ; preds = %loop-header178
  br label %loop-merge187

ifmerge181:                                       ; preds = %loop-header178
  %color182 = fadd <4 x float> %color.24, %214
  br i1 %218, label %then183, label %loop-header178

then183:                                          ; preds = %ifmerge181
  br label %loop-merge187

loop-merge187:                                    ; preds = %then183, %then179
  %color.25 = phi <4 x float> [ %color.24, %then179 ], [ %color182, %then183 ]
  br label %ifmerge196

else188:                                          ; preds = %ifmerge176
  %221 = extractelement <4 x float> %214, i32 2
  br label %loop-header189

loop-header189:                                   ; preds = %ifmerge192, %else188
  %color.26 = phi <4 x float> [ %color.23, %else188 ], [ %225, %ifmerge192 ]
  %222 = extractelement <4 x float> %color.26, i32 2
  %223 = fcmp uge float %222, %203
  br i1 %223, label %then190, label %ifmerge192

then190:                                          ; preds = %loop-header189
  br label %ifmerge196

ifmerge192:                                       ; preds = %loop-header189
  %224 = fadd float %222, %221
  %225 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.26, i32 4, float undef, i32 undef, float undef, i32 undef, float %224, i32 0, float undef, i32 undef)
  br label %loop-header189

ifmerge196:                                       ; preds = %then190, %loop-merge187
  %color.27 = phi <4 x float> [ %color.25, %loop-merge187 ], [ %color.26, %then190 ]
  %.pre354 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %226 = fcmp olt float %.pre354, 0.000000e+00
  %227 = load <4 x float> addrspace(2)* @bigColor7, align 16, !gla.uniform !21
  %228 = fcmp olt float %.pre354, 1.000000e+00
  br label %loop-header197

loop-header197:                                   ; preds = %ifmerge205, %ifmerge196
  %color.28 = phi <4 x float> [ %color.27, %ifmerge196 ], [ %color207, %ifmerge205 ]
  br i1 %226, label %then198, label %ifmerge200

then198:                                          ; preds = %loop-header197
  br label %loop-merge212

ifmerge200:                                       ; preds = %loop-header197
  %color201 = fadd <4 x float> %color.28, %227
  br i1 %228, label %then202, label %ifmerge205

then202:                                          ; preds = %ifmerge200
  %229 = extractelement <4 x float> %color201, i32 2
  %230 = fadd float %229, 1.000000e+00
  %231 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color201, i32 4, float undef, i32 undef, float undef, i32 undef, float %230, i32 0, float undef, i32 undef)
  br label %loop-merge212

ifmerge205:                                       ; preds = %ifmerge200
  %color207 = fadd <4 x float> %BaseColor, %color201
  br label %loop-header197

loop-merge212:                                    ; preds = %then202, %then198
  %color.29 = phi <4 x float> [ %color.28, %then198 ], [ %231, %then202 ]
  %.pre355 = load float addrspace(2)* @d8, align 4, !gla.uniform !22
  %232 = fcmp olt float %.pre355, 0.000000e+00
  %233 = fcmp olt float %.pre355, 1.000000e+00
  br label %loop-header213

loop-header213:                                   ; preds = %ifmerge226, %loop-merge212
  %color.30 = phi <4 x float> [ %color.29, %loop-merge212 ], [ %color228, %ifmerge226 ]
  br i1 %232, label %then214, label %ifmerge216

then214:                                          ; preds = %loop-header213
  br label %loop-merge233

ifmerge216:                                       ; preds = %loop-header213
  %color217 = fadd <4 x float> %color.30, %227
  br i1 %233, label %then218, label %ifmerge226

then218:                                          ; preds = %ifmerge216
  %234 = extractelement <4 x float> %color217, i32 2
  %235 = fadd float %234, 1.000000e+00
  %236 = fcmp olt float %.pre355, 2.000000e+00
  %237 = extractelement <4 x float> %color217, i32 1
  %238 = fadd float %237, 1.000000e+00
  %239 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color217, i32 6, float undef, i32 undef, float %238, i32 0, float %235, i32 0, float undef, i32 undef)
  %240 = extractelement <4 x float> %color217, i32 0
  %241 = fadd float %240, 1.000000e+00
  %242 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color217, i32 5, float %241, i32 0, float undef, i32 undef, float %235, i32 0, float undef, i32 undef)
  %select343 = select i1 %236, <4 x float> %239, <4 x float> %242
  br label %loop-merge233

ifmerge226:                                       ; preds = %ifmerge216
  %color228 = fadd <4 x float> %BaseColor, %color217
  %243 = extractelement <4 x float> %color228, i32 2
  %244 = fcmp uge float %243, %.pre355
  br i1 %244, label %then229, label %loop-header213

then229:                                          ; preds = %ifmerge226
  br label %loop-merge233

loop-merge233:                                    ; preds = %then229, %then218, %then214
  %color.32 = phi <4 x float> [ %color.30, %then214 ], [ %select343, %then218 ], [ %color228, %then229 ]
  %.pre356 = load float addrspace(2)* @d9, align 4, !gla.uniform !23
  %245 = fcmp ogt float %.pre356, %.pre355
  br label %loop-header234

loop-header234:                                   ; preds = %ifmerge246, %loop-merge233
  %color.33 = phi <4 x float> [ %color.32, %loop-merge233 ], [ %color.35, %ifmerge246 ]
  %246 = extractelement <4 x float> %color.33, i32 3
  %247 = fcmp uge float %246, %.pre356
  br i1 %247, label %then235, label %ifmerge237

then235:                                          ; preds = %loop-header234
  br label %loop-merge248

ifmerge237:                                       ; preds = %loop-header234
  br i1 %245, label %then238, label %ifmerge246

then238:                                          ; preds = %ifmerge237
  %248 = extractelement <4 x float> %color.33, i32 0
  %249 = fcmp ugt float %248, %.pre354
  br i1 %249, label %ifmerge245, label %then239

then239:                                          ; preds = %then238
  %250 = extractelement <4 x float> %color.33, i32 2
  %251 = fcmp oeq float %250, 5.000000e+00
  br i1 %251, label %then240, label %else242

then240:                                          ; preds = %then239
  %252 = fadd float %246, 1.000000e+00
  %253 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.33, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %252, i32 0)
  br label %ifmerge245

else242:                                          ; preds = %then239
  br label %loop-merge248

ifmerge245:                                       ; preds = %then238, %then240
  %color.34 = phi <4 x float> [ %253, %then240 ], [ %color.33, %then238 ]
  br label %ifmerge246

ifmerge246:                                       ; preds = %ifmerge237, %ifmerge245
  %color.35 = phi <4 x float> [ %color.34, %ifmerge245 ], [ %color.33, %ifmerge237 ]
  br label %loop-header234

loop-merge248:                                    ; preds = %else242, %then235
  %.pre357 = load float addrspace(2)* @d10, align 4, !gla.uniform !24
  %254 = load float addrspace(2)* @d11, align 4, !gla.uniform !25
  %255 = load float addrspace(2)* @d12, align 4, !gla.uniform !26
  br label %loop-header249

loop-header249:                                   ; preds = %then254, %loop-merge248
  %color.36 = phi <4 x float> [ %color.33, %loop-merge248 ], [ %select344, %then254 ]
  %256 = extractelement <4 x float> %color.36, i32 2
  %257 = fcmp uge float %256, %.pre357
  br i1 %257, label %then250, label %ifmerge252

then250:                                          ; preds = %loop-header249
  br label %loop-merge266

ifmerge252:                                       ; preds = %loop-header249
  %258 = extractelement <4 x float> %color.36, i32 1
  %259 = fadd float %258, 1.000000e+00
  %260 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.36, i32 2, float undef, i32 undef, float %259, i32 0, float undef, i32 undef, float undef, i32 undef)
  %261 = fcmp olt float %259, %254
  br i1 %261, label %then254, label %ifmerge262

then254:                                          ; preds = %ifmerge252
  %262 = fadd float %256, 1.000000e+00
  %263 = extractelement <4 x float> %color.36, i32 3
  %264 = fcmp olt float %263, %255
  %265 = fadd float %263, 1.000000e+00
  %266 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %260, i32 12, float undef, i32 undef, float undef, i32 undef, float %262, i32 0, float %265, i32 0)
  %267 = extractelement <4 x float> %color.36, i32 0
  %268 = fadd float %267, 1.000000e+00
  %269 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %260, i32 5, float %268, i32 0, float undef, i32 undef, float %262, i32 0, float undef, i32 undef)
  %select344 = select i1 %264, <4 x float> %266, <4 x float> %269
  br label %loop-header249

ifmerge262:                                       ; preds = %ifmerge252
  %color263 = fadd <4 x float> %260, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-merge266

loop-merge266:                                    ; preds = %ifmerge262, %then250
  %color.38 = phi <4 x float> [ %color.36, %then250 ], [ %color263, %ifmerge262 ]
  %270 = load <4 x float> addrspace(2)* @bigColor8, align 16, !gla.uniform !27
  %271 = extractelement <4 x float> %270, i32 0
  br label %loop-header267

loop-header267:                                   ; preds = %ifmerge270, %loop-merge266
  %color.39 = phi <4 x float> [ %color.38, %loop-merge266 ], [ %select340, %ifmerge270 ]
  %272 = extractelement <4 x float> %color.39, i32 0
  %273 = fcmp uge float %272, 1.000000e+01
  br i1 %273, label %then268, label %ifmerge270

then268:                                          ; preds = %loop-header267
  %color280 = fadd <4 x float> %color.39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre358 = load float addrspace(2)* @d14, align 4, !gla.uniform !28
  %274 = load float addrspace(2)* @d15, align 4, !gla.uniform !29
  br label %loop-header281

ifmerge270:                                       ; preds = %loop-header267
  %color271 = fadd <4 x float> %color.39, %270
  %275 = extractelement <4 x float> %color271, i32 2
  %276 = fcmp olt float %275, %.pre355
  %277 = extractelement <4 x float> %color271, i32 3
  %278 = fcmp olt float %277, %203
  %279 = extractelement <4 x float> %color271, i32 1
  %280 = fadd float %279, %271
  %281 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color271, i32 2, float undef, i32 undef, float %280, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select334 = select i1 %278, <4 x float> %color271, <4 x float> %281
  %select340 = select i1 %276, <4 x float> %select334, <4 x float> %281
  br label %loop-header267

loop-header281:                                   ; preds = %else286, %then268
  %color.40 = phi <4 x float> [ %color280, %then268 ], [ %color287, %else286 ]
  %282 = extractelement <4 x float> %color.40, i32 0
  %283 = fcmp uge float %282, %.pre358
  br i1 %283, label %then282, label %ifmerge284

then282:                                          ; preds = %loop-header281
  %color291 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre359 = load float addrspace(2)* @d16, align 4, !gla.uniform !30
  br label %loop-header292

ifmerge284:                                       ; preds = %loop-header281
  %284 = extractelement <4 x float> %color.40, i32 1
  %285 = fcmp olt float %284, %274
  br i1 %285, label %then285, label %else286

then285:                                          ; preds = %ifmerge284
  br label %stage-epilogue

else286:                                          ; preds = %ifmerge284
  %color287 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header281

loop-header292:                                   ; preds = %ifmerge295, %then282
  %color.41 = phi <4 x float> [ %color291, %then282 ], [ %290, %ifmerge295 ]
  %286 = extractelement <4 x float> %color.41, i32 3
  %287 = fcmp uge float %286, %.pre359
  br i1 %287, label %then293, label %ifmerge295

then293:                                          ; preds = %loop-header292
  %288 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header299

ifmerge295:                                       ; preds = %loop-header292
  %289 = fadd float %286, 1.000000e+00
  %290 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.41, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %289, i32 0)
  br label %loop-header292

loop-header299:                                   ; preds = %ifmerge302, %then293
  %color.42 = phi <4 x float> [ %color.41, %then293 ], [ %color303, %ifmerge302 ]
  %291 = extractelement <4 x float> %color.42, i32 3
  %292 = extractelement <4 x float> %color.42, i32 1
  %notlhs332 = fcmp uge float %291, %.pre346
  %notrhs333 = fcmp uge float %292, %.pre347
  %293 = or i1 %notrhs333, %notlhs332
  br i1 %293, label %then300, label %ifmerge302

then300:                                          ; preds = %loop-header299
  %.pre360 = load float addrspace(2)* @d18, align 4, !gla.uniform !31
  %294 = load float addrspace(2)* @d17, align 4, !gla.uniform !32
  br label %loop-header309

ifmerge302:                                       ; preds = %loop-header299
  %color303 = fadd <4 x float> %color.42, %288
  %295 = extractelement <4 x float> %color303, i32 2
  %296 = fcmp olt float %295, %.pre347
  br i1 %296, label %then304, label %loop-header299

then304:                                          ; preds = %ifmerge302
  br label %stage-epilogue

loop-header309:                                   ; preds = %ifmerge312, %then300
  %color.43 = phi <4 x float> [ %color.42, %then300 ], [ %color313, %ifmerge312 ]
  %297 = extractelement <4 x float> %color.43, i32 1
  %298 = fcmp olt float %297, %.pre360
  br i1 %298, label %then310, label %ifmerge312

then310:                                          ; preds = %loop-header309
  br label %stage-epilogue

ifmerge312:                                       ; preds = %loop-header309
  %color313 = fadd <4 x float> %color.43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %299 = extractelement <4 x float> %color313, i32 0
  %300 = fcmp uge float %299, %294
  br i1 %300, label %then314, label %loop-header309

then314:                                          ; preds = %ifmerge312
  br label %loop-header319

loop-header319:                                   ; preds = %else324, %then314
  %color.44 = phi <4 x float> [ %color313, %then314 ], [ %color325, %else324 ]
  %301 = extractelement <4 x float> %color.44, i32 1
  %302 = fcmp uge float %301, %.pre359
  br i1 %302, label %then320, label %ifmerge322

then320:                                          ; preds = %loop-header319
  %color329 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %stage-epilogue

ifmerge322:                                       ; preds = %loop-header319
  %303 = extractelement <4 x float> %color.44, i32 3
  %304 = fcmp olt float %303, %.pre359
  br i1 %304, label %then323, label %else324

then323:                                          ; preds = %ifmerge322
  call void @llvm.gla.discard()
  br label %stage-exit

else324:                                          ; preds = %ifmerge322
  %color325 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header319

stage-epilogue:                                   ; preds = %then320, %then310, %then304, %then285
  %FragColor_shadow331.0 = phi <4 x float> [ %color280, %then310 ], [ %color329, %then320 ], [ %color280, %then304 ], [ %color280, %then285 ]
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %FragColor_shadow331.0), !gla.output !50
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then323
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.discard() #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float const66 = 0.33;
const float const68 = 0.66;
const vec4 const70 = vec4(0.66);
const vec4 const71 = vec4(0.33);
const float const79 = 42.0;
const vec4 const81 = vec4(1.0);
vec4 color_c52;
const int const89i_0 = 0;
const int const92i_1 = 1;
vec4 color_c55;
const float const180 = 20.0;
const float const182 = 1.0;
const int const199i_41 = 41;
vec4 temp201;
vec4 select_c60;
vec4 select_c62;
float temp220;
vec4 color_c64;
const float const232 = 0.0;
vec4 color_c65;
vec4 color_c67;
const float const243 = 2.0;
vec4 color_c69;
const float const254 = 5.0;
vec4 temp258;
const float const268 = 10.0;
vec4 color_c80;

void main()
{
    vec4 color_uc1;
    vec4 color_uc2;
    vec4 color_uc3;
    vec4 color_uc4;
    vec4 color_uc5;
    vec4 color_uc6;
    vec4 color_uc7;
    int i_uc8;
    vec4 color_uc9;
    vec4 color_uc10;
    int temp31;
    vec4 color_uc11;
    int temp33;
    vec4 color_uc12;
    int temp35;
    vec4 color_uc13;
    int temp37;
    vec4 color_uc14;
    vec4 color_uc15;
    vec4 color_uc16;
    vec4 color_uc17;
    vec4 color_uc18;
    vec4 color_uc19;
    vec4 color_uc20;
    vec4 color_uc21;
    vec4 color_uc22;
    vec4 color_uc23;
    vec4 color_uc24;
    vec4 color_uc25;
    vec4 color_uc26;
    vec4 color_uc27;
    vec4 color_uc28;
    vec4 color_uc29;
    vec4 color_uc30;
    vec4 color_uc31;
    vec4 color_uc32;
    vec4 color_uc33;
    vec4 color_uc34;
    vec4 color_uc35;
    vec4 color_uc36;
    vec4 color_uc37;
    vec4 color_uc38;
    vec4 color_uc39;
    vec4 FragColor_shadow_c40;
    bool temp65 = BaseColor.x < const66;
    bool temp67 = BaseColor.x < const68;
    vec4 select_c41 = temp67 ? const70 : const71;
    vec4 select_c42 = temp65 ? const71 : select_c41;
    vec4 select_c43 = BaseColor + select_c42;
    color_uc1 = select_c43;
    while (color_uc1.x < d) {
        vec4 color_c44 = bigColor + color_uc1;
        color_uc1 = color_c44;
    }
    
    color_uc2 = color_uc1;
    while (color_uc2.z < d) {
        vec4 color_c45 = bigColor1_1 + color_uc2;
        bool temp76 = color_c45.w < d;
        vec4 color_c46 = bigColor1_1 + color_c45;
        vec4 select_c47 = temp76 ? color_c45 : color_c46;
        color_uc2 = select_c47;
    }
    
    color_uc3 = color_uc2;
    while (color_uc3.x < const79) {
        vec4 color_c48 = color_uc3 + const81;
        color_uc3 = color_c48;
    }
    
    color_uc4 = color_uc3;
    while (true) {
        bool notlhs_c49 = color_uc4.w >= d2;
        bool notrhs_c50 = color_uc4.y >= d3;
        bool temp84 = notrhs_c50 || notlhs_c49;
        if (temp84) {
            break;
        }
        
        vec4 color_c51 = bigColor1_2 + color_uc4;
        color_uc4 = color_c51;
    }
    
    color_uc5 = color_uc4;
    while (color_uc5.z < d3) {
        color_c52 = bigColor1_3 + color_uc5;
        bool temp87 = color_c52.y < d4;
        if (temp87) {
            color_uc6 = color_c52;
            break;
        }
        
        vec4 color_c53 = bigColor1_3 + color_c52;
        color_uc5 = color_c53;
    }
    
    color_uc6 = color_uc5;
    color_uc7 = color_uc6;
    i_uc8 = const89i_0;
    while (i_uc8 < Count) {
        vec4 color_c54 = bigColor2 + color_uc7;
        int temp91 = i_uc8 + const92i_1;
        color_uc7 = color_c54;
        i_uc8 = temp91;
    }
    
    color_uc9 = color_uc7;
    while (true) {
        color_c55 = bigColor3 + color_uc9;
        bool temp94 = color_c55.x >= d2;
        if (temp94) {
            break;
        }
        
        color_uc9 = color_c55;
    }
    
    float temp95 = color_c55.z + d3;
    vec4 temp96 = color_c55;
    temp96.z = temp95;
    float temp97 = d3 + temp96.z;
    vec4 temp98 = temp96;
    temp98.z = temp97;
    float temp99 = d3 + temp98.z;
    vec4 temp100 = temp98;
    temp100.z = temp99;
    float temp101 = d3 + temp100.z;
    vec4 temp102 = temp100;
    temp102.z = temp101;
    float temp103 = d3 + temp102.z;
    vec4 temp104 = temp102;
    temp104.z = temp103;
    float temp105 = d3 + temp104.z;
    vec4 temp106 = temp104;
    temp106.z = temp105;
    float temp107 = d3 + temp106.z;
    vec4 temp108 = temp106;
    temp108.z = temp107;
    float temp109 = d3 + temp108.z;
    vec4 temp110 = temp108;
    temp110.z = temp109;
    float temp111 = d3 + temp110.z;
    vec4 temp112 = temp110;
    temp112.z = temp111;
    float temp113 = d3 + temp112.z;
    vec4 temp114 = temp112;
    temp114.z = temp113;
    float temp115 = d3 + temp114.z;
    vec4 temp116 = temp114;
    temp116.z = temp115;
    float temp117 = d3 + temp116.z;
    vec4 temp118 = temp116;
    temp118.z = temp117;
    float temp119 = d3 + temp118.z;
    vec4 temp120 = temp118;
    temp120.z = temp119;
    float temp121 = d3 + temp120.z;
    vec4 temp122 = temp120;
    temp122.z = temp121;
    float temp123 = d3 + temp122.z;
    vec4 temp124 = temp122;
    temp124.z = temp123;
    float temp125 = d3 + temp124.z;
    vec4 temp126 = temp124;
    temp126.z = temp125;
    float temp127 = d3 + temp126.z;
    vec4 temp128 = temp126;
    temp128.z = temp127;
    float temp129 = d3 + temp128.z;
    vec4 temp130 = temp128;
    temp130.z = temp129;
    float temp131 = d3 + temp130.z;
    vec4 temp132 = temp130;
    temp132.z = temp131;
    float temp133 = d3 + temp132.z;
    vec4 temp134 = temp132;
    temp134.z = temp133;
    float temp135 = d3 + temp134.z;
    vec4 temp136 = temp134;
    temp136.z = temp135;
    float temp137 = d3 + temp136.z;
    vec4 temp138 = temp136;
    temp138.z = temp137;
    float temp139 = d3 + temp138.z;
    vec4 temp140 = temp138;
    temp140.z = temp139;
    float temp141 = d3 + temp140.z;
    vec4 temp142 = temp140;
    temp142.z = temp141;
    float temp143 = d3 + temp142.z;
    vec4 temp144 = temp142;
    temp144.z = temp143;
    float temp145 = d3 + temp144.z;
    vec4 temp146 = temp144;
    temp146.z = temp145;
    float temp147 = d3 + temp146.z;
    vec4 temp148 = temp146;
    temp148.z = temp147;
    float temp149 = d3 + temp148.z;
    vec4 temp150 = temp148;
    temp150.z = temp149;
    float temp151 = d3 + temp150.z;
    vec4 temp152 = temp150;
    temp152.z = temp151;
    float temp153 = d3 + temp152.z;
    vec4 temp154 = temp152;
    temp154.z = temp153;
    float temp155 = d3 + temp154.z;
    vec4 temp156 = temp154;
    temp156.z = temp155;
    float temp157 = d3 + temp156.z;
    vec4 temp158 = temp156;
    temp158.z = temp157;
    float temp159 = d3 + temp158.z;
    vec4 temp160 = temp158;
    temp160.z = temp159;
    float temp161 = d3 + temp160.z;
    vec4 temp162 = temp160;
    temp162.z = temp161;
    float temp163 = d3 + temp162.z;
    vec4 temp164 = temp162;
    temp164.z = temp163;
    float temp165 = d3 + temp164.z;
    vec4 temp166 = temp164;
    temp166.z = temp165;
    float temp167 = d3 + temp166.z;
    vec4 temp168 = temp166;
    temp168.z = temp167;
    float temp169 = d3 + temp168.z;
    vec4 temp170 = temp168;
    temp170.z = temp169;
    float temp171 = d3 + temp170.z;
    vec4 temp172 = temp170;
    temp172.z = temp171;
    float temp173 = d3 + temp172.z;
    vec4 temp174 = temp172;
    temp174.z = temp173;
    float temp175 = d3 + temp174.z;
    vec4 temp176 = temp174;
    temp176.z = temp175;
    float temp177 = d3 + temp176.z;
    vec4 temp178 = temp176;
    temp178.z = temp177;
    color_uc10 = temp178;
    temp31 = const89i_0;
    for (temp31 = 0; temp31 != 100; ++temp31) {
        bool temp179 = color_uc10.z < const180;
        float temp181 = color_uc10.x + const182;
        vec4 temp183 = color_uc10;
        temp183.x = temp181;
        float temp184 = color_uc10.y + const182;
        vec4 temp185 = color_uc10;
        temp185.y = temp184;
        vec4 select_c56 = temp179 ? temp183 : temp185;
        color_uc10 = select_c56;
    }
    
    color_uc11 = color_uc10;
    temp33 = const89i_0;
    for (temp33 = 0; temp33 != 120; ++temp33) {
        bool temp187 = color_uc11.z < const180;
        float temp188 = color_uc11.x + const182;
        vec4 temp189 = color_uc11;
        temp189.x = temp188;
        float temp190 = color_uc11.y + const182;
        vec4 temp191 = color_uc11;
        temp191.y = temp190;
        vec4 select_c57 = temp187 ? temp189 : temp191;
        color_uc11 = select_c57;
    }
    
    color_uc12 = color_uc11;
    temp35 = const89i_0;
    for (temp35 = 0; temp35 != 42; ++temp35) {
        float temp193 = color_uc12.z + d3;
        vec4 temp194 = color_uc12;
        temp194.z = temp193;
        bool temp195 = color_uc12.x < d4;
        float temp196 = color_uc12.w + const182;
        vec4 temp197 = color_uc12;
        temp197.zw = vec2(temp193, temp196);
        vec4 select_c58 = temp195 ? temp194 : temp197;
        color_uc12 = select_c58;
    }
    
    color_uc13 = color_uc12;
    temp37 = const89i_0;
    while (temp37 <= const199i_41) {
        float temp200 = color_uc13.z + d3;
        temp201 = color_uc13;
        temp201.z = temp200;
        bool temp202 = color_uc13.x < d4;
        if (temp202) {
            color_uc14 = temp201;
            break;
        }
        
        float temp203 = color_uc13.w + const182;
        vec4 temp204 = temp201;
        temp204.w = temp203;
        int temp205 = const92i_1 + temp37;
        color_uc13 = temp204;
        temp37 = temp205;
    }
    
    color_uc14 = color_uc13;
    color_uc15 = color_uc14;
    while (true) {
        vec4 color_c59 = bigColor4 + color_uc15;
        bool temp207 = color_c59.x < d4;
        if (temp207) {
            color_uc16 = color_c59;
        }
        else {
            bool temp208 = color_c59.y < d4;
            float temp209 = color_c59.y + d4;
            vec4 temp210 = color_c59;
            temp210.y = temp209;
            float temp211 = color_c59.x + d4;
            vec4 temp212 = color_c59;
            temp212.x = temp211;
            select_c60 = temp208 ? temp210 : temp212;
            bool temp214 = select_c60.z >= d4;
            if (temp214) {
                break;
            }
            
            color_uc16 = select_c60;
        }
        
        color_uc15 = color_uc16;
    }
    
    color_uc17 = select_c60;
    while (true) {
        vec4 color_c61 = bigColor5 + color_uc17;
        bool temp216 = color_c61.y < d5;
        float temp217 = color_c61.y + d5;
        vec4 temp218 = color_c61;
        temp218.y = temp217;
        select_c62 = temp216 ? temp218 : color_c61;
        bool temp221 = select_c62.x >= d5;
        if (temp221) {
            break;
        }
        
        color_uc17 = select_c62;
    }
    
    bool temp222 = select_c62.x < d6;
    if (temp222) {
        color_uc18 = select_c62;
        while (color_uc18.y < d6) {
            vec4 color_c63 = bigColor6 + color_uc18;
            color_uc18 = color_c63;
        }
        
        color_uc20 = color_uc18;
    }
    else {
        color_uc19 = select_c62;
        while (color_uc19.z < d6) {
            float temp224 = bigColor6.z + color_uc19.z;
            vec4 temp225 = color_uc19;
            temp225.z = temp224;
            color_uc19 = temp225;
        }
        
        color_uc20 = color_uc19;
    }
    
    bool temp226 = color_uc20.x < d6;
    if (temp226) {
        bool temp227 = d7 < const182;
        color_uc21 = color_uc20;
        while (color_uc21.y < d6) {
            color_c64 = bigColor6 + color_uc21;
            if (temp227) {
                color_uc22 = color_c64;
                break;
            }
            
            color_uc21 = color_c64;
        }
        
        color_uc22 = color_uc21;
        color_uc24 = color_uc22;
    }
    else {
        color_uc23 = color_uc20;
        while (color_uc23.z < d6) {
            float temp229 = bigColor6.z + color_uc23.z;
            vec4 temp230 = color_uc23;
            temp230.z = temp229;
            color_uc23 = temp230;
        }
        
        color_uc24 = color_uc23;
    }
    
    bool temp231 = d7 < const232;
    bool temp233 = d7 < const182;
    color_uc25 = color_uc24;
    while (true) {
        if (temp231) {
            color_uc26 = color_uc25;
            break;
        }
        
        color_c65 = bigColor7 + color_uc25;
        if (temp233) {
            float temp235 = color_c65.z + const182;
            vec4 temp236 = color_c65;
            temp236.z = temp235;
            color_uc26 = temp236;
            break;
        }
        
        vec4 color_c66 = BaseColor + color_c65;
        color_uc25 = color_c66;
    }
    
    bool temp238 = d8 < const232;
    bool temp239 = d8 < const182;
    color_uc27 = color_uc26;
    while (true) {
        if (temp238) {
            color_uc28 = color_uc27;
            break;
        }
        
        color_c67 = bigColor7 + color_uc27;
        if (temp239) {
            float temp241 = color_c67.z + const182;
            bool temp242 = d8 < const243;
            float temp244 = color_c67.y + const182;
            vec4 temp245 = color_c67;
            temp245.yz = vec2(temp244, temp241);
            float temp246 = color_c67.x + const182;
            vec4 temp247 = color_c67;
            temp247.xz = vec2(temp246, temp241);
            vec4 select_c68 = temp242 ? temp245 : temp247;
            color_uc28 = select_c68;
            break;
        }
        
        color_c69 = BaseColor + color_c67;
        bool temp250 = color_c69.z >= d8;
        if (temp250) {
            color_uc28 = color_c69;
            break;
        }
        
        color_uc27 = color_c69;
    }
    
    bool temp251 = d9 > d8;
    color_uc29 = color_uc28;
    while (color_uc29.w < d9) {
        color_uc31 = color_uc29;
        if (temp251) {
            bool temp252 = color_uc29.x > d7;
            color_uc30 = color_uc29;
            if (! temp252) {
                bool temp253 = color_uc29.z == const254;
                if (! temp253) {
                    break;
                }
                
                float temp255 = color_uc29.w + const182;
                vec4 temp256 = color_uc29;
                temp256.w = temp255;
                color_uc30 = temp256;
            }
            
            color_uc31 = color_uc30;
        }
        
        color_uc29 = color_uc31;
    }
    
    color_uc32 = color_uc29;
    while (color_uc32.z < d10) {
        float temp257 = color_uc32.y + const182;
        temp258 = color_uc32;
        temp258.y = temp257;
        bool temp259 = temp257 < d11;
        if (! temp259) {
            vec4 color_c70 = const81 + temp258;
            color_uc33 = color_c70;
            break;
        }
        
        float temp261 = color_uc32.z + const182;
        bool temp262 = color_uc32.w < d12;
        float temp263 = color_uc32.w + const182;
        vec4 temp264 = temp258;
        temp264.zw = vec2(temp261, temp263);
        float temp265 = color_uc32.x + const182;
        vec4 temp266 = temp258;
        temp266.xz = vec2(temp265, temp261);
        vec4 select_c71 = temp262 ? temp264 : temp266;
        color_uc32 = select_c71;
    }
    
    color_uc33 = color_uc32;
    color_uc34 = color_uc33;
    while (color_uc34.x < const268) {
        vec4 color_c72 = bigColor8 + color_uc34;
        bool temp270 = color_c72.z < d8;
        bool temp271 = color_c72.w < d6;
        float temp272 = bigColor8.x + color_c72.y;
        vec4 temp273 = color_c72;
        temp273.y = temp272;
        vec4 select_c73 = temp271 ? color_c72 : temp273;
        vec4 select_c74 = temp270 ? select_c73 : temp273;
        color_uc34 = select_c74;
    }
    
    vec4 color_c75 = color_uc34 + const81;
    color_uc35 = color_c75;
    while (color_uc35.x < d14) {
        bool temp277 = color_uc35.y < d15;
        if (temp277) {
            FragColor_shadow_c40 = color_c75;
            gl_FragColor = FragColor_shadow_c40;
            return;
        }
        
        vec4 color_c76 = color_uc35 + const81;
        color_uc35 = color_c76;
    }
    
    vec4 color_c77 = color_uc35 + const81;
    color_uc36 = color_c77;
    while (color_uc36.w < d16) {
        float temp280 = color_uc36.w + const182;
        vec4 temp281 = color_uc36;
        temp281.w = temp280;
        color_uc36 = temp281;
    }
    
    color_uc37 = color_uc36;
    while (true) {
        bool notlhs_c78 = color_uc37.w >= d2;
        bool notrhs_c79 = color_uc37.y >= d3;
        bool temp284 = notrhs_c79 || notlhs_c78;
        if (temp284) {
            color_uc38 = color_uc37;
            while (color_uc38.y >= d18) {
                color_c80 = color_uc38 + const81;
                bool temp286 = color_c80.x >= d17;
                if (temp286) {
                    color_uc39 = color_c80;
                    while (color_uc39.y < d16) {
                        bool temp287 = color_uc39.w < d16;
                        if (temp287) {
                            discard;
                        }
                        
                        vec4 color_c81 = color_uc39 + const81;
                        color_uc39 = color_c81;
                    }
                    
                    vec4 color_c82 = color_uc39 + const81;
                    FragColor_shadow_c40 = color_c82;
                    gl_FragColor = FragColor_shadow_c40;
                    return;
                }
                
                color_uc38 = color_c80;
            }
            
            FragColor_shadow_c40 = color_c75;
            gl_FragColor = FragColor_shadow_c40;
            return;
        }
        
        vec4 color_c83 = bigColor1_2 + color_uc37;
        bool temp291 = color_c83.z < d3;
        if (temp291) {
            FragColor_shadow_c40 = color_c75;
            gl_FragColor = FragColor_shadow_c40;
            
        }
        
        color_uc37 = color_c83;
    }
    
}


#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float const62 = 0.33;
const float const64 = 0.66;
const vec4 const66 = vec4(0.66);
const vec4 const67 = vec4(0.33);
const float const75 = 42.0;
const vec4 const77 = vec4(1.0);
const int const85i_0 = 0;
const int const88i_1 = 1;
vec4 color_c60;
const float const135 = 20.0;
const float const137 = 1.0;
const int const154i_41 = 41;
vec4 select_c125;
vec4 select_c130;
float temp174;
const float const186 = 0.0;
vec4 color_c141;
vec4 color_c146;
const float const197 = 2.0;
vec4 color_c152;
const float const208 = 5.0;
const float const221 = 10.0;
vec4 color_c177;

void main()
{
    vec4 color_uc_c1;
    vec4 color_uc_c2;
    vec4 color_uc_c3;
    vec4 color_uc_c4;
    vec4 color_uc_c5;
    int i_uc_c6;
    vec4 color_uc_c7;
    vec4 color_uc_c8;
    int temp_c9;
    vec4 color_uc_c10;
    int temp_c11;
    vec4 color_uc_c12;
    int temp_c13;
    vec4 color_uc_c14;
    int temp_c15;
    vec4 color_uc_c16;
    vec4 color_uc_c17;
    vec4 color_uc_c18;
    vec4 color_uc_c19;
    vec4 color_uc_c20;
    vec4 color_uc_c21;
    vec4 color_uc_c22;
    vec4 color_uc_c23;
    vec4 color_uc_c24;
    vec4 color_uc_c25;
    vec4 color_uc_c26;
    vec4 color_uc_c27;
    vec4 color_uc_c28;
    vec4 color_uc_c29;
    vec4 color_uc_c30;
    vec4 color_uc_c31;
    vec4 color_uc_c32;
    vec4 color_uc_c33;
    vec4 color_uc_c34;
    vec4 color_uc_c35;
    vec4 color_uc_c36;
    vec4 color_uc_c37;
    vec4 color_uc_c38;
    vec4 color_uc_c39;
    vec4 FragColor_shadow_c40;
    bool temp_c41 = BaseColor.x < const62;
    bool temp_c42 = BaseColor.x < const64;
    vec4 temp65 = temp_c42 ? const66 : const67;
    vec4 ternary_c43 = temp_c41 ? const67 : temp65;
    vec4 select_c44 = BaseColor + ternary_c43;
    color_uc_c1 = select_c44;
    while (color_uc_c1.x < d) {
        vec4 color_c45 = bigColor + color_uc_c1;
        color_uc_c1 = color_c45;
    }
    
    color_uc_c2 = color_uc_c1;
    while (color_uc_c2.z < d) {
        vec4 color_c46 = bigColor1_1 + color_uc_c2;
        bool temp_c47 = color_c46.w < d;
        vec4 color_c48 = bigColor1_1 + color_c46;
        vec4 select_c49 = temp_c47 ? color_c46 : color_c48;
        color_uc_c2 = select_c49;
    }
    
    color_uc_c3 = color_uc_c2;
    while (color_uc_c3.x < const75) {
        vec4 color_c50 = color_uc_c3 + const77;
        color_uc_c3 = color_c50;
    }
    
    color_uc_c4 = color_uc_c3;
    while (true) {
        bool notlhs_c51 = color_uc_c4.w >= d2;
        bool notrhs_c52 = color_uc_c4.y >= d3;
        bool temp_c53 = notrhs_c52 || notlhs_c51;
        if (temp_c53) {
            break;
        }
        
        vec4 color_c54 = bigColor1_2 + color_uc_c4;
        color_uc_c4 = color_c54;
    }
    
    color_uc_c5 = color_uc_c4;
    while (color_uc_c5.z < d3) {
        vec4 color_c55 = bigColor1_3 + color_uc_c5;
        bool temp_c56 = color_c55.y < d4;
        if (temp_c56) {
            break;
        }
        
        vec4 color_c57 = bigColor1_3 + color_c55;
        color_uc_c5 = color_c57;
    }
    
    i_uc_c6 = const85i_0;
    color_uc_c7 = color_uc_c5;
    while (i_uc_c6 < Count) {
        vec4 color_c58 = bigColor2 + color_uc_c7;
        int temp_c59 = i_uc_c6 + const88i_1;
        i_uc_c6 = temp_c59;
        color_uc_c7 = color_c58;
    }
    
    color_uc_c8 = color_uc_c7;
    while (true) {
        color_c60 = bigColor3 + color_uc_c8;
        bool temp_c61 = color_c60.x < d2;
        if (! temp_c61) {
            break;
        }
        
        color_uc_c8 = color_c60;
    }
    
    float temp_c62 = color_c60.z + d3;
    float temp_c63 = d3 + temp_c62;
    float temp_c64 = d3 + temp_c63;
    float temp_c65 = d3 + temp_c64;
    float temp_c66 = d3 + temp_c65;
    float temp_c67 = d3 + temp_c66;
    float temp_c68 = d3 + temp_c67;
    float temp_c69 = d3 + temp_c68;
    float temp_c70 = d3 + temp_c69;
    float temp_c71 = d3 + temp_c70;
    float temp_c72 = d3 + temp_c71;
    float temp_c73 = d3 + temp_c72;
    float temp_c74 = d3 + temp_c73;
    float temp_c75 = d3 + temp_c74;
    float temp_c76 = d3 + temp_c75;
    float temp_c77 = d3 + temp_c76;
    float temp_c78 = d3 + temp_c77;
    float temp_c79 = d3 + temp_c78;
    float temp_c80 = d3 + temp_c79;
    float temp_c81 = d3 + temp_c80;
    float temp_c82 = d3 + temp_c81;
    float temp_c83 = d3 + temp_c82;
    float temp_c84 = d3 + temp_c83;
    float temp_c85 = d3 + temp_c84;
    float temp_c86 = d3 + temp_c85;
    float temp_c87 = d3 + temp_c86;
    float temp_c88 = d3 + temp_c87;
    float temp_c89 = d3 + temp_c88;
    float temp_c90 = d3 + temp_c89;
    float temp_c91 = d3 + temp_c90;
    float temp_c92 = d3 + temp_c91;
    float temp_c93 = d3 + temp_c92;
    float temp_c94 = d3 + temp_c93;
    float temp_c95 = d3 + temp_c94;
    float temp_c96 = d3 + temp_c95;
    float temp_c97 = d3 + temp_c96;
    float temp_c98 = d3 + temp_c97;
    float temp_c99 = d3 + temp_c98;
    float temp_c100 = d3 + temp_c99;
    float temp_c101 = d3 + temp_c100;
    float temp_c102 = d3 + temp_c101;
    float temp_c103 = d3 + temp_c102;
    vec4 temp133 = color_c60;
    temp133.z = temp_c103;
    temp_c9 = const85i_0;
    color_uc_c10 = temp133;
    for (temp_c9 = 0; temp_c9 != 100; ++temp_c9) {
        bool temp_c104 = color_uc_c10.z < const135;
        float temp_c105 = color_uc_c10.x + const137;
        vec4 temp138 = color_uc_c10;
        temp138.x = temp_c105;
        float temp_c106 = color_uc_c10.y + const137;
        vec4 temp140 = color_uc_c10;
        temp140.y = temp_c106;
        vec4 select_c107 = temp_c104 ? temp138 : temp140;
        color_uc_c10 = select_c107;
    }
    
    temp_c11 = const85i_0;
    color_uc_c12 = color_uc_c10;
    for (temp_c11 = 0; temp_c11 != 120; ++temp_c11) {
        bool temp_c108 = color_uc_c12.z < const135;
        float temp_c109 = color_uc_c12.x + const137;
        vec4 temp144 = color_uc_c12;
        temp144.x = temp_c109;
        float temp_c110 = color_uc_c12.y + const137;
        vec4 temp146 = color_uc_c12;
        temp146.y = temp_c110;
        vec4 select_c111 = temp_c108 ? temp144 : temp146;
        color_uc_c12 = select_c111;
    }
    
    temp_c13 = const85i_0;
    color_uc_c14 = color_uc_c12;
    for (temp_c13 = 0; temp_c13 != 42; ++temp_c13) {
        float temp_c112 = color_uc_c14.z + d3;
        bool temp_c113 = color_uc_c14.x < d4;
        vec4 temp150 = color_uc_c14;
        temp150.z = temp_c112;
        float temp_c114 = color_uc_c14.w + const137;
        vec4 temp152 = color_uc_c14;
        temp152.zw = vec2(temp_c112, temp_c114);
        vec4 select_c115 = temp_c113 ? temp150 : temp152;
        color_uc_c14 = select_c115;
    }
    
    temp_c15 = const85i_0;
    color_uc_c16 = color_uc_c14;
    while (temp_c15 <= const154i_41) {
        bool temp_c116 = color_uc_c16.x < d4;
        if (temp_c116) {
            break;
        }
        
        float temp_c117 = color_uc_c16.z + d3;
        float temp_c118 = color_uc_c16.w + const137;
        vec4 temp158 = color_uc_c16;
        temp158.zw = vec2(temp_c117, temp_c118);
        int temp_c119 = const88i_1 + temp_c15;
        temp_c15 = temp_c119;
        color_uc_c16 = temp158;
    }
    
    color_uc_c17 = color_uc_c16;
    while (true) {
        vec4 color_c120 = bigColor4 + color_uc_c17;
        bool temp_c121 = color_c120.x < d4;
        if (temp_c121) {
            color_uc_c18 = color_c120;
        }
        else {
            bool temp_c122 = color_c120.y < d4;
            float temp_c123 = color_c120.y + d4;
            vec4 temp164 = color_c120;
            temp164.y = temp_c123;
            float temp_c124 = color_c120.x + d4;
            vec4 temp166 = color_c120;
            temp166.x = temp_c124;
            select_c125 = temp_c122 ? temp164 : temp166;
            bool temp_c126 = select_c125.z < d4;
            if (! temp_c126) {
                break;
            }
            
            color_uc_c18 = select_c125;
        }
        
        color_uc_c17 = color_uc_c18;
    }
    
    color_uc_c19 = select_c125;
    while (true) {
        vec4 color_c127 = bigColor5 + color_uc_c19;
        bool temp_c128 = color_c127.y < d5;
        float temp_c129 = color_c127.y + d5;
        vec4 temp172 = color_c127;
        temp172.y = temp_c129;
        select_c130 = temp_c128 ? temp172 : color_c127;
        bool temp_c131 = select_c130.x < d5;
        if (! temp_c131) {
            break;
        }
        
        color_uc_c19 = select_c130;
    }
    
    bool temp_c132 = select_c130.x < d6;
    if (temp_c132) {
        color_uc_c20 = select_c130;
        while (color_uc_c20.y < d6) {
            vec4 color_c133 = bigColor6 + color_uc_c20;
            color_uc_c20 = color_c133;
        }
        
        color_uc_c22 = color_uc_c20;
    }
    else {
        color_uc_c21 = select_c130;
        while (color_uc_c21.z < d6) {
            float temp_c134 = bigColor6.z + color_uc_c21.z;
            vec4 temp179 = color_uc_c21;
            temp179.z = temp_c134;
            color_uc_c21 = temp179;
        }
        
        color_uc_c22 = color_uc_c21;
    }
    
    bool temp_c135 = color_uc_c22.x < d6;
    if (temp_c135) {
        bool temp_c136 = d7 < const137;
        color_uc_c23 = color_uc_c22;
        while (color_uc_c23.y < d6) {
            if (temp_c136) {
                break;
            }
            
            vec4 color_c137 = bigColor6 + color_uc_c23;
            color_uc_c23 = color_c137;
        }
        
        color_uc_c25 = color_uc_c23;
    }
    else {
        color_uc_c24 = color_uc_c22;
        while (color_uc_c24.z < d6) {
            float temp_c138 = bigColor6.z + color_uc_c24.z;
            vec4 temp184 = color_uc_c24;
            temp184.z = temp_c138;
            color_uc_c24 = temp184;
        }
        
        color_uc_c25 = color_uc_c24;
    }
    
    bool temp_c139 = d7 < const186;
    bool temp_c140 = d7 < const137;
    color_uc_c26 = color_uc_c25;
    while (true) {
        if (temp_c139) {
            color_uc_c27 = color_uc_c26;
            break;
        }
        
        color_c141 = bigColor7 + color_uc_c26;
        if (temp_c140) {
            float temp_c142 = color_c141.z + const137;
            vec4 temp190 = color_c141;
            temp190.z = temp_c142;
            color_uc_c27 = temp190;
            break;
        }
        
        vec4 color_c143 = BaseColor + color_c141;
        color_uc_c26 = color_c143;
    }
    
    bool temp_c144 = d8 < const186;
    bool temp_c145 = d8 < const137;
    color_uc_c28 = color_uc_c27;
    while (true) {
        if (temp_c144) {
            color_uc_c29 = color_uc_c28;
            break;
        }
        
        color_c146 = bigColor7 + color_uc_c28;
        if (temp_c145) {
            float temp_c147 = color_c146.z + const137;
            bool temp_c148 = d8 < const197;
            float temp_c149 = color_c146.y + const137;
            vec4 temp199 = color_c146;
            temp199.yz = vec2(temp_c149, temp_c147);
            float temp_c150 = color_c146.x + const137;
            vec4 temp201 = color_c146;
            temp201.xz = vec2(temp_c150, temp_c147);
            vec4 select_c151 = temp_c148 ? temp199 : temp201;
            color_uc_c29 = select_c151;
            break;
        }
        
        color_c152 = BaseColor + color_c146;
        bool temp_c153 = color_c152.z < d8;
        if (! temp_c153) {
            color_uc_c29 = color_c152;
            break;
        }
        
        color_uc_c28 = color_c152;
    }
    
    bool temp_c154 = d9 > d8;
    color_uc_c30 = color_uc_c29;
    while (color_uc_c30.w < d9) {
        color_uc_c32 = color_uc_c30;
        if (temp_c154) {
            bool temp206 = color_uc_c30.x <= d7;
            color_uc_c31 = color_uc_c30;
            if (temp206) {
                bool temp207 = color_uc_c30.z != const208;
                if (temp207) {
                    break;
                }
                
                float temp_c155 = color_uc_c30.w + const137;
                vec4 temp210 = color_uc_c30;
                temp210.w = temp_c155;
                color_uc_c31 = temp210;
            }
            
            color_uc_c32 = color_uc_c31;
        }
        
        color_uc_c30 = color_uc_c32;
    }
    
    color_uc_c33 = color_uc_c30;
    while (color_uc_c33.z < d10) {
        float temp_c156 = color_uc_c33.y + const137;
        vec4 temp212 = color_uc_c33;
        temp212.y = temp_c156;
        bool temp213 = temp_c156 >= d11;
        if (temp213) {
            break;
        }
        
        float temp_c157 = color_uc_c33.z + const137;
        bool temp_c158 = color_uc_c33.w < d12;
        float temp_c159 = color_uc_c33.w + const137;
        vec4 temp217 = temp212;
        temp217.zw = vec2(temp_c157, temp_c159);
        float temp_c160 = color_uc_c33.x + const137;
        vec4 temp219 = temp212;
        temp219.xz = vec2(temp_c160, temp_c157);
        vec4 select_c161 = temp_c158 ? temp217 : temp219;
        color_uc_c33 = select_c161;
    }
    
    color_uc_c34 = color_uc_c33;
    while (color_uc_c34.x < const221) {
        vec4 color_c162 = bigColor8 + color_uc_c34;
        bool temp_c163 = color_c162.z < d8;
        bool temp_c164 = color_c162.w < d6;
        float temp_c165 = bigColor8.x + color_c162.y;
        vec4 temp226 = color_c162;
        temp226.y = temp_c165;
        vec4 color_c166 = temp_c164 ? color_c162 : temp226;
        vec4 ternary_c167 = temp_c163 ? color_c166 : temp226;
        color_uc_c34 = ternary_c167;
    }
    
    vec4 color_c168 = color_uc_c34 + const77;
    color_uc_c35 = color_c168;
    while (color_uc_c35.x < d14) {
        bool temp_c169 = color_uc_c35.y < d15;
        if (temp_c169) {
            FragColor_shadow_c40 = color_c168;
            gl_FragColor = FragColor_shadow_c40;
            return;
        }
        
        vec4 color_c170 = color_uc_c35 + const77;
        color_uc_c35 = color_c170;
    }
    
    vec4 color_c171 = color_uc_c35 + const77;
    color_uc_c36 = color_c171;
    while (color_uc_c36.w < d16) {
        float temp_c172 = color_uc_c36.w + const137;
        vec4 temp234 = color_uc_c36;
        temp234.w = temp_c172;
        color_uc_c36 = temp234;
    }
    
    color_uc_c37 = color_uc_c36;
    while (true) {
        bool notlhs_c173 = color_uc_c37.w >= d2;
        bool notrhs_c174 = color_uc_c37.y >= d3;
        bool temp_c175 = notrhs_c174 || notlhs_c173;
        vec4 color_c176 = bigColor1_2 + color_uc_c37;
        color_uc_c37 = color_c176;
    }
    
    color_uc_c38 = color_uc_c37;
    while (color_uc_c38.y >= d18) {
        color_c177 = color_uc_c38 + const77;
        bool temp_c178 = color_c177.x < d17;
        if (! temp_c178) {
            color_uc_c39 = color_c177;
            while (color_uc_c39.y < d16) {
                bool temp_c179 = color_uc_c39.w < d16;
                if (temp_c179) {
                    discard;
                }
                
                vec4 color_c180 = color_uc_c39 + const77;
                color_uc_c39 = color_c180;
            }
            
            vec4 color_c181 = color_uc_c39 + const77;
            FragColor_shadow_c40 = color_c181;
            gl_FragColor = FragColor_shadow_c40;
            return;
        }
        
        color_uc_c38 = color_c177;
    }
    
    FragColor_shadow_c40 = color_c168;
    gl_FragColor = FragColor_shadow_c40;
    
}


