
Top IR:
; ModuleID = 'Glslang'

@h = internal global float 0.000000e+00
@d = external addrspace(2) constant float
@BaseColor = global <4 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@bigColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %g = alloca float
  %f = alloca float
  %color2 = alloca <4 x float>
  %param = alloca <4 x float>
  %color = alloca <4 x float>
  store float 0.000000e+00, float* @h
  %param1 = load <4 x float>* @BaseColor
  store <4 x float> %param1, <4 x float>* %param
  %0 = call float @"foo(vf4;"(<4 x float>* %param)
  %1 = load <4 x float>* %color2
  %2 = insertelement <4 x float> undef, float %0, i32 0
  %3 = insertelement <4 x float> %2, float %0, i32 1
  %4 = insertelement <4 x float> %3, float %0, i32 2
  %color3 = insertelement <4 x float> %4, float %0, i32 3
  store <4 x float> %color3, <4 x float>* %color
  call void @"bar("()
  %f4 = call float @"unreachableReturn("()
  store float %f4, float* %f
  %g5 = call float @"missingReturn("()
  store float %g5, float* %g
  %5 = load <4 x float>* %color
  %6 = load float* %f
  %7 = insertelement <4 x float> undef, float %6, i32 0
  %8 = insertelement <4 x float> %7, float %6, i32 1
  %9 = insertelement <4 x float> %8, float %6, i32 2
  %10 = insertelement <4 x float> %9, float %6, i32 3
  %11 = fmul <4 x float> %5, %10
  %12 = load float* @h
  %13 = insertelement <4 x float> undef, float %12, i32 0
  %14 = insertelement <4 x float> %13, float %12, i32 1
  %15 = insertelement <4 x float> %14, float %12, i32 2
  %16 = insertelement <4 x float> %15, float %12, i32 3
  %gl_FragColor = fmul <4 x float> %11, %16
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc float @"foo(vf4;"(<4 x float>*) #0 {
entry:
  %1 = load <4 x float>* %0
  %2 = extractelement <4 x float> %1, i32 0
  %3 = load <4 x float>* %0
  %4 = extractelement <4 x float> %3, i32 1
  %5 = fadd float %2, %4
  ret float %5

post-return:                                      ; No predecessors!
  unreachable
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar("() #0 {
entry:
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc float @"unreachableReturn("() #0 {
entry:
  %dummyReturn = alloca float
  %0 = load float addrspace(2)* @d, !gla.uniform !0
  %1 = fcmp olt float %0, 0x4010CCCCC0000000
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  ret float 0x3FF3333340000000

post-return:                                      ; No predecessors!
  br label %ifmerge

else:                                             ; preds = %entry
  ret float 4.500000e+00

post-return1:                                     ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %post-return1, %post-return
  %2 = load float* %dummyReturn
  ret float %2
}

; Function Attrs: alwaysinline
define internal fastcc float @"missingReturn("() #0 {
entry:
  %dummyReturn = alloca float
  %0 = load float addrspace(2)* @d, !gla.uniform !0
  %1 = fcmp olt float %0, 4.500000e+00
  br i1 %1, label %then, label %ifmerge

then:                                             ; preds = %entry
  %h = load float addrspace(2)* @d, !gla.uniform !0
  store float %h, float* @h
  ret float 0x400F333340000000

post-return:                                      ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %post-return
  %2 = load float* %dummyReturn
  ret float %2
}

attributes #0 = { alwaysinline }

!gla.uniforms = !{!0, !2}
!gla.entrypoint = !{!3}
!gla.inputs = !{!4}
!gla.outputs = !{!6}
!gla.noStaticUse = !{!2}

!0 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !1}
!3 = metadata !{metadata !"main", i32 15}
!4 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@d = external addrspace(2) constant float
@BaseColor = global <4 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %param1 = load <4 x float>* @BaseColor, align 16
  %0 = extractelement <4 x float> %param1, i32 0
  %1 = extractelement <4 x float> %param1, i32 1
  %2 = fadd float %0, %1
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %2, <4 x i32> zeroinitializer)
  %4 = load float addrspace(2)* @d, align 4, !gla.uniform !0
  %5 = fcmp olt float %4, 0x4010CCCCC0000000
  %. = select i1 %5, float 0x3FF3333340000000, float 4.500000e+00
  %6 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %., <4 x i32> zeroinitializer)
  %7 = fcmp olt float %4, 4.500000e+00
  br i1 %7, label %then.i, label %ifmerge.i

then.i:                                           ; preds = %entry
  br label %"missingReturn(.exit"

ifmerge.i:                                        ; preds = %entry
  br label %"missingReturn(.exit"

"missingReturn(.exit":                            ; preds = %ifmerge.i, %then.i
  %8 = phi float [ 0.000000e+00, %ifmerge.i ], [ %4, %then.i ]
  %9 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %8, <4 x i32> zeroinitializer)
  %10 = fmul <4 x float> %3, %6
  %gl_FragColor = fmul <4 x float> %10, %9
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %"missingReturn(.exit"
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.uniforms = !{!0, !2}
!gla.entrypoint = !{!3}
!gla.inputs = !{!4}
!gla.outputs = !{!6}
!gla.noStaticUse = !{!2}

!0 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !1}
!3 = metadata !{metadata !"main", i32 15}
!4 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
in vec4 BaseColor;
const float C_4d2 = 4.2;
const float C_1d2 = 1.2;
const float C_4d5 = 4.5;
const float C_0d0 = 0.0;

void main()
{
	float Lg_1;
	float H_9ws3cr = BaseColor.x + BaseColor.y;
	vec4 H_qwppqe = vec4(H_9ws3cr);
	bool H_zdlq2v = d < C_4d2;
	float H_8iih7k1 = H_zdlq2v ? C_1d2 : C_4d5;
	vec4 H_a1eyhf1 = vec4(H_8iih7k1);
	bool H_2bsr8u = d < C_4d5;
	if (H_2bsr8u) {
		Lg_1 = d;
	} else {
		Lg_1 = C_0d0;
	}
	
	vec4 H_zt5qpl = vec4(Lg_1);
	vec4 H_m9v3pf = H_a1eyhf1 * H_qwppqe;
	vec4 Ll_FragColor1 = H_m9v3pf * H_zt5qpl;
	gl_FragColor = Ll_FragColor1;
	
}

#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
in vec4 BaseColor;
const float C_4d2 = 4.2;
const float C_1d2 = 1.2;
const float C_4d5 = 4.5;
const float C_0d0 = 0.0;

void main()
{
	float H_9ws3cr = BaseColor.x + BaseColor.y;
	vec4 H_qwppqe = vec4(H_9ws3cr);
	bool H_zdlq2v = d < C_4d2;
	float H_8iih7k1 = H_zdlq2v ? C_1d2 : C_4d5;
	vec4 H_a1eyhf1 = vec4(H_8iih7k1);
	bool H_2bsr8u = d < C_4d5;
	float Lg_ = H_2bsr8u ? d : C_0d0;
	vec4 H_coqh0u = vec4(Lg_);
	vec4 H_m9v3pf = H_a1eyhf1 * H_qwppqe;
	vec4 Ll_FragColor = H_coqh0u * H_m9v3pf;
	gl_FragColor = Ll_FragColor;
	
}

