
Top IR:
; ModuleID = 'Glslang'

@o = global <4 x float> zeroinitializer
@samp2D = external addrspace(1) constant i32
@samp2DA = external addrspace(1) constant i32
@samp2DR = external addrspace(1) constant i32
@samp2DS = external addrspace(1) constant i32
@io = global <3 x i32> zeroinitializer
@Sca = external addrspace(1) constant i32
@i = global <4 x float> zeroinitializer
@Isca = external addrspace(1) constant i32
@uo = global <4 x i32> zeroinitializer
@Usca = external addrspace(1) constant i32
@a = internal global <3 x float> zeroinitializer
@Scas = external addrspace(1) constant i32
@sampC = external addrspace(1) constant i32
@gl_ClipDistance = global [4 x float] zeroinitializer
@b = internal global float 0.000000e+00
@fflat = global float 0.000000e+00
@fsmooth = global float 0.000000e+00
@fnop = global float 0.000000e+00
@gl_Color = global <4 x float> zeroinitializer
@bounds = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %ai = alloca [3 x i32]
  %0 = load i32 addrspace(1)* @sampC, !gla.uniform !30
  %o = call <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32 4, i32 %0, i32 64, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>, i32 undef, float undef)
  store <4 x float> %o, <4 x float>* @o
  %1 = load float* getelementptr inbounds ([4 x float]* @gl_ClipDistance, i32 0, i32 3)
  %2 = load <4 x float>* @o
  %o1 = insertelement <4 x float> %2, float %1, i32 1
  store <4 x float> %o1, <4 x float>* @o
  call void @"bar3("()
  call void @"bar4("()
  call void @"bar5("()
  call void @"bar6("()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar3("() #0 {
entry:
  %0 = load i32 addrspace(1)* @samp2D, !gla.uniform !6
  %1 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %0, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %2 = load <4 x float>* @o
  %o = fadd <4 x float> %2, %1
  store <4 x float> %o, <4 x float>* @o
  %3 = load i32 addrspace(1)* @samp2DA, !gla.uniform !9
  %4 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32 2, i32 %3, i32 336, <3 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %5 = load <4 x float>* @o
  %o1 = fadd <4 x float> %5, %4
  store <4 x float> %o1, <4 x float>* @o
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar4("() #0 {
entry:
  %0 = load i32 addrspace(1)* @samp2DR, !gla.uniform !12
  %1 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 5, i32 %0, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %2 = load <4 x float>* @o
  %o = fadd <4 x float> %2, %1
  store <4 x float> %o, <4 x float>* @o
  %3 = load i32 addrspace(1)* @samp2DS, !gla.uniform !15
  %4 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %3, i32 2376, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float 0x3FF4CCCCC0000000, <2 x i32> <i32 1, i32 1>)
  %5 = load <4 x float>* @o
  %o1 = fadd <4 x float> %5, %4
  store <4 x float> %o1, <4 x float>* @o
  %6 = load i32 addrspace(1)* @samp2D, !gla.uniform !6
  %7 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %6, i32 1344, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 2, float undef, <2 x i32> <i32 1, i32 1>)
  %8 = load <4 x float>* @o
  %o2 = fadd <4 x float> %8, %7
  store <4 x float> %o2, <4 x float>* @o
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar5("() #0 {
entry:
  %constructed = alloca <4 x float>
  %c = alloca <4 x i32>
  %f = alloca float
  %0 = load i32 addrspace(1)* @Sca, !gla.uniform !18
  %io = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %0, i32 3)
  store <3 x i32> %io, <3 x i32>* @io
  %1 = load i32 addrspace(1)* @Sca, !gla.uniform !18
  %2 = load <4 x float>* @i
  %3 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 4, i32 %1, i32 16, <4 x float> %2)
  %4 = load <4 x float>* @o
  %o = fadd <4 x float> %4, %3
  store <4 x float> %o, <4 x float>* @o
  %5 = load i32 addrspace(1)* @Isca, !gla.uniform !21
  %6 = load <4 x float>* @i
  %7 = call <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32 4, i32 %5, i32 146, <4 x float> %6, float 0x3FE6666660000000, float undef)
  %8 = extractelement <4 x i32> %7, i32 0
  %9 = insertelement <3 x i32> undef, i32 %8, i32 0
  %10 = extractelement <4 x i32> %7, i32 1
  %11 = insertelement <3 x i32> %9, i32 %10, i32 1
  %12 = extractelement <4 x i32> %7, i32 2
  %13 = insertelement <3 x i32> %11, i32 %12, i32 2
  %14 = load <3 x i32>* @io
  %io1 = add <3 x i32> %14, %13
  store <3 x i32> %io1, <3 x i32>* @io
  %15 = load i32 addrspace(1)* @Usca, !gla.uniform !24
  %16 = load <4 x float>* @i
  %uo = call <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32 4, i32 %15, i32 16, <4 x float> %16)
  store <4 x i32> %uo, <4 x i32>* @uo
  %17 = load i32 addrspace(1)* @Sca, !gla.uniform !18
  %18 = load <4 x float>* @i
  %19 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 4, i32 %17, i32 148, <4 x float> %18, float 0x3FFB333340000000, float undef)
  %20 = load <4 x float>* @o
  %o2 = fadd <4 x float> %20, %19
  store <4 x float> %o2, <4 x float>* @o
  %21 = load i32 addrspace(1)* @Scas, !gla.uniform !27
  %22 = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %21, i32 3)
  %a = sitofp <3 x i32> %22 to <3 x float>
  store <3 x float> %a, <3 x float>* @a
  %23 = load i32 addrspace(1)* @Scas, !gla.uniform !27
  %24 = load <4 x float>* @i
  %25 = load <4 x float>* @i
  %26 = extractelement <4 x float> %25, i32 1
  %f3 = call float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32 4, i32 %23, i32 154, <4 x float> %24, float %26, float undef)
  store float %f3, float* %f
  %27 = load i32 addrspace(1)* @Isca, !gla.uniform !21
  %28 = load <4 x float>* @i
  %c4 = call <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32 4, i32 %27, i32 16, <4 x float> %28, float undef, float undef, i32 undef, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>)
  store <4 x i32> %c4, <4 x i32>* %c
  %29 = load <3 x float>* @a
  %30 = load float* %f
  %31 = load <4 x i32>* %c
  %32 = sitofp <4 x i32> %31 to <4 x float>
  %33 = insertelement <4 x float> undef, float %30, i32 0
  %34 = insertelement <4 x float> %33, float %30, i32 1
  %35 = insertelement <4 x float> %34, float %30, i32 2
  %36 = insertelement <4 x float> %35, float %30, i32 3
  %37 = fadd <4 x float> %36, %32
  %38 = load <4 x float>* %constructed
  %39 = extractelement <3 x float> %29, i32 0
  %40 = insertelement <4 x float> %38, float %39, i32 0
  %41 = extractelement <3 x float> %29, i32 1
  %42 = insertelement <4 x float> %40, float %41, i32 1
  %43 = extractelement <3 x float> %29, i32 2
  %44 = insertelement <4 x float> %42, float %43, i32 2
  %45 = extractelement <4 x float> %37, i32 0
  %46 = insertelement <4 x float> %44, float %45, i32 3
  %47 = load <4 x float>* @o
  %o5 = fadd <4 x float> %47, %46
  store <4 x float> %o5, <4 x float>* @o
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar6("() #0 {
entry:
  %b = alloca float
  %m43 = alloca [4 x <3 x float>]
  %a1 = alloca float
  %0 = getelementptr [4 x <3 x float>]* %m43, i32 0, i32 3
  %1 = load <3 x float>* %0
  %a11 = extractelement <3 x float> %1, i32 1
  store float %a11, float* %a1
  %2 = load float* %a1
  %b2 = fmul float 2.000000e+00, %2
  store float %b2, float* %b
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32, i32, i32, <2 x float>, i32, float, <2 x i32>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float, <2 x i32>) #1

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32, i32, i32, <4 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32, i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32, i32, i32, <4 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32, i32, i32, <4 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32, i32, i32, <4 x float>, float, float, i32, <3 x float>, <3 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float) #1

attributes #0 = { alwaysinline }
attributes #1 = { nounwind readnone }

!gla.outputs = !{!0, !2, !4}
!gla.uniforms = !{!6, !9, !12, !15, !18, !21, !24, !27, !30, !33}
!gla.inputs = !{!36, !38, !40, !42, !44, !46}
!gla.entrypoint = !{!48}
!gla.noStaticUse = !{!40, !42, !44, !46, !33}

!0 = metadata !{metadata !"o", i32 7, <4 x float>* @o_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"io", i32 7, <3 x i32>* @io_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!4 = metadata !{metadata !"uo", i32 7, <4 x i32>* @uo_typeProxy, metadata !5}
!5 = metadata !{i32 1, i32 0, i32 1027, null, i32 0}
!6 = metadata !{metadata !"samp2D", i32 12, i32* @samp2D_typeProxy, metadata !7}
!7 = metadata !{i32 5, i32 0, i32 1024, metadata !8}
!8 = metadata !{i32 0, i32* @samp2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!9 = metadata !{metadata !"samp2DA", i32 12, i32* @samp2DA_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, i32* @samp2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!12 = metadata !{metadata !"samp2DR", i32 12, i32* @samp2DR_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 1024, metadata !14}
!14 = metadata !{i32 0, i32* @samp2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!15 = metadata !{metadata !"samp2DS", i32 12, i32* @samp2DS_typeProxy, metadata !16}
!16 = metadata !{i32 5, i32 0, i32 1024, metadata !17}
!17 = metadata !{i32 0, i32* @samp2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!18 = metadata !{metadata !"Sca", i32 12, i32* @Sca_typeProxy, metadata !19}
!19 = metadata !{i32 5, i32 0, i32 1024, metadata !20}
!20 = metadata !{i32 0, i32* @Sca_typeProxy, i32 3, i1 true, i1 false, i32 0}
!21 = metadata !{metadata !"Isca", i32 12, i32* @Isca_typeProxy, metadata !22}
!22 = metadata !{i32 5, i32 0, i32 1024, metadata !23}
!23 = metadata !{i32 0, i32* @Isca_typeProxy, i32 3, i1 true, i1 false, i32 1}
!24 = metadata !{metadata !"Usca", i32 12, i32* @Usca_typeProxy, metadata !25}
!25 = metadata !{i32 5, i32 0, i32 1024, metadata !26}
!26 = metadata !{i32 0, i32* @Usca_typeProxy, i32 3, i1 true, i1 false, i32 2}
!27 = metadata !{metadata !"Scas", i32 12, i32* @Scas_typeProxy, metadata !28}
!28 = metadata !{i32 5, i32 0, i32 1024, metadata !29}
!29 = metadata !{i32 0, i32* @Scas_typeProxy, i32 3, i1 true, i1 true, i32 0}
!30 = metadata !{metadata !"sampC", i32 12, i32* @sampC_typeProxy, metadata !31}
!31 = metadata !{i32 5, i32 0, i32 1024, metadata !32}
!32 = metadata !{i32 0, i32* @sampC_typeProxy, i32 3, i1 false, i1 false, i32 0}
!33 = metadata !{metadata !"bounds", i32 12, i32* @bounds_typeProxy, metadata !34}
!34 = metadata !{i32 5, i32 0, i32 1024, metadata !35}
!35 = metadata !{i32 0, i32* @bounds_typeProxy, i32 1, i1 false, i1 false, i32 0}
!36 = metadata !{metadata !"i", i32 1, <4 x float>* @i_typeProxy, metadata !37}
!37 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!38 = metadata !{metadata !"gl_ClipDistance", i32 1, [4 x float]* @gl_ClipDistance_typeProxy, metadata !39}
!39 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!40 = metadata !{metadata !"fflat", i32 1, float* @fflat_typeProxy, metadata !41}
!41 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}
!42 = metadata !{metadata !"fsmooth", i32 1, float* @fsmooth_typeProxy, metadata !43}
!43 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!44 = metadata !{metadata !"fnop", i32 1, float* @fnop_typeProxy, metadata !45}
!45 = metadata !{i32 0, i32 0, i32 1034, null, i32 2}
!46 = metadata !{metadata !"gl_Color", i32 1, <4 x float>* @gl_Color_typeProxy, metadata !47}
!47 = metadata !{i32 0, i32 0, i32 1035, null, i32 1}
!48 = metadata !{metadata !"main", i32 15}


Bottom IR:
; ModuleID = 'Glslang'

@o = global <4 x float> zeroinitializer
@samp2D = external addrspace(1) constant i32
@samp2DA = external addrspace(1) constant i32
@samp2DR = external addrspace(1) constant i32
@samp2DS = external addrspace(1) constant i32
@io = global <3 x i32> zeroinitializer
@Sca = external addrspace(1) constant i32
@i = global <4 x float> zeroinitializer
@Isca = external addrspace(1) constant i32
@uo = global <4 x i32> zeroinitializer
@Usca = external addrspace(1) constant i32
@Scas = external addrspace(1) constant i32
@sampC = external addrspace(1) constant i32
@gl_ClipDistance = global [4 x float] zeroinitializer
@fflat = global float 0.000000e+00
@fsmooth = global float 0.000000e+00
@fnop = global float 0.000000e+00
@gl_Color = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @sampC, align 4, !gla.uniform !30
  %o = call <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32 4, i32 %0, i32 64, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>, i32 undef, float undef)
  store <4 x float> %o, <4 x float>* @o, align 16
  %gla_constGEP = getelementptr [4 x float]* @gl_ClipDistance, i32 0, i32 3
  %1 = load float* %gla_constGEP, align 4
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %o, i32 2, float undef, i32 undef, float %1, i32 0, float undef, i32 undef, float undef, i32 undef)
  store <4 x float> %2, <4 x float>* @o, align 16
  %3 = load i32 addrspace(1)* @samp2D, align 4, !gla.uniform !6
  %4 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %3, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %o.i = fadd <4 x float> %2, %4
  store <4 x float> %o.i, <4 x float>* @o, align 16
  %5 = load i32 addrspace(1)* @samp2DA, align 4, !gla.uniform !9
  %6 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32 2, i32 %5, i32 336, <3 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %o1.i = fadd <4 x float> %o.i, %6
  store <4 x float> %o1.i, <4 x float>* @o, align 16
  %7 = load i32 addrspace(1)* @samp2DR, align 4, !gla.uniform !12
  %8 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 5, i32 %7, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %o.i3 = fadd <4 x float> %o1.i, %8
  store <4 x float> %o.i3, <4 x float>* @o, align 16
  %9 = load i32 addrspace(1)* @samp2DS, align 4, !gla.uniform !15
  %10 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %9, i32 2376, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float 0x3FF4CCCCC0000000, <2 x i32> <i32 1, i32 1>)
  %o1.i4 = fadd <4 x float> %o.i3, %10
  %11 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %3, i32 1344, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 2, float undef, <2 x i32> <i32 1, i32 1>)
  %o2.i5 = fadd <4 x float> %o1.i4, %11
  store <4 x float> %o2.i5, <4 x float>* @o, align 16
  %12 = load i32 addrspace(1)* @Sca, align 4, !gla.uniform !18
  %io.i = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %12, i32 3)
  store <3 x i32> %io.i, <3 x i32>* @io, align 16
  %13 = load <4 x float>* @i, align 16
  %14 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 4, i32 %12, i32 16, <4 x float> %13)
  %o.i2 = fadd <4 x float> %o2.i5, %14
  store <4 x float> %o.i2, <4 x float>* @o, align 16
  %15 = load i32 addrspace(1)* @Isca, align 4, !gla.uniform !21
  %16 = call <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32 4, i32 %15, i32 146, <4 x float> %13, float 0x3FE6666660000000, float undef)
  %17 = call <3 x i32> @llvm.gla.swizzle.v3i32.v4i32.v3i32(<4 x i32> %16, <3 x i32> <i32 0, i32 1, i32 2>)
  %io1.i = add <3 x i32> %io.i, %17
  store <3 x i32> %io1.i, <3 x i32>* @io, align 16
  %18 = load i32 addrspace(1)* @Usca, align 4, !gla.uniform !24
  %uo.i = call <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32 4, i32 %18, i32 16, <4 x float> %13)
  store <4 x i32> %uo.i, <4 x i32>* @uo, align 16
  %19 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 4, i32 %12, i32 148, <4 x float> %13, float 0x3FFB333340000000, float undef)
  %o2.i = fadd <4 x float> %19, %o.i2
  store <4 x float> %o2.i, <4 x float>* @o, align 16
  %20 = load i32 addrspace(1)* @Scas, align 4, !gla.uniform !27
  %21 = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %20, i32 3)
  %a.i = sitofp <3 x i32> %21 to <3 x float>
  %22 = extractelement <4 x float> %13, i32 1
  %f3.i = call float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32 4, i32 %20, i32 154, <4 x float> %13, float %22, float undef)
  %c4.i = call <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32 4, i32 %15, i32 16, <4 x float> %13, float undef, float undef, i32 undef, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>)
  %23 = extractelement <4 x i32> %c4.i, i32 0
  %.rhs = sitofp i32 %23 to float
  %24 = fadd float %f3.i, %.rhs
  %25 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float> undef, i32 15, <3 x float> %a.i, i32 0, <3 x float> %a.i, i32 1, <3 x float> %a.i, i32 2, float %24, i32 0)
  %o5.i = fadd <4 x float> %o2.i, %25
  store <4 x float> %o5.i, <4 x float>* @o, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32, i32, i32, <2 x float>, i32, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32, i32, i32, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32, i32, i32, <4 x float>, float, float, i32, <3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.swizzle.v3i32.v4i32.v3i32(<4 x i32>, <3 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.outputs = !{!0, !2, !4}
!gla.uniforms = !{!6, !9, !12, !15, !18, !21, !24, !27, !30, !33}
!gla.inputs = !{!36, !38, !40, !42, !44, !46}
!gla.entrypoint = !{!48}
!gla.noStaticUse = !{!40, !42, !44, !46, !33}

!0 = metadata !{metadata !"o", i32 7, <4 x float>* @o_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"io", i32 7, <3 x i32>* @io_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!4 = metadata !{metadata !"uo", i32 7, <4 x i32>* @uo_typeProxy, metadata !5}
!5 = metadata !{i32 1, i32 0, i32 1027, null, i32 0}
!6 = metadata !{metadata !"samp2D", i32 12, i32* @samp2D_typeProxy, metadata !7}
!7 = metadata !{i32 5, i32 0, i32 1024, metadata !8}
!8 = metadata !{i32 0, i32* @samp2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!9 = metadata !{metadata !"samp2DA", i32 12, i32* @samp2DA_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, i32* @samp2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!12 = metadata !{metadata !"samp2DR", i32 12, i32* @samp2DR_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 1024, metadata !14}
!14 = metadata !{i32 0, i32* @samp2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!15 = metadata !{metadata !"samp2DS", i32 12, i32* @samp2DS_typeProxy, metadata !16}
!16 = metadata !{i32 5, i32 0, i32 1024, metadata !17}
!17 = metadata !{i32 0, i32* @samp2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!18 = metadata !{metadata !"Sca", i32 12, i32* @Sca_typeProxy, metadata !19}
!19 = metadata !{i32 5, i32 0, i32 1024, metadata !20}
!20 = metadata !{i32 0, i32* @Sca_typeProxy, i32 3, i1 true, i1 false, i32 0}
!21 = metadata !{metadata !"Isca", i32 12, i32* @Isca_typeProxy, metadata !22}
!22 = metadata !{i32 5, i32 0, i32 1024, metadata !23}
!23 = metadata !{i32 0, i32* @Isca_typeProxy, i32 3, i1 true, i1 false, i32 1}
!24 = metadata !{metadata !"Usca", i32 12, i32* @Usca_typeProxy, metadata !25}
!25 = metadata !{i32 5, i32 0, i32 1024, metadata !26}
!26 = metadata !{i32 0, i32* @Usca_typeProxy, i32 3, i1 true, i1 false, i32 2}
!27 = metadata !{metadata !"Scas", i32 12, i32* @Scas_typeProxy, metadata !28}
!28 = metadata !{i32 5, i32 0, i32 1024, metadata !29}
!29 = metadata !{i32 0, i32* @Scas_typeProxy, i32 3, i1 true, i1 true, i32 0}
!30 = metadata !{metadata !"sampC", i32 12, i32* @sampC_typeProxy, metadata !31}
!31 = metadata !{i32 5, i32 0, i32 1024, metadata !32}
!32 = metadata !{i32 0, i32* @sampC_typeProxy, i32 3, i1 false, i1 false, i32 0}
!33 = metadata !{metadata !"bounds", i32 12, i32* @bounds_typeProxy, metadata !34}
!34 = metadata !{i32 5, i32 0, i32 1024, metadata !35}
!35 = metadata !{i32 0, i32* @bounds_typeProxy, i32 1, i1 false, i1 false, i32 0}
!36 = metadata !{metadata !"i", i32 1, <4 x float>* @i_typeProxy, metadata !37}
!37 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!38 = metadata !{metadata !"gl_ClipDistance", i32 1, [4 x float]* @gl_ClipDistance_typeProxy, metadata !39}
!39 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!40 = metadata !{metadata !"fflat", i32 1, float* @fflat_typeProxy, metadata !41}
!41 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}
!42 = metadata !{metadata !"fsmooth", i32 1, float* @fsmooth_typeProxy, metadata !43}
!43 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!44 = metadata !{metadata !"fnop", i32 1, float* @fnop_typeProxy, metadata !45}
!45 = metadata !{i32 0, i32 0, i32 1034, null, i32 2}
!46 = metadata !{metadata !"gl_Color", i32 1, <4 x float>* @gl_Color_typeProxy, metadata !47}
!47 = metadata !{i32 0, i32 0, i32 1035, null, i32 1}
!48 = metadata !{metadata !"main", i32 15}
#version 130
// LunarGOO output
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_texture_cube_map_array : enable
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_texture_rectangle : enable
uniform sampler2D samp2D;
uniform sampler2DArray samp2DA;
uniform sampler2DRect samp2DR;
uniform sampler2DShadow samp2DS;
uniform samplerCubeArray Sca;
uniform isamplerCubeArray Isca;
uniform usamplerCubeArray Usca;
uniform samplerCubeArrayShadow Scas;
uniform samplerCube sampC;
uniform sampler2D bounds;
in vec4 i;
in float gl_ClipDistance[4];
flat in float fflat;
in float fsmooth;
noperspective in float fnop;
out vec4 o;
out ivec3 io;
out uvec4 uo;
const vec3 const22 = vec3(0.2);
const vec2 const25 = vec2(0.3);
const ivec2 const26 = ivec2(1);
const vec3 const29 = vec3(0.3);
const float const34 = 1.3;
const int const37i_2 = 2;
const int const40i_3 = 3;
const float const44 = 0.7;
const float const49 = 1.7;
const vec3 const55 = vec3(0.1);

void main()
{
    vec4 temp21 = textureGather(sampC, const22);
    o = temp21;
    vec4 temp23 = temp21;
    temp23.y = gl_ClipDistance[3];
    o = temp23;
    vec4 temp24 = textureGatherOffset(samp2D, const25, const26);
    vec4 o_i_c1 = temp23 + temp24;
    o = o_i_c1;
    vec4 temp28 = textureGatherOffset(samp2DA, const29, const26);
    vec4 temp30 = o_i_c1 + temp28;
    o = temp30;
    vec4 temp31 = textureGatherOffset(samp2DR, const25, const26);
    vec4 o_i_c2 = temp30 + temp31;
    o = o_i_c2;
    vec4 temp33 = textureGatherOffset(samp2DS, const25, const34, const26);
    vec4 temp35 = o_i_c2 + temp33;
    vec4 temp36 = textureGatherOffset(samp2D, const25, const26, const37i_2);
    vec4 temp38 = temp35 + temp36;
    o = temp38;
    ivec3 io_i_c3 = textureSize(Sca, const40i_3);
    io = io_i_c3;
    vec4 temp41 = texture(Sca, i);
    vec4 o_i_c4 = temp38 + temp41;
    o = o_i_c4;
    ivec4 temp43 = texture(Isca, i, const44);
    ivec3 temp45 = ivec3(temp43);
    ivec3 io_c5 = io_i_c3 + temp45;
    io = io_c5;
    ivec4 uo_i_c6 = ivec4(texture(Usca, i));
    uo = uvec4(uo_i_c6);
    vec4 temp48 = textureLod(Sca, i, const49);
    vec4 temp50 = o_i_c4 + temp48;
    o = temp50;
    ivec3 temp51 = textureSize(Scas, const40i_3);
    vec3 a_i_c7 = vec3(temp51);
    float temp53 = texture(Scas, i, i.y);
    ivec4 temp54 = textureGrad(Isca, i, const55, const22);
    float _rhs_c8 = float(temp54.x);
    float temp57 = _rhs_c8 + temp53;
    vec4 temp58 = vec4(a_i_c7.x, a_i_c7.y, a_i_c7.z, temp57);
    vec4 temp59 = temp50 + temp58;
    o = temp59;
    
}


#version 130
// LunarGOO output
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_texture_cube_map_array : enable
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_texture_rectangle : enable
uniform samplerCube sampC;
uniform sampler2D samp2D;
uniform sampler2DArray samp2DA;
uniform sampler2DRect samp2DR;
uniform sampler2DShadow samp2DS;
uniform samplerCubeArray Sca;
uniform isamplerCubeArray Isca;
uniform usamplerCubeArray Usca;
uniform samplerCubeArrayShadow Scas;
uniform sampler2D bounds;
in float gl_ClipDistance[4];
in vec4 i;
flat in float fflat;
in float fsmooth;
noperspective in float fnop;
out vec4 o;
out ivec3 io;
out uvec4 uo;
const vec3 const22 = vec3(0.2);
const vec2 const25 = vec2(0.3);
const ivec2 const26 = ivec2(1);
const vec3 const29 = vec3(0.3);
const float const34 = 1.3;
const int const37i_2 = 2;
const int const40i_3 = 3;
const float const44 = 0.7;
const float const49 = 1.7;
const vec3 const55 = vec3(0.1);

void main()
{
    vec4 temp_c1 = textureGather(sampC, const22);
    o = temp_c1;
    vec4 temp23 = temp_c1;
    temp23.y = gl_ClipDistance[3];
    o = temp23;
    vec4 temp_c2 = textureGatherOffset(samp2D, const25, const26);
    vec4 o_i_c3 = temp23 + temp_c2;
    o = o_i_c3;
    vec4 temp_c4 = textureGatherOffset(samp2DA, const29, const26);
    vec4 temp_c5 = o_i_c3 + temp_c4;
    o = temp_c5;
    vec4 temp_c6 = textureGatherOffset(samp2DR, const25, const26);
    vec4 o_i_c7 = temp_c5 + temp_c6;
    o = o_i_c7;
    vec4 temp_c8 = textureGatherOffset(samp2DS, const25, const34, const26);
    vec4 temp_c9 = o_i_c7 + temp_c8;
    vec4 temp_c10 = textureGatherOffset(samp2D, const25, const26, const37i_2);
    vec4 temp_c11 = temp_c10 + temp_c9;
    o = temp_c11;
    ivec3 io_i_c12 = textureSize(Sca, const40i_3);
    io = io_i_c12;
    vec4 temp_c13 = texture(Sca, i);
    vec4 o_i_c14 = temp_c11 + temp_c13;
    o = o_i_c14;
    ivec4 temp_c15 = texture(Isca, i, const44);
    ivec3 temp45 = ivec3(temp_c15);
    ivec3 io_c16 = io_i_c12 + temp45;
    io = io_c16;
    ivec4 uo_i_c17 = ivec4(texture(Usca, i));
    uo = uvec4(uo_i_c17);
    vec4 temp_c18 = textureLod(Sca, i, const49);
    vec4 temp_c19 = o_i_c14 + temp_c18;
    o = temp_c19;
    ivec3 temp_c20 = textureSize(Scas, const40i_3);
    vec3 a_i_c21 = vec3(temp_c20);
    float temp_c22 = texture(Scas, i, i.y);
    ivec4 temp_c23 = textureGrad(Isca, i, const55, const22);
    float _rhs_c24 = float(temp_c23.x);
    float temp_c25 = _rhs_c24 + temp_c22;
    vec4 temp58 = vec4(a_i_c21.x, a_i_c21.y, a_i_c21.z, temp_c25);
    vec4 temp_c26 = temp58 + temp_c19;
    o = temp_c26;
    
}


