
Top IR:
; ModuleID = 'Glslang'

@o = global <4 x float> zeroinitializer
@samp2D = external addrspace(1) constant i32
@samp2DA = external addrspace(1) constant i32
@samp2DR = external addrspace(1) constant i32
@samp2DS = external addrspace(1) constant i32
@io = global <3 x i32> zeroinitializer
@Sca = external addrspace(1) constant i32
@i = global <4 x float> zeroinitializer
@Isca = external addrspace(1) constant i32
@uo = global <4 x i32> zeroinitializer
@Usca = external addrspace(1) constant i32
@a = internal global <3 x float> zeroinitializer
@Scas = external addrspace(1) constant i32
@s2DR = external addrspace(1) constant i32
@v2 = external addrspace(2) constant <2 x float>
@v3 = external addrspace(2) constant <3 x float>
@v4 = external addrspace(2) constant <4 x float>
@s2DRS = external addrspace(1) constant i32
@s1D = external addrspace(1) constant i32
@f = external addrspace(2) constant float
@s2D = external addrspace(1) constant i32
@s2DS = external addrspace(1) constant i32
@sampC = external addrspace(1) constant i32
@gl_ClipDistance = global [4 x float] zeroinitializer
@b = internal global float 0.000000e+00
@fflat = global float 0.000000e+00
@fsmooth = global float 0.000000e+00
@fnop = global float 0.000000e+00
@gl_Color = global <4 x float> zeroinitializer
@bounds = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %ai = alloca [3 x i32]
  %0 = load i32 addrspace(1)* @sampC, !gla.uniform !50
  %o = call <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32 4, i32 %0, i32 64, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>, i32 undef, float undef)
  store <4 x float> %o, <4 x float>* @o
  %1 = load float* getelementptr inbounds ([4 x float]* @gl_ClipDistance, i32 0, i32 3)
  %2 = load <4 x float>* @o
  %o1 = insertelement <4 x float> %2, float %1, i32 1
  store <4 x float> %o1, <4 x float>* @o
  call void @"bar3("()
  call void @"bar4("()
  call void @"bar5("()
  call void @"bar6("()
  call void @"bar7("()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar3("() #0 {
entry:
  %0 = load i32 addrspace(1)* @samp2D, !gla.uniform !6
  %o = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %0, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %1 = load <4 x float>* @o
  %o1 = fadd <4 x float> %1, %o
  store <4 x float> %o1, <4 x float>* @o
  %2 = load i32 addrspace(1)* @samp2DA, !gla.uniform !9
  %o2 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32 2, i32 %2, i32 336, <3 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %3 = load <4 x float>* @o
  %o3 = fadd <4 x float> %3, %o2
  store <4 x float> %o3, <4 x float>* @o
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar4("() #0 {
entry:
  %0 = load i32 addrspace(1)* @samp2DR, !gla.uniform !12
  %o = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 5, i32 %0, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %1 = load <4 x float>* @o
  %o1 = fadd <4 x float> %1, %o
  store <4 x float> %o1, <4 x float>* @o
  %2 = load i32 addrspace(1)* @samp2DS, !gla.uniform !15
  %o2 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %2, i32 2376, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float 0x3FF4CCCCC0000000, <2 x i32> <i32 1, i32 1>)
  %3 = load <4 x float>* @o
  %o3 = fadd <4 x float> %3, %o2
  store <4 x float> %o3, <4 x float>* @o
  %4 = load i32 addrspace(1)* @samp2D, !gla.uniform !6
  %o4 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %4, i32 1344, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 2, float undef, <2 x i32> <i32 1, i32 1>)
  %5 = load <4 x float>* @o
  %o5 = fadd <4 x float> %5, %o4
  store <4 x float> %o5, <4 x float>* @o
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar5("() #0 {
entry:
  %o11 = alloca <4 x float>
  %c = alloca <4 x i32>
  %f = alloca float
  %0 = load i32 addrspace(1)* @Sca, !gla.uniform !18
  %io = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %0, i32 3)
  store <3 x i32> %io, <3 x i32>* @io
  %1 = load i32 addrspace(1)* @Sca, !gla.uniform !18
  %2 = load <4 x float>* @i
  %o = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 4, i32 %1, i32 16, <4 x float> %2)
  %3 = load <4 x float>* @o
  %o1 = fadd <4 x float> %3, %o
  store <4 x float> %o1, <4 x float>* @o
  %4 = load i32 addrspace(1)* @Isca, !gla.uniform !21
  %5 = load <4 x float>* @i
  %io2 = call <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32 4, i32 %4, i32 146, <4 x float> %5, float 0x3FE6666660000000, float undef)
  %6 = extractelement <4 x i32> %io2, i32 0
  %7 = insertelement <3 x i32> undef, i32 %6, i32 0
  %8 = extractelement <4 x i32> %io2, i32 1
  %9 = insertelement <3 x i32> %7, i32 %8, i32 1
  %10 = extractelement <4 x i32> %io2, i32 2
  %11 = insertelement <3 x i32> %9, i32 %10, i32 2
  %12 = load <3 x i32>* @io
  %io3 = add <3 x i32> %12, %11
  store <3 x i32> %io3, <3 x i32>* @io
  %13 = load i32 addrspace(1)* @Usca, !gla.uniform !24
  %14 = load <4 x float>* @i
  %uo = call <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32 4, i32 %13, i32 16, <4 x float> %14)
  store <4 x i32> %uo, <4 x i32>* @uo
  %15 = load i32 addrspace(1)* @Sca, !gla.uniform !18
  %16 = load <4 x float>* @i
  %o4 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 4, i32 %15, i32 148, <4 x float> %16, float 0x3FFB333340000000, float undef)
  %17 = load <4 x float>* @o
  %o5 = fadd <4 x float> %17, %o4
  store <4 x float> %o5, <4 x float>* @o
  %18 = load i32 addrspace(1)* @Scas, !gla.uniform !27
  %a = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %18, i32 3)
  %a6 = sitofp <3 x i32> %a to <3 x float>
  store <3 x float> %a6, <3 x float>* @a
  %19 = load i32 addrspace(1)* @Scas, !gla.uniform !27
  %20 = load <4 x float>* @i
  %21 = load <4 x float>* @i
  %22 = extractelement <4 x float> %21, i32 1
  %f8 = call float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32 4, i32 %19, i32 154, <4 x float> %20, float %22, float undef)
  store float %f8, float* %f
  %23 = load i32 addrspace(1)* @Isca, !gla.uniform !21
  %24 = load <4 x float>* @i
  %c10 = call <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32 4, i32 %23, i32 16, <4 x float> %24, float undef, float undef, i32 undef, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>)
  store <4 x i32> %c10, <4 x i32>* %c
  %25 = load <3 x float>* @a
  %26 = load float* %f
  %27 = load <4 x i32>* %c
  %28 = sitofp <4 x i32> %27 to <4 x float>
  %29 = insertelement <4 x float> undef, float %26, i32 0
  %30 = insertelement <4 x float> %29, float %26, i32 1
  %31 = insertelement <4 x float> %30, float %26, i32 2
  %32 = insertelement <4 x float> %31, float %26, i32 3
  %33 = fadd <4 x float> %32, %28
  %34 = load <4 x float>* %o11
  %35 = extractelement <3 x float> %25, i32 0
  %36 = insertelement <4 x float> %34, float %35, i32 0
  %37 = extractelement <3 x float> %25, i32 1
  %38 = insertelement <4 x float> %36, float %37, i32 1
  %39 = extractelement <3 x float> %25, i32 2
  %40 = insertelement <4 x float> %38, float %39, i32 2
  %41 = extractelement <4 x float> %33, i32 0
  %42 = insertelement <4 x float> %40, float %41, i32 3
  %43 = load <4 x float>* @o
  %o12 = fadd <4 x float> %43, %42
  store <4 x float> %o12, <4 x float>* @o
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar6("() #0 {
entry:
  %b = alloca float
  %m43 = alloca [4 x <3 x float>]
  %a1 = alloca float
  %0 = getelementptr [4 x <3 x float>]* %m43, i32 0, i32 3
  %1 = load <3 x float>* %0
  %a11 = extractelement <3 x float> %1, i32 1
  store float %a11, float* %a1
  %2 = load float* %a1
  %b2 = fmul float 2.000000e+00, %2
  store float %b2, float* %b
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar7("() #0 {
entry:
  %v = alloca <4 x float>
  %0 = load i32 addrspace(1)* @s2DR, !gla.uniform !30
  %1 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %o = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 5, i32 %0, i32 0, <2 x float> %1)
  %2 = load <4 x float>* @o
  %o1 = fadd <4 x float> %2, %o
  store <4 x float> %o1, <4 x float>* @o
  %3 = load i32 addrspace(1)* @s2DR, !gla.uniform !30
  %4 = load <3 x float> addrspace(2)* @v3, !gla.uniform !35
  %o2 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 5, i32 %3, i32 1, <3 x float> %4)
  %5 = load <4 x float>* @o
  %o3 = fadd <4 x float> %5, %o2
  store <4 x float> %o3, <4 x float>* @o
  %6 = load i32 addrspace(1)* @s2DR, !gla.uniform !30
  %7 = load <4 x float> addrspace(2)* @v4, !gla.uniform !36
  %o4 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 5, i32 %6, i32 1, <4 x float> %7)
  %8 = load <4 x float>* @o
  %o5 = fadd <4 x float> %8, %o4
  store <4 x float> %o5, <4 x float>* @o
  %9 = load i32 addrspace(1)* @s2DRS, !gla.uniform !37
  %10 = load <3 x float> addrspace(2)* @v3, !gla.uniform !35
  %o6 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 5, i32 %9, i32 8, <3 x float> %10, float undef, float undef)
  %11 = load <4 x float>* @o
  %o7 = fadd <4 x float> %11, %o6
  store <4 x float> %o7, <4 x float>* @o
  %12 = load i32 addrspace(1)* @s2DRS, !gla.uniform !37
  %13 = load <4 x float> addrspace(2)* @v4, !gla.uniform !36
  %o8 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 5, i32 %12, i32 9, <4 x float> %13, float undef, float undef)
  %14 = load <4 x float>* @o
  %o9 = fadd <4 x float> %14, %o8
  store <4 x float> %o9, <4 x float>* @o
  %15 = load i32 addrspace(1)* @s1D, !gla.uniform !40
  %16 = load float addrspace(2)* @f, !gla.uniform !43
  %17 = load float addrspace(2)* @f, !gla.uniform !43
  %18 = load float addrspace(2)* @f, !gla.uniform !43
  %o10 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.f32.i32.f32.f32(i32 1, i32 %15, i32 0, float %16, float undef, float undef, i32 undef, float %17, float %18)
  %19 = load <4 x float>* @o
  %o11 = fadd <4 x float> %19, %o10
  store <4 x float> %o11, <4 x float>* @o
  %20 = load i32 addrspace(1)* @s2D, !gla.uniform !44
  %21 = load <4 x float>* %v
  %22 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %23 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %o12 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 2, i32 %20, i32 1, <4 x float> %21, float undef, float undef, i32 undef, <2 x float> %22, <2 x float> %23)
  %24 = load <4 x float>* @o
  %o13 = fadd <4 x float> %24, %o12
  store <4 x float> %o13, <4 x float>* @o
  %25 = load i32 addrspace(1)* @s2DS, !gla.uniform !47
  %26 = load <4 x float>* %v
  %27 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %28 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %o14 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 2, i32 %25, i32 9, <4 x float> %26, float undef, float undef, i32 undef, <2 x float> %27, <2 x float> %28)
  %29 = load <4 x float>* @o
  %o15 = fadd <4 x float> %29, %o14
  store <4 x float> %o15, <4 x float>* @o
  %30 = load i32 addrspace(1)* @s2DRS, !gla.uniform !37
  %31 = load <4 x float>* %v
  %32 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %33 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %o16 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 5, i32 %30, i32 9, <4 x float> %31, float undef, float undef, i32 undef, <2 x float> %32, <2 x float> %33)
  %34 = load <4 x float>* @o
  %o17 = fadd <4 x float> %34, %o16
  store <4 x float> %o17, <4 x float>* @o
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32, i32, i32, <2 x float>, i32, float, <2 x i32>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float, <2 x i32>) #1

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32, i32, i32, <4 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32, i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32, i32, i32, <4 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32, i32, i32, <4 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32, i32, i32, <4 x float>, float, float, i32, <3 x float>, <3 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32, i32, i32, <3 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.f32.i32.f32.f32(i32, i32, i32, float, float, float, i32, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32, i32, i32, <4 x float>, float, float, i32, <2 x float>, <2 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float) #1

attributes #0 = { alwaysinline }
attributes #1 = { nounwind readnone }

!gla.outputs = !{!0, !2, !4}
!gla.uniforms = !{!6, !9, !12, !15, !18, !21, !24, !27, !30, !33, !35, !36, !37, !40, !43, !44, !47, !50, !53}
!gla.inputs = !{!56, !58, !60, !62, !64, !66}
!gla.entrypoint = !{!68}
!gla.noStaticUse = !{!60, !62, !64, !66, !53}

!0 = metadata !{metadata !"o", i32 7, <4 x float>* @o_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"io", i32 7, <3 x i32>* @io_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!4 = metadata !{metadata !"uo", i32 7, <4 x i32>* @uo_typeProxy, metadata !5}
!5 = metadata !{i32 1, i32 0, i32 1027, null, i32 0}
!6 = metadata !{metadata !"samp2D", i32 12, i32* @samp2D_typeProxy, metadata !7}
!7 = metadata !{i32 5, i32 0, i32 1024, metadata !8}
!8 = metadata !{i32 0, i32* @samp2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!9 = metadata !{metadata !"samp2DA", i32 12, i32* @samp2DA_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, i32* @samp2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!12 = metadata !{metadata !"samp2DR", i32 12, i32* @samp2DR_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 1024, metadata !14}
!14 = metadata !{i32 0, i32* @samp2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!15 = metadata !{metadata !"samp2DS", i32 12, i32* @samp2DS_typeProxy, metadata !16}
!16 = metadata !{i32 5, i32 0, i32 1024, metadata !17}
!17 = metadata !{i32 0, i32* @samp2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!18 = metadata !{metadata !"Sca", i32 12, i32* @Sca_typeProxy, metadata !19}
!19 = metadata !{i32 5, i32 0, i32 1024, metadata !20}
!20 = metadata !{i32 0, i32* @Sca_typeProxy, i32 3, i1 true, i1 false, i32 0}
!21 = metadata !{metadata !"Isca", i32 12, i32* @Isca_typeProxy, metadata !22}
!22 = metadata !{i32 5, i32 0, i32 1024, metadata !23}
!23 = metadata !{i32 0, i32* @Isca_typeProxy, i32 3, i1 true, i1 false, i32 1}
!24 = metadata !{metadata !"Usca", i32 12, i32* @Usca_typeProxy, metadata !25}
!25 = metadata !{i32 5, i32 0, i32 1024, metadata !26}
!26 = metadata !{i32 0, i32* @Usca_typeProxy, i32 3, i1 true, i1 false, i32 2}
!27 = metadata !{metadata !"Scas", i32 12, i32* @Scas_typeProxy, metadata !28}
!28 = metadata !{i32 5, i32 0, i32 1024, metadata !29}
!29 = metadata !{i32 0, i32* @Scas_typeProxy, i32 3, i1 true, i1 true, i32 0}
!30 = metadata !{metadata !"s2DR", i32 12, i32* @s2DR_typeProxy, metadata !31}
!31 = metadata !{i32 5, i32 0, i32 1024, metadata !32}
!32 = metadata !{i32 0, i32* @s2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!33 = metadata !{metadata !"v2", i32 12, <2 x float>* @v2_typeProxy, metadata !34}
!34 = metadata !{i32 0, i32 0, i32 1024, null}
!35 = metadata !{metadata !"v3", i32 12, <3 x float>* @v3_typeProxy, metadata !34}
!36 = metadata !{metadata !"v4", i32 12, <4 x float>* @v4_typeProxy, metadata !34}
!37 = metadata !{metadata !"s2DRS", i32 12, i32* @s2DRS_typeProxy, metadata !38}
!38 = metadata !{i32 5, i32 0, i32 1024, metadata !39}
!39 = metadata !{i32 0, i32* @s2DRS_typeProxy, i32 4, i1 false, i1 true, i32 0}
!40 = metadata !{metadata !"s1D", i32 12, i32* @s1D_typeProxy, metadata !41}
!41 = metadata !{i32 5, i32 0, i32 1024, metadata !42}
!42 = metadata !{i32 0, i32* @s1D_typeProxy, i32 0, i1 false, i1 false, i32 0}
!43 = metadata !{metadata !"f", i32 12, float* @f_typeProxy, metadata !34}
!44 = metadata !{metadata !"s2D", i32 12, i32* @s2D_typeProxy, metadata !45}
!45 = metadata !{i32 5, i32 0, i32 1024, metadata !46}
!46 = metadata !{i32 0, i32* @s2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!47 = metadata !{metadata !"s2DS", i32 12, i32* @s2DS_typeProxy, metadata !48}
!48 = metadata !{i32 5, i32 0, i32 1024, metadata !49}
!49 = metadata !{i32 0, i32* @s2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!50 = metadata !{metadata !"sampC", i32 12, i32* @sampC_typeProxy, metadata !51}
!51 = metadata !{i32 5, i32 0, i32 1024, metadata !52}
!52 = metadata !{i32 0, i32* @sampC_typeProxy, i32 3, i1 false, i1 false, i32 0}
!53 = metadata !{metadata !"bounds", i32 12, i32* @bounds_typeProxy, metadata !54}
!54 = metadata !{i32 5, i32 0, i32 1024, metadata !55}
!55 = metadata !{i32 0, i32* @bounds_typeProxy, i32 1, i1 false, i1 false, i32 0}
!56 = metadata !{metadata !"i", i32 1, <4 x float>* @i_typeProxy, metadata !57}
!57 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!58 = metadata !{metadata !"gl_ClipDistance", i32 1, [4 x float]* @gl_ClipDistance_typeProxy, metadata !59}
!59 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!60 = metadata !{metadata !"fflat", i32 1, float* @fflat_typeProxy, metadata !61}
!61 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}
!62 = metadata !{metadata !"fsmooth", i32 1, float* @fsmooth_typeProxy, metadata !63}
!63 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!64 = metadata !{metadata !"fnop", i32 1, float* @fnop_typeProxy, metadata !65}
!65 = metadata !{i32 0, i32 0, i32 1034, null, i32 2}
!66 = metadata !{metadata !"gl_Color", i32 1, <4 x float>* @gl_Color_typeProxy, metadata !67}
!67 = metadata !{i32 0, i32 0, i32 1035, null, i32 1}
!68 = metadata !{metadata !"main", i32 15}


Bottom IR:
; ModuleID = 'Glslang'

@o = global <4 x float> zeroinitializer
@samp2D = external addrspace(1) constant i32
@samp2DA = external addrspace(1) constant i32
@samp2DR = external addrspace(1) constant i32
@samp2DS = external addrspace(1) constant i32
@io = global <3 x i32> zeroinitializer
@Sca = external addrspace(1) constant i32
@i = global <4 x float> zeroinitializer
@Isca = external addrspace(1) constant i32
@uo = global <4 x i32> zeroinitializer
@Usca = external addrspace(1) constant i32
@Scas = external addrspace(1) constant i32
@s2DR = external addrspace(1) constant i32
@v2 = external addrspace(2) constant <2 x float>
@v3 = external addrspace(2) constant <3 x float>
@v4 = external addrspace(2) constant <4 x float>
@s2DRS = external addrspace(1) constant i32
@s1D = external addrspace(1) constant i32
@f = external addrspace(2) constant float
@s2D = external addrspace(1) constant i32
@s2DS = external addrspace(1) constant i32
@sampC = external addrspace(1) constant i32
@gl_ClipDistance = global [4 x float] zeroinitializer
@fflat = global float 0.000000e+00
@fsmooth = global float 0.000000e+00
@fnop = global float 0.000000e+00
@gl_Color = global <4 x float> zeroinitializer
@gla_globalAgg = internal global <4 x float> undef
@gla_globalAgg1 = internal global <4 x float> undef
@gla_globalAgg2 = internal global <4 x float> undef

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @sampC, align 4, !gla.uniform !50
  %o = call <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32 4, i32 %0, i32 64, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>, i32 undef, float undef)
  store <4 x float> %o, <4 x float>* @o, align 16
  %gla_constGEP = getelementptr [4 x float]* @gl_ClipDistance, i32 0, i32 3
  %1 = load float* %gla_constGEP, align 4
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %o, i32 2, float undef, i32 undef, float %1, i32 0, float undef, i32 undef, float undef, i32 undef)
  store <4 x float> %2, <4 x float>* @o, align 16
  %3 = load i32 addrspace(1)* @samp2D, align 4, !gla.uniform !6
  %o.i = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %3, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %o1.i = fadd <4 x float> %2, %o.i
  store <4 x float> %o1.i, <4 x float>* @o, align 16
  %4 = load i32 addrspace(1)* @samp2DA, align 4, !gla.uniform !9
  %o2.i = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32 2, i32 %4, i32 336, <3 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %o3.i = fadd <4 x float> %o1.i, %o2.i
  store <4 x float> %o3.i, <4 x float>* @o, align 16
  %5 = load i32 addrspace(1)* @samp2DR, align 4, !gla.uniform !12
  %o.i11 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 5, i32 %5, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %o1.i12 = fadd <4 x float> %o3.i, %o.i11
  store <4 x float> %o1.i12, <4 x float>* @o, align 16
  %6 = load i32 addrspace(1)* @samp2DS, align 4, !gla.uniform !15
  %o2.i13 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %6, i32 2376, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float 0x3FF4CCCCC0000000, <2 x i32> <i32 1, i32 1>)
  %o3.i14 = fadd <4 x float> %o1.i12, %o2.i13
  %o4.i15 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %3, i32 1344, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 2, float undef, <2 x i32> <i32 1, i32 1>)
  %o5.i16 = fadd <4 x float> %o3.i14, %o4.i15
  store <4 x float> %o5.i16, <4 x float>* @o, align 16
  %7 = load i32 addrspace(1)* @Sca, align 4, !gla.uniform !18
  %io.i = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %7, i32 3)
  store <3 x i32> %io.i, <3 x i32>* @io, align 16
  %8 = load <4 x float>* @i, align 16
  %o.i6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 4, i32 %7, i32 16, <4 x float> %8)
  %o1.i7 = fadd <4 x float> %o5.i16, %o.i6
  store <4 x float> %o1.i7, <4 x float>* @o, align 16
  %9 = load i32 addrspace(1)* @Isca, align 4, !gla.uniform !21
  %io2.i = call <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32 4, i32 %9, i32 146, <4 x float> %8, float 0x3FE6666660000000, float undef)
  %10 = call <3 x i32> @llvm.gla.swizzle.v3i32.v4i32.v3i32(<4 x i32> %io2.i, <3 x i32> <i32 0, i32 1, i32 2>)
  %io3.i = add <3 x i32> %io.i, %10
  store <3 x i32> %io3.i, <3 x i32>* @io, align 16
  %11 = load i32 addrspace(1)* @Usca, align 4, !gla.uniform !24
  %uo.i = call <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32 4, i32 %11, i32 16, <4 x float> %8)
  store <4 x i32> %uo.i, <4 x i32>* @uo, align 16
  %o4.i8 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 4, i32 %7, i32 148, <4 x float> %8, float 0x3FFB333340000000, float undef)
  %o5.i9 = fadd <4 x float> %o4.i8, %o1.i7
  store <4 x float> %o5.i9, <4 x float>* @o, align 16
  %12 = load i32 addrspace(1)* @Scas, align 4, !gla.uniform !27
  %a.i = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %12, i32 3)
  %a6.i = sitofp <3 x i32> %a.i to <3 x float>
  %13 = extractelement <4 x float> %8, i32 1
  %f8.i = call float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32 4, i32 %12, i32 154, <4 x float> %8, float %13, float undef)
  %c10.i = call <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32 4, i32 %9, i32 16, <4 x float> %8, float undef, float undef, i32 undef, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>)
  %14 = extractelement <4 x i32> %c10.i, i32 0
  %.rhs = sitofp i32 %14 to float
  %15 = fadd float %f8.i, %.rhs
  %16 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float> undef, i32 15, <3 x float> %a6.i, i32 0, <3 x float> %a6.i, i32 1, <3 x float> %a6.i, i32 2, float %15, i32 0)
  %o12.i10 = fadd <4 x float> %o5.i9, %16
  store <4 x float> %o12.i10, <4 x float>* @o, align 16
  %17 = load i32 addrspace(1)* @s2DR, align 4, !gla.uniform !30
  %18 = load <2 x float> addrspace(2)* @v2, align 8, !gla.uniform !33
  %o.i2 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 5, i32 %17, i32 0, <2 x float> %18)
  %o1.i3 = fadd <4 x float> %o.i2, %o12.i10
  store <4 x float> %o1.i3, <4 x float>* @o, align 16
  %19 = load <3 x float> addrspace(2)* @v3, align 16, !gla.uniform !35
  %o2.i4 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 5, i32 %17, i32 1, <3 x float> %19)
  %o3.i5 = fadd <4 x float> %o1.i3, %o2.i4
  store <4 x float> %o3.i5, <4 x float>* @o, align 16
  %20 = load <4 x float> addrspace(2)* @v4, align 16, !gla.uniform !36
  %o4.i = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 5, i32 %17, i32 1, <4 x float> %20)
  %o5.i = fadd <4 x float> %o3.i5, %o4.i
  store <4 x float> %o5.i, <4 x float>* @o, align 16
  %21 = load i32 addrspace(1)* @s2DRS, align 4, !gla.uniform !37
  %o6.i = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 5, i32 %21, i32 8, <3 x float> %19, float undef, float undef)
  %o7.i = fadd <4 x float> %o5.i, %o6.i
  %o8.i = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 5, i32 %21, i32 9, <4 x float> %20, float undef, float undef)
  %o9.i = fadd <4 x float> %o7.i, %o8.i
  store <4 x float> %o9.i, <4 x float>* @o, align 16
  %22 = load i32 addrspace(1)* @s1D, align 4, !gla.uniform !40
  %23 = load float addrspace(2)* @f, align 4, !gla.uniform !43
  %o10.i = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.f32.i32.f32.f32(i32 1, i32 %22, i32 0, float %23, float undef, float undef, i32 undef, float %23, float %23)
  %o11.i = fadd <4 x float> %o9.i, %o10.i
  store <4 x float> %o11.i, <4 x float>* @o, align 16
  %24 = load i32 addrspace(1)* @s2D, align 4, !gla.uniform !44
  %aggregate = load <4 x float>* @gla_globalAgg
  %o12.i = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 2, i32 %24, i32 1, <4 x float> %aggregate, float undef, float undef, i32 undef, <2 x float> %18, <2 x float> %18)
  %o13.i = fadd <4 x float> %o11.i, %o12.i
  store <4 x float> %o13.i, <4 x float>* @o, align 16
  %25 = load i32 addrspace(1)* @s2DS, align 4, !gla.uniform !47
  %aggregate17 = load <4 x float>* @gla_globalAgg1
  %o14.i = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 2, i32 %25, i32 9, <4 x float> %aggregate17, float undef, float undef, i32 undef, <2 x float> %18, <2 x float> %18)
  %o15.i = fadd <4 x float> %o13.i, %o14.i
  %aggregate18 = load <4 x float>* @gla_globalAgg2
  %o16.i = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 5, i32 %21, i32 9, <4 x float> %aggregate18, float undef, float undef, i32 undef, <2 x float> %18, <2 x float> %18)
  %o17.i = fadd <4 x float> %o15.i, %o16.i
  store <4 x float> %o17.i, <4 x float>* @o, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32, i32, i32, <2 x float>, i32, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32, i32, i32, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32, i32, i32, <4 x float>, float, float, i32, <3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32, i32, i32, <3 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.f32.i32.f32.f32(i32, i32, i32, float, float, float, i32, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32, i32, i32, <4 x float>, float, float, i32, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.swizzle.v3i32.v4i32.v3i32(<4 x i32>, <3 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.outputs = !{!0, !2, !4}
!gla.uniforms = !{!6, !9, !12, !15, !18, !21, !24, !27, !30, !33, !35, !36, !37, !40, !43, !44, !47, !50, !53}
!gla.inputs = !{!56, !58, !60, !62, !64, !66}
!gla.entrypoint = !{!68}
!gla.noStaticUse = !{!60, !62, !64, !66, !53}

!0 = metadata !{metadata !"o", i32 7, <4 x float>* @o_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"io", i32 7, <3 x i32>* @io_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!4 = metadata !{metadata !"uo", i32 7, <4 x i32>* @uo_typeProxy, metadata !5}
!5 = metadata !{i32 1, i32 0, i32 1027, null, i32 0}
!6 = metadata !{metadata !"samp2D", i32 12, i32* @samp2D_typeProxy, metadata !7}
!7 = metadata !{i32 5, i32 0, i32 1024, metadata !8}
!8 = metadata !{i32 0, i32* @samp2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!9 = metadata !{metadata !"samp2DA", i32 12, i32* @samp2DA_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, i32* @samp2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!12 = metadata !{metadata !"samp2DR", i32 12, i32* @samp2DR_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 1024, metadata !14}
!14 = metadata !{i32 0, i32* @samp2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!15 = metadata !{metadata !"samp2DS", i32 12, i32* @samp2DS_typeProxy, metadata !16}
!16 = metadata !{i32 5, i32 0, i32 1024, metadata !17}
!17 = metadata !{i32 0, i32* @samp2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!18 = metadata !{metadata !"Sca", i32 12, i32* @Sca_typeProxy, metadata !19}
!19 = metadata !{i32 5, i32 0, i32 1024, metadata !20}
!20 = metadata !{i32 0, i32* @Sca_typeProxy, i32 3, i1 true, i1 false, i32 0}
!21 = metadata !{metadata !"Isca", i32 12, i32* @Isca_typeProxy, metadata !22}
!22 = metadata !{i32 5, i32 0, i32 1024, metadata !23}
!23 = metadata !{i32 0, i32* @Isca_typeProxy, i32 3, i1 true, i1 false, i32 1}
!24 = metadata !{metadata !"Usca", i32 12, i32* @Usca_typeProxy, metadata !25}
!25 = metadata !{i32 5, i32 0, i32 1024, metadata !26}
!26 = metadata !{i32 0, i32* @Usca_typeProxy, i32 3, i1 true, i1 false, i32 2}
!27 = metadata !{metadata !"Scas", i32 12, i32* @Scas_typeProxy, metadata !28}
!28 = metadata !{i32 5, i32 0, i32 1024, metadata !29}
!29 = metadata !{i32 0, i32* @Scas_typeProxy, i32 3, i1 true, i1 true, i32 0}
!30 = metadata !{metadata !"s2DR", i32 12, i32* @s2DR_typeProxy, metadata !31}
!31 = metadata !{i32 5, i32 0, i32 1024, metadata !32}
!32 = metadata !{i32 0, i32* @s2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!33 = metadata !{metadata !"v2", i32 12, <2 x float>* @v2_typeProxy, metadata !34}
!34 = metadata !{i32 0, i32 0, i32 1024, null}
!35 = metadata !{metadata !"v3", i32 12, <3 x float>* @v3_typeProxy, metadata !34}
!36 = metadata !{metadata !"v4", i32 12, <4 x float>* @v4_typeProxy, metadata !34}
!37 = metadata !{metadata !"s2DRS", i32 12, i32* @s2DRS_typeProxy, metadata !38}
!38 = metadata !{i32 5, i32 0, i32 1024, metadata !39}
!39 = metadata !{i32 0, i32* @s2DRS_typeProxy, i32 4, i1 false, i1 true, i32 0}
!40 = metadata !{metadata !"s1D", i32 12, i32* @s1D_typeProxy, metadata !41}
!41 = metadata !{i32 5, i32 0, i32 1024, metadata !42}
!42 = metadata !{i32 0, i32* @s1D_typeProxy, i32 0, i1 false, i1 false, i32 0}
!43 = metadata !{metadata !"f", i32 12, float* @f_typeProxy, metadata !34}
!44 = metadata !{metadata !"s2D", i32 12, i32* @s2D_typeProxy, metadata !45}
!45 = metadata !{i32 5, i32 0, i32 1024, metadata !46}
!46 = metadata !{i32 0, i32* @s2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!47 = metadata !{metadata !"s2DS", i32 12, i32* @s2DS_typeProxy, metadata !48}
!48 = metadata !{i32 5, i32 0, i32 1024, metadata !49}
!49 = metadata !{i32 0, i32* @s2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!50 = metadata !{metadata !"sampC", i32 12, i32* @sampC_typeProxy, metadata !51}
!51 = metadata !{i32 5, i32 0, i32 1024, metadata !52}
!52 = metadata !{i32 0, i32* @sampC_typeProxy, i32 3, i1 false, i1 false, i32 0}
!53 = metadata !{metadata !"bounds", i32 12, i32* @bounds_typeProxy, metadata !54}
!54 = metadata !{i32 5, i32 0, i32 1024, metadata !55}
!55 = metadata !{i32 0, i32* @bounds_typeProxy, i32 1, i1 false, i1 false, i32 0}
!56 = metadata !{metadata !"i", i32 1, <4 x float>* @i_typeProxy, metadata !57}
!57 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!58 = metadata !{metadata !"gl_ClipDistance", i32 1, [4 x float]* @gl_ClipDistance_typeProxy, metadata !59}
!59 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!60 = metadata !{metadata !"fflat", i32 1, float* @fflat_typeProxy, metadata !61}
!61 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}
!62 = metadata !{metadata !"fsmooth", i32 1, float* @fsmooth_typeProxy, metadata !63}
!63 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!64 = metadata !{metadata !"fnop", i32 1, float* @fnop_typeProxy, metadata !65}
!65 = metadata !{i32 0, i32 0, i32 1034, null, i32 2}
!66 = metadata !{metadata !"gl_Color", i32 1, <4 x float>* @gl_Color_typeProxy, metadata !67}
!67 = metadata !{i32 0, i32 0, i32 1035, null, i32 1}
!68 = metadata !{metadata !"main", i32 15}
#version 130
// LunarGOO output
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_shader_texture_lod : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_texture_cube_map_array : enable
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_texture_rectangle : enable
uniform sampler2D samp2D;
uniform sampler2DArray samp2DA;
uniform sampler2DRect samp2DR;
uniform sampler2DShadow samp2DS;
uniform samplerCubeArray Sca;
uniform isamplerCubeArray Isca;
uniform usamplerCubeArray Usca;
uniform samplerCubeArrayShadow Scas;
uniform sampler2DRect s2DR;
uniform vec2 v2;
uniform vec3 v3;
uniform vec4 v4;
uniform sampler2DRectShadow s2DRS;
uniform sampler1D s1D;
uniform float f;
uniform sampler2D s2D;
uniform sampler2DShadow s2DS;
uniform samplerCube sampC;
uniform sampler2D bounds;
in vec4 i;
in float gl_ClipDistance[4];
flat in float fflat;
in float fsmooth;
noperspective in float fnop;
out vec4 o;
out ivec3 io;
out uvec4 uo;
vec4 gla_globalAgg;
vec4 gla_globalAgg1;
vec4 gla_globalAgg2;
const vec3 C_vec3p0d2p = vec3(0.2);
const vec2 C_vec2p0d3p = vec2(0.3);
const ivec2 C_ivec2p1p = ivec2(1);
const vec3 C_vec3p0d3p = vec3(0.3);
const float C_1d3 = 1.3;
const int C_2 = 2;
const int C_3 = 3;
const float C_0d7 = 0.7;
const float C_1d7 = 1.7;
const vec3 C_vec3p0d1p = vec3(0.1);

void main()
{
	vec4 H_l45l3j1 = textureGather(sampC, C_vec3p0d2p);
	o = H_l45l3j1;
	vec4 H_rdfjgq = H_l45l3j1;
	H_rdfjgq.y = gl_ClipDistance[3];
	o = H_rdfjgq;
	vec4 o1 = textureGatherOffset(samp2D, C_vec2p0d3p, C_ivec2p1p);
	vec4 H_t1bk3i = H_rdfjgq + o1;
	o = H_t1bk3i;
	vec4 H_35ntmz = textureGatherOffset(samp2DA, C_vec3p0d3p, C_ivec2p1p);
	vec4 H_djuggw1 = H_35ntmz + H_t1bk3i;
	o = H_djuggw1;
	vec4 o2 = textureGatherOffset(samp2DR, C_vec2p0d3p, C_ivec2p1p);
	vec4 H_jizqga1 = H_djuggw1 + o2;
	o = H_jizqga1;
	vec4 H_4ltbbx1 = textureGatherOffset(samp2DS, C_vec2p0d3p, C_1d3, C_ivec2p1p);
	vec4 H_604fl01 = H_4ltbbx1 + H_jizqga1;
	vec4 H_19ibnn1 = textureGatherOffset(samp2D, C_vec2p0d3p, C_ivec2p1p, C_2);
	vec4 H_lx60x91 = H_19ibnn1 + H_604fl01;
	o = H_lx60x91;
	ivec3 io1 = textureSize(Sca, C_3);
	io = io1;
	vec4 o3 = texture(Sca, i);
	vec4 H_df61ui = H_lx60x91 + o3;
	o = H_df61ui;
	ivec4 io2 = texture(Isca, i, C_0d7);
	ivec3 io3 = io1 + io2.xyz;
	io = io3;
	ivec4 uo1 = ivec4(texture(Usca, i));
	uo = uvec4(uo1);
	vec4 H_us3aja1 = textureLod(Sca, i, C_1d7);
	vec4 H_znntf6 = H_df61ui + H_us3aja1;
	o = H_znntf6;
	ivec3 a = textureSize(Scas, C_3);
	vec3 H_0fp74s = vec3(a);
	float H_ob96gr1 = texture(Scas, i, i.y);
	ivec4 H_nr3zee1 = textureGrad(Isca, i, C_vec3p0d1p, C_vec3p0d2p);
	float _L = float(H_nr3zee1.x);
	float H_y8fidm1 = H_ob96gr1 + _L;
	vec4 H_p4a8ll1 = vec4(H_0fp74s.x, H_0fp74s.y, H_0fp74s.z, H_y8fidm1);
	vec4 H_cjserk1 = H_p4a8ll1 + H_znntf6;
	o = H_cjserk1;
	vec4 o4 = texture(s2DR, v2);
	vec4 H_v6pfk5 = H_cjserk1 + o4;
	o = H_v6pfk5;
	vec4 H_0o9wzo = textureProj(s2DR, v3);
	vec4 H_6i6kms1 = H_0o9wzo + H_v6pfk5;
	o = H_6i6kms1;
	vec4 H_3b3uuh1 = textureProj(s2DR, v4);
	vec4 H_sa43xv1 = H_3b3uuh1 + H_6i6kms1;
	o = H_sa43xv1;
	vec4 H_huhhfv = shadow2DRect(s2DRS, v3);
	vec4 H_f4fn3j = H_huhhfv + H_sa43xv1;
	vec4 H_3cqv2 = shadow2DRectProj(s2DRS, v4);
	vec4 H_e3vlln1 = H_3cqv2 + H_f4fn3j;
	o = H_e3vlln1;
	vec4 H_ddxyj4 = textureGrad(s1D, f, f, f);
	vec4 H_wnrhjr = H_ddxyj4 + H_e3vlln1;
	o = H_wnrhjr;
	vec4 H_0puojz = textureProjGrad(s2D, gla_globalAgg, v2, v2);
	vec4 H_114eog = H_0puojz + H_wnrhjr;
	o = H_114eog;
	vec4 H_g2xuvv = shadow2DProjGradARB(s2DS, gla_globalAgg1, v2, v2);
	vec4 H_h9uer11 = H_114eog + H_g2xuvv;
	vec4 H_nd45pe = shadow2DRectProjGradARB(s2DRS, gla_globalAgg2, v2, v2);
	vec4 H_9kbnxn1 = H_h9uer11 + H_nd45pe;
	o = H_9kbnxn1;
	
}

#version 130
// LunarGOO output
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_shader_texture_lod : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_texture_cube_map_array : enable
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_texture_rectangle : enable
uniform samplerCube sampC;
uniform sampler2D samp2D;
uniform sampler2DArray samp2DA;
uniform sampler2DRect samp2DR;
uniform sampler2DShadow samp2DS;
uniform samplerCubeArray Sca;
uniform isamplerCubeArray Isca;
uniform usamplerCubeArray Usca;
uniform samplerCubeArrayShadow Scas;
uniform sampler2DRect s2DR;
uniform vec2 v2;
uniform vec3 v3;
uniform vec4 v4;
uniform sampler2DRectShadow s2DRS;
uniform sampler1D s1D;
uniform float f;
uniform sampler2D s2D;
uniform sampler2DShadow s2DS;
uniform sampler2D bounds;
in float gl_ClipDistance[4];
in vec4 i;
flat in float fflat;
in float fsmooth;
noperspective in float fnop;
out vec4 o;
out ivec3 io;
out uvec4 uo;
const vec3 C_vec3p0d2p = vec3(0.2);
const vec2 C_vec2p0d3p = vec2(0.3);
const ivec2 C_ivec2p1p = ivec2(1);
const vec3 C_vec3p0d3p = vec3(0.3);
const float C_1d3 = 1.3;
const int C_2 = 2;
const int C_3 = 3;
const float C_0d7 = 0.7;
const float C_1d7 = 1.7;
const vec3 C_vec3p0d1p = vec3(0.1);
const vec4 C_vec4p0d0p = vec4(0.0);

void main()
{
	vec4 H_l45l3j = textureGather(sampC, C_vec3p0d2p);
	o = H_l45l3j;
	vec4 H_kgm34u1 = H_l45l3j;
	H_kgm34u1.y = gl_ClipDistance[3];
	o = H_kgm34u1;
	vec4 H_xwxukg1 = textureGatherOffset(samp2D, C_vec2p0d3p, C_ivec2p1p);
	vec4 H_t1bk3i = H_kgm34u1 + H_xwxukg1;
	o = H_t1bk3i;
	vec4 H_35ntmz = textureGatherOffset(samp2DA, C_vec3p0d3p, C_ivec2p1p);
	vec4 H_djuggw = H_35ntmz + H_t1bk3i;
	o = H_djuggw;
	vec4 H_dpmbt91 = textureGatherOffset(samp2DR, C_vec2p0d3p, C_ivec2p1p);
	vec4 H_jizqga = H_djuggw + H_dpmbt91;
	o = H_jizqga;
	vec4 H_4ltbbx = textureGatherOffset(samp2DS, C_vec2p0d3p, C_1d3, C_ivec2p1p);
	vec4 H_604fl = H_4ltbbx + H_jizqga;
	vec4 H_19ibnn = textureGatherOffset(samp2D, C_vec2p0d3p, C_ivec2p1p, C_2);
	vec4 H_lx60x = H_19ibnn + H_604fl;
	o = H_lx60x;
	ivec3 io1 = textureSize(Sca, C_3);
	io = io1;
	vec4 H_7mozk = texture(Sca, i);
	vec4 H_df61ui = H_7mozk + H_lx60x;
	o = H_df61ui;
	ivec4 io2 = texture(Isca, i, C_0d7);
	ivec3 io3 = io1 + io2.xyz;
	io = io3;
	ivec4 uo1 = ivec4(texture(Usca, i));
	uo = uvec4(uo1);
	vec4 H_us3aja = textureLod(Sca, i, C_1d7);
	vec4 H_znntf = H_df61ui + H_us3aja;
	o = H_znntf;
	ivec3 Lg_1 = textureSize(Scas, C_3);
	vec3 H_0fp74s = vec3(Lg_1);
	float H_ob96gr = texture(Scas, i, i.y);
	ivec4 H_nr3zee = textureGrad(Isca, i, C_vec3p0d1p, C_vec3p0d2p);
	float _L = float(H_nr3zee.x);
	float H_y8fidm = H_ob96gr + _L;
	vec4 H_63qpw1 = vec4(H_0fp74s.x, H_0fp74s.y, H_0fp74s.z, H_y8fidm);
	vec4 H_cjserk = H_63qpw1 + H_znntf;
	o = H_cjserk;
	vec4 H_qxudxp = texture(s2DR, v2);
	vec4 H_v6pfk = H_cjserk + H_qxudxp;
	o = H_v6pfk;
	vec4 H_0o9wzo = textureProj(s2DR, v3);
	vec4 H_6i6kms = H_0o9wzo + H_v6pfk;
	o = H_6i6kms;
	vec4 H_3b3uuh = textureProj(s2DR, v4);
	vec4 H_sa43xv = H_3b3uuh + H_6i6kms;
	o = H_sa43xv;
	vec4 H_huhhfv = shadow2DRect(s2DRS, v3);
	vec4 H_f4fn3j = H_huhhfv + H_sa43xv;
	vec4 H_3cqv = shadow2DRectProj(s2DRS, v4);
	vec4 H_e3vlln = H_3cqv + H_f4fn3j;
	o = H_e3vlln;
	vec4 H_ddxyj = textureGrad(s1D, f, f, f);
	vec4 H_wnrhjr = H_ddxyj + H_e3vlln;
	o = H_wnrhjr;
	vec4 H_0puojz = textureProjGrad(s2D, C_vec4p0d0p, v2, v2);
	vec4 H_114eog = H_0puojz + H_wnrhjr;
	o = H_114eog;
	vec4 H_g2xuvv = shadow2DProjGradARB(s2DS, C_vec4p0d0p, v2, v2);
	vec4 H_h9uer = H_114eog + H_g2xuvv;
	vec4 H_nd45pe = shadow2DRectProjGradARB(s2DRS, C_vec4p0d0p, v2, v2);
	vec4 H_9kbnxn = H_h9uer + H_nd45pe;
	o = H_9kbnxn;
	
}

