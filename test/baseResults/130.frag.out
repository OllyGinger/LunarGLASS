
Top IR:
; ModuleID = 'Glslang'

@o = global <4 x float> zeroinitializer
@samp2D = external addrspace(1) constant i32
@samp2DA = external addrspace(1) constant i32
@samp2DR = external addrspace(1) constant i32
@samp2DS = external addrspace(1) constant i32
@io = global <3 x i32> zeroinitializer
@Sca = external addrspace(1) constant i32
@i = global <4 x float> zeroinitializer
@Isca = external addrspace(1) constant i32
@uo = global <4 x i32> zeroinitializer
@Usca = external addrspace(1) constant i32
@a = internal global <3 x float> zeroinitializer
@Scas = external addrspace(1) constant i32
@s2DR = external addrspace(1) constant i32
@v2 = external addrspace(2) constant <2 x float>
@v3 = external addrspace(2) constant <3 x float>
@v4 = external addrspace(2) constant <4 x float>
@s2DRS = external addrspace(1) constant i32
@s1D = external addrspace(1) constant i32
@f = external addrspace(2) constant float
@s2D = external addrspace(1) constant i32
@s2DS = external addrspace(1) constant i32
@sampC = external addrspace(1) constant i32
@gl_ClipDistance = global [4 x float] zeroinitializer
@b = internal global float 0.000000e+00
@fflat = global float 0.000000e+00
@fsmooth = global float 0.000000e+00
@fnop = global float 0.000000e+00
@gl_Color = global <4 x float> zeroinitializer
@bounds = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %ai = alloca [3 x i32]
  %0 = load i32 addrspace(1)* @sampC, !gla.uniform !50
  %o = call <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32 4, i32 %0, i32 64, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>, i32 undef, float undef)
  store <4 x float> %o, <4 x float>* @o
  %1 = load float* getelementptr inbounds ([4 x float]* @gl_ClipDistance, i32 0, i32 3)
  %2 = load <4 x float>* @o
  %o1 = insertelement <4 x float> %2, float %1, i32 1
  store <4 x float> %o1, <4 x float>* @o
  call void @"bar3("()
  call void @"bar4("()
  call void @"bar5("()
  call void @"bar6("()
  call void @"bar7("()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar3("() #0 {
entry:
  %0 = load i32 addrspace(1)* @samp2D, !gla.uniform !6
  %1 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %0, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %2 = load <4 x float>* @o
  %o = fadd <4 x float> %2, %1
  store <4 x float> %o, <4 x float>* @o
  %3 = load i32 addrspace(1)* @samp2DA, !gla.uniform !9
  %4 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32 2, i32 %3, i32 336, <3 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %5 = load <4 x float>* @o
  %o1 = fadd <4 x float> %5, %4
  store <4 x float> %o1, <4 x float>* @o
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar4("() #0 {
entry:
  %0 = load i32 addrspace(1)* @samp2DR, !gla.uniform !12
  %1 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 5, i32 %0, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %2 = load <4 x float>* @o
  %o = fadd <4 x float> %2, %1
  store <4 x float> %o, <4 x float>* @o
  %3 = load i32 addrspace(1)* @samp2DS, !gla.uniform !15
  %4 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %3, i32 2376, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float 0x3FF4CCCCC0000000, <2 x i32> <i32 1, i32 1>)
  %5 = load <4 x float>* @o
  %o1 = fadd <4 x float> %5, %4
  store <4 x float> %o1, <4 x float>* @o
  %6 = load i32 addrspace(1)* @samp2D, !gla.uniform !6
  %7 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %6, i32 1344, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 2, float undef, <2 x i32> <i32 1, i32 1>)
  %8 = load <4 x float>* @o
  %o2 = fadd <4 x float> %8, %7
  store <4 x float> %o2, <4 x float>* @o
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar5("() #0 {
entry:
  %constructed = alloca <4 x float>
  %c = alloca <4 x i32>
  %f = alloca float
  %0 = load i32 addrspace(1)* @Sca, !gla.uniform !18
  %io = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %0, i32 3)
  store <3 x i32> %io, <3 x i32>* @io
  %1 = load i32 addrspace(1)* @Sca, !gla.uniform !18
  %2 = load <4 x float>* @i
  %3 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 4, i32 %1, i32 16, <4 x float> %2)
  %4 = load <4 x float>* @o
  %o = fadd <4 x float> %4, %3
  store <4 x float> %o, <4 x float>* @o
  %5 = load i32 addrspace(1)* @Isca, !gla.uniform !21
  %6 = load <4 x float>* @i
  %7 = call <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32 4, i32 %5, i32 146, <4 x float> %6, float 0x3FE6666660000000, float undef)
  %8 = extractelement <4 x i32> %7, i32 0
  %9 = insertelement <3 x i32> undef, i32 %8, i32 0
  %10 = extractelement <4 x i32> %7, i32 1
  %11 = insertelement <3 x i32> %9, i32 %10, i32 1
  %12 = extractelement <4 x i32> %7, i32 2
  %13 = insertelement <3 x i32> %11, i32 %12, i32 2
  %14 = load <3 x i32>* @io
  %io1 = add <3 x i32> %14, %13
  store <3 x i32> %io1, <3 x i32>* @io
  %15 = load i32 addrspace(1)* @Usca, !gla.uniform !24
  %16 = load <4 x float>* @i
  %uo = call <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32 4, i32 %15, i32 16, <4 x float> %16)
  store <4 x i32> %uo, <4 x i32>* @uo
  %17 = load i32 addrspace(1)* @Sca, !gla.uniform !18
  %18 = load <4 x float>* @i
  %19 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 4, i32 %17, i32 148, <4 x float> %18, float 0x3FFB333340000000, float undef)
  %20 = load <4 x float>* @o
  %o2 = fadd <4 x float> %20, %19
  store <4 x float> %o2, <4 x float>* @o
  %21 = load i32 addrspace(1)* @Scas, !gla.uniform !27
  %22 = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %21, i32 3)
  %a = sitofp <3 x i32> %22 to <3 x float>
  store <3 x float> %a, <3 x float>* @a
  %23 = load i32 addrspace(1)* @Scas, !gla.uniform !27
  %24 = load <4 x float>* @i
  %25 = load <4 x float>* @i
  %26 = extractelement <4 x float> %25, i32 1
  %f3 = call float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32 4, i32 %23, i32 154, <4 x float> %24, float %26, float undef)
  store float %f3, float* %f
  %27 = load i32 addrspace(1)* @Isca, !gla.uniform !21
  %28 = load <4 x float>* @i
  %c4 = call <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32 4, i32 %27, i32 16, <4 x float> %28, float undef, float undef, i32 undef, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>)
  store <4 x i32> %c4, <4 x i32>* %c
  %29 = load <3 x float>* @a
  %30 = load float* %f
  %31 = load <4 x i32>* %c
  %32 = sitofp <4 x i32> %31 to <4 x float>
  %33 = insertelement <4 x float> undef, float %30, i32 0
  %34 = insertelement <4 x float> %33, float %30, i32 1
  %35 = insertelement <4 x float> %34, float %30, i32 2
  %36 = insertelement <4 x float> %35, float %30, i32 3
  %37 = fadd <4 x float> %36, %32
  %38 = load <4 x float>* %constructed
  %39 = extractelement <3 x float> %29, i32 0
  %40 = insertelement <4 x float> %38, float %39, i32 0
  %41 = extractelement <3 x float> %29, i32 1
  %42 = insertelement <4 x float> %40, float %41, i32 1
  %43 = extractelement <3 x float> %29, i32 2
  %44 = insertelement <4 x float> %42, float %43, i32 2
  %45 = extractelement <4 x float> %37, i32 0
  %46 = insertelement <4 x float> %44, float %45, i32 3
  %47 = load <4 x float>* @o
  %o5 = fadd <4 x float> %47, %46
  store <4 x float> %o5, <4 x float>* @o
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar6("() #0 {
entry:
  %b = alloca float
  %m43 = alloca [4 x <3 x float>]
  %a1 = alloca float
  %0 = getelementptr [4 x <3 x float>]* %m43, i32 0, i32 3
  %1 = load <3 x float>* %0
  %a11 = extractelement <3 x float> %1, i32 1
  store float %a11, float* %a1
  %2 = load float* %a1
  %b2 = fmul float 2.000000e+00, %2
  store float %b2, float* %b
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar7("() #0 {
entry:
  %v = alloca <4 x float>
  %0 = load i32 addrspace(1)* @s2DR, !gla.uniform !30
  %1 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %2 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 5, i32 %0, i32 0, <2 x float> %1)
  %3 = load <4 x float>* @o
  %o = fadd <4 x float> %3, %2
  store <4 x float> %o, <4 x float>* @o
  %4 = load i32 addrspace(1)* @s2DR, !gla.uniform !30
  %5 = load <3 x float> addrspace(2)* @v3, !gla.uniform !35
  %6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 5, i32 %4, i32 1, <3 x float> %5)
  %7 = load <4 x float>* @o
  %o1 = fadd <4 x float> %7, %6
  store <4 x float> %o1, <4 x float>* @o
  %8 = load i32 addrspace(1)* @s2DR, !gla.uniform !30
  %9 = load <4 x float> addrspace(2)* @v4, !gla.uniform !36
  %10 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 5, i32 %8, i32 1, <4 x float> %9)
  %11 = load <4 x float>* @o
  %o2 = fadd <4 x float> %11, %10
  store <4 x float> %o2, <4 x float>* @o
  %12 = load i32 addrspace(1)* @s2DRS, !gla.uniform !37
  %13 = load <3 x float> addrspace(2)* @v3, !gla.uniform !35
  %14 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 5, i32 %12, i32 8, <3 x float> %13, float undef, float undef)
  %15 = load <4 x float>* @o
  %o3 = fadd <4 x float> %15, %14
  store <4 x float> %o3, <4 x float>* @o
  %16 = load i32 addrspace(1)* @s2DRS, !gla.uniform !37
  %17 = load <4 x float> addrspace(2)* @v4, !gla.uniform !36
  %18 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 5, i32 %16, i32 9, <4 x float> %17, float undef, float undef)
  %19 = load <4 x float>* @o
  %o4 = fadd <4 x float> %19, %18
  store <4 x float> %o4, <4 x float>* @o
  %20 = load i32 addrspace(1)* @s1D, !gla.uniform !40
  %21 = load float addrspace(2)* @f, !gla.uniform !43
  %22 = load float addrspace(2)* @f, !gla.uniform !43
  %23 = load float addrspace(2)* @f, !gla.uniform !43
  %24 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.f32.i32.f32.f32(i32 1, i32 %20, i32 0, float %21, float undef, float undef, i32 undef, float %22, float %23)
  %25 = load <4 x float>* @o
  %o5 = fadd <4 x float> %25, %24
  store <4 x float> %o5, <4 x float>* @o
  %26 = load i32 addrspace(1)* @s2D, !gla.uniform !44
  %27 = load <4 x float>* %v
  %28 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %29 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %30 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 2, i32 %26, i32 1, <4 x float> %27, float undef, float undef, i32 undef, <2 x float> %28, <2 x float> %29)
  %31 = load <4 x float>* @o
  %o6 = fadd <4 x float> %31, %30
  store <4 x float> %o6, <4 x float>* @o
  %32 = load i32 addrspace(1)* @s2DS, !gla.uniform !47
  %33 = load <4 x float>* %v
  %34 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %35 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %36 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 2, i32 %32, i32 9, <4 x float> %33, float undef, float undef, i32 undef, <2 x float> %34, <2 x float> %35)
  %37 = load <4 x float>* @o
  %o7 = fadd <4 x float> %37, %36
  store <4 x float> %o7, <4 x float>* @o
  %38 = load i32 addrspace(1)* @s2DRS, !gla.uniform !37
  %39 = load <4 x float>* %v
  %40 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %41 = load <2 x float> addrspace(2)* @v2, !gla.uniform !33
  %42 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 5, i32 %38, i32 9, <4 x float> %39, float undef, float undef, i32 undef, <2 x float> %40, <2 x float> %41)
  %43 = load <4 x float>* @o
  %o8 = fadd <4 x float> %43, %42
  store <4 x float> %o8, <4 x float>* @o
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32, i32, i32, <2 x float>, i32, float, <2 x i32>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float, <2 x i32>) #1

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32, i32, i32, <4 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32, i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32, i32, i32, <4 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32, i32, i32, <4 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32, i32, i32, <4 x float>, float, float, i32, <3 x float>, <3 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32, i32, i32, <3 x float>, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.f32.i32.f32.f32(i32, i32, i32, float, float, float, i32, float, float) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32, i32, i32, <4 x float>, float, float, i32, <2 x float>, <2 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float) #1

attributes #0 = { alwaysinline }
attributes #1 = { nounwind readnone }

!gla.outputs = !{!0, !2, !4}
!gla.uniforms = !{!6, !9, !12, !15, !18, !21, !24, !27, !30, !33, !35, !36, !37, !40, !43, !44, !47, !50, !53}
!gla.inputs = !{!56, !58, !60, !62, !64, !66}
!gla.entrypoint = !{!68}
!gla.noStaticUse = !{!60, !62, !64, !66, !53}

!0 = metadata !{metadata !"o", i32 7, <4 x float>* @o_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"io", i32 7, <3 x i32>* @io_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!4 = metadata !{metadata !"uo", i32 7, <4 x i32>* @uo_typeProxy, metadata !5}
!5 = metadata !{i32 1, i32 0, i32 1027, null, i32 0}
!6 = metadata !{metadata !"samp2D", i32 12, i32* @samp2D_typeProxy, metadata !7}
!7 = metadata !{i32 5, i32 0, i32 1024, metadata !8}
!8 = metadata !{i32 0, i32* @samp2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!9 = metadata !{metadata !"samp2DA", i32 12, i32* @samp2DA_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, i32* @samp2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!12 = metadata !{metadata !"samp2DR", i32 12, i32* @samp2DR_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 1024, metadata !14}
!14 = metadata !{i32 0, i32* @samp2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!15 = metadata !{metadata !"samp2DS", i32 12, i32* @samp2DS_typeProxy, metadata !16}
!16 = metadata !{i32 5, i32 0, i32 1024, metadata !17}
!17 = metadata !{i32 0, i32* @samp2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!18 = metadata !{metadata !"Sca", i32 12, i32* @Sca_typeProxy, metadata !19}
!19 = metadata !{i32 5, i32 0, i32 1024, metadata !20}
!20 = metadata !{i32 0, i32* @Sca_typeProxy, i32 3, i1 true, i1 false, i32 0}
!21 = metadata !{metadata !"Isca", i32 12, i32* @Isca_typeProxy, metadata !22}
!22 = metadata !{i32 5, i32 0, i32 1024, metadata !23}
!23 = metadata !{i32 0, i32* @Isca_typeProxy, i32 3, i1 true, i1 false, i32 1}
!24 = metadata !{metadata !"Usca", i32 12, i32* @Usca_typeProxy, metadata !25}
!25 = metadata !{i32 5, i32 0, i32 1024, metadata !26}
!26 = metadata !{i32 0, i32* @Usca_typeProxy, i32 3, i1 true, i1 false, i32 2}
!27 = metadata !{metadata !"Scas", i32 12, i32* @Scas_typeProxy, metadata !28}
!28 = metadata !{i32 5, i32 0, i32 1024, metadata !29}
!29 = metadata !{i32 0, i32* @Scas_typeProxy, i32 3, i1 true, i1 true, i32 0}
!30 = metadata !{metadata !"s2DR", i32 12, i32* @s2DR_typeProxy, metadata !31}
!31 = metadata !{i32 5, i32 0, i32 1024, metadata !32}
!32 = metadata !{i32 0, i32* @s2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!33 = metadata !{metadata !"v2", i32 12, <2 x float>* @v2_typeProxy, metadata !34}
!34 = metadata !{i32 0, i32 0, i32 1024, null}
!35 = metadata !{metadata !"v3", i32 12, <3 x float>* @v3_typeProxy, metadata !34}
!36 = metadata !{metadata !"v4", i32 12, <4 x float>* @v4_typeProxy, metadata !34}
!37 = metadata !{metadata !"s2DRS", i32 12, i32* @s2DRS_typeProxy, metadata !38}
!38 = metadata !{i32 5, i32 0, i32 1024, metadata !39}
!39 = metadata !{i32 0, i32* @s2DRS_typeProxy, i32 4, i1 false, i1 true, i32 0}
!40 = metadata !{metadata !"s1D", i32 12, i32* @s1D_typeProxy, metadata !41}
!41 = metadata !{i32 5, i32 0, i32 1024, metadata !42}
!42 = metadata !{i32 0, i32* @s1D_typeProxy, i32 0, i1 false, i1 false, i32 0}
!43 = metadata !{metadata !"f", i32 12, float* @f_typeProxy, metadata !34}
!44 = metadata !{metadata !"s2D", i32 12, i32* @s2D_typeProxy, metadata !45}
!45 = metadata !{i32 5, i32 0, i32 1024, metadata !46}
!46 = metadata !{i32 0, i32* @s2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!47 = metadata !{metadata !"s2DS", i32 12, i32* @s2DS_typeProxy, metadata !48}
!48 = metadata !{i32 5, i32 0, i32 1024, metadata !49}
!49 = metadata !{i32 0, i32* @s2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!50 = metadata !{metadata !"sampC", i32 12, i32* @sampC_typeProxy, metadata !51}
!51 = metadata !{i32 5, i32 0, i32 1024, metadata !52}
!52 = metadata !{i32 0, i32* @sampC_typeProxy, i32 3, i1 false, i1 false, i32 0}
!53 = metadata !{metadata !"bounds", i32 12, i32* @bounds_typeProxy, metadata !54}
!54 = metadata !{i32 5, i32 0, i32 1024, metadata !55}
!55 = metadata !{i32 0, i32* @bounds_typeProxy, i32 1, i1 false, i1 false, i32 0}
!56 = metadata !{metadata !"i", i32 1, <4 x float>* @i_typeProxy, metadata !57}
!57 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!58 = metadata !{metadata !"gl_ClipDistance", i32 1, [4 x float]* @gl_ClipDistance_typeProxy, metadata !59}
!59 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!60 = metadata !{metadata !"fflat", i32 1, float* @fflat_typeProxy, metadata !61}
!61 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}
!62 = metadata !{metadata !"fsmooth", i32 1, float* @fsmooth_typeProxy, metadata !63}
!63 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!64 = metadata !{metadata !"fnop", i32 1, float* @fnop_typeProxy, metadata !65}
!65 = metadata !{i32 0, i32 0, i32 1034, null, i32 2}
!66 = metadata !{metadata !"gl_Color", i32 1, <4 x float>* @gl_Color_typeProxy, metadata !67}
!67 = metadata !{i32 0, i32 0, i32 1035, null, i32 1}
!68 = metadata !{metadata !"main", i32 15}


Bottom IR:
; ModuleID = 'Glslang'

@o = global <4 x float> zeroinitializer
@samp2D = external addrspace(1) constant i32
@samp2DA = external addrspace(1) constant i32
@samp2DR = external addrspace(1) constant i32
@samp2DS = external addrspace(1) constant i32
@io = global <3 x i32> zeroinitializer
@Sca = external addrspace(1) constant i32
@i = global <4 x float> zeroinitializer
@Isca = external addrspace(1) constant i32
@uo = global <4 x i32> zeroinitializer
@Usca = external addrspace(1) constant i32
@Scas = external addrspace(1) constant i32
@s2DR = external addrspace(1) constant i32
@v2 = external addrspace(2) constant <2 x float>
@v3 = external addrspace(2) constant <3 x float>
@v4 = external addrspace(2) constant <4 x float>
@s2DRS = external addrspace(1) constant i32
@s1D = external addrspace(1) constant i32
@f = external addrspace(2) constant float
@s2D = external addrspace(1) constant i32
@s2DS = external addrspace(1) constant i32
@sampC = external addrspace(1) constant i32
@gl_ClipDistance = global [4 x float] zeroinitializer
@fflat = global float 0.000000e+00
@fsmooth = global float 0.000000e+00
@fnop = global float 0.000000e+00
@gl_Color = global <4 x float> zeroinitializer
@gla_globalAgg = internal global <4 x float> undef
@gla_globalAgg1 = internal global <4 x float> undef
@gla_globalAgg2 = internal global <4 x float> undef

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @sampC, align 4, !gla.uniform !50
  %o = call <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32 4, i32 %0, i32 64, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>, i32 undef, float undef)
  store <4 x float> %o, <4 x float>* @o, align 16
  %gla_constGEP = getelementptr [4 x float]* @gl_ClipDistance, i32 0, i32 3
  %1 = load float* %gla_constGEP, align 4
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %o, i32 2, float undef, i32 undef, float %1, i32 0, float undef, i32 undef, float undef, i32 undef)
  store <4 x float> %2, <4 x float>* @o, align 16
  %3 = load i32 addrspace(1)* @samp2D, align 4, !gla.uniform !6
  %4 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %3, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %o.i = fadd <4 x float> %2, %4
  store <4 x float> %o.i, <4 x float>* @o, align 16
  %5 = load i32 addrspace(1)* @samp2DA, align 4, !gla.uniform !9
  %6 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32 2, i32 %5, i32 336, <3 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %o1.i = fadd <4 x float> %o.i, %6
  store <4 x float> %o1.i, <4 x float>* @o, align 16
  %7 = load i32 addrspace(1)* @samp2DR, align 4, !gla.uniform !12
  %8 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 5, i32 %7, i32 320, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float undef, <2 x i32> <i32 1, i32 1>)
  %o.i7 = fadd <4 x float> %o1.i, %8
  store <4 x float> %o.i7, <4 x float>* @o, align 16
  %9 = load i32 addrspace(1)* @samp2DS, align 4, !gla.uniform !15
  %10 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %9, i32 2376, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 undef, float 0x3FF4CCCCC0000000, <2 x i32> <i32 1, i32 1>)
  %o1.i8 = fadd <4 x float> %o.i7, %10
  %11 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %3, i32 1344, <2 x float> <float 0x3FD3333340000000, float 0x3FD3333340000000>, i32 2, float undef, <2 x i32> <i32 1, i32 1>)
  %o2.i9 = fadd <4 x float> %o1.i8, %11
  store <4 x float> %o2.i9, <4 x float>* @o, align 16
  %12 = load i32 addrspace(1)* @Sca, align 4, !gla.uniform !18
  %io.i = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %12, i32 3)
  store <3 x i32> %io.i, <3 x i32>* @io, align 16
  %13 = load <4 x float>* @i, align 16
  %14 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 4, i32 %12, i32 16, <4 x float> %13)
  %o.i4 = fadd <4 x float> %o2.i9, %14
  store <4 x float> %o.i4, <4 x float>* @o, align 16
  %15 = load i32 addrspace(1)* @Isca, align 4, !gla.uniform !21
  %16 = call <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32 4, i32 %15, i32 146, <4 x float> %13, float 0x3FE6666660000000, float undef)
  %17 = call <3 x i32> @llvm.gla.swizzle.v3i32.v4i32.v3i32(<4 x i32> %16, <3 x i32> <i32 0, i32 1, i32 2>)
  %io1.i = add <3 x i32> %io.i, %17
  store <3 x i32> %io1.i, <3 x i32>* @io, align 16
  %18 = load i32 addrspace(1)* @Usca, align 4, !gla.uniform !24
  %uo.i = call <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32 4, i32 %18, i32 16, <4 x float> %13)
  store <4 x i32> %uo.i, <4 x i32>* @uo, align 16
  %19 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 4, i32 %12, i32 148, <4 x float> %13, float 0x3FFB333340000000, float undef)
  %o2.i5 = fadd <4 x float> %19, %o.i4
  store <4 x float> %o2.i5, <4 x float>* @o, align 16
  %20 = load i32 addrspace(1)* @Scas, align 4, !gla.uniform !27
  %21 = call <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32 4, i32 %20, i32 3)
  %a.i = sitofp <3 x i32> %21 to <3 x float>
  %22 = extractelement <4 x float> %13, i32 1
  %f3.i = call float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32 4, i32 %20, i32 154, <4 x float> %13, float %22, float undef)
  %c4.i = call <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32 4, i32 %15, i32 16, <4 x float> %13, float undef, float undef, i32 undef, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, <3 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>)
  %23 = extractelement <4 x i32> %c4.i, i32 0
  %.rhs = sitofp i32 %23 to float
  %24 = fadd float %f3.i, %.rhs
  %25 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float> undef, i32 15, <3 x float> %a.i, i32 0, <3 x float> %a.i, i32 1, <3 x float> %a.i, i32 2, float %24, i32 0)
  %o5.i6 = fadd <4 x float> %o2.i5, %25
  store <4 x float> %o5.i6, <4 x float>* @o, align 16
  %26 = load i32 addrspace(1)* @s2DR, align 4, !gla.uniform !30
  %27 = load <2 x float> addrspace(2)* @v2, align 8, !gla.uniform !33
  %28 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 5, i32 %26, i32 0, <2 x float> %27)
  %o.i2 = fadd <4 x float> %28, %o5.i6
  store <4 x float> %o.i2, <4 x float>* @o, align 16
  %29 = load <3 x float> addrspace(2)* @v3, align 16, !gla.uniform !35
  %30 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 5, i32 %26, i32 1, <3 x float> %29)
  %o1.i3 = fadd <4 x float> %o.i2, %30
  store <4 x float> %o1.i3, <4 x float>* @o, align 16
  %31 = load <4 x float> addrspace(2)* @v4, align 16, !gla.uniform !36
  %32 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 5, i32 %26, i32 1, <4 x float> %31)
  %o2.i = fadd <4 x float> %o1.i3, %32
  store <4 x float> %o2.i, <4 x float>* @o, align 16
  %33 = load i32 addrspace(1)* @s2DRS, align 4, !gla.uniform !37
  %34 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 5, i32 %33, i32 8, <3 x float> %29, float undef, float undef)
  %o3.i = fadd <4 x float> %o2.i, %34
  %35 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 5, i32 %33, i32 9, <4 x float> %31, float undef, float undef)
  %o4.i = fadd <4 x float> %o3.i, %35
  store <4 x float> %o4.i, <4 x float>* @o, align 16
  %36 = load i32 addrspace(1)* @s1D, align 4, !gla.uniform !40
  %37 = load float addrspace(2)* @f, align 4, !gla.uniform !43
  %38 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.f32.i32.f32.f32(i32 1, i32 %36, i32 0, float %37, float undef, float undef, i32 undef, float %37, float %37)
  %o5.i = fadd <4 x float> %o4.i, %38
  store <4 x float> %o5.i, <4 x float>* @o, align 16
  %39 = load i32 addrspace(1)* @s2D, align 4, !gla.uniform !44
  %aggregate = load <4 x float>* @gla_globalAgg
  %40 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 2, i32 %39, i32 1, <4 x float> %aggregate, float undef, float undef, i32 undef, <2 x float> %27, <2 x float> %27)
  %o6.i = fadd <4 x float> %o5.i, %40
  store <4 x float> %o6.i, <4 x float>* @o, align 16
  %41 = load i32 addrspace(1)* @s2DS, align 4, !gla.uniform !47
  %aggregate10 = load <4 x float>* @gla_globalAgg1
  %42 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 2, i32 %41, i32 9, <4 x float> %aggregate10, float undef, float undef, i32 undef, <2 x float> %27, <2 x float> %27)
  %o7.i = fadd <4 x float> %o6.i, %42
  %aggregate11 = load <4 x float>* @gla_globalAgg2
  %43 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32 5, i32 %33, i32 9, <4 x float> %aggregate11, float undef, float undef, i32 undef, <2 x float> %27, <2 x float> %27)
  %o8.i = fadd <4 x float> %o7.i, %43
  store <4 x float> %o8.i, <4 x float>* @o, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32, i32, i32, <2 x float>, i32, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.queryTextureSize.v3i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSample.v4i32.v4f32(i32, i32, i32, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZ.f32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v4f32.i32.v3f32.v3f32(i32, i32, i32, <4 x float>, float, float, i32, <3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32, i32, i32, <3 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.f32.i32.f32.f32(i32, i32, i32, float, float, float, i32, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v2f32.v2f32(i32, i32, i32, <4 x float>, float, float, i32, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGather.v4f32.v3f32(i32, i32, i32, <3 x float>, i32, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.swizzle.v3i32.v4i32.v3i32(<4 x i32>, <3 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.outputs = !{!0, !2, !4}
!gla.uniforms = !{!6, !9, !12, !15, !18, !21, !24, !27, !30, !33, !35, !36, !37, !40, !43, !44, !47, !50, !53}
!gla.inputs = !{!56, !58, !60, !62, !64, !66}
!gla.entrypoint = !{!68}
!gla.noStaticUse = !{!60, !62, !64, !66, !53}

!0 = metadata !{metadata !"o", i32 7, <4 x float>* @o_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"io", i32 7, <3 x i32>* @io_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!4 = metadata !{metadata !"uo", i32 7, <4 x i32>* @uo_typeProxy, metadata !5}
!5 = metadata !{i32 1, i32 0, i32 1027, null, i32 0}
!6 = metadata !{metadata !"samp2D", i32 12, i32* @samp2D_typeProxy, metadata !7}
!7 = metadata !{i32 5, i32 0, i32 1024, metadata !8}
!8 = metadata !{i32 0, i32* @samp2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!9 = metadata !{metadata !"samp2DA", i32 12, i32* @samp2DA_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, i32* @samp2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!12 = metadata !{metadata !"samp2DR", i32 12, i32* @samp2DR_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 1024, metadata !14}
!14 = metadata !{i32 0, i32* @samp2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!15 = metadata !{metadata !"samp2DS", i32 12, i32* @samp2DS_typeProxy, metadata !16}
!16 = metadata !{i32 5, i32 0, i32 1024, metadata !17}
!17 = metadata !{i32 0, i32* @samp2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!18 = metadata !{metadata !"Sca", i32 12, i32* @Sca_typeProxy, metadata !19}
!19 = metadata !{i32 5, i32 0, i32 1024, metadata !20}
!20 = metadata !{i32 0, i32* @Sca_typeProxy, i32 3, i1 true, i1 false, i32 0}
!21 = metadata !{metadata !"Isca", i32 12, i32* @Isca_typeProxy, metadata !22}
!22 = metadata !{i32 5, i32 0, i32 1024, metadata !23}
!23 = metadata !{i32 0, i32* @Isca_typeProxy, i32 3, i1 true, i1 false, i32 1}
!24 = metadata !{metadata !"Usca", i32 12, i32* @Usca_typeProxy, metadata !25}
!25 = metadata !{i32 5, i32 0, i32 1024, metadata !26}
!26 = metadata !{i32 0, i32* @Usca_typeProxy, i32 3, i1 true, i1 false, i32 2}
!27 = metadata !{metadata !"Scas", i32 12, i32* @Scas_typeProxy, metadata !28}
!28 = metadata !{i32 5, i32 0, i32 1024, metadata !29}
!29 = metadata !{i32 0, i32* @Scas_typeProxy, i32 3, i1 true, i1 true, i32 0}
!30 = metadata !{metadata !"s2DR", i32 12, i32* @s2DR_typeProxy, metadata !31}
!31 = metadata !{i32 5, i32 0, i32 1024, metadata !32}
!32 = metadata !{i32 0, i32* @s2DR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!33 = metadata !{metadata !"v2", i32 12, <2 x float>* @v2_typeProxy, metadata !34}
!34 = metadata !{i32 0, i32 0, i32 1024, null}
!35 = metadata !{metadata !"v3", i32 12, <3 x float>* @v3_typeProxy, metadata !34}
!36 = metadata !{metadata !"v4", i32 12, <4 x float>* @v4_typeProxy, metadata !34}
!37 = metadata !{metadata !"s2DRS", i32 12, i32* @s2DRS_typeProxy, metadata !38}
!38 = metadata !{i32 5, i32 0, i32 1024, metadata !39}
!39 = metadata !{i32 0, i32* @s2DRS_typeProxy, i32 4, i1 false, i1 true, i32 0}
!40 = metadata !{metadata !"s1D", i32 12, i32* @s1D_typeProxy, metadata !41}
!41 = metadata !{i32 5, i32 0, i32 1024, metadata !42}
!42 = metadata !{i32 0, i32* @s1D_typeProxy, i32 0, i1 false, i1 false, i32 0}
!43 = metadata !{metadata !"f", i32 12, float* @f_typeProxy, metadata !34}
!44 = metadata !{metadata !"s2D", i32 12, i32* @s2D_typeProxy, metadata !45}
!45 = metadata !{i32 5, i32 0, i32 1024, metadata !46}
!46 = metadata !{i32 0, i32* @s2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!47 = metadata !{metadata !"s2DS", i32 12, i32* @s2DS_typeProxy, metadata !48}
!48 = metadata !{i32 5, i32 0, i32 1024, metadata !49}
!49 = metadata !{i32 0, i32* @s2DS_typeProxy, i32 1, i1 false, i1 true, i32 0}
!50 = metadata !{metadata !"sampC", i32 12, i32* @sampC_typeProxy, metadata !51}
!51 = metadata !{i32 5, i32 0, i32 1024, metadata !52}
!52 = metadata !{i32 0, i32* @sampC_typeProxy, i32 3, i1 false, i1 false, i32 0}
!53 = metadata !{metadata !"bounds", i32 12, i32* @bounds_typeProxy, metadata !54}
!54 = metadata !{i32 5, i32 0, i32 1024, metadata !55}
!55 = metadata !{i32 0, i32* @bounds_typeProxy, i32 1, i1 false, i1 false, i32 0}
!56 = metadata !{metadata !"i", i32 1, <4 x float>* @i_typeProxy, metadata !57}
!57 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!58 = metadata !{metadata !"gl_ClipDistance", i32 1, [4 x float]* @gl_ClipDistance_typeProxy, metadata !59}
!59 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!60 = metadata !{metadata !"fflat", i32 1, float* @fflat_typeProxy, metadata !61}
!61 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}
!62 = metadata !{metadata !"fsmooth", i32 1, float* @fsmooth_typeProxy, metadata !63}
!63 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!64 = metadata !{metadata !"fnop", i32 1, float* @fnop_typeProxy, metadata !65}
!65 = metadata !{i32 0, i32 0, i32 1034, null, i32 2}
!66 = metadata !{metadata !"gl_Color", i32 1, <4 x float>* @gl_Color_typeProxy, metadata !67}
!67 = metadata !{i32 0, i32 0, i32 1035, null, i32 1}
!68 = metadata !{metadata !"main", i32 15}
#version 130
// LunarGOO output
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_shader_texture_lod : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_texture_cube_map_array : enable
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_texture_rectangle : enable
uniform sampler2D samp2D;
uniform sampler2DArray samp2DA;
uniform sampler2DRect samp2DR;
uniform sampler2DShadow samp2DS;
uniform samplerCubeArray Sca;
uniform isamplerCubeArray Isca;
uniform usamplerCubeArray Usca;
uniform samplerCubeArrayShadow Scas;
uniform sampler2DRect s2DR;
uniform vec2 v2;
uniform vec3 v3;
uniform vec4 v4;
uniform sampler2DRectShadow s2DRS;
uniform sampler1D s1D;
uniform float f;
uniform sampler2D s2D;
uniform sampler2DShadow s2DS;
uniform samplerCube sampC;
uniform sampler2D bounds;
in vec4 i;
in float gl_ClipDistance[4];
flat in float fflat;
in float fsmooth;
noperspective in float fnop;
out vec4 o;
out ivec3 io;
out uvec4 uo;
vec4 gla_globalAgg;
vec4 gla_globalAgg1;
vec4 gla_globalAgg2;
const vec3 L_2 = vec3(0.2);
const vec2 L_5 = vec2(0.3);
const ivec2 L_6 = ivec2(1);
const vec3 L_9 = vec3(0.3);
const float L_e = 1.3;
const int L_10 = 2;
const int L_13 = 3;
const float L_17 = 0.7;
const float L_1b = 1.7;
const vec3 L_21 = vec3(0.1);

void main()
{
	vec4 L_1 = textureGather(sampC, L_2);
	o = L_1;
	vec4 L_3 = L_1;
	L_3.y = gl_ClipDistance[3];
	o = L_3;
	vec4 L_4 = textureGatherOffset(samp2D, L_5, L_6);
	vec4 o_i_c1 = L_3 + L_4;
	o = o_i_c1;
	vec4 L_8 = textureGatherOffset(samp2DA, L_9, L_6);
	vec4 L_a = L_8 + o_i_c1;
	o = L_a;
	vec4 L_b = textureGatherOffset(samp2DR, L_5, L_6);
	vec4 o_i_c2 = L_a + L_b;
	o = o_i_c2;
	vec4 L_d = textureGatherOffset(samp2DS, L_5, L_e, L_6);
	vec4 L_f = textureGatherOffset(samp2D, L_5, L_6, L_10);
	vec4 L_11 = (L_d + o_i_c2) + L_f;
	o = L_11;
	ivec3 io_i_c3 = textureSize(Sca, L_13);
	io = io_i_c3;
	vec4 L_14 = texture(Sca, i);
	vec4 o_i_c4 = L_11 + L_14;
	o = o_i_c4;
	ivec4 L_16 = texture(Isca, i, L_17);
	ivec3 L_18 = ivec3(L_16);
	io = (L_18 + io_i_c3);
	ivec4 uo_i_c5 = ivec4(texture(Usca, i));
	uo = uvec4(uo_i_c5);
	vec4 L_1a = textureLod(Sca, i, L_1b);
	vec4 L_1c = L_1a + o_i_c4;
	o = L_1c;
	ivec3 L_1d = textureSize(Scas, L_13);
	vec3 a_i_c6 = vec3(L_1d);
	float L_1f = texture(Scas, i, i.y);
	ivec4 L_20 = textureGrad(Isca, i, L_21, L_2);
	vec4 L_22 = vec4(a_i_c6.x, a_i_c6.y, a_i_c6.z, ((float(L_20.x)) + L_1f));
	vec4 L_23 = L_1c + L_22;
	o = L_23;
	vec4 L_24 = texture(s2DR, v2);
	vec4 o_i_c7 = L_23 + L_24;
	o = o_i_c7;
	vec4 L_26 = textureProj(s2DR, v3);
	vec4 L_27 = L_26 + o_i_c7;
	o = L_27;
	vec4 L_28 = textureProj(s2DR, v4);
	vec4 L_29 = L_27 + L_28;
	o = L_29;
	vec4 L_2a = shadow2DRect(s2DRS, v3);
	vec4 L_2b = shadow2DRectProj(s2DRS, v4);
	vec4 L_2c = (L_29 + L_2a) + L_2b;
	o = L_2c;
	vec4 L_2d = textureGrad(s1D, f, f, f);
	vec4 L_2e = L_2c + L_2d;
	o = L_2e;
	vec4 L_2f = textureProjGrad(s2D, gla_globalAgg, v2, v2);
	vec4 L_30 = L_2e + L_2f;
	o = L_30;
	vec4 L_31 = shadow2DProjGradARB(s2DS, gla_globalAgg1, v2, v2);
	vec4 L_32 = shadow2DRectProjGradARB(s2DRS, gla_globalAgg2, v2, v2);
	o = ((L_30 + L_31) + L_32);
	
}

#version 130
// LunarGOO output
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_shader_texture_lod : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_texture_cube_map_array : enable
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_texture_rectangle : enable
uniform samplerCube sampC;
uniform sampler2D samp2D;
uniform sampler2DArray samp2DA;
uniform sampler2DRect samp2DR;
uniform sampler2DShadow samp2DS;
uniform samplerCubeArray Sca;
uniform isamplerCubeArray Isca;
uniform usamplerCubeArray Usca;
uniform samplerCubeArrayShadow Scas;
uniform sampler2DRect s2DR;
uniform vec2 v2;
uniform vec3 v3;
uniform vec4 v4;
uniform sampler2DRectShadow s2DRS;
uniform sampler1D s1D;
uniform float f;
uniform sampler2D s2D;
uniform sampler2DShadow s2DS;
uniform sampler2D bounds;
in float gl_ClipDistance[4];
in vec4 i;
flat in float fflat;
in float fsmooth;
noperspective in float fnop;
out vec4 o;
out ivec3 io;
out uvec4 uo;
const vec3 L_2 = vec3(0.2);
const vec2 L_5 = vec2(0.3);
const ivec2 L_6 = ivec2(1);
const vec3 L_9 = vec3(0.3);
const float L_e = 1.3;
const int L_10 = 2;
const int L_13 = 3;
const float L_17 = 0.7;
const float L_1b = 1.7;
const vec3 L_21 = vec3(0.1);
const vec4 L_30 = vec4(0.0);

void main()
{
	vec4 L_uc1 = textureGather(sampC, L_2);
	o = L_uc1;
	vec4 L_3 = L_uc1;
	L_3.y = gl_ClipDistance[3];
	o = L_3;
	vec4 L_uc2 = textureGatherOffset(samp2D, L_5, L_6);
	vec4 o_i_c3 = L_3 + L_uc2;
	o = o_i_c3;
	vec4 L_uc4 = textureGatherOffset(samp2DA, L_9, L_6);
	vec4 L_a_c5 = L_uc4 + o_i_c3;
	o = L_a_c5;
	vec4 L_b_c6 = textureGatherOffset(samp2DR, L_5, L_6);
	vec4 o_i_c7 = L_a_c5 + L_b_c6;
	o = o_i_c7;
	vec4 L_d_c8 = textureGatherOffset(samp2DS, L_5, L_e, L_6);
	vec4 L_f_c9 = textureGatherOffset(samp2D, L_5, L_6, L_10);
	vec4 L_uc10 = (L_d_c8 + o_i_c7) + L_f_c9;
	o = L_uc10;
	ivec3 io_i_c11 = textureSize(Sca, L_13);
	io = io_i_c11;
	vec4 L_uc12 = texture(Sca, i);
	vec4 o_i_c13 = L_uc10 + L_uc12;
	o = o_i_c13;
	ivec4 L_uc14 = texture(Isca, i, L_17);
	ivec3 L_18 = ivec3(L_uc14);
	io = (L_18 + io_i_c11);
	ivec4 uo_i_c15 = ivec4(texture(Usca, i));
	uo = uvec4(uo_i_c15);
	vec4 L_uc16 = textureLod(Sca, i, L_1b);
	vec4 L_uc17 = L_uc16 + o_i_c13;
	o = L_uc17;
	ivec3 L_uc18 = textureSize(Scas, L_13);
	vec3 a_i_c19 = vec3(L_uc18);
	float L_uc20 = texture(Scas, i, i.y);
	ivec4 L_uc21 = textureGrad(Isca, i, L_21, L_2);
	vec4 L_22 = vec4(a_i_c19.x, a_i_c19.y, a_i_c19.z, ((float(L_uc21.x)) + L_uc20));
	vec4 L_uc22 = L_22 + L_uc17;
	o = L_uc22;
	vec4 L_uc23 = texture(s2DR, v2);
	vec4 o_i_c24 = L_uc22 + L_uc23;
	o = o_i_c24;
	vec4 L_uc25 = textureProj(s2DR, v3);
	vec4 L_uc26 = L_uc25 + o_i_c24;
	o = L_uc26;
	vec4 L_uc27 = textureProj(s2DR, v4);
	vec4 L_uc28 = L_uc26 + L_uc27;
	o = L_uc28;
	vec4 L_uc29 = shadow2DRect(s2DRS, v3);
	vec4 L_uc30 = shadow2DRectProj(s2DRS, v4);
	vec4 L_uc31 = (L_uc28 + L_uc29) + L_uc30;
	o = L_uc31;
	vec4 L_uc32 = textureGrad(s1D, f, f, f);
	vec4 L_uc33 = L_uc31 + L_uc32;
	o = L_uc33;
	vec4 L_uc34 = textureProjGrad(s2D, L_30, v2, v2);
	vec4 L_uc35 = L_uc33 + L_uc34;
	o = L_uc35;
	vec4 L_uc36 = shadow2DProjGradARB(s2DS, L_30, v2, v2);
	vec4 L_uc37 = shadow2DRectProjGradARB(s2DRS, L_30, v2, v2);
	o = ((L_uc35 + L_uc36) + L_uc37);
	
}

