doWhileLoop.frag
#version 110
// LunarGOO output
uniform vec4 bigColor;
uniform float d;
varying vec4 BaseColor;
vec4 color_c2;

void main()
{
	vec4 color_uc1;
	color_uc1 = BaseColor;
	while (true) {
		color_c2 = bigColor + color_uc1;
		if ((color_c2.x >= d)) {
			break;
		}
		
		color_uc1 = color_c2;
	}
	
	gl_FragColor = color_c2;
	
}

forLoop.frag
#version 130
// LunarGOO output
uniform int Count;
uniform vec4 bigColor;
uniform uvec4 v4;
in vec4 BaseColor;
in float f;
vec4 gla_globalAgg;
const int C_0 = 0;
const float C_0d0 = 0.0;
vec4 L_9;
const int C_2 = 2;
vec3 L_d;
const int C_1 = 1;

void main()
{
	vec4 L_1;
	int i_uc1;
	float sum_uc2;
	int L_4;
	int L_5;
	vec4 tv_c3;
	vec4 r_uc4;
	int L_8;
	L_1 = BaseColor;
	i_uc1 = C_0;
	for (i_uc1 = 0; i_uc1 < Count; ++i_uc1) {
		L_1 = (L_1 + bigColor);
	}
	
	gl_FragColor = L_1;
	sum_uc2 = C_0d0;
	L_4 = C_0;
	for (L_4 = 0; L_4 != 4; ++L_4) {
		L_9 = vec4(sum_uc2);
		sum_uc2 = ((float(ivec4(v4)[L_4])) + sum_uc2);
	}
	
	L_5 = C_0;
	tv_c3 = gla_globalAgg;
	for (L_5 = 0; L_5 != 4; ++L_5) {
		vec4 tv_c5 = tv_c3;
		tv_c5[L_5] = (float((ivec4(v4)[L_5] << C_2)));
		tv_c3 = tv_c5;
	}
	
	vec4 Ll_FragColor_c6 = (L_9 + tv_c3) + L_1;
	vec3 L_c = vec3(Ll_FragColor_c6);
	gl_FragColor = Ll_FragColor_c6;
	r_uc4 = BaseColor;
	L_8 = C_0;
	while (true) {
		L_d = vec3(r_uc4);
		if (! (L_8 < Count)) {
			break;
		}
		
		vec4 L_e = r_uc4;
		L_e.w = f;
		r_uc4 = L_e;
		L_8 = (L_8 + C_1);
	}
	
	vec3 L_f = L_c + L_d;
	vec4 L_10 = Ll_FragColor_c6;
	L_10.xyz = L_f.xyz;
	gl_FragColor = L_10;
	
}

loops.frag
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float C_0d33 = 0.33;
const float C_0d66 = 0.66;
const vec4 C_vec4p0d66p = vec4(0.66);
const vec4 C_vec4p0d33p = vec4(0.33);
const float C_42d0 = 42.0;
const vec4 C_vec4p1d0p = vec4(1.0);
vec4 color_c42;
const int C_0 = 0;
vec4 color_c43;
const float C_20d0 = 20.0;
const float C_1d0 = 1.0;
const int C_41 = 41;
vec4 L_39;
const int C_1 = 1;
vec4 select_c44;
vec4 select_c46;
float L_41;
vec4 color_c47;
const float C_0d0 = 0.0;
vec4 color_c48;
vec4 color_c49;
const float C_2d0 = 2.0;
vec4 color_c50;
const float C_5d0 = 5.0;
vec4 L_4e;
const float C_10d0 = 10.0;
vec4 color_c52;

void main()
{
	vec4 color_uc1;
	vec4 color_uc2;
	vec4 color_uc3;
	vec4 color_uc4;
	vec4 color_uc5;
	vec4 color_uc6;
	vec4 color_uc7;
	int i_uc8;
	vec4 color_uc9;
	vec4 color_uc10;
	int L_b;
	vec4 color_uc11;
	int L_d;
	vec4 color_uc12;
	int L_f;
	vec4 color_uc13;
	int L_11;
	vec4 color_uc14;
	int L_13;
	vec4 color_uc15;
	vec4 color_uc16;
	vec4 color_uc17;
	vec4 color_uc18;
	vec4 color_uc19;
	vec4 color_uc20;
	vec4 color_uc21;
	vec4 color_uc22;
	vec4 color_uc23;
	vec4 color_uc24;
	vec4 color_uc25;
	vec4 color_uc26;
	vec4 color_uc27;
	vec4 color_uc28;
	vec4 color_uc29;
	vec4 color_uc30;
	vec4 color_uc31;
	vec4 color_uc32;
	vec4 color_uc33;
	vec4 color_uc34;
	vec4 color_uc35;
	vec4 color_uc36;
	vec4 color_uc37;
	vec4 color_uc38;
	vec4 color_uc39;
	vec4 color_uc40;
	color_uc1 = (((BaseColor.x < C_0d33) ? C_vec4p0d33p : ((BaseColor.x < C_0d66) ? C_vec4p0d66p : C_vec4p0d33p)) + BaseColor);
	while (color_uc1.x < d) {
		color_uc1 = (bigColor + color_uc1);
	}
	
	color_uc2 = color_uc1;
	while (color_uc2.z < d) {
		vec4 color_c41 = bigColor1_1 + color_uc2;
		color_uc2 = ((color_c41.w < d) ? color_c41 : (bigColor1_1 + color_c41));
	}
	
	color_uc3 = color_uc2;
	while (color_uc3.x < C_42d0) {
		color_uc3 = (color_uc3 + C_vec4p1d0p);
	}
	
	color_uc4 = color_uc3;
	while (true) {
		if (((color_uc4.y >= d3) || (color_uc4.w >= d2))) {
			break;
		}
		
		color_uc4 = (bigColor1_2 + color_uc4);
	}
	
	color_uc5 = color_uc4;
	while (color_uc5.z < d3) {
		color_c42 = bigColor1_3 + color_uc5;
		if ((color_c42.y < d4)) {
			color_uc6 = color_c42;
			break;
		}
		
		color_uc5 = (bigColor1_3 + color_c42);
	}
	
	color_uc6 = color_uc5;
	color_uc7 = color_uc6;
	i_uc8 = C_0;
	for (i_uc8 = 0; i_uc8 < Count; ++i_uc8) {
		color_uc7 = (bigColor2 + color_uc7);
	}
	
	color_uc9 = color_uc7;
	while (true) {
		color_c43 = bigColor3 + color_uc9;
		if ((color_c43.x >= d2)) {
			break;
		}
		
		color_uc9 = color_c43;
	}
	
	color_uc10 = color_c43;
	L_b = C_0;
	for (L_b = 0; L_b != 42; ++L_b) {
		vec4 L_31 = color_uc10;
		L_31.z = (color_uc10.z + d3);
		color_uc10 = L_31;
	}
	
	color_uc11 = color_uc10;
	L_d = C_0;
	for (L_d = 0; L_d != 100; ++L_d) {
		vec4 L_32 = color_uc11;
		L_32.x = (color_uc11.x + C_1d0);
		vec4 L_33 = color_uc11;
		L_33.y = (C_1d0 + color_uc11.y);
		color_uc11 = ((color_uc11.z < C_20d0) ? L_32 : L_33);
	}
	
	color_uc12 = color_uc11;
	L_f = C_0;
	for (L_f = 0; L_f != 120; ++L_f) {
		vec4 L_34 = color_uc12;
		L_34.x = (C_1d0 + color_uc12.x);
		vec4 L_35 = color_uc12;
		L_35.y = (C_1d0 + color_uc12.y);
		color_uc12 = ((color_uc12.z < C_20d0) ? L_34 : L_35);
	}
	
	color_uc13 = color_uc12;
	L_11 = C_0;
	for (L_11 = 0; L_11 != 42; ++L_11) {
		float L_36 = color_uc13.z + d3;
		vec4 L_37 = color_uc13;
		L_37.z = L_36;
		vec4 L_38 = color_uc13;
		L_38.zw = vec2(L_36, (C_1d0 + color_uc13.w));
		color_uc13 = ((color_uc13.x < d4) ? L_37 : L_38);
	}
	
	color_uc14 = color_uc13;
	L_13 = C_0;
	while (L_13 <= C_41) {
		L_39 = color_uc14;
		L_39.z = (color_uc14.z + d3);
		if ((color_uc14.x < d4)) {
			color_uc15 = L_39;
			break;
		}
		
		vec4 L_3a = L_39;
		L_3a.w = (C_1d0 + color_uc14.w);
		color_uc14 = L_3a;
		L_13 = (L_13 + C_1);
	}
	
	color_uc15 = color_uc14;
	color_uc16 = color_uc15;
	while (true) {
		if (((bigColor4 + color_uc16).x < d4)) {
			color_uc17 = (bigColor4 + color_uc16);
		} else {
			vec4 L_3b = (bigColor4 + color_uc16);
			L_3b.y = ((bigColor4 + color_uc16).y + d4);
			vec4 L_3c = (bigColor4 + color_uc16);
			L_3c.x = ((bigColor4 + color_uc16).x + d4);
			select_c44 = ((bigColor4 + color_uc16).y < d4) ? L_3b : L_3c;
			if ((select_c44.z >= d4)) {
				break;
			}
			
			color_uc17 = select_c44;
		}
		
		color_uc16 = color_uc17;
	}
	
	color_uc18 = select_c44;
	while (true) {
		vec4 color_c45 = bigColor5 + color_uc18;
		vec4 L_3f = color_c45;
		L_3f.y = (color_c45.y + d5);
		select_c46 = (color_c45.y < d5) ? L_3f : color_c45;
		if ((select_c46.x >= d5)) {
			break;
		}
		
		color_uc18 = select_c46;
	}
	
	if ((select_c46.x < d6)) {
		color_uc19 = select_c46;
		while (color_uc19.y < d6) {
			color_uc19 = (bigColor6 + color_uc19);
		}
		
		color_uc21 = color_uc19;
	} else {
		color_uc20 = select_c46;
		while (color_uc20.z < d6) {
			vec4 L_42 = color_uc20;
			L_42.z = (bigColor6.z + color_uc20.z);
			color_uc20 = L_42;
		}
		
		color_uc21 = color_uc20;
	}
	
	if ((color_uc21.x < d6)) {
		color_uc22 = color_uc21;
		while (color_uc22.y < d6) {
			color_c47 = bigColor6 + color_uc22;
			if ((d7 < C_1d0)) {
				color_uc23 = color_c47;
				break;
			}
			
			color_uc22 = color_c47;
		}
		
		color_uc23 = color_uc22;
		color_uc25 = color_uc23;
	} else {
		color_uc24 = color_uc21;
		while (color_uc24.z < d6) {
			vec4 L_44 = color_uc24;
			L_44.z = (bigColor6.z + color_uc24.z);
			color_uc24 = L_44;
		}
		
		color_uc25 = color_uc24;
	}
	
	color_uc26 = color_uc25;
	while (true) {
		if ((d7 < C_0d0)) {
			color_uc27 = color_uc26;
			break;
		}
		
		color_c48 = bigColor7 + color_uc26;
		if ((d7 < C_1d0)) {
			vec4 L_46 = color_c48;
			L_46.z = (C_1d0 + color_c48.z);
			color_uc27 = L_46;
			break;
		}
		
		color_uc26 = (BaseColor + color_c48);
	}
	
	color_uc28 = color_uc27;
	while (true) {
		if ((d8 < C_0d0)) {
			color_uc29 = color_uc28;
			break;
		}
		
		color_c49 = bigColor7 + color_uc28;
		if ((d8 < C_1d0)) {
			float L_48 = C_1d0 + color_c49.z;
			vec4 L_49 = color_c49;
			L_49.yz = vec2((C_1d0 + color_c49.y), L_48);
			vec4 L_4a = color_c49;
			L_4a.xz = vec2((C_1d0 + color_c49.x), L_48);
			color_uc29 = ((d8 < C_2d0) ? L_49 : L_4a);
			break;
		}
		
		color_c50 = BaseColor + color_c49;
		if ((color_c50.z >= d8)) {
			color_uc29 = color_c50;
			break;
		}
		
		color_uc28 = color_c50;
	}
	
	color_uc30 = color_uc29;
	while (color_uc30.w < d9) {
		color_uc32 = color_uc30;
		if ((d9 > d8)) {
			color_uc31 = color_uc30;
			if (! (color_uc30.x > d7)) {
				if (! (color_uc30.z == C_5d0)) {
					break;
				}
				
				vec4 L_4c = color_uc30;
				L_4c.w = (C_1d0 + color_uc30.w);
				color_uc31 = L_4c;
			}
			
			color_uc32 = color_uc31;
		}
		
		color_uc30 = color_uc32;
	}
	
	color_uc33 = color_uc30;
	while (color_uc33.z < d10) {
		float L_4d = C_1d0 + color_uc33.y;
		L_4e = color_uc33;
		L_4e.y = L_4d;
		if (! (L_4d < d11)) {
			color_uc34 = (C_vec4p1d0p + L_4e);
			break;
		}
		
		float L_4f = C_1d0 + color_uc33.z;
		vec4 L_50 = L_4e;
		L_50.zw = vec2(L_4f, (C_1d0 + color_uc33.w));
		vec4 L_51 = L_4e;
		L_51.xz = vec2((C_1d0 + color_uc33.x), L_4f);
		color_uc33 = ((color_uc33.w < d12) ? L_50 : L_51);
	}
	
	color_uc34 = color_uc33;
	color_uc35 = color_uc34;
	while (color_uc35.x < C_10d0) {
		vec4 color_c51 = bigColor8 + color_uc35;
		vec4 L_53 = color_c51;
		L_53.y = (bigColor8.x + color_c51.y);
		color_uc35 = ((color_c51.z < d8) ? ((color_c51.w < d6) ? color_c51 : L_53) : L_53);
	}
	
	gl_FragColor = (C_vec4p1d0p + color_uc35);
	color_uc36 = (C_vec4p1d0p + color_uc35);
	while (color_uc36.x < d14) {
		if ((color_uc36.y < d15)) {
			return;
		}
		
		color_uc36 = (C_vec4p1d0p + color_uc36);
	}
	
	color_uc37 = (C_vec4p1d0p + color_uc36);
	while (color_uc37.w < d16) {
		vec4 L_54 = color_uc37;
		L_54.w = (C_1d0 + color_uc37.w);
		color_uc37 = L_54;
	}
	
	color_uc38 = color_uc37;
	while (true) {
		if (((color_uc38.y >= d3) || (color_uc38.w >= d2))) {
			color_uc39 = color_uc38;
			while (color_uc39.y >= d18) {
				color_c52 = C_vec4p1d0p + color_uc39;
				if ((color_c52.x >= d17)) {
					color_uc40 = color_c52;
					while (color_uc40.y < d16) {
						if ((color_uc40.w < d16)) {
							discard;
						}
						
						color_uc40 = (C_vec4p1d0p + color_uc40);
					}
					
					gl_FragColor = (C_vec4p1d0p + color_uc40);
					return;
				}
				
				color_uc39 = color_c52;
			}
			
			return;
		}
		
		if (((bigColor1_2 + color_uc38).z < d3)) {
			return;
		}
		
		color_uc38 = (bigColor1_2 + color_uc38);
	}
	
}

whileLoop.frag
#version 110
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
varying vec4 BaseColor;

void main()
{
	vec4 color_uc1;
	color_uc1 = BaseColor;
	while (color_uc1.x < d) {
		color_uc1 = (bigColor + color_uc1);
	}
	
	gl_FragColor = color_uc1;
	
}

