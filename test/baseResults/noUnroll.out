doWhileLoop.frag
#version 110
// LunarGOO output
uniform vec4 bigColor;
uniform float d;
varying vec4 BaseColor;
vec4 color_c2;

void main()
{
	vec4 color_uc1;
	color_uc1 = BaseColor;
	while (true) {
		color_c2 = bigColor + color_uc1;
		bool L_3 = color_c2.x >= d;
		if (L_3) {
			break;
		}
		
		color_uc1 = color_c2;
	}
	
	gl_FragColor = color_c2;
	
}

forLoop.frag
#version 130
// LunarGOO output
uniform int Count;
uniform vec4 bigColor;
uniform uvec4 v4;
in vec4 BaseColor;
vec4 gla_globalAgg;
const int L_7 = 0;
const float L_9 = 0.0;
vec4 L_a;
const int L_e = 2;

void main()
{
	vec4 L_1;
	int i_uc1;
	float sum_uc2;
	int L_4;
	int L_5;
	vec4 tv_c3;
	L_1 = BaseColor;
	i_uc1 = L_7;
	for (i_uc1 = 0; i_uc1 < Count; ++i_uc1) {
		vec4 color_c4 = L_1 + bigColor;
		L_1 = color_c4;
	}
	
	gl_FragColor = L_1;
	sum_uc2 = L_9;
	L_4 = L_7;
	for (L_4 = 0; L_4 != 4; ++L_4) {
		L_a = vec4(sum_uc2);
		float L_b = float(ivec4(v4)[L_4]);
		float sum_c5 = L_b + sum_uc2;
		sum_uc2 = sum_c5;
	}
	
	L_5 = L_7;
	tv_c3 = gla_globalAgg;
	for (L_5 = 0; L_5 != 4; ++L_5) {
		int L_d = ivec4(v4)[L_5] << L_e;
		float L_f = float(L_d);
		vec4 tv_c6 = tv_c3;
		tv_c6[L_5] = L_f;
		tv_c3 = tv_c6;
	}
	
	vec4 L_11 = L_a + tv_c3;
	vec4 Ll_FragColor_c7 = L_1 + L_11;
	gl_FragColor = Ll_FragColor_c7;
	
}

loops.frag
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float L_2f = 0.33;
const float L_31 = 0.66;
const vec4 L_33 = vec4(0.66);
const vec4 L_34 = vec4(0.33);
const float L_3c = 42.0;
const vec4 L_3e = vec4(1.0);
vec4 color_c52;
const int L_46 = 0;
vec4 color_c55;
const float L_4d = 20.0;
const float L_4f = 1.0;
const int L_60 = 41;
vec4 L_62;
const int L_67 = 1;
vec4 select_c60;
vec4 select_c62;
float L_76;
vec4 color_c64;
const float L_82 = 0.0;
vec4 color_c65;
vec4 color_c67;
const float L_8d = 2.0;
vec4 color_c69;
const float L_98 = 5.0;
vec4 L_9c;
const float L_a6 = 10.0;
vec4 color_c80;

void main()
{
	vec4 color_uc1;
	vec4 color_uc2;
	vec4 color_uc3;
	vec4 color_uc4;
	vec4 color_uc5;
	vec4 color_uc6;
	vec4 color_uc7;
	int i_uc8;
	vec4 color_uc9;
	vec4 color_uc10;
	int L_b;
	vec4 color_uc11;
	int L_d;
	vec4 color_uc12;
	int L_f;
	vec4 color_uc13;
	int L_11;
	vec4 color_uc14;
	int L_13;
	vec4 color_uc15;
	vec4 color_uc16;
	vec4 color_uc17;
	vec4 color_uc18;
	vec4 color_uc19;
	vec4 color_uc20;
	vec4 color_uc21;
	vec4 color_uc22;
	vec4 color_uc23;
	vec4 color_uc24;
	vec4 color_uc25;
	vec4 color_uc26;
	vec4 color_uc27;
	vec4 color_uc28;
	vec4 color_uc29;
	vec4 color_uc30;
	vec4 color_uc31;
	vec4 color_uc32;
	vec4 color_uc33;
	vec4 color_uc34;
	vec4 color_uc35;
	vec4 color_uc36;
	vec4 color_uc37;
	vec4 color_uc38;
	vec4 color_uc39;
	vec4 color_uc40;
	bool L_2e = BaseColor.x < L_2f;
	bool L_30 = BaseColor.x < L_31;
	vec4 select_c41 = L_30 ? L_33 : L_34;
	vec4 select_c42 = L_2e ? L_34 : select_c41;
	vec4 select_c43 = BaseColor + select_c42;
	color_uc1 = select_c43;
	while (color_uc1.x < d) {
		vec4 color_c44 = bigColor + color_uc1;
		color_uc1 = color_c44;
	}
	
	color_uc2 = color_uc1;
	while (color_uc2.z < d) {
		vec4 color_c45 = bigColor1_1 + color_uc2;
		bool L_39 = color_c45.w < d;
		vec4 color_c46 = bigColor1_1 + color_c45;
		vec4 select_c47 = L_39 ? color_c45 : color_c46;
		color_uc2 = select_c47;
	}
	
	color_uc3 = color_uc2;
	while (color_uc3.x < L_3c) {
		vec4 color_c48 = color_uc3 + L_3e;
		color_uc3 = color_c48;
	}
	
	color_uc4 = color_uc3;
	while (true) {
		bool notlhs_c49 = color_uc4.w >= d2;
		bool notrhs_c50 = color_uc4.y >= d3;
		bool L_41 = notrhs_c50 || notlhs_c49;
		if (L_41) {
			break;
		}
		
		vec4 color_c51 = bigColor1_2 + color_uc4;
		color_uc4 = color_c51;
	}
	
	color_uc5 = color_uc4;
	while (color_uc5.z < d3) {
		color_c52 = bigColor1_3 + color_uc5;
		bool L_44 = color_c52.y < d4;
		if (L_44) {
			color_uc6 = color_c52;
			break;
		}
		
		vec4 color_c53 = bigColor1_3 + color_c52;
		color_uc5 = color_c53;
	}
	
	color_uc6 = color_uc5;
	color_uc7 = color_uc6;
	i_uc8 = L_46;
	for (i_uc8 = 0; i_uc8 < Count; ++i_uc8) {
		vec4 color_c54 = bigColor2 + color_uc7;
		color_uc7 = color_c54;
	}
	
	color_uc9 = color_uc7;
	while (true) {
		color_c55 = bigColor3 + color_uc9;
		bool L_49 = color_c55.x >= d2;
		if (L_49) {
			break;
		}
		
		color_uc9 = color_c55;
	}
	
	color_uc10 = color_c55;
	L_b = L_46;
	for (L_b = 0; L_b != 42; ++L_b) {
		float L_4a = color_uc10.z + d3;
		vec4 L_4b = color_uc10;
		L_4b.z = L_4a;
		color_uc10 = L_4b;
	}
	
	color_uc11 = color_uc10;
	L_d = L_46;
	for (L_d = 0; L_d != 100; ++L_d) {
		bool L_4c = color_uc11.z < L_4d;
		float L_4e = color_uc11.x + L_4f;
		vec4 L_50 = color_uc11;
		L_50.x = L_4e;
		float L_51 = L_4f + color_uc11.y;
		vec4 L_52 = color_uc11;
		L_52.y = L_51;
		vec4 select_c56 = L_4c ? L_50 : L_52;
		color_uc11 = select_c56;
	}
	
	color_uc12 = color_uc11;
	L_f = L_46;
	for (L_f = 0; L_f != 120; ++L_f) {
		bool L_54 = color_uc12.z < L_4d;
		float L_55 = L_4f + color_uc12.x;
		vec4 L_56 = color_uc12;
		L_56.x = L_55;
		float L_57 = L_4f + color_uc12.y;
		vec4 L_58 = color_uc12;
		L_58.y = L_57;
		vec4 select_c57 = L_54 ? L_56 : L_58;
		color_uc12 = select_c57;
	}
	
	color_uc13 = color_uc12;
	L_11 = L_46;
	for (L_11 = 0; L_11 != 42; ++L_11) {
		float L_5a = color_uc13.z + d3;
		vec4 L_5b = color_uc13;
		L_5b.z = L_5a;
		bool L_5c = color_uc13.x < d4;
		float L_5d = L_4f + color_uc13.w;
		vec4 L_5e = color_uc13;
		L_5e.zw = vec2(L_5a, L_5d);
		vec4 select_c58 = L_5c ? L_5b : L_5e;
		color_uc13 = select_c58;
	}
	
	color_uc14 = color_uc13;
	L_13 = L_46;
	while (L_13 <= L_60) {
		float L_61 = color_uc14.z + d3;
		L_62 = color_uc14;
		L_62.z = L_61;
		bool L_63 = color_uc14.x < d4;
		if (L_63) {
			color_uc15 = L_62;
			break;
		}
		
		float L_64 = L_4f + color_uc14.w;
		vec4 L_65 = L_62;
		L_65.w = L_64;
		int L_66 = L_13 + L_67;
		color_uc14 = L_65;
		L_13 = L_66;
	}
	
	color_uc15 = color_uc14;
	color_uc16 = color_uc15;
	while (true) {
		vec4 color_c59 = bigColor4 + color_uc16;
		bool L_69 = color_c59.x < d4;
		if (L_69) {
			color_uc17 = color_c59;
		} else {
			bool L_6a = color_c59.y < d4;
			float L_6b = color_c59.y + d4;
			vec4 L_6c = color_c59;
			L_6c.y = L_6b;
			float L_6d = color_c59.x + d4;
			vec4 L_6e = color_c59;
			L_6e.x = L_6d;
			select_c60 = L_6a ? L_6c : L_6e;
			bool L_70 = select_c60.z >= d4;
			if (L_70) {
				break;
			}
			
			color_uc17 = select_c60;
		}
		
		color_uc16 = color_uc17;
	}
	
	color_uc18 = select_c60;
	while (true) {
		vec4 color_c61 = bigColor5 + color_uc18;
		bool L_72 = color_c61.y < d5;
		float L_73 = color_c61.y + d5;
		vec4 L_74 = color_c61;
		L_74.y = L_73;
		select_c62 = L_72 ? L_74 : color_c61;
		bool L_77 = select_c62.x >= d5;
		if (L_77) {
			break;
		}
		
		color_uc18 = select_c62;
	}
	
	bool L_78 = select_c62.x < d6;
	if (L_78) {
		color_uc19 = select_c62;
		while (color_uc19.y < d6) {
			vec4 color_c63 = bigColor6 + color_uc19;
			color_uc19 = color_c63;
		}
		
		color_uc21 = color_uc19;
	} else {
		color_uc20 = select_c62;
		while (color_uc20.z < d6) {
			float L_7a = bigColor6.z + color_uc20.z;
			vec4 L_7b = color_uc20;
			L_7b.z = L_7a;
			color_uc20 = L_7b;
		}
		
		color_uc21 = color_uc20;
	}
	
	bool L_7c = color_uc21.x < d6;
	if (L_7c) {
		bool L_7d = d7 < L_4f;
		color_uc22 = color_uc21;
		while (color_uc22.y < d6) {
			color_c64 = bigColor6 + color_uc22;
			if (L_7d) {
				color_uc23 = color_c64;
				break;
			}
			
			color_uc22 = color_c64;
		}
		
		color_uc23 = color_uc22;
		color_uc25 = color_uc23;
	} else {
		color_uc24 = color_uc21;
		while (color_uc24.z < d6) {
			float L_7f = bigColor6.z + color_uc24.z;
			vec4 L_80 = color_uc24;
			L_80.z = L_7f;
			color_uc24 = L_80;
		}
		
		color_uc25 = color_uc24;
	}
	
	bool L_81 = d7 < L_82;
	bool L_83 = d7 < L_4f;
	color_uc26 = color_uc25;
	while (true) {
		if (L_81) {
			color_uc27 = color_uc26;
			break;
		}
		
		color_c65 = bigColor7 + color_uc26;
		if (L_83) {
			float L_85 = L_4f + color_c65.z;
			vec4 L_86 = color_c65;
			L_86.z = L_85;
			color_uc27 = L_86;
			break;
		}
		
		vec4 color_c66 = BaseColor + color_c65;
		color_uc26 = color_c66;
	}
	
	bool L_88 = d8 < L_82;
	bool L_89 = d8 < L_4f;
	color_uc28 = color_uc27;
	while (true) {
		if (L_88) {
			color_uc29 = color_uc28;
			break;
		}
		
		color_c67 = bigColor7 + color_uc28;
		if (L_89) {
			float L_8b = L_4f + color_c67.z;
			bool L_8c = d8 < L_8d;
			float L_8e = L_4f + color_c67.y;
			vec4 L_8f = color_c67;
			L_8f.yz = vec2(L_8e, L_8b);
			float L_90 = L_4f + color_c67.x;
			vec4 L_91 = color_c67;
			L_91.xz = vec2(L_90, L_8b);
			vec4 select_c68 = L_8c ? L_8f : L_91;
			color_uc29 = select_c68;
			break;
		}
		
		color_c69 = BaseColor + color_c67;
		bool L_94 = color_c69.z >= d8;
		if (L_94) {
			color_uc29 = color_c69;
			break;
		}
		
		color_uc28 = color_c69;
	}
	
	bool L_95 = d9 > d8;
	color_uc30 = color_uc29;
	while (color_uc30.w < d9) {
		color_uc32 = color_uc30;
		if (L_95) {
			bool L_96 = color_uc30.x > d7;
			color_uc31 = color_uc30;
			if (! L_96) {
				bool L_97 = color_uc30.z == L_98;
				if (! L_97) {
					break;
				}
				
				float L_99 = L_4f + color_uc30.w;
				vec4 L_9a = color_uc30;
				L_9a.w = L_99;
				color_uc31 = L_9a;
			}
			
			color_uc32 = color_uc31;
		}
		
		color_uc30 = color_uc32;
	}
	
	color_uc33 = color_uc30;
	while (color_uc33.z < d10) {
		float L_9b = L_4f + color_uc33.y;
		L_9c = color_uc33;
		L_9c.y = L_9b;
		bool L_9d = L_9b < d11;
		if (! L_9d) {
			vec4 color_c70 = L_3e + L_9c;
			color_uc34 = color_c70;
			break;
		}
		
		float L_9f = L_4f + color_uc33.z;
		bool L_a0 = color_uc33.w < d12;
		float L_a1 = L_4f + color_uc33.w;
		vec4 L_a2 = L_9c;
		L_a2.zw = vec2(L_9f, L_a1);
		float L_a3 = L_4f + color_uc33.x;
		vec4 L_a4 = L_9c;
		L_a4.xz = vec2(L_a3, L_9f);
		vec4 select_c71 = L_a0 ? L_a2 : L_a4;
		color_uc33 = select_c71;
	}
	
	color_uc34 = color_uc33;
	color_uc35 = color_uc34;
	while (color_uc35.x < L_a6) {
		vec4 color_c72 = bigColor8 + color_uc35;
		bool L_a8 = color_c72.z < d8;
		bool L_a9 = color_c72.w < d6;
		float L_aa = bigColor8.x + color_c72.y;
		vec4 L_ab = color_c72;
		L_ab.y = L_aa;
		vec4 select_c73 = L_a9 ? color_c72 : L_ab;
		vec4 select_c74 = L_a8 ? select_c73 : L_ab;
		color_uc35 = select_c74;
	}
	
	vec4 color_c75 = L_3e + color_uc35;
	gl_FragColor = color_c75;
	color_uc36 = color_c75;
	while (color_uc36.x < d14) {
		bool L_af = color_uc36.y < d15;
		if (L_af) {
			return;
		}
		
		vec4 color_c76 = L_3e + color_uc36;
		color_uc36 = color_c76;
	}
	
	vec4 color_c77 = L_3e + color_uc36;
	color_uc37 = color_c77;
	while (color_uc37.w < d16) {
		float L_b2 = L_4f + color_uc37.w;
		vec4 L_b3 = color_uc37;
		L_b3.w = L_b2;
		color_uc37 = L_b3;
	}
	
	color_uc38 = color_uc37;
	while (true) {
		bool notlhs_c78 = color_uc38.w >= d2;
		bool notrhs_c79 = color_uc38.y >= d3;
		bool L_b6 = notrhs_c79 || notlhs_c78;
		if (L_b6) {
			color_uc39 = color_uc38;
			while (color_uc39.y >= d18) {
				color_c80 = L_3e + color_uc39;
				bool L_b8 = color_c80.x >= d17;
				if (L_b8) {
					color_uc40 = color_c80;
					while (color_uc40.y < d16) {
						bool L_b9 = color_uc40.w < d16;
						if (L_b9) {
							discard;
						}
						
						vec4 color_c81 = L_3e + color_uc40;
						color_uc40 = color_c81;
					}
					
					vec4 color_c82 = L_3e + color_uc40;
					gl_FragColor = color_c82;
					return;
				}
				
				color_uc39 = color_c80;
			}
			
			return;
		}
		
		vec4 color_c83 = bigColor1_2 + color_uc38;
		bool L_bd = color_c83.z < d3;
		if (L_bd) {
			return;
		}
		
		color_uc38 = color_c83;
	}
	
}

whileLoop.frag
#version 110
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
varying vec4 BaseColor;

void main()
{
	vec4 color_uc1;
	color_uc1 = BaseColor;
	while (color_uc1.x < d) {
		vec4 color_c2 = bigColor + color_uc1;
		color_uc1 = color_c2;
	}
	
	gl_FragColor = color_uc1;
	
}

