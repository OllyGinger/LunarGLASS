doWhileLoop.frag
#version 110
// LunarGOO output
uniform vec4 bigColor;
uniform float d;
varying vec4 BaseColor;
vec4 color_c2;

void main()
{
	vec4 color_uc1;
	color_uc1 = BaseColor;
	while (true) {
		color_c2 = bigColor + color_uc1;
		if ((color_c2.x >= d)) {
			break;
		}
		
		color_uc1 = color_c2;
	}
	
	gl_FragColor = color_c2;
	
}

forLoop.frag
#version 130
// LunarGOO output
uniform int Count;
uniform vec4 bigColor;
uniform uvec4 v4;
in vec4 BaseColor;
in float f;
vec4 gla_globalAgg;
const int C_0 = 0;
const float C_0d0 = 0.0;
vec4 Lg_7;
const int C_2 = 2;
vec3 Lg_8;
const int C_1 = 1;

void main()
{
	vec4 Lg_1;
	int i_uc1;
	float sum_uc2;
	int Lg_2;
	int Lg_3;
	vec4 tv_c3;
	vec4 r_uc4;
	int Lg_4;
	vec4 Lg_5;
	int Lg_6;
	Lg_1 = BaseColor;
	i_uc1 = C_0;
	for (i_uc1 = 0; i_uc1 < Count; ++i_uc1) {
		Lg_1 = (Lg_1 + bigColor);
	}
	
	gl_FragColor = Lg_1;
	sum_uc2 = C_0d0;
	Lg_2 = C_0;
	for ( ; Lg_2 != 4; ++Lg_2) {
		Lg_7 = vec4(sum_uc2);
		sum_uc2 = ((float(ivec4(v4)[Lg_2])) + sum_uc2);
	}
	
	Lg_3 = C_0;
	tv_c3 = gla_globalAgg;
	for ( ; Lg_3 != 4; ++Lg_3) {
		vec4 tv_c5 = tv_c3;
		tv_c5[Lg_3] = (float((ivec4(v4)[Lg_3] << C_2)));
		tv_c3 = tv_c5;
	}
	
	vec4 Ll_FragColor_c6 = (Lg_7 + tv_c3) + Lg_1;
	gl_FragColor = Ll_FragColor_c6;
	r_uc4 = BaseColor;
	Lg_4 = C_0;
	while (true) {
		if (! (Lg_4 < Count)) {
			break;
		}
		
		vec4 H_qbs9rg1 = r_uc4;
		H_qbs9rg1.w = f;
		r_uc4 = H_qbs9rg1;
		Lg_4 = (Lg_4 + C_1);
	}
	
	vec3 H_fg1kqb1 = Ll_FragColor_c6.xyz + r_uc4.xyz;
	vec4 H_3lkmmo1 = Ll_FragColor_c6;
	H_3lkmmo1.xyz = H_fg1kqb1.xyz;
	gl_FragColor = H_3lkmmo1;
	Lg_5 = H_3lkmmo1;
	Lg_6 = C_0;
	for ( ; Lg_6 <= 15; Lg_6 += 4) {
		gl_FragColor = (Lg_5 * vec4(f));
		Lg_5 = (Lg_5 * vec4(f));
	}
	
	
}

loops.frag
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float C_0d33 = 0.33;
const float C_0d66 = 0.66;
const vec4 C_vec4p0d66p = vec4(0.66);
const vec4 C_vec4p0d33p = vec4(0.33);
const float C_42d0 = 42.0;
const vec4 C_vec4p1d0p = vec4(1.0);
vec4 color_c42;
const int C_0 = 0;
vec4 color_c43;
const float C_20d0 = 20.0;
const float C_1d0 = 1.0;
const int C_41 = 41;
vec4 Lg_6;
const int C_1 = 1;
vec4 select_c45;
vec4 select_c47;
float Lg_7;
vec4 color_c48;
const float C_0d0 = 0.0;
vec4 color_c49;
vec4 color_c50;
const float C_2d0 = 2.0;
vec4 color_c51;
const float C_5d0 = 5.0;
vec4 Lg_8;
const float C_10d0 = 10.0;
vec4 color_c53;

void main()
{
	vec4 color_uc1;
	vec4 color_uc2;
	vec4 color_uc3;
	vec4 color_uc4;
	vec4 color_uc5;
	vec4 color_uc6;
	vec4 color_uc7;
	int i_uc8;
	vec4 color_uc9;
	vec4 color_uc10;
	int Lg_1;
	vec4 color_uc11;
	int Lg_2;
	vec4 color_uc12;
	int Lg_3;
	vec4 color_uc13;
	int Lg_4;
	vec4 color_uc14;
	int Lg_5;
	vec4 color_uc15;
	vec4 color_uc16;
	vec4 color_uc17;
	vec4 color_uc18;
	vec4 color_uc19;
	vec4 color_uc20;
	vec4 color_uc21;
	vec4 color_uc22;
	vec4 color_uc23;
	vec4 color_uc24;
	vec4 color_uc25;
	vec4 color_uc26;
	vec4 color_uc27;
	vec4 color_uc28;
	vec4 color_uc29;
	vec4 color_uc30;
	vec4 color_uc31;
	vec4 color_uc32;
	vec4 color_uc33;
	vec4 color_uc34;
	vec4 color_uc35;
	vec4 color_uc36;
	vec4 color_uc37;
	vec4 color_uc38;
	vec4 color_uc39;
	vec4 color_uc40;
	color_uc1 = (((BaseColor.x < C_0d33) ? C_vec4p0d33p : ((BaseColor.x < C_0d66) ? C_vec4p0d66p : C_vec4p0d33p)) + BaseColor);
	while (color_uc1.x < d) {
		color_uc1 = (bigColor + color_uc1);
	}
	
	color_uc2 = color_uc1;
	while (color_uc2.z < d) {
		vec4 color_c41 = bigColor1_1 + color_uc2;
		color_uc2 = ((color_c41.w < d) ? color_c41 : (bigColor1_1 + color_c41));
	}
	
	color_uc3 = color_uc2;
	while (color_uc3.x < C_42d0) {
		color_uc3 = (color_uc3 + C_vec4p1d0p);
	}
	
	color_uc4 = color_uc3;
	while (true) {
		if (((color_uc4.y >= d3) || (color_uc4.w >= d2))) {
			break;
		}
		
		color_uc4 = (bigColor1_2 + color_uc4);
	}
	
	color_uc5 = color_uc4;
	while (color_uc5.z < d3) {
		color_c42 = bigColor1_3 + color_uc5;
		if ((color_c42.y < d4)) {
			color_uc6 = color_c42;
			break;
		}
		
		color_uc5 = (bigColor1_3 + color_c42);
	}
	
	color_uc6 = color_uc5;
	color_uc7 = color_uc6;
	i_uc8 = C_0;
	for (i_uc8 = 0; i_uc8 < Count; ++i_uc8) {
		color_uc7 = (bigColor2 + color_uc7);
	}
	
	color_uc9 = color_uc7;
	while (true) {
		color_c43 = bigColor3 + color_uc9;
		if ((color_c43.x >= d2)) {
			break;
		}
		
		color_uc9 = color_c43;
	}
	
	color_uc10 = color_c43;
	Lg_1 = C_0;
	for ( ; Lg_1 != 42; ++Lg_1) {
		vec4 H_gad7u3 = color_uc10;
		H_gad7u3.z = (color_uc10.z + d3);
		color_uc10 = H_gad7u3;
	}
	
	color_uc11 = color_uc10;
	Lg_2 = C_0;
	for ( ; Lg_2 != 100; ++Lg_2) {
		vec4 H_fzy644 = color_uc11;
		H_fzy644.x = (color_uc11.x + C_1d0);
		vec4 H_fzy644r = color_uc11;
		H_fzy644r.y = (C_1d0 + color_uc11.y);
		color_uc11 = ((color_uc11.z < C_20d0) ? H_fzy644 : H_fzy644r);
	}
	
	color_uc12 = color_uc11;
	Lg_3 = C_0;
	for ( ; Lg_3 != 120; ++Lg_3) {
		vec4 H_eok6e4 = color_uc12;
		H_eok6e4.x = (C_1d0 + color_uc12.x);
		vec4 H_eok6e4r = color_uc12;
		H_eok6e4r.y = (C_1d0 + color_uc12.y);
		color_uc12 = ((color_uc12.z < C_20d0) ? H_eok6e4 : H_eok6e4r);
	}
	
	color_uc13 = color_uc12;
	Lg_4 = C_0;
	for ( ; Lg_4 != 42; ++Lg_4) {
		float H_9gp8pd1 = color_uc13.z + d3;
		vec4 H_dd66o4 = color_uc13;
		H_dd66o4.z = H_9gp8pd1;
		vec4 H_dd66o4r = color_uc13;
		H_dd66o4r.zw = vec2(H_9gp8pd1, (C_1d0 + color_uc13.w));
		color_uc13 = ((color_uc13.x < d4) ? H_dd66o4 : H_dd66o4r);
	}
	
	color_uc14 = color_uc13;
	Lg_5 = C_0;
	while (Lg_5 <= C_41) {
		Lg_6 = color_uc14;
		Lg_6.z = (color_uc14.z + d3);
		if ((color_uc14.x < d4)) {
			color_uc15 = Lg_6;
			break;
		}
		
		vec4 H_xxjjwy = Lg_6;
		H_xxjjwy.w = (C_1d0 + color_uc14.w);
		color_uc14 = H_xxjjwy;
		Lg_5 = (Lg_5 + C_1);
	}
	
	color_uc15 = color_uc14;
	color_uc16 = color_uc15;
	while (true) {
		vec4 color_c44 = bigColor4 + color_uc16;
		if ((color_c44.x < d4)) {
			color_uc17 = color_c44;
		} else {
			vec4 H_e98za7 = color_c44;
			H_e98za7.y = (color_c44.y + d4);
			vec4 H_e98za7r = color_c44;
			H_e98za7r.x = (color_c44.x + d4);
			select_c45 = (color_c44.y < d4) ? H_e98za7 : H_e98za7r;
			if ((select_c45.z >= d4)) {
				break;
			}
			
			color_uc17 = select_c45;
		}
		
		color_uc16 = color_uc17;
	}
	
	color_uc18 = select_c45;
	while (true) {
		vec4 color_c46 = bigColor5 + color_uc18;
		vec4 H_gv00r6 = color_c46;
		H_gv00r6.y = (color_c46.y + d5);
		select_c47 = (color_c46.y < d5) ? H_gv00r6 : color_c46;
		if ((select_c47.x >= d5)) {
			break;
		}
		
		color_uc18 = select_c47;
	}
	
	if ((select_c47.x < d6)) {
		color_uc19 = select_c47;
		while (color_uc19.y < d6) {
			color_uc19 = (bigColor6 + color_uc19);
		}
		
		color_uc21 = color_uc19;
	} else {
		color_uc20 = select_c47;
		while (color_uc20.z < d6) {
			vec4 H_7vi7hz = color_uc20;
			H_7vi7hz.z = (bigColor6.z + color_uc20.z);
			color_uc20 = H_7vi7hz;
		}
		
		color_uc21 = color_uc20;
	}
	
	if ((color_uc21.x < d6)) {
		bool H_lmykhx1 = d7 < C_1d0;
		color_uc22 = color_uc21;
		while (color_uc22.y < d6) {
			color_c48 = bigColor6 + color_uc22;
			if (H_lmykhx1) {
				color_uc23 = color_c48;
				break;
			}
			
			color_uc22 = color_c48;
		}
		
		color_uc23 = color_uc22;
		color_uc25 = color_uc23;
	} else {
		color_uc24 = color_uc21;
		while (color_uc24.z < d6) {
			vec4 H_3nx5l01 = color_uc24;
			H_3nx5l01.z = (bigColor6.z + color_uc24.z);
			color_uc24 = H_3nx5l01;
		}
		
		color_uc25 = color_uc24;
	}
	
	bool H_2ecxn2 = d7 < C_0d0;
	bool H_lmykhx1r = d7 < C_1d0;
	color_uc26 = color_uc25;
	while (true) {
		if (H_2ecxn2) {
			color_uc27 = color_uc26;
			break;
		}
		
		color_c49 = bigColor7 + color_uc26;
		if (H_lmykhx1r) {
			vec4 H_9q8xo8 = color_c49;
			H_9q8xo8.z = (C_1d0 + color_c49.z);
			color_uc27 = H_9q8xo8;
			break;
		}
		
		color_uc26 = (BaseColor + color_c49);
	}
	
	bool H_zt4vz81 = d8 < C_0d0;
	bool H_cokhy9 = d8 < C_1d0;
	color_uc28 = color_uc27;
	while (true) {
		if (H_zt4vz81) {
			color_uc29 = color_uc28;
			break;
		}
		
		color_c50 = bigColor7 + color_uc28;
		if (H_cokhy9) {
			float H_jrs17j1 = C_1d0 + color_c50.z;
			vec4 H_b5l1v7 = color_c50;
			H_b5l1v7.yz = vec2((C_1d0 + color_c50.y), H_jrs17j1);
			vec4 H_b5l1v7r = color_c50;
			H_b5l1v7r.xz = vec2((C_1d0 + color_c50.x), H_jrs17j1);
			color_uc29 = ((d8 < C_2d0) ? H_b5l1v7 : H_b5l1v7r);
			break;
		}
		
		color_c51 = BaseColor + color_c50;
		if ((color_c51.z >= d8)) {
			color_uc29 = color_c51;
			break;
		}
		
		color_uc28 = color_c51;
	}
	
	bool H_45lodh = d9 > d8;
	color_uc30 = color_uc29;
	while (color_uc30.w < d9) {
		color_uc32 = color_uc30;
		if (H_45lodh) {
			color_uc31 = color_uc30;
			if (! (color_uc30.x > d7)) {
				if (! (color_uc30.z == C_5d0)) {
					break;
				}
				
				vec4 H_ie1uo61 = color_uc30;
				H_ie1uo61.w = (C_1d0 + color_uc30.w);
				color_uc31 = H_ie1uo61;
			}
			
			color_uc32 = color_uc31;
		}
		
		color_uc30 = color_uc32;
	}
	
	color_uc33 = color_uc30;
	while (color_uc33.z < d10) {
		float H_au83fv = C_1d0 + color_uc33.y;
		Lg_8 = color_uc33;
		Lg_8.y = H_au83fv;
		if (! (H_au83fv < d11)) {
			color_uc34 = (C_vec4p1d0p + Lg_8);
			break;
		}
		
		float H_b5n35v = C_1d0 + color_uc33.z;
		vec4 H_vbrigz = Lg_8;
		H_vbrigz.zw = vec2(H_b5n35v, (C_1d0 + color_uc33.w));
		vec4 H_vbrigzr = Lg_8;
		H_vbrigzr.xz = vec2((C_1d0 + color_uc33.x), H_b5n35v);
		color_uc33 = ((color_uc33.w < d12) ? H_vbrigz : H_vbrigzr);
	}
	
	color_uc34 = color_uc33;
	color_uc35 = color_uc34;
	while (color_uc35.x < C_10d0) {
		vec4 color_c52 = bigColor8 + color_uc35;
		vec4 H_9js0f8 = color_c52;
		H_9js0f8.y = (bigColor8.x + color_c52.y);
		color_uc35 = ((color_c52.z < d8) ? ((color_c52.w < d6) ? color_c52 : H_9js0f8) : H_9js0f8);
	}
	
	gl_FragColor = (C_vec4p1d0p + color_uc35);
	color_uc36 = (C_vec4p1d0p + color_uc35);
	while (color_uc36.x < d14) {
		if ((color_uc36.y < d15)) {
			return;
		}
		
		color_uc36 = (C_vec4p1d0p + color_uc36);
	}
	
	color_uc37 = (C_vec4p1d0p + color_uc36);
	while (color_uc37.w < d16) {
		vec4 H_nx0wa51 = color_uc37;
		H_nx0wa51.w = (C_1d0 + color_uc37.w);
		color_uc37 = H_nx0wa51;
	}
	
	color_uc38 = color_uc37;
	while (true) {
		if (((color_uc38.y >= d3) || (color_uc38.w >= d2))) {
			color_uc39 = color_uc38;
			while (color_uc39.y >= d18) {
				color_c53 = C_vec4p1d0p + color_uc39;
				if ((color_c53.x >= d17)) {
					color_uc40 = color_c53;
					while (color_uc40.y < d16) {
						if ((color_uc40.w < d16)) {
							discard;
						}
						
						color_uc40 = (C_vec4p1d0p + color_uc40);
					}
					
					gl_FragColor = (C_vec4p1d0p + color_uc40);
					return;
				}
				
				color_uc39 = color_c53;
			}
			
			return;
		}
		
		if (((bigColor1_2 + color_uc38).z < d3)) {
			return;
		}
		
		color_uc38 = (bigColor1_2 + color_uc38);
	}
	
}

whileLoop.frag
#version 110
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
varying vec4 BaseColor;

void main()
{
	vec4 color_uc1;
	color_uc1 = BaseColor;
	while (color_uc1.x < d) {
		color_uc1 = (bigColor + color_uc1);
	}
	
	gl_FragColor = color_uc1;
	
}

