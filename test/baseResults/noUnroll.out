doWhileLoop.frag
#version 110
// LunarGOO output
uniform vec4 bigColor;
uniform float d;
varying vec4 BaseColor;
vec4 color_c2;

void main()
{
    vec4 color_uc1;
    color_uc1 = BaseColor;
    while (true) {
        color_c2 = bigColor + color_uc1;
        bool temp23 = color_c2.x >= d;
        if (temp23) {
            break;
        }
        
        color_uc1 = color_c2;
    }
    
    gl_FragColor = color_c2;
    
}


forLoop.frag
#version 130
// LunarGOO output
uniform int Count;
uniform vec4 bigColor;
uniform uvec4 v4;
in vec4 BaseColor;
vec4 gla_globalAgg;
const int const27i_0 = 0;
const float const29 = 0.0;
vec4 temp30;
const int const34i_2 = 2;

void main()
{
    vec4 temp21;
    int i_uc1;
    float sum_uc2;
    int temp24;
    int temp25;
    vec4 tv_c3;
    temp21 = BaseColor;
    i_uc1 = const27i_0;
    for (i_uc1 = 0; i_uc1 < Count; ++i_uc1) {
        vec4 color_c4 = bigColor + temp21;
        temp21 = color_c4;
    }
    
    gl_FragColor = temp21;
    sum_uc2 = const29;
    temp24 = const27i_0;
    for (temp24 = 0; temp24 != 4; ++temp24) {
        temp30 = vec4(sum_uc2);
        float temp31 = float(ivec4(v4)[temp24]);
        float sum_c5 = sum_uc2 + temp31;
        sum_uc2 = sum_c5;
    }
    
    temp25 = const27i_0;
    tv_c3 = gla_globalAgg;
    for (temp25 = 0; temp25 != 4; ++temp25) {
        int temp33 = ivec4(v4)[temp25] << const34i_2;
        float temp35 = float(temp33);
        vec4 tv_c6 = tv_c3;
        tv_c6[temp25] = temp35;
        tv_c3 = tv_c6;
    }
    
    vec4 temp37 = temp30 + tv_c3;
    vec4 gla_gl_FragColor_c7 = temp21 + temp37;
    gl_FragColor = gla_gl_FragColor_c7;
    
}


loops.frag
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float const67 = 0.33;
const float const69 = 0.66;
const vec4 const71 = vec4(0.66);
const vec4 const72 = vec4(0.33);
const float const80 = 42.0;
const vec4 const82 = vec4(1.0);
vec4 color_c52;
const int const90i_0 = 0;
vec4 color_c55;
const float const97 = 20.0;
const float const99 = 1.0;
const int const116i_41 = 41;
vec4 temp118;
const int const123i_1 = 1;
vec4 select_c60;
vec4 select_c62;
float temp138;
vec4 color_c64;
const float const150 = 0.0;
vec4 color_c65;
vec4 color_c67;
const float const161 = 2.0;
vec4 color_c69;
const float const172 = 5.0;
vec4 temp176;
const float const186 = 10.0;
vec4 color_c80;

void main()
{
    vec4 color_uc1;
    vec4 color_uc2;
    vec4 color_uc3;
    vec4 color_uc4;
    vec4 color_uc5;
    vec4 color_uc6;
    vec4 color_uc7;
    int i_uc8;
    vec4 color_uc9;
    vec4 color_uc10;
    int temp31;
    vec4 color_uc11;
    int temp33;
    vec4 color_uc12;
    int temp35;
    vec4 color_uc13;
    int temp37;
    vec4 color_uc14;
    int temp39;
    vec4 color_uc15;
    vec4 color_uc16;
    vec4 color_uc17;
    vec4 color_uc18;
    vec4 color_uc19;
    vec4 color_uc20;
    vec4 color_uc21;
    vec4 color_uc22;
    vec4 color_uc23;
    vec4 color_uc24;
    vec4 color_uc25;
    vec4 color_uc26;
    vec4 color_uc27;
    vec4 color_uc28;
    vec4 color_uc29;
    vec4 color_uc30;
    vec4 color_uc31;
    vec4 color_uc32;
    vec4 color_uc33;
    vec4 color_uc34;
    vec4 color_uc35;
    vec4 color_uc36;
    vec4 color_uc37;
    vec4 color_uc38;
    vec4 color_uc39;
    vec4 color_uc40;
    bool temp66 = BaseColor.x < const67;
    bool temp68 = BaseColor.x < const69;
    vec4 select_c41 = temp68 ? const71 : const72;
    vec4 select_c42 = temp66 ? const72 : select_c41;
    vec4 select_c43 = BaseColor + select_c42;
    color_uc1 = select_c43;
    while (color_uc1.x < d) {
        vec4 color_c44 = bigColor + color_uc1;
        color_uc1 = color_c44;
    }
    
    color_uc2 = color_uc1;
    while (color_uc2.z < d) {
        vec4 color_c45 = bigColor1_1 + color_uc2;
        bool temp77 = color_c45.w < d;
        vec4 color_c46 = bigColor1_1 + color_c45;
        vec4 select_c47 = temp77 ? color_c45 : color_c46;
        color_uc2 = select_c47;
    }
    
    color_uc3 = color_uc2;
    while (color_uc3.x < const80) {
        vec4 color_c48 = color_uc3 + const82;
        color_uc3 = color_c48;
    }
    
    color_uc4 = color_uc3;
    while (true) {
        bool notlhs_c49 = color_uc4.w >= d2;
        bool notrhs_c50 = color_uc4.y >= d3;
        bool temp85 = notrhs_c50 || notlhs_c49;
        if (temp85) {
            break;
        }
        
        vec4 color_c51 = bigColor1_2 + color_uc4;
        color_uc4 = color_c51;
    }
    
    color_uc5 = color_uc4;
    while (color_uc5.z < d3) {
        color_c52 = bigColor1_3 + color_uc5;
        bool temp88 = color_c52.y < d4;
        if (temp88) {
            color_uc6 = color_c52;
            break;
        }
        
        vec4 color_c53 = bigColor1_3 + color_c52;
        color_uc5 = color_c53;
    }
    
    color_uc6 = color_uc5;
    color_uc7 = color_uc6;
    i_uc8 = const90i_0;
    for (i_uc8 = 0; i_uc8 < Count; ++i_uc8) {
        vec4 color_c54 = bigColor2 + color_uc7;
        color_uc7 = color_c54;
    }
    
    color_uc9 = color_uc7;
    while (true) {
        color_c55 = bigColor3 + color_uc9;
        bool temp93 = color_c55.x >= d2;
        if (temp93) {
            break;
        }
        
        color_uc9 = color_c55;
    }
    
    color_uc10 = color_c55;
    temp31 = const90i_0;
    for (temp31 = 0; temp31 != 42; ++temp31) {
        float temp94 = color_uc10.z + d3;
        vec4 temp95 = color_uc10;
        temp95.z = temp94;
        color_uc10 = temp95;
    }
    
    color_uc11 = color_uc10;
    temp33 = const90i_0;
    for (temp33 = 0; temp33 != 100; ++temp33) {
        bool temp96 = color_uc11.z < const97;
        float temp98 = color_uc11.x + const99;
        vec4 temp100 = color_uc11;
        temp100.x = temp98;
        float temp101 = color_uc11.y + const99;
        vec4 temp102 = color_uc11;
        temp102.y = temp101;
        vec4 select_c56 = temp96 ? temp100 : temp102;
        color_uc11 = select_c56;
    }
    
    color_uc12 = color_uc11;
    temp35 = const90i_0;
    for (temp35 = 0; temp35 != 120; ++temp35) {
        bool temp104 = color_uc12.z < const97;
        float temp105 = color_uc12.x + const99;
        vec4 temp106 = color_uc12;
        temp106.x = temp105;
        float temp107 = color_uc12.y + const99;
        vec4 temp108 = color_uc12;
        temp108.y = temp107;
        vec4 select_c57 = temp104 ? temp106 : temp108;
        color_uc12 = select_c57;
    }
    
    color_uc13 = color_uc12;
    temp37 = const90i_0;
    for (temp37 = 0; temp37 != 42; ++temp37) {
        float temp110 = color_uc13.z + d3;
        vec4 temp111 = color_uc13;
        temp111.z = temp110;
        bool temp112 = color_uc13.x < d4;
        float temp113 = color_uc13.w + const99;
        vec4 temp114 = color_uc13;
        temp114.zw = vec2(temp110, temp113);
        vec4 select_c58 = temp112 ? temp111 : temp114;
        color_uc13 = select_c58;
    }
    
    color_uc14 = color_uc13;
    temp39 = const90i_0;
    while (temp39 <= const116i_41) {
        float temp117 = color_uc14.z + d3;
        temp118 = color_uc14;
        temp118.z = temp117;
        bool temp119 = color_uc14.x < d4;
        if (temp119) {
            color_uc15 = temp118;
            break;
        }
        
        float temp120 = color_uc14.w + const99;
        vec4 temp121 = temp118;
        temp121.w = temp120;
        int temp122 = temp39 + const123i_1;
        color_uc14 = temp121;
        temp39 = temp122;
    }
    
    color_uc15 = color_uc14;
    color_uc16 = color_uc15;
    while (true) {
        vec4 color_c59 = bigColor4 + color_uc16;
        bool temp125 = color_c59.x < d4;
        if (temp125) {
            color_uc17 = color_c59;
        }
        else {
            bool temp126 = color_c59.y < d4;
            float temp127 = color_c59.y + d4;
            vec4 temp128 = color_c59;
            temp128.y = temp127;
            float temp129 = color_c59.x + d4;
            vec4 temp130 = color_c59;
            temp130.x = temp129;
            select_c60 = temp126 ? temp128 : temp130;
            bool temp132 = select_c60.z >= d4;
            if (temp132) {
                break;
            }
            
            color_uc17 = select_c60;
        }
        
        color_uc16 = color_uc17;
    }
    
    color_uc18 = select_c60;
    while (true) {
        vec4 color_c61 = bigColor5 + color_uc18;
        bool temp134 = color_c61.y < d5;
        float temp135 = color_c61.y + d5;
        vec4 temp136 = color_c61;
        temp136.y = temp135;
        select_c62 = temp134 ? temp136 : color_c61;
        bool temp139 = select_c62.x >= d5;
        if (temp139) {
            break;
        }
        
        color_uc18 = select_c62;
    }
    
    bool temp140 = select_c62.x < d6;
    if (temp140) {
        color_uc19 = select_c62;
        while (color_uc19.y < d6) {
            vec4 color_c63 = bigColor6 + color_uc19;
            color_uc19 = color_c63;
        }
        
        color_uc21 = color_uc19;
    }
    else {
        color_uc20 = select_c62;
        while (color_uc20.z < d6) {
            float temp142 = bigColor6.z + color_uc20.z;
            vec4 temp143 = color_uc20;
            temp143.z = temp142;
            color_uc20 = temp143;
        }
        
        color_uc21 = color_uc20;
    }
    
    bool temp144 = color_uc21.x < d6;
    if (temp144) {
        bool temp145 = d7 < const99;
        color_uc22 = color_uc21;
        while (color_uc22.y < d6) {
            color_c64 = bigColor6 + color_uc22;
            if (temp145) {
                color_uc23 = color_c64;
                break;
            }
            
            color_uc22 = color_c64;
        }
        
        color_uc23 = color_uc22;
        color_uc25 = color_uc23;
    }
    else {
        color_uc24 = color_uc21;
        while (color_uc24.z < d6) {
            float temp147 = bigColor6.z + color_uc24.z;
            vec4 temp148 = color_uc24;
            temp148.z = temp147;
            color_uc24 = temp148;
        }
        
        color_uc25 = color_uc24;
    }
    
    bool temp149 = d7 < const150;
    bool temp151 = d7 < const99;
    color_uc26 = color_uc25;
    while (true) {
        if (temp149) {
            color_uc27 = color_uc26;
            break;
        }
        
        color_c65 = bigColor7 + color_uc26;
        if (temp151) {
            float temp153 = color_c65.z + const99;
            vec4 temp154 = color_c65;
            temp154.z = temp153;
            color_uc27 = temp154;
            break;
        }
        
        vec4 color_c66 = BaseColor + color_c65;
        color_uc26 = color_c66;
    }
    
    bool temp156 = d8 < const150;
    bool temp157 = d8 < const99;
    color_uc28 = color_uc27;
    while (true) {
        if (temp156) {
            color_uc29 = color_uc28;
            break;
        }
        
        color_c67 = bigColor7 + color_uc28;
        if (temp157) {
            float temp159 = color_c67.z + const99;
            bool temp160 = d8 < const161;
            float temp162 = color_c67.y + const99;
            vec4 temp163 = color_c67;
            temp163.yz = vec2(temp162, temp159);
            float temp164 = color_c67.x + const99;
            vec4 temp165 = color_c67;
            temp165.xz = vec2(temp164, temp159);
            vec4 select_c68 = temp160 ? temp163 : temp165;
            color_uc29 = select_c68;
            break;
        }
        
        color_c69 = BaseColor + color_c67;
        bool temp168 = color_c69.z >= d8;
        if (temp168) {
            color_uc29 = color_c69;
            break;
        }
        
        color_uc28 = color_c69;
    }
    
    bool temp169 = d9 > d8;
    color_uc30 = color_uc29;
    while (color_uc30.w < d9) {
        color_uc32 = color_uc30;
        if (temp169) {
            bool temp170 = color_uc30.x > d7;
            color_uc31 = color_uc30;
            if (! temp170) {
                bool temp171 = color_uc30.z == const172;
                if (! temp171) {
                    break;
                }
                
                float temp173 = color_uc30.w + const99;
                vec4 temp174 = color_uc30;
                temp174.w = temp173;
                color_uc31 = temp174;
            }
            
            color_uc32 = color_uc31;
        }
        
        color_uc30 = color_uc32;
    }
    
    color_uc33 = color_uc30;
    while (color_uc33.z < d10) {
        float temp175 = color_uc33.y + const99;
        temp176 = color_uc33;
        temp176.y = temp175;
        bool temp177 = temp175 < d11;
        if (! temp177) {
            vec4 color_c70 = const82 + temp176;
            color_uc34 = color_c70;
            break;
        }
        
        float temp179 = color_uc33.z + const99;
        bool temp180 = color_uc33.w < d12;
        float temp181 = color_uc33.w + const99;
        vec4 temp182 = temp176;
        temp182.zw = vec2(temp179, temp181);
        float temp183 = color_uc33.x + const99;
        vec4 temp184 = temp176;
        temp184.xz = vec2(temp183, temp179);
        vec4 select_c71 = temp180 ? temp182 : temp184;
        color_uc33 = select_c71;
    }
    
    color_uc34 = color_uc33;
    color_uc35 = color_uc34;
    while (color_uc35.x < const186) {
        vec4 color_c72 = bigColor8 + color_uc35;
        bool temp188 = color_c72.z < d8;
        bool temp189 = color_c72.w < d6;
        float temp190 = bigColor8.x + color_c72.y;
        vec4 temp191 = color_c72;
        temp191.y = temp190;
        vec4 select_c73 = temp189 ? color_c72 : temp191;
        vec4 select_c74 = temp188 ? select_c73 : temp191;
        color_uc35 = select_c74;
    }
    
    vec4 color_c75 = color_uc35 + const82;
    gl_FragColor = color_c75;
    color_uc36 = color_c75;
    while (color_uc36.x < d14) {
        bool temp195 = color_uc36.y < d15;
        if (temp195) {
            return;
        }
        
        vec4 color_c76 = color_uc36 + const82;
        color_uc36 = color_c76;
    }
    
    vec4 color_c77 = color_uc36 + const82;
    color_uc37 = color_c77;
    while (color_uc37.w < d16) {
        float temp198 = color_uc37.w + const99;
        vec4 temp199 = color_uc37;
        temp199.w = temp198;
        color_uc37 = temp199;
    }
    
    color_uc38 = color_uc37;
    while (true) {
        bool notlhs_c78 = color_uc38.w >= d2;
        bool notrhs_c79 = color_uc38.y >= d3;
        bool temp202 = notrhs_c79 || notlhs_c78;
        if (temp202) {
            color_uc39 = color_uc38;
            while (color_uc39.y >= d18) {
                color_c80 = color_uc39 + const82;
                bool temp204 = color_c80.x >= d17;
                if (temp204) {
                    color_uc40 = color_c80;
                    while (color_uc40.y < d16) {
                        bool temp205 = color_uc40.w < d16;
                        if (temp205) {
                            discard;
                        }
                        
                        vec4 color_c81 = color_uc40 + const82;
                        color_uc40 = color_c81;
                    }
                    
                    vec4 color_c82 = color_uc40 + const82;
                    gl_FragColor = color_c82;
                    return;
                }
                
                color_uc39 = color_c80;
            }
            
            return;
        }
        
        vec4 color_c83 = bigColor1_2 + color_uc38;
        bool temp209 = color_c83.z < d3;
        if (temp209) {
            return;
        }
        
        color_uc38 = color_c83;
    }
    
}


whileLoop.frag
#version 110
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
varying vec4 BaseColor;

void main()
{
    vec4 color_uc1;
    color_uc1 = BaseColor;
    while (color_uc1.x < d) {
        vec4 color_c2 = bigColor + color_uc1;
        color_uc1 = color_c2;
    }
    
    gl_FragColor = color_uc1;
    
}


