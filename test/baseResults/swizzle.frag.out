
Top IR:
; ModuleID = 'Glslang'

@u = external addrspace(2) constant <4 x float>
@t = global <2 x float> zeroinitializer
@p = external addrspace(2) constant i1
@gl_FragColor = global <4 x float> zeroinitializer
@blend = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %rep = alloca <4 x float>
  %c = alloca <2 x float>
  %w_undef = alloca <4 x float>
  %w_flow = alloca <4 x float>
  %w2 = alloca <4 x float>
  %w_reorder = alloca <4 x float>
  %w_dep = alloca <4 x float>
  %w = alloca <4 x float>
  %blendscale = alloca float
  store float 0x3FFC9FBE80000000, float* %blendscale
  %w1 = load <4 x float> addrspace(2)* @u, !gla.uniform !1
  store <4 x float> %w1, <4 x float>* %w
  %w_dep2 = load <4 x float> addrspace(2)* @u, !gla.uniform !1
  store <4 x float> %w_dep2, <4 x float>* %w_dep
  %w_reorder3 = load <4 x float> addrspace(2)* @u, !gla.uniform !1
  store <4 x float> %w_reorder3, <4 x float>* %w_reorder
  %w24 = load <4 x float> addrspace(2)* @u, !gla.uniform !1
  store <4 x float> %w24, <4 x float>* %w2
  %w_flow5 = load <4 x float> addrspace(2)* @u, !gla.uniform !1
  store <4 x float> %w_flow5, <4 x float>* %w_flow
  %0 = load float* %blendscale
  %1 = load <4 x float>* %w_reorder
  %w_reorder6 = insertelement <4 x float> %1, float %0, i32 2
  store <4 x float> %w_reorder6, <4 x float>* %w_reorder
  %2 = load <2 x float>* @t
  %3 = load <4 x float>* %w
  %4 = extractelement <2 x float> %2, i32 0
  %5 = insertelement <4 x float> %3, float %4, i32 3
  %6 = extractelement <2 x float> %2, i32 1
  %w7 = insertelement <4 x float> %5, float %6, i32 1
  store <4 x float> %w7, <4 x float>* %w
  %7 = load float* %blendscale
  %8 = load <4 x float>* %w_reorder
  %w_reorder8 = insertelement <4 x float> %8, float %7, i32 0
  store <4 x float> %w_reorder8, <4 x float>* %w_reorder
  %9 = load <4 x float> addrspace(2)* @u, !gla.uniform !1
  %10 = extractelement <4 x float> %9, i32 2
  %11 = insertelement <4 x float> undef, float %10, i32 0
  %12 = extractelement <4 x float> %9, i32 3
  %13 = insertelement <4 x float> %11, float %12, i32 1
  %14 = extractelement <4 x float> %9, i32 0
  %15 = insertelement <4 x float> %13, float %14, i32 2
  %16 = extractelement <4 x float> %9, i32 1
  %w29 = insertelement <4 x float> %15, float %16, i32 3
  store <4 x float> %w29, <4 x float>* %w2
  %17 = load float* %blendscale
  %18 = load <4 x float>* %w_reorder
  %w_reorder10 = insertelement <4 x float> %18, float %17, i32 1
  store <4 x float> %w_reorder10, <4 x float>* %w_reorder
  %19 = load <4 x float>* %w2
  %20 = extractelement <4 x float> %19, i32 0
  %21 = insertelement <2 x float> undef, float %20, i32 0
  %22 = extractelement <4 x float> %19, i32 2
  %23 = insertelement <2 x float> %21, float %22, i32 1
  %24 = load <4 x float>* %w_dep
  %25 = extractelement <2 x float> %23, i32 0
  %26 = insertelement <4 x float> %24, float %25, i32 0
  %27 = extractelement <2 x float> %23, i32 1
  %w_dep11 = insertelement <4 x float> %26, float %27, i32 1
  store <4 x float> %w_dep11, <4 x float>* %w_dep
  %28 = load <2 x float>* @t
  %29 = load <4 x float>* %w_dep
  %30 = extractelement <2 x float> %28, i32 0
  %31 = insertelement <4 x float> %29, float %30, i32 2
  %32 = extractelement <2 x float> %28, i32 1
  %w_dep12 = insertelement <4 x float> %31, float %32, i32 3
  store <4 x float> %w_dep12, <4 x float>* %w_dep
  %33 = load <4 x float> addrspace(2)* @u, !gla.uniform !1
  %34 = extractelement <4 x float> %33, i32 2
  %35 = insertelement <2 x float> undef, float %34, i32 0
  %36 = extractelement <4 x float> %33, i32 3
  %37 = insertelement <2 x float> %35, float %36, i32 1
  %38 = load <4 x float>* %w_undef
  %39 = extractelement <2 x float> %37, i32 0
  %40 = insertelement <4 x float> %38, float %39, i32 0
  %41 = extractelement <2 x float> %37, i32 1
  %w_undef13 = insertelement <4 x float> %40, float %41, i32 1
  store <4 x float> %w_undef13, <4 x float>* %w_undef
  %42 = load i1 addrspace(2)* @p, !gla.uniform !3
  br i1 %42, label %then, label %else

then:                                             ; preds = %entry
  %43 = load <2 x float>* @t
  %44 = extractelement <2 x float> %43, i32 0
  %45 = load <4 x float>* %w_flow
  %w_flow14 = insertelement <4 x float> %45, float %44, i32 0
  store <4 x float> %w_flow14, <4 x float>* %w_flow
  br label %ifmerge

else:                                             ; preds = %entry
  %46 = load <2 x float>* @t
  %47 = extractelement <2 x float> %46, i32 1
  %48 = load <4 x float>* %w_flow
  %w_flow15 = insertelement <4 x float> %48, float %47, i32 0
  store <4 x float> %w_flow15, <4 x float>* %w_flow
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %49 = load <4 x float>* %w_reorder
  %50 = load <4 x float>* %w_undef
  %51 = load <4 x float>* %w
  %52 = load <4 x float>* %w2
  %53 = fmul <4 x float> %51, %52
  %54 = load <4 x float>* %w_dep
  %55 = fmul <4 x float> %53, %54
  %56 = load <4 x float>* %w_flow
  %57 = fmul <4 x float> %55, %56
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %49, <4 x float> %50, <4 x float> %57)
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %c16 = load <2 x float>* @t
  store <2 x float> %c16, <2 x float>* %c
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %rep
  %58 = load <2 x float>* %c
  %59 = extractelement <2 x float> %58, i32 0
  %60 = fcmp olt float %59, 0.000000e+00
  br i1 %60, label %then17, label %ifmerge19

then17:                                           ; preds = %ifmerge
  %61 = load <2 x float>* %c
  %62 = extractelement <2 x float> %61, i32 0
  %63 = fmul float %62, -1.000000e+00
  %64 = load <2 x float>* %c
  %c18 = insertelement <2 x float> %64, float %63, i32 0
  store <2 x float> %c18, <2 x float>* %c
  br label %ifmerge19

ifmerge19:                                        ; preds = %ifmerge, %then17
  %65 = load <2 x float>* %c
  %66 = extractelement <2 x float> %65, i32 0
  %67 = fcmp ole float %66, 1.000000e+00
  br i1 %67, label %then20, label %ifmerge22

then20:                                           ; preds = %ifmerge19
  %68 = load <4 x float>* %rep
  %rep21 = insertelement <4 x float> %68, float 0x400B333340000000, i32 0
  store <4 x float> %rep21, <4 x float>* %rep
  br label %ifmerge22

ifmerge22:                                        ; preds = %ifmerge19, %then20
  %69 = load <4 x float>* %rep
  %70 = load <4 x float>* @gl_FragColor
  %gl_FragColor23 = fadd <4 x float> %70, %69
  store <4 x float> %gl_FragColor23, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge22
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4}
!gla.inputs = !{!5}
!gla.outputs = !{!7}
!gla.noStaticUse = !{!4}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"u", i32 12, <4 x float>* @u_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"p", i32 12, i1* @p_typeProxy, metadata !2}
!4 = metadata !{metadata !"blend", i32 12, float* @blend_typeProxy, metadata !2}
!5 = metadata !{metadata !"t", i32 1, <2 x float>* @t_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!7 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@u = external addrspace(2) constant <4 x float>
@t = global <2 x float> zeroinitializer
@p = external addrspace(2) constant i1
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %w1 = load <4 x float> addrspace(2)* @u, align 16, !gla.uniform !1
  %0 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %w1, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>)
  %1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %w1, <4 x i32> <i32 2, i32 3, i32 0, i32 1>)
  %2 = load <2 x float>* @t, align 8
  %3 = extractelement <2 x float> %2, i32 0
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v2f32.f32.v2f32(<4 x float> %w1, i32 10, float undef, i32 undef, <2 x float> %2, i32 1, float undef, i32 undef, <2 x float> %2, i32 0)
  %5 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %w1, i32 7, float 0x3FFC9FBE80000000, i32 0, float 0x3FFC9FBE80000000, i32 0, float 0x3FFC9FBE80000000, i32 0, float undef, i32 undef)
  %6 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v4f32.v4f32.v2f32.v2f32(<4 x float> undef, i32 15, <4 x float> %w1, i32 2, <4 x float> %w1, i32 0, <2 x float> %2, i32 0, <2 x float> %2, i32 1)
  %7 = load i1 addrspace(2)* @p, align 1, !gla.uniform !3
  %8 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.f32.f32.f32(<4 x float> %w1, i32 1, <2 x float> %2, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %9 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.f32.f32.f32(<4 x float> %w1, i32 1, <2 x float> %2, i32 1, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select24 = select i1 %7, <4 x float> %8, <4 x float> %9
  %10 = fmul <4 x float> %1, %4
  %11 = fmul <4 x float> %10, %6
  %12 = fmul <4 x float> %select24, %11
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %5, <4 x float> %0, <4 x float> %12)
  %13 = fcmp olt float %3, 0.000000e+00
  %14 = fmul float %3, -1.000000e+00
  %15 = select i1 %13, float %14, float %3
  %16 = fcmp ugt float %15, 1.000000e+00
  %rep.0 = select i1 %16, <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float> <float 0x400B333340000000, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>
  %gl_FragColor23 = fadd <4 x float> %gl_FragColor, %rep.0
  store <4 x float> %gl_FragColor23, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.f32.f32.f32(<4 x float>, i32, <2 x float>, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v4f32.v4f32.v2f32.v2f32(<4 x float>, i32, <4 x float>, i32, <4 x float>, i32, <2 x float>, i32, <2 x float>, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v2f32.f32.v2f32(<4 x float>, i32, float, i32, <2 x float>, i32, float, i32, <2 x float>, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4}
!gla.inputs = !{!5}
!gla.outputs = !{!7}
!gla.noStaticUse = !{!4}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"u", i32 12, <4 x float>* @u_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"p", i32 12, i1* @p_typeProxy, metadata !2}
!4 = metadata !{metadata !"blend", i32 12, float* @blend_typeProxy, metadata !2}
!5 = metadata !{metadata !"t", i32 1, <2 x float>* @t_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!7 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 110
// LunarGOO output
uniform vec4 u;
uniform bool p;
uniform float blend;
varying vec2 t;
const float L_5 = 1.789;
const float L_f = 0.0;
const float L_11 = -1.0;
const float L_14 = 1.0;
const vec4 L_16 = vec4(0.0, 0.0, 0.0, 1.0);
const vec4 L_17 = vec4(3.4, 0.0, 0.0, 1.0);

void main()
{
	vec4 L_1;
	L_1.xy = u.zw;
	vec4 L_2 = u.zwxy;
	vec4 L_3 = u;
	L_3.yw = t.yx;
	vec4 L_4 = u;
	L_4.xyz = vec3(L_5, L_5, L_5);
	vec4 L_6 = vec4(u.z, u.x, t.x, t.y);
	vec4 L_7 = u;
	L_7.x = t.x;
	vec4 L_8 = u;
	L_8.x = t.y;
	vec4 select_c1 = p ? L_7 : L_8;
	vec4 L_a = L_2 * L_3;
	vec4 L_b = L_6 * L_a;
	vec4 L_c = L_b * select_c1;
	vec4 Ll_FragColor_c2 = mix(L_4, L_1, L_c);
	bool L_e = t.x < L_f;
	float L_10 = t.x * L_11;
	float L_12 = L_e ? L_10 : t.x;
	bool L_13 = L_12 > L_14;
	vec4 rep_uc3 = L_13 ? L_16 : L_17;
	vec4 Ll_FragColor_c4 = Ll_FragColor_c2 + rep_uc3;
	gl_FragColor = Ll_FragColor_c4;
	
}

#version 110
// LunarGOO output
uniform vec4 u;
uniform bool p;
uniform float blend;
varying vec2 t;
const float L_5 = 1.789;
const float L_f = 0.0;
const float L_11 = -1.0;
const float L_14 = 1.0;
const vec4 L_16 = vec4(0.0, 0.0, 0.0, 1.0);
const vec4 L_17 = vec4(3.4, 0.0, 0.0, 1.0);

void main()
{
	vec4 L_1 = u.zwxy;
	vec4 L_2;
	L_2.xy = u.zw;
	vec4 L_3 = u;
	L_3.yw = t.yx;
	vec4 L_4 = u;
	L_4.xyz = vec3(L_5, L_5, L_5);
	vec4 L_6 = vec4(u.z, u.x, t.x, t.y);
	vec4 L_7 = u;
	L_7.x = t.x;
	vec4 L_8 = u;
	L_8.x = t.y;
	vec4 select_c1 = p ? L_7 : L_8;
	vec4 L_a_c2 = L_1 * L_3;
	vec4 L_b_c3 = L_6 * L_a_c2;
	vec4 L_c4 = L_b_c3 * select_c1;
	vec4 Ll_FragColor_c5 = mix(L_4, L_2, L_c4);
	bool L_e_c6 = t.x < L_f;
	float L_uc7 = t.x * L_11;
	float select_c8 = L_e_c6 ? L_uc7 : t.x;
	bool L_uc9 = select_c8 > L_14;
	vec4 L_15 = L_uc9 ? L_16 : L_17;
	vec4 Ll_FragColor_c10 = L_15 + Ll_FragColor_c5;
	gl_FragColor = Ll_FragColor_c10;
	
}

