
Top IR:
; ModuleID = 'Glslang'

%s1 = type { i32, float }
%s2 = type { i32, float, %s1 }

@u = global <4 x float> zeroinitializer
@a = internal constant %s1 { i32 14, float 1.400000e+01 }
@b = internal constant %s1 { i32 17, float 1.700000e+01 }
@w = global <4 x float> zeroinitializer
@foo2a = external addrspace(2) constant %s2
@foo2b = external addrspace(2) constant %s2
@sampler = external addrspace(1) constant i32
@coord = global <2 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@foo1 = external addrspace(2) constant %s1

define fastcc void @main() {
entry:
  %v = alloca <4 x float>
  %b7 = alloca [3 x %s1]
  %b6 = alloca %s1
  %b5 = alloca %s1
  %b = alloca [3 x %s1]
  %a3 = alloca [3 x %s1]
  %a2 = alloca %s1
  %a1 = alloca %s1
  %a = alloca [3 x %s1]
  %0 = load <4 x float>* @u
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fptosi float %1 to i32
  %3 = load <4 x float>* @u
  %4 = extractelement <4 x float> %3, i32 1
  %5 = getelementptr %s1* %a1, i32 0, i32 0
  store i32 %2, i32* %5
  %6 = getelementptr %s1* %a1, i32 0, i32 1
  store float %4, float* %6
  %7 = load %s1* %a1
  %8 = load <4 x float>* @u
  %9 = extractelement <4 x float> %8, i32 2
  %10 = fptosi float %9 to i32
  %11 = load <4 x float>* @u
  %12 = extractelement <4 x float> %11, i32 3
  %13 = getelementptr %s1* %a2, i32 0, i32 0
  store i32 %10, i32* %13
  %14 = getelementptr %s1* %a2, i32 0, i32 1
  store float %12, float* %14
  %15 = load %s1* %a2
  %16 = load %s1* @a
  %17 = getelementptr [3 x %s1]* %a3, i32 0, i32 0
  store %s1 %7, %s1* %17
  %18 = getelementptr [3 x %s1]* %a3, i32 0, i32 1
  store %s1 %15, %s1* %18
  %19 = getelementptr [3 x %s1]* %a3, i32 0, i32 2
  store %s1 %16, %s1* %19
  %a4 = load [3 x %s1]* %a3
  store [3 x %s1] %a4, [3 x %s1]* %a
  %20 = load %s1* @b
  %21 = load <4 x float>* @w
  %22 = extractelement <4 x float> %21, i32 0
  %23 = fptosi float %22 to i32
  %24 = load <4 x float>* @w
  %25 = extractelement <4 x float> %24, i32 1
  %26 = getelementptr %s1* %b5, i32 0, i32 0
  store i32 %23, i32* %26
  %27 = getelementptr %s1* %b5, i32 0, i32 1
  store float %25, float* %27
  %28 = load %s1* %b5
  %29 = load <4 x float>* @w
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fptosi float %30 to i32
  %32 = load <4 x float>* @w
  %33 = extractelement <4 x float> %32, i32 3
  %34 = getelementptr %s1* %b6, i32 0, i32 0
  store i32 %31, i32* %34
  %35 = getelementptr %s1* %b6, i32 0, i32 1
  store float %33, float* %35
  %36 = load %s1* %b6
  %37 = getelementptr [3 x %s1]* %b7, i32 0, i32 0
  store %s1 %20, %s1* %37
  %38 = getelementptr [3 x %s1]* %b7, i32 0, i32 1
  store %s1 %28, %s1* %38
  %39 = getelementptr [3 x %s1]* %b7, i32 0, i32 2
  store %s1 %36, %s1* %39
  %b8 = load [3 x %s1]* %b7
  store [3 x %s1] %b8, [3 x %s1]* %b
  %40 = load %s2 addrspace(2)* @foo2a, !gla.uniform !7
  %41 = load %s2 addrspace(2)* @foo2b, !gla.uniform !13
  %element1 = extractvalue %s2 %40, 0
  %element2 = extractvalue %s2 %41, 0
  %42 = icmp eq i32 %element1, %element2
  %element19 = extractvalue %s2 %40, 1
  %element210 = extractvalue %s2 %41, 1
  %43 = fcmp oeq float %element19, %element210
  %44 = and i1 %42, %43
  %element111 = extractvalue %s2 %40, 2
  %element212 = extractvalue %s2 %41, 2
  %element113 = extractvalue %s1 %element111, 0
  %element214 = extractvalue %s1 %element212, 0
  %45 = icmp eq i32 %element113, %element214
  %element115 = extractvalue %s1 %element111, 1
  %element216 = extractvalue %s1 %element212, 1
  %46 = fcmp oeq float %element115, %element216
  %47 = and i1 %45, %46
  %48 = and i1 %44, %47
  br i1 %48, label %then, label %else

then:                                             ; preds = %entry
  %49 = load i32 addrspace(1)* @sampler, !gla.uniform !14
  %50 = load <2 x float>* @coord
  %v18 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %49, i32 0, <2 x float> %50)
  store <4 x float> %v18, <4 x float>* %v
  br label %ifmerge

else:                                             ; preds = %entry
  %51 = load i32 addrspace(1)* @sampler, !gla.uniform !14
  %52 = load <2 x float>* @coord
  %53 = fmul <2 x float> <float 2.000000e+00, float 2.000000e+00>, %52
  %v20 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %51, i32 0, <2 x float> %53)
  store <4 x float> %v20, <4 x float>* %v
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %54 = load <4 x float>* @u
  %55 = load <4 x float>* %v
  %56 = fcmp oeq <4 x float> %54, %55
  %cc = call i1 @llvm.gla.all.v4i1(<4 x i1> %56)
  br i1 %cc, label %then21, label %ifmerge23

then21:                                           ; preds = %ifmerge
  %57 = load <4 x float>* %v
  %v22 = fmul <4 x float> %57, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  store <4 x float> %v22, <4 x float>* %v
  br label %ifmerge23

ifmerge23:                                        ; preds = %ifmerge, %then21
  %58 = load <4 x float>* @u
  %59 = load <4 x float>* %v
  %60 = fcmp one <4 x float> %58, %59
  %cc24 = call i1 @llvm.gla.any.v4i1(<4 x i1> %60)
  br i1 %cc24, label %then25, label %ifmerge27

then25:                                           ; preds = %ifmerge23
  %61 = load <4 x float>* %v
  %v26 = fmul <4 x float> %61, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  store <4 x float> %v26, <4 x float>* %v
  br label %ifmerge27

ifmerge27:                                        ; preds = %ifmerge23, %then25
  %62 = load <2 x float>* @coord
  %63 = load <4 x float>* %v
  %64 = extractelement <4 x float> %63, i32 1
  %65 = insertelement <2 x float> undef, float %64, i32 0
  %66 = extractelement <4 x float> %63, i32 3
  %67 = insertelement <2 x float> %65, float %66, i32 1
  %68 = fcmp oeq <2 x float> %62, %67
  %cc28 = call i1 @llvm.gla.all.v2i1(<2 x i1> %68)
  br i1 %cc28, label %then29, label %ifmerge31

then29:                                           ; preds = %ifmerge27
  %69 = load <4 x float>* %v
  %v30 = fmul <4 x float> %69, <float 5.000000e+00, float 5.000000e+00, float 5.000000e+00, float 5.000000e+00>
  store <4 x float> %v30, <4 x float>* %v
  br label %ifmerge31

ifmerge31:                                        ; preds = %ifmerge27, %then29
  %70 = load [3 x %s1]* %a
  %71 = load [3 x %s1]* %b
  %element132 = extractvalue [3 x %s1] %70, 0
  %element233 = extractvalue [3 x %s1] %71, 0
  %element134 = extractvalue %s1 %element132, 0
  %element235 = extractvalue %s1 %element233, 0
  %72 = icmp eq i32 %element134, %element235
  %element136 = extractvalue %s1 %element132, 1
  %element237 = extractvalue %s1 %element233, 1
  %73 = fcmp oeq float %element136, %element237
  %74 = and i1 %72, %73
  %element138 = extractvalue [3 x %s1] %70, 1
  %element239 = extractvalue [3 x %s1] %71, 1
  %element140 = extractvalue %s1 %element138, 0
  %element241 = extractvalue %s1 %element239, 0
  %75 = icmp eq i32 %element140, %element241
  %element142 = extractvalue %s1 %element138, 1
  %element243 = extractvalue %s1 %element239, 1
  %76 = fcmp oeq float %element142, %element243
  %77 = and i1 %75, %76
  %78 = and i1 %74, %77
  %element144 = extractvalue [3 x %s1] %70, 2
  %element245 = extractvalue [3 x %s1] %71, 2
  %element146 = extractvalue %s1 %element144, 0
  %element247 = extractvalue %s1 %element245, 0
  %79 = icmp eq i32 %element146, %element247
  %element148 = extractvalue %s1 %element144, 1
  %element249 = extractvalue %s1 %element245, 1
  %80 = fcmp oeq float %element148, %element249
  %81 = and i1 %79, %80
  %82 = and i1 %78, %81
  br i1 %82, label %then50, label %ifmerge52

then50:                                           ; preds = %ifmerge31
  %83 = load <4 x float>* %v
  %v51 = fmul <4 x float> %83, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  store <4 x float> %v51, <4 x float>* %v
  br label %ifmerge52

ifmerge52:                                        ; preds = %ifmerge31, %then50
  %84 = load [3 x %s1]* %a
  %85 = load [3 x %s1]* %b
  %element153 = extractvalue [3 x %s1] %84, 0
  %element254 = extractvalue [3 x %s1] %85, 0
  %element155 = extractvalue %s1 %element153, 0
  %element256 = extractvalue %s1 %element254, 0
  %86 = icmp ne i32 %element155, %element256
  %element157 = extractvalue %s1 %element153, 1
  %element258 = extractvalue %s1 %element254, 1
  %87 = fcmp one float %element157, %element258
  %88 = or i1 %86, %87
  %element159 = extractvalue [3 x %s1] %84, 1
  %element260 = extractvalue [3 x %s1] %85, 1
  %element161 = extractvalue %s1 %element159, 0
  %element262 = extractvalue %s1 %element260, 0
  %89 = icmp ne i32 %element161, %element262
  %element163 = extractvalue %s1 %element159, 1
  %element264 = extractvalue %s1 %element260, 1
  %90 = fcmp one float %element163, %element264
  %91 = or i1 %89, %90
  %92 = or i1 %88, %91
  %element165 = extractvalue [3 x %s1] %84, 2
  %element266 = extractvalue [3 x %s1] %85, 2
  %element167 = extractvalue %s1 %element165, 0
  %element268 = extractvalue %s1 %element266, 0
  %93 = icmp ne i32 %element167, %element268
  %element169 = extractvalue %s1 %element165, 1
  %element270 = extractvalue %s1 %element266, 1
  %94 = fcmp one float %element169, %element270
  %95 = or i1 %93, %94
  %96 = or i1 %92, %95
  br i1 %96, label %then71, label %ifmerge73

then71:                                           ; preds = %ifmerge52
  %97 = load <4 x float>* %v
  %v72 = fmul <4 x float> %97, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  store <4 x float> %v72, <4 x float>* %v
  br label %ifmerge73

ifmerge73:                                        ; preds = %ifmerge52, %then71
  %gl_FragColor = load <4 x float>* %v
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge73
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v2i1(<2 x i1>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3, !5}
!gla.uniforms = !{!7, !13, !14, !17}
!gla.outputs = !{!18}
!gla.noStaticUse = !{!17}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"u", i32 1, <4 x float>* @u_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"w", i32 1, <4 x float>* @w_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!7 = metadata !{metadata !"foo2a", i32 12, %s2* @foo2a_typeProxy, metadata !8, metadata !9}
!8 = metadata !{i32 4, i32 0, i32 1024, null}
!9 = metadata !{metadata !"s2", metadata !8, metadata !"i", metadata !10, metadata !"f", metadata !10, metadata !"s1_1", metadata !12}
!10 = metadata !{metadata !"", metadata !11}
!11 = metadata !{i32 0, i32 0, i32 1024, null}
!12 = metadata !{metadata !"s1", metadata !8, metadata !"i", metadata !10, metadata !"f", metadata !10}
!13 = metadata !{metadata !"foo2b", i32 12, %s2* @foo2b_typeProxy, metadata !8, metadata !9}
!14 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !15}
!15 = metadata !{i32 5, i32 0, i32 1024, metadata !16}
!16 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!17 = metadata !{metadata !"foo1", i32 12, %s1* @foo1_typeProxy, metadata !8, metadata !12}
!18 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !19}
!19 = metadata !{i32 0, i32 0, i32 1027, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

%s2 = type { i32, float, %s1 }
%s1 = type { i32, float }

@u = global <4 x float> zeroinitializer
@w = global <4 x float> zeroinitializer
@foo2a = external addrspace(2) constant %s2
@foo2b = external addrspace(2) constant %s2
@sampler = external addrspace(1) constant i32
@coord = global <2 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load <4 x float>* @u, align 16
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fptosi float %1 to i32
  %3 = extractelement <4 x float> %0, i32 1
  %4 = extractelement <4 x float> %0, i32 2
  %5 = fptosi float %4 to i32
  %6 = extractelement <4 x float> %0, i32 3
  %7 = load <4 x float>* @w, align 16
  %8 = extractelement <4 x float> %7, i32 0
  %9 = fptosi float %8 to i32
  %10 = extractelement <4 x float> %7, i32 1
  %11 = extractelement <4 x float> %7, i32 2
  %12 = fptosi float %11 to i32
  %13 = extractelement <4 x float> %7, i32 3
  %14 = load %s2 addrspace(2)* @foo2a, align 4, !gla.uniform !7
  %15 = load %s2 addrspace(2)* @foo2b, align 4, !gla.uniform !13
  %element1 = extractvalue %s2 %14, 0
  %element2 = extractvalue %s2 %15, 0
  %16 = icmp eq i32 %element1, %element2
  %element19 = extractvalue %s2 %14, 1
  %element210 = extractvalue %s2 %15, 1
  %17 = fcmp oeq float %element19, %element210
  %18 = and i1 %16, %17
  %element111 = extractvalue %s2 %14, 2
  %element212 = extractvalue %s2 %15, 2
  %element113 = extractvalue %s1 %element111, 0
  %element214 = extractvalue %s1 %element212, 0
  %19 = icmp eq i32 %element113, %element214
  %element115 = extractvalue %s1 %element111, 1
  %element216 = extractvalue %s1 %element212, 1
  %20 = fcmp oeq float %element115, %element216
  %21 = and i1 %19, %20
  %22 = and i1 %18, %21
  %23 = load i32 addrspace(1)* @sampler, align 4, !gla.uniform !14
  %24 = load <2 x float>* @coord, align 8
  br i1 %22, label %then, label %else

then:                                             ; preds = %entry
  %v18 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %23, i32 0, <2 x float> %24)
  br label %ifmerge

else:                                             ; preds = %entry
  %25 = fmul <2 x float> %24, <float 2.000000e+00, float 2.000000e+00>
  %v20 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %23, i32 0, <2 x float> %25)
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %v.0 = phi <4 x float> [ %v18, %then ], [ %v20, %else ]
  %26 = fcmp oeq <4 x float> %0, %v.0
  %cc = call i1 @llvm.gla.all.v4i1(<4 x i1> %26)
  %v22 = fmul <4 x float> %v.0, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %select = select i1 %cc, <4 x float> %v22, <4 x float> %v.0
  %27 = fcmp one <4 x float> %0, %select
  %cc24 = call i1 @llvm.gla.any.v4i1(<4 x i1> %27)
  %v26 = fmul <4 x float> %select, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %select134 = select i1 %cc24, <4 x float> %v26, <4 x float> %select
  %28 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float> %select134, <2 x i32> <i32 1, i32 3>)
  %29 = fcmp oeq <2 x float> %24, %28
  %cc28 = call i1 @llvm.gla.all.v2i1(<2 x i1> %29)
  %v30 = fmul <4 x float> %select134, <float 5.000000e+00, float 5.000000e+00, float 5.000000e+00, float 5.000000e+00>
  %select132 = select i1 %cc28, <4 x float> %v30, <4 x float> %select134
  %30 = icmp eq i32 %2, 17
  %31 = fcmp oeq float %3, 1.700000e+01
  %32 = and i1 %30, %31
  %33 = icmp eq i32 %5, %9
  %34 = fcmp oeq float %6, %10
  %35 = and i1 %33, %34
  %36 = and i1 %32, %35
  %37 = icmp eq i32 %12, 14
  %38 = fcmp oeq float %13, 1.400000e+01
  %39 = and i1 %37, %38
  %40 = and i1 %36, %39
  %v51 = fmul <4 x float> %select132, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %select135 = select i1 %40, <4 x float> %v51, <4 x float> %select132
  %41 = icmp ne i32 %2, 17
  %42 = fcmp one float %3, 1.700000e+01
  %43 = or i1 %41, %42
  %44 = icmp ne i32 %5, %9
  %45 = fcmp one float %6, %10
  %46 = or i1 %44, %45
  %47 = or i1 %43, %46
  %48 = icmp ne i32 %12, 14
  %49 = fcmp one float %13, 1.400000e+01
  %50 = or i1 %48, %49
  %51 = or i1 %47, %50
  %v72 = fmul <4 x float> %select135, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %select133 = select i1 %51, <4 x float> %v72, <4 x float> %select135
  store <4 x float> %select133, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v2i1(<2 x i1>) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float>, <2 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3, !5}
!gla.uniforms = !{!7, !13, !14, !17}
!gla.outputs = !{!18}
!gla.noStaticUse = !{!17}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"u", i32 1, <4 x float>* @u_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"w", i32 1, <4 x float>* @w_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!7 = metadata !{metadata !"foo2a", i32 12, %s2* @foo2a_typeProxy, metadata !8, metadata !9}
!8 = metadata !{i32 4, i32 0, i32 1024, null}
!9 = metadata !{metadata !"s2", metadata !8, metadata !"i", metadata !10, metadata !"f", metadata !10, metadata !"s1_1", metadata !12}
!10 = metadata !{metadata !"", metadata !11}
!11 = metadata !{i32 0, i32 0, i32 1024, null}
!12 = metadata !{metadata !"s1", metadata !8, metadata !"i", metadata !10, metadata !"f", metadata !10}
!13 = metadata !{metadata !"foo2b", i32 12, %s2* @foo2b_typeProxy, metadata !8, metadata !9}
!14 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !15}
!15 = metadata !{i32 5, i32 0, i32 1024, metadata !16}
!16 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!17 = metadata !{metadata !"foo1", i32 12, %s1* @foo1_typeProxy, metadata !8, metadata !12}
!18 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !19}
!19 = metadata !{i32 0, i32 0, i32 1027, null, i32 0}
#version 130
// LunarGOO output
struct s1 {
	int i;
	float f;
};
struct s2 {
	int i;
	float f;
	s1 s1_1;
};
uniform s2 foo2a;
uniform s2 foo2b;
uniform sampler2D sampler;
uniform s1 foo1;
in vec4 u;
in vec4 w;
in vec2 coord;
const vec2 C_vec2p2d0p = vec2(2.0);
const vec4 C_vec4p3d0p = vec4(3.0);
const vec4 C_vec4p4d0p = vec4(4.0);
const vec4 C_vec4p5d0p = vec4(5.0);
const int C_17 = 17;
const float C_17d0 = 17.0;
const int C_14 = 14;
const float C_14d0 = 14.0;
const vec4 C_vec4p6d0p = vec4(6.0);
const vec4 C_vec4p7d0p = vec4(7.0);

void main()
{
	vec4 v;
	int H_i10j5 = int(u.x);
	int H_wuqoop = int(u.z);
	int H_kp7bbl = int(w.x);
	int H_ea1gjd = int(w.z);
	bool H_mg72sq1 = foo2a.i == foo2b.i;
	bool H_4rz4va1 = foo2a.f == foo2b.f;
	bool H_n6qsn61 = H_mg72sq1 && H_4rz4va1;
	bool H_ky5pry = foo2a.s1_1.i == foo2b.s1_1.i;
	bool H_cgct881 = foo2a.s1_1.f == foo2b.s1_1.f;
	bool H_bi14lx1 = H_ky5pry && H_cgct881;
	bool H_h2ft6c = H_n6qsn61 && H_bi14lx1;
	if (H_h2ft6c) {
		vec4 H_0k8q2q = texture(sampler, coord);
		v = H_0k8q2q;
	} else {
		vec2 H_s6lphs1 = coord * C_vec2p2d0p;
		vec4 H_fhhqce1 = texture(sampler, H_s6lphs1);
		v = H_fhhqce1;
	}
	
	bvec4 H_pvkv6u1 = equal(u, v);
	bool cc = all(H_pvkv6u1);
	vec4 H_whgzx11 = v * C_vec4p3d0p;
	vec4 select = cc ? H_whgzx11 : v;
	bvec4 H_c5v73z = notEqual(u, select);
	bool cc1 = any(H_c5v73z);
	vec4 H_3hpmbc = select * C_vec4p4d0p;
	vec4 select1 = cc1 ? H_3hpmbc : select;
	bvec2 H_4plaz7 = equal(coord, select1.yw);
	bool cc2 = all(H_4plaz7);
	vec4 H_jnyjsr = select1 * C_vec4p5d0p;
	vec4 select2 = cc2 ? H_jnyjsr : select1;
	bool H_b7wxa2 = H_i10j5 == C_17;
	bool H_10kds5 = u.y == C_17d0;
	bool H_kek4c = H_b7wxa2 && H_10kds5;
	bool H_sb39xi = H_wuqoop == H_kp7bbl;
	bool H_vjb8fb = u.w == w.y;
	bool H_1na3rv = H_sb39xi && H_vjb8fb;
	bool H_eemmj4 = H_kek4c && H_1na3rv;
	bool H_d65b4r1 = H_ea1gjd == C_14;
	bool H_8l4lu31 = w.w == C_14d0;
	bool H_6k8a1f1 = H_d65b4r1 && H_8l4lu31;
	bool H_fhpqa6 = H_eemmj4 && H_6k8a1f1;
	vec4 H_9vppdd = select2 * C_vec4p6d0p;
	vec4 select3 = H_fhpqa6 ? H_9vppdd : select2;
	bool H_jkzo5r1 = H_i10j5 != C_17;
	bool H_13ulz11 = u.y != C_17d0;
	bool H_e1p4wt1 = H_jkzo5r1 || H_13ulz11;
	bool H_87kvtr = H_wuqoop != H_kp7bbl;
	bool H_fgp4ub = u.w != w.y;
	bool H_jnqqi61 = H_87kvtr || H_fgp4ub;
	bool H_r34vj81 = H_e1p4wt1 || H_jnqqi61;
	bool H_9il5021 = H_ea1gjd != C_14;
	bool H_wgv8851 = w.w != C_14d0;
	bool H_nkbcgk1 = H_9il5021 || H_wgv8851;
	bool H_wn92591 = H_r34vj81 || H_nkbcgk1;
	vec4 H_vhljha1 = select3 * C_vec4p7d0p;
	vec4 select4 = H_wn92591 ? H_vhljha1 : select3;
	gl_FragColor = select4;
	
}

#version 130
// LunarGOO output
struct s1 {
	int i;
	float f;
};
struct s2 {
	int i;
	float f;
	s1 s1_1;
};
uniform s2 foo2a;
uniform s2 foo2b;
uniform sampler2D sampler;
uniform s1 foo1;
in vec4 u;
in vec4 w;
in vec2 coord;
const vec2 C_vec2p2d0p = vec2(2.0);
const vec4 C_vec4p3d0p = vec4(3.0);
const vec4 C_vec4p4d0p = vec4(4.0);
const vec4 C_vec4p5d0p = vec4(5.0);
const int C_17 = 17;
const float C_17d0 = 17.0;
const int C_14 = 14;
const float C_14d0 = 14.0;
const vec4 C_vec4p6d0p = vec4(6.0);
const vec4 C_vec4p7d0p = vec4(7.0);

void main()
{
	vec4 v;
	int H_i10j = int(u.x);
	int H_wuqoop = int(u.z);
	int H_kp7bbl = int(w.x);
	int H_ea1gjd = int(w.z);
	bool H_mg72sq = foo2a.i == foo2b.i;
	bool H_4rz4va = foo2a.f == foo2b.f;
	bool H_n6qsn = H_mg72sq && H_4rz4va;
	bool H_ky5pry = foo2a.s1_1.i == foo2b.s1_1.i;
	bool H_cgct = foo2a.s1_1.f == foo2b.s1_1.f;
	bool H_bi14lx = H_ky5pry && H_cgct;
	bool H_h2ft6c = H_n6qsn && H_bi14lx;
	if (H_h2ft6c) {
		vec4 H_0k8q2q = texture(sampler, coord);
		v = H_0k8q2q;
	} else {
		vec2 H_s6lphs = coord * C_vec2p2d0p;
		vec4 H_fhhqce = texture(sampler, H_s6lphs);
		v = H_fhhqce;
	}
	
	bvec4 H_pvkv6u = equal(u, v);
	bool cc = all(H_pvkv6u);
	vec4 H_whgzx = v * C_vec4p3d0p;
	vec4 select = cc ? H_whgzx : v;
	bvec4 H_c5v73z = notEqual(u, select);
	bool cc1 = any(H_c5v73z);
	vec4 H_3hpmbc = select * C_vec4p4d0p;
	vec4 select1 = cc1 ? H_3hpmbc : select;
	bvec2 H_4plaz = equal(coord, select1.yw);
	bool cc2 = all(H_4plaz);
	vec4 H_jnyjsr = select1 * C_vec4p5d0p;
	vec4 select2 = cc2 ? H_jnyjsr : select1;
	bool H_b7wxa = H_i10j == C_17;
	bool H_10kds = u.y == C_17d0;
	bool H_kek4c = H_b7wxa && H_10kds;
	bool H_sb39xi = H_wuqoop == H_kp7bbl;
	bool H_vjb8fb = u.w == w.y;
	bool H_1na3rv = H_sb39xi && H_vjb8fb;
	bool H_eemmj = H_kek4c && H_1na3rv;
	bool H_d65b4r = H_ea1gjd == C_14;
	bool H_8l4lu = w.w == C_14d0;
	bool H_6k8a1f = H_d65b4r && H_8l4lu;
	bool H_fhpqa = H_eemmj && H_6k8a1f;
	vec4 H_9vppdd = select2 * C_vec4p6d0p;
	vec4 select3 = H_fhpqa ? H_9vppdd : select2;
	bool H_jkzo5r = H_i10j != C_17;
	bool H_13ulz = u.y != C_17d0;
	bool H_e1p4wt = H_jkzo5r || H_13ulz;
	bool H_87kvtr = H_wuqoop != H_kp7bbl;
	bool H_fgp4ub = u.w != w.y;
	bool H_jnqqi = H_87kvtr || H_fgp4ub;
	bool H_r34vj = H_e1p4wt || H_jnqqi;
	bool H_9il = H_ea1gjd != C_14;
	bool H_wgv = w.w != C_14d0;
	bool H_nkbcgk = H_9il || H_wgv;
	bool H_wn = H_r34vj || H_nkbcgk;
	vec4 H_vhljha = select3 * C_vec4p7d0p;
	vec4 select4 = H_wn ? H_vhljha : select3;
	gl_FragColor = select4;
	
}

