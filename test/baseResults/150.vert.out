
***Unsupported functionality: block layout

***Unsupported functionality: block layout

Top IR:
; ModuleID = 'Glslang'

%gl_PerVertex = type { <4 x float>, float, [4 x float], <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, [1 x <4 x float>], float }

@"anon@0_shadow" = internal global %gl_PerVertex zeroinitializer
@iv4_shadow = internal global <4 x float> zeroinitializer
@ps = external addrspace(2) constant float
@VertexID_shadow = internal global i32 0
@InstanceID_shadow = internal global i32 0

define fastcc void @main() {
entry:
  %iv4 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1037, i32 -1), !gla.input !7
  store <4 x float> %iv4, <4 x float>* @iv4_shadow
  %0 = load <4 x float>* @iv4_shadow
  store <4 x float> %0, <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 0)
  %1 = load float addrspace(2)* @ps, !gla.uniform !13
  store float %1, float* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 1)
  %iv41 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1037, i32 -1), !gla.input !7
  store <4 x float> %iv41, <4 x float>* @iv4_shadow
  %2 = load <4 x float>* @iv4_shadow
  %3 = extractelement <4 x float> %2, i32 0
  store float %3, float* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 2, i32 2)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %4 = load <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %4), !gla.output !1
  %5 = load float* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 1)
  call void @llvm.gla.fWriteData.f32(i32 1025, i32 -1, float %5), !gla.output !1
  %6 = load [4 x float]* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 2)
  call void @llvm.gla.fWriteData.ch(i32 1026, i32 -1, [4 x float] %6), !gla.output !1
  %7 = load <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 3)
  call void @llvm.gla.fWriteData.v4f32(i32 1027, i32 -1, <4 x float> %7), !gla.output !1
  %8 = load <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 4)
  call void @llvm.gla.fWriteData.v4f32(i32 1028, i32 -1, <4 x float> %8), !gla.output !1
  %9 = load <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 5)
  call void @llvm.gla.fWriteData.v4f32(i32 1029, i32 -1, <4 x float> %9), !gla.output !1
  %10 = load <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 6)
  call void @llvm.gla.fWriteData.v4f32(i32 1030, i32 -1, <4 x float> %10), !gla.output !1
  %11 = load <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 7)
  call void @llvm.gla.fWriteData.v4f32(i32 1031, i32 -1, <4 x float> %11), !gla.output !1
  %12 = load [1 x <4 x float>]* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 8)
  call void bitcast (void (i32, i32, [4 x float])* @llvm.gla.fWriteData.ch to void (i32, i32, [1 x <4 x float>])*)(i32 1032, i32 -1, [1 x <4 x float>] %12), !gla.output !1
  %13 = load float* getelementptr inbounds (%gl_PerVertex* @"anon@0_shadow", i32 0, i32 9)
  call void @llvm.gla.fWriteData.f32(i32 1033, i32 -1, float %13), !gla.output !1
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.f32(i32, i32, float) #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.ch(i32, i32, [4 x float]) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.inputs = !{!7, !9, !11}
!gla.uniforms = !{!13}
!gla.noStaticUse = !{!9, !11}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"anon@0", i32 7, %gl_PerVertex* @"anon@0_shadow_typeProxy", metadata !2, metadata !3}
!2 = metadata !{i32 6, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"gl_PerVertex", metadata !4, metadata !"gl_Position", metadata !5, metadata !"gl_PointSize", metadata !5, metadata !"gl_ClipDistance", metadata !5, metadata !"gl_ClipVertex", metadata !5, metadata !"gl_FrontColor", metadata !5, metadata !"gl_BackColor", metadata !5, metadata !"gl_FrontSecondaryColor", metadata !5, metadata !"gl_BackSecondaryColor", metadata !5, metadata !"gl_TexCoord", metadata !5, metadata !"gl_FogFragCoord", metadata !5}
!4 = metadata !{i32 6, i32 0, i32 1024, null}
!5 = metadata !{metadata !"", metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"iv4", i32 1, <4 x float>* @iv4_shadow_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1037, null, i32 0}
!9 = metadata !{metadata !"gl_VertexID", i32 2, i32* @VertexID_shadow_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1038, null, i32 0}
!11 = metadata !{metadata !"gl_InstanceID", i32 3, i32* @InstanceID_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1039, null, i32 0}
!13 = metadata !{metadata !"ps", i32 12, float* @ps_typeProxy, metadata !6}


Bottom IR:
; ModuleID = 'Glslang'

%gl_PerVertex = type { <4 x float>, float, [4 x float], <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, [1 x <4 x float>], float }

@"anon@0_shadow" = internal unnamed_addr global %gl_PerVertex zeroinitializer
@ps = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %iv4 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1037, i32 -1), !gla.input !7
  %gla_constGEP = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 0
  store <4 x float> %iv4, <4 x float>* %gla_constGEP, align 16
  %0 = load float addrspace(2)* @ps, align 4, !gla.uniform !13
  %gla_constGEP2 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 1
  store float %0, float* %gla_constGEP2, align 16
  %iv41 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1037, i32 -1), !gla.input !7
  %1 = extractelement <4 x float> %iv41, i32 0
  %gla_constGEP3 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 2, i32 2
  store float %1, float* %gla_constGEP3, align 4
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %iv4), !gla.output !1
  %gla_constGEP4 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 1
  %2 = load float* %gla_constGEP4, align 16
  call void @llvm.gla.fWriteData.f32(i32 1025, i32 -1, float %2), !gla.output !1
  %gla_constGEP5 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 2
  %3 = load [4 x float]* %gla_constGEP5, align 4
  call void @llvm.gla.fWriteData.ch(i32 1026, i32 -1, [4 x float] %3), !gla.output !1
  %gla_constGEP6 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 3
  %4 = load <4 x float>* %gla_constGEP6, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 1027, i32 -1, <4 x float> %4), !gla.output !1
  %gla_constGEP7 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 4
  %5 = load <4 x float>* %gla_constGEP7, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 1028, i32 -1, <4 x float> %5), !gla.output !1
  %gla_constGEP8 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 5
  %6 = load <4 x float>* %gla_constGEP8, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 1029, i32 -1, <4 x float> %6), !gla.output !1
  %gla_constGEP9 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 6
  %7 = load <4 x float>* %gla_constGEP9, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 1030, i32 -1, <4 x float> %7), !gla.output !1
  %gla_constGEP10 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 7
  %8 = load <4 x float>* %gla_constGEP10, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 1031, i32 -1, <4 x float> %8), !gla.output !1
  %gla_constGEP11 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 8
  %9 = load [1 x <4 x float>]* %gla_constGEP11, align 16
  call void bitcast (void (i32, i32, [4 x float])* @llvm.gla.fWriteData.ch to void (i32, i32, [1 x <4 x float>])*)(i32 1032, i32 -1, [1 x <4 x float>] %9), !gla.output !1
  %gla_constGEP12 = getelementptr %gl_PerVertex* @"anon@0_shadow", i32 0, i32 9
  %10 = load float* %gla_constGEP12, align 16
  call void @llvm.gla.fWriteData.f32(i32 1033, i32 -1, float %10), !gla.output !1
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.f32(i32, i32, float) #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.ch(i32, i32, [4 x float]) #1

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.inputs = !{!7, !9, !11}
!gla.uniforms = !{!13}
!gla.noStaticUse = !{!9, !11}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"anon@0", i32 7, %gl_PerVertex* @"anon@0_shadow_typeProxy", metadata !2, metadata !3}
!2 = metadata !{i32 6, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"gl_PerVertex", metadata !4, metadata !"gl_Position", metadata !5, metadata !"gl_PointSize", metadata !5, metadata !"gl_ClipDistance", metadata !5, metadata !"gl_ClipVertex", metadata !5, metadata !"gl_FrontColor", metadata !5, metadata !"gl_BackColor", metadata !5, metadata !"gl_FrontSecondaryColor", metadata !5, metadata !"gl_BackSecondaryColor", metadata !5, metadata !"gl_TexCoord", metadata !5, metadata !"gl_FogFragCoord", metadata !5}
!4 = metadata !{i32 6, i32 0, i32 1024, null}
!5 = metadata !{metadata !"", metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"iv4", i32 1, <4 x float>* @iv4_shadow_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1037, null, i32 0}
!9 = metadata !{metadata !"gl_VertexID", i32 2, i32* @VertexID_shadow_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1038, null, i32 0}
!11 = metadata !{metadata !"gl_InstanceID", i32 3, i32* @InstanceID_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1039, null, i32 0}
!13 = metadata !{metadata !"ps", i32 12, float* @ps_typeProxy, metadata !6}

***Unsupported functionality: missing metadata on load 0 anon@0_shadow

***Unsupported functionality: missing metadata on load 0 anon@0_shadow

***Unsupported functionality: missing metadata on load 0 anon@0_shadow

***Unsupported functionality: missing metadata on load 0 anon@0_shadow

***Unsupported functionality: missing metadata on load 0 anon@0_shadow

***Unsupported functionality: missing metadata on load 0 anon@0_shadow

***Unsupported functionality: missing metadata on load 0 anon@0_shadow

***Unsupported functionality: missing metadata on load 0 anon@0_shadow

Linked vertex stage:

ERROR: Linking vertex stage: Missing entry point: Each stage requires one "void main()" entry point

