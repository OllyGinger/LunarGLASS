
Top IR:
; ModuleID = 'Glslang'

@tex = external addrspace(1) constant i32
@coord = global <2 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %v = alloca <4 x float>
  %0 = load i32 addrspace(1)* @tex, !gla.uniform !1
  %1 = load <2 x float>* @coord
  %v1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %1)
  store <4 x float> %v1, <4 x float>* %v
  %2 = load <4 x float>* %v
  %3 = fcmp oeq <4 x float> %2, <float 0x3FB99999A0000000, float 0x3FC99999A0000000, float 0x3FD3333340000000, float 0x3FD99999A0000000>
  %4 = call i1 @llvm.gla.all.v4i1(<4 x i1> %3)
  br i1 %4, label %then, label %ifmerge

then:                                             ; preds = %entry
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %post-discard
  %gl_FragColor = load <4 x float>* %v
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind
declare void @llvm.gla.discard() #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1}
!gla.inputs = !{!4}
!gla.outputs = !{!6}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"tex", i32 12, i32* @tex_typeProxy, metadata !2}
!2 = metadata !{i32 5, i32 0, i32 1024, metadata !3}
!3 = metadata !{i32 0, i32* @tex_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@tex = external addrspace(1) constant i32
@coord = global <2 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @tex, align 4, !gla.uniform !1
  %1 = load <2 x float>* @coord, align 8
  %v1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %1)
  %2 = fcmp oeq <4 x float> %v1, <float 0x3FB99999A0000000, float 0x3FC99999A0000000, float 0x3FD3333340000000, float 0x3FD99999A0000000>
  %3 = call i1 @llvm.gla.all.v4i1(<4 x i1> %2)
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %entry
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge:                                          ; preds = %entry
  store <4 x float> %v1, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind
declare void @llvm.gla.discard() #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1}
!gla.inputs = !{!4}
!gla.outputs = !{!6}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"tex", i32 12, i32* @tex_typeProxy, metadata !2}
!2 = metadata !{i32 5, i32 0, i32 1024, metadata !3}
!3 = metadata !{i32 0, i32* @tex_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 110
// LunarGOO output
uniform sampler2D tex;
varying vec2 coord;
const vec4 C_o2rsm81 = vec4(0.1, 0.2, 0.3, 0.4);

void main()
{
	vec4 H_zp2m0z = texture2D(tex, coord);
	bvec4 H_2mjw8w1 = equal(H_zp2m0z, C_o2rsm81);
	bool H_878a09 = all(H_2mjw8w1);
	if (H_878a09) {
		discard;
	}
	
	gl_FragColor = H_zp2m0z;
	
}

#version 110
// LunarGOO output
uniform sampler2D tex;
varying vec2 coord;
const vec4 C_o2rsm81 = vec4(0.1, 0.2, 0.3, 0.4);

void main()
{
	vec4 H_zp_c1 = texture2D(tex, coord);
	bvec4 H_uc2 = equal(H_zp_c1, C_o2rsm81);
	bool H_uc3 = all(H_uc2);
	if (H_uc3) {
		discard;
	}
	
	gl_FragColor = H_zp_c1;
	
}

