
Top IR:
; ModuleID = 'Glslang'

@BaseColor_shadow = internal global <4 x float> zeroinitializer
@Count = external addrspace(2) constant i32
@bigColor = external addrspace(2) constant <4 x float>
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %i = alloca i32
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor, <4 x float>* @BaseColor_shadow
  %color1 = load <4 x float>* @BaseColor_shadow
  store <4 x float> %color1, <4 x float>* %color
  store i32 0, i32* %i
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %ifmerge, %entry
  %0 = load i32* %i
  %1 = load i32 addrspace(2)* @Count, !gla.uniform !3
  %2 = icmp slt i32 %0, %1
  %3 = xor i1 %2, true
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %4 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %5 = load <4 x float>* %color
  %color2 = fadd <4 x float> %5, %4
  store <4 x float> %color2, <4 x float>* %color
  %6 = load i32* %i
  %i3 = add i32 %6, 1
  store i32 %i3, i32* %i
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %then
  %FragColor_shadow = load <4 x float>* %color
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge
  %7 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %7), !gla.output !6
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@Count = external addrspace(2) constant i32
@bigColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  %.pre = load i32 addrspace(2)* @Count, align 4, !gla.uniform !3
  %0 = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !5
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %i3, %ifmerge ]
  %color.0 = phi <4 x float> [ %BaseColor, %entry ], [ %color2, %ifmerge ]
  %1 = icmp slt i32 %i.0, %.pre
  br i1 %1, label %ifmerge, label %then

then:                                             ; preds = %loop-header
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %color.0), !gla.output !6
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %then
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void

ifmerge:                                          ; preds = %loop-header
  %color2 = fadd <4 x float> %color.0, %0
  %i3 = add i32 %i.0, 1
  br label %loop-header
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 120
// LunarGOO output
uniform int Count;
uniform vec4 bigColor;
varying vec4 BaseColor;
const int const23i_0 = 0;
const int const27i_1 = 1;

void main()
{
    int i_0;
    vec4 color_0;
    i_0 = const23i_0;
    color_0 = BaseColor;
    while (true) {
        bool temp24 = i_0 < Count;
        if (! temp24) {
            break;
        }
        
        vec4 color2 = color_0 + bigColor;
        int temp26 = i_0 + const27i_1;
        i_0 = temp26;
        color_0 = color2;
    }
    
    gl_FragColor = color_0;
    
}


#version 120
// LunarGOO output
uniform int Count;
uniform vec4 bigColor;
varying vec4 BaseColor;
const int const23i_0 = 0;
const int const27i_1 = 1;

void main()
{
    vec4 color_0_0;
    int i_0_0;
    color_0_0 = BaseColor;
    i_0_0 = const23i_0;
    while (true) {
        bool temp24 = i_0_0 < Count;
        if (! temp24) {
            break;
        }
        
        vec4 color26 = color_0_0 + bigColor;
        int temp267 = i_0_0 + const27i_1;
        color_0_0 = color26;
        i_0_0 = temp267;
    }
    
    gl_FragColor = color_0_0;
    
}


