
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@Count = external addrspace(2) constant i32
@bigColor = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer
@v4 = external addrspace(2) constant <4 x i32>

define fastcc void @main() {
entry:
  %constructed = alloca <4 x float>
  %tv4 = alloca <4 x float>
  %i13 = alloca i32
  %i4 = alloca i32
  %sum = alloca float
  %i = alloca i32
  %color = alloca <4 x float>
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  store i32 0, i32* %i
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %ifmerge, %entry
  %0 = load i32* %i
  %1 = load i32 addrspace(2)* @Count, !gla.uniform !3
  %2 = icmp slt i32 %0, %1
  %3 = xor i1 %2, true
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %4 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %5 = load <4 x float>* %color
  %color2 = fadd <4 x float> %5, %4
  store <4 x float> %color2, <4 x float>* %color
  %6 = load i32* %i
  %i3 = add i32 %6, 1
  store i32 %i3, i32* %i
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %then
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  store float 0.000000e+00, float* %sum
  store i32 0, i32* %i4
  br label %loop-header5

loop-header5:                                     ; preds = %post-loop-continue11, %ifmerge8, %loop-merge
  %7 = load i32* %i4
  %8 = icmp slt i32 %7, 4
  %9 = xor i1 %8, true
  br i1 %9, label %then6, label %ifmerge8

then6:                                            ; preds = %loop-header5
  br label %loop-merge12

post-loop-break7:                                 ; No predecessors!
  br label %ifmerge8

ifmerge8:                                         ; preds = %loop-header5, %post-loop-break7
  %10 = load i32* %i4
  %11 = load <4 x i32> addrspace(2)* @v4, !gla.uniform !6
  %12 = extractelement <4 x i32> %11, i32 %10
  %13 = uitofp i32 %12 to float
  %14 = load float* %sum
  %sum9 = fadd float %14, %13
  store float %sum9, float* %sum
  %15 = load i32* %i4
  %i410 = add i32 %15, 1
  store i32 %i410, i32* %i4
  br label %loop-header5

post-loop-continue11:                             ; No predecessors!
  br label %loop-header5

loop-merge12:                                     ; preds = %then6
  store i32 0, i32* %i13
  br label %loop-header14

loop-header14:                                    ; preds = %post-loop-continue20, %ifmerge17, %loop-merge12
  %16 = load i32* %i13
  %17 = icmp slt i32 %16, 4
  %18 = xor i1 %17, true
  br i1 %18, label %then15, label %ifmerge17

then15:                                           ; preds = %loop-header14
  br label %loop-merge21

post-loop-break16:                                ; No predecessors!
  br label %ifmerge17

ifmerge17:                                        ; preds = %loop-header14, %post-loop-break16
  %19 = load i32* %i13
  %20 = load i32* %i13
  %21 = load <4 x i32> addrspace(2)* @v4, !gla.uniform !6
  %22 = extractelement <4 x i32> %21, i32 %20
  %23 = mul i32 %22, 4
  %24 = uitofp i32 %23 to float
  %25 = load <4 x float>* %tv4
  %tv418 = insertelement <4 x float> %25, float %24, i32 %19
  store <4 x float> %tv418, <4 x float>* %tv4
  %26 = load i32* %i13
  %i1319 = add i32 %26, 1
  store i32 %i1319, i32* %i13
  br label %loop-header14

post-loop-continue20:                             ; No predecessors!
  br label %loop-header14

loop-merge21:                                     ; preds = %then15
  %27 = load float* %sum
  %28 = load <4 x float>* %constructed
  %29 = insertelement <4 x float> undef, float %27, i32 0
  %30 = insertelement <4 x float> %29, float %27, i32 1
  %31 = insertelement <4 x float> %30, float %27, i32 2
  %32 = insertelement <4 x float> %31, float %27, i32 3
  %33 = load <4 x float>* %tv4
  %34 = fadd <4 x float> %32, %33
  %35 = load <4 x float>* @gl_FragColor
  %gl_FragColor22 = fadd <4 x float> %35, %34
  store <4 x float> %gl_FragColor22, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge21
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6}
!gla.outputs = !{!8}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"v4", i32 12, <4 x i32>* @v4_typeProxy, metadata !7}
!7 = metadata !{i32 1, i32 0, i32 1024, null}
!8 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@Count = external addrspace(2) constant i32
@bigColor = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer
@v4 = external addrspace(2) constant <4 x i32>
@gla_globalAgg = internal global <4 x float> undef

define fastcc void @main() {
entry:
  %color1 = load <4 x float>* @BaseColor, align 16
  %.pre = load i32 addrspace(2)* @Count, align 4, !gla.uniform !3
  %0 = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !5
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %1 = phi <4 x float> [ %color1, %entry ], [ %color2, %ifmerge ]
  %i.0 = phi i32 [ 0, %entry ], [ %i3, %ifmerge ]
  %2 = icmp slt i32 %i.0, %.pre
  br i1 %2, label %ifmerge, label %then

then:                                             ; preds = %loop-header
  store <4 x float> %1, <4 x float>* @gl_FragColor, align 16
  %3 = load <4 x i32> addrspace(2)* @v4, align 16, !gla.uniform !6
  %4 = extractelement <4 x i32> %3, i32 0
  %5 = uitofp i32 %4 to float
  %6 = extractelement <4 x i32> %3, i32 1
  %7 = uitofp i32 %6 to float
  %sum9.1 = fadd float %5, %7
  %8 = extractelement <4 x i32> %3, i32 2
  %9 = uitofp i32 %8 to float
  %sum9.2 = fadd float %sum9.1, %9
  %10 = extractelement <4 x i32> %3, i32 3
  %11 = uitofp i32 %10 to float
  %sum9.3 = fadd float %sum9.2, %11
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %sum9.3, <4 x i32> zeroinitializer)
  %13 = shl i32 %4, 2
  %14 = uitofp i32 %13 to float
  %aggregate = load <4 x float>* @gla_globalAgg
  %tv418 = insertelement <4 x float> %aggregate, float %14, i32 0
  %15 = shl i32 %6, 2
  %16 = uitofp i32 %15 to float
  %tv418.1 = insertelement <4 x float> %tv418, float %16, i32 1
  %17 = shl i32 %8, 2
  %18 = uitofp i32 %17 to float
  %tv418.2 = insertelement <4 x float> %tv418.1, float %18, i32 2
  %19 = shl i32 %10, 2
  %20 = uitofp i32 %19 to float
  %tv418.3 = insertelement <4 x float> %tv418.2, float %20, i32 3
  %21 = fadd <4 x float> %12, %tv418.3
  %gl_FragColor22 = fadd <4 x float> %21, %1
  store <4 x float> %gl_FragColor22, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %then
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void

ifmerge:                                          ; preds = %loop-header
  %color2 = fadd <4 x float> %1, %0
  %i3 = add i32 %i.0, 1
  br label %loop-header
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6}
!gla.outputs = !{!8}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"v4", i32 12, <4 x i32>* @v4_typeProxy, metadata !7}
!7 = metadata !{i32 1, i32 0, i32 1024, null}
!8 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 130
// LunarGOO output
uniform int Count;
uniform vec4 bigColor;
uniform uvec4 v4;
in vec4 BaseColor;
vec4 gla_globalAgg;
const int L_3 = 0;
const int L_5 = 2;

void main()
{
	vec4 L_1;
	int i_uc1;
	L_1 = BaseColor;
	i_uc1 = L_3;
	for (i_uc1 = 0; i_uc1 < Count; ++i_uc1) {
		L_1 = (L_1 + bigColor);
	}
	
	gl_FragColor = L_1;
	vec4 L_4 = vec4(((((float(ivec4(v4).x)) + (float(ivec4(v4).y))) + (float(ivec4(v4).z))) + (float(ivec4(v4).w))));
	vec4 tv_c2 = gla_globalAgg;
	tv_c2.x = (float((ivec4(v4).x << L_5)));
	vec4 tv_c3 = tv_c2;
	tv_c3.y = (float((ivec4(v4).y << L_5)));
	vec4 tv_c4 = tv_c3;
	tv_c4.z = (float((ivec4(v4).z << L_5)));
	vec4 tv_c5 = tv_c4;
	tv_c5.w = (float((ivec4(v4).w << L_5)));
	gl_FragColor = ((L_4 + tv_c5) + L_1);
	
}

#version 130
// LunarGOO output
uniform int Count;
uniform vec4 bigColor;
uniform uvec4 v4;
in vec4 BaseColor;
const int L_3 = 0;
const int L_5 = 2;

void main()
{
	int i_uc_c1;
	vec4 L_uc2;
	i_uc_c1 = L_3;
	L_uc2 = BaseColor;
	for (i_uc_c1 = 0; i_uc_c1 < Count; ++i_uc_c1) {
		L_uc2 = (L_uc2 + bigColor);
	}
	
	gl_FragColor = L_uc2;
	vec4 L_4 = vec4(((((float(ivec4(v4).x)) + (float(ivec4(v4).y))) + (float(ivec4(v4).z))) + (float(ivec4(v4).w))));
	vec4 L_6 = vec4((float((ivec4(v4).x << L_5))), (float((ivec4(v4).y << L_5))), (float((ivec4(v4).z << L_5))), (float((ivec4(v4).w << L_5))));
	gl_FragColor = ((L_4 + L_6) + L_uc2);
	
}

