
Top IR:
; ModuleID = 'Glslang'

%str = type { i32, [3 x <2 x float>], i1 }

@v1 = internal global <4 x float> zeroinitializer
@v2 = internal global <4 x float> zeroinitializer
@v3 = internal global <4 x float> zeroinitializer
@v4 = internal global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed70 = alloca <4 x float>
  %indexable68 = alloca %str
  %t = alloca %str
  %ternary = alloca <4 x float>
  %i = alloca float
  %h = alloca float
  %indexable = alloca [4 x <4 x float>]
  %0 = alloca [4 x <4 x float>]
  %g = alloca float
  %f = alloca float
  %1 = alloca [4 x <4 x float>]
  %mm = alloca [4 x <4 x float>]
  %constructed = alloca [4 x <4 x float>]
  %m = alloca [4 x <4 x float>]
  store <4 x float> <float 2.000000e+00, float 3.000000e+00, float 5.000000e+00, float 7.000000e+00>, <4 x float>* @v1
  store <4 x float> <float 1.100000e+01, float 1.300000e+01, float 1.700000e+01, float 1.900000e+01>, <4 x float>* @v2
  store <4 x float> <float 2.300000e+01, float 2.900000e+01, float 3.100000e+01, float 3.700000e+01>, <4 x float>* @v3
  store <4 x float> <float 4.100000e+01, float 4.300000e+01, float 4.700000e+01, float 5.300000e+01>, <4 x float>* @v4
  %2 = load <4 x float>* @v1
  %3 = load <4 x float>* @v2
  %4 = load <4 x float>* @v3
  %5 = load <4 x float>* @v4
  %6 = load [4 x <4 x float>]* %constructed
  %element = extractelement <4 x float> %2, i32 0
  %element1 = extractelement <4 x float> %2, i32 1
  %element2 = extractelement <4 x float> %2, i32 2
  %element3 = extractelement <4 x float> %2, i32 3
  %element4 = extractelement <4 x float> %3, i32 0
  %element5 = extractelement <4 x float> %3, i32 1
  %element6 = extractelement <4 x float> %3, i32 2
  %element7 = extractelement <4 x float> %3, i32 3
  %element8 = extractelement <4 x float> %4, i32 0
  %element9 = extractelement <4 x float> %4, i32 1
  %element10 = extractelement <4 x float> %4, i32 2
  %element11 = extractelement <4 x float> %4, i32 3
  %element12 = extractelement <4 x float> %5, i32 0
  %element13 = extractelement <4 x float> %5, i32 1
  %element14 = extractelement <4 x float> %5, i32 2
  %element15 = extractelement <4 x float> %5, i32 3
  %column = extractvalue [4 x <4 x float>] %6, 0
  %column16 = insertelement <4 x float> %column, float %element, i32 0
  %column17 = insertelement <4 x float> %column16, float %element1, i32 1
  %column18 = insertelement <4 x float> %column17, float %element2, i32 2
  %column19 = insertelement <4 x float> %column18, float %element3, i32 3
  %matrix = insertvalue [4 x <4 x float>] %6, <4 x float> %column19, 0
  %column20 = extractvalue [4 x <4 x float>] %6, 1
  %column21 = insertelement <4 x float> %column20, float %element4, i32 0
  %column22 = insertelement <4 x float> %column21, float %element5, i32 1
  %column23 = insertelement <4 x float> %column22, float %element6, i32 2
  %column24 = insertelement <4 x float> %column23, float %element7, i32 3
  %matrix25 = insertvalue [4 x <4 x float>] %matrix, <4 x float> %column24, 1
  %column26 = extractvalue [4 x <4 x float>] %6, 2
  %column27 = insertelement <4 x float> %column26, float %element8, i32 0
  %column28 = insertelement <4 x float> %column27, float %element9, i32 1
  %column29 = insertelement <4 x float> %column28, float %element10, i32 2
  %column30 = insertelement <4 x float> %column29, float %element11, i32 3
  %matrix31 = insertvalue [4 x <4 x float>] %matrix25, <4 x float> %column30, 2
  %column32 = extractvalue [4 x <4 x float>] %6, 3
  %column33 = insertelement <4 x float> %column32, float %element12, i32 0
  %column34 = insertelement <4 x float> %column33, float %element13, i32 1
  %column35 = insertelement <4 x float> %column34, float %element14, i32 2
  %column36 = insertelement <4 x float> %column35, float %element15, i32 3
  %matrix37 = insertvalue [4 x <4 x float>] %matrix31, <4 x float> %column36, 3
  store [4 x <4 x float>] %matrix37, [4 x <4 x float>]* %m
  %7 = load [4 x <4 x float>]* %m
  %8 = load [4 x <4 x float>]* %m
  %9 = load [4 x <4 x float>]* %1
  %leftColumn = extractvalue [4 x <4 x float>] %7, 0
  %rightColumn = extractvalue [4 x <4 x float>] %8, 0
  %column38 = fmul <4 x float> %leftColumn, %rightColumn
  %10 = insertvalue [4 x <4 x float>] %9, <4 x float> %column38, 0
  %leftColumn39 = extractvalue [4 x <4 x float>] %7, 1
  %rightColumn40 = extractvalue [4 x <4 x float>] %8, 1
  %column41 = fmul <4 x float> %leftColumn39, %rightColumn40
  %11 = insertvalue [4 x <4 x float>] %10, <4 x float> %column41, 1
  %leftColumn42 = extractvalue [4 x <4 x float>] %7, 2
  %rightColumn43 = extractvalue [4 x <4 x float>] %8, 2
  %column44 = fmul <4 x float> %leftColumn42, %rightColumn43
  %12 = insertvalue [4 x <4 x float>] %11, <4 x float> %column44, 2
  %leftColumn45 = extractvalue [4 x <4 x float>] %7, 3
  %rightColumn46 = extractvalue [4 x <4 x float>] %8, 3
  %column47 = fmul <4 x float> %leftColumn45, %rightColumn46
  %mm48 = insertvalue [4 x <4 x float>] %12, <4 x float> %column47, 3
  store [4 x <4 x float>] %mm48, [4 x <4 x float>]* %mm
  %13 = getelementptr [4 x <4 x float>]* %mm, i32 0, i32 1
  %14 = load <4 x float>* %13
  %f49 = extractelement <4 x float> %14, i32 3
  store float %f49, float* %f
  %15 = load [4 x <4 x float>]* %m
  %16 = load [4 x <4 x float>]* %m
  %17 = load [4 x <4 x float>]* %0
  %leftColumn50 = extractvalue [4 x <4 x float>] %15, 0
  %rightColumn51 = extractvalue [4 x <4 x float>] %16, 0
  %column52 = fmul <4 x float> %leftColumn50, %rightColumn51
  %18 = insertvalue [4 x <4 x float>] %17, <4 x float> %column52, 0
  %leftColumn53 = extractvalue [4 x <4 x float>] %15, 1
  %rightColumn54 = extractvalue [4 x <4 x float>] %16, 1
  %column55 = fmul <4 x float> %leftColumn53, %rightColumn54
  %19 = insertvalue [4 x <4 x float>] %18, <4 x float> %column55, 1
  %leftColumn56 = extractvalue [4 x <4 x float>] %15, 2
  %rightColumn57 = extractvalue [4 x <4 x float>] %16, 2
  %column58 = fmul <4 x float> %leftColumn56, %rightColumn57
  %20 = insertvalue [4 x <4 x float>] %19, <4 x float> %column58, 2
  %leftColumn59 = extractvalue [4 x <4 x float>] %15, 3
  %rightColumn60 = extractvalue [4 x <4 x float>] %16, 3
  %column61 = fmul <4 x float> %leftColumn59, %rightColumn60
  %indexable62 = insertvalue [4 x <4 x float>] %20, <4 x float> %column61, 3
  store [4 x <4 x float>] %indexable62, [4 x <4 x float>]* %indexable
  %21 = getelementptr [4 x <4 x float>]* %indexable, i32 0, i32 2
  %22 = load <4 x float>* %21
  %g63 = extractelement <4 x float> %22, i32 1
  store float %g63, float* %g
  store float 5.000000e+00, float* %h
  %23 = load i32 addrspace(1)* @sampler, !gla.uniform !1
  %24 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %23, i32 0, <2 x float> <float 5.000000e-01, float 5.000000e-01>)
  %i64 = extractelement <4 x float> %24, i32 1
  store float %i64, float* %i
  %25 = load float* %i
  %26 = fcmp ogt float %25, 0x3FB99999A0000000
  br i1 %26, label %then, label %else

then:                                             ; preds = %entry
  %ternary65 = load <4 x float>* @v1
  store <4 x float> %ternary65, <4 x float>* %ternary
  br label %ifmerge

else:                                             ; preds = %entry
  %ternary66 = load <4 x float>* @v2
  store <4 x float> %ternary66, <4 x float>* %ternary
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %27 = load <4 x float>* %ternary
  %28 = extractelement <4 x float> %27, i32 3
  %29 = load float* %i
  %i67 = fadd float %29, %28
  store float %i67, float* %i
  store %str { i32 1, [3 x <2 x float>] [<2 x float> <float 2.000000e+00, float 3.000000e+00>, <2 x float> <float 4.000000e+00, float 5.000000e+00>, <2 x float> <float 6.000000e+00, float 7.000000e+00>], i1 true }, %str* %t
  store %str { i32 1, [3 x <2 x float>] [<2 x float> <float 2.000000e+00, float 3.000000e+00>, <2 x float> <float 4.000000e+00, float 5.000000e+00>, <2 x float> <float 6.000000e+00, float 7.000000e+00>], i1 true }, %str* %indexable68
  %30 = getelementptr %str* %indexable68, i32 0, i32 1, i32 2
  %31 = load <2 x float>* %30
  %32 = extractelement <2 x float> %31, i32 1
  %33 = load float* %i
  %i69 = fadd float %33, %32
  store float %i69, float* %i
  %34 = load float* %f
  %35 = load float* %g
  %36 = load float* %h
  %37 = load float* %i
  %38 = load <4 x float>* %constructed70
  %39 = insertelement <4 x float> %38, float %34, i32 0
  %40 = insertelement <4 x float> %39, float %35, i32 1
  %41 = insertelement <4 x float> %40, float %36, i32 2
  %FragColor_shadow = insertelement <4 x float> %41, float %37, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %42 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %42), !gla.output !4
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1}
!gla.outputs = !{!4}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !2}
!2 = metadata !{i32 5, i32 0, i32 1024, metadata !3}
!3 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@sampler = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @sampler, align 4, !gla.uniform !1
  %1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> <float 5.000000e-01, float 5.000000e-01>)
  %i64 = extractelement <4 x float> %1, i32 1
  %2 = fcmp ogt float %i64, 0x3FB99999A0000000
  %3 = select i1 %2, float 7.000000e+00, float 1.900000e+01
  %i67 = fadd float %i64, %3
  %i69 = fadd float %i67, 7.000000e+00
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 3.610000e+02, float 8.410000e+02, float 5.000000e+00, float undef>, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %i69, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %4), !gla.output !4
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1}
!gla.outputs = !{!4}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !2}
!2 = metadata !{i32 5, i32 0, i32 1024, metadata !3}
!3 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
#version 120
// LunarGOO output
uniform sampler2D sampler;
const vec2 const22 = vec2(0.5);
const float const24 = 0.1;
const float const26 = 7.0;
const float const27 = 19.0;
const vec4 const31 = vec4(361.0, 841.0, 5.0, 0.0);

void main()
{
    vec4 temp21 = texture2D(sampler, const22);
    bool temp23 = temp21.y > const24;
    float temp25 = temp23 ? const26 : const27;
    float temp28 = temp21.y + temp25;
    float temp29 = temp28 + const26;
    vec4 temp30 = const31;
    temp30.w = temp29;
    gl_FragColor = temp30;
    
}


#version 120
// LunarGOO output
uniform sampler2D sampler;
const vec2 const22 = vec2(0.5);
const float const24 = 0.1;
const float const26 = 7.0;
const float const27 = 19.0;
const vec4 const31 = vec4(361.0, 841.0, 5.0, 0.0);

void main()
{
    vec4 temp211 = texture2D(sampler, const22);
    bool temp232 = temp211.y > const24;
    float temp25 = temp232 ? const26 : const27;
    float temp284 = temp211.y + temp25;
    float temp295 = temp284 + const26;
    vec4 temp30 = const31;
    temp30.w = temp295;
    gl_FragColor = temp30;
    
}


