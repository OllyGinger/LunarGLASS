
Top IR:
; ModuleID = 'Glslang'

@texSampler2D = external addrspace(1) constant i32
@gl_TexCoord = global [6 x <4 x float>] zeroinitializer
@color = global <4 x float> zeroinitializer
@alpha = global float 0.000000e+00
@gl_FragColor = global <4 x float> zeroinitializer
@foo = global [3 x <4 x float>] zeroinitializer

define fastcc void @main() {
entry:
  %texColor1 = alloca <2 x float>
  %texColor = alloca <4 x float>
  %0 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !1
  %1 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @gl_TexCoord, i32 0, i32 4)
  %2 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @gl_TexCoord, i32 0, i32 5)
  %3 = fadd <4 x float> %1, %2
  %4 = load <2 x float>* %texColor1
  %5 = extractelement <4 x float> %3, i32 0
  %6 = insertelement <2 x float> %4, float %5, i32 0
  %7 = extractelement <4 x float> %3, i32 1
  %8 = insertelement <2 x float> %6, float %7, i32 1
  %texColor2 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %8)
  store <4 x float> %texColor2, <4 x float>* %texColor
  %9 = load <4 x float>* @color
  %10 = load <4 x float>* %texColor
  %texColor3 = fadd <4 x float> %10, %9
  store <4 x float> %texColor3, <4 x float>* %texColor
  %11 = load float* @alpha
  %12 = load <4 x float>* %texColor
  %texColor4 = insertelement <4 x float> %12, float %11, i32 3
  store <4 x float> %texColor4, <4 x float>* %texColor
  %13 = load <4 x float>* getelementptr inbounds ([3 x <4 x float>]* @foo, i32 0, i32 1)
  %14 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @gl_TexCoord, i32 0, i32 0)
  %15 = fadd <4 x float> %13, %14
  %16 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @gl_TexCoord, i32 0, i32 4)
  %17 = fadd <4 x float> %15, %16
  %18 = load <4 x float>* %texColor
  %gl_FragColor = fadd <4 x float> %17, %18
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1}
!gla.inputs = !{!4, !6, !8, !10}
!gla.outputs = !{!12}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, metadata !2}
!2 = metadata !{i32 5, i32 0, i32 1024, metadata !3}
!3 = metadata !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = metadata !{metadata !"gl_TexCoord", i32 1, [6 x <4 x float>]* @gl_TexCoord_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!6 = metadata !{metadata !"color", i32 1, <4 x float>* @color_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!8 = metadata !{metadata !"alpha", i32 1, float* @alpha_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1031, null, i32 1}
!10 = metadata !{metadata !"foo", i32 1, [3 x <4 x float>]* @foo_typeProxy, metadata !11}
!11 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!12 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !13}
!13 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@texSampler2D = external addrspace(1) constant i32
@gl_TexCoord = global [6 x <4 x float>] zeroinitializer
@color = global <4 x float> zeroinitializer
@alpha = global float 0.000000e+00
@gl_FragColor = global <4 x float> zeroinitializer
@foo = global [3 x <4 x float>] zeroinitializer

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @texSampler2D, align 4, !gla.uniform !1
  %gla_constGEP = getelementptr [6 x <4 x float>]* @gl_TexCoord, i32 0, i32 4
  %1 = load <4 x float>* %gla_constGEP, align 16
  %gla_constGEP5 = getelementptr [6 x <4 x float>]* @gl_TexCoord, i32 0, i32 5
  %2 = load <4 x float>* %gla_constGEP5, align 16
  %3 = fadd <4 x float> %1, %2
  %4 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float> %3, <2 x i32> <i32 0, i32 1>)
  %texColor2 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %4)
  %5 = load <4 x float>* @color, align 16
  %texColor3 = fadd <4 x float> %texColor2, %5
  %6 = load float* @alpha, align 4
  %7 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %texColor3, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %6, i32 0)
  %gla_constGEP6 = getelementptr [3 x <4 x float>]* @foo, i32 0, i32 1
  %8 = load <4 x float>* %gla_constGEP6, align 16
  %gla_constGEP7 = getelementptr [6 x <4 x float>]* @gl_TexCoord, i32 0, i32 0
  %9 = load <4 x float>* %gla_constGEP7, align 16
  %10 = fadd <4 x float> %8, %9
  %11 = fadd <4 x float> %1, %10
  %gl_FragColor = fadd <4 x float> %7, %11
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float>, <2 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1}
!gla.inputs = !{!4, !6, !8, !10}
!gla.outputs = !{!12}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, metadata !2}
!2 = metadata !{i32 5, i32 0, i32 1024, metadata !3}
!3 = metadata !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = metadata !{metadata !"gl_TexCoord", i32 1, [6 x <4 x float>]* @gl_TexCoord_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!6 = metadata !{metadata !"color", i32 1, <4 x float>* @color_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!8 = metadata !{metadata !"alpha", i32 1, float* @alpha_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1031, null, i32 1}
!10 = metadata !{metadata !"foo", i32 1, [3 x <4 x float>]* @foo_typeProxy, metadata !11}
!11 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!12 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !13}
!13 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}
#version 130
// LunarGOO output
uniform sampler2D texSampler2D;
in vec4 gl_TexCoord[6];
in vec4 color;
in float alpha;
in vec4 foo[3];

void main()
{
	vec4 H_dbhkwv = gl_TexCoord[4] + gl_TexCoord[5];
	vec4 texColor = texture(texSampler2D, H_dbhkwv.xy);
	vec4 texColor1 = color + texColor;
	vec4 H_8ionn51 = texColor1;
	H_8ionn51.w = alpha;
	vec4 H_hokwog = foo[1] + gl_TexCoord[0];
	vec4 H_wgnrh = H_hokwog + gl_TexCoord[4];
	vec4 Ll_FragColor1 = H_8ionn51 + H_wgnrh;
	gl_FragColor = Ll_FragColor1;
	
}

#version 130
// LunarGOO output
uniform sampler2D texSampler2D;
in vec4 gl_TexCoord[6];
in vec4 color;
in float alpha;
in vec4 foo[3];

void main()
{
	vec4 H_dbhkwv = gl_TexCoord[4] + gl_TexCoord[5];
	vec4 texColor = texture(texSampler2D, H_dbhkwv.xy);
	vec4 texColor1 = color + texColor;
	vec4 H_8ionn51 = texColor1;
	H_8ionn51.w = alpha;
	vec4 H_hokwog = foo[1] + gl_TexCoord[0];
	vec4 H_wgnrh = H_hokwog + gl_TexCoord[4];
	vec4 Ll_FragColor = H_8ionn51 + H_wgnrh;
	gl_FragColor = Ll_FragColor;
	
}

