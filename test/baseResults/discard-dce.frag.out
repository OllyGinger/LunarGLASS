
Top IR:
; ModuleID = 'Glslang'

@tex_coord = global <2 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %radius = alloca float
  %y = alloca float
  %x = alloca float
  %color = alloca <4 x float>
  %black = alloca <4 x float>
  %white = alloca <4 x float>
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %white
  store <4 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>, <4 x float>* %black
  %color1 = load <4 x float>* %white
  store <4 x float> %color1, <4 x float>* %color
  %0 = load <2 x float>* @tex_coord
  %1 = extractelement <2 x float> %0, i32 0
  %2 = fmul float %1, 2.000000e+00
  %x2 = fsub float %2, 1.000000e+00
  store float %x2, float* %x
  %3 = load <2 x float>* @tex_coord
  %4 = extractelement <2 x float> %3, i32 1
  %5 = fmul float %4, 2.000000e+00
  %y3 = fsub float %5, 1.000000e+00
  store float %y3, float* %y
  %6 = load float* %x
  %7 = load float* %x
  %8 = fmul float %6, %7
  %9 = load float* %y
  %10 = load float* %y
  %11 = fmul float %9, %10
  %12 = fadd float %8, %11
  %radius4 = call float @llvm.gla.fSqrt.f32.f32(float %12)
  store float %radius4, float* %radius
  %13 = load float* %radius
  %14 = fcmp ogt float %13, 1.000000e+00
  br i1 %14, label %then, label %ifmerge10

then:                                             ; preds = %entry
  %15 = load float* %radius
  %16 = fcmp ogt float %15, 0x3FF19999A0000000
  br i1 %16, label %then5, label %ifmerge

then5:                                            ; preds = %then
  %17 = load <4 x float>* %color
  %color6 = fadd <4 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color6, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %then, %then5
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %18 = load float* %radius
  %19 = fcmp ogt float %18, 0x3FF3333340000000
  br i1 %19, label %then7, label %ifmerge9

then7:                                            ; preds = %ifmerge
  %20 = load <4 x float>* %color
  %color8 = fadd <4 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color8, <4 x float>* %color
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge, %then7
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge10

ifmerge10:                                        ; preds = %entry, %post-discard
  %21 = load float* %radius
  %22 = fcmp oge float %21, 7.500000e-01
  br i1 %22, label %then11, label %ifmerge13

then11:                                           ; preds = %ifmerge10
  %23 = load float* %radius
  %24 = call float @llvm.gla.fPow.f32.f32.f32(float %23, float 1.600000e+01)
  %25 = fdiv float %24, 2.000000e+00
  %26 = call float @llvm.gla.fAbs.f32.f32(float %25)
  %27 = load <4 x float>* %color
  %28 = insertelement <4 x float> undef, float %26, i32 0
  %29 = insertelement <4 x float> %28, float %26, i32 1
  %30 = insertelement <4 x float> %29, float %26, i32 2
  %31 = insertelement <4 x float> %30, float %26, i32 3
  %color12 = fsub <4 x float> %27, %31
  store <4 x float> %color12, <4 x float>* %color
  br label %ifmerge13

ifmerge13:                                        ; preds = %ifmerge10, %then11
  %gl_FragColor14 = load <4 x float>* %color
  store <4 x float> %gl_FragColor14, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge13
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %ifmerge9
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fSqrt.f32.f32(float) #0

; Function Attrs: nounwind
declare void @llvm.gla.discard() #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fPow.f32.f32.f32(float, float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fAbs.f32.f32(float) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.outputs = !{!3}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"tex_coord", i32 1, <2 x float>* @tex_coord_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@tex_coord = global <2 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load <2 x float>* @tex_coord, align 8
  %1 = extractelement <2 x float> %0, i32 0
  %2 = fmul float %1, 2.000000e+00
  %x2 = fadd float %2, -1.000000e+00
  %3 = extractelement <2 x float> %0, i32 1
  %4 = fmul float %3, 2.000000e+00
  %y3 = fadd float %4, -1.000000e+00
  %5 = fmul float %x2, %x2
  %6 = fmul float %y3, %y3
  %7 = fadd float %5, %6
  %radius4 = call float @llvm.gla.fSqrt.f32.f32(float %7)
  %8 = fcmp ogt float %radius4, 1.000000e+00
  br i1 %8, label %then, label %ifmerge10

then:                                             ; preds = %entry
  %9 = fcmp ogt float %radius4, 0x3FF19999A0000000
  %color.0 = select i1 %9, <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color.0, <4 x float>* @gl_FragColor, align 16
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge10:                                        ; preds = %entry
  %10 = fcmp ult float %radius4, 7.500000e-01
  %11 = call float @llvm.gla.fPow.f32.f32.f32(float %radius4, float 1.600000e+01)
  %12 = fmul float %11, 5.000000e-01
  %13 = call float @llvm.gla.fAbs.f32.f32(float %12)
  %14 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %13, <4 x i32> zeroinitializer)
  %color12 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %select = select i1 %10, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %color12
  store <4 x float> %select, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge10
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fSqrt.f32.f32(float) #0

; Function Attrs: nounwind
declare void @llvm.gla.discard() #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fPow.f32.f32.f32(float, float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fAbs.f32.f32(float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.outputs = !{!3}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"tex_coord", i32 1, <2 x float>* @tex_coord_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 110
// LunarGOO output
varying vec2 tex_coord;
const float L_1 = 2.0;
const float L_2 = -1.0;
const float L_6 = 1.0;
const float L_7 = 1.1;
const vec4 L_8 = vec4(2.0);
const vec4 L_9 = vec4(1.0);
const float L_a = 0.75;
const float L_b = 16.0;
const float L_d = 0.5;

void main()
{
	float L_3 = (tex_coord.x * L_1) + L_2;
	float L_4 = (L_1 * tex_coord.y) + L_2;
	float radius_c1 = sqrt(((L_3 * L_3) + (L_4 * L_4)));
	if ((radius_c1 > L_6)) {
		gl_FragColor = ((radius_c1 > L_7) ? L_8 : L_9);
		discard;
	}
	
	float L_c = pow(radius_c1, L_b);
	float L_e = abs((L_c * L_d));
	vec4 L_f = vec4(L_e);
	gl_FragColor = ((radius_c1 < L_a) ? L_9 : (L_9 - L_f));
	
}

#version 110
// LunarGOO output
varying vec2 tex_coord;
const float L_1 = 2.0;
const float L_2 = -1.0;
const float L_6 = 1.0;
const float L_7 = 1.1;
const vec4 L_8 = vec4(2.0);
const vec4 L_9 = vec4(1.0);
const float L_a = 16.0;
const float L_c = 0.5;
const float L_f = 0.75;

void main()
{
	float L_uc1 = (tex_coord.x * L_1) + L_2;
	float L_uc2 = (L_1 * tex_coord.y) + L_2;
	float radius_c3 = sqrt(((L_uc1 * L_uc1) + (L_uc2 * L_uc2)));
	if ((radius_c3 > L_6)) {
		gl_FragColor = ((radius_c3 > L_7) ? L_8 : L_9);
		discard;
	}
	
	float L_c4 = pow(radius_c3, L_a);
	float L_e_c5 = abs((L_c4 * L_c));
	vec4 L_e = vec4(L_e_c5);
	gl_FragColor = ((radius_c3 < L_f) ? L_9 : (L_9 - L_e));
	
}

