
Top IR:
; ModuleID = 'Glslang'

@u_b = external addrspace(2) constant i1
@i_b = external addrspace(2) constant i1
@u_b2 = external addrspace(2) constant <2 x i1>
@i_b2 = external addrspace(2) constant <2 x i1>
@u_b3 = external addrspace(2) constant <3 x i1>
@i_b3 = external addrspace(2) constant <3 x i1>
@u_b4 = external addrspace(2) constant <4 x i1>
@i_b4 = external addrspace(2) constant <4 x i1>
@u_i = external addrspace(2) constant i32
@i_i = global i32 0
@u_i2 = external addrspace(2) constant <2 x i32>
@i_i2 = global <2 x i32> zeroinitializer
@u_i3 = external addrspace(2) constant <3 x i32>
@i_i3 = global <3 x i32> zeroinitializer
@u_i4 = external addrspace(2) constant <4 x i32>
@i_i4 = global <4 x i32> zeroinitializer
@u_f = external addrspace(2) constant float
@i_f = global float 0.000000e+00
@u_f2 = external addrspace(2) constant <2 x float>
@i_f2 = global <2 x float> zeroinitializer
@u_f3 = external addrspace(2) constant <3 x float>
@i_f3 = global <3 x float> zeroinitializer
@u_f4 = external addrspace(2) constant <4 x float>
@i_f4 = global <4 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed15 = alloca <4 x float>
  %ternary = alloca <4 x float>
  %f4 = alloca <4 x float>
  %f3 = alloca <3 x float>
  %f2 = alloca <2 x float>
  %f = alloca float
  %i4 = alloca <4 x i32>
  %i3 = alloca <3 x i32>
  %i2 = alloca <2 x i32>
  %i = alloca i32
  %constructed5 = alloca <4 x i1>
  %b4 = alloca <4 x i1>
  %constructed3 = alloca <3 x i1>
  %b3 = alloca <3 x i1>
  %constructed = alloca <2 x i1>
  %b2 = alloca <2 x i1>
  %b = alloca i1
  %0 = load i1 addrspace(2)* @u_b, !gla.uniform !1
  %1 = load i1 addrspace(2)* @i_b, !gla.uniform !3
  %b1 = and i1 %0, %1
  store i1 %b1, i1* %b
  %2 = load <2 x i1> addrspace(2)* @u_b2, !gla.uniform !4
  %3 = extractelement <2 x i1> %2, i32 0
  %4 = load <2 x i1> addrspace(2)* @i_b2, !gla.uniform !5
  %5 = extractelement <2 x i1> %4, i32 0
  %6 = and i1 %3, %5
  %7 = load <2 x i1> addrspace(2)* @u_b2, !gla.uniform !4
  %8 = extractelement <2 x i1> %7, i32 1
  %9 = and i1 %6, %8
  %10 = load <2 x i1> addrspace(2)* @i_b2, !gla.uniform !5
  %11 = extractelement <2 x i1> %10, i32 1
  %12 = and i1 %9, %11
  %13 = load <2 x i1>* %constructed
  %14 = insertelement <2 x i1> undef, i1 %12, i32 0
  %b22 = insertelement <2 x i1> %14, i1 %12, i32 1
  store <2 x i1> %b22, <2 x i1>* %b2
  %15 = load <3 x i1> addrspace(2)* @u_b3, !gla.uniform !6
  %16 = extractelement <3 x i1> %15, i32 0
  %17 = load <3 x i1> addrspace(2)* @i_b3, !gla.uniform !7
  %18 = extractelement <3 x i1> %17, i32 0
  %19 = and i1 %16, %18
  %20 = load <3 x i1> addrspace(2)* @u_b3, !gla.uniform !6
  %21 = extractelement <3 x i1> %20, i32 1
  %22 = and i1 %19, %21
  %23 = load <3 x i1> addrspace(2)* @i_b3, !gla.uniform !7
  %24 = extractelement <3 x i1> %23, i32 1
  %25 = and i1 %22, %24
  %26 = load <3 x i1> addrspace(2)* @u_b3, !gla.uniform !6
  %27 = extractelement <3 x i1> %26, i32 2
  %28 = and i1 %25, %27
  %29 = load <3 x i1> addrspace(2)* @i_b3, !gla.uniform !7
  %30 = extractelement <3 x i1> %29, i32 2
  %31 = and i1 %28, %30
  %32 = load <3 x i1>* %constructed3
  %33 = insertelement <3 x i1> undef, i1 %31, i32 0
  %34 = insertelement <3 x i1> %33, i1 %31, i32 1
  %b34 = insertelement <3 x i1> %34, i1 %31, i32 2
  store <3 x i1> %b34, <3 x i1>* %b3
  %35 = load <4 x i1> addrspace(2)* @u_b4, !gla.uniform !8
  %36 = extractelement <4 x i1> %35, i32 0
  %37 = load <4 x i1> addrspace(2)* @i_b4, !gla.uniform !9
  %38 = extractelement <4 x i1> %37, i32 0
  %39 = and i1 %36, %38
  %40 = load <4 x i1> addrspace(2)* @u_b4, !gla.uniform !8
  %41 = extractelement <4 x i1> %40, i32 1
  %42 = and i1 %39, %41
  %43 = load <4 x i1> addrspace(2)* @i_b4, !gla.uniform !9
  %44 = extractelement <4 x i1> %43, i32 1
  %45 = and i1 %42, %44
  %46 = load <4 x i1> addrspace(2)* @u_b4, !gla.uniform !8
  %47 = extractelement <4 x i1> %46, i32 2
  %48 = and i1 %45, %47
  %49 = load <4 x i1> addrspace(2)* @i_b4, !gla.uniform !9
  %50 = extractelement <4 x i1> %49, i32 2
  %51 = and i1 %48, %50
  %52 = load <4 x i1> addrspace(2)* @u_b4, !gla.uniform !8
  %53 = extractelement <4 x i1> %52, i32 3
  %54 = and i1 %51, %53
  %55 = load <4 x i1> addrspace(2)* @i_b4, !gla.uniform !9
  %56 = extractelement <4 x i1> %55, i32 3
  %57 = and i1 %54, %56
  %58 = load <4 x i1>* %constructed5
  %59 = insertelement <4 x i1> undef, i1 %57, i32 0
  %60 = insertelement <4 x i1> %59, i1 %57, i32 1
  %61 = insertelement <4 x i1> %60, i1 %57, i32 2
  %b46 = insertelement <4 x i1> %61, i1 %57, i32 3
  store <4 x i1> %b46, <4 x i1>* %b4
  %62 = load i32 addrspace(2)* @u_i, !gla.uniform !10
  %63 = load i32* @i_i
  %i7 = add i32 %62, %63
  store i32 %i7, i32* %i
  %64 = load <2 x i32> addrspace(2)* @u_i2, !gla.uniform !11
  %65 = load <2 x i32>* @i_i2
  %i28 = add <2 x i32> %64, %65
  store <2 x i32> %i28, <2 x i32>* %i2
  %66 = load <3 x i32> addrspace(2)* @u_i3, !gla.uniform !12
  %67 = load <3 x i32>* @i_i3
  %i39 = add <3 x i32> %66, %67
  store <3 x i32> %i39, <3 x i32>* %i3
  %68 = load <4 x i32> addrspace(2)* @u_i4, !gla.uniform !13
  %69 = load <4 x i32>* @i_i4
  %i410 = add <4 x i32> %68, %69
  store <4 x i32> %i410, <4 x i32>* %i4
  %70 = load float addrspace(2)* @u_f, !gla.uniform !14
  %71 = load float* @i_f
  %f11 = fadd float %70, %71
  store float %f11, float* %f
  %72 = load <2 x float> addrspace(2)* @u_f2, !gla.uniform !15
  %73 = load <2 x float>* @i_f2
  %f212 = fadd <2 x float> %72, %73
  store <2 x float> %f212, <2 x float>* %f2
  %74 = load <3 x float> addrspace(2)* @u_f3, !gla.uniform !16
  %75 = load <3 x float>* @i_f3
  %f313 = fadd <3 x float> %74, %75
  store <3 x float> %f313, <3 x float>* %f3
  %76 = load <4 x float> addrspace(2)* @u_f4, !gla.uniform !17
  %77 = load <4 x float>* @i_f4
  %f414 = fadd <4 x float> %76, %77
  store <4 x float> %f414, <4 x float>* %f4
  %78 = load i1* %b
  %79 = load <2 x i1>* %b2
  %80 = extractelement <2 x i1> %79, i32 0
  %81 = or i1 %78, %80
  %82 = load <2 x i1>* %b2
  %83 = extractelement <2 x i1> %82, i32 1
  %84 = or i1 %81, %83
  %85 = load <3 x i1>* %b3
  %86 = extractelement <3 x i1> %85, i32 0
  %87 = or i1 %84, %86
  %88 = load <3 x i1>* %b3
  %89 = extractelement <3 x i1> %88, i32 1
  %90 = or i1 %87, %89
  %91 = load <3 x i1>* %b3
  %92 = extractelement <3 x i1> %91, i32 2
  %93 = or i1 %90, %92
  %94 = load <4 x i1>* %b4
  %95 = extractelement <4 x i1> %94, i32 0
  %96 = or i1 %93, %95
  %97 = load <4 x i1>* %b4
  %98 = extractelement <4 x i1> %97, i32 1
  %99 = or i1 %96, %98
  %100 = load <4 x i1>* %b4
  %101 = extractelement <4 x i1> %100, i32 2
  %102 = or i1 %99, %101
  %103 = load <4 x i1>* %b4
  %104 = extractelement <4 x i1> %103, i32 3
  %105 = or i1 %102, %104
  br i1 %105, label %then, label %else

then:                                             ; preds = %entry
  %106 = load i32* %i
  %107 = load <2 x i32>* %i2
  %108 = extractelement <2 x i32> %107, i32 0
  %109 = add i32 %106, %108
  %110 = load <2 x i32>* %i2
  %111 = extractelement <2 x i32> %110, i32 1
  %112 = add i32 %109, %111
  %113 = load <3 x i32>* %i3
  %114 = extractelement <3 x i32> %113, i32 0
  %115 = add i32 %112, %114
  %116 = load <3 x i32>* %i3
  %117 = extractelement <3 x i32> %116, i32 1
  %118 = add i32 %115, %117
  %119 = load <3 x i32>* %i3
  %120 = extractelement <3 x i32> %119, i32 2
  %121 = add i32 %118, %120
  %122 = load <4 x i32>* %i4
  %123 = extractelement <4 x i32> %122, i32 0
  %124 = add i32 %121, %123
  %125 = load <4 x i32>* %i4
  %126 = extractelement <4 x i32> %125, i32 1
  %127 = add i32 %124, %126
  %128 = load <4 x i32>* %i4
  %129 = extractelement <4 x i32> %128, i32 2
  %130 = add i32 %127, %129
  %131 = load <4 x i32>* %i4
  %132 = extractelement <4 x i32> %131, i32 3
  %133 = add i32 %130, %132
  %134 = sitofp i32 %133 to float
  %135 = load float* %f
  %136 = fadd float %134, %135
  %137 = load <2 x float>* %f2
  %138 = extractelement <2 x float> %137, i32 0
  %139 = fadd float %136, %138
  %140 = load <2 x float>* %f2
  %141 = extractelement <2 x float> %140, i32 1
  %142 = fadd float %139, %141
  %143 = load <3 x float>* %f3
  %144 = extractelement <3 x float> %143, i32 0
  %145 = fadd float %142, %144
  %146 = load <3 x float>* %f3
  %147 = extractelement <3 x float> %146, i32 1
  %148 = fadd float %145, %147
  %149 = load <3 x float>* %f3
  %150 = extractelement <3 x float> %149, i32 2
  %151 = fadd float %148, %150
  %152 = load <4 x float>* %f4
  %153 = extractelement <4 x float> %152, i32 0
  %154 = fadd float %151, %153
  %155 = load <4 x float>* %f4
  %156 = extractelement <4 x float> %155, i32 1
  %157 = fadd float %154, %156
  %158 = load <4 x float>* %f4
  %159 = extractelement <4 x float> %158, i32 2
  %160 = fadd float %157, %159
  %161 = load <4 x float>* %f4
  %162 = extractelement <4 x float> %161, i32 3
  %163 = fadd float %160, %162
  %164 = load <4 x float>* %constructed15
  %165 = insertelement <4 x float> undef, float %163, i32 0
  %166 = insertelement <4 x float> %165, float %163, i32 1
  %167 = insertelement <4 x float> %166, float %163, i32 2
  %ternary16 = insertelement <4 x float> %167, float %163, i32 3
  store <4 x float> %ternary16, <4 x float>* %ternary
  br label %ifmerge

else:                                             ; preds = %entry
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %ternary
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %gl_FragColor = load <4 x float>* %ternary
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17}
!gla.inputs = !{!18, !20, !22, !24, !26, !28, !30, !32}
!gla.outputs = !{!34}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"u_b", i32 12, i1* @u_b_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"i_b", i32 12, i1* @i_b_typeProxy, metadata !2}
!4 = metadata !{metadata !"u_b2", i32 12, <2 x i1>* @u_b2_typeProxy, metadata !2}
!5 = metadata !{metadata !"i_b2", i32 12, <2 x i1>* @i_b2_typeProxy, metadata !2}
!6 = metadata !{metadata !"u_b3", i32 12, <3 x i1>* @u_b3_typeProxy, metadata !2}
!7 = metadata !{metadata !"i_b3", i32 12, <3 x i1>* @i_b3_typeProxy, metadata !2}
!8 = metadata !{metadata !"u_b4", i32 12, <4 x i1>* @u_b4_typeProxy, metadata !2}
!9 = metadata !{metadata !"i_b4", i32 12, <4 x i1>* @i_b4_typeProxy, metadata !2}
!10 = metadata !{metadata !"u_i", i32 12, i32* @u_i_typeProxy, metadata !2}
!11 = metadata !{metadata !"u_i2", i32 12, <2 x i32>* @u_i2_typeProxy, metadata !2}
!12 = metadata !{metadata !"u_i3", i32 12, <3 x i32>* @u_i3_typeProxy, metadata !2}
!13 = metadata !{metadata !"u_i4", i32 12, <4 x i32>* @u_i4_typeProxy, metadata !2}
!14 = metadata !{metadata !"u_f", i32 12, float* @u_f_typeProxy, metadata !2}
!15 = metadata !{metadata !"u_f2", i32 12, <2 x float>* @u_f2_typeProxy, metadata !2}
!16 = metadata !{metadata !"u_f3", i32 12, <3 x float>* @u_f3_typeProxy, metadata !2}
!17 = metadata !{metadata !"u_f4", i32 12, <4 x float>* @u_f4_typeProxy, metadata !2}
!18 = metadata !{metadata !"i_i", i32 1, i32* @i_i_typeProxy, metadata !19}
!19 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!20 = metadata !{metadata !"i_i2", i32 1, <2 x i32>* @i_i2_typeProxy, metadata !21}
!21 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!22 = metadata !{metadata !"i_i3", i32 1, <3 x i32>* @i_i3_typeProxy, metadata !23}
!23 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!24 = metadata !{metadata !"i_i4", i32 1, <4 x i32>* @i_i4_typeProxy, metadata !25}
!25 = metadata !{i32 0, i32 0, i32 1027, null, i32 0}
!26 = metadata !{metadata !"i_f", i32 1, float* @i_f_typeProxy, metadata !27}
!27 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!28 = metadata !{metadata !"i_f2", i32 1, <2 x float>* @i_f2_typeProxy, metadata !29}
!29 = metadata !{i32 0, i32 0, i32 1029, null, i32 1}
!30 = metadata !{metadata !"i_f3", i32 1, <3 x float>* @i_f3_typeProxy, metadata !31}
!31 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!32 = metadata !{metadata !"i_f4", i32 1, <4 x float>* @i_f4_typeProxy, metadata !33}
!33 = metadata !{i32 0, i32 0, i32 1031, null, i32 1}
!34 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !35}
!35 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@u_b = external addrspace(2) constant i1
@i_b = external addrspace(2) constant i1
@u_b2 = external addrspace(2) constant <2 x i1>
@i_b2 = external addrspace(2) constant <2 x i1>
@u_b3 = external addrspace(2) constant <3 x i1>
@i_b3 = external addrspace(2) constant <3 x i1>
@u_b4 = external addrspace(2) constant <4 x i1>
@i_b4 = external addrspace(2) constant <4 x i1>
@u_i = external addrspace(2) constant i32
@i_i = global i32 0
@u_i2 = external addrspace(2) constant <2 x i32>
@i_i2 = global <2 x i32> zeroinitializer
@u_i3 = external addrspace(2) constant <3 x i32>
@i_i3 = global <3 x i32> zeroinitializer
@u_i4 = external addrspace(2) constant <4 x i32>
@i_i4 = global <4 x i32> zeroinitializer
@u_f = external addrspace(2) constant float
@i_f = global float 0.000000e+00
@u_f2 = external addrspace(2) constant <2 x float>
@i_f2 = global <2 x float> zeroinitializer
@u_f3 = external addrspace(2) constant <3 x float>
@i_f3 = global <3 x float> zeroinitializer
@u_f4 = external addrspace(2) constant <4 x float>
@i_f4 = global <4 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load i1 addrspace(2)* @u_b, align 1, !gla.uniform !1
  %1 = load i1 addrspace(2)* @i_b, align 1, !gla.uniform !3
  %b1 = and i1 %0, %1
  %2 = load <2 x i1> addrspace(2)* @u_b2, align 2, !gla.uniform !4
  %3 = extractelement <2 x i1> %2, i32 0
  %4 = load <2 x i1> addrspace(2)* @i_b2, align 2, !gla.uniform !5
  %5 = extractelement <2 x i1> %4, i32 0
  %6 = and i1 %3, %5
  %7 = extractelement <2 x i1> %2, i32 1
  %8 = and i1 %6, %7
  %9 = extractelement <2 x i1> %4, i32 1
  %10 = and i1 %8, %9
  %11 = load <3 x i1> addrspace(2)* @u_b3, align 4, !gla.uniform !6
  %12 = extractelement <3 x i1> %11, i32 0
  %13 = load <3 x i1> addrspace(2)* @i_b3, align 4, !gla.uniform !7
  %14 = extractelement <3 x i1> %13, i32 0
  %15 = and i1 %12, %14
  %16 = extractelement <3 x i1> %11, i32 1
  %17 = and i1 %15, %16
  %18 = extractelement <3 x i1> %13, i32 1
  %19 = and i1 %17, %18
  %20 = extractelement <3 x i1> %11, i32 2
  %21 = and i1 %19, %20
  %22 = extractelement <3 x i1> %13, i32 2
  %23 = and i1 %21, %22
  %24 = load <4 x i1> addrspace(2)* @u_b4, align 4, !gla.uniform !8
  %25 = extractelement <4 x i1> %24, i32 0
  %26 = load <4 x i1> addrspace(2)* @i_b4, align 4, !gla.uniform !9
  %27 = extractelement <4 x i1> %26, i32 0
  %28 = and i1 %25, %27
  %29 = extractelement <4 x i1> %24, i32 1
  %30 = and i1 %28, %29
  %31 = extractelement <4 x i1> %26, i32 1
  %32 = and i1 %30, %31
  %33 = extractelement <4 x i1> %24, i32 2
  %34 = and i1 %32, %33
  %35 = extractelement <4 x i1> %26, i32 2
  %36 = and i1 %34, %35
  %37 = extractelement <4 x i1> %24, i32 3
  %38 = and i1 %36, %37
  %39 = extractelement <4 x i1> %26, i32 3
  %40 = and i1 %38, %39
  %41 = load <2 x i32> addrspace(2)* @u_i2, align 8, !gla.uniform !11
  %42 = load <2 x i32>* @i_i2, align 8
  %i28 = add <2 x i32> %41, %42
  %43 = load <3 x i32> addrspace(2)* @u_i3, align 16, !gla.uniform !12
  %44 = load <3 x i32>* @i_i3, align 16
  %i39 = add <3 x i32> %43, %44
  %45 = load <4 x i32> addrspace(2)* @u_i4, align 16, !gla.uniform !13
  %46 = load <4 x i32>* @i_i4, align 16
  %i410 = add <4 x i32> %45, %46
  %47 = load <2 x float> addrspace(2)* @u_f2, align 8, !gla.uniform !15
  %48 = load <2 x float>* @i_f2, align 8
  %f212 = fadd <2 x float> %47, %48
  %49 = load <3 x float> addrspace(2)* @u_f3, align 16, !gla.uniform !16
  %50 = load <3 x float>* @i_f3, align 16
  %f313 = fadd <3 x float> %49, %50
  %51 = load <4 x float> addrspace(2)* @u_f4, align 16, !gla.uniform !17
  %52 = load <4 x float>* @i_f4, align 16
  %f414 = fadd <4 x float> %51, %52
  %53 = or i1 %b1, %10
  %54 = or i1 %53, %23
  %55 = or i1 %54, %40
  br i1 %55, label %then, label %else

then:                                             ; preds = %entry
  %56 = load float* @i_f, align 4
  %57 = load float addrspace(2)* @u_f, align 4, !gla.uniform !14
  %58 = load i32* @i_i, align 4
  %59 = load i32 addrspace(2)* @u_i, align 4, !gla.uniform !10
  %f11 = fadd float %56, %57
  %60 = extractelement <2 x i32> %i28, i32 0
  %61 = extractelement <2 x i32> %i28, i32 1
  %62 = extractelement <3 x i32> %i39, i32 0
  %63 = extractelement <3 x i32> %i39, i32 1
  %64 = extractelement <3 x i32> %i39, i32 2
  %65 = extractelement <4 x i32> %i410, i32 0
  %66 = extractelement <4 x i32> %i410, i32 1
  %67 = extractelement <4 x i32> %i410, i32 2
  %68 = extractelement <4 x i32> %i410, i32 3
  %i7 = add i32 %61, %60
  %69 = add i32 %i7, %62
  %70 = add i32 %69, %63
  %71 = add i32 %70, %64
  %72 = add i32 %71, %65
  %73 = add i32 %72, %66
  %74 = add i32 %73, %67
  %75 = add i32 %74, %68
  %76 = add i32 %75, %58
  %77 = add i32 %76, %59
  %78 = sitofp i32 %77 to float
  %79 = fadd float %f11, %78
  %80 = extractelement <2 x float> %f212, i32 0
  %81 = fadd float %80, %79
  %82 = extractelement <2 x float> %f212, i32 1
  %83 = fadd float %82, %81
  %84 = extractelement <3 x float> %f313, i32 0
  %85 = fadd float %84, %83
  %86 = extractelement <3 x float> %f313, i32 1
  %87 = fadd float %86, %85
  %88 = extractelement <3 x float> %f313, i32 2
  %89 = fadd float %88, %87
  %90 = extractelement <4 x float> %f414, i32 0
  %91 = fadd float %90, %89
  %92 = extractelement <4 x float> %f414, i32 1
  %93 = fadd float %92, %91
  %94 = extractelement <4 x float> %f414, i32 2
  %95 = fadd float %94, %93
  %96 = extractelement <4 x float> %f414, i32 3
  %97 = fadd float %96, %95
  %98 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %97, <4 x i32> zeroinitializer)
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %ternary.0 = phi <4 x float> [ %98, %then ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %else ]
  store <4 x float> %ternary.0, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17}
!gla.inputs = !{!18, !20, !22, !24, !26, !28, !30, !32}
!gla.outputs = !{!34}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"u_b", i32 12, i1* @u_b_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"i_b", i32 12, i1* @i_b_typeProxy, metadata !2}
!4 = metadata !{metadata !"u_b2", i32 12, <2 x i1>* @u_b2_typeProxy, metadata !2}
!5 = metadata !{metadata !"i_b2", i32 12, <2 x i1>* @i_b2_typeProxy, metadata !2}
!6 = metadata !{metadata !"u_b3", i32 12, <3 x i1>* @u_b3_typeProxy, metadata !2}
!7 = metadata !{metadata !"i_b3", i32 12, <3 x i1>* @i_b3_typeProxy, metadata !2}
!8 = metadata !{metadata !"u_b4", i32 12, <4 x i1>* @u_b4_typeProxy, metadata !2}
!9 = metadata !{metadata !"i_b4", i32 12, <4 x i1>* @i_b4_typeProxy, metadata !2}
!10 = metadata !{metadata !"u_i", i32 12, i32* @u_i_typeProxy, metadata !2}
!11 = metadata !{metadata !"u_i2", i32 12, <2 x i32>* @u_i2_typeProxy, metadata !2}
!12 = metadata !{metadata !"u_i3", i32 12, <3 x i32>* @u_i3_typeProxy, metadata !2}
!13 = metadata !{metadata !"u_i4", i32 12, <4 x i32>* @u_i4_typeProxy, metadata !2}
!14 = metadata !{metadata !"u_f", i32 12, float* @u_f_typeProxy, metadata !2}
!15 = metadata !{metadata !"u_f2", i32 12, <2 x float>* @u_f2_typeProxy, metadata !2}
!16 = metadata !{metadata !"u_f3", i32 12, <3 x float>* @u_f3_typeProxy, metadata !2}
!17 = metadata !{metadata !"u_f4", i32 12, <4 x float>* @u_f4_typeProxy, metadata !2}
!18 = metadata !{metadata !"i_i", i32 1, i32* @i_i_typeProxy, metadata !19}
!19 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!20 = metadata !{metadata !"i_i2", i32 1, <2 x i32>* @i_i2_typeProxy, metadata !21}
!21 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!22 = metadata !{metadata !"i_i3", i32 1, <3 x i32>* @i_i3_typeProxy, metadata !23}
!23 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!24 = metadata !{metadata !"i_i4", i32 1, <4 x i32>* @i_i4_typeProxy, metadata !25}
!25 = metadata !{i32 0, i32 0, i32 1027, null, i32 0}
!26 = metadata !{metadata !"i_f", i32 1, float* @i_f_typeProxy, metadata !27}
!27 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!28 = metadata !{metadata !"i_f2", i32 1, <2 x float>* @i_f2_typeProxy, metadata !29}
!29 = metadata !{i32 0, i32 0, i32 1029, null, i32 1}
!30 = metadata !{metadata !"i_f3", i32 1, <3 x float>* @i_f3_typeProxy, metadata !31}
!31 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!32 = metadata !{metadata !"i_f4", i32 1, <4 x float>* @i_f4_typeProxy, metadata !33}
!33 = metadata !{i32 0, i32 0, i32 1031, null, i32 1}
!34 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !35}
!35 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}
#version 130
// LunarGOO output
uniform bool u_b;
uniform bool i_b;
uniform bvec2 u_b2;
uniform bvec2 i_b2;
uniform bvec3 u_b3;
uniform bvec3 i_b3;
uniform bvec4 u_b4;
uniform bvec4 i_b4;
uniform int u_i;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform float u_f;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
flat in int i_i;
flat in ivec2 i_i2;
flat in ivec3 i_i3;
flat in ivec4 i_i4;
in float i_f;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
const vec4 C_vec4p1d0p = vec4(1.0);

void main()
{
	vec4 ternary_uc1;
	ivec2 H_ireo8q = i_i2 + u_i2;
	ivec3 H_00u6vn1 = i_i3 + u_i3;
	ivec4 H_2vbjw71 = i_i4 + u_i4;
	vec2 H_0n1dm61 = i_f2 + u_f2;
	vec3 H_ihj3yc = i_f3 + u_f3;
	vec4 H_o7wyx6 = i_f4 + u_f4;
	bool H_j11jmm1 = ((u_b && i_b) || (((u_b2.x && i_b2.x) && u_b2.y) && i_b2.y)) || (((((u_b3.x && i_b3.x) && u_b3.y) && i_b3.y) && u_b3.z) && i_b3.z);
	if ((H_j11jmm1 || (((((((u_b4.x && i_b4.x) && u_b4.y) && i_b4.y) && u_b4.z) && i_b4.z) && u_b4.w) && i_b4.w))) {
		int H_l01rff = (((((((H_ireo8q.x + H_ireo8q.y) + H_00u6vn1.x) + H_00u6vn1.y) + H_00u6vn1.z) + H_2vbjw71.x) + H_2vbjw71.y) + H_2vbjw71.z) + H_2vbjw71.w;
		float H_hr7sv81 = ((((((float(((H_l01rff + i_i) + u_i))) + (i_f + u_f)) + H_0n1dm61.x) + H_0n1dm61.y) + H_ihj3yc.x) + H_ihj3yc.y) + H_ihj3yc.z;
		ternary_uc1 = vec4(((((H_hr7sv81 + H_o7wyx6.x) + H_o7wyx6.y) + H_o7wyx6.z) + H_o7wyx6.w));
	} else {
		ternary_uc1 = C_vec4p1d0p;
	}
	
	gl_FragColor = ternary_uc1;
	
}

#version 130
// LunarGOO output
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
uniform bool u_b;
uniform bool i_b;
uniform bvec2 u_b2;
uniform bvec2 i_b2;
uniform bvec3 u_b3;
uniform bvec3 i_b3;
uniform bvec4 u_b4;
uniform bvec4 i_b4;
uniform int u_i;
uniform float u_f;
flat in ivec2 i_i2;
flat in ivec3 i_i3;
flat in ivec4 i_i4;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
flat in int i_i;
in float i_f;
const vec4 C_vec4p1d0p = vec4(1.0);

void main()
{
	vec4 ternary_uc_c1;
	ivec2 H_ireo_c2 = i_i2 + u_i2;
	ivec3 H_uc3 = i_i3 + u_i3;
	ivec4 H_uc4 = i_i4 + u_i4;
	vec2 H_uc5 = i_f2 + u_f2;
	vec3 H_ihj_c6 = i_f3 + u_f3;
	vec4 H_o_c7 = i_f4 + u_f4;
	bool H_j_c8 = ((u_b && i_b) || (((u_b2.x && i_b2.x) && u_b2.y) && i_b2.y)) || (((((u_b3.x && i_b3.x) && u_b3.y) && i_b3.y) && u_b3.z) && i_b3.z);
	if ((H_j_c8 || (((((((u_b4.x && i_b4.x) && u_b4.y) && i_b4.y) && u_b4.z) && i_b4.z) && u_b4.w) && i_b4.w))) {
		int H_mr34n4 = (((((((((H_ireo_c2.x + H_ireo_c2.y) + H_uc3.x) + H_uc3.y) + H_uc3.z) + H_uc4.x) + H_uc4.y) + H_uc4.z) + H_uc4.w) + i_i) + u_i;
		float H_s8p64i1 = ((((((((float(H_mr34n4)) + (i_f + u_f)) + H_uc5.x) + H_uc5.y) + H_ihj_c6.x) + H_ihj_c6.y) + H_ihj_c6.z) + H_o_c7.x) + H_o_c7.y;
		ternary_uc_c1 = vec4(((H_o_c7.z + H_s8p64i1) + H_o_c7.w));
	} else {
		ternary_uc_c1 = C_vec4p1d0p;
	}
	
	gl_FragColor = ternary_uc_c1;
	
}

