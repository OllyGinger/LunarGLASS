
Top IR:
; ModuleID = 'Glslang'

@v_shadow = internal global <4 x float> zeroinitializer
@u_shadow = internal global <3 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer
@Color_shadow = internal global <3 x float> zeroinitializer
@un34 = external addrspace(2) constant [3 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <3 x float>]
@um4 = external addrspace(2) constant [4 x <4 x float>]
@um2 = external addrspace(2) constant [2 x <2 x float>]
@um3 = external addrspace(2) constant [3 x <3 x float>]
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %constructed648 = alloca <4 x float>
  %0 = alloca <3 x float>
  %1 = alloca [3 x <4 x float>]
  %2 = alloca <4 x float>
  %3 = alloca [4 x <4 x float>]
  %inv4 = alloca [4 x <4 x float>]
  %constructed578 = alloca <4 x float>
  %4 = alloca [3 x <3 x float>]
  %inv3 = alloca [3 x <3 x float>]
  %constructed549 = alloca <4 x float>
  %5 = alloca [2 x <2 x float>]
  %inv = alloca [2 x <2 x float>]
  %constructed533 = alloca <4 x float>
  %constructed511 = alloca <4 x float>
  %6 = alloca <3 x float>
  %7 = alloca [3 x <4 x float>]
  %8 = alloca <4 x float>
  %9 = alloca [4 x <4 x float>]
  %10 = alloca <4 x float>
  %11 = alloca [4 x <4 x float>]
  %12 = alloca [4 x <4 x float>]
  %13 = alloca <4 x float>
  %14 = alloca [4 x <4 x float>]
  %constructed67 = alloca [4 x <4 x float>]
  %m44 = alloca [4 x <4 x float>]
  %15 = alloca [3 x <4 x float>]
  %constructed49 = alloca <4 x float>
  %16 = alloca <3 x float>
  %constructed = alloca <4 x float>
  %17 = alloca [3 x <4 x float>]
  %18 = alloca <4 x float>
  %19 = alloca [3 x <4 x float>]
  %m34 = alloca [3 x <4 x float>]
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %v, <4 x float>* @v_shadow
  %20 = load <4 x float>* @v_shadow
  %u = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !3
  store <3 x float> %u, <3 x float>* @u_shadow
  %21 = load <3 x float>* @u_shadow
  %22 = load [3 x <4 x float>]* %19
  %23 = load <4 x float>* %18
  %rightComp = extractelement <3 x float> %21, i32 0
  %leftComp = extractelement <4 x float> %20, i32 0
  %element = fmul float %leftComp, %rightComp
  %column = insertelement <4 x float> %23, float %element, i32 0
  %leftComp1 = extractelement <4 x float> %20, i32 1
  %element2 = fmul float %leftComp1, %rightComp
  %column3 = insertelement <4 x float> %column, float %element2, i32 1
  %leftComp4 = extractelement <4 x float> %20, i32 2
  %element5 = fmul float %leftComp4, %rightComp
  %column6 = insertelement <4 x float> %column3, float %element5, i32 2
  %leftComp7 = extractelement <4 x float> %20, i32 3
  %element8 = fmul float %leftComp7, %rightComp
  %column9 = insertelement <4 x float> %column6, float %element8, i32 3
  %matrix = insertvalue [3 x <4 x float>] %22, <4 x float> %column9, 0
  %rightComp10 = extractelement <3 x float> %21, i32 1
  %leftComp11 = extractelement <4 x float> %20, i32 0
  %element12 = fmul float %leftComp11, %rightComp10
  %column13 = insertelement <4 x float> %column9, float %element12, i32 0
  %leftComp14 = extractelement <4 x float> %20, i32 1
  %element15 = fmul float %leftComp14, %rightComp10
  %column16 = insertelement <4 x float> %column13, float %element15, i32 1
  %leftComp17 = extractelement <4 x float> %20, i32 2
  %element18 = fmul float %leftComp17, %rightComp10
  %column19 = insertelement <4 x float> %column16, float %element18, i32 2
  %leftComp20 = extractelement <4 x float> %20, i32 3
  %element21 = fmul float %leftComp20, %rightComp10
  %column22 = insertelement <4 x float> %column19, float %element21, i32 3
  %matrix23 = insertvalue [3 x <4 x float>] %matrix, <4 x float> %column22, 1
  %rightComp24 = extractelement <3 x float> %21, i32 2
  %leftComp25 = extractelement <4 x float> %20, i32 0
  %element26 = fmul float %leftComp25, %rightComp24
  %column27 = insertelement <4 x float> %column22, float %element26, i32 0
  %leftComp28 = extractelement <4 x float> %20, i32 1
  %element29 = fmul float %leftComp28, %rightComp24
  %column30 = insertelement <4 x float> %column27, float %element29, i32 1
  %leftComp31 = extractelement <4 x float> %20, i32 2
  %element32 = fmul float %leftComp31, %rightComp24
  %column33 = insertelement <4 x float> %column30, float %element32, i32 2
  %leftComp34 = extractelement <4 x float> %20, i32 3
  %element35 = fmul float %leftComp34, %rightComp24
  %column36 = insertelement <4 x float> %column33, float %element35, i32 3
  %matrix37 = insertvalue [3 x <4 x float>] %matrix23, <4 x float> %column36, 2
  store [3 x <4 x float>] %matrix37, [3 x <4 x float>]* %m34
  %24 = load [3 x <4 x float>]* %m34
  %25 = load [3 x <4 x float>]* %17
  %leftColumn = extractvalue [3 x <4 x float>] %24, 0
  %column38 = fadd <4 x float> %leftColumn, <float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %26 = insertvalue [3 x <4 x float>] %25, <4 x float> %column38, 0
  %leftColumn39 = extractvalue [3 x <4 x float>] %24, 1
  %column40 = fadd <4 x float> %leftColumn39, <float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00>
  %27 = insertvalue [3 x <4 x float>] %26, <4 x float> %column40, 1
  %leftColumn41 = extractvalue [3 x <4 x float>] %24, 2
  %column42 = fadd <4 x float> %leftColumn41, <float 0.000000e+00, float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00>
  %m3443 = insertvalue [3 x <4 x float>] %27, <4 x float> %column42, 2
  store [3 x <4 x float>] %m3443, [3 x <4 x float>]* %m34
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1027, i32 -1, i32 1), !gla.input !5
  store <3 x float> %Color, <3 x float>* @Color_shadow
  %28 = load <3 x float>* @Color_shadow
  %29 = load <4 x float>* %constructed
  %30 = extractelement <3 x float> %28, i32 0
  %31 = insertelement <4 x float> %29, float %30, i32 0
  %32 = extractelement <3 x float> %28, i32 1
  %33 = insertelement <4 x float> %31, float %32, i32 1
  %34 = extractelement <3 x float> %28, i32 2
  %35 = insertelement <4 x float> %33, float %34, i32 2
  %FragColor_shadow = insertelement <4 x float> %35, float 1.000000e+00, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  %36 = load <4 x float>* @FragColor_shadow
  %37 = load [3 x <4 x float>]* %m34
  %38 = load <3 x float>* %16
  %column44 = extractvalue [3 x <4 x float>] %37, 0
  %dotres = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %36, <4 x float> %column44)
  %39 = insertelement <3 x float> %38, float %dotres, i32 0
  %column45 = extractvalue [3 x <4 x float>] %37, 1
  %dotres46 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %36, <4 x float> %column45)
  %40 = insertelement <3 x float> %39, float %dotres46, i32 1
  %column47 = extractvalue [3 x <4 x float>] %37, 2
  %dotres48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %36, <4 x float> %column47)
  %41 = insertelement <3 x float> %40, float %dotres48, i32 2
  %42 = load <4 x float>* %constructed49
  %43 = extractelement <3 x float> %41, i32 0
  %44 = insertelement <4 x float> %42, float %43, i32 0
  %45 = extractelement <3 x float> %41, i32 1
  %46 = insertelement <4 x float> %44, float %45, i32 1
  %47 = extractelement <3 x float> %41, i32 2
  %48 = insertelement <4 x float> %46, float %47, i32 2
  %49 = insertelement <4 x float> %48, float 1.000000e+00, i32 3
  %50 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow50 = fmul <4 x float> %50, %49
  store <4 x float> %FragColor_shadow50, <4 x float>* @FragColor_shadow
  %v51 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %v51, <4 x float>* @v_shadow
  %51 = load <4 x float>* @v_shadow
  %52 = extractelement <4 x float> %51, i32 0
  %53 = load [3 x <4 x float>]* %m34
  %54 = load [3 x <4 x float>]* %15
  %column52 = extractvalue [3 x <4 x float>] %53, 0
  %row = extractelement <4 x float> %column52, i32 0
  %55 = fmul float %52, %row
  %56 = insertelement <4 x float> %column52, float %55, i32 0
  %row53 = extractelement <4 x float> %56, i32 1
  %57 = fmul float %52, %row53
  %58 = insertelement <4 x float> %56, float %57, i32 1
  %row54 = extractelement <4 x float> %58, i32 2
  %59 = fmul float %52, %row54
  %60 = insertelement <4 x float> %58, float %59, i32 2
  %row55 = extractelement <4 x float> %60, i32 3
  %61 = fmul float %52, %row55
  %62 = insertelement <4 x float> %60, float %61, i32 3
  %63 = insertvalue [3 x <4 x float>] %54, <4 x float> %62, 0
  %column56 = extractvalue [3 x <4 x float>] %53, 1
  %row57 = extractelement <4 x float> %column56, i32 0
  %64 = fmul float %52, %row57
  %65 = insertelement <4 x float> %column56, float %64, i32 0
  %row58 = extractelement <4 x float> %65, i32 1
  %66 = fmul float %52, %row58
  %67 = insertelement <4 x float> %65, float %66, i32 1
  %row59 = extractelement <4 x float> %67, i32 2
  %68 = fmul float %52, %row59
  %69 = insertelement <4 x float> %67, float %68, i32 2
  %row60 = extractelement <4 x float> %69, i32 3
  %70 = fmul float %52, %row60
  %71 = insertelement <4 x float> %69, float %70, i32 3
  %72 = insertvalue [3 x <4 x float>] %63, <4 x float> %71, 1
  %column61 = extractvalue [3 x <4 x float>] %53, 2
  %row62 = extractelement <4 x float> %column61, i32 0
  %73 = fmul float %52, %row62
  %74 = insertelement <4 x float> %column61, float %73, i32 0
  %row63 = extractelement <4 x float> %74, i32 1
  %75 = fmul float %52, %row63
  %76 = insertelement <4 x float> %74, float %75, i32 1
  %row64 = extractelement <4 x float> %76, i32 2
  %77 = fmul float %52, %row64
  %78 = insertelement <4 x float> %76, float %77, i32 2
  %row65 = extractelement <4 x float> %78, i32 3
  %79 = fmul float %52, %row65
  %80 = insertelement <4 x float> %78, float %79, i32 3
  %m3466 = insertvalue [3 x <4 x float>] %72, <4 x float> %80, 2
  store [3 x <4 x float>] %m3466, [3 x <4 x float>]* %m34
  %81 = load [3 x <4 x float>] addrspace(2)* @un34, !gla.uniform !9
  %82 = load [4 x <4 x float>]* %constructed67
  %column68 = extractvalue [3 x <4 x float>] %81, 0
  %element69 = extractelement <4 x float> %column68, i32 0
  %element70 = extractelement <4 x float> %column68, i32 1
  %element71 = extractelement <4 x float> %column68, i32 2
  %element72 = extractelement <4 x float> %column68, i32 3
  %column73 = extractvalue [3 x <4 x float>] %81, 1
  %element74 = extractelement <4 x float> %column73, i32 0
  %element75 = extractelement <4 x float> %column73, i32 1
  %element76 = extractelement <4 x float> %column73, i32 2
  %element77 = extractelement <4 x float> %column73, i32 3
  %column78 = extractvalue [3 x <4 x float>] %81, 2
  %element79 = extractelement <4 x float> %column78, i32 0
  %element80 = extractelement <4 x float> %column78, i32 1
  %element81 = extractelement <4 x float> %column78, i32 2
  %element82 = extractelement <4 x float> %column78, i32 3
  %column83 = extractvalue [4 x <4 x float>] %82, 0
  %column84 = insertelement <4 x float> %column83, float %element69, i32 0
  %column85 = insertelement <4 x float> %column84, float %element70, i32 1
  %column86 = insertelement <4 x float> %column85, float %element71, i32 2
  %column87 = insertelement <4 x float> %column86, float %element72, i32 3
  %matrix88 = insertvalue [4 x <4 x float>] %82, <4 x float> %column87, 0
  %column89 = extractvalue [4 x <4 x float>] %82, 1
  %column90 = insertelement <4 x float> %column89, float %element74, i32 0
  %column91 = insertelement <4 x float> %column90, float %element75, i32 1
  %column92 = insertelement <4 x float> %column91, float %element76, i32 2
  %column93 = insertelement <4 x float> %column92, float %element77, i32 3
  %matrix94 = insertvalue [4 x <4 x float>] %matrix88, <4 x float> %column93, 1
  %column95 = extractvalue [4 x <4 x float>] %82, 2
  %column96 = insertelement <4 x float> %column95, float %element79, i32 0
  %column97 = insertelement <4 x float> %column96, float %element80, i32 1
  %column98 = insertelement <4 x float> %column97, float %element81, i32 2
  %column99 = insertelement <4 x float> %column98, float %element82, i32 3
  %matrix100 = insertvalue [4 x <4 x float>] %matrix94, <4 x float> %column99, 2
  %column101 = extractvalue [4 x <4 x float>] %82, 3
  %column102 = insertelement <4 x float> %column101, float 0.000000e+00, i32 0
  %column103 = insertelement <4 x float> %column102, float 0.000000e+00, i32 1
  %column104 = insertelement <4 x float> %column103, float 0.000000e+00, i32 2
  %column105 = insertelement <4 x float> %column104, float 1.000000e+00, i32 3
  %matrix106 = insertvalue [4 x <4 x float>] %matrix100, <4 x float> %column105, 3
  store [4 x <4 x float>] %matrix106, [4 x <4 x float>]* %m44
  %83 = load [3 x <4 x float>]* %m34
  %84 = load [4 x <3 x float>] addrspace(2)* @um43, !gla.uniform !11
  %resultMatrix = load [4 x <4 x float>]* %14
  %tempColumn = load <4 x float>* %13
  %rightColumn = extractvalue [4 x <3 x float>] %84, 0
  %leftColumn107 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp108 = extractelement <4 x float> %leftColumn107, i32 0
  %rightComp109 = extractelement <3 x float> %rightColumn, i32 0
  %product = fmul float %leftComp108, %rightComp109
  %leftColumn110 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp111 = extractelement <4 x float> %leftColumn110, i32 0
  %rightComp112 = extractelement <3 x float> %rightColumn, i32 1
  %product113 = fmul float %leftComp111, %rightComp112
  %dotProduct = fadd float %product, %product113
  %leftColumn114 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp115 = extractelement <4 x float> %leftColumn114, i32 0
  %rightComp116 = extractelement <3 x float> %rightColumn, i32 2
  %product117 = fmul float %leftComp115, %rightComp116
  %dotProduct118 = fadd float %dotProduct, %product117
  %column119 = insertelement <4 x float> %tempColumn, float %dotProduct118, i32 0
  %leftColumn120 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp121 = extractelement <4 x float> %leftColumn120, i32 1
  %rightComp122 = extractelement <3 x float> %rightColumn, i32 0
  %product123 = fmul float %leftComp121, %rightComp122
  %leftColumn124 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp125 = extractelement <4 x float> %leftColumn124, i32 1
  %rightComp126 = extractelement <3 x float> %rightColumn, i32 1
  %product127 = fmul float %leftComp125, %rightComp126
  %dotProduct128 = fadd float %product123, %product127
  %leftColumn129 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp130 = extractelement <4 x float> %leftColumn129, i32 1
  %rightComp131 = extractelement <3 x float> %rightColumn, i32 2
  %product132 = fmul float %leftComp130, %rightComp131
  %dotProduct133 = fadd float %dotProduct128, %product132
  %column134 = insertelement <4 x float> %column119, float %dotProduct133, i32 1
  %leftColumn135 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp136 = extractelement <4 x float> %leftColumn135, i32 2
  %rightComp137 = extractelement <3 x float> %rightColumn, i32 0
  %product138 = fmul float %leftComp136, %rightComp137
  %leftColumn139 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp140 = extractelement <4 x float> %leftColumn139, i32 2
  %rightComp141 = extractelement <3 x float> %rightColumn, i32 1
  %product142 = fmul float %leftComp140, %rightComp141
  %dotProduct143 = fadd float %product138, %product142
  %leftColumn144 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp145 = extractelement <4 x float> %leftColumn144, i32 2
  %rightComp146 = extractelement <3 x float> %rightColumn, i32 2
  %product147 = fmul float %leftComp145, %rightComp146
  %dotProduct148 = fadd float %dotProduct143, %product147
  %column149 = insertelement <4 x float> %column134, float %dotProduct148, i32 2
  %leftColumn150 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp151 = extractelement <4 x float> %leftColumn150, i32 3
  %rightComp152 = extractelement <3 x float> %rightColumn, i32 0
  %product153 = fmul float %leftComp151, %rightComp152
  %leftColumn154 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp155 = extractelement <4 x float> %leftColumn154, i32 3
  %rightComp156 = extractelement <3 x float> %rightColumn, i32 1
  %product157 = fmul float %leftComp155, %rightComp156
  %dotProduct158 = fadd float %product153, %product157
  %leftColumn159 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp160 = extractelement <4 x float> %leftColumn159, i32 3
  %rightComp161 = extractelement <3 x float> %rightColumn, i32 2
  %product162 = fmul float %leftComp160, %rightComp161
  %dotProduct163 = fadd float %dotProduct158, %product162
  %column164 = insertelement <4 x float> %column149, float %dotProduct163, i32 3
  %resultMatrix165 = insertvalue [4 x <4 x float>] %resultMatrix, <4 x float> %column164, 0
  %rightColumn166 = extractvalue [4 x <3 x float>] %84, 1
  %leftColumn167 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp168 = extractelement <4 x float> %leftColumn167, i32 0
  %rightComp169 = extractelement <3 x float> %rightColumn166, i32 0
  %product170 = fmul float %leftComp168, %rightComp169
  %leftColumn171 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp172 = extractelement <4 x float> %leftColumn171, i32 0
  %rightComp173 = extractelement <3 x float> %rightColumn166, i32 1
  %product174 = fmul float %leftComp172, %rightComp173
  %dotProduct175 = fadd float %product170, %product174
  %leftColumn176 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp177 = extractelement <4 x float> %leftColumn176, i32 0
  %rightComp178 = extractelement <3 x float> %rightColumn166, i32 2
  %product179 = fmul float %leftComp177, %rightComp178
  %dotProduct180 = fadd float %dotProduct175, %product179
  %column181 = insertelement <4 x float> %column164, float %dotProduct180, i32 0
  %leftColumn182 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp183 = extractelement <4 x float> %leftColumn182, i32 1
  %rightComp184 = extractelement <3 x float> %rightColumn166, i32 0
  %product185 = fmul float %leftComp183, %rightComp184
  %leftColumn186 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp187 = extractelement <4 x float> %leftColumn186, i32 1
  %rightComp188 = extractelement <3 x float> %rightColumn166, i32 1
  %product189 = fmul float %leftComp187, %rightComp188
  %dotProduct190 = fadd float %product185, %product189
  %leftColumn191 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp192 = extractelement <4 x float> %leftColumn191, i32 1
  %rightComp193 = extractelement <3 x float> %rightColumn166, i32 2
  %product194 = fmul float %leftComp192, %rightComp193
  %dotProduct195 = fadd float %dotProduct190, %product194
  %column196 = insertelement <4 x float> %column181, float %dotProduct195, i32 1
  %leftColumn197 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp198 = extractelement <4 x float> %leftColumn197, i32 2
  %rightComp199 = extractelement <3 x float> %rightColumn166, i32 0
  %product200 = fmul float %leftComp198, %rightComp199
  %leftColumn201 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp202 = extractelement <4 x float> %leftColumn201, i32 2
  %rightComp203 = extractelement <3 x float> %rightColumn166, i32 1
  %product204 = fmul float %leftComp202, %rightComp203
  %dotProduct205 = fadd float %product200, %product204
  %leftColumn206 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp207 = extractelement <4 x float> %leftColumn206, i32 2
  %rightComp208 = extractelement <3 x float> %rightColumn166, i32 2
  %product209 = fmul float %leftComp207, %rightComp208
  %dotProduct210 = fadd float %dotProduct205, %product209
  %column211 = insertelement <4 x float> %column196, float %dotProduct210, i32 2
  %leftColumn212 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp213 = extractelement <4 x float> %leftColumn212, i32 3
  %rightComp214 = extractelement <3 x float> %rightColumn166, i32 0
  %product215 = fmul float %leftComp213, %rightComp214
  %leftColumn216 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp217 = extractelement <4 x float> %leftColumn216, i32 3
  %rightComp218 = extractelement <3 x float> %rightColumn166, i32 1
  %product219 = fmul float %leftComp217, %rightComp218
  %dotProduct220 = fadd float %product215, %product219
  %leftColumn221 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp222 = extractelement <4 x float> %leftColumn221, i32 3
  %rightComp223 = extractelement <3 x float> %rightColumn166, i32 2
  %product224 = fmul float %leftComp222, %rightComp223
  %dotProduct225 = fadd float %dotProduct220, %product224
  %column226 = insertelement <4 x float> %column211, float %dotProduct225, i32 3
  %resultMatrix227 = insertvalue [4 x <4 x float>] %resultMatrix165, <4 x float> %column226, 1
  %rightColumn228 = extractvalue [4 x <3 x float>] %84, 2
  %leftColumn229 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp230 = extractelement <4 x float> %leftColumn229, i32 0
  %rightComp231 = extractelement <3 x float> %rightColumn228, i32 0
  %product232 = fmul float %leftComp230, %rightComp231
  %leftColumn233 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp234 = extractelement <4 x float> %leftColumn233, i32 0
  %rightComp235 = extractelement <3 x float> %rightColumn228, i32 1
  %product236 = fmul float %leftComp234, %rightComp235
  %dotProduct237 = fadd float %product232, %product236
  %leftColumn238 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp239 = extractelement <4 x float> %leftColumn238, i32 0
  %rightComp240 = extractelement <3 x float> %rightColumn228, i32 2
  %product241 = fmul float %leftComp239, %rightComp240
  %dotProduct242 = fadd float %dotProduct237, %product241
  %column243 = insertelement <4 x float> %column226, float %dotProduct242, i32 0
  %leftColumn244 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp245 = extractelement <4 x float> %leftColumn244, i32 1
  %rightComp246 = extractelement <3 x float> %rightColumn228, i32 0
  %product247 = fmul float %leftComp245, %rightComp246
  %leftColumn248 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp249 = extractelement <4 x float> %leftColumn248, i32 1
  %rightComp250 = extractelement <3 x float> %rightColumn228, i32 1
  %product251 = fmul float %leftComp249, %rightComp250
  %dotProduct252 = fadd float %product247, %product251
  %leftColumn253 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp254 = extractelement <4 x float> %leftColumn253, i32 1
  %rightComp255 = extractelement <3 x float> %rightColumn228, i32 2
  %product256 = fmul float %leftComp254, %rightComp255
  %dotProduct257 = fadd float %dotProduct252, %product256
  %column258 = insertelement <4 x float> %column243, float %dotProduct257, i32 1
  %leftColumn259 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp260 = extractelement <4 x float> %leftColumn259, i32 2
  %rightComp261 = extractelement <3 x float> %rightColumn228, i32 0
  %product262 = fmul float %leftComp260, %rightComp261
  %leftColumn263 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp264 = extractelement <4 x float> %leftColumn263, i32 2
  %rightComp265 = extractelement <3 x float> %rightColumn228, i32 1
  %product266 = fmul float %leftComp264, %rightComp265
  %dotProduct267 = fadd float %product262, %product266
  %leftColumn268 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp269 = extractelement <4 x float> %leftColumn268, i32 2
  %rightComp270 = extractelement <3 x float> %rightColumn228, i32 2
  %product271 = fmul float %leftComp269, %rightComp270
  %dotProduct272 = fadd float %dotProduct267, %product271
  %column273 = insertelement <4 x float> %column258, float %dotProduct272, i32 2
  %leftColumn274 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp275 = extractelement <4 x float> %leftColumn274, i32 3
  %rightComp276 = extractelement <3 x float> %rightColumn228, i32 0
  %product277 = fmul float %leftComp275, %rightComp276
  %leftColumn278 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp279 = extractelement <4 x float> %leftColumn278, i32 3
  %rightComp280 = extractelement <3 x float> %rightColumn228, i32 1
  %product281 = fmul float %leftComp279, %rightComp280
  %dotProduct282 = fadd float %product277, %product281
  %leftColumn283 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp284 = extractelement <4 x float> %leftColumn283, i32 3
  %rightComp285 = extractelement <3 x float> %rightColumn228, i32 2
  %product286 = fmul float %leftComp284, %rightComp285
  %dotProduct287 = fadd float %dotProduct282, %product286
  %column288 = insertelement <4 x float> %column273, float %dotProduct287, i32 3
  %resultMatrix289 = insertvalue [4 x <4 x float>] %resultMatrix227, <4 x float> %column288, 2
  %rightColumn290 = extractvalue [4 x <3 x float>] %84, 3
  %leftColumn291 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp292 = extractelement <4 x float> %leftColumn291, i32 0
  %rightComp293 = extractelement <3 x float> %rightColumn290, i32 0
  %product294 = fmul float %leftComp292, %rightComp293
  %leftColumn295 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp296 = extractelement <4 x float> %leftColumn295, i32 0
  %rightComp297 = extractelement <3 x float> %rightColumn290, i32 1
  %product298 = fmul float %leftComp296, %rightComp297
  %dotProduct299 = fadd float %product294, %product298
  %leftColumn300 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp301 = extractelement <4 x float> %leftColumn300, i32 0
  %rightComp302 = extractelement <3 x float> %rightColumn290, i32 2
  %product303 = fmul float %leftComp301, %rightComp302
  %dotProduct304 = fadd float %dotProduct299, %product303
  %column305 = insertelement <4 x float> %column288, float %dotProduct304, i32 0
  %leftColumn306 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp307 = extractelement <4 x float> %leftColumn306, i32 1
  %rightComp308 = extractelement <3 x float> %rightColumn290, i32 0
  %product309 = fmul float %leftComp307, %rightComp308
  %leftColumn310 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp311 = extractelement <4 x float> %leftColumn310, i32 1
  %rightComp312 = extractelement <3 x float> %rightColumn290, i32 1
  %product313 = fmul float %leftComp311, %rightComp312
  %dotProduct314 = fadd float %product309, %product313
  %leftColumn315 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp316 = extractelement <4 x float> %leftColumn315, i32 1
  %rightComp317 = extractelement <3 x float> %rightColumn290, i32 2
  %product318 = fmul float %leftComp316, %rightComp317
  %dotProduct319 = fadd float %dotProduct314, %product318
  %column320 = insertelement <4 x float> %column305, float %dotProduct319, i32 1
  %leftColumn321 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp322 = extractelement <4 x float> %leftColumn321, i32 2
  %rightComp323 = extractelement <3 x float> %rightColumn290, i32 0
  %product324 = fmul float %leftComp322, %rightComp323
  %leftColumn325 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp326 = extractelement <4 x float> %leftColumn325, i32 2
  %rightComp327 = extractelement <3 x float> %rightColumn290, i32 1
  %product328 = fmul float %leftComp326, %rightComp327
  %dotProduct329 = fadd float %product324, %product328
  %leftColumn330 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp331 = extractelement <4 x float> %leftColumn330, i32 2
  %rightComp332 = extractelement <3 x float> %rightColumn290, i32 2
  %product333 = fmul float %leftComp331, %rightComp332
  %dotProduct334 = fadd float %dotProduct329, %product333
  %column335 = insertelement <4 x float> %column320, float %dotProduct334, i32 2
  %leftColumn336 = extractvalue [3 x <4 x float>] %83, 0
  %leftComp337 = extractelement <4 x float> %leftColumn336, i32 3
  %rightComp338 = extractelement <3 x float> %rightColumn290, i32 0
  %product339 = fmul float %leftComp337, %rightComp338
  %leftColumn340 = extractvalue [3 x <4 x float>] %83, 1
  %leftComp341 = extractelement <4 x float> %leftColumn340, i32 3
  %rightComp342 = extractelement <3 x float> %rightColumn290, i32 1
  %product343 = fmul float %leftComp341, %rightComp342
  %dotProduct344 = fadd float %product339, %product343
  %leftColumn345 = extractvalue [3 x <4 x float>] %83, 2
  %leftComp346 = extractelement <4 x float> %leftColumn345, i32 3
  %rightComp347 = extractelement <3 x float> %rightColumn290, i32 2
  %product348 = fmul float %leftComp346, %rightComp347
  %dotProduct349 = fadd float %dotProduct344, %product348
  %column350 = insertelement <4 x float> %column335, float %dotProduct349, i32 3
  %resultMatrix351 = insertvalue [4 x <4 x float>] %resultMatrix289, <4 x float> %column350, 3
  %85 = load [4 x <4 x float>]* %m44
  %86 = load [4 x <4 x float>]* %12
  %leftColumn352 = extractvalue [4 x <4 x float>] %85, 0
  %rightColumn353 = extractvalue [4 x <4 x float>] %resultMatrix351, 0
  %column354 = fadd <4 x float> %leftColumn352, %rightColumn353
  %87 = insertvalue [4 x <4 x float>] %86, <4 x float> %column354, 0
  %leftColumn355 = extractvalue [4 x <4 x float>] %85, 1
  %rightColumn356 = extractvalue [4 x <4 x float>] %resultMatrix351, 1
  %column357 = fadd <4 x float> %leftColumn355, %rightColumn356
  %88 = insertvalue [4 x <4 x float>] %87, <4 x float> %column357, 1
  %leftColumn358 = extractvalue [4 x <4 x float>] %85, 2
  %rightColumn359 = extractvalue [4 x <4 x float>] %resultMatrix351, 2
  %column360 = fadd <4 x float> %leftColumn358, %rightColumn359
  %89 = insertvalue [4 x <4 x float>] %88, <4 x float> %column360, 2
  %leftColumn361 = extractvalue [4 x <4 x float>] %85, 3
  %rightColumn362 = extractvalue [4 x <4 x float>] %resultMatrix351, 3
  %column363 = fadd <4 x float> %leftColumn361, %rightColumn362
  %m44364 = insertvalue [4 x <4 x float>] %89, <4 x float> %column363, 3
  store [4 x <4 x float>] %m44364, [4 x <4 x float>]* %m44
  %90 = load [4 x <4 x float>]* %m44
  %91 = load [4 x <4 x float>]* %11
  %column365 = extractvalue [4 x <4 x float>] %90, 0
  %row366 = extractelement <4 x float> %column365, i32 0
  %92 = fsub float 0.000000e+00, %row366
  %93 = insertelement <4 x float> %column365, float %92, i32 0
  %row367 = extractelement <4 x float> %93, i32 1
  %94 = fsub float 0.000000e+00, %row367
  %95 = insertelement <4 x float> %93, float %94, i32 1
  %row368 = extractelement <4 x float> %95, i32 2
  %96 = fsub float 0.000000e+00, %row368
  %97 = insertelement <4 x float> %95, float %96, i32 2
  %row369 = extractelement <4 x float> %97, i32 3
  %98 = fsub float 0.000000e+00, %row369
  %99 = insertelement <4 x float> %97, float %98, i32 3
  %100 = insertvalue [4 x <4 x float>] %91, <4 x float> %99, 0
  %column370 = extractvalue [4 x <4 x float>] %90, 1
  %row371 = extractelement <4 x float> %column370, i32 0
  %101 = fsub float 0.000000e+00, %row371
  %102 = insertelement <4 x float> %column370, float %101, i32 0
  %row372 = extractelement <4 x float> %102, i32 1
  %103 = fsub float 0.000000e+00, %row372
  %104 = insertelement <4 x float> %102, float %103, i32 1
  %row373 = extractelement <4 x float> %104, i32 2
  %105 = fsub float 0.000000e+00, %row373
  %106 = insertelement <4 x float> %104, float %105, i32 2
  %row374 = extractelement <4 x float> %106, i32 3
  %107 = fsub float 0.000000e+00, %row374
  %108 = insertelement <4 x float> %106, float %107, i32 3
  %109 = insertvalue [4 x <4 x float>] %100, <4 x float> %108, 1
  %column375 = extractvalue [4 x <4 x float>] %90, 2
  %row376 = extractelement <4 x float> %column375, i32 0
  %110 = fsub float 0.000000e+00, %row376
  %111 = insertelement <4 x float> %column375, float %110, i32 0
  %row377 = extractelement <4 x float> %111, i32 1
  %112 = fsub float 0.000000e+00, %row377
  %113 = insertelement <4 x float> %111, float %112, i32 1
  %row378 = extractelement <4 x float> %113, i32 2
  %114 = fsub float 0.000000e+00, %row378
  %115 = insertelement <4 x float> %113, float %114, i32 2
  %row379 = extractelement <4 x float> %115, i32 3
  %116 = fsub float 0.000000e+00, %row379
  %117 = insertelement <4 x float> %115, float %116, i32 3
  %118 = insertvalue [4 x <4 x float>] %109, <4 x float> %117, 2
  %column380 = extractvalue [4 x <4 x float>] %90, 3
  %row381 = extractelement <4 x float> %column380, i32 0
  %119 = fsub float 0.000000e+00, %row381
  %120 = insertelement <4 x float> %column380, float %119, i32 0
  %row382 = extractelement <4 x float> %120, i32 1
  %121 = fsub float 0.000000e+00, %row382
  %122 = insertelement <4 x float> %120, float %121, i32 1
  %row383 = extractelement <4 x float> %122, i32 2
  %123 = fsub float 0.000000e+00, %row383
  %124 = insertelement <4 x float> %122, float %123, i32 2
  %row384 = extractelement <4 x float> %124, i32 3
  %125 = fsub float 0.000000e+00, %row384
  %126 = insertelement <4 x float> %124, float %125, i32 3
  %127 = insertvalue [4 x <4 x float>] %118, <4 x float> %126, 3
  %v385 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %v385, <4 x float>* @v_shadow
  %128 = load <4 x float>* @v_shadow
  %129 = load <4 x float>* %10
  %component = extractelement <4 x float> %128, i32 0
  %component386 = extractelement <4 x float> %128, i32 1
  %component387 = extractelement <4 x float> %128, i32 2
  %component388 = extractelement <4 x float> %128, i32 3
  %column389 = extractvalue [4 x <4 x float>] %127, 0
  %element390 = extractelement <4 x float> %column389, i32 0
  %product391 = fmul float %element390, %component
  %column392 = extractvalue [4 x <4 x float>] %127, 1
  %element393 = extractelement <4 x float> %column392, i32 0
  %product394 = fmul float %element393, %component386
  %dotProduct395 = fadd float %product391, %product394
  %column396 = extractvalue [4 x <4 x float>] %127, 2
  %element397 = extractelement <4 x float> %column396, i32 0
  %product398 = fmul float %element397, %component387
  %dotProduct399 = fadd float %dotProduct395, %product398
  %column400 = extractvalue [4 x <4 x float>] %127, 3
  %element401 = extractelement <4 x float> %column400, i32 0
  %product402 = fmul float %element401, %component388
  %dotProduct403 = fadd float %dotProduct399, %product402
  %130 = insertelement <4 x float> %129, float %dotProduct403, i32 0
  %column404 = extractvalue [4 x <4 x float>] %127, 0
  %element405 = extractelement <4 x float> %column404, i32 1
  %product406 = fmul float %element405, %component
  %column407 = extractvalue [4 x <4 x float>] %127, 1
  %element408 = extractelement <4 x float> %column407, i32 1
  %product409 = fmul float %element408, %component386
  %dotProduct410 = fadd float %product406, %product409
  %column411 = extractvalue [4 x <4 x float>] %127, 2
  %element412 = extractelement <4 x float> %column411, i32 1
  %product413 = fmul float %element412, %component387
  %dotProduct414 = fadd float %dotProduct410, %product413
  %column415 = extractvalue [4 x <4 x float>] %127, 3
  %element416 = extractelement <4 x float> %column415, i32 1
  %product417 = fmul float %element416, %component388
  %dotProduct418 = fadd float %dotProduct414, %product417
  %131 = insertelement <4 x float> %130, float %dotProduct418, i32 1
  %column419 = extractvalue [4 x <4 x float>] %127, 0
  %element420 = extractelement <4 x float> %column419, i32 2
  %product421 = fmul float %element420, %component
  %column422 = extractvalue [4 x <4 x float>] %127, 1
  %element423 = extractelement <4 x float> %column422, i32 2
  %product424 = fmul float %element423, %component386
  %dotProduct425 = fadd float %product421, %product424
  %column426 = extractvalue [4 x <4 x float>] %127, 2
  %element427 = extractelement <4 x float> %column426, i32 2
  %product428 = fmul float %element427, %component387
  %dotProduct429 = fadd float %dotProduct425, %product428
  %column430 = extractvalue [4 x <4 x float>] %127, 3
  %element431 = extractelement <4 x float> %column430, i32 2
  %product432 = fmul float %element431, %component388
  %dotProduct433 = fadd float %dotProduct429, %product432
  %132 = insertelement <4 x float> %131, float %dotProduct433, i32 2
  %column434 = extractvalue [4 x <4 x float>] %127, 0
  %element435 = extractelement <4 x float> %column434, i32 3
  %product436 = fmul float %element435, %component
  %column437 = extractvalue [4 x <4 x float>] %127, 1
  %element438 = extractelement <4 x float> %column437, i32 3
  %product439 = fmul float %element438, %component386
  %dotProduct440 = fadd float %product436, %product439
  %column441 = extractvalue [4 x <4 x float>] %127, 2
  %element442 = extractelement <4 x float> %column441, i32 3
  %product443 = fmul float %element442, %component387
  %dotProduct444 = fadd float %dotProduct440, %product443
  %column445 = extractvalue [4 x <4 x float>] %127, 3
  %element446 = extractelement <4 x float> %column445, i32 3
  %product447 = fmul float %element446, %component388
  %dotProduct448 = fadd float %dotProduct444, %product447
  %133 = insertelement <4 x float> %132, float %dotProduct448, i32 3
  %134 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow449 = fadd <4 x float> %134, %133
  store <4 x float> %FragColor_shadow449, <4 x float>* @FragColor_shadow
  %135 = load [4 x <4 x float>]* %m44
  %136 = load [4 x <4 x float>]* %m44
  %137 = load [4 x <4 x float>]* %9
  %leftColumn450 = extractvalue [4 x <4 x float>] %135, 0
  %rightColumn451 = extractvalue [4 x <4 x float>] %136, 0
  %column452 = fmul <4 x float> %leftColumn450, %rightColumn451
  %138 = insertvalue [4 x <4 x float>] %137, <4 x float> %column452, 0
  %leftColumn453 = extractvalue [4 x <4 x float>] %135, 1
  %rightColumn454 = extractvalue [4 x <4 x float>] %136, 1
  %column455 = fmul <4 x float> %leftColumn453, %rightColumn454
  %139 = insertvalue [4 x <4 x float>] %138, <4 x float> %column455, 1
  %leftColumn456 = extractvalue [4 x <4 x float>] %135, 2
  %rightColumn457 = extractvalue [4 x <4 x float>] %136, 2
  %column458 = fmul <4 x float> %leftColumn456, %rightColumn457
  %140 = insertvalue [4 x <4 x float>] %139, <4 x float> %column458, 2
  %leftColumn459 = extractvalue [4 x <4 x float>] %135, 3
  %rightColumn460 = extractvalue [4 x <4 x float>] %136, 3
  %column461 = fmul <4 x float> %leftColumn459, %rightColumn460
  %141 = insertvalue [4 x <4 x float>] %140, <4 x float> %column461, 3
  %142 = load <4 x float>* @FragColor_shadow
  %143 = load <4 x float>* %8
  %column462 = extractvalue [4 x <4 x float>] %141, 0
  %dotres463 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %column462)
  %144 = insertelement <4 x float> %143, float %dotres463, i32 0
  %column464 = extractvalue [4 x <4 x float>] %141, 1
  %dotres465 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %column464)
  %145 = insertelement <4 x float> %144, float %dotres465, i32 1
  %column466 = extractvalue [4 x <4 x float>] %141, 2
  %dotres467 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %column466)
  %146 = insertelement <4 x float> %145, float %dotres467, i32 2
  %column468 = extractvalue [4 x <4 x float>] %141, 3
  %dotres469 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %column468)
  %FragColor_shadow470 = insertelement <4 x float> %146, float %dotres469, i32 3
  store <4 x float> %FragColor_shadow470, <4 x float>* @FragColor_shadow
  %147 = load [4 x <3 x float>] addrspace(2)* @um43, !gla.uniform !11
  %column471 = extractvalue [4 x <3 x float>] %147, 0
  %element472 = extractelement <3 x float> %column471, i32 0
  %element473 = extractelement <3 x float> %column471, i32 1
  %element474 = extractelement <3 x float> %column471, i32 2
  %column475 = extractvalue [4 x <3 x float>] %147, 1
  %element476 = extractelement <3 x float> %column475, i32 0
  %element477 = extractelement <3 x float> %column475, i32 1
  %element478 = extractelement <3 x float> %column475, i32 2
  %column479 = extractvalue [4 x <3 x float>] %147, 2
  %element480 = extractelement <3 x float> %column479, i32 0
  %element481 = extractelement <3 x float> %column479, i32 1
  %element482 = extractelement <3 x float> %column479, i32 2
  %column483 = extractvalue [4 x <3 x float>] %147, 3
  %element484 = extractelement <3 x float> %column483, i32 0
  %element485 = extractelement <3 x float> %column483, i32 1
  %element486 = extractelement <3 x float> %column483, i32 2
  %148 = load [3 x <4 x float>]* %7
  %column487 = extractvalue [3 x <4 x float>] %148, 0
  %column488 = insertelement <4 x float> %column487, float %element472, i32 0
  %column489 = insertelement <4 x float> %column488, float %element476, i32 1
  %column490 = insertelement <4 x float> %column489, float %element480, i32 2
  %column491 = insertelement <4 x float> %column490, float %element484, i32 3
  %matrix492 = insertvalue [3 x <4 x float>] %148, <4 x float> %column491, 0
  %column493 = extractvalue [3 x <4 x float>] %matrix492, 1
  %column494 = insertelement <4 x float> %column493, float %element473, i32 0
  %column495 = insertelement <4 x float> %column494, float %element477, i32 1
  %column496 = insertelement <4 x float> %column495, float %element481, i32 2
  %column497 = insertelement <4 x float> %column496, float %element485, i32 3
  %matrix498 = insertvalue [3 x <4 x float>] %matrix492, <4 x float> %column497, 1
  %column499 = extractvalue [3 x <4 x float>] %matrix498, 2
  %column500 = insertelement <4 x float> %column499, float %element474, i32 0
  %column501 = insertelement <4 x float> %column500, float %element478, i32 1
  %column502 = insertelement <4 x float> %column501, float %element482, i32 2
  %column503 = insertelement <4 x float> %column502, float %element486, i32 3
  %matrix504 = insertvalue [3 x <4 x float>] %matrix498, <4 x float> %column503, 2
  store [3 x <4 x float>] %matrix504, [3 x <4 x float>]* %m34
  %149 = load <4 x float>* @FragColor_shadow
  %150 = load [3 x <4 x float>]* %m34
  %151 = load <3 x float>* %6
  %column505 = extractvalue [3 x <4 x float>] %150, 0
  %dotres506 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %149, <4 x float> %column505)
  %152 = insertelement <3 x float> %151, float %dotres506, i32 0
  %column507 = extractvalue [3 x <4 x float>] %150, 1
  %dotres508 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %149, <4 x float> %column507)
  %153 = insertelement <3 x float> %152, float %dotres508, i32 1
  %column509 = extractvalue [3 x <4 x float>] %150, 2
  %dotres510 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %149, <4 x float> %column509)
  %154 = insertelement <3 x float> %153, float %dotres510, i32 2
  %155 = load <4 x float>* %constructed511
  %156 = extractelement <3 x float> %154, i32 0
  %157 = insertelement <4 x float> %155, float %156, i32 0
  %158 = extractelement <3 x float> %154, i32 1
  %159 = insertelement <4 x float> %157, float %158, i32 1
  %160 = extractelement <3 x float> %154, i32 2
  %161 = insertelement <4 x float> %159, float %160, i32 2
  %162 = insertelement <4 x float> %161, float 1.000000e+00, i32 3
  %163 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow512 = fmul <4 x float> %163, %162
  store <4 x float> %FragColor_shadow512, <4 x float>* @FragColor_shadow
  %164 = load [4 x <4 x float>] addrspace(2)* @um4, !gla.uniform !12
  %column513 = extractvalue [4 x <4 x float>] %164, 0
  %element514 = extractelement <4 x float> %column513, i32 0
  %element515 = extractelement <4 x float> %column513, i32 1
  %element516 = extractelement <4 x float> %column513, i32 2
  %element517 = extractelement <4 x float> %column513, i32 3
  %column518 = extractvalue [4 x <4 x float>] %164, 1
  %element519 = extractelement <4 x float> %column518, i32 0
  %element520 = extractelement <4 x float> %column518, i32 1
  %element521 = extractelement <4 x float> %column518, i32 2
  %element522 = extractelement <4 x float> %column518, i32 3
  %column523 = extractvalue [4 x <4 x float>] %164, 2
  %element524 = extractelement <4 x float> %column523, i32 0
  %element525 = extractelement <4 x float> %column523, i32 1
  %element526 = extractelement <4 x float> %column523, i32 2
  %element527 = extractelement <4 x float> %column523, i32 3
  %column528 = extractvalue [4 x <4 x float>] %164, 3
  %element529 = extractelement <4 x float> %column528, i32 0
  %element530 = extractelement <4 x float> %column528, i32 1
  %element531 = extractelement <4 x float> %column528, i32 2
  %element532 = extractelement <4 x float> %column528, i32 3
  %165 = fmul float %element526, %element532
  %166 = fmul float %element531, %element527
  %167 = fsub float %165, %166
  %168 = fmul float %element520, %167
  %169 = fmul float %element521, %element532
  %170 = fmul float %element531, %element522
  %171 = fsub float %169, %170
  %172 = fmul float %element525, %171
  %173 = fsub float %168, %172
  %174 = fmul float %element521, %element527
  %175 = fmul float %element526, %element522
  %176 = fsub float %174, %175
  %177 = fmul float %element530, %176
  %178 = fadd float %173, %177
  %179 = fmul float %element514, %178
  %180 = fmul float %element526, %element532
  %181 = fmul float %element531, %element527
  %182 = fsub float %180, %181
  %183 = fmul float %element515, %182
  %184 = fmul float %element516, %element532
  %185 = fmul float %element531, %element517
  %186 = fsub float %184, %185
  %187 = fmul float %element525, %186
  %188 = fsub float %183, %187
  %189 = fmul float %element516, %element527
  %190 = fmul float %element526, %element517
  %191 = fsub float %189, %190
  %192 = fmul float %element530, %191
  %193 = fadd float %188, %192
  %194 = fmul float %element519, %193
  %195 = fsub float %179, %194
  %196 = fmul float %element521, %element532
  %197 = fmul float %element531, %element522
  %198 = fsub float %196, %197
  %199 = fmul float %element515, %198
  %200 = fmul float %element516, %element532
  %201 = fmul float %element531, %element517
  %202 = fsub float %200, %201
  %203 = fmul float %element520, %202
  %204 = fsub float %199, %203
  %205 = fmul float %element516, %element522
  %206 = fmul float %element521, %element517
  %207 = fsub float %205, %206
  %208 = fmul float %element530, %207
  %209 = fadd float %204, %208
  %210 = fmul float %element524, %209
  %211 = fadd float %195, %210
  %212 = fmul float %element521, %element527
  %213 = fmul float %element526, %element522
  %214 = fsub float %212, %213
  %215 = fmul float %element515, %214
  %216 = fmul float %element516, %element527
  %217 = fmul float %element526, %element517
  %218 = fsub float %216, %217
  %219 = fmul float %element520, %218
  %220 = fsub float %215, %219
  %221 = fmul float %element516, %element522
  %222 = fmul float %element521, %element517
  %223 = fsub float %221, %222
  %224 = fmul float %element525, %223
  %225 = fadd float %220, %224
  %226 = fmul float %element529, %225
  %227 = fsub float %211, %226
  %228 = load <4 x float>* %constructed533
  %229 = insertelement <4 x float> undef, float %227, i32 0
  %230 = insertelement <4 x float> %229, float %227, i32 1
  %231 = insertelement <4 x float> %230, float %227, i32 2
  %232 = insertelement <4 x float> %231, float %227, i32 3
  %233 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow534 = fmul <4 x float> %233, %232
  store <4 x float> %FragColor_shadow534, <4 x float>* @FragColor_shadow
  %234 = load [2 x <2 x float>] addrspace(2)* @um2, !gla.uniform !13
  %column535 = extractvalue [2 x <2 x float>] %234, 0
  %element536 = extractelement <2 x float> %column535, i32 0
  %element537 = extractelement <2 x float> %column535, i32 1
  %column538 = extractvalue [2 x <2 x float>] %234, 1
  %element539 = extractelement <2 x float> %column538, i32 0
  %element540 = extractelement <2 x float> %column538, i32 1
  %235 = fsub float -0.000000e+00, %element537
  %236 = fsub float -0.000000e+00, %element539
  %237 = fmul float %element536, %element540
  %238 = fmul float %element539, %element537
  %239 = fsub float %237, %238
  %240 = fdiv float 1.000000e+00, %239
  %241 = fmul float %element540, %240
  %242 = fmul float %236, %240
  %243 = fmul float %235, %240
  %244 = fmul float %element536, %240
  %245 = load [2 x <2 x float>]* %5
  %column541 = extractvalue [2 x <2 x float>] %245, 0
  %column542 = insertelement <2 x float> %column541, float %241, i32 0
  %column543 = insertelement <2 x float> %column542, float %243, i32 1
  %matrix544 = insertvalue [2 x <2 x float>] %245, <2 x float> %column543, 0
  %column545 = extractvalue [2 x <2 x float>] %matrix544, 1
  %column546 = insertelement <2 x float> %column545, float %242, i32 0
  %column547 = insertelement <2 x float> %column546, float %244, i32 1
  %matrix548 = insertvalue [2 x <2 x float>] %matrix544, <2 x float> %column547, 1
  store [2 x <2 x float>] %matrix548, [2 x <2 x float>]* %inv
  %246 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 0
  %247 = load <2 x float>* %246
  %248 = extractelement <2 x float> %247, i32 0
  %249 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 1
  %250 = load <2 x float>* %249
  %251 = extractelement <2 x float> %250, i32 0
  %252 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 0
  %253 = load <2 x float>* %252
  %254 = extractelement <2 x float> %253, i32 1
  %255 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 1
  %256 = load <2 x float>* %255
  %257 = extractelement <2 x float> %256, i32 1
  %258 = load <4 x float>* %constructed549
  %259 = insertelement <4 x float> %258, float %248, i32 0
  %260 = insertelement <4 x float> %259, float %251, i32 1
  %261 = insertelement <4 x float> %260, float %254, i32 2
  %262 = insertelement <4 x float> %261, float %257, i32 3
  %263 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow550 = fmul <4 x float> %263, %262
  store <4 x float> %FragColor_shadow550, <4 x float>* @FragColor_shadow
  %264 = load [3 x <3 x float>] addrspace(2)* @um3, !gla.uniform !14
  %column551 = extractvalue [3 x <3 x float>] %264, 0
  %element552 = extractelement <3 x float> %column551, i32 0
  %element553 = extractelement <3 x float> %column551, i32 1
  %element554 = extractelement <3 x float> %column551, i32 2
  %column555 = extractvalue [3 x <3 x float>] %264, 1
  %element556 = extractelement <3 x float> %column555, i32 0
  %element557 = extractelement <3 x float> %column555, i32 1
  %element558 = extractelement <3 x float> %column555, i32 2
  %column559 = extractvalue [3 x <3 x float>] %264, 2
  %element560 = extractelement <3 x float> %column559, i32 0
  %element561 = extractelement <3 x float> %column559, i32 1
  %element562 = extractelement <3 x float> %column559, i32 2
  %265 = fmul float %element557, %element562
  %266 = fmul float %element561, %element558
  %267 = fsub float %265, %266
  %268 = fmul float %element553, %element562
  %269 = fmul float %element561, %element554
  %270 = fsub float %268, %269
  %271 = fsub float -0.000000e+00, %270
  %272 = fmul float %element553, %element558
  %273 = fmul float %element557, %element554
  %274 = fsub float %272, %273
  %275 = fmul float %element556, %element562
  %276 = fmul float %element560, %element558
  %277 = fsub float %275, %276
  %278 = fsub float -0.000000e+00, %277
  %279 = fmul float %element552, %element562
  %280 = fmul float %element560, %element554
  %281 = fsub float %279, %280
  %282 = fmul float %element552, %element558
  %283 = fmul float %element556, %element554
  %284 = fsub float %282, %283
  %285 = fsub float -0.000000e+00, %284
  %286 = fmul float %element556, %element561
  %287 = fmul float %element560, %element557
  %288 = fsub float %286, %287
  %289 = fmul float %element552, %element561
  %290 = fmul float %element560, %element553
  %291 = fsub float %289, %290
  %292 = fsub float -0.000000e+00, %291
  %293 = fmul float %element552, %element557
  %294 = fmul float %element556, %element553
  %295 = fsub float %293, %294
  %296 = fmul float %element557, %element562
  %297 = fmul float %element561, %element558
  %298 = fsub float %296, %297
  %299 = fmul float %element552, %298
  %300 = fmul float %element553, %element562
  %301 = fmul float %element561, %element554
  %302 = fsub float %300, %301
  %303 = fmul float %element556, %302
  %304 = fsub float %299, %303
  %305 = fmul float %element553, %element558
  %306 = fmul float %element557, %element554
  %307 = fsub float %305, %306
  %308 = fmul float %element560, %307
  %309 = fadd float %304, %308
  %310 = fdiv float 1.000000e+00, %309
  %311 = fmul float %267, %310
  %312 = fmul float %278, %310
  %313 = fmul float %288, %310
  %314 = fmul float %271, %310
  %315 = fmul float %281, %310
  %316 = fmul float %292, %310
  %317 = fmul float %274, %310
  %318 = fmul float %285, %310
  %319 = fmul float %295, %310
  %320 = load [3 x <3 x float>]* %4
  %column563 = extractvalue [3 x <3 x float>] %320, 0
  %column564 = insertelement <3 x float> %column563, float %311, i32 0
  %column565 = insertelement <3 x float> %column564, float %314, i32 1
  %column566 = insertelement <3 x float> %column565, float %317, i32 2
  %matrix567 = insertvalue [3 x <3 x float>] %320, <3 x float> %column566, 0
  %column568 = extractvalue [3 x <3 x float>] %matrix567, 1
  %column569 = insertelement <3 x float> %column568, float %312, i32 0
  %column570 = insertelement <3 x float> %column569, float %315, i32 1
  %column571 = insertelement <3 x float> %column570, float %318, i32 2
  %matrix572 = insertvalue [3 x <3 x float>] %matrix567, <3 x float> %column571, 1
  %column573 = extractvalue [3 x <3 x float>] %matrix572, 2
  %column574 = insertelement <3 x float> %column573, float %313, i32 0
  %column575 = insertelement <3 x float> %column574, float %316, i32 1
  %column576 = insertelement <3 x float> %column575, float %319, i32 2
  %matrix577 = insertvalue [3 x <3 x float>] %matrix572, <3 x float> %column576, 2
  store [3 x <3 x float>] %matrix577, [3 x <3 x float>]* %inv3
  %321 = getelementptr [3 x <3 x float>]* %inv3, i32 0, i32 2
  %322 = load <3 x float>* %321
  %323 = extractelement <3 x float> %322, i32 1
  %324 = load <4 x float>* %constructed578
  %325 = insertelement <4 x float> undef, float %323, i32 0
  %326 = insertelement <4 x float> %325, float %323, i32 1
  %327 = insertelement <4 x float> %326, float %323, i32 2
  %328 = insertelement <4 x float> %327, float %323, i32 3
  %329 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow579 = fmul <4 x float> %329, %328
  store <4 x float> %FragColor_shadow579, <4 x float>* @FragColor_shadow
  %330 = load [4 x <4 x float>] addrspace(2)* @um4, !gla.uniform !12
  %column580 = extractvalue [4 x <4 x float>] %330, 0
  %element581 = extractelement <4 x float> %column580, i32 0
  %element582 = extractelement <4 x float> %column580, i32 1
  %element583 = extractelement <4 x float> %column580, i32 2
  %element584 = extractelement <4 x float> %column580, i32 3
  %column585 = extractvalue [4 x <4 x float>] %330, 1
  %element586 = extractelement <4 x float> %column585, i32 0
  %element587 = extractelement <4 x float> %column585, i32 1
  %element588 = extractelement <4 x float> %column585, i32 2
  %element589 = extractelement <4 x float> %column585, i32 3
  %column590 = extractvalue [4 x <4 x float>] %330, 2
  %element591 = extractelement <4 x float> %column590, i32 0
  %element592 = extractelement <4 x float> %column590, i32 1
  %element593 = extractelement <4 x float> %column590, i32 2
  %element594 = extractelement <4 x float> %column590, i32 3
  %column595 = extractvalue [4 x <4 x float>] %330, 3
  %element596 = extractelement <4 x float> %column595, i32 0
  %element597 = extractelement <4 x float> %column595, i32 1
  %element598 = extractelement <4 x float> %column595, i32 2
  %element599 = extractelement <4 x float> %column595, i32 3
  %331 = fmul float %element593, %element599
  %332 = fmul float %element598, %element594
  %333 = fsub float %331, %332
  %334 = fmul float %element587, %333
  %335 = fmul float %element588, %element599
  %336 = fmul float %element598, %element589
  %337 = fsub float %335, %336
  %338 = fmul float %element592, %337
  %339 = fsub float %334, %338
  %340 = fmul float %element588, %element594
  %341 = fmul float %element593, %element589
  %342 = fsub float %340, %341
  %343 = fmul float %element597, %342
  %344 = fadd float %339, %343
  %345 = fmul float %element593, %element599
  %346 = fmul float %element598, %element594
  %347 = fsub float %345, %346
  %348 = fmul float %element582, %347
  %349 = fmul float %element583, %element599
  %350 = fmul float %element598, %element584
  %351 = fsub float %349, %350
  %352 = fmul float %element592, %351
  %353 = fsub float %348, %352
  %354 = fmul float %element583, %element594
  %355 = fmul float %element593, %element584
  %356 = fsub float %354, %355
  %357 = fmul float %element597, %356
  %358 = fadd float %353, %357
  %359 = fsub float -0.000000e+00, %358
  %360 = fmul float %element588, %element599
  %361 = fmul float %element598, %element589
  %362 = fsub float %360, %361
  %363 = fmul float %element582, %362
  %364 = fmul float %element583, %element599
  %365 = fmul float %element598, %element584
  %366 = fsub float %364, %365
  %367 = fmul float %element587, %366
  %368 = fsub float %363, %367
  %369 = fmul float %element583, %element589
  %370 = fmul float %element588, %element584
  %371 = fsub float %369, %370
  %372 = fmul float %element597, %371
  %373 = fadd float %368, %372
  %374 = fmul float %element588, %element594
  %375 = fmul float %element593, %element589
  %376 = fsub float %374, %375
  %377 = fmul float %element582, %376
  %378 = fmul float %element583, %element594
  %379 = fmul float %element593, %element584
  %380 = fsub float %378, %379
  %381 = fmul float %element587, %380
  %382 = fsub float %377, %381
  %383 = fmul float %element583, %element589
  %384 = fmul float %element588, %element584
  %385 = fsub float %383, %384
  %386 = fmul float %element592, %385
  %387 = fadd float %382, %386
  %388 = fsub float -0.000000e+00, %387
  %389 = fmul float %element593, %element599
  %390 = fmul float %element598, %element594
  %391 = fsub float %389, %390
  %392 = fmul float %element586, %391
  %393 = fmul float %element588, %element599
  %394 = fmul float %element598, %element589
  %395 = fsub float %393, %394
  %396 = fmul float %element591, %395
  %397 = fsub float %392, %396
  %398 = fmul float %element588, %element594
  %399 = fmul float %element593, %element589
  %400 = fsub float %398, %399
  %401 = fmul float %element596, %400
  %402 = fadd float %397, %401
  %403 = fsub float -0.000000e+00, %402
  %404 = fmul float %element593, %element599
  %405 = fmul float %element598, %element594
  %406 = fsub float %404, %405
  %407 = fmul float %element581, %406
  %408 = fmul float %element583, %element599
  %409 = fmul float %element598, %element584
  %410 = fsub float %408, %409
  %411 = fmul float %element591, %410
  %412 = fsub float %407, %411
  %413 = fmul float %element583, %element594
  %414 = fmul float %element593, %element584
  %415 = fsub float %413, %414
  %416 = fmul float %element596, %415
  %417 = fadd float %412, %416
  %418 = fmul float %element588, %element599
  %419 = fmul float %element598, %element589
  %420 = fsub float %418, %419
  %421 = fmul float %element581, %420
  %422 = fmul float %element583, %element599
  %423 = fmul float %element598, %element584
  %424 = fsub float %422, %423
  %425 = fmul float %element586, %424
  %426 = fsub float %421, %425
  %427 = fmul float %element583, %element589
  %428 = fmul float %element588, %element584
  %429 = fsub float %427, %428
  %430 = fmul float %element596, %429
  %431 = fadd float %426, %430
  %432 = fsub float -0.000000e+00, %431
  %433 = fmul float %element588, %element594
  %434 = fmul float %element593, %element589
  %435 = fsub float %433, %434
  %436 = fmul float %element581, %435
  %437 = fmul float %element583, %element594
  %438 = fmul float %element593, %element584
  %439 = fsub float %437, %438
  %440 = fmul float %element586, %439
  %441 = fsub float %436, %440
  %442 = fmul float %element583, %element589
  %443 = fmul float %element588, %element584
  %444 = fsub float %442, %443
  %445 = fmul float %element591, %444
  %446 = fadd float %441, %445
  %447 = fmul float %element592, %element599
  %448 = fmul float %element597, %element594
  %449 = fsub float %447, %448
  %450 = fmul float %element586, %449
  %451 = fmul float %element587, %element599
  %452 = fmul float %element597, %element589
  %453 = fsub float %451, %452
  %454 = fmul float %element591, %453
  %455 = fsub float %450, %454
  %456 = fmul float %element587, %element594
  %457 = fmul float %element592, %element589
  %458 = fsub float %456, %457
  %459 = fmul float %element596, %458
  %460 = fadd float %455, %459
  %461 = fmul float %element592, %element599
  %462 = fmul float %element597, %element594
  %463 = fsub float %461, %462
  %464 = fmul float %element581, %463
  %465 = fmul float %element582, %element599
  %466 = fmul float %element597, %element584
  %467 = fsub float %465, %466
  %468 = fmul float %element591, %467
  %469 = fsub float %464, %468
  %470 = fmul float %element582, %element594
  %471 = fmul float %element592, %element584
  %472 = fsub float %470, %471
  %473 = fmul float %element596, %472
  %474 = fadd float %469, %473
  %475 = fsub float -0.000000e+00, %474
  %476 = fmul float %element587, %element599
  %477 = fmul float %element597, %element589
  %478 = fsub float %476, %477
  %479 = fmul float %element581, %478
  %480 = fmul float %element582, %element599
  %481 = fmul float %element597, %element584
  %482 = fsub float %480, %481
  %483 = fmul float %element586, %482
  %484 = fsub float %479, %483
  %485 = fmul float %element582, %element589
  %486 = fmul float %element587, %element584
  %487 = fsub float %485, %486
  %488 = fmul float %element596, %487
  %489 = fadd float %484, %488
  %490 = fmul float %element587, %element594
  %491 = fmul float %element592, %element589
  %492 = fsub float %490, %491
  %493 = fmul float %element581, %492
  %494 = fmul float %element582, %element594
  %495 = fmul float %element592, %element584
  %496 = fsub float %494, %495
  %497 = fmul float %element586, %496
  %498 = fsub float %493, %497
  %499 = fmul float %element582, %element589
  %500 = fmul float %element587, %element584
  %501 = fsub float %499, %500
  %502 = fmul float %element591, %501
  %503 = fadd float %498, %502
  %504 = fsub float -0.000000e+00, %503
  %505 = fmul float %element592, %element598
  %506 = fmul float %element597, %element593
  %507 = fsub float %505, %506
  %508 = fmul float %element586, %507
  %509 = fmul float %element587, %element598
  %510 = fmul float %element597, %element588
  %511 = fsub float %509, %510
  %512 = fmul float %element591, %511
  %513 = fsub float %508, %512
  %514 = fmul float %element587, %element593
  %515 = fmul float %element592, %element588
  %516 = fsub float %514, %515
  %517 = fmul float %element596, %516
  %518 = fadd float %513, %517
  %519 = fsub float -0.000000e+00, %518
  %520 = fmul float %element592, %element598
  %521 = fmul float %element597, %element593
  %522 = fsub float %520, %521
  %523 = fmul float %element581, %522
  %524 = fmul float %element582, %element598
  %525 = fmul float %element597, %element583
  %526 = fsub float %524, %525
  %527 = fmul float %element591, %526
  %528 = fsub float %523, %527
  %529 = fmul float %element582, %element593
  %530 = fmul float %element592, %element583
  %531 = fsub float %529, %530
  %532 = fmul float %element596, %531
  %533 = fadd float %528, %532
  %534 = fmul float %element587, %element598
  %535 = fmul float %element597, %element588
  %536 = fsub float %534, %535
  %537 = fmul float %element581, %536
  %538 = fmul float %element582, %element598
  %539 = fmul float %element597, %element583
  %540 = fsub float %538, %539
  %541 = fmul float %element586, %540
  %542 = fsub float %537, %541
  %543 = fmul float %element582, %element588
  %544 = fmul float %element587, %element583
  %545 = fsub float %543, %544
  %546 = fmul float %element596, %545
  %547 = fadd float %542, %546
  %548 = fsub float -0.000000e+00, %547
  %549 = fmul float %element587, %element593
  %550 = fmul float %element592, %element588
  %551 = fsub float %549, %550
  %552 = fmul float %element581, %551
  %553 = fmul float %element582, %element593
  %554 = fmul float %element592, %element583
  %555 = fsub float %553, %554
  %556 = fmul float %element586, %555
  %557 = fsub float %552, %556
  %558 = fmul float %element582, %element588
  %559 = fmul float %element587, %element583
  %560 = fsub float %558, %559
  %561 = fmul float %element591, %560
  %562 = fadd float %557, %561
  %563 = fmul float %element593, %element599
  %564 = fmul float %element598, %element594
  %565 = fsub float %563, %564
  %566 = fmul float %element587, %565
  %567 = fmul float %element588, %element599
  %568 = fmul float %element598, %element589
  %569 = fsub float %567, %568
  %570 = fmul float %element592, %569
  %571 = fsub float %566, %570
  %572 = fmul float %element588, %element594
  %573 = fmul float %element593, %element589
  %574 = fsub float %572, %573
  %575 = fmul float %element597, %574
  %576 = fadd float %571, %575
  %577 = fmul float %element581, %576
  %578 = fmul float %element593, %element599
  %579 = fmul float %element598, %element594
  %580 = fsub float %578, %579
  %581 = fmul float %element582, %580
  %582 = fmul float %element583, %element599
  %583 = fmul float %element598, %element584
  %584 = fsub float %582, %583
  %585 = fmul float %element592, %584
  %586 = fsub float %581, %585
  %587 = fmul float %element583, %element594
  %588 = fmul float %element593, %element584
  %589 = fsub float %587, %588
  %590 = fmul float %element597, %589
  %591 = fadd float %586, %590
  %592 = fmul float %element586, %591
  %593 = fsub float %577, %592
  %594 = fmul float %element588, %element599
  %595 = fmul float %element598, %element589
  %596 = fsub float %594, %595
  %597 = fmul float %element582, %596
  %598 = fmul float %element583, %element599
  %599 = fmul float %element598, %element584
  %600 = fsub float %598, %599
  %601 = fmul float %element587, %600
  %602 = fsub float %597, %601
  %603 = fmul float %element583, %element589
  %604 = fmul float %element588, %element584
  %605 = fsub float %603, %604
  %606 = fmul float %element597, %605
  %607 = fadd float %602, %606
  %608 = fmul float %element591, %607
  %609 = fadd float %593, %608
  %610 = fmul float %element588, %element594
  %611 = fmul float %element593, %element589
  %612 = fsub float %610, %611
  %613 = fmul float %element582, %612
  %614 = fmul float %element583, %element594
  %615 = fmul float %element593, %element584
  %616 = fsub float %614, %615
  %617 = fmul float %element587, %616
  %618 = fsub float %613, %617
  %619 = fmul float %element583, %element589
  %620 = fmul float %element588, %element584
  %621 = fsub float %619, %620
  %622 = fmul float %element592, %621
  %623 = fadd float %618, %622
  %624 = fmul float %element596, %623
  %625 = fsub float %609, %624
  %626 = fdiv float 1.000000e+00, %625
  %627 = fmul float %344, %626
  %628 = fmul float %403, %626
  %629 = fmul float %460, %626
  %630 = fmul float %519, %626
  %631 = fmul float %359, %626
  %632 = fmul float %417, %626
  %633 = fmul float %475, %626
  %634 = fmul float %533, %626
  %635 = fmul float %373, %626
  %636 = fmul float %432, %626
  %637 = fmul float %489, %626
  %638 = fmul float %548, %626
  %639 = fmul float %388, %626
  %640 = fmul float %446, %626
  %641 = fmul float %504, %626
  %642 = fmul float %562, %626
  %643 = load [4 x <4 x float>]* %3
  %column600 = extractvalue [4 x <4 x float>] %643, 0
  %column601 = insertelement <4 x float> %column600, float %627, i32 0
  %column602 = insertelement <4 x float> %column601, float %631, i32 1
  %column603 = insertelement <4 x float> %column602, float %635, i32 2
  %column604 = insertelement <4 x float> %column603, float %639, i32 3
  %matrix605 = insertvalue [4 x <4 x float>] %643, <4 x float> %column604, 0
  %column606 = extractvalue [4 x <4 x float>] %matrix605, 1
  %column607 = insertelement <4 x float> %column606, float %628, i32 0
  %column608 = insertelement <4 x float> %column607, float %632, i32 1
  %column609 = insertelement <4 x float> %column608, float %636, i32 2
  %column610 = insertelement <4 x float> %column609, float %640, i32 3
  %matrix611 = insertvalue [4 x <4 x float>] %matrix605, <4 x float> %column610, 1
  %column612 = extractvalue [4 x <4 x float>] %matrix611, 2
  %column613 = insertelement <4 x float> %column612, float %629, i32 0
  %column614 = insertelement <4 x float> %column613, float %633, i32 1
  %column615 = insertelement <4 x float> %column614, float %637, i32 2
  %column616 = insertelement <4 x float> %column615, float %641, i32 3
  %matrix617 = insertvalue [4 x <4 x float>] %matrix611, <4 x float> %column616, 2
  %column618 = extractvalue [4 x <4 x float>] %matrix617, 3
  %column619 = insertelement <4 x float> %column618, float %630, i32 0
  %column620 = insertelement <4 x float> %column619, float %634, i32 1
  %column621 = insertelement <4 x float> %column620, float %638, i32 2
  %column622 = insertelement <4 x float> %column621, float %642, i32 3
  %matrix623 = insertvalue [4 x <4 x float>] %matrix617, <4 x float> %column622, 3
  store [4 x <4 x float>] %matrix623, [4 x <4 x float>]* %inv4
  %644 = load [4 x <4 x float>]* %inv4
  %645 = load <4 x float>* @FragColor_shadow
  %646 = load <4 x float>* %2
  %column624 = extractvalue [4 x <4 x float>] %644, 0
  %dotres625 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %645, <4 x float> %column624)
  %647 = insertelement <4 x float> %646, float %dotres625, i32 0
  %column626 = extractvalue [4 x <4 x float>] %644, 1
  %dotres627 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %645, <4 x float> %column626)
  %648 = insertelement <4 x float> %647, float %dotres627, i32 1
  %column628 = extractvalue [4 x <4 x float>] %644, 2
  %dotres629 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %645, <4 x float> %column628)
  %649 = insertelement <4 x float> %648, float %dotres629, i32 2
  %column630 = extractvalue [4 x <4 x float>] %644, 3
  %dotres631 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %645, <4 x float> %column630)
  %FragColor_shadow632 = insertelement <4 x float> %649, float %dotres631, i32 3
  store <4 x float> %FragColor_shadow632, <4 x float>* @FragColor_shadow
  %650 = load <4 x float>* @FragColor_shadow
  %651 = load [3 x <4 x float>] addrspace(2)* @un34, !gla.uniform !9
  %652 = load [3 x <4 x float>] addrspace(2)* @un34, !gla.uniform !9
  %653 = load [3 x <4 x float>]* %1
  %leftColumn633 = extractvalue [3 x <4 x float>] %651, 0
  %rightColumn634 = extractvalue [3 x <4 x float>] %652, 0
  %column635 = fmul <4 x float> %leftColumn633, %rightColumn634
  %654 = insertvalue [3 x <4 x float>] %653, <4 x float> %column635, 0
  %leftColumn636 = extractvalue [3 x <4 x float>] %651, 1
  %rightColumn637 = extractvalue [3 x <4 x float>] %652, 1
  %column638 = fmul <4 x float> %leftColumn636, %rightColumn637
  %655 = insertvalue [3 x <4 x float>] %654, <4 x float> %column638, 1
  %leftColumn639 = extractvalue [3 x <4 x float>] %651, 2
  %rightColumn640 = extractvalue [3 x <4 x float>] %652, 2
  %column641 = fmul <4 x float> %leftColumn639, %rightColumn640
  %656 = insertvalue [3 x <4 x float>] %655, <4 x float> %column641, 2
  %657 = load <3 x float>* %0
  %column642 = extractvalue [3 x <4 x float>] %656, 0
  %dotres643 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %650, <4 x float> %column642)
  %658 = insertelement <3 x float> %657, float %dotres643, i32 0
  %column644 = extractvalue [3 x <4 x float>] %656, 1
  %dotres645 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %650, <4 x float> %column644)
  %659 = insertelement <3 x float> %658, float %dotres645, i32 1
  %column646 = extractvalue [3 x <4 x float>] %656, 2
  %dotres647 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %650, <4 x float> %column646)
  %660 = insertelement <3 x float> %659, float %dotres647, i32 2
  %661 = load <4 x float>* @FragColor_shadow
  %662 = extractelement <4 x float> %661, i32 3
  %663 = load <4 x float>* %constructed648
  %664 = extractelement <3 x float> %660, i32 0
  %665 = insertelement <4 x float> %663, float %664, i32 0
  %666 = extractelement <3 x float> %660, i32 1
  %667 = insertelement <4 x float> %665, float %666, i32 1
  %668 = extractelement <3 x float> %660, i32 2
  %669 = insertelement <4 x float> %667, float %668, i32 2
  %FragColor_shadow649 = insertelement <4 x float> %669, float %662, i32 3
  store <4 x float> %FragColor_shadow649, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %670 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1026, i32 -1, <4 x float> %670), !gla.output !7
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3, !5}
!gla.outputs = !{!7}
!gla.uniforms = !{!9, !11, !12, !13, !14, !15, !16, !17}
!gla.noStaticUse = !{!15, !16, !17}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"v", i32 1, <4 x float>* @v_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"u", i32 1, <3 x float>* @u_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}
!7 = metadata !{metadata !"FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!9 = metadata !{metadata !"un34", i32 12, [3 x <4 x float>]* @un34_typeProxy, metadata !10}
!10 = metadata !{i32 3, i32 0, i32 1024, null}
!11 = metadata !{metadata !"um43", i32 12, [4 x <3 x float>]* @um43_typeProxy, metadata !10}
!12 = metadata !{metadata !"um4", i32 12, [4 x <4 x float>]* @um4_typeProxy, metadata !10}
!13 = metadata !{metadata !"um2", i32 12, [2 x <2 x float>]* @um2_typeProxy, metadata !10}
!14 = metadata !{metadata !"um3", i32 12, [3 x <3 x float>]* @um3_typeProxy, metadata !10}
!15 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !10}
!16 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !10}
!17 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !10}


Bottom IR:
; ModuleID = 'Glslang'

@un34 = external addrspace(2) constant [3 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <3 x float>]
@um4 = external addrspace(2) constant [4 x <4 x float>]
@um2 = external addrspace(2) constant [2 x <2 x float>]
@um3 = external addrspace(2) constant [3 x <3 x float>]

define fastcc void @main() {
entry:
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  %u = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !3
  %rightComp = extractelement <3 x float> %u, i32 0
  %leftComp = extractelement <4 x float> %v, i32 0
  %element = fmul float %leftComp, %rightComp
  %leftComp1 = extractelement <4 x float> %v, i32 1
  %element2 = fmul float %leftComp1, %rightComp
  %leftComp4 = extractelement <4 x float> %v, i32 2
  %element5 = fmul float %leftComp4, %rightComp
  %leftComp7 = extractelement <4 x float> %v, i32 3
  %element8 = fmul float %leftComp7, %rightComp
  %0 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %element, i32 0, float %element2, i32 0, float %element5, i32 0, float %element8, i32 0)
  %rightComp10 = extractelement <3 x float> %u, i32 1
  %element12 = fmul float %leftComp, %rightComp10
  %element15 = fmul float %leftComp1, %rightComp10
  %element18 = fmul float %leftComp4, %rightComp10
  %element21 = fmul float %leftComp7, %rightComp10
  %1 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %element12, i32 0, float %element15, i32 0, float %element18, i32 0, float %element21, i32 0)
  %rightComp24 = extractelement <3 x float> %u, i32 2
  %element26 = fmul float %leftComp, %rightComp24
  %element29 = fmul float %leftComp1, %rightComp24
  %element32 = fmul float %leftComp4, %rightComp24
  %element35 = fmul float %leftComp7, %rightComp24
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %element26, i32 0, float %element29, i32 0, float %element32, i32 0, float %element35, i32 0)
  %column38 = fadd <4 x float> %0, <float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %column40 = fadd <4 x float> %1, <float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00>
  %column42 = fadd <4 x float> %2, <float 0.000000e+00, float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00>
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1027, i32 -1, i32 1), !gla.input !5
  %3 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float> undef, i32 15, <3 x float> %Color, i32 0, <3 x float> %Color, i32 1, <3 x float> %Color, i32 2, float 1.000000e+00, i32 0)
  %dotres = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %3, <4 x float> %column38)
  %dotres46 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %3, <4 x float> %column40)
  %dotres48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %3, <4 x float> %column42)
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres, i32 0, float %dotres46, i32 0, float %dotres48, i32 0, float 1.000000e+00, i32 0)
  %FragColor_shadow50 = fmul <4 x float> %3, %4
  %row = extractelement <4 x float> %column38, i32 0
  %5 = fmul float %leftComp, %row
  %row53 = extractelement <4 x float> %column38, i32 1
  %6 = fmul float %leftComp, %row53
  %row54 = extractelement <4 x float> %column38, i32 2
  %7 = fmul float %leftComp, %row54
  %row55 = extractelement <4 x float> %column38, i32 3
  %8 = fmul float %leftComp, %row55
  %row57 = extractelement <4 x float> %column40, i32 0
  %9 = fmul float %leftComp, %row57
  %row58 = extractelement <4 x float> %column40, i32 1
  %10 = fmul float %leftComp, %row58
  %row59 = extractelement <4 x float> %column40, i32 2
  %11 = fmul float %leftComp, %row59
  %row60 = extractelement <4 x float> %column40, i32 3
  %12 = fmul float %leftComp, %row60
  %row62 = extractelement <4 x float> %column42, i32 0
  %13 = fmul float %leftComp, %row62
  %row63 = extractelement <4 x float> %column42, i32 1
  %14 = fmul float %leftComp, %row63
  %row64 = extractelement <4 x float> %column42, i32 2
  %15 = fmul float %leftComp, %row64
  %row65 = extractelement <4 x float> %column42, i32 3
  %16 = fmul float %leftComp, %row65
  %17 = load [3 x <4 x float>] addrspace(2)* @un34, align 16, !gla.uniform !9
  %column68 = extractvalue [3 x <4 x float>] %17, 0
  %column73 = extractvalue [3 x <4 x float>] %17, 1
  %column78 = extractvalue [3 x <4 x float>] %17, 2
  %18 = load [4 x <3 x float>] addrspace(2)* @um43, align 16, !gla.uniform !11
  %rightColumn = extractvalue [4 x <3 x float>] %18, 0
  %rightComp109 = extractelement <3 x float> %rightColumn, i32 0
  %product = fmul float %rightComp109, %5
  %rightComp112 = extractelement <3 x float> %rightColumn, i32 1
  %product113 = fmul float %rightComp112, %9
  %dotProduct = fadd float %product, %product113
  %rightComp116 = extractelement <3 x float> %rightColumn, i32 2
  %product117 = fmul float %rightComp116, %13
  %dotProduct118 = fadd float %product117, %dotProduct
  %product123 = fmul float %rightComp109, %6
  %product127 = fmul float %rightComp112, %10
  %dotProduct128 = fadd float %product123, %product127
  %product132 = fmul float %rightComp116, %14
  %dotProduct133 = fadd float %product132, %dotProduct128
  %product138 = fmul float %rightComp109, %7
  %product142 = fmul float %rightComp112, %11
  %dotProduct143 = fadd float %product138, %product142
  %product147 = fmul float %rightComp116, %15
  %dotProduct148 = fadd float %product147, %dotProduct143
  %product153 = fmul float %rightComp109, %8
  %product157 = fmul float %rightComp112, %12
  %dotProduct158 = fadd float %product153, %product157
  %product162 = fmul float %rightComp116, %16
  %dotProduct163 = fadd float %product162, %dotProduct158
  %19 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct118, i32 0, float %dotProduct133, i32 0, float %dotProduct148, i32 0, float %dotProduct163, i32 0)
  %rightColumn166 = extractvalue [4 x <3 x float>] %18, 1
  %rightComp169 = extractelement <3 x float> %rightColumn166, i32 0
  %product170 = fmul float %rightComp169, %5
  %rightComp173 = extractelement <3 x float> %rightColumn166, i32 1
  %product174 = fmul float %rightComp173, %9
  %dotProduct175 = fadd float %product170, %product174
  %rightComp178 = extractelement <3 x float> %rightColumn166, i32 2
  %product179 = fmul float %rightComp178, %13
  %dotProduct180 = fadd float %product179, %dotProduct175
  %product185 = fmul float %rightComp169, %6
  %product189 = fmul float %rightComp173, %10
  %dotProduct190 = fadd float %product185, %product189
  %product194 = fmul float %rightComp178, %14
  %dotProduct195 = fadd float %product194, %dotProduct190
  %product200 = fmul float %rightComp169, %7
  %product204 = fmul float %rightComp173, %11
  %dotProduct205 = fadd float %product200, %product204
  %product209 = fmul float %rightComp178, %15
  %dotProduct210 = fadd float %product209, %dotProduct205
  %product215 = fmul float %rightComp169, %8
  %product219 = fmul float %rightComp173, %12
  %dotProduct220 = fadd float %product215, %product219
  %product224 = fmul float %rightComp178, %16
  %dotProduct225 = fadd float %product224, %dotProduct220
  %20 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct180, i32 0, float %dotProduct195, i32 0, float %dotProduct210, i32 0, float %dotProduct225, i32 0)
  %rightColumn228 = extractvalue [4 x <3 x float>] %18, 2
  %rightComp231 = extractelement <3 x float> %rightColumn228, i32 0
  %product232 = fmul float %rightComp231, %5
  %rightComp235 = extractelement <3 x float> %rightColumn228, i32 1
  %product236 = fmul float %rightComp235, %9
  %dotProduct237 = fadd float %product232, %product236
  %rightComp240 = extractelement <3 x float> %rightColumn228, i32 2
  %product241 = fmul float %rightComp240, %13
  %dotProduct242 = fadd float %product241, %dotProduct237
  %product247 = fmul float %rightComp231, %6
  %product251 = fmul float %rightComp235, %10
  %dotProduct252 = fadd float %product247, %product251
  %product256 = fmul float %rightComp240, %14
  %dotProduct257 = fadd float %product256, %dotProduct252
  %product262 = fmul float %rightComp231, %7
  %product266 = fmul float %rightComp235, %11
  %dotProduct267 = fadd float %product262, %product266
  %product271 = fmul float %rightComp240, %15
  %dotProduct272 = fadd float %product271, %dotProduct267
  %product277 = fmul float %rightComp231, %8
  %product281 = fmul float %rightComp235, %12
  %dotProduct282 = fadd float %product277, %product281
  %product286 = fmul float %rightComp240, %16
  %dotProduct287 = fadd float %product286, %dotProduct282
  %21 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct242, i32 0, float %dotProduct257, i32 0, float %dotProduct272, i32 0, float %dotProduct287, i32 0)
  %rightColumn290 = extractvalue [4 x <3 x float>] %18, 3
  %rightComp293 = extractelement <3 x float> %rightColumn290, i32 0
  %product294 = fmul float %rightComp293, %5
  %rightComp297 = extractelement <3 x float> %rightColumn290, i32 1
  %product298 = fmul float %rightComp297, %9
  %dotProduct299 = fadd float %product294, %product298
  %rightComp302 = extractelement <3 x float> %rightColumn290, i32 2
  %product303 = fmul float %rightComp302, %13
  %dotProduct304 = fadd float %product303, %dotProduct299
  %product309 = fmul float %rightComp293, %6
  %product313 = fmul float %rightComp297, %10
  %dotProduct314 = fadd float %product309, %product313
  %product318 = fmul float %rightComp302, %14
  %dotProduct319 = fadd float %product318, %dotProduct314
  %product324 = fmul float %rightComp293, %7
  %product328 = fmul float %rightComp297, %11
  %dotProduct329 = fadd float %product324, %product328
  %product333 = fmul float %rightComp302, %15
  %dotProduct334 = fadd float %product333, %dotProduct329
  %product339 = fmul float %rightComp293, %8
  %product343 = fmul float %rightComp297, %12
  %dotProduct344 = fadd float %product339, %product343
  %product348 = fmul float %rightComp302, %16
  %dotProduct349 = fadd float %product348, %dotProduct344
  %22 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct304, i32 0, float %dotProduct319, i32 0, float %dotProduct334, i32 0, float %dotProduct349, i32 0)
  %column354 = fadd <4 x float> %column68, %19
  %column357 = fadd <4 x float> %column73, %20
  %column360 = fadd <4 x float> %column78, %21
  %column363 = fadd <4 x float> %22, <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>
  %row366 = extractelement <4 x float> %column354, i32 0
  %23 = fsub float 0.000000e+00, %row366
  %row367 = extractelement <4 x float> %column354, i32 1
  %24 = fsub float 0.000000e+00, %row367
  %row368 = extractelement <4 x float> %column354, i32 2
  %25 = fsub float 0.000000e+00, %row368
  %row369 = extractelement <4 x float> %column354, i32 3
  %26 = fsub float 0.000000e+00, %row369
  %row371 = extractelement <4 x float> %column357, i32 0
  %27 = fsub float 0.000000e+00, %row371
  %row372 = extractelement <4 x float> %column357, i32 1
  %28 = fsub float 0.000000e+00, %row372
  %row373 = extractelement <4 x float> %column357, i32 2
  %29 = fsub float 0.000000e+00, %row373
  %row374 = extractelement <4 x float> %column357, i32 3
  %30 = fsub float 0.000000e+00, %row374
  %row376 = extractelement <4 x float> %column360, i32 0
  %31 = fsub float 0.000000e+00, %row376
  %row377 = extractelement <4 x float> %column360, i32 1
  %32 = fsub float 0.000000e+00, %row377
  %row378 = extractelement <4 x float> %column360, i32 2
  %33 = fsub float 0.000000e+00, %row378
  %row379 = extractelement <4 x float> %column360, i32 3
  %34 = fsub float 0.000000e+00, %row379
  %row381 = extractelement <4 x float> %column363, i32 0
  %35 = fsub float 0.000000e+00, %row381
  %row382 = extractelement <4 x float> %column363, i32 1
  %36 = fsub float 0.000000e+00, %row382
  %row383 = extractelement <4 x float> %column363, i32 2
  %37 = fsub float 0.000000e+00, %row383
  %row384 = extractelement <4 x float> %column363, i32 3
  %38 = fsub float 0.000000e+00, %row384
  %product391 = fmul float %leftComp, %23
  %product394 = fmul float %leftComp1, %27
  %dotProduct395 = fadd float %product391, %product394
  %product398 = fmul float %leftComp4, %31
  %dotProduct399 = fadd float %product398, %dotProduct395
  %product402 = fmul float %leftComp7, %35
  %dotProduct403 = fadd float %product402, %dotProduct399
  %product406 = fmul float %leftComp, %24
  %product409 = fmul float %leftComp1, %28
  %dotProduct410 = fadd float %product406, %product409
  %product413 = fmul float %leftComp4, %32
  %dotProduct414 = fadd float %product413, %dotProduct410
  %product417 = fmul float %leftComp7, %36
  %dotProduct418 = fadd float %product417, %dotProduct414
  %product421 = fmul float %leftComp, %25
  %product424 = fmul float %leftComp1, %29
  %dotProduct425 = fadd float %product421, %product424
  %product428 = fmul float %leftComp4, %33
  %dotProduct429 = fadd float %product428, %dotProduct425
  %product432 = fmul float %leftComp7, %37
  %dotProduct433 = fadd float %product432, %dotProduct429
  %product436 = fmul float %leftComp, %26
  %product439 = fmul float %leftComp1, %30
  %dotProduct440 = fadd float %product436, %product439
  %product443 = fmul float %leftComp4, %34
  %dotProduct444 = fadd float %product443, %dotProduct440
  %product447 = fmul float %leftComp7, %38
  %dotProduct448 = fadd float %product447, %dotProduct444
  %39 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct403, i32 0, float %dotProduct418, i32 0, float %dotProduct433, i32 0, float %dotProduct448, i32 0)
  %FragColor_shadow449 = fadd <4 x float> %FragColor_shadow50, %39
  %column452 = fmul <4 x float> %column354, %column354
  %column455 = fmul <4 x float> %column357, %column357
  %column458 = fmul <4 x float> %column360, %column360
  %column461 = fmul <4 x float> %column363, %column363
  %dotres463 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %column452)
  %dotres465 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %column455)
  %dotres467 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %column458)
  %dotres469 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %column461)
  %40 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres463, i32 0, float %dotres465, i32 0, float %dotres467, i32 0, float %dotres469, i32 0)
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float> undef, i32 15, <3 x float> %rightColumn, i32 0, <3 x float> %rightColumn166, i32 0, <3 x float> %rightColumn228, i32 0, <3 x float> %rightColumn290, i32 0)
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float> undef, i32 15, <3 x float> %rightColumn, i32 1, <3 x float> %rightColumn166, i32 1, <3 x float> %rightColumn228, i32 1, <3 x float> %rightColumn290, i32 1)
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float> undef, i32 15, <3 x float> %rightColumn, i32 2, <3 x float> %rightColumn166, i32 2, <3 x float> %rightColumn228, i32 2, <3 x float> %rightColumn290, i32 2)
  %dotres506 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %40, <4 x float> %41)
  %dotres508 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %40, <4 x float> %42)
  %dotres510 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %40, <4 x float> %43)
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres506, i32 0, float %dotres508, i32 0, float %dotres510, i32 0, float 1.000000e+00, i32 0)
  %FragColor_shadow512 = fmul <4 x float> %40, %44
  %45 = load [4 x <4 x float>] addrspace(2)* @um4, align 16, !gla.uniform !12
  %column513 = extractvalue [4 x <4 x float>] %45, 0
  %element514 = extractelement <4 x float> %column513, i32 0
  %element515 = extractelement <4 x float> %column513, i32 1
  %element516 = extractelement <4 x float> %column513, i32 2
  %element517 = extractelement <4 x float> %column513, i32 3
  %column518 = extractvalue [4 x <4 x float>] %45, 1
  %element519 = extractelement <4 x float> %column518, i32 0
  %element520 = extractelement <4 x float> %column518, i32 1
  %element521 = extractelement <4 x float> %column518, i32 2
  %element522 = extractelement <4 x float> %column518, i32 3
  %column523 = extractvalue [4 x <4 x float>] %45, 2
  %element524 = extractelement <4 x float> %column523, i32 0
  %element525 = extractelement <4 x float> %column523, i32 1
  %element526 = extractelement <4 x float> %column523, i32 2
  %element527 = extractelement <4 x float> %column523, i32 3
  %column528 = extractvalue [4 x <4 x float>] %45, 3
  %element529 = extractelement <4 x float> %column528, i32 0
  %element530 = extractelement <4 x float> %column528, i32 1
  %element531 = extractelement <4 x float> %column528, i32 2
  %element532 = extractelement <4 x float> %column528, i32 3
  %46 = fmul float %element526, %element532
  %47 = fmul float %element531, %element527
  %48 = fsub float %46, %47
  %49 = fmul float %element520, %48
  %50 = fmul float %element521, %element532
  %51 = fmul float %element531, %element522
  %52 = fsub float %50, %51
  %53 = fmul float %element525, %52
  %54 = fsub float %49, %53
  %55 = fmul float %element521, %element527
  %56 = fmul float %element526, %element522
  %57 = fsub float %55, %56
  %58 = fmul float %element530, %57
  %59 = fadd float %58, %54
  %60 = fmul float %element514, %59
  %61 = fmul float %element515, %48
  %62 = fmul float %element516, %element532
  %63 = fmul float %element531, %element517
  %64 = fsub float %62, %63
  %65 = fmul float %element525, %64
  %66 = fsub float %61, %65
  %67 = fmul float %element516, %element527
  %68 = fmul float %element526, %element517
  %69 = fsub float %67, %68
  %70 = fmul float %element530, %69
  %71 = fadd float %70, %66
  %72 = fmul float %element519, %71
  %73 = fsub float %60, %72
  %74 = fmul float %element515, %52
  %75 = fmul float %element520, %64
  %76 = fsub float %74, %75
  %77 = fmul float %element516, %element522
  %78 = fmul float %element521, %element517
  %79 = fsub float %77, %78
  %80 = fmul float %element530, %79
  %81 = fadd float %80, %76
  %82 = fmul float %element524, %81
  %83 = fadd float %82, %73
  %84 = fmul float %element515, %57
  %85 = fmul float %element520, %69
  %86 = fsub float %84, %85
  %87 = fmul float %element525, %79
  %88 = fadd float %87, %86
  %89 = fmul float %element529, %88
  %90 = fsub float %83, %89
  %91 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %90, <4 x i32> zeroinitializer)
  %FragColor_shadow534 = fmul <4 x float> %FragColor_shadow512, %91
  %92 = load [2 x <2 x float>] addrspace(2)* @um2, align 8, !gla.uniform !13
  %column535 = extractvalue [2 x <2 x float>] %92, 0
  %element536 = extractelement <2 x float> %column535, i32 0
  %element537 = extractelement <2 x float> %column535, i32 1
  %column538 = extractvalue [2 x <2 x float>] %92, 1
  %element539 = extractelement <2 x float> %column538, i32 0
  %element540 = extractelement <2 x float> %column538, i32 1
  %93 = fmul float %element536, %element540
  %94 = fmul float %element539, %element537
  %95 = fsub float %93, %94
  %96 = fdiv float 1.000000e+00, %95
  %97 = fmul float %96, %element540
  %98 = fmul float %96, %element539
  %99 = fsub float -0.000000e+00, %98
  %100 = fmul float %96, %element537
  %101 = fsub float -0.000000e+00, %100
  %102 = fmul float %96, %element536
  %103 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %97, i32 0, float %99, i32 0, float %101, i32 0, float %102, i32 0)
  %FragColor_shadow550 = fmul <4 x float> %103, %FragColor_shadow534
  %104 = load [3 x <3 x float>] addrspace(2)* @um3, align 16, !gla.uniform !14
  %column551 = extractvalue [3 x <3 x float>] %104, 0
  %element552 = extractelement <3 x float> %column551, i32 0
  %element553 = extractelement <3 x float> %column551, i32 1
  %element554 = extractelement <3 x float> %column551, i32 2
  %column555 = extractvalue [3 x <3 x float>] %104, 1
  %element556 = extractelement <3 x float> %column555, i32 0
  %element557 = extractelement <3 x float> %column555, i32 1
  %element558 = extractelement <3 x float> %column555, i32 2
  %column559 = extractvalue [3 x <3 x float>] %104, 2
  %element560 = extractelement <3 x float> %column559, i32 0
  %element561 = extractelement <3 x float> %column559, i32 1
  %element562 = extractelement <3 x float> %column559, i32 2
  %105 = fmul float %element552, %element561
  %106 = fmul float %element560, %element553
  %107 = fsub float %105, %106
  %108 = fmul float %element557, %element562
  %109 = fmul float %element561, %element558
  %110 = fsub float %108, %109
  %111 = fmul float %element552, %110
  %112 = fmul float %element553, %element562
  %113 = fmul float %element561, %element554
  %114 = fsub float %112, %113
  %115 = fmul float %element556, %114
  %116 = fsub float %111, %115
  %117 = fmul float %element553, %element558
  %118 = fmul float %element557, %element554
  %119 = fsub float %117, %118
  %120 = fmul float %element560, %119
  %121 = fadd float %120, %116
  %122 = fdiv float 1.000000e+00, %121
  %123 = fmul float %122, %107
  %124 = fsub float -0.000000e+00, %123
  %125 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %124, <4 x i32> zeroinitializer)
  %FragColor_shadow579 = fmul <4 x float> %125, %FragColor_shadow550
  %126 = fmul float %element519, %48
  %127 = fmul float %element524, %52
  %128 = fsub float %126, %127
  %129 = fmul float %element529, %57
  %130 = fadd float %129, %128
  %131 = fmul float %element514, %48
  %132 = fmul float %element524, %64
  %133 = fsub float %131, %132
  %134 = fmul float %element529, %69
  %135 = fadd float %134, %133
  %136 = fmul float %element514, %52
  %137 = fmul float %element519, %64
  %138 = fsub float %136, %137
  %139 = fmul float %element529, %79
  %140 = fadd float %139, %138
  %141 = fmul float %element514, %57
  %142 = fmul float %element519, %69
  %143 = fsub float %141, %142
  %144 = fmul float %element524, %79
  %145 = fadd float %144, %143
  %146 = fmul float %element525, %element532
  %147 = fmul float %element530, %element527
  %148 = fsub float %146, %147
  %149 = fmul float %element519, %148
  %150 = fmul float %element520, %element532
  %151 = fmul float %element530, %element522
  %152 = fsub float %150, %151
  %153 = fmul float %element524, %152
  %154 = fsub float %149, %153
  %155 = fmul float %element520, %element527
  %156 = fmul float %element525, %element522
  %157 = fsub float %155, %156
  %158 = fmul float %element529, %157
  %159 = fadd float %158, %154
  %160 = fmul float %element514, %148
  %161 = fmul float %element515, %element532
  %162 = fmul float %element530, %element517
  %163 = fsub float %161, %162
  %164 = fmul float %element524, %163
  %165 = fsub float %160, %164
  %166 = fmul float %element515, %element527
  %167 = fmul float %element525, %element517
  %168 = fsub float %166, %167
  %169 = fmul float %element529, %168
  %170 = fadd float %169, %165
  %171 = fmul float %element514, %152
  %172 = fmul float %element519, %163
  %173 = fsub float %171, %172
  %174 = fmul float %element515, %element522
  %175 = fmul float %element520, %element517
  %176 = fsub float %174, %175
  %177 = fmul float %element529, %176
  %178 = fadd float %177, %173
  %179 = fmul float %element514, %157
  %180 = fmul float %element519, %168
  %181 = fsub float %179, %180
  %182 = fmul float %element524, %176
  %183 = fadd float %182, %181
  %184 = fmul float %element525, %element531
  %185 = fmul float %element530, %element526
  %186 = fsub float %184, %185
  %187 = fmul float %element519, %186
  %188 = fmul float %element520, %element531
  %189 = fmul float %element530, %element521
  %190 = fsub float %188, %189
  %191 = fmul float %element524, %190
  %192 = fsub float %187, %191
  %193 = fmul float %element520, %element526
  %194 = fmul float %element525, %element521
  %195 = fsub float %193, %194
  %196 = fmul float %element529, %195
  %197 = fadd float %196, %192
  %198 = fmul float %element514, %186
  %199 = fmul float %element515, %element531
  %200 = fmul float %element530, %element516
  %201 = fsub float %199, %200
  %202 = fmul float %element524, %201
  %203 = fsub float %198, %202
  %204 = fmul float %element515, %element526
  %205 = fmul float %element525, %element516
  %206 = fsub float %204, %205
  %207 = fmul float %element529, %206
  %208 = fadd float %207, %203
  %209 = fmul float %element514, %190
  %210 = fmul float %element519, %201
  %211 = fsub float %209, %210
  %212 = fmul float %element515, %element521
  %213 = fmul float %element520, %element516
  %214 = fsub float %212, %213
  %215 = fmul float %element529, %214
  %216 = fadd float %215, %211
  %217 = fmul float %element514, %195
  %218 = fmul float %element519, %206
  %219 = fsub float %217, %218
  %220 = fmul float %element524, %214
  %221 = fadd float %220, %219
  %222 = fdiv float 1.000000e+00, %90
  %223 = fmul float %222, %59
  %224 = fmul float %222, %130
  %225 = fsub float -0.000000e+00, %224
  %226 = fmul float %222, %159
  %227 = fmul float %222, %197
  %228 = fsub float -0.000000e+00, %227
  %229 = fmul float %222, %71
  %230 = fsub float -0.000000e+00, %229
  %231 = fmul float %222, %135
  %232 = fmul float %222, %170
  %233 = fsub float -0.000000e+00, %232
  %234 = fmul float %222, %208
  %235 = fmul float %222, %81
  %236 = fmul float %222, %140
  %237 = fsub float -0.000000e+00, %236
  %238 = fmul float %222, %178
  %239 = fmul float %222, %216
  %240 = fsub float -0.000000e+00, %239
  %241 = fmul float %222, %88
  %242 = fsub float -0.000000e+00, %241
  %243 = fmul float %222, %145
  %244 = fmul float %222, %183
  %245 = fsub float -0.000000e+00, %244
  %246 = fmul float %222, %221
  %247 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %223, i32 0, float %230, i32 0, float %235, i32 0, float %242, i32 0)
  %248 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %225, i32 0, float %231, i32 0, float %237, i32 0, float %243, i32 0)
  %249 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %226, i32 0, float %233, i32 0, float %238, i32 0, float %245, i32 0)
  %250 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %228, i32 0, float %234, i32 0, float %240, i32 0, float %246, i32 0)
  %dotres625 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %247)
  %dotres627 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %248)
  %dotres629 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %249)
  %dotres631 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %250)
  %251 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres625, i32 0, float %dotres627, i32 0, float %dotres629, i32 0, float %dotres631, i32 0)
  %column635 = fmul <4 x float> %column68, %column68
  %dotres643 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %251, <4 x float> %column635)
  %column638 = fmul <4 x float> %column73, %column73
  %dotres645 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %251, <4 x float> %column638)
  %column641 = fmul <4 x float> %column78, %column78
  %dotres647 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %251, <4 x float> %column641)
  %252 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres643, i32 0, float %dotres645, i32 0, float %dotres647, i32 0, float %dotres631, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 1026, i32 -1, <4 x float> %252), !gla.output !7
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3, !5}
!gla.outputs = !{!7}
!gla.uniforms = !{!9, !11, !12, !13, !14, !15, !16, !17}
!gla.noStaticUse = !{!15, !16, !17}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"v", i32 1, <4 x float>* @v_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"u", i32 1, <3 x float>* @u_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}
!7 = metadata !{metadata !"FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!9 = metadata !{metadata !"un34", i32 12, [3 x <4 x float>]* @un34_typeProxy, metadata !10}
!10 = metadata !{i32 3, i32 0, i32 1024, null}
!11 = metadata !{metadata !"um43", i32 12, [4 x <3 x float>]* @um43_typeProxy, metadata !10}
!12 = metadata !{metadata !"um4", i32 12, [4 x <4 x float>]* @um4_typeProxy, metadata !10}
!13 = metadata !{metadata !"um2", i32 12, [2 x <2 x float>]* @um2_typeProxy, metadata !10}
!14 = metadata !{metadata !"um3", i32 12, [3 x <3 x float>]* @um3_typeProxy, metadata !10}
!15 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !10}
!16 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !10}
!17 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !10}
#version 150 core
// LunarGOO output
uniform mat3x4 un34;
uniform mat4x3 um43;
uniform mat4 um4;
uniform mat2 um2;
uniform mat3 um3;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
in vec4 v;
in vec3 u;
in vec3 Color;
out vec4 FragColor;
const vec4 const37 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 const39 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 const41 = vec4(0.0, 0.0, 4.3, 0.0);
const float const43 = 1.0;
const vec4 const156 = vec4(0.0, 0.0, 0.0, 1.0);
const float const158 = 0.0;
const float const281 = 0.0;

void main()
{
    float element_c1 = u.x * v.x;
    float element_c2 = u.x * v.y;
    float element_c3 = u.x * v.z;
    float element_c4 = u.x * v.w;
    vec4 temp25 = vec4(element_c1, element_c2, element_c3, element_c4);
    float element_c5 = u.y * v.x;
    float element_c6 = u.y * v.y;
    float element_c7 = u.y * v.z;
    float element_c8 = u.y * v.w;
    vec4 temp30 = vec4(element_c5, element_c6, element_c7, element_c8);
    float element_c9 = u.z * v.x;
    float element_c10 = u.z * v.y;
    float element_c11 = u.z * v.z;
    float element_c12 = u.z * v.w;
    vec4 temp35 = vec4(element_c9, element_c10, element_c11, element_c12);
    vec4 column_c13 = temp25 + const37;
    vec4 column_c14 = temp30 + const39;
    vec4 column_c15 = temp35 + const41;
    vec4 temp42 = vec4(Color.x, Color.y, Color.z, const43);
    float dotres_c16 = dot(temp42, column_c13);
    float dotres_c17 = dot(temp42, column_c14);
    float dotres_c18 = dot(temp42, column_c15);
    vec4 temp47 = vec4(dotres_c16, dotres_c17, dotres_c18, const43);
    vec4 FragColor_shadow_c19 = temp42 * temp47;
    float temp49 = column_c13.x * v.x;
    float temp50 = column_c13.y * v.x;
    float temp51 = column_c13.z * v.x;
    float temp52 = column_c13.w * v.x;
    float temp53 = column_c14.x * v.x;
    float temp54 = column_c14.y * v.x;
    float temp55 = column_c14.z * v.x;
    float temp56 = column_c14.w * v.x;
    float temp57 = column_c15.x * v.x;
    float temp58 = column_c15.y * v.x;
    float temp59 = column_c15.z * v.x;
    float temp60 = column_c15.w * v.x;
    vec4 column_c20 = un34[0];
    vec4 column_c21 = un34[1];
    vec4 column_c22 = un34[2];
    vec3 rightColumn_c23 = um43[0];
    float product_c24 = rightColumn_c23.x * temp49;
    float product_c25 = rightColumn_c23.y * temp53;
    float dotProduct_c26 = product_c24 + product_c25;
    float product_c27 = rightColumn_c23.z * temp57;
    float dotProduct_c28 = dotProduct_c26 + product_c27;
    float product_c29 = rightColumn_c23.x * temp50;
    float product_c30 = rightColumn_c23.y * temp54;
    float dotProduct_c31 = product_c29 + product_c30;
    float product_c32 = rightColumn_c23.z * temp58;
    float dotProduct_c33 = dotProduct_c31 + product_c32;
    float product_c34 = rightColumn_c23.x * temp51;
    float product_c35 = rightColumn_c23.y * temp55;
    float dotProduct_c36 = product_c34 + product_c35;
    float product_c37 = rightColumn_c23.z * temp59;
    float dotProduct_c38 = dotProduct_c36 + product_c37;
    float product_c39 = rightColumn_c23.x * temp52;
    float product_c40 = rightColumn_c23.y * temp56;
    float dotProduct_c41 = product_c39 + product_c40;
    float product_c42 = rightColumn_c23.z * temp60;
    float dotProduct_c43 = dotProduct_c41 + product_c42;
    vec4 temp85 = vec4(dotProduct_c28, dotProduct_c33, dotProduct_c38, dotProduct_c43);
    vec3 rightColumn_c44 = um43[1];
    float product_c45 = rightColumn_c44.x * temp49;
    float product_c46 = rightColumn_c44.y * temp53;
    float dotProduct_c47 = product_c45 + product_c46;
    float product_c48 = rightColumn_c44.z * temp57;
    float dotProduct_c49 = dotProduct_c47 + product_c48;
    float product_c50 = rightColumn_c44.x * temp50;
    float product_c51 = rightColumn_c44.y * temp54;
    float dotProduct_c52 = product_c50 + product_c51;
    float product_c53 = rightColumn_c44.z * temp58;
    float dotProduct_c54 = dotProduct_c52 + product_c53;
    float product_c55 = rightColumn_c44.x * temp51;
    float product_c56 = rightColumn_c44.y * temp55;
    float dotProduct_c57 = product_c55 + product_c56;
    float product_c58 = rightColumn_c44.z * temp59;
    float dotProduct_c59 = dotProduct_c57 + product_c58;
    float product_c60 = rightColumn_c44.x * temp52;
    float product_c61 = rightColumn_c44.y * temp56;
    float dotProduct_c62 = product_c60 + product_c61;
    float product_c63 = rightColumn_c44.z * temp60;
    float dotProduct_c64 = dotProduct_c62 + product_c63;
    vec4 temp107 = vec4(dotProduct_c49, dotProduct_c54, dotProduct_c59, dotProduct_c64);
    vec3 rightColumn_c65 = um43[2];
    float product_c66 = rightColumn_c65.x * temp49;
    float product_c67 = rightColumn_c65.y * temp53;
    float dotProduct_c68 = product_c66 + product_c67;
    float product_c69 = rightColumn_c65.z * temp57;
    float dotProduct_c70 = dotProduct_c68 + product_c69;
    float product_c71 = rightColumn_c65.x * temp50;
    float product_c72 = rightColumn_c65.y * temp54;
    float dotProduct_c73 = product_c71 + product_c72;
    float product_c74 = rightColumn_c65.z * temp58;
    float dotProduct_c75 = dotProduct_c73 + product_c74;
    float product_c76 = rightColumn_c65.x * temp51;
    float product_c77 = rightColumn_c65.y * temp55;
    float dotProduct_c78 = product_c76 + product_c77;
    float product_c79 = rightColumn_c65.z * temp59;
    float dotProduct_c80 = dotProduct_c78 + product_c79;
    float product_c81 = rightColumn_c65.x * temp52;
    float product_c82 = rightColumn_c65.y * temp56;
    float dotProduct_c83 = product_c81 + product_c82;
    float product_c84 = rightColumn_c65.z * temp60;
    float dotProduct_c85 = dotProduct_c83 + product_c84;
    vec4 temp129 = vec4(dotProduct_c70, dotProduct_c75, dotProduct_c80, dotProduct_c85);
    vec3 rightColumn_c86 = um43[3];
    float product_c87 = rightColumn_c86.x * temp49;
    float product_c88 = rightColumn_c86.y * temp53;
    float dotProduct_c89 = product_c87 + product_c88;
    float product_c90 = rightColumn_c86.z * temp57;
    float dotProduct_c91 = dotProduct_c89 + product_c90;
    float product_c92 = rightColumn_c86.x * temp50;
    float product_c93 = rightColumn_c86.y * temp54;
    float dotProduct_c94 = product_c92 + product_c93;
    float product_c95 = rightColumn_c86.z * temp58;
    float dotProduct_c96 = dotProduct_c94 + product_c95;
    float product_c97 = rightColumn_c86.x * temp51;
    float product_c98 = rightColumn_c86.y * temp55;
    float dotProduct_c99 = product_c97 + product_c98;
    float product_c100 = rightColumn_c86.z * temp59;
    float dotProduct_c101 = dotProduct_c99 + product_c100;
    float product_c102 = rightColumn_c86.x * temp52;
    float product_c103 = rightColumn_c86.y * temp56;
    float dotProduct_c104 = product_c102 + product_c103;
    float product_c105 = rightColumn_c86.z * temp60;
    float dotProduct_c106 = dotProduct_c104 + product_c105;
    vec4 temp151 = vec4(dotProduct_c91, dotProduct_c96, dotProduct_c101, dotProduct_c106);
    vec4 column_c107 = column_c20 + temp85;
    vec4 column_c108 = column_c21 + temp107;
    vec4 column_c109 = column_c22 + temp129;
    vec4 column_c110 = temp151 + const156;
    float temp157 = const158 - column_c107.x;
    float temp159 = const158 - column_c107.y;
    float temp160 = const158 - column_c107.z;
    float temp161 = const158 - column_c107.w;
    float temp162 = const158 - column_c108.x;
    float temp163 = const158 - column_c108.y;
    float temp164 = const158 - column_c108.z;
    float temp165 = const158 - column_c108.w;
    float temp166 = const158 - column_c109.x;
    float temp167 = const158 - column_c109.y;
    float temp168 = const158 - column_c109.z;
    float temp169 = const158 - column_c109.w;
    float temp170 = const158 - column_c110.x;
    float temp171 = const158 - column_c110.y;
    float temp172 = const158 - column_c110.z;
    float temp173 = const158 - column_c110.w;
    float product_c111 = temp157 * v.x;
    float product_c112 = temp162 * v.y;
    float dotProduct_c113 = product_c111 + product_c112;
    float product_c114 = temp166 * v.z;
    float dotProduct_c115 = dotProduct_c113 + product_c114;
    float product_c116 = temp170 * v.w;
    float dotProduct_c117 = dotProduct_c115 + product_c116;
    float product_c118 = temp159 * v.x;
    float product_c119 = temp163 * v.y;
    float dotProduct_c120 = product_c118 + product_c119;
    float product_c121 = temp167 * v.z;
    float dotProduct_c122 = dotProduct_c120 + product_c121;
    float product_c123 = temp171 * v.w;
    float dotProduct_c124 = dotProduct_c122 + product_c123;
    float product_c125 = temp160 * v.x;
    float product_c126 = temp164 * v.y;
    float dotProduct_c127 = product_c125 + product_c126;
    float product_c128 = temp168 * v.z;
    float dotProduct_c129 = dotProduct_c127 + product_c128;
    float product_c130 = temp172 * v.w;
    float dotProduct_c131 = dotProduct_c129 + product_c130;
    float product_c132 = temp161 * v.x;
    float product_c133 = temp165 * v.y;
    float dotProduct_c134 = product_c132 + product_c133;
    float product_c135 = temp169 * v.z;
    float dotProduct_c136 = dotProduct_c134 + product_c135;
    float product_c137 = temp173 * v.w;
    float dotProduct_c138 = dotProduct_c136 + product_c137;
    vec4 temp202 = vec4(dotProduct_c117, dotProduct_c124, dotProduct_c131, dotProduct_c138);
    vec4 FragColor_shadow_c139 = FragColor_shadow_c19 + temp202;
    vec4 column_c140 = column_c107 * column_c107;
    vec4 column_c141 = column_c108 * column_c108;
    vec4 column_c142 = column_c109 * column_c109;
    vec4 column_c143 = column_c110 * column_c110;
    float dotres_c144 = dot(FragColor_shadow_c139, column_c140);
    float dotres_c145 = dot(FragColor_shadow_c139, column_c141);
    float dotres_c146 = dot(FragColor_shadow_c139, column_c142);
    float dotres_c147 = dot(FragColor_shadow_c139, column_c143);
    vec4 temp212 = vec4(dotres_c144, dotres_c145, dotres_c146, dotres_c147);
    vec4 temp213 = vec4(rightColumn_c23.x, rightColumn_c44.x, rightColumn_c65.x, rightColumn_c86.x);
    vec4 temp214 = vec4(rightColumn_c23.y, rightColumn_c44.y, rightColumn_c65.y, rightColumn_c86.y);
    vec4 temp215 = vec4(rightColumn_c23.z, rightColumn_c44.z, rightColumn_c65.z, rightColumn_c86.z);
    float dotres_c148 = dot(temp212, temp213);
    float dotres_c149 = dot(temp212, temp214);
    float dotres_c150 = dot(temp212, temp215);
    vec4 temp219 = vec4(dotres_c148, dotres_c149, dotres_c150, const43);
    vec4 FragColor_shadow_c151 = temp212 * temp219;
    vec4 column_c152 = um4[0];
    vec4 column_c153 = um4[1];
    vec4 column_c154 = um4[2];
    vec4 column_c155 = um4[3];
    float temp225 = column_c154.z * column_c155.w;
    float temp226 = column_c154.w * column_c155.z;
    float temp227 = temp225 - temp226;
    float temp228 = column_c153.y * temp227;
    float temp229 = column_c153.z * column_c155.w;
    float temp230 = column_c153.w * column_c155.z;
    float temp231 = temp229 - temp230;
    float temp232 = column_c154.y * temp231;
    float temp233 = temp228 - temp232;
    float temp234 = column_c153.z * column_c154.w;
    float temp235 = column_c153.w * column_c154.z;
    float temp236 = temp234 - temp235;
    float temp237 = column_c155.y * temp236;
    float temp238 = temp233 + temp237;
    float temp239 = column_c152.x * temp238;
    float temp240 = column_c152.y * temp227;
    float temp241 = column_c152.z * column_c155.w;
    float temp242 = column_c152.w * column_c155.z;
    float temp243 = temp241 - temp242;
    float temp244 = column_c154.y * temp243;
    float temp245 = temp240 - temp244;
    float temp246 = column_c152.z * column_c154.w;
    float temp247 = column_c152.w * column_c154.z;
    float temp248 = temp246 - temp247;
    float temp249 = column_c155.y * temp248;
    float temp250 = temp245 + temp249;
    float temp251 = column_c153.x * temp250;
    float temp252 = temp239 - temp251;
    float temp253 = column_c152.y * temp231;
    float temp254 = column_c153.y * temp243;
    float temp255 = temp253 - temp254;
    float temp256 = column_c152.z * column_c153.w;
    float temp257 = column_c152.w * column_c153.z;
    float temp258 = temp256 - temp257;
    float temp259 = column_c155.y * temp258;
    float temp260 = temp255 + temp259;
    float temp261 = column_c154.x * temp260;
    float temp262 = temp252 + temp261;
    float temp263 = column_c152.y * temp236;
    float temp264 = column_c153.y * temp248;
    float temp265 = temp263 - temp264;
    float temp266 = column_c154.y * temp258;
    float temp267 = temp265 + temp266;
    float temp268 = column_c155.x * temp267;
    float temp269 = temp262 - temp268;
    vec4 temp270 = vec4(temp269);
    vec4 FragColor_shadow_c156 = FragColor_shadow_c151 * temp270;
    vec2 column_c157 = um2[0];
    vec2 column_c158 = um2[1];
    float temp274 = column_c157.x * column_c158.y;
    float temp275 = column_c157.y * column_c158.x;
    float temp276 = temp274 - temp275;
    float temp277 = const43 / temp276;
    float temp278 = column_c158.y * temp277;
    float temp279 = column_c158.x * temp277;
    float temp280 = const281 - temp279;
    float temp282 = column_c157.y * temp277;
    float temp283 = const281 - temp282;
    float temp284 = column_c157.x * temp277;
    vec4 temp285 = vec4(temp278, temp280, temp283, temp284);
    vec4 FragColor_shadow_c159 = FragColor_shadow_c156 * temp285;
    vec3 column_c160 = um3[0];
    vec3 column_c161 = um3[1];
    vec3 column_c162 = um3[2];
    float temp290 = column_c160.x * column_c162.y;
    float temp291 = column_c160.y * column_c162.x;
    float temp292 = temp290 - temp291;
    float temp293 = column_c161.y * column_c162.z;
    float temp294 = column_c161.z * column_c162.y;
    float temp295 = temp293 - temp294;
    float temp296 = column_c160.x * temp295;
    float temp297 = column_c160.y * column_c162.z;
    float temp298 = column_c160.z * column_c162.y;
    float temp299 = temp297 - temp298;
    float temp300 = column_c161.x * temp299;
    float temp301 = temp296 - temp300;
    float temp302 = column_c160.y * column_c161.z;
    float temp303 = column_c160.z * column_c161.y;
    float temp304 = temp302 - temp303;
    float temp305 = column_c162.x * temp304;
    float temp306 = temp301 + temp305;
    float temp307 = const43 / temp306;
    float temp308 = temp292 * temp307;
    float temp309 = const281 - temp308;
    vec4 temp310 = vec4(temp309);
    vec4 FragColor_shadow_c163 = FragColor_shadow_c159 * temp310;
    float temp312 = column_c153.x * temp227;
    float temp313 = column_c154.x * temp231;
    float temp314 = temp312 - temp313;
    float temp315 = column_c155.x * temp236;
    float temp316 = temp314 + temp315;
    float temp317 = column_c152.x * temp227;
    float temp318 = column_c154.x * temp243;
    float temp319 = temp317 - temp318;
    float temp320 = column_c155.x * temp248;
    float temp321 = temp319 + temp320;
    float temp322 = column_c152.x * temp231;
    float temp323 = column_c153.x * temp243;
    float temp324 = temp322 - temp323;
    float temp325 = column_c155.x * temp258;
    float temp326 = temp324 + temp325;
    float temp327 = column_c152.x * temp236;
    float temp328 = column_c153.x * temp248;
    float temp329 = temp327 - temp328;
    float temp330 = column_c154.x * temp258;
    float temp331 = temp329 + temp330;
    float temp332 = column_c154.y * column_c155.w;
    float temp333 = column_c154.w * column_c155.y;
    float temp334 = temp332 - temp333;
    float temp335 = column_c153.x * temp334;
    float temp336 = column_c153.y * column_c155.w;
    float temp337 = column_c153.w * column_c155.y;
    float temp338 = temp336 - temp337;
    float temp339 = column_c154.x * temp338;
    float temp340 = temp335 - temp339;
    float temp341 = column_c153.y * column_c154.w;
    float temp342 = column_c153.w * column_c154.y;
    float temp343 = temp341 - temp342;
    float temp344 = column_c155.x * temp343;
    float temp345 = temp340 + temp344;
    float temp346 = column_c152.x * temp334;
    float temp347 = column_c152.y * column_c155.w;
    float temp348 = column_c152.w * column_c155.y;
    float temp349 = temp347 - temp348;
    float temp350 = column_c154.x * temp349;
    float temp351 = temp346 - temp350;
    float temp352 = column_c152.y * column_c154.w;
    float temp353 = column_c152.w * column_c154.y;
    float temp354 = temp352 - temp353;
    float temp355 = column_c155.x * temp354;
    float temp356 = temp351 + temp355;
    float temp357 = column_c152.x * temp338;
    float temp358 = column_c153.x * temp349;
    float temp359 = temp357 - temp358;
    float temp360 = column_c152.y * column_c153.w;
    float temp361 = column_c152.w * column_c153.y;
    float temp362 = temp360 - temp361;
    float temp363 = column_c155.x * temp362;
    float temp364 = temp359 + temp363;
    float temp365 = column_c152.x * temp343;
    float temp366 = column_c153.x * temp354;
    float temp367 = temp365 - temp366;
    float temp368 = column_c154.x * temp362;
    float temp369 = temp367 + temp368;
    float temp370 = column_c154.y * column_c155.z;
    float temp371 = column_c154.z * column_c155.y;
    float temp372 = temp370 - temp371;
    float temp373 = column_c153.x * temp372;
    float temp374 = column_c153.y * column_c155.z;
    float temp375 = column_c153.z * column_c155.y;
    float temp376 = temp374 - temp375;
    float temp377 = column_c154.x * temp376;
    float temp378 = temp373 - temp377;
    float temp379 = column_c153.y * column_c154.z;
    float temp380 = column_c153.z * column_c154.y;
    float temp381 = temp379 - temp380;
    float temp382 = column_c155.x * temp381;
    float temp383 = temp378 + temp382;
    float temp384 = column_c152.x * temp372;
    float temp385 = column_c152.y * column_c155.z;
    float temp386 = column_c152.z * column_c155.y;
    float temp387 = temp385 - temp386;
    float temp388 = column_c154.x * temp387;
    float temp389 = temp384 - temp388;
    float temp390 = column_c152.y * column_c154.z;
    float temp391 = column_c152.z * column_c154.y;
    float temp392 = temp390 - temp391;
    float temp393 = column_c155.x * temp392;
    float temp394 = temp389 + temp393;
    float temp395 = column_c152.x * temp376;
    float temp396 = column_c153.x * temp387;
    float temp397 = temp395 - temp396;
    float temp398 = column_c152.y * column_c153.z;
    float temp399 = column_c152.z * column_c153.y;
    float temp400 = temp398 - temp399;
    float temp401 = column_c155.x * temp400;
    float temp402 = temp397 + temp401;
    float temp403 = column_c152.x * temp381;
    float temp404 = column_c153.x * temp392;
    float temp405 = temp403 - temp404;
    float temp406 = column_c154.x * temp400;
    float temp407 = temp405 + temp406;
    float temp408 = const43 / temp269;
    float temp409 = temp238 * temp408;
    float temp410 = temp316 * temp408;
    float temp411 = const281 - temp410;
    float temp412 = temp345 * temp408;
    float temp413 = temp383 * temp408;
    float temp414 = const281 - temp413;
    float temp415 = temp250 * temp408;
    float temp416 = const281 - temp415;
    float temp417 = temp321 * temp408;
    float temp418 = temp356 * temp408;
    float temp419 = const281 - temp418;
    float temp420 = temp394 * temp408;
    float temp421 = temp260 * temp408;
    float temp422 = temp326 * temp408;
    float temp423 = const281 - temp422;
    float temp424 = temp364 * temp408;
    float temp425 = temp402 * temp408;
    float temp426 = const281 - temp425;
    float temp427 = temp267 * temp408;
    float temp428 = const281 - temp427;
    float temp429 = temp331 * temp408;
    float temp430 = temp369 * temp408;
    float temp431 = const281 - temp430;
    float temp432 = temp407 * temp408;
    vec4 temp433 = vec4(temp409, temp416, temp421, temp428);
    vec4 temp434 = vec4(temp411, temp417, temp423, temp429);
    vec4 temp435 = vec4(temp412, temp419, temp424, temp431);
    vec4 temp436 = vec4(temp414, temp420, temp426, temp432);
    float dotres_c164 = dot(FragColor_shadow_c163, temp433);
    float dotres_c165 = dot(FragColor_shadow_c163, temp434);
    float dotres_c166 = dot(FragColor_shadow_c163, temp435);
    float dotres_c167 = dot(FragColor_shadow_c163, temp436);
    vec4 temp441 = vec4(dotres_c164, dotres_c165, dotres_c166, dotres_c167);
    vec4 column_c168 = column_c20 * column_c20;
    float dotres_c169 = dot(temp441, column_c168);
    vec4 column_c170 = column_c21 * column_c21;
    float dotres_c171 = dot(temp441, column_c170);
    vec4 column_c172 = column_c22 * column_c22;
    float dotres_c173 = dot(temp441, column_c172);
    vec4 temp448 = vec4(dotres_c169, dotres_c171, dotres_c173, dotres_c167);
    FragColor = temp448;
    
}


#version 150 core
// LunarGOO output
uniform mat3x4 un34;
uniform mat4x3 um43;
uniform mat4 um4;
uniform mat2 um2;
uniform mat3 um3;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
in vec3 u;
in vec4 v;
in vec3 Color;
out vec4 FragColor;
const vec4 const37 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 const39 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 const41 = vec4(0.0, 0.0, 4.3, 0.0);
const float const43 = 1.0;
const vec4 const149 = vec4(0.0, 0.0, 0.0, 1.0);
const float const151 = 0.0;

void main()
{
    float element_c1 = u.x * v.x;
    float element_c2 = u.x * v.y;
    float element_c3 = u.x * v.z;
    float element_c4 = u.x * v.w;
    vec4 temp25 = vec4(element_c1, element_c2, element_c3, element_c4);
    float element_c5 = u.y * v.x;
    float element_c6 = u.y * v.y;
    float element_c7 = u.y * v.z;
    float element_c8 = u.y * v.w;
    vec4 temp30 = vec4(element_c5, element_c6, element_c7, element_c8);
    float element_c9 = u.z * v.x;
    float element_c10 = u.z * v.y;
    float element_c11 = u.z * v.z;
    float element_c12 = u.z * v.w;
    vec4 temp35 = vec4(element_c9, element_c10, element_c11, element_c12);
    vec4 column_c13 = temp25 + const37;
    vec4 column_c14 = temp30 + const39;
    vec4 column_c15 = temp35 + const41;
    vec4 temp42 = vec4(Color.x, Color.y, Color.z, const43);
    float dotres_c16 = dot(temp42, column_c13);
    float dotres_c17 = dot(temp42, column_c14);
    float dotres_c18 = dot(temp42, column_c15);
    vec4 temp47 = vec4(dotres_c16, dotres_c17, dotres_c18, const43);
    vec4 FragColor_shadow_c19 = temp42 * temp47;
    float temp_c20 = column_c13.x * v.x;
    float temp_c21 = column_c13.y * v.x;
    float temp_c22 = column_c13.z * v.x;
    float temp_c23 = column_c13.w * v.x;
    float temp_c24 = column_c14.x * v.x;
    float temp_c25 = column_c14.y * v.x;
    float temp_c26 = column_c14.z * v.x;
    float temp_c27 = column_c14.w * v.x;
    float temp_c28 = column_c15.x * v.x;
    float temp_c29 = column_c15.y * v.x;
    float temp_c30 = column_c15.z * v.x;
    float temp_c31 = column_c15.w * v.x;
    float product_c32 = temp_c20 * um43[0].x;
    float product_c33 = temp_c24 * um43[0].y;
    float dotProduct_c34 = product_c32 + product_c33;
    float product_c35 = temp_c28 * um43[0].z;
    float dotProduct_c36 = dotProduct_c34 + product_c35;
    float product_c37 = temp_c21 * um43[0].x;
    float product_c38 = temp_c25 * um43[0].y;
    float dotProduct_c39 = product_c37 + product_c38;
    float product_c40 = temp_c29 * um43[0].z;
    float dotProduct_c41 = dotProduct_c39 + product_c40;
    float product_c42 = temp_c22 * um43[0].x;
    float product_c43 = temp_c26 * um43[0].y;
    float dotProduct_c44 = product_c42 + product_c43;
    float product_c45 = temp_c30 * um43[0].z;
    float dotProduct_c46 = dotProduct_c44 + product_c45;
    float product_c47 = temp_c23 * um43[0].x;
    float product_c48 = temp_c27 * um43[0].y;
    float dotProduct_c49 = product_c47 + product_c48;
    float product_c50 = temp_c31 * um43[0].z;
    float dotProduct_c51 = dotProduct_c49 + product_c50;
    vec4 temp81 = vec4(dotProduct_c36, dotProduct_c41, dotProduct_c46, dotProduct_c51);
    float product_c52 = temp_c20 * um43[1].x;
    float product_c53 = temp_c24 * um43[1].y;
    float dotProduct_c54 = product_c52 + product_c53;
    float product_c55 = temp_c28 * um43[1].z;
    float dotProduct_c56 = dotProduct_c54 + product_c55;
    float product_c57 = temp_c21 * um43[1].x;
    float product_c58 = temp_c25 * um43[1].y;
    float dotProduct_c59 = product_c57 + product_c58;
    float product_c60 = temp_c29 * um43[1].z;
    float dotProduct_c61 = dotProduct_c59 + product_c60;
    float product_c62 = temp_c22 * um43[1].x;
    float product_c63 = temp_c26 * um43[1].y;
    float dotProduct_c64 = product_c62 + product_c63;
    float product_c65 = temp_c30 * um43[1].z;
    float dotProduct_c66 = dotProduct_c64 + product_c65;
    float product_c67 = temp_c23 * um43[1].x;
    float product_c68 = temp_c27 * um43[1].y;
    float dotProduct_c69 = product_c67 + product_c68;
    float product_c70 = temp_c31 * um43[1].z;
    float dotProduct_c71 = dotProduct_c69 + product_c70;
    vec4 temp102 = vec4(dotProduct_c56, dotProduct_c61, dotProduct_c66, dotProduct_c71);
    float product_c72 = temp_c20 * um43[2].x;
    float product_c73 = temp_c24 * um43[2].y;
    float dotProduct_c74 = product_c72 + product_c73;
    float product_c75 = temp_c28 * um43[2].z;
    float dotProduct_c76 = dotProduct_c74 + product_c75;
    float product_c77 = temp_c21 * um43[2].x;
    float product_c78 = temp_c25 * um43[2].y;
    float dotProduct_c79 = product_c77 + product_c78;
    float product_c80 = temp_c29 * um43[2].z;
    float dotProduct_c81 = dotProduct_c79 + product_c80;
    float product_c82 = temp_c22 * um43[2].x;
    float product_c83 = temp_c26 * um43[2].y;
    float dotProduct_c84 = product_c82 + product_c83;
    float product_c85 = temp_c30 * um43[2].z;
    float dotProduct_c86 = dotProduct_c84 + product_c85;
    float product_c87 = temp_c23 * um43[2].x;
    float product_c88 = temp_c27 * um43[2].y;
    float dotProduct_c89 = product_c87 + product_c88;
    float product_c90 = temp_c31 * um43[2].z;
    float dotProduct_c91 = dotProduct_c89 + product_c90;
    vec4 temp123 = vec4(dotProduct_c76, dotProduct_c81, dotProduct_c86, dotProduct_c91);
    float product_c92 = temp_c20 * um43[3].x;
    float product_c93 = temp_c24 * um43[3].y;
    float dotProduct_c94 = product_c92 + product_c93;
    float product_c95 = temp_c28 * um43[3].z;
    float dotProduct_c96 = dotProduct_c94 + product_c95;
    float product_c97 = temp_c21 * um43[3].x;
    float product_c98 = temp_c25 * um43[3].y;
    float dotProduct_c99 = product_c97 + product_c98;
    float product_c100 = temp_c29 * um43[3].z;
    float dotProduct_c101 = dotProduct_c99 + product_c100;
    float product_c102 = temp_c22 * um43[3].x;
    float product_c103 = temp_c26 * um43[3].y;
    float dotProduct_c104 = product_c102 + product_c103;
    float product_c105 = temp_c30 * um43[3].z;
    float dotProduct_c106 = dotProduct_c104 + product_c105;
    float product_c107 = temp_c23 * um43[3].x;
    float product_c108 = temp_c27 * um43[3].y;
    float dotProduct_c109 = product_c107 + product_c108;
    float product_c110 = temp_c31 * um43[3].z;
    float dotProduct_c111 = dotProduct_c109 + product_c110;
    vec4 temp144 = vec4(dotProduct_c96, dotProduct_c101, dotProduct_c106, dotProduct_c111);
    vec4 column_c112 = temp81 + un34[0];
    vec4 column_c113 = temp102 + un34[1];
    vec4 column_c114 = temp123 + un34[2];
    vec4 column_c115 = temp144 + const149;
    float temp_c116 = const151 - column_c112.x;
    float temp_c117 = const151 - column_c112.y;
    float temp_c118 = const151 - column_c112.z;
    float temp_c119 = const151 - column_c112.w;
    float temp_c120 = const151 - column_c113.x;
    float temp_c121 = const151 - column_c113.y;
    float temp_c122 = const151 - column_c113.z;
    float temp_c123 = const151 - column_c113.w;
    float temp_c124 = const151 - column_c114.x;
    float temp_c125 = const151 - column_c114.y;
    float temp_c126 = const151 - column_c114.z;
    float temp_c127 = const151 - column_c114.w;
    float temp_c128 = const151 - column_c115.x;
    float temp_c129 = const151 - column_c115.y;
    float temp_c130 = const151 - column_c115.z;
    float temp_c131 = const151 - column_c115.w;
    float product_c132 = temp_c116 * v.x;
    float product_c133 = temp_c120 * v.y;
    float dotProduct_c134 = product_c132 + product_c133;
    float product_c135 = temp_c124 * v.z;
    float dotProduct_c136 = dotProduct_c134 + product_c135;
    float product_c137 = temp_c128 * v.w;
    float dotProduct_c138 = dotProduct_c136 + product_c137;
    float product_c139 = temp_c117 * v.x;
    float product_c140 = temp_c121 * v.y;
    float dotProduct_c141 = product_c139 + product_c140;
    float product_c142 = temp_c125 * v.z;
    float dotProduct_c143 = dotProduct_c141 + product_c142;
    float product_c144 = temp_c129 * v.w;
    float dotProduct_c145 = dotProduct_c143 + product_c144;
    float product_c146 = temp_c118 * v.x;
    float product_c147 = temp_c122 * v.y;
    float dotProduct_c148 = product_c146 + product_c147;
    float product_c149 = temp_c126 * v.z;
    float dotProduct_c150 = dotProduct_c148 + product_c149;
    float product_c151 = temp_c130 * v.w;
    float dotProduct_c152 = dotProduct_c150 + product_c151;
    float product_c153 = temp_c119 * v.x;
    float product_c154 = temp_c123 * v.y;
    float dotProduct_c155 = product_c153 + product_c154;
    float product_c156 = temp_c127 * v.z;
    float dotProduct_c157 = dotProduct_c155 + product_c156;
    float product_c158 = temp_c131 * v.w;
    float dotProduct_c159 = dotProduct_c157 + product_c158;
    vec4 temp195 = vec4(dotProduct_c138, dotProduct_c145, dotProduct_c152, dotProduct_c159);
    vec4 FragColor_shadow_c160 = FragColor_shadow_c19 + temp195;
    vec4 column_c161 = column_c112 * column_c112;
    vec4 column_c162 = column_c113 * column_c113;
    vec4 column_c163 = column_c114 * column_c114;
    vec4 column_c164 = column_c115 * column_c115;
    float dotres_c165 = dot(FragColor_shadow_c160, column_c161);
    float dotres_c166 = dot(FragColor_shadow_c160, column_c162);
    float dotres_c167 = dot(FragColor_shadow_c160, column_c163);
    float dotres_c168 = dot(FragColor_shadow_c160, column_c164);
    vec4 temp205 = vec4(dotres_c165, dotres_c166, dotres_c167, dotres_c168);
    vec4 temp206 = vec4(um43[0].x, um43[1].x, um43[2].x, um43[3].x);
    vec4 temp207 = vec4(um43[0].y, um43[1].y, um43[2].y, um43[3].y);
    vec4 temp208 = vec4(um43[0].z, um43[1].z, um43[2].z, um43[3].z);
    float dotres_c169 = dot(temp205, temp206);
    float dotres_c170 = dot(temp205, temp207);
    float dotres_c171 = dot(temp205, temp208);
    vec4 temp212 = vec4(dotres_c169, dotres_c170, dotres_c171, const43);
    vec4 FragColor_shadow_c172 = temp205 * temp212;
    float temp_c173 = um4[2].z * um4[3].w;
    float temp_c174 = um4[2].w * um4[3].z;
    float temp_c175 = temp_c173 - temp_c174;
    float temp_c176 = temp_c175 * um4[1].y;
    float temp_c177 = um4[1].z * um4[3].w;
    float temp_c178 = um4[1].w * um4[3].z;
    float temp_c179 = temp_c177 - temp_c178;
    float temp_c180 = temp_c179 * um4[2].y;
    float temp_c181 = temp_c176 - temp_c180;
    float temp_c182 = um4[1].z * um4[2].w;
    float temp_c183 = um4[1].w * um4[2].z;
    float temp_c184 = temp_c182 - temp_c183;
    float temp_c185 = temp_c184 * um4[3].y;
    float temp_c186 = temp_c181 + temp_c185;
    float temp_c187 = temp_c186 * um4[0].x;
    float temp_c188 = temp_c175 * um4[0].y;
    float temp_c189 = um4[0].z * um4[3].w;
    float temp_c190 = um4[0].w * um4[3].z;
    float temp_c191 = temp_c189 - temp_c190;
    float temp_c192 = temp_c191 * um4[2].y;
    float temp_c193 = temp_c188 - temp_c192;
    float temp_c194 = um4[0].z * um4[2].w;
    float temp_c195 = um4[0].w * um4[2].z;
    float temp_c196 = temp_c194 - temp_c195;
    float temp_c197 = temp_c196 * um4[3].y;
    float temp_c198 = temp_c193 + temp_c197;
    float temp_c199 = temp_c198 * um4[1].x;
    float temp_c200 = temp_c187 - temp_c199;
    float temp_c201 = temp_c179 * um4[0].y;
    float temp_c202 = temp_c191 * um4[1].y;
    float temp_c203 = temp_c201 - temp_c202;
    float temp_c204 = um4[0].z * um4[1].w;
    float temp_c205 = um4[0].w * um4[1].z;
    float temp_c206 = temp_c204 - temp_c205;
    float temp_c207 = temp_c206 * um4[3].y;
    float temp_c208 = temp_c203 + temp_c207;
    float temp_c209 = temp_c208 * um4[2].x;
    float temp_c210 = temp_c200 + temp_c209;
    float temp_c211 = temp_c184 * um4[0].y;
    float temp_c212 = temp_c196 * um4[1].y;
    float temp_c213 = temp_c211 - temp_c212;
    float temp_c214 = temp_c206 * um4[2].y;
    float temp_c215 = temp_c213 + temp_c214;
    float temp_c216 = temp_c215 * um4[3].x;
    float temp_c217 = temp_c210 - temp_c216;
    vec4 temp259 = vec4(temp_c217);
    vec4 FragColor_shadow_c218 = FragColor_shadow_c172 * temp259;
    float temp_c219 = um2[0].x * um2[1].y;
    float temp_c220 = um2[0].y * um2[1].x;
    float temp_c221 = temp_c219 - temp_c220;
    float temp_c222 = const43 / temp_c221;
    float temp_c223 = temp_c222 * um2[1].y;
    float temp_c224 = temp_c222 * um2[1].x;
    float temp_c225 = const151 - temp_c224;
    float temp_c226 = temp_c222 * um2[0].y;
    float temp_c227 = const151 - temp_c226;
    float temp_c228 = temp_c222 * um2[0].x;
    vec4 temp271 = vec4(temp_c223, temp_c225, temp_c227, temp_c228);
    vec4 FragColor_shadow_c229 = FragColor_shadow_c218 * temp271;
    float temp_c230 = um3[0].x * um3[2].y;
    float temp_c231 = um3[0].y * um3[2].x;
    float temp_c232 = temp_c230 - temp_c231;
    float temp_c233 = um3[1].y * um3[2].z;
    float temp_c234 = um3[1].z * um3[2].y;
    float temp_c235 = temp_c233 - temp_c234;
    float temp_c236 = temp_c235 * um3[0].x;
    float temp_c237 = um3[0].y * um3[2].z;
    float temp_c238 = um3[0].z * um3[2].y;
    float temp_c239 = temp_c237 - temp_c238;
    float temp_c240 = temp_c239 * um3[1].x;
    float temp_c241 = temp_c236 - temp_c240;
    float temp_c242 = um3[0].y * um3[1].z;
    float temp_c243 = um3[0].z * um3[1].y;
    float temp_c244 = temp_c242 - temp_c243;
    float temp_c245 = temp_c244 * um3[2].x;
    float temp_c246 = temp_c241 + temp_c245;
    float temp_c247 = const43 / temp_c246;
    float temp_c248 = temp_c232 * temp_c247;
    float temp_c249 = const151 - temp_c248;
    vec4 temp293 = vec4(temp_c249);
    vec4 FragColor_shadow_c250 = FragColor_shadow_c229 * temp293;
    float temp_c251 = temp_c175 * um4[1].x;
    float temp_c252 = temp_c179 * um4[2].x;
    float temp_c253 = temp_c251 - temp_c252;
    float temp_c254 = temp_c184 * um4[3].x;
    float temp_c255 = temp_c253 + temp_c254;
    float temp_c256 = temp_c175 * um4[0].x;
    float temp_c257 = temp_c191 * um4[2].x;
    float temp_c258 = temp_c256 - temp_c257;
    float temp_c259 = temp_c196 * um4[3].x;
    float temp_c260 = temp_c258 + temp_c259;
    float temp_c261 = temp_c179 * um4[0].x;
    float temp_c262 = temp_c191 * um4[1].x;
    float temp_c263 = temp_c261 - temp_c262;
    float temp_c264 = temp_c206 * um4[3].x;
    float temp_c265 = temp_c263 + temp_c264;
    float temp_c266 = temp_c184 * um4[0].x;
    float temp_c267 = temp_c196 * um4[1].x;
    float temp_c268 = temp_c266 - temp_c267;
    float temp_c269 = temp_c206 * um4[2].x;
    float temp_c270 = temp_c268 + temp_c269;
    float temp_c271 = um4[2].y * um4[3].w;
    float temp_c272 = um4[2].w * um4[3].y;
    float temp_c273 = temp_c271 - temp_c272;
    float temp_c274 = temp_c273 * um4[1].x;
    float temp_c275 = um4[1].y * um4[3].w;
    float temp_c276 = um4[1].w * um4[3].y;
    float temp_c277 = temp_c275 - temp_c276;
    float temp_c278 = temp_c277 * um4[2].x;
    float temp_c279 = temp_c274 - temp_c278;
    float temp_c280 = um4[1].y * um4[2].w;
    float temp_c281 = um4[1].w * um4[2].y;
    float temp_c282 = temp_c280 - temp_c281;
    float temp_c283 = temp_c282 * um4[3].x;
    float temp_c284 = temp_c279 + temp_c283;
    float temp_c285 = temp_c273 * um4[0].x;
    float temp_c286 = um4[0].y * um4[3].w;
    float temp_c287 = um4[0].w * um4[3].y;
    float temp_c288 = temp_c286 - temp_c287;
    float temp_c289 = temp_c288 * um4[2].x;
    float temp_c290 = temp_c285 - temp_c289;
    float temp_c291 = um4[0].y * um4[2].w;
    float temp_c292 = um4[0].w * um4[2].y;
    float temp_c293 = temp_c291 - temp_c292;
    float temp_c294 = temp_c293 * um4[3].x;
    float temp_c295 = temp_c290 + temp_c294;
    float temp_c296 = temp_c277 * um4[0].x;
    float temp_c297 = temp_c288 * um4[1].x;
    float temp_c298 = temp_c296 - temp_c297;
    float temp_c299 = um4[0].y * um4[1].w;
    float temp_c300 = um4[0].w * um4[1].y;
    float temp_c301 = temp_c299 - temp_c300;
    float temp_c302 = temp_c301 * um4[3].x;
    float temp_c303 = temp_c298 + temp_c302;
    float temp_c304 = temp_c282 * um4[0].x;
    float temp_c305 = temp_c293 * um4[1].x;
    float temp_c306 = temp_c304 - temp_c305;
    float temp_c307 = temp_c301 * um4[2].x;
    float temp_c308 = temp_c306 + temp_c307;
    float temp_c309 = um4[2].y * um4[3].z;
    float temp_c310 = um4[2].z * um4[3].y;
    float temp_c311 = temp_c309 - temp_c310;
    float temp_c312 = temp_c311 * um4[1].x;
    float temp_c313 = um4[1].y * um4[3].z;
    float temp_c314 = um4[1].z * um4[3].y;
    float temp_c315 = temp_c313 - temp_c314;
    float temp_c316 = temp_c315 * um4[2].x;
    float temp_c317 = temp_c312 - temp_c316;
    float temp_c318 = um4[1].y * um4[2].z;
    float temp_c319 = um4[1].z * um4[2].y;
    float temp_c320 = temp_c318 - temp_c319;
    float temp_c321 = temp_c320 * um4[3].x;
    float temp_c322 = temp_c317 + temp_c321;
    float temp_c323 = temp_c311 * um4[0].x;
    float temp_c324 = um4[0].y * um4[3].z;
    float temp_c325 = um4[0].z * um4[3].y;
    float temp_c326 = temp_c324 - temp_c325;
    float temp_c327 = temp_c326 * um4[2].x;
    float temp_c328 = temp_c323 - temp_c327;
    float temp_c329 = um4[0].y * um4[2].z;
    float temp_c330 = um4[0].z * um4[2].y;
    float temp_c331 = temp_c329 - temp_c330;
    float temp_c332 = temp_c331 * um4[3].x;
    float temp_c333 = temp_c328 + temp_c332;
    float temp_c334 = temp_c315 * um4[0].x;
    float temp_c335 = temp_c326 * um4[1].x;
    float temp_c336 = temp_c334 - temp_c335;
    float temp_c337 = um4[0].y * um4[1].z;
    float temp_c338 = um4[0].z * um4[1].y;
    float temp_c339 = temp_c337 - temp_c338;
    float temp_c340 = temp_c339 * um4[3].x;
    float temp_c341 = temp_c336 + temp_c340;
    float temp_c342 = temp_c320 * um4[0].x;
    float temp_c343 = temp_c331 * um4[1].x;
    float temp_c344 = temp_c342 - temp_c343;
    float temp_c345 = temp_c339 * um4[2].x;
    float temp_c346 = temp_c344 + temp_c345;
    float temp_c347 = const43 / temp_c217;
    float temp_c348 = temp_c186 * temp_c347;
    float temp_c349 = temp_c255 * temp_c347;
    float temp_c350 = const151 - temp_c349;
    float temp_c351 = temp_c284 * temp_c347;
    float temp_c352 = temp_c322 * temp_c347;
    float temp_c353 = const151 - temp_c352;
    float temp_c354 = temp_c198 * temp_c347;
    float temp_c355 = const151 - temp_c354;
    float temp_c356 = temp_c260 * temp_c347;
    float temp_c357 = temp_c295 * temp_c347;
    float temp_c358 = const151 - temp_c357;
    float temp_c359 = temp_c333 * temp_c347;
    float temp_c360 = temp_c208 * temp_c347;
    float temp_c361 = temp_c265 * temp_c347;
    float temp_c362 = const151 - temp_c361;
    float temp_c363 = temp_c303 * temp_c347;
    float temp_c364 = temp_c341 * temp_c347;
    float temp_c365 = const151 - temp_c364;
    float temp_c366 = temp_c215 * temp_c347;
    float temp_c367 = const151 - temp_c366;
    float temp_c368 = temp_c270 * temp_c347;
    float temp_c369 = temp_c308 * temp_c347;
    float temp_c370 = const151 - temp_c369;
    float temp_c371 = temp_c346 * temp_c347;
    vec4 temp416 = vec4(temp_c348, temp_c355, temp_c360, temp_c367);
    vec4 temp417 = vec4(temp_c350, temp_c356, temp_c362, temp_c368);
    vec4 temp418 = vec4(temp_c351, temp_c358, temp_c363, temp_c370);
    vec4 temp419 = vec4(temp_c353, temp_c359, temp_c365, temp_c371);
    float dotres_c372 = dot(FragColor_shadow_c250, temp416);
    float dotres_c373 = dot(FragColor_shadow_c250, temp417);
    float dotres_c374 = dot(FragColor_shadow_c250, temp418);
    float dotres_c375 = dot(FragColor_shadow_c250, temp419);
    vec4 temp424 = vec4(dotres_c372, dotres_c373, dotres_c374, dotres_c375);
    vec4 column_c376 = un34[0] * un34[0];
    vec4 column_c377 = un34[1] * un34[1];
    float dotres_c378 = dot(temp424, column_c376);
    vec4 column_c379 = un34[2] * un34[2];
    float dotres_c380 = dot(temp424, column_c377);
    float dotres_c381 = dot(temp424, column_c379);
    vec4 temp431 = vec4(dotres_c378, dotres_c380, dotres_c381, dotres_c375);
    FragColor = temp431;
    
}


