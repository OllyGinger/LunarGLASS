
Top IR:
; ModuleID = 'Top'

@v_shadow = internal global <4 x float> zeroinitializer
@u_shadow = internal global <3 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer
@Color_shadow = internal global <3 x float> zeroinitializer
@un34 = external addrspace(2) constant [3 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <3 x float>]
@um4 = external addrspace(2) constant [4 x <4 x float>]
@um2 = external addrspace(2) constant [2 x <2 x float>]
@um3 = external addrspace(2) constant [3 x <3 x float>]
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %inv4 = alloca [4 x <4 x float>]
  %constructed578 = alloca <4 x float>
  %inv3 = alloca [3 x <3 x float>]
  %constructed549 = alloca <4 x float>
  %inv = alloca [2 x <2 x float>]
  %constructed533 = alloca <4 x float>
  %constructed511 = alloca <4 x float>
  %constructed67 = alloca [4 x <4 x float>]
  %m44 = alloca [4 x <4 x float>]
  %constructed49 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %m34 = alloca [3 x <4 x float>]
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %v, <4 x float>* @v_shadow
  %0 = load <4 x float>* @v_shadow
  %u = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !3
  store <3 x float> %u, <3 x float>* @u_shadow
  %1 = load <3 x float>* @u_shadow
  %2 = alloca [3 x <4 x float>]
  %3 = load [3 x <4 x float>]* %2
  %4 = alloca <4 x float>
  %5 = load <4 x float>* %4
  %rightComp = extractelement <3 x float> %1, i32 0
  %leftComp = extractelement <4 x float> %0, i32 0
  %element = fmul float %leftComp, %rightComp
  %column = insertelement <4 x float> %5, float %element, i32 0
  %leftComp1 = extractelement <4 x float> %0, i32 1
  %element2 = fmul float %leftComp1, %rightComp
  %column3 = insertelement <4 x float> %column, float %element2, i32 1
  %leftComp4 = extractelement <4 x float> %0, i32 2
  %element5 = fmul float %leftComp4, %rightComp
  %column6 = insertelement <4 x float> %column3, float %element5, i32 2
  %leftComp7 = extractelement <4 x float> %0, i32 3
  %element8 = fmul float %leftComp7, %rightComp
  %column9 = insertelement <4 x float> %column6, float %element8, i32 3
  %matrix = insertvalue [3 x <4 x float>] %3, <4 x float> %column9, 0
  %rightComp10 = extractelement <3 x float> %1, i32 1
  %leftComp11 = extractelement <4 x float> %0, i32 0
  %element12 = fmul float %leftComp11, %rightComp10
  %column13 = insertelement <4 x float> %column9, float %element12, i32 0
  %leftComp14 = extractelement <4 x float> %0, i32 1
  %element15 = fmul float %leftComp14, %rightComp10
  %column16 = insertelement <4 x float> %column13, float %element15, i32 1
  %leftComp17 = extractelement <4 x float> %0, i32 2
  %element18 = fmul float %leftComp17, %rightComp10
  %column19 = insertelement <4 x float> %column16, float %element18, i32 2
  %leftComp20 = extractelement <4 x float> %0, i32 3
  %element21 = fmul float %leftComp20, %rightComp10
  %column22 = insertelement <4 x float> %column19, float %element21, i32 3
  %matrix23 = insertvalue [3 x <4 x float>] %matrix, <4 x float> %column22, 1
  %rightComp24 = extractelement <3 x float> %1, i32 2
  %leftComp25 = extractelement <4 x float> %0, i32 0
  %element26 = fmul float %leftComp25, %rightComp24
  %column27 = insertelement <4 x float> %column22, float %element26, i32 0
  %leftComp28 = extractelement <4 x float> %0, i32 1
  %element29 = fmul float %leftComp28, %rightComp24
  %column30 = insertelement <4 x float> %column27, float %element29, i32 1
  %leftComp31 = extractelement <4 x float> %0, i32 2
  %element32 = fmul float %leftComp31, %rightComp24
  %column33 = insertelement <4 x float> %column30, float %element32, i32 2
  %leftComp34 = extractelement <4 x float> %0, i32 3
  %element35 = fmul float %leftComp34, %rightComp24
  %column36 = insertelement <4 x float> %column33, float %element35, i32 3
  %matrix37 = insertvalue [3 x <4 x float>] %matrix23, <4 x float> %column36, 2
  store [3 x <4 x float>] %matrix37, [3 x <4 x float>]* %m34
  %6 = load [3 x <4 x float>]* %m34
  %7 = alloca [3 x <4 x float>]
  %8 = load [3 x <4 x float>]* %7
  %leftColumn = extractvalue [3 x <4 x float>] %6, 0
  %column38 = fadd <4 x float> %leftColumn, <float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %9 = insertvalue [3 x <4 x float>] %8, <4 x float> %column38, 0
  %leftColumn39 = extractvalue [3 x <4 x float>] %6, 1
  %column40 = fadd <4 x float> %leftColumn39, <float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00>
  %10 = insertvalue [3 x <4 x float>] %9, <4 x float> %column40, 1
  %leftColumn41 = extractvalue [3 x <4 x float>] %6, 2
  %column42 = fadd <4 x float> %leftColumn41, <float 0.000000e+00, float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00>
  %m3443 = insertvalue [3 x <4 x float>] %10, <4 x float> %column42, 2
  store [3 x <4 x float>] %m3443, [3 x <4 x float>]* %m34
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1027, i32 -1, i32 1), !gla.input !5
  store <3 x float> %Color, <3 x float>* @Color_shadow
  %11 = load <3 x float>* @Color_shadow
  %12 = load <4 x float>* %constructed
  %13 = extractelement <3 x float> %11, i32 0
  %14 = insertelement <4 x float> %12, float %13, i32 0
  %15 = extractelement <3 x float> %11, i32 1
  %16 = insertelement <4 x float> %14, float %15, i32 1
  %17 = extractelement <3 x float> %11, i32 2
  %18 = insertelement <4 x float> %16, float %17, i32 2
  %FragColor_shadow = insertelement <4 x float> %18, float 1.000000e+00, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  %19 = load <4 x float>* @FragColor_shadow
  %20 = load [3 x <4 x float>]* %m34
  %21 = alloca <3 x float>
  %22 = load <3 x float>* %21
  %column44 = extractvalue [3 x <4 x float>] %20, 0
  %dotres = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %19, <4 x float> %column44)
  %23 = insertelement <3 x float> %22, float %dotres, i32 0
  %column45 = extractvalue [3 x <4 x float>] %20, 1
  %dotres46 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %19, <4 x float> %column45)
  %24 = insertelement <3 x float> %23, float %dotres46, i32 1
  %column47 = extractvalue [3 x <4 x float>] %20, 2
  %dotres48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %19, <4 x float> %column47)
  %25 = insertelement <3 x float> %24, float %dotres48, i32 2
  %26 = load <4 x float>* %constructed49
  %27 = extractelement <3 x float> %25, i32 0
  %28 = insertelement <4 x float> %26, float %27, i32 0
  %29 = extractelement <3 x float> %25, i32 1
  %30 = insertelement <4 x float> %28, float %29, i32 1
  %31 = extractelement <3 x float> %25, i32 2
  %32 = insertelement <4 x float> %30, float %31, i32 2
  %33 = insertelement <4 x float> %32, float 1.000000e+00, i32 3
  %34 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow50 = fmul <4 x float> %34, %33
  store <4 x float> %FragColor_shadow50, <4 x float>* @FragColor_shadow
  %v51 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %v51, <4 x float>* @v_shadow
  %35 = load <4 x float>* @v_shadow
  %36 = extractelement <4 x float> %35, i32 0
  %37 = load [3 x <4 x float>]* %m34
  %38 = alloca [3 x <4 x float>]
  %39 = load [3 x <4 x float>]* %38
  %column52 = extractvalue [3 x <4 x float>] %37, 0
  %row = extractelement <4 x float> %column52, i32 0
  %40 = fmul float %36, %row
  %41 = insertelement <4 x float> %column52, float %40, i32 0
  %row53 = extractelement <4 x float> %41, i32 1
  %42 = fmul float %36, %row53
  %43 = insertelement <4 x float> %41, float %42, i32 1
  %row54 = extractelement <4 x float> %43, i32 2
  %44 = fmul float %36, %row54
  %45 = insertelement <4 x float> %43, float %44, i32 2
  %row55 = extractelement <4 x float> %45, i32 3
  %46 = fmul float %36, %row55
  %47 = insertelement <4 x float> %45, float %46, i32 3
  %48 = insertvalue [3 x <4 x float>] %39, <4 x float> %47, 0
  %column56 = extractvalue [3 x <4 x float>] %37, 1
  %row57 = extractelement <4 x float> %column56, i32 0
  %49 = fmul float %36, %row57
  %50 = insertelement <4 x float> %column56, float %49, i32 0
  %row58 = extractelement <4 x float> %50, i32 1
  %51 = fmul float %36, %row58
  %52 = insertelement <4 x float> %50, float %51, i32 1
  %row59 = extractelement <4 x float> %52, i32 2
  %53 = fmul float %36, %row59
  %54 = insertelement <4 x float> %52, float %53, i32 2
  %row60 = extractelement <4 x float> %54, i32 3
  %55 = fmul float %36, %row60
  %56 = insertelement <4 x float> %54, float %55, i32 3
  %57 = insertvalue [3 x <4 x float>] %48, <4 x float> %56, 1
  %column61 = extractvalue [3 x <4 x float>] %37, 2
  %row62 = extractelement <4 x float> %column61, i32 0
  %58 = fmul float %36, %row62
  %59 = insertelement <4 x float> %column61, float %58, i32 0
  %row63 = extractelement <4 x float> %59, i32 1
  %60 = fmul float %36, %row63
  %61 = insertelement <4 x float> %59, float %60, i32 1
  %row64 = extractelement <4 x float> %61, i32 2
  %62 = fmul float %36, %row64
  %63 = insertelement <4 x float> %61, float %62, i32 2
  %row65 = extractelement <4 x float> %63, i32 3
  %64 = fmul float %36, %row65
  %65 = insertelement <4 x float> %63, float %64, i32 3
  %m3466 = insertvalue [3 x <4 x float>] %57, <4 x float> %65, 2
  store [3 x <4 x float>] %m3466, [3 x <4 x float>]* %m34
  %66 = load [3 x <4 x float>] addrspace(2)* @un34, !gla.uniform !9
  %67 = load [4 x <4 x float>]* %constructed67
  %column68 = extractvalue [3 x <4 x float>] %66, 0
  %element69 = extractelement <4 x float> %column68, i32 0
  %element70 = extractelement <4 x float> %column68, i32 1
  %element71 = extractelement <4 x float> %column68, i32 2
  %element72 = extractelement <4 x float> %column68, i32 3
  %column73 = extractvalue [3 x <4 x float>] %66, 1
  %element74 = extractelement <4 x float> %column73, i32 0
  %element75 = extractelement <4 x float> %column73, i32 1
  %element76 = extractelement <4 x float> %column73, i32 2
  %element77 = extractelement <4 x float> %column73, i32 3
  %column78 = extractvalue [3 x <4 x float>] %66, 2
  %element79 = extractelement <4 x float> %column78, i32 0
  %element80 = extractelement <4 x float> %column78, i32 1
  %element81 = extractelement <4 x float> %column78, i32 2
  %element82 = extractelement <4 x float> %column78, i32 3
  %column83 = extractvalue [4 x <4 x float>] %67, 0
  %column84 = insertelement <4 x float> %column83, float %element69, i32 0
  %column85 = insertelement <4 x float> %column84, float %element70, i32 1
  %column86 = insertelement <4 x float> %column85, float %element71, i32 2
  %column87 = insertelement <4 x float> %column86, float %element72, i32 3
  %matrix88 = insertvalue [4 x <4 x float>] %67, <4 x float> %column87, 0
  %column89 = extractvalue [4 x <4 x float>] %67, 1
  %column90 = insertelement <4 x float> %column89, float %element74, i32 0
  %column91 = insertelement <4 x float> %column90, float %element75, i32 1
  %column92 = insertelement <4 x float> %column91, float %element76, i32 2
  %column93 = insertelement <4 x float> %column92, float %element77, i32 3
  %matrix94 = insertvalue [4 x <4 x float>] %matrix88, <4 x float> %column93, 1
  %column95 = extractvalue [4 x <4 x float>] %67, 2
  %column96 = insertelement <4 x float> %column95, float %element79, i32 0
  %column97 = insertelement <4 x float> %column96, float %element80, i32 1
  %column98 = insertelement <4 x float> %column97, float %element81, i32 2
  %column99 = insertelement <4 x float> %column98, float %element82, i32 3
  %matrix100 = insertvalue [4 x <4 x float>] %matrix94, <4 x float> %column99, 2
  %column101 = extractvalue [4 x <4 x float>] %67, 3
  %column102 = insertelement <4 x float> %column101, float 0.000000e+00, i32 0
  %column103 = insertelement <4 x float> %column102, float 0.000000e+00, i32 1
  %column104 = insertelement <4 x float> %column103, float 0.000000e+00, i32 2
  %column105 = insertelement <4 x float> %column104, float 1.000000e+00, i32 3
  %matrix106 = insertvalue [4 x <4 x float>] %matrix100, <4 x float> %column105, 3
  store [4 x <4 x float>] %matrix106, [4 x <4 x float>]* %m44
  %68 = load [3 x <4 x float>]* %m34
  %69 = load [4 x <3 x float>] addrspace(2)* @um43, !gla.uniform !11
  %70 = alloca [4 x <4 x float>]
  %resultMatrix = load [4 x <4 x float>]* %70
  %71 = alloca <4 x float>
  %tempColumn = load <4 x float>* %71
  %rightColumn = extractvalue [4 x <3 x float>] %69, 0
  %leftColumn107 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp108 = extractelement <4 x float> %leftColumn107, i32 0
  %rightComp109 = extractelement <3 x float> %rightColumn, i32 0
  %product = fmul float %leftComp108, %rightComp109
  %leftColumn110 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp111 = extractelement <4 x float> %leftColumn110, i32 0
  %rightComp112 = extractelement <3 x float> %rightColumn, i32 1
  %product113 = fmul float %leftComp111, %rightComp112
  %dotProduct = fadd float %product, %product113
  %leftColumn114 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp115 = extractelement <4 x float> %leftColumn114, i32 0
  %rightComp116 = extractelement <3 x float> %rightColumn, i32 2
  %product117 = fmul float %leftComp115, %rightComp116
  %dotProduct118 = fadd float %dotProduct, %product117
  %column119 = insertelement <4 x float> %tempColumn, float %dotProduct118, i32 0
  %leftColumn120 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp121 = extractelement <4 x float> %leftColumn120, i32 1
  %rightComp122 = extractelement <3 x float> %rightColumn, i32 0
  %product123 = fmul float %leftComp121, %rightComp122
  %leftColumn124 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp125 = extractelement <4 x float> %leftColumn124, i32 1
  %rightComp126 = extractelement <3 x float> %rightColumn, i32 1
  %product127 = fmul float %leftComp125, %rightComp126
  %dotProduct128 = fadd float %product123, %product127
  %leftColumn129 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp130 = extractelement <4 x float> %leftColumn129, i32 1
  %rightComp131 = extractelement <3 x float> %rightColumn, i32 2
  %product132 = fmul float %leftComp130, %rightComp131
  %dotProduct133 = fadd float %dotProduct128, %product132
  %column134 = insertelement <4 x float> %column119, float %dotProduct133, i32 1
  %leftColumn135 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp136 = extractelement <4 x float> %leftColumn135, i32 2
  %rightComp137 = extractelement <3 x float> %rightColumn, i32 0
  %product138 = fmul float %leftComp136, %rightComp137
  %leftColumn139 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp140 = extractelement <4 x float> %leftColumn139, i32 2
  %rightComp141 = extractelement <3 x float> %rightColumn, i32 1
  %product142 = fmul float %leftComp140, %rightComp141
  %dotProduct143 = fadd float %product138, %product142
  %leftColumn144 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp145 = extractelement <4 x float> %leftColumn144, i32 2
  %rightComp146 = extractelement <3 x float> %rightColumn, i32 2
  %product147 = fmul float %leftComp145, %rightComp146
  %dotProduct148 = fadd float %dotProduct143, %product147
  %column149 = insertelement <4 x float> %column134, float %dotProduct148, i32 2
  %leftColumn150 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp151 = extractelement <4 x float> %leftColumn150, i32 3
  %rightComp152 = extractelement <3 x float> %rightColumn, i32 0
  %product153 = fmul float %leftComp151, %rightComp152
  %leftColumn154 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp155 = extractelement <4 x float> %leftColumn154, i32 3
  %rightComp156 = extractelement <3 x float> %rightColumn, i32 1
  %product157 = fmul float %leftComp155, %rightComp156
  %dotProduct158 = fadd float %product153, %product157
  %leftColumn159 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp160 = extractelement <4 x float> %leftColumn159, i32 3
  %rightComp161 = extractelement <3 x float> %rightColumn, i32 2
  %product162 = fmul float %leftComp160, %rightComp161
  %dotProduct163 = fadd float %dotProduct158, %product162
  %column164 = insertelement <4 x float> %column149, float %dotProduct163, i32 3
  %resultMatrix165 = insertvalue [4 x <4 x float>] %resultMatrix, <4 x float> %column164, 0
  %rightColumn166 = extractvalue [4 x <3 x float>] %69, 1
  %leftColumn167 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp168 = extractelement <4 x float> %leftColumn167, i32 0
  %rightComp169 = extractelement <3 x float> %rightColumn166, i32 0
  %product170 = fmul float %leftComp168, %rightComp169
  %leftColumn171 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp172 = extractelement <4 x float> %leftColumn171, i32 0
  %rightComp173 = extractelement <3 x float> %rightColumn166, i32 1
  %product174 = fmul float %leftComp172, %rightComp173
  %dotProduct175 = fadd float %product170, %product174
  %leftColumn176 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp177 = extractelement <4 x float> %leftColumn176, i32 0
  %rightComp178 = extractelement <3 x float> %rightColumn166, i32 2
  %product179 = fmul float %leftComp177, %rightComp178
  %dotProduct180 = fadd float %dotProduct175, %product179
  %column181 = insertelement <4 x float> %column164, float %dotProduct180, i32 0
  %leftColumn182 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp183 = extractelement <4 x float> %leftColumn182, i32 1
  %rightComp184 = extractelement <3 x float> %rightColumn166, i32 0
  %product185 = fmul float %leftComp183, %rightComp184
  %leftColumn186 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp187 = extractelement <4 x float> %leftColumn186, i32 1
  %rightComp188 = extractelement <3 x float> %rightColumn166, i32 1
  %product189 = fmul float %leftComp187, %rightComp188
  %dotProduct190 = fadd float %product185, %product189
  %leftColumn191 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp192 = extractelement <4 x float> %leftColumn191, i32 1
  %rightComp193 = extractelement <3 x float> %rightColumn166, i32 2
  %product194 = fmul float %leftComp192, %rightComp193
  %dotProduct195 = fadd float %dotProduct190, %product194
  %column196 = insertelement <4 x float> %column181, float %dotProduct195, i32 1
  %leftColumn197 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp198 = extractelement <4 x float> %leftColumn197, i32 2
  %rightComp199 = extractelement <3 x float> %rightColumn166, i32 0
  %product200 = fmul float %leftComp198, %rightComp199
  %leftColumn201 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp202 = extractelement <4 x float> %leftColumn201, i32 2
  %rightComp203 = extractelement <3 x float> %rightColumn166, i32 1
  %product204 = fmul float %leftComp202, %rightComp203
  %dotProduct205 = fadd float %product200, %product204
  %leftColumn206 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp207 = extractelement <4 x float> %leftColumn206, i32 2
  %rightComp208 = extractelement <3 x float> %rightColumn166, i32 2
  %product209 = fmul float %leftComp207, %rightComp208
  %dotProduct210 = fadd float %dotProduct205, %product209
  %column211 = insertelement <4 x float> %column196, float %dotProduct210, i32 2
  %leftColumn212 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp213 = extractelement <4 x float> %leftColumn212, i32 3
  %rightComp214 = extractelement <3 x float> %rightColumn166, i32 0
  %product215 = fmul float %leftComp213, %rightComp214
  %leftColumn216 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp217 = extractelement <4 x float> %leftColumn216, i32 3
  %rightComp218 = extractelement <3 x float> %rightColumn166, i32 1
  %product219 = fmul float %leftComp217, %rightComp218
  %dotProduct220 = fadd float %product215, %product219
  %leftColumn221 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp222 = extractelement <4 x float> %leftColumn221, i32 3
  %rightComp223 = extractelement <3 x float> %rightColumn166, i32 2
  %product224 = fmul float %leftComp222, %rightComp223
  %dotProduct225 = fadd float %dotProduct220, %product224
  %column226 = insertelement <4 x float> %column211, float %dotProduct225, i32 3
  %resultMatrix227 = insertvalue [4 x <4 x float>] %resultMatrix165, <4 x float> %column226, 1
  %rightColumn228 = extractvalue [4 x <3 x float>] %69, 2
  %leftColumn229 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp230 = extractelement <4 x float> %leftColumn229, i32 0
  %rightComp231 = extractelement <3 x float> %rightColumn228, i32 0
  %product232 = fmul float %leftComp230, %rightComp231
  %leftColumn233 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp234 = extractelement <4 x float> %leftColumn233, i32 0
  %rightComp235 = extractelement <3 x float> %rightColumn228, i32 1
  %product236 = fmul float %leftComp234, %rightComp235
  %dotProduct237 = fadd float %product232, %product236
  %leftColumn238 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp239 = extractelement <4 x float> %leftColumn238, i32 0
  %rightComp240 = extractelement <3 x float> %rightColumn228, i32 2
  %product241 = fmul float %leftComp239, %rightComp240
  %dotProduct242 = fadd float %dotProduct237, %product241
  %column243 = insertelement <4 x float> %column226, float %dotProduct242, i32 0
  %leftColumn244 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp245 = extractelement <4 x float> %leftColumn244, i32 1
  %rightComp246 = extractelement <3 x float> %rightColumn228, i32 0
  %product247 = fmul float %leftComp245, %rightComp246
  %leftColumn248 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp249 = extractelement <4 x float> %leftColumn248, i32 1
  %rightComp250 = extractelement <3 x float> %rightColumn228, i32 1
  %product251 = fmul float %leftComp249, %rightComp250
  %dotProduct252 = fadd float %product247, %product251
  %leftColumn253 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp254 = extractelement <4 x float> %leftColumn253, i32 1
  %rightComp255 = extractelement <3 x float> %rightColumn228, i32 2
  %product256 = fmul float %leftComp254, %rightComp255
  %dotProduct257 = fadd float %dotProduct252, %product256
  %column258 = insertelement <4 x float> %column243, float %dotProduct257, i32 1
  %leftColumn259 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp260 = extractelement <4 x float> %leftColumn259, i32 2
  %rightComp261 = extractelement <3 x float> %rightColumn228, i32 0
  %product262 = fmul float %leftComp260, %rightComp261
  %leftColumn263 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp264 = extractelement <4 x float> %leftColumn263, i32 2
  %rightComp265 = extractelement <3 x float> %rightColumn228, i32 1
  %product266 = fmul float %leftComp264, %rightComp265
  %dotProduct267 = fadd float %product262, %product266
  %leftColumn268 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp269 = extractelement <4 x float> %leftColumn268, i32 2
  %rightComp270 = extractelement <3 x float> %rightColumn228, i32 2
  %product271 = fmul float %leftComp269, %rightComp270
  %dotProduct272 = fadd float %dotProduct267, %product271
  %column273 = insertelement <4 x float> %column258, float %dotProduct272, i32 2
  %leftColumn274 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp275 = extractelement <4 x float> %leftColumn274, i32 3
  %rightComp276 = extractelement <3 x float> %rightColumn228, i32 0
  %product277 = fmul float %leftComp275, %rightComp276
  %leftColumn278 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp279 = extractelement <4 x float> %leftColumn278, i32 3
  %rightComp280 = extractelement <3 x float> %rightColumn228, i32 1
  %product281 = fmul float %leftComp279, %rightComp280
  %dotProduct282 = fadd float %product277, %product281
  %leftColumn283 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp284 = extractelement <4 x float> %leftColumn283, i32 3
  %rightComp285 = extractelement <3 x float> %rightColumn228, i32 2
  %product286 = fmul float %leftComp284, %rightComp285
  %dotProduct287 = fadd float %dotProduct282, %product286
  %column288 = insertelement <4 x float> %column273, float %dotProduct287, i32 3
  %resultMatrix289 = insertvalue [4 x <4 x float>] %resultMatrix227, <4 x float> %column288, 2
  %rightColumn290 = extractvalue [4 x <3 x float>] %69, 3
  %leftColumn291 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp292 = extractelement <4 x float> %leftColumn291, i32 0
  %rightComp293 = extractelement <3 x float> %rightColumn290, i32 0
  %product294 = fmul float %leftComp292, %rightComp293
  %leftColumn295 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp296 = extractelement <4 x float> %leftColumn295, i32 0
  %rightComp297 = extractelement <3 x float> %rightColumn290, i32 1
  %product298 = fmul float %leftComp296, %rightComp297
  %dotProduct299 = fadd float %product294, %product298
  %leftColumn300 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp301 = extractelement <4 x float> %leftColumn300, i32 0
  %rightComp302 = extractelement <3 x float> %rightColumn290, i32 2
  %product303 = fmul float %leftComp301, %rightComp302
  %dotProduct304 = fadd float %dotProduct299, %product303
  %column305 = insertelement <4 x float> %column288, float %dotProduct304, i32 0
  %leftColumn306 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp307 = extractelement <4 x float> %leftColumn306, i32 1
  %rightComp308 = extractelement <3 x float> %rightColumn290, i32 0
  %product309 = fmul float %leftComp307, %rightComp308
  %leftColumn310 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp311 = extractelement <4 x float> %leftColumn310, i32 1
  %rightComp312 = extractelement <3 x float> %rightColumn290, i32 1
  %product313 = fmul float %leftComp311, %rightComp312
  %dotProduct314 = fadd float %product309, %product313
  %leftColumn315 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp316 = extractelement <4 x float> %leftColumn315, i32 1
  %rightComp317 = extractelement <3 x float> %rightColumn290, i32 2
  %product318 = fmul float %leftComp316, %rightComp317
  %dotProduct319 = fadd float %dotProduct314, %product318
  %column320 = insertelement <4 x float> %column305, float %dotProduct319, i32 1
  %leftColumn321 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp322 = extractelement <4 x float> %leftColumn321, i32 2
  %rightComp323 = extractelement <3 x float> %rightColumn290, i32 0
  %product324 = fmul float %leftComp322, %rightComp323
  %leftColumn325 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp326 = extractelement <4 x float> %leftColumn325, i32 2
  %rightComp327 = extractelement <3 x float> %rightColumn290, i32 1
  %product328 = fmul float %leftComp326, %rightComp327
  %dotProduct329 = fadd float %product324, %product328
  %leftColumn330 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp331 = extractelement <4 x float> %leftColumn330, i32 2
  %rightComp332 = extractelement <3 x float> %rightColumn290, i32 2
  %product333 = fmul float %leftComp331, %rightComp332
  %dotProduct334 = fadd float %dotProduct329, %product333
  %column335 = insertelement <4 x float> %column320, float %dotProduct334, i32 2
  %leftColumn336 = extractvalue [3 x <4 x float>] %68, 0
  %leftComp337 = extractelement <4 x float> %leftColumn336, i32 3
  %rightComp338 = extractelement <3 x float> %rightColumn290, i32 0
  %product339 = fmul float %leftComp337, %rightComp338
  %leftColumn340 = extractvalue [3 x <4 x float>] %68, 1
  %leftComp341 = extractelement <4 x float> %leftColumn340, i32 3
  %rightComp342 = extractelement <3 x float> %rightColumn290, i32 1
  %product343 = fmul float %leftComp341, %rightComp342
  %dotProduct344 = fadd float %product339, %product343
  %leftColumn345 = extractvalue [3 x <4 x float>] %68, 2
  %leftComp346 = extractelement <4 x float> %leftColumn345, i32 3
  %rightComp347 = extractelement <3 x float> %rightColumn290, i32 2
  %product348 = fmul float %leftComp346, %rightComp347
  %dotProduct349 = fadd float %dotProduct344, %product348
  %column350 = insertelement <4 x float> %column335, float %dotProduct349, i32 3
  %resultMatrix351 = insertvalue [4 x <4 x float>] %resultMatrix289, <4 x float> %column350, 3
  %72 = load [4 x <4 x float>]* %m44
  %73 = alloca [4 x <4 x float>]
  %74 = load [4 x <4 x float>]* %73
  %leftColumn352 = extractvalue [4 x <4 x float>] %72, 0
  %rightColumn353 = extractvalue [4 x <4 x float>] %resultMatrix351, 0
  %column354 = fadd <4 x float> %leftColumn352, %rightColumn353
  %75 = insertvalue [4 x <4 x float>] %74, <4 x float> %column354, 0
  %leftColumn355 = extractvalue [4 x <4 x float>] %72, 1
  %rightColumn356 = extractvalue [4 x <4 x float>] %resultMatrix351, 1
  %column357 = fadd <4 x float> %leftColumn355, %rightColumn356
  %76 = insertvalue [4 x <4 x float>] %75, <4 x float> %column357, 1
  %leftColumn358 = extractvalue [4 x <4 x float>] %72, 2
  %rightColumn359 = extractvalue [4 x <4 x float>] %resultMatrix351, 2
  %column360 = fadd <4 x float> %leftColumn358, %rightColumn359
  %77 = insertvalue [4 x <4 x float>] %76, <4 x float> %column360, 2
  %leftColumn361 = extractvalue [4 x <4 x float>] %72, 3
  %rightColumn362 = extractvalue [4 x <4 x float>] %resultMatrix351, 3
  %column363 = fadd <4 x float> %leftColumn361, %rightColumn362
  %m44364 = insertvalue [4 x <4 x float>] %77, <4 x float> %column363, 3
  store [4 x <4 x float>] %m44364, [4 x <4 x float>]* %m44
  %78 = load [4 x <4 x float>]* %m44
  %79 = alloca [4 x <4 x float>]
  %80 = load [4 x <4 x float>]* %79
  %column365 = extractvalue [4 x <4 x float>] %78, 0
  %row366 = extractelement <4 x float> %column365, i32 0
  %81 = fsub float 0.000000e+00, %row366
  %82 = insertelement <4 x float> %column365, float %81, i32 0
  %row367 = extractelement <4 x float> %82, i32 1
  %83 = fsub float 0.000000e+00, %row367
  %84 = insertelement <4 x float> %82, float %83, i32 1
  %row368 = extractelement <4 x float> %84, i32 2
  %85 = fsub float 0.000000e+00, %row368
  %86 = insertelement <4 x float> %84, float %85, i32 2
  %row369 = extractelement <4 x float> %86, i32 3
  %87 = fsub float 0.000000e+00, %row369
  %88 = insertelement <4 x float> %86, float %87, i32 3
  %89 = insertvalue [4 x <4 x float>] %80, <4 x float> %88, 0
  %column370 = extractvalue [4 x <4 x float>] %78, 1
  %row371 = extractelement <4 x float> %column370, i32 0
  %90 = fsub float 0.000000e+00, %row371
  %91 = insertelement <4 x float> %column370, float %90, i32 0
  %row372 = extractelement <4 x float> %91, i32 1
  %92 = fsub float 0.000000e+00, %row372
  %93 = insertelement <4 x float> %91, float %92, i32 1
  %row373 = extractelement <4 x float> %93, i32 2
  %94 = fsub float 0.000000e+00, %row373
  %95 = insertelement <4 x float> %93, float %94, i32 2
  %row374 = extractelement <4 x float> %95, i32 3
  %96 = fsub float 0.000000e+00, %row374
  %97 = insertelement <4 x float> %95, float %96, i32 3
  %98 = insertvalue [4 x <4 x float>] %89, <4 x float> %97, 1
  %column375 = extractvalue [4 x <4 x float>] %78, 2
  %row376 = extractelement <4 x float> %column375, i32 0
  %99 = fsub float 0.000000e+00, %row376
  %100 = insertelement <4 x float> %column375, float %99, i32 0
  %row377 = extractelement <4 x float> %100, i32 1
  %101 = fsub float 0.000000e+00, %row377
  %102 = insertelement <4 x float> %100, float %101, i32 1
  %row378 = extractelement <4 x float> %102, i32 2
  %103 = fsub float 0.000000e+00, %row378
  %104 = insertelement <4 x float> %102, float %103, i32 2
  %row379 = extractelement <4 x float> %104, i32 3
  %105 = fsub float 0.000000e+00, %row379
  %106 = insertelement <4 x float> %104, float %105, i32 3
  %107 = insertvalue [4 x <4 x float>] %98, <4 x float> %106, 2
  %column380 = extractvalue [4 x <4 x float>] %78, 3
  %row381 = extractelement <4 x float> %column380, i32 0
  %108 = fsub float 0.000000e+00, %row381
  %109 = insertelement <4 x float> %column380, float %108, i32 0
  %row382 = extractelement <4 x float> %109, i32 1
  %110 = fsub float 0.000000e+00, %row382
  %111 = insertelement <4 x float> %109, float %110, i32 1
  %row383 = extractelement <4 x float> %111, i32 2
  %112 = fsub float 0.000000e+00, %row383
  %113 = insertelement <4 x float> %111, float %112, i32 2
  %row384 = extractelement <4 x float> %113, i32 3
  %114 = fsub float 0.000000e+00, %row384
  %115 = insertelement <4 x float> %113, float %114, i32 3
  %116 = insertvalue [4 x <4 x float>] %107, <4 x float> %115, 3
  %v385 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %v385, <4 x float>* @v_shadow
  %117 = load <4 x float>* @v_shadow
  %118 = alloca <4 x float>
  %119 = load <4 x float>* %118
  %component = extractelement <4 x float> %117, i32 0
  %component386 = extractelement <4 x float> %117, i32 1
  %component387 = extractelement <4 x float> %117, i32 2
  %component388 = extractelement <4 x float> %117, i32 3
  %column389 = extractvalue [4 x <4 x float>] %116, 0
  %element390 = extractelement <4 x float> %column389, i32 0
  %product391 = fmul float %element390, %component
  %column392 = extractvalue [4 x <4 x float>] %116, 1
  %element393 = extractelement <4 x float> %column392, i32 0
  %product394 = fmul float %element393, %component386
  %dotProduct395 = fadd float %product391, %product394
  %column396 = extractvalue [4 x <4 x float>] %116, 2
  %element397 = extractelement <4 x float> %column396, i32 0
  %product398 = fmul float %element397, %component387
  %dotProduct399 = fadd float %dotProduct395, %product398
  %column400 = extractvalue [4 x <4 x float>] %116, 3
  %element401 = extractelement <4 x float> %column400, i32 0
  %product402 = fmul float %element401, %component388
  %dotProduct403 = fadd float %dotProduct399, %product402
  %120 = insertelement <4 x float> %119, float %dotProduct403, i32 0
  %column404 = extractvalue [4 x <4 x float>] %116, 0
  %element405 = extractelement <4 x float> %column404, i32 1
  %product406 = fmul float %element405, %component
  %column407 = extractvalue [4 x <4 x float>] %116, 1
  %element408 = extractelement <4 x float> %column407, i32 1
  %product409 = fmul float %element408, %component386
  %dotProduct410 = fadd float %product406, %product409
  %column411 = extractvalue [4 x <4 x float>] %116, 2
  %element412 = extractelement <4 x float> %column411, i32 1
  %product413 = fmul float %element412, %component387
  %dotProduct414 = fadd float %dotProduct410, %product413
  %column415 = extractvalue [4 x <4 x float>] %116, 3
  %element416 = extractelement <4 x float> %column415, i32 1
  %product417 = fmul float %element416, %component388
  %dotProduct418 = fadd float %dotProduct414, %product417
  %121 = insertelement <4 x float> %120, float %dotProduct418, i32 1
  %column419 = extractvalue [4 x <4 x float>] %116, 0
  %element420 = extractelement <4 x float> %column419, i32 2
  %product421 = fmul float %element420, %component
  %column422 = extractvalue [4 x <4 x float>] %116, 1
  %element423 = extractelement <4 x float> %column422, i32 2
  %product424 = fmul float %element423, %component386
  %dotProduct425 = fadd float %product421, %product424
  %column426 = extractvalue [4 x <4 x float>] %116, 2
  %element427 = extractelement <4 x float> %column426, i32 2
  %product428 = fmul float %element427, %component387
  %dotProduct429 = fadd float %dotProduct425, %product428
  %column430 = extractvalue [4 x <4 x float>] %116, 3
  %element431 = extractelement <4 x float> %column430, i32 2
  %product432 = fmul float %element431, %component388
  %dotProduct433 = fadd float %dotProduct429, %product432
  %122 = insertelement <4 x float> %121, float %dotProduct433, i32 2
  %column434 = extractvalue [4 x <4 x float>] %116, 0
  %element435 = extractelement <4 x float> %column434, i32 3
  %product436 = fmul float %element435, %component
  %column437 = extractvalue [4 x <4 x float>] %116, 1
  %element438 = extractelement <4 x float> %column437, i32 3
  %product439 = fmul float %element438, %component386
  %dotProduct440 = fadd float %product436, %product439
  %column441 = extractvalue [4 x <4 x float>] %116, 2
  %element442 = extractelement <4 x float> %column441, i32 3
  %product443 = fmul float %element442, %component387
  %dotProduct444 = fadd float %dotProduct440, %product443
  %column445 = extractvalue [4 x <4 x float>] %116, 3
  %element446 = extractelement <4 x float> %column445, i32 3
  %product447 = fmul float %element446, %component388
  %dotProduct448 = fadd float %dotProduct444, %product447
  %123 = insertelement <4 x float> %122, float %dotProduct448, i32 3
  %124 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow449 = fadd <4 x float> %124, %123
  store <4 x float> %FragColor_shadow449, <4 x float>* @FragColor_shadow
  %125 = load [4 x <4 x float>]* %m44
  %126 = load [4 x <4 x float>]* %m44
  %127 = alloca [4 x <4 x float>]
  %128 = load [4 x <4 x float>]* %127
  %leftColumn450 = extractvalue [4 x <4 x float>] %125, 0
  %rightColumn451 = extractvalue [4 x <4 x float>] %126, 0
  %column452 = fmul <4 x float> %leftColumn450, %rightColumn451
  %129 = insertvalue [4 x <4 x float>] %128, <4 x float> %column452, 0
  %leftColumn453 = extractvalue [4 x <4 x float>] %125, 1
  %rightColumn454 = extractvalue [4 x <4 x float>] %126, 1
  %column455 = fmul <4 x float> %leftColumn453, %rightColumn454
  %130 = insertvalue [4 x <4 x float>] %129, <4 x float> %column455, 1
  %leftColumn456 = extractvalue [4 x <4 x float>] %125, 2
  %rightColumn457 = extractvalue [4 x <4 x float>] %126, 2
  %column458 = fmul <4 x float> %leftColumn456, %rightColumn457
  %131 = insertvalue [4 x <4 x float>] %130, <4 x float> %column458, 2
  %leftColumn459 = extractvalue [4 x <4 x float>] %125, 3
  %rightColumn460 = extractvalue [4 x <4 x float>] %126, 3
  %column461 = fmul <4 x float> %leftColumn459, %rightColumn460
  %132 = insertvalue [4 x <4 x float>] %131, <4 x float> %column461, 3
  %133 = load <4 x float>* @FragColor_shadow
  %134 = alloca <4 x float>
  %135 = load <4 x float>* %134
  %column462 = extractvalue [4 x <4 x float>] %132, 0
  %dotres463 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %133, <4 x float> %column462)
  %136 = insertelement <4 x float> %135, float %dotres463, i32 0
  %column464 = extractvalue [4 x <4 x float>] %132, 1
  %dotres465 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %133, <4 x float> %column464)
  %137 = insertelement <4 x float> %136, float %dotres465, i32 1
  %column466 = extractvalue [4 x <4 x float>] %132, 2
  %dotres467 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %133, <4 x float> %column466)
  %138 = insertelement <4 x float> %137, float %dotres467, i32 2
  %column468 = extractvalue [4 x <4 x float>] %132, 3
  %dotres469 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %133, <4 x float> %column468)
  %FragColor_shadow470 = insertelement <4 x float> %138, float %dotres469, i32 3
  store <4 x float> %FragColor_shadow470, <4 x float>* @FragColor_shadow
  %139 = load [4 x <3 x float>] addrspace(2)* @um43, !gla.uniform !11
  %column471 = extractvalue [4 x <3 x float>] %139, 0
  %element472 = extractelement <3 x float> %column471, i32 0
  %element473 = extractelement <3 x float> %column471, i32 1
  %element474 = extractelement <3 x float> %column471, i32 2
  %column475 = extractvalue [4 x <3 x float>] %139, 1
  %element476 = extractelement <3 x float> %column475, i32 0
  %element477 = extractelement <3 x float> %column475, i32 1
  %element478 = extractelement <3 x float> %column475, i32 2
  %column479 = extractvalue [4 x <3 x float>] %139, 2
  %element480 = extractelement <3 x float> %column479, i32 0
  %element481 = extractelement <3 x float> %column479, i32 1
  %element482 = extractelement <3 x float> %column479, i32 2
  %column483 = extractvalue [4 x <3 x float>] %139, 3
  %element484 = extractelement <3 x float> %column483, i32 0
  %element485 = extractelement <3 x float> %column483, i32 1
  %element486 = extractelement <3 x float> %column483, i32 2
  %140 = alloca [3 x <4 x float>]
  %141 = load [3 x <4 x float>]* %140
  %column487 = extractvalue [3 x <4 x float>] %141, 0
  %column488 = insertelement <4 x float> %column487, float %element472, i32 0
  %column489 = insertelement <4 x float> %column488, float %element476, i32 1
  %column490 = insertelement <4 x float> %column489, float %element480, i32 2
  %column491 = insertelement <4 x float> %column490, float %element484, i32 3
  %matrix492 = insertvalue [3 x <4 x float>] %141, <4 x float> %column491, 0
  %column493 = extractvalue [3 x <4 x float>] %matrix492, 1
  %column494 = insertelement <4 x float> %column493, float %element473, i32 0
  %column495 = insertelement <4 x float> %column494, float %element477, i32 1
  %column496 = insertelement <4 x float> %column495, float %element481, i32 2
  %column497 = insertelement <4 x float> %column496, float %element485, i32 3
  %matrix498 = insertvalue [3 x <4 x float>] %matrix492, <4 x float> %column497, 1
  %column499 = extractvalue [3 x <4 x float>] %matrix498, 2
  %column500 = insertelement <4 x float> %column499, float %element474, i32 0
  %column501 = insertelement <4 x float> %column500, float %element478, i32 1
  %column502 = insertelement <4 x float> %column501, float %element482, i32 2
  %column503 = insertelement <4 x float> %column502, float %element486, i32 3
  %matrix504 = insertvalue [3 x <4 x float>] %matrix498, <4 x float> %column503, 2
  store [3 x <4 x float>] %matrix504, [3 x <4 x float>]* %m34
  %142 = load <4 x float>* @FragColor_shadow
  %143 = load [3 x <4 x float>]* %m34
  %144 = alloca <3 x float>
  %145 = load <3 x float>* %144
  %column505 = extractvalue [3 x <4 x float>] %143, 0
  %dotres506 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %column505)
  %146 = insertelement <3 x float> %145, float %dotres506, i32 0
  %column507 = extractvalue [3 x <4 x float>] %143, 1
  %dotres508 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %column507)
  %147 = insertelement <3 x float> %146, float %dotres508, i32 1
  %column509 = extractvalue [3 x <4 x float>] %143, 2
  %dotres510 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %column509)
  %148 = insertelement <3 x float> %147, float %dotres510, i32 2
  %149 = load <4 x float>* %constructed511
  %150 = extractelement <3 x float> %148, i32 0
  %151 = insertelement <4 x float> %149, float %150, i32 0
  %152 = extractelement <3 x float> %148, i32 1
  %153 = insertelement <4 x float> %151, float %152, i32 1
  %154 = extractelement <3 x float> %148, i32 2
  %155 = insertelement <4 x float> %153, float %154, i32 2
  %156 = insertelement <4 x float> %155, float 1.000000e+00, i32 3
  %157 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow512 = fmul <4 x float> %157, %156
  store <4 x float> %FragColor_shadow512, <4 x float>* @FragColor_shadow
  %158 = load [4 x <4 x float>] addrspace(2)* @um4, !gla.uniform !12
  %column513 = extractvalue [4 x <4 x float>] %158, 0
  %element514 = extractelement <4 x float> %column513, i32 0
  %element515 = extractelement <4 x float> %column513, i32 1
  %element516 = extractelement <4 x float> %column513, i32 2
  %element517 = extractelement <4 x float> %column513, i32 3
  %column518 = extractvalue [4 x <4 x float>] %158, 1
  %element519 = extractelement <4 x float> %column518, i32 0
  %element520 = extractelement <4 x float> %column518, i32 1
  %element521 = extractelement <4 x float> %column518, i32 2
  %element522 = extractelement <4 x float> %column518, i32 3
  %column523 = extractvalue [4 x <4 x float>] %158, 2
  %element524 = extractelement <4 x float> %column523, i32 0
  %element525 = extractelement <4 x float> %column523, i32 1
  %element526 = extractelement <4 x float> %column523, i32 2
  %element527 = extractelement <4 x float> %column523, i32 3
  %column528 = extractvalue [4 x <4 x float>] %158, 3
  %element529 = extractelement <4 x float> %column528, i32 0
  %element530 = extractelement <4 x float> %column528, i32 1
  %element531 = extractelement <4 x float> %column528, i32 2
  %element532 = extractelement <4 x float> %column528, i32 3
  %159 = fmul float %element526, %element532
  %160 = fmul float %element531, %element527
  %161 = fsub float %159, %160
  %162 = fmul float %element520, %161
  %163 = fmul float %element521, %element532
  %164 = fmul float %element531, %element522
  %165 = fsub float %163, %164
  %166 = fmul float %element525, %165
  %167 = fsub float %162, %166
  %168 = fmul float %element521, %element527
  %169 = fmul float %element526, %element522
  %170 = fsub float %168, %169
  %171 = fmul float %element530, %170
  %172 = fadd float %167, %171
  %173 = fmul float %element514, %172
  %174 = fmul float %element526, %element532
  %175 = fmul float %element531, %element527
  %176 = fsub float %174, %175
  %177 = fmul float %element515, %176
  %178 = fmul float %element516, %element532
  %179 = fmul float %element531, %element517
  %180 = fsub float %178, %179
  %181 = fmul float %element525, %180
  %182 = fsub float %177, %181
  %183 = fmul float %element516, %element527
  %184 = fmul float %element526, %element517
  %185 = fsub float %183, %184
  %186 = fmul float %element530, %185
  %187 = fadd float %182, %186
  %188 = fmul float %element519, %187
  %189 = fsub float %173, %188
  %190 = fmul float %element521, %element532
  %191 = fmul float %element531, %element522
  %192 = fsub float %190, %191
  %193 = fmul float %element515, %192
  %194 = fmul float %element516, %element532
  %195 = fmul float %element531, %element517
  %196 = fsub float %194, %195
  %197 = fmul float %element520, %196
  %198 = fsub float %193, %197
  %199 = fmul float %element516, %element522
  %200 = fmul float %element521, %element517
  %201 = fsub float %199, %200
  %202 = fmul float %element530, %201
  %203 = fadd float %198, %202
  %204 = fmul float %element524, %203
  %205 = fadd float %189, %204
  %206 = fmul float %element521, %element527
  %207 = fmul float %element526, %element522
  %208 = fsub float %206, %207
  %209 = fmul float %element515, %208
  %210 = fmul float %element516, %element527
  %211 = fmul float %element526, %element517
  %212 = fsub float %210, %211
  %213 = fmul float %element520, %212
  %214 = fsub float %209, %213
  %215 = fmul float %element516, %element522
  %216 = fmul float %element521, %element517
  %217 = fsub float %215, %216
  %218 = fmul float %element525, %217
  %219 = fadd float %214, %218
  %220 = fmul float %element529, %219
  %221 = fsub float %205, %220
  %222 = load <4 x float>* %constructed533
  %223 = insertelement <4 x float> undef, float %221, i32 0
  %224 = insertelement <4 x float> %223, float %221, i32 1
  %225 = insertelement <4 x float> %224, float %221, i32 2
  %226 = insertelement <4 x float> %225, float %221, i32 3
  %227 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow534 = fmul <4 x float> %227, %226
  store <4 x float> %FragColor_shadow534, <4 x float>* @FragColor_shadow
  %228 = load [2 x <2 x float>] addrspace(2)* @um2, !gla.uniform !13
  %column535 = extractvalue [2 x <2 x float>] %228, 0
  %element536 = extractelement <2 x float> %column535, i32 0
  %element537 = extractelement <2 x float> %column535, i32 1
  %column538 = extractvalue [2 x <2 x float>] %228, 1
  %element539 = extractelement <2 x float> %column538, i32 0
  %element540 = extractelement <2 x float> %column538, i32 1
  %229 = fsub float -0.000000e+00, %element537
  %230 = fsub float -0.000000e+00, %element539
  %231 = fmul float %element536, %element540
  %232 = fmul float %element539, %element537
  %233 = fsub float %231, %232
  %234 = fdiv float 1.000000e+00, %233
  %235 = fmul float %element540, %234
  %236 = fmul float %230, %234
  %237 = fmul float %229, %234
  %238 = fmul float %element536, %234
  %239 = alloca [2 x <2 x float>]
  %240 = load [2 x <2 x float>]* %239
  %column541 = extractvalue [2 x <2 x float>] %240, 0
  %column542 = insertelement <2 x float> %column541, float %235, i32 0
  %column543 = insertelement <2 x float> %column542, float %237, i32 1
  %matrix544 = insertvalue [2 x <2 x float>] %240, <2 x float> %column543, 0
  %column545 = extractvalue [2 x <2 x float>] %matrix544, 1
  %column546 = insertelement <2 x float> %column545, float %236, i32 0
  %column547 = insertelement <2 x float> %column546, float %238, i32 1
  %matrix548 = insertvalue [2 x <2 x float>] %matrix544, <2 x float> %column547, 1
  store [2 x <2 x float>] %matrix548, [2 x <2 x float>]* %inv
  %241 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 0
  %242 = load <2 x float>* %241
  %243 = extractelement <2 x float> %242, i32 0
  %244 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 1
  %245 = load <2 x float>* %244
  %246 = extractelement <2 x float> %245, i32 0
  %247 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 0
  %248 = load <2 x float>* %247
  %249 = extractelement <2 x float> %248, i32 1
  %250 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 1
  %251 = load <2 x float>* %250
  %252 = extractelement <2 x float> %251, i32 1
  %253 = load <4 x float>* %constructed549
  %254 = insertelement <4 x float> %253, float %243, i32 0
  %255 = insertelement <4 x float> %254, float %246, i32 1
  %256 = insertelement <4 x float> %255, float %249, i32 2
  %257 = insertelement <4 x float> %256, float %252, i32 3
  %258 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow550 = fmul <4 x float> %258, %257
  store <4 x float> %FragColor_shadow550, <4 x float>* @FragColor_shadow
  %259 = load [3 x <3 x float>] addrspace(2)* @um3, !gla.uniform !14
  %column551 = extractvalue [3 x <3 x float>] %259, 0
  %element552 = extractelement <3 x float> %column551, i32 0
  %element553 = extractelement <3 x float> %column551, i32 1
  %element554 = extractelement <3 x float> %column551, i32 2
  %column555 = extractvalue [3 x <3 x float>] %259, 1
  %element556 = extractelement <3 x float> %column555, i32 0
  %element557 = extractelement <3 x float> %column555, i32 1
  %element558 = extractelement <3 x float> %column555, i32 2
  %column559 = extractvalue [3 x <3 x float>] %259, 2
  %element560 = extractelement <3 x float> %column559, i32 0
  %element561 = extractelement <3 x float> %column559, i32 1
  %element562 = extractelement <3 x float> %column559, i32 2
  %260 = fmul float %element557, %element562
  %261 = fmul float %element561, %element558
  %262 = fsub float %260, %261
  %263 = fmul float %element553, %element562
  %264 = fmul float %element561, %element554
  %265 = fsub float %263, %264
  %266 = fsub float -0.000000e+00, %265
  %267 = fmul float %element553, %element558
  %268 = fmul float %element557, %element554
  %269 = fsub float %267, %268
  %270 = fmul float %element556, %element562
  %271 = fmul float %element560, %element558
  %272 = fsub float %270, %271
  %273 = fsub float -0.000000e+00, %272
  %274 = fmul float %element552, %element562
  %275 = fmul float %element560, %element554
  %276 = fsub float %274, %275
  %277 = fmul float %element552, %element558
  %278 = fmul float %element556, %element554
  %279 = fsub float %277, %278
  %280 = fsub float -0.000000e+00, %279
  %281 = fmul float %element556, %element561
  %282 = fmul float %element560, %element557
  %283 = fsub float %281, %282
  %284 = fmul float %element552, %element561
  %285 = fmul float %element560, %element553
  %286 = fsub float %284, %285
  %287 = fsub float -0.000000e+00, %286
  %288 = fmul float %element552, %element557
  %289 = fmul float %element556, %element553
  %290 = fsub float %288, %289
  %291 = fmul float %element557, %element562
  %292 = fmul float %element561, %element558
  %293 = fsub float %291, %292
  %294 = fmul float %element552, %293
  %295 = fmul float %element553, %element562
  %296 = fmul float %element561, %element554
  %297 = fsub float %295, %296
  %298 = fmul float %element556, %297
  %299 = fsub float %294, %298
  %300 = fmul float %element553, %element558
  %301 = fmul float %element557, %element554
  %302 = fsub float %300, %301
  %303 = fmul float %element560, %302
  %304 = fadd float %299, %303
  %305 = fdiv float 1.000000e+00, %304
  %306 = fmul float %262, %305
  %307 = fmul float %273, %305
  %308 = fmul float %283, %305
  %309 = fmul float %266, %305
  %310 = fmul float %276, %305
  %311 = fmul float %287, %305
  %312 = fmul float %269, %305
  %313 = fmul float %280, %305
  %314 = fmul float %290, %305
  %315 = alloca [3 x <3 x float>]
  %316 = load [3 x <3 x float>]* %315
  %column563 = extractvalue [3 x <3 x float>] %316, 0
  %column564 = insertelement <3 x float> %column563, float %306, i32 0
  %column565 = insertelement <3 x float> %column564, float %309, i32 1
  %column566 = insertelement <3 x float> %column565, float %312, i32 2
  %matrix567 = insertvalue [3 x <3 x float>] %316, <3 x float> %column566, 0
  %column568 = extractvalue [3 x <3 x float>] %matrix567, 1
  %column569 = insertelement <3 x float> %column568, float %307, i32 0
  %column570 = insertelement <3 x float> %column569, float %310, i32 1
  %column571 = insertelement <3 x float> %column570, float %313, i32 2
  %matrix572 = insertvalue [3 x <3 x float>] %matrix567, <3 x float> %column571, 1
  %column573 = extractvalue [3 x <3 x float>] %matrix572, 2
  %column574 = insertelement <3 x float> %column573, float %308, i32 0
  %column575 = insertelement <3 x float> %column574, float %311, i32 1
  %column576 = insertelement <3 x float> %column575, float %314, i32 2
  %matrix577 = insertvalue [3 x <3 x float>] %matrix572, <3 x float> %column576, 2
  store [3 x <3 x float>] %matrix577, [3 x <3 x float>]* %inv3
  %317 = getelementptr [3 x <3 x float>]* %inv3, i32 0, i32 2
  %318 = load <3 x float>* %317
  %319 = extractelement <3 x float> %318, i32 1
  %320 = load <4 x float>* %constructed578
  %321 = insertelement <4 x float> undef, float %319, i32 0
  %322 = insertelement <4 x float> %321, float %319, i32 1
  %323 = insertelement <4 x float> %322, float %319, i32 2
  %324 = insertelement <4 x float> %323, float %319, i32 3
  %325 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow579 = fmul <4 x float> %325, %324
  store <4 x float> %FragColor_shadow579, <4 x float>* @FragColor_shadow
  %326 = load [4 x <4 x float>] addrspace(2)* @um4, !gla.uniform !12
  %column580 = extractvalue [4 x <4 x float>] %326, 0
  %element581 = extractelement <4 x float> %column580, i32 0
  %element582 = extractelement <4 x float> %column580, i32 1
  %element583 = extractelement <4 x float> %column580, i32 2
  %element584 = extractelement <4 x float> %column580, i32 3
  %column585 = extractvalue [4 x <4 x float>] %326, 1
  %element586 = extractelement <4 x float> %column585, i32 0
  %element587 = extractelement <4 x float> %column585, i32 1
  %element588 = extractelement <4 x float> %column585, i32 2
  %element589 = extractelement <4 x float> %column585, i32 3
  %column590 = extractvalue [4 x <4 x float>] %326, 2
  %element591 = extractelement <4 x float> %column590, i32 0
  %element592 = extractelement <4 x float> %column590, i32 1
  %element593 = extractelement <4 x float> %column590, i32 2
  %element594 = extractelement <4 x float> %column590, i32 3
  %column595 = extractvalue [4 x <4 x float>] %326, 3
  %element596 = extractelement <4 x float> %column595, i32 0
  %element597 = extractelement <4 x float> %column595, i32 1
  %element598 = extractelement <4 x float> %column595, i32 2
  %element599 = extractelement <4 x float> %column595, i32 3
  %327 = fmul float %element593, %element599
  %328 = fmul float %element598, %element594
  %329 = fsub float %327, %328
  %330 = fmul float %element587, %329
  %331 = fmul float %element588, %element599
  %332 = fmul float %element598, %element589
  %333 = fsub float %331, %332
  %334 = fmul float %element592, %333
  %335 = fsub float %330, %334
  %336 = fmul float %element588, %element594
  %337 = fmul float %element593, %element589
  %338 = fsub float %336, %337
  %339 = fmul float %element597, %338
  %340 = fadd float %335, %339
  %341 = fmul float %element593, %element599
  %342 = fmul float %element598, %element594
  %343 = fsub float %341, %342
  %344 = fmul float %element582, %343
  %345 = fmul float %element583, %element599
  %346 = fmul float %element598, %element584
  %347 = fsub float %345, %346
  %348 = fmul float %element592, %347
  %349 = fsub float %344, %348
  %350 = fmul float %element583, %element594
  %351 = fmul float %element593, %element584
  %352 = fsub float %350, %351
  %353 = fmul float %element597, %352
  %354 = fadd float %349, %353
  %355 = fsub float -0.000000e+00, %354
  %356 = fmul float %element588, %element599
  %357 = fmul float %element598, %element589
  %358 = fsub float %356, %357
  %359 = fmul float %element582, %358
  %360 = fmul float %element583, %element599
  %361 = fmul float %element598, %element584
  %362 = fsub float %360, %361
  %363 = fmul float %element587, %362
  %364 = fsub float %359, %363
  %365 = fmul float %element583, %element589
  %366 = fmul float %element588, %element584
  %367 = fsub float %365, %366
  %368 = fmul float %element597, %367
  %369 = fadd float %364, %368
  %370 = fmul float %element588, %element594
  %371 = fmul float %element593, %element589
  %372 = fsub float %370, %371
  %373 = fmul float %element582, %372
  %374 = fmul float %element583, %element594
  %375 = fmul float %element593, %element584
  %376 = fsub float %374, %375
  %377 = fmul float %element587, %376
  %378 = fsub float %373, %377
  %379 = fmul float %element583, %element589
  %380 = fmul float %element588, %element584
  %381 = fsub float %379, %380
  %382 = fmul float %element592, %381
  %383 = fadd float %378, %382
  %384 = fsub float -0.000000e+00, %383
  %385 = fmul float %element593, %element599
  %386 = fmul float %element598, %element594
  %387 = fsub float %385, %386
  %388 = fmul float %element586, %387
  %389 = fmul float %element588, %element599
  %390 = fmul float %element598, %element589
  %391 = fsub float %389, %390
  %392 = fmul float %element591, %391
  %393 = fsub float %388, %392
  %394 = fmul float %element588, %element594
  %395 = fmul float %element593, %element589
  %396 = fsub float %394, %395
  %397 = fmul float %element596, %396
  %398 = fadd float %393, %397
  %399 = fsub float -0.000000e+00, %398
  %400 = fmul float %element593, %element599
  %401 = fmul float %element598, %element594
  %402 = fsub float %400, %401
  %403 = fmul float %element581, %402
  %404 = fmul float %element583, %element599
  %405 = fmul float %element598, %element584
  %406 = fsub float %404, %405
  %407 = fmul float %element591, %406
  %408 = fsub float %403, %407
  %409 = fmul float %element583, %element594
  %410 = fmul float %element593, %element584
  %411 = fsub float %409, %410
  %412 = fmul float %element596, %411
  %413 = fadd float %408, %412
  %414 = fmul float %element588, %element599
  %415 = fmul float %element598, %element589
  %416 = fsub float %414, %415
  %417 = fmul float %element581, %416
  %418 = fmul float %element583, %element599
  %419 = fmul float %element598, %element584
  %420 = fsub float %418, %419
  %421 = fmul float %element586, %420
  %422 = fsub float %417, %421
  %423 = fmul float %element583, %element589
  %424 = fmul float %element588, %element584
  %425 = fsub float %423, %424
  %426 = fmul float %element596, %425
  %427 = fadd float %422, %426
  %428 = fsub float -0.000000e+00, %427
  %429 = fmul float %element588, %element594
  %430 = fmul float %element593, %element589
  %431 = fsub float %429, %430
  %432 = fmul float %element581, %431
  %433 = fmul float %element583, %element594
  %434 = fmul float %element593, %element584
  %435 = fsub float %433, %434
  %436 = fmul float %element586, %435
  %437 = fsub float %432, %436
  %438 = fmul float %element583, %element589
  %439 = fmul float %element588, %element584
  %440 = fsub float %438, %439
  %441 = fmul float %element591, %440
  %442 = fadd float %437, %441
  %443 = fmul float %element592, %element599
  %444 = fmul float %element597, %element594
  %445 = fsub float %443, %444
  %446 = fmul float %element586, %445
  %447 = fmul float %element587, %element599
  %448 = fmul float %element597, %element589
  %449 = fsub float %447, %448
  %450 = fmul float %element591, %449
  %451 = fsub float %446, %450
  %452 = fmul float %element587, %element594
  %453 = fmul float %element592, %element589
  %454 = fsub float %452, %453
  %455 = fmul float %element596, %454
  %456 = fadd float %451, %455
  %457 = fmul float %element592, %element599
  %458 = fmul float %element597, %element594
  %459 = fsub float %457, %458
  %460 = fmul float %element581, %459
  %461 = fmul float %element582, %element599
  %462 = fmul float %element597, %element584
  %463 = fsub float %461, %462
  %464 = fmul float %element591, %463
  %465 = fsub float %460, %464
  %466 = fmul float %element582, %element594
  %467 = fmul float %element592, %element584
  %468 = fsub float %466, %467
  %469 = fmul float %element596, %468
  %470 = fadd float %465, %469
  %471 = fsub float -0.000000e+00, %470
  %472 = fmul float %element587, %element599
  %473 = fmul float %element597, %element589
  %474 = fsub float %472, %473
  %475 = fmul float %element581, %474
  %476 = fmul float %element582, %element599
  %477 = fmul float %element597, %element584
  %478 = fsub float %476, %477
  %479 = fmul float %element586, %478
  %480 = fsub float %475, %479
  %481 = fmul float %element582, %element589
  %482 = fmul float %element587, %element584
  %483 = fsub float %481, %482
  %484 = fmul float %element596, %483
  %485 = fadd float %480, %484
  %486 = fmul float %element587, %element594
  %487 = fmul float %element592, %element589
  %488 = fsub float %486, %487
  %489 = fmul float %element581, %488
  %490 = fmul float %element582, %element594
  %491 = fmul float %element592, %element584
  %492 = fsub float %490, %491
  %493 = fmul float %element586, %492
  %494 = fsub float %489, %493
  %495 = fmul float %element582, %element589
  %496 = fmul float %element587, %element584
  %497 = fsub float %495, %496
  %498 = fmul float %element591, %497
  %499 = fadd float %494, %498
  %500 = fsub float -0.000000e+00, %499
  %501 = fmul float %element592, %element598
  %502 = fmul float %element597, %element593
  %503 = fsub float %501, %502
  %504 = fmul float %element586, %503
  %505 = fmul float %element587, %element598
  %506 = fmul float %element597, %element588
  %507 = fsub float %505, %506
  %508 = fmul float %element591, %507
  %509 = fsub float %504, %508
  %510 = fmul float %element587, %element593
  %511 = fmul float %element592, %element588
  %512 = fsub float %510, %511
  %513 = fmul float %element596, %512
  %514 = fadd float %509, %513
  %515 = fsub float -0.000000e+00, %514
  %516 = fmul float %element592, %element598
  %517 = fmul float %element597, %element593
  %518 = fsub float %516, %517
  %519 = fmul float %element581, %518
  %520 = fmul float %element582, %element598
  %521 = fmul float %element597, %element583
  %522 = fsub float %520, %521
  %523 = fmul float %element591, %522
  %524 = fsub float %519, %523
  %525 = fmul float %element582, %element593
  %526 = fmul float %element592, %element583
  %527 = fsub float %525, %526
  %528 = fmul float %element596, %527
  %529 = fadd float %524, %528
  %530 = fmul float %element587, %element598
  %531 = fmul float %element597, %element588
  %532 = fsub float %530, %531
  %533 = fmul float %element581, %532
  %534 = fmul float %element582, %element598
  %535 = fmul float %element597, %element583
  %536 = fsub float %534, %535
  %537 = fmul float %element586, %536
  %538 = fsub float %533, %537
  %539 = fmul float %element582, %element588
  %540 = fmul float %element587, %element583
  %541 = fsub float %539, %540
  %542 = fmul float %element596, %541
  %543 = fadd float %538, %542
  %544 = fsub float -0.000000e+00, %543
  %545 = fmul float %element587, %element593
  %546 = fmul float %element592, %element588
  %547 = fsub float %545, %546
  %548 = fmul float %element581, %547
  %549 = fmul float %element582, %element593
  %550 = fmul float %element592, %element583
  %551 = fsub float %549, %550
  %552 = fmul float %element586, %551
  %553 = fsub float %548, %552
  %554 = fmul float %element582, %element588
  %555 = fmul float %element587, %element583
  %556 = fsub float %554, %555
  %557 = fmul float %element591, %556
  %558 = fadd float %553, %557
  %559 = fmul float %element593, %element599
  %560 = fmul float %element598, %element594
  %561 = fsub float %559, %560
  %562 = fmul float %element587, %561
  %563 = fmul float %element588, %element599
  %564 = fmul float %element598, %element589
  %565 = fsub float %563, %564
  %566 = fmul float %element592, %565
  %567 = fsub float %562, %566
  %568 = fmul float %element588, %element594
  %569 = fmul float %element593, %element589
  %570 = fsub float %568, %569
  %571 = fmul float %element597, %570
  %572 = fadd float %567, %571
  %573 = fmul float %element581, %572
  %574 = fmul float %element593, %element599
  %575 = fmul float %element598, %element594
  %576 = fsub float %574, %575
  %577 = fmul float %element582, %576
  %578 = fmul float %element583, %element599
  %579 = fmul float %element598, %element584
  %580 = fsub float %578, %579
  %581 = fmul float %element592, %580
  %582 = fsub float %577, %581
  %583 = fmul float %element583, %element594
  %584 = fmul float %element593, %element584
  %585 = fsub float %583, %584
  %586 = fmul float %element597, %585
  %587 = fadd float %582, %586
  %588 = fmul float %element586, %587
  %589 = fsub float %573, %588
  %590 = fmul float %element588, %element599
  %591 = fmul float %element598, %element589
  %592 = fsub float %590, %591
  %593 = fmul float %element582, %592
  %594 = fmul float %element583, %element599
  %595 = fmul float %element598, %element584
  %596 = fsub float %594, %595
  %597 = fmul float %element587, %596
  %598 = fsub float %593, %597
  %599 = fmul float %element583, %element589
  %600 = fmul float %element588, %element584
  %601 = fsub float %599, %600
  %602 = fmul float %element597, %601
  %603 = fadd float %598, %602
  %604 = fmul float %element591, %603
  %605 = fadd float %589, %604
  %606 = fmul float %element588, %element594
  %607 = fmul float %element593, %element589
  %608 = fsub float %606, %607
  %609 = fmul float %element582, %608
  %610 = fmul float %element583, %element594
  %611 = fmul float %element593, %element584
  %612 = fsub float %610, %611
  %613 = fmul float %element587, %612
  %614 = fsub float %609, %613
  %615 = fmul float %element583, %element589
  %616 = fmul float %element588, %element584
  %617 = fsub float %615, %616
  %618 = fmul float %element592, %617
  %619 = fadd float %614, %618
  %620 = fmul float %element596, %619
  %621 = fsub float %605, %620
  %622 = fdiv float 1.000000e+00, %621
  %623 = fmul float %340, %622
  %624 = fmul float %399, %622
  %625 = fmul float %456, %622
  %626 = fmul float %515, %622
  %627 = fmul float %355, %622
  %628 = fmul float %413, %622
  %629 = fmul float %471, %622
  %630 = fmul float %529, %622
  %631 = fmul float %369, %622
  %632 = fmul float %428, %622
  %633 = fmul float %485, %622
  %634 = fmul float %544, %622
  %635 = fmul float %384, %622
  %636 = fmul float %442, %622
  %637 = fmul float %500, %622
  %638 = fmul float %558, %622
  %639 = alloca [4 x <4 x float>]
  %640 = load [4 x <4 x float>]* %639
  %column600 = extractvalue [4 x <4 x float>] %640, 0
  %column601 = insertelement <4 x float> %column600, float %623, i32 0
  %column602 = insertelement <4 x float> %column601, float %627, i32 1
  %column603 = insertelement <4 x float> %column602, float %631, i32 2
  %column604 = insertelement <4 x float> %column603, float %635, i32 3
  %matrix605 = insertvalue [4 x <4 x float>] %640, <4 x float> %column604, 0
  %column606 = extractvalue [4 x <4 x float>] %matrix605, 1
  %column607 = insertelement <4 x float> %column606, float %624, i32 0
  %column608 = insertelement <4 x float> %column607, float %628, i32 1
  %column609 = insertelement <4 x float> %column608, float %632, i32 2
  %column610 = insertelement <4 x float> %column609, float %636, i32 3
  %matrix611 = insertvalue [4 x <4 x float>] %matrix605, <4 x float> %column610, 1
  %column612 = extractvalue [4 x <4 x float>] %matrix611, 2
  %column613 = insertelement <4 x float> %column612, float %625, i32 0
  %column614 = insertelement <4 x float> %column613, float %629, i32 1
  %column615 = insertelement <4 x float> %column614, float %633, i32 2
  %column616 = insertelement <4 x float> %column615, float %637, i32 3
  %matrix617 = insertvalue [4 x <4 x float>] %matrix611, <4 x float> %column616, 2
  %column618 = extractvalue [4 x <4 x float>] %matrix617, 3
  %column619 = insertelement <4 x float> %column618, float %626, i32 0
  %column620 = insertelement <4 x float> %column619, float %630, i32 1
  %column621 = insertelement <4 x float> %column620, float %634, i32 2
  %column622 = insertelement <4 x float> %column621, float %638, i32 3
  %matrix623 = insertvalue [4 x <4 x float>] %matrix617, <4 x float> %column622, 3
  store [4 x <4 x float>] %matrix623, [4 x <4 x float>]* %inv4
  %641 = load [4 x <4 x float>]* %inv4
  %642 = load <4 x float>* @FragColor_shadow
  %643 = alloca <4 x float>
  %644 = load <4 x float>* %643
  %column624 = extractvalue [4 x <4 x float>] %641, 0
  %dotres625 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %642, <4 x float> %column624)
  %645 = insertelement <4 x float> %644, float %dotres625, i32 0
  %column626 = extractvalue [4 x <4 x float>] %641, 1
  %dotres627 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %642, <4 x float> %column626)
  %646 = insertelement <4 x float> %645, float %dotres627, i32 1
  %column628 = extractvalue [4 x <4 x float>] %641, 2
  %dotres629 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %642, <4 x float> %column628)
  %647 = insertelement <4 x float> %646, float %dotres629, i32 2
  %column630 = extractvalue [4 x <4 x float>] %641, 3
  %dotres631 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %642, <4 x float> %column630)
  %FragColor_shadow632 = insertelement <4 x float> %647, float %dotres631, i32 3
  store <4 x float> %FragColor_shadow632, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %648 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1026, i32 -1, <4 x float> %648), !gla.output !7
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3, !5}
!gla.outputs = !{!7}
!gla.uniforms = !{!9, !11, !12, !13, !14, !15, !16, !17}
!gla.noStaticUse = !{!15, !16, !17}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"v", i32 1, <4 x float>* @v_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"u", i32 1, <3 x float>* @u_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}
!7 = metadata !{metadata !"FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!9 = metadata !{metadata !"un34", i32 12, [3 x <4 x float>]* @un34_typeProxy, metadata !10}
!10 = metadata !{i32 3, i32 0, i32 1024, null}
!11 = metadata !{metadata !"um43", i32 12, [4 x <3 x float>]* @um43_typeProxy, metadata !10}
!12 = metadata !{metadata !"um4", i32 12, [4 x <4 x float>]* @um4_typeProxy, metadata !10}
!13 = metadata !{metadata !"um2", i32 12, [2 x <2 x float>]* @um2_typeProxy, metadata !10}
!14 = metadata !{metadata !"um3", i32 12, [3 x <3 x float>]* @um3_typeProxy, metadata !10}
!15 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !10}
!16 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !10}
!17 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !10}


Bottom IR:
; ModuleID = 'Top'

@un34 = external addrspace(2) constant [3 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <3 x float>]
@um4 = external addrspace(2) constant [4 x <4 x float>]
@um2 = external addrspace(2) constant [2 x <2 x float>]
@um3 = external addrspace(2) constant [3 x <3 x float>]

define fastcc void @main() {
entry:
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  %u = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !3
  %rightComp = extractelement <3 x float> %u, i32 0
  %leftComp = extractelement <4 x float> %v, i32 0
  %element = fmul float %leftComp, %rightComp
  %leftComp1 = extractelement <4 x float> %v, i32 1
  %element2 = fmul float %leftComp1, %rightComp
  %leftComp4 = extractelement <4 x float> %v, i32 2
  %element5 = fmul float %leftComp4, %rightComp
  %leftComp7 = extractelement <4 x float> %v, i32 3
  %element8 = fmul float %leftComp7, %rightComp
  %0 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %element, i32 0, float %element2, i32 0, float %element5, i32 0, float %element8, i32 0)
  %rightComp10 = extractelement <3 x float> %u, i32 1
  %element12 = fmul float %leftComp, %rightComp10
  %element15 = fmul float %leftComp1, %rightComp10
  %element18 = fmul float %leftComp4, %rightComp10
  %element21 = fmul float %leftComp7, %rightComp10
  %1 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %element12, i32 0, float %element15, i32 0, float %element18, i32 0, float %element21, i32 0)
  %rightComp24 = extractelement <3 x float> %u, i32 2
  %element26 = fmul float %leftComp, %rightComp24
  %element29 = fmul float %leftComp1, %rightComp24
  %element32 = fmul float %leftComp4, %rightComp24
  %element35 = fmul float %leftComp7, %rightComp24
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %element26, i32 0, float %element29, i32 0, float %element32, i32 0, float %element35, i32 0)
  %column38 = fadd <4 x float> %0, <float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %column40 = fadd <4 x float> %1, <float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00>
  %column42 = fadd <4 x float> %2, <float 0.000000e+00, float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00>
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1027, i32 -1, i32 1), !gla.input !5
  %3 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float> undef, i32 15, <3 x float> %Color, i32 0, <3 x float> %Color, i32 1, <3 x float> %Color, i32 2, float 1.000000e+00, i32 0)
  %dotres = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %3, <4 x float> %column38)
  %dotres46 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %3, <4 x float> %column40)
  %dotres48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %3, <4 x float> %column42)
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres, i32 0, float %dotres46, i32 0, float %dotres48, i32 0, float 1.000000e+00, i32 0)
  %FragColor_shadow50 = fmul <4 x float> %3, %4
  %row = extractelement <4 x float> %column38, i32 0
  %5 = fmul float %leftComp, %row
  %row53 = extractelement <4 x float> %column38, i32 1
  %6 = fmul float %leftComp, %row53
  %row54 = extractelement <4 x float> %column38, i32 2
  %7 = fmul float %leftComp, %row54
  %row55 = extractelement <4 x float> %column38, i32 3
  %8 = fmul float %leftComp, %row55
  %row57 = extractelement <4 x float> %column40, i32 0
  %9 = fmul float %leftComp, %row57
  %row58 = extractelement <4 x float> %column40, i32 1
  %10 = fmul float %leftComp, %row58
  %row59 = extractelement <4 x float> %column40, i32 2
  %11 = fmul float %leftComp, %row59
  %row60 = extractelement <4 x float> %column40, i32 3
  %12 = fmul float %leftComp, %row60
  %row62 = extractelement <4 x float> %column42, i32 0
  %13 = fmul float %leftComp, %row62
  %row63 = extractelement <4 x float> %column42, i32 1
  %14 = fmul float %leftComp, %row63
  %row64 = extractelement <4 x float> %column42, i32 2
  %15 = fmul float %leftComp, %row64
  %row65 = extractelement <4 x float> %column42, i32 3
  %16 = fmul float %leftComp, %row65
  %17 = load [3 x <4 x float>] addrspace(2)* @un34, align 16, !gla.uniform !9
  %column68 = extractvalue [3 x <4 x float>] %17, 0
  %column73 = extractvalue [3 x <4 x float>] %17, 1
  %column78 = extractvalue [3 x <4 x float>] %17, 2
  %18 = load [4 x <3 x float>] addrspace(2)* @um43, align 16, !gla.uniform !11
  %rightColumn = extractvalue [4 x <3 x float>] %18, 0
  %rightComp109 = extractelement <3 x float> %rightColumn, i32 0
  %product = fmul float %rightComp109, %5
  %rightComp112 = extractelement <3 x float> %rightColumn, i32 1
  %product113 = fmul float %rightComp112, %9
  %dotProduct = fadd float %product, %product113
  %rightComp116 = extractelement <3 x float> %rightColumn, i32 2
  %product117 = fmul float %rightComp116, %13
  %dotProduct118 = fadd float %product117, %dotProduct
  %product123 = fmul float %rightComp109, %6
  %product127 = fmul float %rightComp112, %10
  %dotProduct128 = fadd float %product123, %product127
  %product132 = fmul float %rightComp116, %14
  %dotProduct133 = fadd float %product132, %dotProduct128
  %product138 = fmul float %rightComp109, %7
  %product142 = fmul float %rightComp112, %11
  %dotProduct143 = fadd float %product138, %product142
  %product147 = fmul float %rightComp116, %15
  %dotProduct148 = fadd float %product147, %dotProduct143
  %product153 = fmul float %rightComp109, %8
  %product157 = fmul float %rightComp112, %12
  %dotProduct158 = fadd float %product153, %product157
  %product162 = fmul float %rightComp116, %16
  %dotProduct163 = fadd float %product162, %dotProduct158
  %19 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct118, i32 0, float %dotProduct133, i32 0, float %dotProduct148, i32 0, float %dotProduct163, i32 0)
  %rightColumn166 = extractvalue [4 x <3 x float>] %18, 1
  %rightComp169 = extractelement <3 x float> %rightColumn166, i32 0
  %product170 = fmul float %rightComp169, %5
  %rightComp173 = extractelement <3 x float> %rightColumn166, i32 1
  %product174 = fmul float %rightComp173, %9
  %dotProduct175 = fadd float %product170, %product174
  %rightComp178 = extractelement <3 x float> %rightColumn166, i32 2
  %product179 = fmul float %rightComp178, %13
  %dotProduct180 = fadd float %product179, %dotProduct175
  %product185 = fmul float %rightComp169, %6
  %product189 = fmul float %rightComp173, %10
  %dotProduct190 = fadd float %product185, %product189
  %product194 = fmul float %rightComp178, %14
  %dotProduct195 = fadd float %product194, %dotProduct190
  %product200 = fmul float %rightComp169, %7
  %product204 = fmul float %rightComp173, %11
  %dotProduct205 = fadd float %product200, %product204
  %product209 = fmul float %rightComp178, %15
  %dotProduct210 = fadd float %product209, %dotProduct205
  %product215 = fmul float %rightComp169, %8
  %product219 = fmul float %rightComp173, %12
  %dotProduct220 = fadd float %product215, %product219
  %product224 = fmul float %rightComp178, %16
  %dotProduct225 = fadd float %product224, %dotProduct220
  %20 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct180, i32 0, float %dotProduct195, i32 0, float %dotProduct210, i32 0, float %dotProduct225, i32 0)
  %rightColumn228 = extractvalue [4 x <3 x float>] %18, 2
  %rightComp231 = extractelement <3 x float> %rightColumn228, i32 0
  %product232 = fmul float %rightComp231, %5
  %rightComp235 = extractelement <3 x float> %rightColumn228, i32 1
  %product236 = fmul float %rightComp235, %9
  %dotProduct237 = fadd float %product232, %product236
  %rightComp240 = extractelement <3 x float> %rightColumn228, i32 2
  %product241 = fmul float %rightComp240, %13
  %dotProduct242 = fadd float %product241, %dotProduct237
  %product247 = fmul float %rightComp231, %6
  %product251 = fmul float %rightComp235, %10
  %dotProduct252 = fadd float %product247, %product251
  %product256 = fmul float %rightComp240, %14
  %dotProduct257 = fadd float %product256, %dotProduct252
  %product262 = fmul float %rightComp231, %7
  %product266 = fmul float %rightComp235, %11
  %dotProduct267 = fadd float %product262, %product266
  %product271 = fmul float %rightComp240, %15
  %dotProduct272 = fadd float %product271, %dotProduct267
  %product277 = fmul float %rightComp231, %8
  %product281 = fmul float %rightComp235, %12
  %dotProduct282 = fadd float %product277, %product281
  %product286 = fmul float %rightComp240, %16
  %dotProduct287 = fadd float %product286, %dotProduct282
  %21 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct242, i32 0, float %dotProduct257, i32 0, float %dotProduct272, i32 0, float %dotProduct287, i32 0)
  %rightColumn290 = extractvalue [4 x <3 x float>] %18, 3
  %rightComp293 = extractelement <3 x float> %rightColumn290, i32 0
  %product294 = fmul float %rightComp293, %5
  %rightComp297 = extractelement <3 x float> %rightColumn290, i32 1
  %product298 = fmul float %rightComp297, %9
  %dotProduct299 = fadd float %product294, %product298
  %rightComp302 = extractelement <3 x float> %rightColumn290, i32 2
  %product303 = fmul float %rightComp302, %13
  %dotProduct304 = fadd float %product303, %dotProduct299
  %product309 = fmul float %rightComp293, %6
  %product313 = fmul float %rightComp297, %10
  %dotProduct314 = fadd float %product309, %product313
  %product318 = fmul float %rightComp302, %14
  %dotProduct319 = fadd float %product318, %dotProduct314
  %product324 = fmul float %rightComp293, %7
  %product328 = fmul float %rightComp297, %11
  %dotProduct329 = fadd float %product324, %product328
  %product333 = fmul float %rightComp302, %15
  %dotProduct334 = fadd float %product333, %dotProduct329
  %product339 = fmul float %rightComp293, %8
  %product343 = fmul float %rightComp297, %12
  %dotProduct344 = fadd float %product339, %product343
  %product348 = fmul float %rightComp302, %16
  %dotProduct349 = fadd float %product348, %dotProduct344
  %22 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct304, i32 0, float %dotProduct319, i32 0, float %dotProduct334, i32 0, float %dotProduct349, i32 0)
  %column354 = fadd <4 x float> %column68, %19
  %column357 = fadd <4 x float> %column73, %20
  %column360 = fadd <4 x float> %column78, %21
  %column363 = fadd <4 x float> %22, <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>
  %row366 = extractelement <4 x float> %column354, i32 0
  %23 = fsub float 0.000000e+00, %row366
  %row367 = extractelement <4 x float> %column354, i32 1
  %24 = fsub float 0.000000e+00, %row367
  %row368 = extractelement <4 x float> %column354, i32 2
  %25 = fsub float 0.000000e+00, %row368
  %row369 = extractelement <4 x float> %column354, i32 3
  %26 = fsub float 0.000000e+00, %row369
  %row371 = extractelement <4 x float> %column357, i32 0
  %27 = fsub float 0.000000e+00, %row371
  %row372 = extractelement <4 x float> %column357, i32 1
  %28 = fsub float 0.000000e+00, %row372
  %row373 = extractelement <4 x float> %column357, i32 2
  %29 = fsub float 0.000000e+00, %row373
  %row374 = extractelement <4 x float> %column357, i32 3
  %30 = fsub float 0.000000e+00, %row374
  %row376 = extractelement <4 x float> %column360, i32 0
  %31 = fsub float 0.000000e+00, %row376
  %row377 = extractelement <4 x float> %column360, i32 1
  %32 = fsub float 0.000000e+00, %row377
  %row378 = extractelement <4 x float> %column360, i32 2
  %33 = fsub float 0.000000e+00, %row378
  %row379 = extractelement <4 x float> %column360, i32 3
  %34 = fsub float 0.000000e+00, %row379
  %row381 = extractelement <4 x float> %column363, i32 0
  %35 = fsub float 0.000000e+00, %row381
  %row382 = extractelement <4 x float> %column363, i32 1
  %36 = fsub float 0.000000e+00, %row382
  %row383 = extractelement <4 x float> %column363, i32 2
  %37 = fsub float 0.000000e+00, %row383
  %row384 = extractelement <4 x float> %column363, i32 3
  %38 = fsub float 0.000000e+00, %row384
  %product391 = fmul float %leftComp, %23
  %product394 = fmul float %leftComp1, %27
  %dotProduct395 = fadd float %product391, %product394
  %product398 = fmul float %leftComp4, %31
  %dotProduct399 = fadd float %product398, %dotProduct395
  %product402 = fmul float %leftComp7, %35
  %dotProduct403 = fadd float %product402, %dotProduct399
  %product406 = fmul float %leftComp, %24
  %product409 = fmul float %leftComp1, %28
  %dotProduct410 = fadd float %product406, %product409
  %product413 = fmul float %leftComp4, %32
  %dotProduct414 = fadd float %product413, %dotProduct410
  %product417 = fmul float %leftComp7, %36
  %dotProduct418 = fadd float %product417, %dotProduct414
  %product421 = fmul float %leftComp, %25
  %product424 = fmul float %leftComp1, %29
  %dotProduct425 = fadd float %product421, %product424
  %product428 = fmul float %leftComp4, %33
  %dotProduct429 = fadd float %product428, %dotProduct425
  %product432 = fmul float %leftComp7, %37
  %dotProduct433 = fadd float %product432, %dotProduct429
  %product436 = fmul float %leftComp, %26
  %product439 = fmul float %leftComp1, %30
  %dotProduct440 = fadd float %product436, %product439
  %product443 = fmul float %leftComp4, %34
  %dotProduct444 = fadd float %product443, %dotProduct440
  %product447 = fmul float %leftComp7, %38
  %dotProduct448 = fadd float %product447, %dotProduct444
  %39 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct403, i32 0, float %dotProduct418, i32 0, float %dotProduct433, i32 0, float %dotProduct448, i32 0)
  %FragColor_shadow449 = fadd <4 x float> %FragColor_shadow50, %39
  %column452 = fmul <4 x float> %column354, %column354
  %column455 = fmul <4 x float> %column357, %column357
  %column458 = fmul <4 x float> %column360, %column360
  %column461 = fmul <4 x float> %column363, %column363
  %dotres463 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %column452)
  %dotres465 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %column455)
  %dotres467 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %column458)
  %dotres469 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %column461)
  %40 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres463, i32 0, float %dotres465, i32 0, float %dotres467, i32 0, float %dotres469, i32 0)
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float> undef, i32 15, <3 x float> %rightColumn, i32 0, <3 x float> %rightColumn166, i32 0, <3 x float> %rightColumn228, i32 0, <3 x float> %rightColumn290, i32 0)
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float> undef, i32 15, <3 x float> %rightColumn, i32 1, <3 x float> %rightColumn166, i32 1, <3 x float> %rightColumn228, i32 1, <3 x float> %rightColumn290, i32 1)
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float> undef, i32 15, <3 x float> %rightColumn, i32 2, <3 x float> %rightColumn166, i32 2, <3 x float> %rightColumn228, i32 2, <3 x float> %rightColumn290, i32 2)
  %dotres506 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %40, <4 x float> %41)
  %dotres508 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %40, <4 x float> %42)
  %dotres510 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %40, <4 x float> %43)
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres506, i32 0, float %dotres508, i32 0, float %dotres510, i32 0, float 1.000000e+00, i32 0)
  %FragColor_shadow512 = fmul <4 x float> %40, %44
  %45 = load [4 x <4 x float>] addrspace(2)* @um4, align 16, !gla.uniform !12
  %column513 = extractvalue [4 x <4 x float>] %45, 0
  %element514 = extractelement <4 x float> %column513, i32 0
  %element515 = extractelement <4 x float> %column513, i32 1
  %element516 = extractelement <4 x float> %column513, i32 2
  %element517 = extractelement <4 x float> %column513, i32 3
  %column518 = extractvalue [4 x <4 x float>] %45, 1
  %element519 = extractelement <4 x float> %column518, i32 0
  %element520 = extractelement <4 x float> %column518, i32 1
  %element521 = extractelement <4 x float> %column518, i32 2
  %element522 = extractelement <4 x float> %column518, i32 3
  %column523 = extractvalue [4 x <4 x float>] %45, 2
  %element524 = extractelement <4 x float> %column523, i32 0
  %element525 = extractelement <4 x float> %column523, i32 1
  %element526 = extractelement <4 x float> %column523, i32 2
  %element527 = extractelement <4 x float> %column523, i32 3
  %column528 = extractvalue [4 x <4 x float>] %45, 3
  %element529 = extractelement <4 x float> %column528, i32 0
  %element530 = extractelement <4 x float> %column528, i32 1
  %element531 = extractelement <4 x float> %column528, i32 2
  %element532 = extractelement <4 x float> %column528, i32 3
  %46 = fmul float %element526, %element532
  %47 = fmul float %element531, %element527
  %48 = fsub float %46, %47
  %49 = fmul float %element520, %48
  %50 = fmul float %element521, %element532
  %51 = fmul float %element531, %element522
  %52 = fsub float %50, %51
  %53 = fmul float %element525, %52
  %54 = fsub float %49, %53
  %55 = fmul float %element521, %element527
  %56 = fmul float %element526, %element522
  %57 = fsub float %55, %56
  %58 = fmul float %element530, %57
  %59 = fadd float %58, %54
  %60 = fmul float %element514, %59
  %61 = fmul float %element515, %48
  %62 = fmul float %element516, %element532
  %63 = fmul float %element531, %element517
  %64 = fsub float %62, %63
  %65 = fmul float %element525, %64
  %66 = fsub float %61, %65
  %67 = fmul float %element516, %element527
  %68 = fmul float %element526, %element517
  %69 = fsub float %67, %68
  %70 = fmul float %element530, %69
  %71 = fadd float %70, %66
  %72 = fmul float %element519, %71
  %73 = fsub float %60, %72
  %74 = fmul float %element515, %52
  %75 = fmul float %element520, %64
  %76 = fsub float %74, %75
  %77 = fmul float %element516, %element522
  %78 = fmul float %element521, %element517
  %79 = fsub float %77, %78
  %80 = fmul float %element530, %79
  %81 = fadd float %80, %76
  %82 = fmul float %element524, %81
  %83 = fadd float %82, %73
  %84 = fmul float %element515, %57
  %85 = fmul float %element520, %69
  %86 = fsub float %84, %85
  %87 = fmul float %element525, %79
  %88 = fadd float %87, %86
  %89 = fmul float %element529, %88
  %90 = fsub float %83, %89
  %91 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %90, <4 x i32> zeroinitializer)
  %FragColor_shadow534 = fmul <4 x float> %FragColor_shadow512, %91
  %92 = load [2 x <2 x float>] addrspace(2)* @um2, align 8, !gla.uniform !13
  %column535 = extractvalue [2 x <2 x float>] %92, 0
  %element536 = extractelement <2 x float> %column535, i32 0
  %element537 = extractelement <2 x float> %column535, i32 1
  %column538 = extractvalue [2 x <2 x float>] %92, 1
  %element539 = extractelement <2 x float> %column538, i32 0
  %element540 = extractelement <2 x float> %column538, i32 1
  %93 = fmul float %element536, %element540
  %94 = fmul float %element539, %element537
  %95 = fsub float %93, %94
  %96 = fdiv float 1.000000e+00, %95
  %97 = fmul float %96, %element540
  %98 = fmul float %96, %element539
  %99 = fsub float -0.000000e+00, %98
  %100 = fmul float %96, %element537
  %101 = fsub float -0.000000e+00, %100
  %102 = fmul float %96, %element536
  %103 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %97, i32 0, float %99, i32 0, float %101, i32 0, float %102, i32 0)
  %FragColor_shadow550 = fmul <4 x float> %103, %FragColor_shadow534
  %104 = load [3 x <3 x float>] addrspace(2)* @um3, align 16, !gla.uniform !14
  %column551 = extractvalue [3 x <3 x float>] %104, 0
  %element552 = extractelement <3 x float> %column551, i32 0
  %element553 = extractelement <3 x float> %column551, i32 1
  %element554 = extractelement <3 x float> %column551, i32 2
  %column555 = extractvalue [3 x <3 x float>] %104, 1
  %element556 = extractelement <3 x float> %column555, i32 0
  %element557 = extractelement <3 x float> %column555, i32 1
  %element558 = extractelement <3 x float> %column555, i32 2
  %column559 = extractvalue [3 x <3 x float>] %104, 2
  %element560 = extractelement <3 x float> %column559, i32 0
  %element561 = extractelement <3 x float> %column559, i32 1
  %element562 = extractelement <3 x float> %column559, i32 2
  %105 = fmul float %element552, %element561
  %106 = fmul float %element560, %element553
  %107 = fsub float %105, %106
  %108 = fmul float %element557, %element562
  %109 = fmul float %element561, %element558
  %110 = fsub float %108, %109
  %111 = fmul float %element552, %110
  %112 = fmul float %element553, %element562
  %113 = fmul float %element561, %element554
  %114 = fsub float %112, %113
  %115 = fmul float %element556, %114
  %116 = fsub float %111, %115
  %117 = fmul float %element553, %element558
  %118 = fmul float %element557, %element554
  %119 = fsub float %117, %118
  %120 = fmul float %element560, %119
  %121 = fadd float %120, %116
  %122 = fdiv float 1.000000e+00, %121
  %123 = fmul float %122, %107
  %124 = fsub float -0.000000e+00, %123
  %125 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %124, <4 x i32> zeroinitializer)
  %FragColor_shadow579 = fmul <4 x float> %125, %FragColor_shadow550
  %126 = fdiv float 1.000000e+00, %90
  %127 = fmul float %element530, %element521
  %128 = fmul float %element520, %element531
  %129 = fmul float %element530, %element526
  %130 = fmul float %element525, %element531
  %131 = fmul float %element530, %element517
  %132 = fmul float %element515, %element532
  %133 = fmul float %element530, %element527
  %134 = fmul float %element525, %element532
  %135 = fmul float %element530, %element522
  %136 = fmul float %element520, %element532
  %137 = fmul float %element524, %52
  %138 = fmul float %element519, %48
  %139 = fmul float %element525, %element521
  %140 = fmul float %element520, %element526
  %141 = fsub float %128, %127
  %142 = fsub float %130, %129
  %143 = fmul float %element525, %element517
  %144 = fmul float %element515, %element527
  %145 = fsub float %132, %131
  %146 = fsub float %134, %133
  %147 = fmul float %element525, %element522
  %148 = fmul float %element520, %element527
  %149 = fsub float %136, %135
  %150 = fmul float %element529, %57
  %151 = fsub float %138, %137
  %152 = fmul float %element530, %element516
  %153 = fmul float %element515, %element531
  %154 = fsub float %140, %139
  %155 = fmul float %element524, %141
  %156 = fmul float %element519, %142
  %157 = fsub float %144, %143
  %158 = fmul float %element524, %145
  %159 = fmul float %element514, %146
  %160 = fsub float %148, %147
  %161 = fmul float %element524, %149
  %162 = fmul float %element519, %146
  %163 = fmul float %element519, %64
  %164 = fmul float %element514, %52
  %165 = fmul float %element524, %64
  %166 = fmul float %element514, %48
  %167 = fadd float %150, %151
  %168 = fmul float %126, %71
  %169 = fmul float %126, %167
  %170 = fmul float %126, %59
  %171 = fmul float %element520, %element516
  %172 = fmul float %element515, %element521
  %173 = fsub float %153, %152
  %174 = fmul float %element525, %element516
  %175 = fmul float %element515, %element526
  %176 = fmul float %element529, %154
  %177 = fsub float %156, %155
  %178 = fmul float %element520, %element517
  %179 = fmul float %element515, %element522
  %180 = fmul float %element529, %157
  %181 = fsub float %159, %158
  %182 = fmul float %element529, %160
  %183 = fsub float %162, %161
  %184 = fmul float %element529, %79
  %185 = fsub float %164, %163
  %186 = fmul float %element529, %69
  %187 = fsub float %166, %165
  %188 = fsub float -0.000000e+00, %168
  %189 = fsub float -0.000000e+00, %169
  %190 = fsub float %172, %171
  %191 = fmul float %element519, %173
  %192 = fmul float %element514, %141
  %193 = fsub float %175, %174
  %194 = fmul float %element524, %173
  %195 = fmul float %element514, %142
  %196 = fadd float %176, %177
  %197 = fsub float %179, %178
  %198 = fmul float %element519, %157
  %199 = fmul float %element514, %160
  %200 = fmul float %element519, %145
  %201 = fmul float %element514, %149
  %202 = fadd float %180, %181
  %203 = fadd float %182, %183
  %204 = fmul float %element519, %69
  %205 = fmul float %element514, %57
  %206 = fadd float %184, %185
  %207 = fadd float %186, %187
  %208 = fmul float %126, %88
  %209 = fmul float %126, %206
  %210 = fmul float %126, %81
  %211 = fmul float %126, %202
  %212 = fmul float %126, %207
  %213 = fmul float %126, %196
  %214 = fmul float %126, %203
  %215 = fmul float %element529, %190
  %216 = fsub float %192, %191
  %217 = fmul float %element529, %193
  %218 = fsub float %195, %194
  %219 = fmul float %element524, %197
  %220 = fsub float %199, %198
  %221 = fmul float %element529, %197
  %222 = fsub float %201, %200
  %223 = fmul float %element524, %79
  %224 = fsub float %205, %204
  %225 = fsub float -0.000000e+00, %208
  %226 = fsub float -0.000000e+00, %209
  %227 = fsub float -0.000000e+00, %211
  %228 = fsub float -0.000000e+00, %213
  %229 = fmul float %element519, %193
  %230 = fmul float %element514, %154
  %231 = fadd float %215, %216
  %232 = fadd float %217, %218
  %233 = fadd float %219, %220
  %234 = fadd float %221, %222
  %235 = fadd float %223, %224
  %236 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %170, i32 0, float %188, i32 0, float %210, i32 0, float %225, i32 0)
  %237 = fmul float %126, %233
  %238 = fmul float %126, %235
  %239 = fmul float %126, %231
  %240 = fmul float %126, %234
  %241 = fmul float %126, %232
  %242 = fmul float %element524, %190
  %243 = fsub float %230, %229
  %dotres625 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %236)
  %244 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %189, i32 0, float %212, i32 0, float %226, i32 0, float %238, i32 0)
  %245 = fsub float -0.000000e+00, %237
  %246 = fsub float -0.000000e+00, %239
  %247 = fadd float %242, %243
  %dotres627 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %244)
  %248 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %214, i32 0, float %227, i32 0, float %240, i32 0, float %245, i32 0)
  %249 = fmul float %126, %247
  %dotres629 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %248)
  %250 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %228, i32 0, float %241, i32 0, float %246, i32 0, float %249, i32 0)
  %dotres631 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %250)
  %251 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres625, i32 0, float %dotres627, i32 0, float %dotres629, i32 0, float %dotres631, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 1026, i32 -1, <4 x float> %251), !gla.output !7
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3, !5}
!gla.outputs = !{!7}
!gla.uniforms = !{!9, !11, !12, !13, !14, !15, !16, !17}
!gla.noStaticUse = !{!15, !16, !17}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"v", i32 1, <4 x float>* @v_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"u", i32 1, <3 x float>* @u_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}
!7 = metadata !{metadata !"FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!9 = metadata !{metadata !"un34", i32 12, [3 x <4 x float>]* @un34_typeProxy, metadata !10}
!10 = metadata !{i32 3, i32 0, i32 1024, null}
!11 = metadata !{metadata !"um43", i32 12, [4 x <3 x float>]* @um43_typeProxy, metadata !10}
!12 = metadata !{metadata !"um4", i32 12, [4 x <4 x float>]* @um4_typeProxy, metadata !10}
!13 = metadata !{metadata !"um2", i32 12, [2 x <2 x float>]* @um2_typeProxy, metadata !10}
!14 = metadata !{metadata !"um3", i32 12, [3 x <3 x float>]* @um3_typeProxy, metadata !10}
!15 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !10}
!16 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !10}
!17 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !10}
#### BEGIN COMPILER 0 INFO LOG ####
Warning, version 150 is not yet complete; some version-specific features are present, but many are missing.
WARNING: 0:4: varying deprecated in version 130; may be removed in future release
WARNING: 0:13: varying deprecated in version 130; may be removed in future release
WARNING: 0:15: varying deprecated in version 130; may be removed in future release
#### END COMPILER 0 INFO LOG ####
#version 150 core
// LunarGOO output (r722)
uniform mat3x4 un34;
uniform mat4x3 um43;
uniform mat4 um4;
uniform mat2 um2;
uniform mat3 um3;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
in vec4 v;
in vec3 u;
in vec3 Color;
out vec4 FragColor;
const vec4 const37 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 const39 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 const41 = vec4(0.0, 0.0, 4.3, 0.0);
const float const43 = 1.0;
const vec4 const156 = vec4(0.0, 0.0, 0.0, 1.0);
const float const158 = 0.0;
const float const281 = 0.0;

void main()
{
    float element = v.x * u.x;
    float element2 = v.y * u.x;
    float element5 = v.z * u.x;
    float element8 = v.w * u.x;
    vec4 temp25 = vec4(element, element2, element5, element8);
    float element12 = v.x * u.y;
    float element15 = v.y * u.y;
    float element18 = v.z * u.y;
    float element21 = v.w * u.y;
    vec4 temp30 = vec4(element12, element15, element18, element21);
    float element26 = v.x * u.z;
    float element29 = v.y * u.z;
    float element32 = v.z * u.z;
    float element35 = v.w * u.z;
    vec4 temp35 = vec4(element26, element29, element32, element35);
    vec4 column38 = temp25 + const37;
    vec4 column40 = temp30 + const39;
    vec4 column42 = temp35 + const41;
    vec4 temp42 = vec4(Color.x, Color.y, Color.z, const43);
    float dotres = dot(temp42, column38);
    float dotres46 = dot(temp42, column40);
    float dotres48 = dot(temp42, column42);
    vec4 temp47 = vec4(dotres, dotres46, dotres48, const43);
    vec4 FragColor_shadow50 = temp42 * temp47;
    float temp49 = v.x * column38.x;
    float temp50 = v.x * column38.y;
    float temp51 = v.x * column38.z;
    float temp52 = v.x * column38.w;
    float temp53 = v.x * column40.x;
    float temp54 = v.x * column40.y;
    float temp55 = v.x * column40.z;
    float temp56 = v.x * column40.w;
    float temp57 = v.x * column42.x;
    float temp58 = v.x * column42.y;
    float temp59 = v.x * column42.z;
    float temp60 = v.x * column42.w;
    vec4 column68 = un34[0];
    vec4 column73 = un34[1];
    vec4 column78 = un34[2];
    vec3 rightColumn = um43[0];
    float product = rightColumn.x * temp49;
    float product113 = rightColumn.y * temp53;
    float dotProduct = product + product113;
    float product117 = rightColumn.z * temp57;
    float dotProduct118 = product117 + dotProduct;
    float product123 = rightColumn.x * temp50;
    float product127 = rightColumn.y * temp54;
    float dotProduct128 = product123 + product127;
    float product132 = rightColumn.z * temp58;
    float dotProduct133 = product132 + dotProduct128;
    float product138 = rightColumn.x * temp51;
    float product142 = rightColumn.y * temp55;
    float dotProduct143 = product138 + product142;
    float product147 = rightColumn.z * temp59;
    float dotProduct148 = product147 + dotProduct143;
    float product153 = rightColumn.x * temp52;
    float product157 = rightColumn.y * temp56;
    float dotProduct158 = product153 + product157;
    float product162 = rightColumn.z * temp60;
    float dotProduct163 = product162 + dotProduct158;
    vec4 temp85 = vec4(dotProduct118, dotProduct133, dotProduct148, dotProduct163);
    vec3 rightColumn166 = um43[1];
    float product170 = rightColumn166.x * temp49;
    float product174 = rightColumn166.y * temp53;
    float dotProduct175 = product170 + product174;
    float product179 = rightColumn166.z * temp57;
    float dotProduct180 = product179 + dotProduct175;
    float product185 = rightColumn166.x * temp50;
    float product189 = rightColumn166.y * temp54;
    float dotProduct190 = product185 + product189;
    float product194 = rightColumn166.z * temp58;
    float dotProduct195 = product194 + dotProduct190;
    float product200 = rightColumn166.x * temp51;
    float product204 = rightColumn166.y * temp55;
    float dotProduct205 = product200 + product204;
    float product209 = rightColumn166.z * temp59;
    float dotProduct210 = product209 + dotProduct205;
    float product215 = rightColumn166.x * temp52;
    float product219 = rightColumn166.y * temp56;
    float dotProduct220 = product215 + product219;
    float product224 = rightColumn166.z * temp60;
    float dotProduct225 = product224 + dotProduct220;
    vec4 temp107 = vec4(dotProduct180, dotProduct195, dotProduct210, dotProduct225);
    vec3 rightColumn228 = um43[2];
    float product232 = rightColumn228.x * temp49;
    float product236 = rightColumn228.y * temp53;
    float dotProduct237 = product232 + product236;
    float product241 = rightColumn228.z * temp57;
    float dotProduct242 = product241 + dotProduct237;
    float product247 = rightColumn228.x * temp50;
    float product251 = rightColumn228.y * temp54;
    float dotProduct252 = product247 + product251;
    float product256 = rightColumn228.z * temp58;
    float dotProduct257 = product256 + dotProduct252;
    float product262 = rightColumn228.x * temp51;
    float product266 = rightColumn228.y * temp55;
    float dotProduct267 = product262 + product266;
    float product271 = rightColumn228.z * temp59;
    float dotProduct272 = product271 + dotProduct267;
    float product277 = rightColumn228.x * temp52;
    float product281 = rightColumn228.y * temp56;
    float dotProduct282 = product277 + product281;
    float product286 = rightColumn228.z * temp60;
    float dotProduct287 = product286 + dotProduct282;
    vec4 temp129 = vec4(dotProduct242, dotProduct257, dotProduct272, dotProduct287);
    vec3 rightColumn290 = um43[3];
    float product294 = rightColumn290.x * temp49;
    float product298 = rightColumn290.y * temp53;
    float dotProduct299 = product294 + product298;
    float product303 = rightColumn290.z * temp57;
    float dotProduct304 = product303 + dotProduct299;
    float product309 = rightColumn290.x * temp50;
    float product313 = rightColumn290.y * temp54;
    float dotProduct314 = product309 + product313;
    float product318 = rightColumn290.z * temp58;
    float dotProduct319 = product318 + dotProduct314;
    float product324 = rightColumn290.x * temp51;
    float product328 = rightColumn290.y * temp55;
    float dotProduct329 = product324 + product328;
    float product333 = rightColumn290.z * temp59;
    float dotProduct334 = product333 + dotProduct329;
    float product339 = rightColumn290.x * temp52;
    float product343 = rightColumn290.y * temp56;
    float dotProduct344 = product339 + product343;
    float product348 = rightColumn290.z * temp60;
    float dotProduct349 = product348 + dotProduct344;
    vec4 temp151 = vec4(dotProduct304, dotProduct319, dotProduct334, dotProduct349);
    vec4 column354 = column68 + temp85;
    vec4 column357 = column73 + temp107;
    vec4 column360 = column78 + temp129;
    vec4 column363 = temp151 + const156;
    float temp157 = const158 - column354.x;
    float temp159 = const158 - column354.y;
    float temp160 = const158 - column354.z;
    float temp161 = const158 - column354.w;
    float temp162 = const158 - column357.x;
    float temp163 = const158 - column357.y;
    float temp164 = const158 - column357.z;
    float temp165 = const158 - column357.w;
    float temp166 = const158 - column360.x;
    float temp167 = const158 - column360.y;
    float temp168 = const158 - column360.z;
    float temp169 = const158 - column360.w;
    float temp170 = const158 - column363.x;
    float temp171 = const158 - column363.y;
    float temp172 = const158 - column363.z;
    float temp173 = const158 - column363.w;
    float product391 = v.x * temp157;
    float product394 = v.y * temp162;
    float dotProduct395 = product391 + product394;
    float product398 = v.z * temp166;
    float dotProduct399 = product398 + dotProduct395;
    float product402 = v.w * temp170;
    float dotProduct403 = product402 + dotProduct399;
    float product406 = v.x * temp159;
    float product409 = v.y * temp163;
    float dotProduct410 = product406 + product409;
    float product413 = v.z * temp167;
    float dotProduct414 = product413 + dotProduct410;
    float product417 = v.w * temp171;
    float dotProduct418 = product417 + dotProduct414;
    float product421 = v.x * temp160;
    float product424 = v.y * temp164;
    float dotProduct425 = product421 + product424;
    float product428 = v.z * temp168;
    float dotProduct429 = product428 + dotProduct425;
    float product432 = v.w * temp172;
    float dotProduct433 = product432 + dotProduct429;
    float product436 = v.x * temp161;
    float product439 = v.y * temp165;
    float dotProduct440 = product436 + product439;
    float product443 = v.z * temp169;
    float dotProduct444 = product443 + dotProduct440;
    float product447 = v.w * temp173;
    float dotProduct448 = product447 + dotProduct444;
    vec4 temp202 = vec4(dotProduct403, dotProduct418, dotProduct433, dotProduct448);
    vec4 FragColor_shadow449 = FragColor_shadow50 + temp202;
    vec4 column452 = column354 * column354;
    vec4 column455 = column357 * column357;
    vec4 column458 = column360 * column360;
    vec4 column461 = column363 * column363;
    float dotres463 = dot(FragColor_shadow449, column452);
    float dotres465 = dot(FragColor_shadow449, column455);
    float dotres467 = dot(FragColor_shadow449, column458);
    float dotres469 = dot(FragColor_shadow449, column461);
    vec4 temp212 = vec4(dotres463, dotres465, dotres467, dotres469);
    vec4 temp213 = vec4(rightColumn.x, rightColumn166.x, rightColumn228.x, rightColumn290.x);
    vec4 temp214 = vec4(rightColumn.y, rightColumn166.y, rightColumn228.y, rightColumn290.y);
    vec4 temp215 = vec4(rightColumn.z, rightColumn166.z, rightColumn228.z, rightColumn290.z);
    float dotres506 = dot(temp212, temp213);
    float dotres508 = dot(temp212, temp214);
    float dotres510 = dot(temp212, temp215);
    vec4 temp219 = vec4(dotres506, dotres508, dotres510, const43);
    vec4 FragColor_shadow512 = temp212 * temp219;
    vec4 column513 = um4[0];
    vec4 column518 = um4[1];
    vec4 column523 = um4[2];
    vec4 column528 = um4[3];
    float temp225 = column523.z * column528.w;
    float temp226 = column528.z * column523.w;
    float temp227 = temp225 - temp226;
    float temp228 = column518.y * temp227;
    float temp229 = column518.z * column528.w;
    float temp230 = column528.z * column518.w;
    float temp231 = temp229 - temp230;
    float temp232 = column523.y * temp231;
    float temp233 = temp228 - temp232;
    float temp234 = column518.z * column523.w;
    float temp235 = column523.z * column518.w;
    float temp236 = temp234 - temp235;
    float temp237 = column528.y * temp236;
    float temp238 = temp237 + temp233;
    float temp239 = column513.x * temp238;
    float temp240 = column513.y * temp227;
    float temp241 = column513.z * column528.w;
    float temp242 = column528.z * column513.w;
    float temp243 = temp241 - temp242;
    float temp244 = column523.y * temp243;
    float temp245 = temp240 - temp244;
    float temp246 = column513.z * column523.w;
    float temp247 = column523.z * column513.w;
    float temp248 = temp246 - temp247;
    float temp249 = column528.y * temp248;
    float temp250 = temp249 + temp245;
    float temp251 = column518.x * temp250;
    float temp252 = temp239 - temp251;
    float temp253 = column513.y * temp231;
    float temp254 = column518.y * temp243;
    float temp255 = temp253 - temp254;
    float temp256 = column513.z * column518.w;
    float temp257 = column518.z * column513.w;
    float temp258 = temp256 - temp257;
    float temp259 = column528.y * temp258;
    float temp260 = temp259 + temp255;
    float temp261 = column523.x * temp260;
    float temp262 = temp261 + temp252;
    float temp263 = column513.y * temp236;
    float temp264 = column518.y * temp248;
    float temp265 = temp263 - temp264;
    float temp266 = column523.y * temp258;
    float temp267 = temp266 + temp265;
    float temp268 = column528.x * temp267;
    float temp269 = temp262 - temp268;
    vec4 temp270 = vec4(temp269);
    vec4 FragColor_shadow534 = FragColor_shadow512 * temp270;
    vec2 column535 = um2[0];
    vec2 column538 = um2[1];
    float temp274 = column535.x * column538.y;
    float temp275 = column538.x * column535.y;
    float temp276 = temp274 - temp275;
    float temp277 = const43 / temp276;
    float temp278 = temp277 * column538.y;
    float temp279 = temp277 * column538.x;
    float temp280 = const281 - temp279;
    float temp282 = temp277 * column535.y;
    float temp283 = const281 - temp282;
    float temp284 = temp277 * column535.x;
    vec4 temp285 = vec4(temp278, temp280, temp283, temp284);
    vec4 FragColor_shadow550 = temp285 * FragColor_shadow534;
    vec3 column551 = um3[0];
    vec3 column555 = um3[1];
    vec3 column559 = um3[2];
    float temp290 = column551.x * column559.y;
    float temp291 = column559.x * column551.y;
    float temp292 = temp290 - temp291;
    float temp293 = column555.y * column559.z;
    float temp294 = column559.y * column555.z;
    float temp295 = temp293 - temp294;
    float temp296 = column551.x * temp295;
    float temp297 = column551.y * column559.z;
    float temp298 = column559.y * column551.z;
    float temp299 = temp297 - temp298;
    float temp300 = column555.x * temp299;
    float temp301 = temp296 - temp300;
    float temp302 = column551.y * column555.z;
    float temp303 = column555.y * column551.z;
    float temp304 = temp302 - temp303;
    float temp305 = column559.x * temp304;
    float temp306 = temp305 + temp301;
    float temp307 = const43 / temp306;
    float temp308 = temp307 * temp292;
    float temp309 = const281 - temp308;
    vec4 temp310 = vec4(temp309);
    vec4 FragColor_shadow579 = temp310 * FragColor_shadow550;
    float temp312 = const43 / temp269;
    float temp313 = column528.y * column518.z;
    float temp314 = column518.y * column528.z;
    float temp315 = column528.y * column523.z;
    float temp316 = column523.y * column528.z;
    float temp317 = column528.y * column513.w;
    float temp318 = column513.y * column528.w;
    float temp319 = column528.y * column523.w;
    float temp320 = column523.y * column528.w;
    float temp321 = column528.y * column518.w;
    float temp322 = column518.y * column528.w;
    float temp323 = column523.x * temp231;
    float temp324 = column518.x * temp227;
    float temp325 = column523.y * column518.z;
    float temp326 = column518.y * column523.z;
    float temp327 = temp314 - temp313;
    float temp328 = temp316 - temp315;
    float temp329 = column523.y * column513.w;
    float temp330 = column513.y * column523.w;
    float temp331 = temp318 - temp317;
    float temp332 = temp320 - temp319;
    float temp333 = column523.y * column518.w;
    float temp334 = column518.y * column523.w;
    float temp335 = temp322 - temp321;
    float temp336 = column528.x * temp236;
    float temp337 = temp324 - temp323;
    float temp338 = column528.y * column513.z;
    float temp339 = column513.y * column528.z;
    float temp340 = temp326 - temp325;
    float temp341 = column523.x * temp327;
    float temp342 = column518.x * temp328;
    float temp343 = temp330 - temp329;
    float temp344 = column523.x * temp331;
    float temp345 = column513.x * temp332;
    float temp346 = temp334 - temp333;
    float temp347 = column523.x * temp335;
    float temp348 = column518.x * temp332;
    float temp349 = column518.x * temp243;
    float temp350 = column513.x * temp231;
    float temp351 = column523.x * temp243;
    float temp352 = column513.x * temp227;
    float temp353 = temp336 + temp337;
    float temp354 = temp312 * temp250;
    float temp355 = temp312 * temp353;
    float temp356 = temp312 * temp238;
    float temp357 = column518.y * column513.z;
    float temp358 = column513.y * column518.z;
    float temp359 = temp339 - temp338;
    float temp360 = column523.y * column513.z;
    float temp361 = column513.y * column523.z;
    float temp362 = column528.x * temp340;
    float temp363 = temp342 - temp341;
    float temp364 = column518.y * column513.w;
    float temp365 = column513.y * column518.w;
    float temp366 = column528.x * temp343;
    float temp367 = temp345 - temp344;
    float temp368 = column528.x * temp346;
    float temp369 = temp348 - temp347;
    float temp370 = column528.x * temp258;
    float temp371 = temp350 - temp349;
    float temp372 = column528.x * temp248;
    float temp373 = temp352 - temp351;
    float temp374 = const281 - temp354;
    float temp375 = const281 - temp355;
    float temp376 = temp358 - temp357;
    float temp377 = column518.x * temp359;
    float temp378 = column513.x * temp327;
    float temp379 = temp361 - temp360;
    float temp380 = column523.x * temp359;
    float temp381 = column513.x * temp328;
    float temp382 = temp362 + temp363;
    float temp383 = temp365 - temp364;
    float temp384 = column518.x * temp343;
    float temp385 = column513.x * temp346;
    float temp386 = column518.x * temp331;
    float temp387 = column513.x * temp335;
    float temp388 = temp366 + temp367;
    float temp389 = temp368 + temp369;
    float temp390 = column518.x * temp248;
    float temp391 = column513.x * temp236;
    float temp392 = temp370 + temp371;
    float temp393 = temp372 + temp373;
    float temp394 = temp312 * temp267;
    float temp395 = temp312 * temp392;
    float temp396 = temp312 * temp260;
    float temp397 = temp312 * temp388;
    float temp398 = temp312 * temp393;
    float temp399 = temp312 * temp382;
    float temp400 = temp312 * temp389;
    float temp401 = column528.x * temp376;
    float temp402 = temp378 - temp377;
    float temp403 = column528.x * temp379;
    float temp404 = temp381 - temp380;
    float temp405 = column523.x * temp383;
    float temp406 = temp385 - temp384;
    float temp407 = column528.x * temp383;
    float temp408 = temp387 - temp386;
    float temp409 = column523.x * temp258;
    float temp410 = temp391 - temp390;
    float temp411 = const281 - temp394;
    float temp412 = const281 - temp395;
    float temp413 = const281 - temp397;
    float temp414 = const281 - temp399;
    float temp415 = column518.x * temp379;
    float temp416 = column513.x * temp340;
    float temp417 = temp401 + temp402;
    float temp418 = temp403 + temp404;
    float temp419 = temp405 + temp406;
    float temp420 = temp407 + temp408;
    float temp421 = temp409 + temp410;
    vec4 temp422 = vec4(temp356, temp374, temp396, temp411);
    float temp423 = temp312 * temp419;
    float temp424 = temp312 * temp421;
    float temp425 = temp312 * temp417;
    float temp426 = temp312 * temp420;
    float temp427 = temp312 * temp418;
    float temp428 = column523.x * temp376;
    float temp429 = temp416 - temp415;
    float dotres625 = dot(FragColor_shadow579, temp422);
    vec4 temp431 = vec4(temp375, temp398, temp412, temp424);
    float temp432 = const281 - temp423;
    float temp433 = const281 - temp425;
    float temp434 = temp428 + temp429;
    float dotres627 = dot(FragColor_shadow579, temp431);
    vec4 temp436 = vec4(temp400, temp413, temp426, temp432);
    float temp437 = temp312 * temp434;
    float dotres629 = dot(FragColor_shadow579, temp436);
    vec4 temp439 = vec4(temp414, temp427, temp433, temp437);
    float dotres631 = dot(FragColor_shadow579, temp439);
    vec4 temp441 = vec4(dotres625, dotres627, dotres629, dotres631);
    FragColor = temp441;
    
}

#### BEGIN COMPILER 0 INFO LOG ####
Warning, version 150 is not yet complete; some version-specific features are present, but many are missing.
#### END COMPILER 0 INFO LOG ####
#version 150 core
// LunarGOO output (r722)
uniform mat3x4 un34;
uniform mat4x3 um43;
uniform mat4 um4;
uniform mat2 um2;
uniform mat3 um3;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
in vec4 v;
in vec3 u;
in vec3 Color;
out vec4 FragColor;
const vec4 const37 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 const39 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 const41 = vec4(0.0, 0.0, 4.3, 0.0);
const float const43 = 1.0;
const vec4 const149 = vec4(0.0, 0.0, 0.0, 1.0);
const float const151 = 0.0;

void main()
{
    float element1 = v.x * u.x;
    float element24 = v.y * u.x;
    float element57 = v.z * u.x;
    float element810 = v.w * u.x;
    vec4 temp25 = vec4(element1, element24, element57, element810);
    float element1214 = v.x * u.y;
    float element1517 = v.y * u.y;
    float element1820 = v.z * u.y;
    float element2123 = v.w * u.y;
    vec4 temp30 = vec4(element1214, element1517, element1820, element2123);
    float element2628 = v.x * u.z;
    float element2931 = v.y * u.z;
    float element3234 = v.z * u.z;
    float element3537 = v.w * u.z;
    vec4 temp35 = vec4(element2628, element2931, element3234, element3537);
    vec4 column3840 = temp25 + const37;
    vec4 column4041 = temp30 + const39;
    vec4 column4242 = temp35 + const41;
    vec4 temp42 = vec4(Color.x, Color.y, Color.z, const43);
    float dotres47 = dot(temp42, column3840);
    float dotres4648 = dot(temp42, column4041);
    float dotres4849 = dot(temp42, column4242);
    vec4 temp47 = vec4(dotres47, dotres4648, dotres4849, const43);
    vec4 FragColor_shadow5052 = temp42 * temp47;
    float temp4954 = v.x * column3840.x;
    float temp5056 = v.x * column3840.y;
    float temp5158 = v.x * column3840.z;
    float temp5260 = v.x * column3840.w;
    float temp5362 = v.x * column4041.x;
    float temp5464 = v.x * column4041.y;
    float temp5566 = v.x * column4041.z;
    float temp5668 = v.x * column4041.w;
    float temp5770 = v.x * column4242.x;
    float temp5872 = v.x * column4242.y;
    float temp5974 = v.x * column4242.z;
    float temp6076 = v.x * column4242.w;
    float product81 = um43[0].x * temp4954;
    float product11382 = um43[0].y * temp5362;
    float dotProduct83 = product81 + product11382;
    float product11784 = um43[0].z * temp5770;
    float dotProduct11885 = product11784 + dotProduct83;
    float product12386 = um43[0].x * temp5056;
    float product12787 = um43[0].y * temp5464;
    float dotProduct12888 = product12386 + product12787;
    float product13289 = um43[0].z * temp5872;
    float dotProduct13390 = product13289 + dotProduct12888;
    float product13891 = um43[0].x * temp5158;
    float product14292 = um43[0].y * temp5566;
    float dotProduct14393 = product13891 + product14292;
    float product14794 = um43[0].z * temp5974;
    float dotProduct14895 = product14794 + dotProduct14393;
    float product15396 = um43[0].x * temp5260;
    float product15797 = um43[0].y * temp5668;
    float dotProduct15898 = product15396 + product15797;
    float product16299 = um43[0].z * temp6076;
    float dotProduct163100 = product16299 + dotProduct15898;
    vec4 temp81 = vec4(dotProduct11885, dotProduct13390, dotProduct14895, dotProduct163100);
    float product170104 = temp4954 * um43[1].x;
    float product174105 = temp5362 * um43[1].y;
    float dotProduct175106 = product170104 + product174105;
    float product179107 = temp5770 * um43[1].z;
    float dotProduct180108 = product179107 + dotProduct175106;
    float product185109 = temp5056 * um43[1].x;
    float product189110 = temp5464 * um43[1].y;
    float dotProduct190111 = product185109 + product189110;
    float product194112 = temp5872 * um43[1].z;
    float dotProduct195113 = product194112 + dotProduct190111;
    float product200114 = temp5158 * um43[1].x;
    float product204115 = temp5566 * um43[1].y;
    float dotProduct205116 = product200114 + product204115;
    float product209117 = temp5974 * um43[1].z;
    float dotProduct210118 = product209117 + dotProduct205116;
    float product215119 = temp5260 * um43[1].x;
    float product219120 = temp5668 * um43[1].y;
    float dotProduct220121 = product215119 + product219120;
    float product224122 = temp6076 * um43[1].z;
    float dotProduct225123 = product224122 + dotProduct220121;
    vec4 temp102 = vec4(dotProduct180108, dotProduct195113, dotProduct210118, dotProduct225123);
    float product232127 = temp4954 * um43[2].x;
    float product236128 = temp5362 * um43[2].y;
    float dotProduct237129 = product232127 + product236128;
    float product241130 = temp5770 * um43[2].z;
    float dotProduct242131 = product241130 + dotProduct237129;
    float product247132 = temp5056 * um43[2].x;
    float product251133 = temp5464 * um43[2].y;
    float dotProduct252134 = product247132 + product251133;
    float product256135 = temp5872 * um43[2].z;
    float dotProduct257136 = product256135 + dotProduct252134;
    float product262137 = temp5158 * um43[2].x;
    float product266138 = temp5566 * um43[2].y;
    float dotProduct267139 = product262137 + product266138;
    float product271140 = temp5974 * um43[2].z;
    float dotProduct272141 = product271140 + dotProduct267139;
    float product277142 = temp5260 * um43[2].x;
    float product281143 = temp5668 * um43[2].y;
    float dotProduct282144 = product277142 + product281143;
    float product286145 = temp6076 * um43[2].z;
    float dotProduct287146 = product286145 + dotProduct282144;
    vec4 temp123 = vec4(dotProduct242131, dotProduct257136, dotProduct272141, dotProduct287146);
    float product294150 = temp4954 * um43[3].x;
    float product298151 = temp5362 * um43[3].y;
    float dotProduct299152 = product294150 + product298151;
    float product303153 = temp5770 * um43[3].z;
    float dotProduct304154 = product303153 + dotProduct299152;
    float product309155 = temp5056 * um43[3].x;
    float product313156 = temp5464 * um43[3].y;
    float dotProduct314157 = product309155 + product313156;
    float product318158 = temp5872 * um43[3].z;
    float dotProduct319159 = product318158 + dotProduct314157;
    float product324160 = temp5158 * um43[3].x;
    float product328161 = temp5566 * um43[3].y;
    float dotProduct329162 = product324160 + product328161;
    float product333163 = temp5974 * um43[3].z;
    float dotProduct334164 = product333163 + dotProduct329162;
    float product339165 = temp5260 * um43[3].x;
    float product343166 = temp5668 * um43[3].y;
    float dotProduct344167 = product339165 + product343166;
    float product348168 = temp6076 * um43[3].z;
    float dotProduct349169 = product348168 + dotProduct344167;
    vec4 temp144 = vec4(dotProduct304154, dotProduct319159, dotProduct334164, dotProduct349169);
    vec4 column354172 = un34[0] + temp81;
    vec4 column357173 = un34[1] + temp102;
    vec4 column360174 = un34[2] + temp123;
    vec4 column363175 = temp144 + const149;
    float temp157176 = const151 - column354172.x;
    float temp159177 = const151 - column354172.y;
    float temp160178 = const151 - column354172.z;
    float temp161179 = const151 - column354172.w;
    float temp162180 = const151 - column357173.x;
    float temp163181 = const151 - column357173.y;
    float temp164182 = const151 - column357173.z;
    float temp165183 = const151 - column357173.w;
    float temp166184 = const151 - column360174.x;
    float temp167185 = const151 - column360174.y;
    float temp168186 = const151 - column360174.z;
    float temp169187 = const151 - column360174.w;
    float temp170188 = const151 - column363175.x;
    float temp171189 = const151 - column363175.y;
    float temp172190 = const151 - column363175.z;
    float temp173191 = const151 - column363175.w;
    float product391193 = v.x * temp157176;
    float product394195 = v.y * temp162180;
    float dotProduct395196 = product391193 + product394195;
    float product398198 = v.z * temp166184;
    float dotProduct399199 = product398198 + dotProduct395196;
    float product402201 = v.w * temp170188;
    float dotProduct403202 = product402201 + dotProduct399199;
    float product406204 = v.x * temp159177;
    float product409206 = v.y * temp163181;
    float dotProduct410207 = product406204 + product409206;
    float product413209 = v.z * temp167185;
    float dotProduct414210 = product413209 + dotProduct410207;
    float product417212 = v.w * temp171189;
    float dotProduct418213 = product417212 + dotProduct414210;
    float product421215 = v.x * temp160178;
    float product424217 = v.y * temp164182;
    float dotProduct425218 = product421215 + product424217;
    float product428220 = v.z * temp168186;
    float dotProduct429221 = product428220 + dotProduct425218;
    float product432223 = v.w * temp172190;
    float dotProduct433224 = product432223 + dotProduct429221;
    float product436226 = v.x * temp161179;
    float product439228 = v.y * temp165183;
    float dotProduct440229 = product436226 + product439228;
    float product443231 = v.z * temp169187;
    float dotProduct444232 = product443231 + dotProduct440229;
    float product447234 = v.w * temp173191;
    float dotProduct448235 = product447234 + dotProduct444232;
    vec4 temp195 = vec4(dotProduct403202, dotProduct418213, dotProduct433224, dotProduct448235);
    vec4 FragColor_shadow449238 = FragColor_shadow5052 + temp195;
    vec4 column452239 = column354172 * column354172;
    vec4 column455240 = column357173 * column357173;
    vec4 column458241 = column360174 * column360174;
    vec4 column461242 = column363175 * column363175;
    float dotres463243 = dot(FragColor_shadow449238, column452239);
    float dotres465244 = dot(FragColor_shadow449238, column455240);
    float dotres467245 = dot(FragColor_shadow449238, column458241);
    float dotres469246 = dot(FragColor_shadow449238, column461242);
    vec4 temp205 = vec4(dotres463243, dotres465244, dotres467245, dotres469246);
    vec4 temp206 = vec4(um43[0].x, um43[1].x, um43[2].x, um43[3].x);
    vec4 temp207 = vec4(um43[0].y, um43[1].y, um43[2].y, um43[3].y);
    vec4 temp208 = vec4(um43[0].z, um43[1].z, um43[2].z, um43[3].z);
    float dotres506255 = dot(temp205, temp206);
    float dotres508256 = dot(temp205, temp207);
    float dotres510257 = dot(temp205, temp208);
    vec4 temp212 = vec4(dotres506255, dotres508256, dotres510257, const43);
    vec4 FragColor_shadow512260 = temp205 * temp212;
    float temp225265 = um4[2].z * um4[3].w;
    float temp226266 = um4[2].w * um4[3].z;
    float temp227267 = temp225265 - temp226266;
    float temp228268 = um4[1].y * temp227267;
    float temp229269 = um4[1].z * um4[3].w;
    float temp230270 = um4[1].w * um4[3].z;
    float temp231271 = temp229269 - temp230270;
    float temp232272 = um4[2].y * temp231271;
    float temp233273 = temp228268 - temp232272;
    float temp234274 = um4[1].z * um4[2].w;
    float temp235275 = um4[1].w * um4[2].z;
    float temp236276 = temp234274 - temp235275;
    float temp237277 = um4[3].y * temp236276;
    float temp238278 = temp237277 + temp233273;
    float temp239279 = um4[0].x * temp238278;
    float temp240280 = um4[0].y * temp227267;
    float temp241281 = um4[0].z * um4[3].w;
    float temp242282 = um4[0].w * um4[3].z;
    float temp243283 = temp241281 - temp242282;
    float temp244284 = um4[2].y * temp243283;
    float temp245285 = temp240280 - temp244284;
    float temp246286 = um4[0].z * um4[2].w;
    float temp247287 = um4[0].w * um4[2].z;
    float temp248288 = temp246286 - temp247287;
    float temp249289 = um4[3].y * temp248288;
    float temp250290 = temp249289 + temp245285;
    float temp251291 = um4[1].x * temp250290;
    float temp252292 = temp239279 - temp251291;
    float temp253293 = um4[0].y * temp231271;
    float temp254294 = um4[1].y * temp243283;
    float temp255295 = temp253293 - temp254294;
    float temp256296 = um4[0].z * um4[1].w;
    float temp257297 = um4[0].w * um4[1].z;
    float temp258298 = temp256296 - temp257297;
    float temp259299 = um4[3].y * temp258298;
    float temp260300 = temp259299 + temp255295;
    float temp261301 = um4[2].x * temp260300;
    float temp262302 = temp261301 + temp252292;
    float temp263303 = um4[0].y * temp236276;
    float temp264304 = um4[1].y * temp248288;
    float temp265305 = temp263303 - temp264304;
    float temp266306 = um4[2].y * temp258298;
    float temp267307 = temp266306 + temp265305;
    float temp268308 = um4[3].x * temp267307;
    float temp269309 = temp262302 - temp268308;
    vec4 temp259 = vec4(temp269309);
    vec4 FragColor_shadow534312 = FragColor_shadow512260 * temp259;
    float temp274315 = um2[0].x * um2[1].y;
    float temp275316 = um2[0].y * um2[1].x;
    float temp276317 = temp274315 - temp275316;
    float temp277318 = const43 / temp276317;
    float temp278319 = temp277318 * um2[1].y;
    float temp279320 = temp277318 * um2[1].x;
    float temp280321 = const151 - temp279320;
    float temp282322 = um2[0].y * temp277318;
    float temp283323 = const151 - temp282322;
    float temp284324 = um2[0].x * temp277318;
    vec4 temp271 = vec4(temp278319, temp280321, temp283323, temp284324);
    vec4 FragColor_shadow550327 = temp271 * FragColor_shadow534312;
    float temp290331 = um3[0].x * um3[2].y;
    float temp291332 = um3[0].y * um3[2].x;
    float temp292333 = temp290331 - temp291332;
    float temp293334 = um3[1].y * um3[2].z;
    float temp294335 = um3[1].z * um3[2].y;
    float temp295336 = temp293334 - temp294335;
    float temp296337 = um3[0].x * temp295336;
    float temp297338 = um3[0].y * um3[2].z;
    float temp298339 = um3[0].z * um3[2].y;
    float temp299340 = temp297338 - temp298339;
    float temp300341 = um3[1].x * temp299340;
    float temp301342 = temp296337 - temp300341;
    float temp302343 = um3[0].y * um3[1].z;
    float temp303344 = um3[0].z * um3[1].y;
    float temp304345 = temp302343 - temp303344;
    float temp305346 = um3[2].x * temp304345;
    float temp306347 = temp305346 + temp301342;
    float temp307348 = const43 / temp306347;
    float temp308349 = temp307348 * temp292333;
    float temp309350 = const151 - temp308349;
    vec4 temp293 = vec4(temp309350);
    vec4 FragColor_shadow579353 = temp293 * FragColor_shadow550327;
    float temp312354 = const43 / temp269309;
    float temp313355 = um4[1].z * um4[3].y;
    float temp314356 = um4[1].y * um4[3].z;
    float temp315357 = um4[2].z * um4[3].y;
    float temp316358 = um4[2].y * um4[3].z;
    float temp317359 = um4[0].w * um4[3].y;
    float temp318360 = um4[0].y * um4[3].w;
    float temp319361 = um4[2].w * um4[3].y;
    float temp320362 = um4[2].y * um4[3].w;
    float temp321363 = um4[1].w * um4[3].y;
    float temp322364 = um4[1].y * um4[3].w;
    float temp325367 = um4[1].z * um4[2].y;
    float temp326368 = um4[1].y * um4[2].z;
    float temp327369 = temp314356 - temp313355;
    float temp328370 = temp316358 - temp315357;
    float temp329371 = um4[0].w * um4[2].y;
    float temp330372 = um4[0].y * um4[2].w;
    float temp331373 = temp318360 - temp317359;
    float temp332374 = temp320362 - temp319361;
    float temp333375 = um4[1].w * um4[2].y;
    float temp334376 = um4[1].y * um4[2].w;
    float temp335377 = temp322364 - temp321363;
    float temp338380 = um4[0].z * um4[3].y;
    float temp339381 = um4[0].y * um4[3].z;
    float temp340382 = temp326368 - temp325367;
    float temp343385 = temp330372 - temp329371;
    float temp346388 = temp334376 - temp333375;
    float temp357399 = um4[0].z * um4[1].y;
    float temp358400 = um4[0].y * um4[1].z;
    float temp359401 = temp339381 - temp338380;
    float temp360402 = um4[0].z * um4[2].y;
    float temp361403 = um4[0].y * um4[2].z;
    float temp364406 = um4[0].w * um4[1].y;
    float temp365407 = um4[0].y * um4[1].w;
    float temp376418 = temp358400 - temp357399;
    float temp379421 = temp361403 - temp360402;
    float temp383425 = temp365407 - temp364406;
    float temp324366 = um4[1].x * temp227267;
    float temp323365 = um4[2].x * temp231271;
    float temp337379 = temp324366 - temp323365;
    float temp336378 = um4[3].x * temp236276;
    float temp353395 = temp336378 + temp337379;
    float temp352394 = um4[0].x * temp227267;
    float temp351393 = um4[2].x * temp243283;
    float temp350392 = um4[0].x * temp231271;
    float temp349391 = um4[1].x * temp243283;
    float temp348390 = um4[1].x * temp332374;
    float temp347389 = um4[2].x * temp335377;
    float temp345387 = um4[0].x * temp332374;
    float temp344386 = um4[2].x * temp331373;
    float temp342384 = um4[1].x * temp328370;
    float temp341383 = um4[2].x * temp327369;
    float temp373415 = temp352394 - temp351393;
    float temp372414 = um4[3].x * temp248288;
    float temp371413 = temp350392 - temp349391;
    float temp370412 = um4[3].x * temp258298;
    float temp369411 = temp348390 - temp347389;
    float temp368410 = um4[3].x * temp346388;
    float temp367409 = temp345387 - temp344386;
    float temp366408 = um4[3].x * temp343385;
    float temp363405 = temp342384 - temp341383;
    float temp362404 = um4[3].x * temp340382;
    float temp356398 = temp238278 * temp312354;
    float temp355397 = temp353395 * temp312354;
    float temp354396 = temp250290 * temp312354;
    float temp393435 = temp372414 + temp373415;
    float temp392434 = temp370412 + temp371413;
    float temp391433 = um4[0].x * temp236276;
    float temp390432 = um4[1].x * temp248288;
    float temp389431 = temp368410 + temp369411;
    float temp388430 = temp366408 + temp367409;
    float temp387429 = um4[0].x * temp335377;
    float temp386428 = um4[1].x * temp331373;
    float temp385427 = um4[0].x * temp346388;
    float temp384426 = um4[1].x * temp343385;
    float temp382424 = temp362404 + temp363405;
    float temp381423 = um4[0].x * temp328370;
    float temp380422 = um4[2].x * temp359401;
    float temp378420 = um4[0].x * temp327369;
    float temp377419 = um4[1].x * temp359401;
    float temp375417 = const151 - temp355397;
    float temp374416 = const151 - temp354396;
    float temp410452 = temp391433 - temp390432;
    float temp409451 = um4[2].x * temp258298;
    float temp408450 = temp387429 - temp386428;
    float temp407449 = um4[3].x * temp383425;
    float temp406448 = temp385427 - temp384426;
    float temp405447 = um4[2].x * temp383425;
    float temp404446 = temp381423 - temp380422;
    float temp403445 = um4[3].x * temp379421;
    float temp402444 = temp378420 - temp377419;
    float temp401443 = um4[3].x * temp376418;
    float temp400442 = temp389431 * temp312354;
    float temp399441 = temp382424 * temp312354;
    float temp398440 = temp393435 * temp312354;
    float temp397439 = temp388430 * temp312354;
    float temp396438 = temp260300 * temp312354;
    float temp395437 = temp392434 * temp312354;
    float temp394436 = temp267307 * temp312354;
    float temp421463 = temp409451 + temp410452;
    float temp420462 = temp407449 + temp408450;
    float temp419461 = temp405447 + temp406448;
    float temp418460 = temp403445 + temp404446;
    float temp417459 = temp401443 + temp402444;
    float temp416458 = um4[0].x * temp340382;
    float temp415457 = um4[1].x * temp379421;
    float temp414456 = const151 - temp399441;
    float temp413455 = const151 - temp397439;
    float temp412454 = const151 - temp395437;
    float temp411453 = const151 - temp394436;
    float temp429472 = temp416458 - temp415457;
    float temp428471 = um4[2].x * temp376418;
    float temp427470 = temp418460 * temp312354;
    float temp426469 = temp420462 * temp312354;
    float temp425468 = temp417459 * temp312354;
    float temp424467 = temp421463 * temp312354;
    float temp423466 = temp419461 * temp312354;
    vec4 temp412 = vec4(temp356398, temp374416, temp396438, temp411453);
    float temp434478 = temp428471 + temp429472;
    float temp433477 = const151 - temp425468;
    float temp432476 = const151 - temp423466;
    vec4 temp416 = vec4(temp375417, temp398440, temp412454, temp424467);
    float dotres625473 = dot(FragColor_shadow579353, temp412);
    float temp437482 = temp434478 * temp312354;
    vec4 temp419 = vec4(temp400442, temp413455, temp426469, temp432476);
    float dotres627479 = dot(FragColor_shadow579353, temp416);
    vec4 temp421 = vec4(temp414456, temp427470, temp433477, temp437482);
    float dotres629483 = dot(FragColor_shadow579353, temp419);
    float dotres631486 = dot(FragColor_shadow579353, temp421);
    vec4 temp424 = vec4(dotres625473, dotres627479, dotres629483, dotres631486);
    FragColor = temp424;
    
}

