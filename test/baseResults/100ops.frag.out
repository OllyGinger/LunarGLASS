
***Unsupported functionality: glslang function call

Top IR:
; ModuleID = 'Glslang'

@gl_FrontFacing = global i1 false
@low = external addrspace(2) constant i32
@high = external addrspace(2) constant i32
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed = alloca <4 x float>
  %z = alloca i32
  %ternary = alloca float
  %face1 = alloca float
  %0 = load i1* @gl_FrontFacing
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  store float -1.000000e+00, float* %ternary
  br label %ifmerge

else:                                             ; preds = %entry
  store float 1.000000e+00, float* %ternary
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %face11 = load float* %ternary
  store float %face11, float* %face1
  store i32 3, i32* %z
  %1 = load i32 addrspace(2)* @low, !gla.uniform !3
  %2 = mul i32 2, %1, !gla.precision !8
  %3 = add i32 %2, 1, !gla.precision !8
  %4 = load i32 addrspace(2)* @high, !gla.uniform !5
  %5 = icmp slt i32 %3, %4
  br i1 %5, label %then2, label %ifmerge4

then2:                                            ; preds = %ifmerge
  %6 = load i32* %z
  %z3 = add i32 %6, 1, !gla.precision !8
  store i32 %z3, i32* %z
  br label %ifmerge4

ifmerge4:                                         ; preds = %ifmerge, %then2
  %7 = load float* %face1
  %8 = load i32* %z
  %9 = sitofp i32 %8 to float, !gla.precision !9
  %10 = load <4 x float>* %constructed
  %11 = insertelement <4 x float> undef, float %9, i32 0, !gla.precision !9
  %12 = insertelement <4 x float> %11, float %9, i32 1, !gla.precision !9
  %13 = insertelement <4 x float> %12, float %9, i32 2, !gla.precision !9
  %14 = insertelement <4 x float> %13, float %9, i32 3, !gla.precision !9
  %15 = insertelement <4 x float> undef, float %7, i32 0, !gla.precision !9
  %16 = insertelement <4 x float> %15, float %7, i32 1, !gla.precision !9
  %17 = insertelement <4 x float> %16, float %7, i32 2, !gla.precision !9
  %18 = insertelement <4 x float> %17, float %7, i32 3, !gla.precision !9
  %19 = fmul <4 x float> %18, %14, !gla.precision !9
  %gl_FragColor = fadd <4 x float> %19, zeroinitializer, !gla.precision !9
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge4
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.inputs = !{!0}
!gla.entrypoint = !{!2}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = metadata !{metadata !"gl_FrontFacing", i32 4, i1* @gl_FrontFacing_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"main", i32 15}
!3 = metadata !{metadata !"low", i32 12, i32* @low_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 2, i32 1024, null}
!5 = metadata !{metadata !"high", i32 12, i32* @high_typeProxy, metadata !4}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 2, i32 1025, null, i32 0}
!8 = metadata !{i32 2}
!9 = metadata !{i32 1}


Bottom IR:
; ModuleID = 'Glslang'

@gl_FrontFacing = global i1 false
@low = external addrspace(2) constant i32
@high = external addrspace(2) constant i32
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load i1* @gl_FrontFacing, align 1
  %. = select i1 %0, float -1.000000e+00, float 1.000000e+00
  %1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %., <4 x i32> zeroinitializer)
  %2 = load i32 addrspace(2)* @low, align 4, !gla.uniform !3
  %3 = shl i32 %2, 1
  %4 = or i32 %3, 1
  %5 = load i32 addrspace(2)* @high, align 4, !gla.uniform !5
  %6 = icmp slt i32 %4, %5
  %z.0 = select i1 %6, float 4.000000e+00, float 3.000000e+00
  %7 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %z.0, <4 x i32> zeroinitializer)
  %8 = fmul <4 x float> %1, %7, !gla.precision !8
  store <4 x float> %8, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.inputs = !{!0}
!gla.entrypoint = !{!2}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = metadata !{metadata !"gl_FrontFacing", i32 4, i1* @gl_FrontFacing_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"main", i32 15}
!3 = metadata !{metadata !"low", i32 12, i32* @low_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 2, i32 1024, null}
!5 = metadata !{metadata !"high", i32 12, i32* @high_typeProxy, metadata !4}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 2, i32 1025, null, i32 0}
!8 = metadata !{i32 1}

***Unsupported functionality: bit-wise OR in version 100
#version 100
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform mediump int low;
uniform mediump int high;
const float C_a1d0 = -1.0;
const float C_1d0 = 1.0;
const int C_1 = 1;
const float C_4d0 = 4.0;
const float C_3d0 = 3.0;

void main()
{
	vec4 H_gaam3a1 = vec4((gl_FrontFacing ? C_a1d0 : C_1d0));
	vec4 H_0w4bbf = vec4(((((low * 2) + C_1) < high) ? C_4d0 : C_3d0));
	gl_FragColor = (H_0w4bbf * H_gaam3a1);
	
}

#version 100
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform mediump int low;
uniform mediump int high;
const float C_a1d0 = -1.0;
const float C_1d0 = 1.0;
const int C_1 = 1;
const float C_4d0 = 4.0;
const float C_3d0 = 3.0;

void main()
{
	vec4 H_gaam3a1 = vec4((gl_FrontFacing ? C_a1d0 : C_1d0));
	vec4 H_0w4bbf = vec4(((((low * 2) + C_1) < high) ? C_4d0 : C_3d0));
	gl_FragColor = (H_0w4bbf * H_gaam3a1);
	
}

