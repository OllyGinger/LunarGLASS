
Top IR:
; ModuleID = 'Glslang'

@uv4 = external addrspace(2) constant <4 x float>
@ui = external addrspace(2) constant i32
@uf = external addrspace(2) constant float
@ub41 = external addrspace(2) constant <4 x i1>
@ub42 = external addrspace(2) constant <4 x i1>
@FragColor_shadow = internal global <4 x float> zeroinitializer
@uiv4 = external addrspace(2) constant <4 x i32>
@ub = external addrspace(2) constant i1

define fastcc void @main() {
entry:
  %constructed75 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %ternary = alloca <4 x float>
  %f = alloca float
  %b = alloca i1
  %i = alloca i32
  %v = alloca <4 x float>
  %0 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !1
  %v1 = call <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float> %0)
  store <4 x float> %v1, <4 x float>* %v
  %1 = load <4 x float>* %v
  %2 = call <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float> %1)
  %3 = load <4 x float>* %v
  %v2 = fadd <4 x float> %3, %2
  store <4 x float> %v2, <4 x float>* %v
  %4 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %5 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %i3 = mul i32 %4, %5
  store i32 %i3, i32* %i
  %6 = load <4 x float>* %v
  %7 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %6)
  %8 = load <4 x float>* %v
  %v4 = fadd <4 x float> %8, %7
  store <4 x float> %v4, <4 x float>* %v
  %9 = load <4 x float>* %v
  %10 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %9)
  %11 = load <4 x float>* %v
  %v5 = fadd <4 x float> %11, %10
  store <4 x float> %v5, <4 x float>* %v
  %12 = load <4 x float>* %v
  %13 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %12)
  %14 = load <4 x float>* %v
  %v6 = fadd <4 x float> %14, %13
  store <4 x float> %v6, <4 x float>* %v
  %15 = load <4 x float>* %v
  %16 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %15)
  %17 = load <4 x float>* %v
  %v7 = fadd <4 x float> %17, %16
  store <4 x float> %v7, <4 x float>* %v
  %18 = load <4 x float>* %v
  %19 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %18)
  %20 = load <4 x float>* %v
  %v8 = fadd <4 x float> %20, %19
  store <4 x float> %v8, <4 x float>* %v
  %21 = load <4 x float>* %v
  %22 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %21)
  %23 = load <4 x float>* %v
  %v9 = fadd <4 x float> %23, %22
  store <4 x float> %v9, <4 x float>* %v
  %24 = load <4 x float>* %v
  %25 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %24)
  %26 = load <4 x float>* %v
  %v10 = fadd <4 x float> %26, %25
  store <4 x float> %v10, <4 x float>* %v
  %27 = load <4 x float>* %v
  %28 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %27)
  %29 = load <4 x float>* %v
  %v11 = fadd <4 x float> %29, %28
  store <4 x float> %v11, <4 x float>* %v
  %30 = load <4 x float>* %v
  %31 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %30)
  %32 = load <4 x float>* %v
  %v12 = fadd <4 x float> %32, %31
  store <4 x float> %v12, <4 x float>* %v
  %33 = load <4 x float>* %v
  %34 = call <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float> %33)
  %35 = load <4 x float>* %v
  %v13 = fadd <4 x float> %35, %34
  store <4 x float> %v13, <4 x float>* %v
  %36 = load <4 x float>* %v
  %37 = call <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float> %36)
  %38 = load <4 x float>* %v
  %v14 = fadd <4 x float> %38, %37
  store <4 x float> %v14, <4 x float>* %v
  %39 = load <4 x float>* %v
  %40 = call <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float> %39)
  %41 = load <4 x float>* %v
  %v15 = fadd <4 x float> %41, %40
  store <4 x float> %v15, <4 x float>* %v
  %42 = load <4 x float>* %v
  %43 = load <4 x float>* %v
  %44 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %42, <4 x float> %43)
  %45 = load <4 x float>* %v
  %v16 = fadd <4 x float> %45, %44
  store <4 x float> %v16, <4 x float>* %v
  %46 = load <4 x float>* %v
  %47 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %46)
  %48 = load <4 x float>* %v
  %v17 = fadd <4 x float> %48, %47
  store <4 x float> %v17, <4 x float>* %v
  %49 = load <4 x float>* %v
  %50 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %49)
  %51 = load <4 x float>* %v
  %v18 = fadd <4 x float> %51, %50
  store <4 x float> %v18, <4 x float>* %v
  %52 = load <4 x float>* %v
  %53 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %52)
  %54 = load <4 x float>* %v
  %v19 = fadd <4 x float> %54, %53
  store <4 x float> %v19, <4 x float>* %v
  %55 = load <4 x float>* %v
  %56 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %55)
  %57 = load <4 x float>* %v
  %v20 = fadd <4 x float> %57, %56
  store <4 x float> %v20, <4 x float>* %v
  %58 = load <4 x float>* %v
  %59 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %58)
  %60 = load <4 x float>* %v
  %v21 = fadd <4 x float> %60, %59
  store <4 x float> %v21, <4 x float>* %v
  %61 = load <4 x float>* %v
  %62 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %61)
  %63 = load <4 x float>* %v
  %v22 = fadd <4 x float> %63, %62
  store <4 x float> %v22, <4 x float>* %v
  %64 = load <4 x float>* %v
  %65 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %64)
  %66 = load <4 x float>* %v
  %v23 = fadd <4 x float> %66, %65
  store <4 x float> %v23, <4 x float>* %v
  %67 = load <4 x float>* %v
  %68 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %67)
  %69 = load <4 x float>* %v
  %v24 = fadd <4 x float> %69, %68
  store <4 x float> %v24, <4 x float>* %v
  %70 = load <4 x float>* %v
  %71 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %70)
  %72 = load <4 x float>* %v
  %v25 = fadd <4 x float> %72, %71
  store <4 x float> %v25, <4 x float>* %v
  %73 = load <4 x float>* %v
  %74 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %73)
  %75 = load <4 x float>* %v
  %v26 = fadd <4 x float> %75, %74
  store <4 x float> %v26, <4 x float>* %v
  %76 = load <4 x float>* %v
  %77 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %76)
  %78 = load <4 x float>* %v
  %v27 = fadd <4 x float> %78, %77
  store <4 x float> %v27, <4 x float>* %v
  %79 = load <4 x float>* %v
  %80 = load <4 x float>* %v
  %81 = frem <4 x float> %79, %80
  %82 = load <4 x float>* %v
  %v28 = fadd <4 x float> %82, %81
  store <4 x float> %v28, <4 x float>* %v
  %83 = load <4 x float>* %v
  %84 = load <4 x float>* %v
  %85 = extractelement <4 x float> %84, i32 0
  %86 = insertelement <4 x float> undef, float %85, i32 0
  %87 = insertelement <4 x float> %86, float %85, i32 1
  %88 = insertelement <4 x float> %87, float %85, i32 2
  %89 = insertelement <4 x float> %88, float %85, i32 3
  %90 = frem <4 x float> %83, %89
  %91 = load <4 x float>* %v
  %v29 = fadd <4 x float> %91, %90
  store <4 x float> %v29, <4 x float>* %v
  %92 = load <4 x float>* %v
  %93 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !1
  %94 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %92, <4 x float> %93)
  %95 = load <4 x float>* %v
  %v30 = fadd <4 x float> %95, %94
  store <4 x float> %v30, <4 x float>* %v
  %96 = load <4 x float>* %v
  %97 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !1
  %98 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %96, <4 x float> %97)
  %99 = load <4 x float>* %v
  %v31 = fadd <4 x float> %99, %98
  store <4 x float> %v31, <4 x float>* %v
  %100 = load <4 x float>* %v
  %101 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !1
  %102 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !1
  %103 = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %100, <4 x float> %101, <4 x float> %102)
  %104 = load <4 x float>* %v
  %v32 = fadd <4 x float> %104, %103
  store <4 x float> %v32, <4 x float>* %v
  %105 = load <4 x float>* %v
  %106 = load <4 x float>* %v
  %107 = load <4 x float>* %v
  %108 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %105, <4 x float> %106, <4 x float> %107)
  %109 = load <4 x float>* %v
  %v33 = fadd <4 x float> %109, %108
  store <4 x float> %v33, <4 x float>* %v
  %110 = load <4 x float>* %v
  %111 = load <4 x float>* %v
  %112 = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %110, <4 x float> %111)
  %113 = load <4 x float>* %v
  %v34 = fadd <4 x float> %113, %112
  store <4 x float> %v34, <4 x float>* %v
  %114 = load <4 x float>* %v
  %115 = load <4 x float>* %v
  %116 = load <4 x float>* %v
  %117 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %114, <4 x float> %115, <4 x float> %116)
  %118 = load <4 x float>* %v
  %v35 = fadd <4 x float> %118, %117
  store <4 x float> %v35, <4 x float>* %v
  %119 = load float addrspace(2)* @uf, !gla.uniform !4
  %120 = load <4 x float>* %v
  %121 = call <4 x float> @llvm.gla.fStep.v4f32.f32.v4f32(float %119, <4 x float> %120)
  %122 = load <4 x float>* %v
  %v36 = fadd <4 x float> %122, %121
  store <4 x float> %v36, <4 x float>* %v
  %123 = load float addrspace(2)* @uf, !gla.uniform !4
  %124 = load float addrspace(2)* @uf, !gla.uniform !4
  %125 = load <4 x float>* %v
  %126 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.f32.f32.v4f32(float %123, float %124, <4 x float> %125)
  %127 = load <4 x float>* %v
  %v37 = fadd <4 x float> %127, %126
  store <4 x float> %v37, <4 x float>* %v
  %128 = load <4 x float>* %v
  %129 = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %128)
  %130 = load <4 x float>* %v
  %v38 = fadd <4 x float> %130, %129
  store <4 x float> %v38, <4 x float>* %v
  %131 = load <4 x float>* %v
  %132 = load <4 x float>* %v
  %133 = load <4 x float>* %v
  %134 = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %131, <4 x float> %132, <4 x float> %133)
  %135 = load <4 x float>* %v
  %v39 = fadd <4 x float> %135, %134
  store <4 x float> %v39, <4 x float>* %v
  %136 = load <4 x float>* %v
  %137 = load <4 x float>* %v
  %138 = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %136, <4 x float> %137)
  %139 = load <4 x float>* %v
  %v40 = fadd <4 x float> %139, %138
  store <4 x float> %v40, <4 x float>* %v
  %140 = load <4 x float>* %v
  %141 = load <4 x float>* %v
  %142 = load float addrspace(2)* @uf, !gla.uniform !4
  %143 = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %140, <4 x float> %141, float %142)
  %144 = load <4 x float>* %v
  %v41 = fadd <4 x float> %144, %143
  store <4 x float> %v41, <4 x float>* %v
  %145 = load <4 x float>* %v
  %146 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %145)
  %147 = load <4 x float>* %v
  %v42 = fadd <4 x float> %147, %146
  store <4 x float> %v42, <4 x float>* %v
  %148 = load <4 x float>* %v
  %149 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %148)
  %150 = load <4 x float>* %v
  %v43 = fadd <4 x float> %150, %149
  store <4 x float> %v43, <4 x float>* %v
  %151 = load <4 x float>* %v
  %152 = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %151)
  %153 = load <4 x float>* %v
  %v44 = fadd <4 x float> %153, %152
  store <4 x float> %v44, <4 x float>* %v
  %154 = load <4 x float>* %v
  %155 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !1
  %156 = fcmp olt <4 x float> %154, %155
  %b45 = call i1 @llvm.gla.any.v4i1(<4 x i1> %156)
  store i1 %b45, i1* %b
  %157 = load i1* %b
  %158 = load <4 x float>* %v
  %159 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !1
  %160 = fcmp ole <4 x float> %158, %159
  %161 = call i1 @llvm.gla.any.v4i1(<4 x i1> %160)
  %b46 = and i1 %157, %161
  store i1 %b46, i1* %b
  %162 = load i1* %b
  %163 = load <4 x float>* %v
  %164 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !1
  %165 = fcmp ogt <4 x float> %163, %164
  %166 = call i1 @llvm.gla.any.v4i1(<4 x i1> %165)
  %b47 = and i1 %162, %166
  store i1 %b47, i1* %b
  %167 = load i1* %b
  %168 = load <4 x float>* %v
  %169 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !1
  %170 = fcmp oge <4 x float> %168, %169
  %171 = call i1 @llvm.gla.any.v4i1(<4 x i1> %170)
  %b48 = and i1 %167, %171
  store i1 %b48, i1* %b
  %172 = load i1* %b
  %173 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !5
  %174 = load <4 x i1> addrspace(2)* @ub42, !gla.uniform !6
  %175 = icmp eq <4 x i1> %173, %174
  %176 = call i1 @llvm.gla.any.v4i1(<4 x i1> %175)
  %b49 = and i1 %172, %176
  store i1 %b49, i1* %b
  %177 = load i1* %b
  %178 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !5
  %179 = load <4 x i1> addrspace(2)* @ub42, !gla.uniform !6
  %180 = icmp ne <4 x i1> %178, %179
  %181 = call i1 @llvm.gla.any.v4i1(<4 x i1> %180)
  %b50 = and i1 %177, %181
  store i1 %b50, i1* %b
  %182 = load i1* %b
  %183 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !5
  %184 = call i1 @llvm.gla.any.v4i1(<4 x i1> %183)
  %b51 = and i1 %182, %184
  store i1 %b51, i1* %b
  %185 = load i1* %b
  %186 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !5
  %187 = call i1 @llvm.gla.all.v4i1(<4 x i1> %186)
  %b52 = and i1 %185, %187
  store i1 %b52, i1* %b
  %188 = load i1* %b
  %189 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !5
  %190 = xor <4 x i1> %189, <i1 true, i1 true, i1 true, i1 true>
  %191 = call i1 @llvm.gla.any.v4i1(<4 x i1> %190)
  %b53 = and i1 %188, %191
  store i1 %b53, i1* %b
  %192 = load i32* %i
  %193 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %194 = add i32 %192, %193
  %195 = load i32* %i
  %196 = mul i32 %194, %195
  %197 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %198 = sub i32 %196, %197
  %199 = load i32* %i
  %i54 = sdiv i32 %198, %199
  store i32 %i54, i32* %i
  %200 = load i32* %i
  %201 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %i55 = srem i32 %200, %201
  store i32 %i55, i32* %i
  %202 = load i32* %i
  %203 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %204 = icmp eq i32 %202, %203
  %205 = load i32* %i
  %206 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %207 = icmp ne i32 %205, %206
  %208 = load i32* %i
  %209 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %210 = icmp eq i32 %208, %209
  %211 = and i1 %207, %210
  %212 = load i32* %i
  %213 = icmp ne i32 %212, 2
  %214 = xor i1 %211, %213
  %215 = or i1 %204, %214
  br i1 %215, label %then, label %ifmerge

then:                                             ; preds = %entry
  %216 = load i32* %i
  %i56 = add i32 %216, 1
  store i32 %i56, i32* %i
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %then
  %217 = load float addrspace(2)* @uf, !gla.uniform !4
  %218 = load float addrspace(2)* @uf, !gla.uniform !4
  %219 = fadd float %217, %218
  %220 = load float addrspace(2)* @uf, !gla.uniform !4
  %221 = fmul float %219, %220
  %222 = load float addrspace(2)* @uf, !gla.uniform !4
  %223 = fsub float %221, %222
  %224 = load float addrspace(2)* @uf, !gla.uniform !4
  %f57 = fdiv float %223, %224
  store float %f57, float* %f
  %225 = load <4 x float>* %v
  %226 = call float @llvm.gla.fLength.f32.v4f32(<4 x float> %225)
  %227 = load float* %f
  %f58 = fadd float %227, %226
  store float %f58, float* %f
  %228 = load <4 x float>* %v
  %229 = load <4 x float>* %v
  %230 = call float @llvm.gla.fDistance.f32.v4f32.v4f32(<4 x float> %228, <4 x float> %229)
  %231 = load float* %f
  %f59 = fadd float %231, %230
  store float %f59, float* %f
  %232 = load <4 x float>* %v
  %233 = load <4 x float>* %v
  %234 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %232, <4 x float> %233)
  %235 = load float* %f
  %f60 = fadd float %235, %234
  store float %f60, float* %f
  %236 = load float* %f
  %237 = load float addrspace(2)* @uf, !gla.uniform !4
  %238 = fmul float %236, %237
  %239 = load float* %f
  %f61 = fadd float %239, %238
  store float %f61, float* %f
  %240 = load <4 x float>* %v
  %241 = extractelement <4 x float> %240, i32 0
  %242 = insertelement <3 x float> undef, float %241, i32 0
  %243 = extractelement <4 x float> %240, i32 1
  %244 = insertelement <3 x float> %242, float %243, i32 1
  %245 = extractelement <4 x float> %240, i32 2
  %246 = insertelement <3 x float> %244, float %245, i32 2
  %247 = load <4 x float>* %v
  %248 = extractelement <4 x float> %247, i32 0
  %249 = insertelement <3 x float> undef, float %248, i32 0
  %250 = extractelement <4 x float> %247, i32 1
  %251 = insertelement <3 x float> %249, float %250, i32 1
  %252 = extractelement <4 x float> %247, i32 2
  %253 = insertelement <3 x float> %251, float %252, i32 2
  %254 = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %246, <3 x float> %253)
  %255 = extractelement <3 x float> %254, i32 0
  %256 = load float* %f
  %f62 = fadd float %256, %255
  store float %f62, float* %f
  %257 = load float* %f
  %258 = load float addrspace(2)* @uf, !gla.uniform !4
  %259 = fcmp oeq float %257, %258
  %260 = load float* %f
  %261 = load float addrspace(2)* @uf, !gla.uniform !4
  %262 = fcmp one float %260, %261
  %263 = load float* %f
  %264 = fcmp one float %263, 2.000000e+00
  %265 = and i1 %262, %264
  %266 = or i1 %259, %265
  br i1 %266, label %then63, label %ifmerge65

then63:                                           ; preds = %ifmerge
  %267 = load float* %f
  %f64 = fadd float %267, 1.000000e+00
  store float %f64, float* %f
  br label %ifmerge65

ifmerge65:                                        ; preds = %ifmerge, %then63
  %268 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %269 = load i32* %i
  %i66 = and i32 %269, %268
  store i32 %i66, i32* %i
  %270 = load i32* %i
  %i67 = or i32 %270, 66
  store i32 %i67, i32* %i
  %271 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %272 = load i32* %i
  %i68 = xor i32 %272, %271
  store i32 %i68, i32* %i
  %273 = load i32* %i
  %i69 = srem i32 %273, 17
  store i32 %i69, i32* %i
  %274 = load i32* %i
  %i70 = ashr i32 %274, 2
  store i32 %i70, i32* %i
  %275 = load i32 addrspace(2)* @ui, !gla.uniform !3
  %276 = load i32* %i
  %i71 = shl i32 %276, %275
  store i32 %i71, i32* %i
  %277 = load i32* %i
  %i72 = xor i32 %277, -1
  store i32 %i72, i32* %i
  %278 = load i1* %b
  %b73 = xor i1 %278, true
  store i1 %b73, i1* %b
  %279 = load i1* %b
  br i1 %279, label %then74, label %else

then74:                                           ; preds = %ifmerge65
  %280 = load i32* %i
  %281 = sitofp i32 %280 to float
  %282 = load <4 x float>* %constructed
  %283 = insertelement <4 x float> undef, float %281, i32 0
  %284 = insertelement <4 x float> %283, float %281, i32 1
  %285 = insertelement <4 x float> %284, float %281, i32 2
  %286 = insertelement <4 x float> %285, float %281, i32 3
  %287 = load float* %f
  %288 = load <4 x float>* %constructed75
  %289 = insertelement <4 x float> undef, float %287, i32 0
  %290 = insertelement <4 x float> %289, float %287, i32 1
  %291 = insertelement <4 x float> %290, float %287, i32 2
  %292 = insertelement <4 x float> %291, float %287, i32 3
  %293 = fadd <4 x float> %286, %292
  %294 = load <4 x float>* %v
  %ternary76 = fadd <4 x float> %293, %294
  store <4 x float> %ternary76, <4 x float>* %ternary
  br label %ifmerge78

else:                                             ; preds = %ifmerge65
  %ternary77 = load <4 x float>* %v
  store <4 x float> %ternary77, <4 x float>* %ternary
  br label %ifmerge78

ifmerge78:                                        ; preds = %else, %then74
  %FragColor_shadow = load <4 x float>* %ternary
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge78
  %295 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %295), !gla.output !9
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fStep.v4f32.f32.v4f32(float, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSmoothStep.v4f32.f32.f32.v4f32(float, float, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fLength.f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDistance.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4, !5, !6, !7, !8}
!gla.outputs = !{!9}
!gla.noStaticUse = !{!7, !8}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"uv4", i32 12, <4 x float>* @uv4_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"ui", i32 12, i32* @ui_typeProxy, metadata !2}
!4 = metadata !{metadata !"uf", i32 12, float* @uf_typeProxy, metadata !2}
!5 = metadata !{metadata !"ub41", i32 12, <4 x i1>* @ub41_typeProxy, metadata !2}
!6 = metadata !{metadata !"ub42", i32 12, <4 x i1>* @ub42_typeProxy, metadata !2}
!7 = metadata !{metadata !"uiv4", i32 12, <4 x i32>* @uiv4_typeProxy, metadata !2}
!8 = metadata !{metadata !"ub", i32 12, i1* @ub_typeProxy, metadata !2}
!9 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@uv4 = external addrspace(2) constant <4 x float>
@ui = external addrspace(2) constant i32
@uf = external addrspace(2) constant float
@ub41 = external addrspace(2) constant <4 x i1>
@ub42 = external addrspace(2) constant <4 x i1>

define fastcc void @main() {
entry:
  %0 = load <4 x float> addrspace(2)* @uv4, align 16, !gla.uniform !1
  %1 = fmul <4 x float> %0, <float 0x3F91DF46A0000000, float 0x3F91DF46A0000000, float 0x3F91DF46A0000000, float 0x3F91DF46A0000000>
  %2 = fmul <4 x float> %1, <float 0x404CA5DC20000000, float 0x404CA5DC20000000, float 0x404CA5DC20000000, float 0x404CA5DC20000000>
  %v2 = fadd <4 x float> %1, %2
  %3 = load i32 addrspace(2)* @ui, align 4, !gla.uniform !3
  %i3 = mul i32 %3, %3
  %4 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %v2)
  %v4 = fadd <4 x float> %4, %v2
  %5 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %v4)
  %v5 = fadd <4 x float> %5, %v4
  %6 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %v5)
  %v6 = fadd <4 x float> %6, %v5
  %7 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %v6)
  %v7 = fadd <4 x float> %7, %v6
  %8 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %v7)
  %v8 = fadd <4 x float> %8, %v7
  %9 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %v8)
  %v9 = fadd <4 x float> %9, %v8
  %10 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %v9)
  %v10 = fadd <4 x float> %10, %v9
  %11 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %v10)
  %v11 = fadd <4 x float> %11, %v10
  %12 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %v11)
  %v12 = fadd <4 x float> %12, %v11
  %13 = call <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float> %v12)
  %v13 = fadd <4 x float> %13, %v12
  %14 = call <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float> %v13)
  %v14 = fadd <4 x float> %14, %v13
  %15 = call <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float> %v14)
  %v15 = fadd <4 x float> %15, %v14
  %16 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %v15, <4 x float> %v15)
  %v16 = fadd <4 x float> %16, %v15
  %17 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %v16)
  %v17 = fadd <4 x float> %17, %v16
  %18 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %v17)
  %v18 = fadd <4 x float> %18, %v17
  %19 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %v18)
  %v19 = fadd <4 x float> %19, %v18
  %20 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %v19)
  %v20 = fadd <4 x float> %20, %v19
  %21 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %v20)
  %v21 = fadd <4 x float> %21, %v20
  %22 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %v21)
  %v22 = fadd <4 x float> %22, %v21
  %23 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %v22)
  %v23 = fadd <4 x float> %23, %v22
  %24 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %v23)
  %v24 = fadd <4 x float> %24, %v23
  %25 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %v24)
  %v25 = fadd <4 x float> %25, %v24
  %26 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %v25)
  %v26 = fadd <4 x float> %26, %v25
  %27 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %v26)
  %v27 = fadd <4 x float> %27, %v26
  %28 = frem <4 x float> %v27, %v27
  %v28 = fadd <4 x float> %28, %v27
  %29 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %v28, <4 x i32> zeroinitializer)
  %30 = frem <4 x float> %v28, %29
  %v29 = fadd <4 x float> %30, %v28
  %31 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %v29, <4 x float> %0)
  %v30 = fadd <4 x float> %31, %v29
  %32 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %v30, <4 x float> %0)
  %v31 = fadd <4 x float> %32, %v30
  %33 = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %v31, <4 x float> %0, <4 x float> %0)
  %v32 = fadd <4 x float> %33, %v31
  %34 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %v32, <4 x float> %v32, <4 x float> %v32)
  %v33 = fadd <4 x float> %34, %v32
  %35 = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %v33, <4 x float> %v33)
  %v34 = fadd <4 x float> %35, %v33
  %36 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %v34, <4 x float> %v34, <4 x float> %v34)
  %v35 = fadd <4 x float> %36, %v34
  %37 = load float addrspace(2)* @uf, align 4, !gla.uniform !4
  %38 = call <4 x float> @llvm.gla.fStep.v4f32.f32.v4f32(float %37, <4 x float> %v35)
  %v36 = fadd <4 x float> %v35, %38
  %39 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.f32.f32.v4f32(float %37, float %37, <4 x float> %v36)
  %v37 = fadd <4 x float> %v36, %39
  %40 = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %v37)
  %v38 = fadd <4 x float> %v37, %40
  %41 = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %v38, <4 x float> %v38, <4 x float> %v38)
  %v39 = fadd <4 x float> %v38, %41
  %42 = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %v39, <4 x float> %v39)
  %v40 = fadd <4 x float> %v39, %42
  %43 = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %v40, <4 x float> %v40, float %37)
  %v41 = fadd <4 x float> %v40, %43
  %44 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %v41)
  %v42 = fadd <4 x float> %v41, %44
  %45 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %v42)
  %v43 = fadd <4 x float> %v42, %45
  %46 = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %v43)
  %v44 = fadd <4 x float> %v43, %46
  %47 = call <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32.v3i32(<4 x float> %v44, <3 x i32> <i32 0, i32 1, i32 2>)
  %48 = fcmp olt <4 x float> %v44, %0
  %b45 = call i1 @llvm.gla.any.v4i1(<4 x i1> %48)
  %49 = fcmp ole <4 x float> %v44, %0
  %50 = call i1 @llvm.gla.any.v4i1(<4 x i1> %49)
  %b46 = and i1 %b45, %50
  %51 = fcmp ogt <4 x float> %v44, %0
  %52 = call i1 @llvm.gla.any.v4i1(<4 x i1> %51)
  %b47 = and i1 %b46, %52
  %53 = fcmp oge <4 x float> %v44, %0
  %54 = call i1 @llvm.gla.any.v4i1(<4 x i1> %53)
  %b48 = and i1 %b47, %54
  %55 = load <4 x i1> addrspace(2)* @ub41, align 4, !gla.uniform !5
  %56 = load <4 x i1> addrspace(2)* @ub42, align 4, !gla.uniform !6
  %57 = icmp eq <4 x i1> %55, %56
  %58 = call i1 @llvm.gla.any.v4i1(<4 x i1> %57)
  %b49 = and i1 %b48, %58
  %59 = icmp ne <4 x i1> %55, %56
  %60 = call i1 @llvm.gla.any.v4i1(<4 x i1> %59)
  %b50 = and i1 %b49, %60
  %61 = call i1 @llvm.gla.any.v4i1(<4 x i1> %55)
  %b51 = and i1 %b50, %61
  %62 = call i1 @llvm.gla.all.v4i1(<4 x i1> %55)
  %b52 = and i1 %b51, %62
  %63 = xor <4 x i1> %55, <i1 true, i1 true, i1 true, i1 true>
  %64 = call i1 @llvm.gla.any.v4i1(<4 x i1> %63)
  %b53 = and i1 %b52, %64
  %65 = add i32 %i3, %3
  %66 = mul i32 %65, %i3
  %67 = sub i32 %66, %3
  %i54 = sdiv i32 %67, %i3
  %i55 = srem i32 %i54, %3
  %68 = fadd float %37, %37
  %69 = fmul float %37, %68
  %70 = fsub float %69, %37
  %f57 = fdiv float %70, %37
  %71 = call float @llvm.gla.fLength.f32.v4f32(<4 x float> %v44)
  %f58 = fadd float %f57, %71
  %72 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v44, <4 x float> %v44)
  %f60 = fadd float %f58, %72
  %73 = fmul float %37, %f60
  %f61 = fadd float %f60, %73
  %74 = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %47, <3 x float> %47)
  %75 = extractelement <3 x float> %74, i32 0
  %f62 = fadd float %75, %f61
  %76 = fcmp oeq float %f62, %37
  %77 = fcmp one float %f62, %37
  %78 = fcmp one float %f62, 2.000000e+00
  %79 = and i1 %77, %78
  %80 = or i1 %76, %79
  %f64 = fadd float %f62, 1.000000e+00
  %select = select i1 %80, float %f64, float %f62
  %81 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %select, <4 x i32> zeroinitializer)
  %82 = load i32 addrspace(2)* @ui, align 4, !gla.uniform !3
  %i56 = add i32 %i55, 1
  %83 = icmp eq i32 %i55, 2
  %.i56 = select i1 %83, i32 0, i32 %i56
  %i66 = and i32 %82, %.i56
  %i67 = or i32 %i66, 66
  %i68 = xor i32 %i67, %82
  %i69 = srem i32 %i68, 17
  %i70 = ashr i32 %i69, 2
  %i71 = shl i32 %i70, %82
  %i72 = xor i32 %i71, -1
  %84 = sitofp i32 %i72 to float
  %85 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %84, <4 x i32> zeroinitializer)
  %86 = fadd <4 x float> %81, %85
  %ternary76 = fadd <4 x float> %v44, %86
  %select80 = select i1 %b53, <4 x float> %v44, <4 x float> %ternary76
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %select80), !gla.output !9
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fStep.v4f32.f32.v4f32(float, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSmoothStep.v4f32.f32.f32.v4f32(float, float, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fLength.f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) #0

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32.v3i32(<4 x float>, <3 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4, !5, !6, !7, !8}
!gla.outputs = !{!9}
!gla.noStaticUse = !{!7, !8}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"uv4", i32 12, <4 x float>* @uv4_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"ui", i32 12, i32* @ui_typeProxy, metadata !2}
!4 = metadata !{metadata !"uf", i32 12, float* @uf_typeProxy, metadata !2}
!5 = metadata !{metadata !"ub41", i32 12, <4 x i1>* @ub41_typeProxy, metadata !2}
!6 = metadata !{metadata !"ub42", i32 12, <4 x i1>* @ub42_typeProxy, metadata !2}
!7 = metadata !{metadata !"uiv4", i32 12, <4 x i32>* @uiv4_typeProxy, metadata !2}
!8 = metadata !{metadata !"ub", i32 12, i1* @ub_typeProxy, metadata !2}
!9 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
#version 130
// LunarGOO output
uniform vec4 uv4;
uniform int ui;
uniform float uf;
uniform bvec4 ub41;
uniform bvec4 ub42;
uniform ivec4 uiv4;
uniform bool ub;
const vec4 const22 = vec4(0.0174533);
const vec4 const24 = vec4(57.2958);
const float const155 = 2.0;
const float const159 = 1.0;
const int const163i_1 = 1;
const int const165i_2 = 2;
const int const167i_0 = 0;
const int const170i_66 = 66;
const int const173i_17 = 17;

void main()
{
    vec4 temp21 = uv4 * const22;
    vec4 temp23 = temp21 * const24;
    vec4 temp25 = temp21 + temp23;
    int temp26 = ui * ui;
    vec4 temp27 = sin(temp25);
    vec4 temp28 = temp27 + temp25;
    vec4 temp29 = cos(temp28);
    vec4 temp30 = temp29 + temp28;
    vec4 temp31 = tan(temp30);
    vec4 temp32 = temp31 + temp30;
    vec4 temp33 = asin(temp32);
    vec4 temp34 = temp33 + temp32;
    vec4 temp35 = acos(temp34);
    vec4 temp36 = temp35 + temp34;
    vec4 temp37 = atan(temp36);
    vec4 temp38 = temp37 + temp36;
    vec4 temp39 = sinh(temp38);
    vec4 temp40 = temp39 + temp38;
    vec4 temp41 = cosh(temp40);
    vec4 temp42 = temp41 + temp40;
    vec4 temp43 = tanh(temp42);
    vec4 temp44 = temp43 + temp42;
    vec4 temp45 = asinh(temp44);
    vec4 temp46 = temp45 + temp44;
    vec4 temp47 = acosh(temp46);
    vec4 temp48 = temp47 + temp46;
    vec4 temp49 = atanh(temp48);
    vec4 temp50 = temp49 + temp48;
    vec4 temp51 = pow(temp50, temp50);
    vec4 temp52 = temp51 + temp50;
    vec4 temp53 = exp(temp52);
    vec4 temp54 = temp53 + temp52;
    vec4 temp55 = log(temp54);
    vec4 temp56 = temp55 + temp54;
    vec4 temp57 = exp2(temp56);
    vec4 temp58 = temp57 + temp56;
    vec4 temp59 = log2(temp58);
    vec4 temp60 = temp59 + temp58;
    vec4 temp61 = sqrt(temp60);
    vec4 temp62 = temp61 + temp60;
    vec4 temp63 = inversesqrt(temp62);
    vec4 temp64 = temp63 + temp62;
    vec4 temp65 = abs(temp64);
    vec4 temp66 = temp65 + temp64;
    vec4 temp67 = sign(temp66);
    vec4 temp68 = temp67 + temp66;
    vec4 temp69 = floor(temp68);
    vec4 temp70 = temp69 + temp68;
    vec4 temp71 = ceil(temp70);
    vec4 temp72 = temp71 + temp70;
    vec4 temp73 = fract(temp72);
    vec4 temp74 = temp73 + temp72;
    vec4 temp75 = mod(temp74, temp74);
    vec4 temp76 = temp75 + temp74;
    vec4 temp77 = temp76.xxxx;
    vec4 temp78 = mod(temp76, temp77);
    vec4 temp79 = temp78 + temp76;
    vec4 temp80 = min(temp79, uv4);
    vec4 temp81 = temp80 + temp79;
    vec4 temp82 = max(temp81, uv4);
    vec4 temp83 = temp82 + temp81;
    vec4 temp84 = clamp(temp83, uv4, uv4);
    vec4 temp85 = temp84 + temp83;
    vec4 temp86 = mix(temp85, temp85, temp85);
    vec4 temp87 = temp86 + temp85;
    vec4 temp88 = step(temp87, temp87);
    vec4 temp89 = temp88 + temp87;
    vec4 temp90 = smoothstep(temp89, temp89, temp89);
    vec4 temp91 = temp90 + temp89;
    vec4 temp92 = step(uf, temp91);
    vec4 temp93 = temp91 + temp92;
    vec4 temp94 = smoothstep(uf, uf, temp93);
    vec4 temp95 = temp93 + temp94;
    vec4 temp96 = normalize(temp95);
    vec4 temp97 = temp95 + temp96;
    vec4 temp98 = faceforward(temp97, temp97, temp97);
    vec4 temp99 = temp97 + temp98;
    vec4 temp100 = reflect(temp99, temp99);
    vec4 temp101 = temp99 + temp100;
    vec4 temp102 = refract(temp101, temp101, uf);
    vec4 temp103 = temp101 + temp102;
    vec4 temp104 = dFdx(temp103);
    vec4 temp105 = temp103 + temp104;
    vec4 temp106 = dFdy(temp105);
    vec4 temp107 = temp105 + temp106;
    vec4 temp108 = fwidth(temp107);
    vec4 temp109 = temp107 + temp108;
    vec3 temp110 = vec3(temp109);
    bvec4 temp111 = lessThan(temp109, uv4);
    bool temp112 = any(temp111);
    bvec4 temp113 = lessThanEqual(temp109, uv4);
    bool temp114 = any(temp113);
    bool temp115 = temp112 && temp114;
    bvec4 temp116 = greaterThan(temp109, uv4);
    bool temp117 = any(temp116);
    bool temp118 = temp115 && temp117;
    bvec4 temp119 = greaterThanEqual(temp109, uv4);
    bool temp120 = any(temp119);
    bool temp121 = temp118 && temp120;
    bvec4 temp122 = equal(ub41, ub42);
    bool temp123 = any(temp122);
    bool temp124 = temp121 && temp123;
    bvec4 temp125 = notEqual(ub41, ub42);
    bool temp126 = any(temp125);
    bool temp127 = temp124 && temp126;
    bool temp128 = any(ub41);
    bool temp129 = temp127 && temp128;
    bool temp130 = all(ub41);
    bool temp131 = temp129 && temp130;
    bvec4 temp132 = not(ub41);
    bool temp133 = any(temp132);
    bool temp134 = temp131 && temp133;
    int temp135 = temp26 + ui;
    int temp136 = temp135 * temp26;
    int temp137 = temp136 - ui;
    int temp138 = temp137 / temp26;
    int temp139 = temp138 % ui;
    float temp140 = uf + uf;
    float temp141 = uf * temp140;
    float temp142 = temp141 - uf;
    float temp143 = temp142 / uf;
    float temp144 = length(temp109);
    float temp145 = temp143 + temp144;
    float temp146 = dot(temp109, temp109);
    float temp147 = temp145 + temp146;
    float temp148 = uf * temp147;
    float temp149 = temp147 + temp148;
    vec3 temp150 = cross(temp110, temp110);
    float temp151 = temp150.x + temp149;
    bool temp152 = temp151 == uf;
    bool temp153 = temp151 != uf;
    bool temp154 = temp151 != const155;
    bool temp156 = temp153 && temp154;
    bool temp157 = temp152 || temp156;
    float temp158 = temp151 + const159;
    float select = temp157 ? temp158 : temp151;
    vec4 temp161 = vec4(select);
    int temp162 = temp139 + const163i_1;
    bool temp164 = temp139 == const165i_2;
    int _i56__goo = temp164 ? const167i_0 : temp162;
    int temp168 = ui & _i56__goo;
    int temp169 = temp168 | const170i_66;
    int temp171 = temp169 ^ ui;
    int temp172 = temp171 % const173i_17;
    int temp174 = temp172 >> const165i_2;
    int temp175 = temp174 << ui;
    int temp176 = ~(temp175);
    float temp177 = float(temp176);
    vec4 temp178 = vec4(temp177);
    vec4 temp179 = temp161 + temp178;
    vec4 ternary76 = temp109 + temp179;
    vec4 select80 = temp134 ? temp109 : ternary76;
    gl_FragColor = select80;
    
}


#version 130
// LunarGOO output
uniform vec4 uv4;
uniform int ui;
uniform float uf;
uniform bvec4 ub41;
uniform bvec4 ub42;
uniform ivec4 uiv4;
uniform bool ub;
const vec4 const22 = vec4(0.0174533);
const vec4 const24 = vec4(57.2958);
const float const155 = 2.0;
const float const159 = 1.0;
const int const163i_2 = 2;
const int const165i_1 = 1;
const int const167i_0 = 0;
const int const170i_66 = 66;
const int const173i_17 = 17;

void main()
{
    vec4 temp211 = uv4 * const22;
    vec4 temp232 = temp211 * const24;
    vec4 temp253 = temp211 + temp232;
    int temp264 = ui * ui;
    vec4 temp275 = sin(temp253);
    vec4 temp286 = temp275 + temp253;
    vec4 temp297 = cos(temp286);
    vec4 temp308 = temp297 + temp286;
    vec4 temp319 = tan(temp308);
    vec4 temp3210 = temp319 + temp308;
    vec4 temp3311 = asin(temp3210);
    vec4 temp3412 = temp3311 + temp3210;
    vec4 temp3513 = acos(temp3412);
    vec4 temp3614 = temp3513 + temp3412;
    vec4 temp3715 = atan(temp3614);
    vec4 temp3816 = temp3715 + temp3614;
    vec4 temp3917 = sinh(temp3816);
    vec4 temp4018 = temp3917 + temp3816;
    vec4 temp4119 = cosh(temp4018);
    vec4 temp4220 = temp4119 + temp4018;
    vec4 temp4321 = tanh(temp4220);
    vec4 temp4422 = temp4321 + temp4220;
    vec4 temp4523 = asinh(temp4422);
    vec4 temp4624 = temp4523 + temp4422;
    vec4 temp4725 = acosh(temp4624);
    vec4 temp4826 = temp4725 + temp4624;
    vec4 temp4927 = atanh(temp4826);
    vec4 temp5028 = temp4927 + temp4826;
    vec4 temp5129 = pow(temp5028, temp5028);
    vec4 temp5230 = temp5129 + temp5028;
    vec4 temp5331 = exp(temp5230);
    vec4 temp5432 = temp5331 + temp5230;
    vec4 temp5533 = log(temp5432);
    vec4 temp5634 = temp5533 + temp5432;
    vec4 temp5735 = exp2(temp5634);
    vec4 temp5836 = temp5735 + temp5634;
    vec4 temp5937 = log2(temp5836);
    vec4 temp6038 = temp5937 + temp5836;
    vec4 temp6139 = sqrt(temp6038);
    vec4 temp6240 = temp6139 + temp6038;
    vec4 temp6341 = inversesqrt(temp6240);
    vec4 temp6442 = temp6341 + temp6240;
    vec4 temp6543 = abs(temp6442);
    vec4 temp6644 = temp6543 + temp6442;
    vec4 temp6745 = sign(temp6644);
    vec4 temp6846 = temp6745 + temp6644;
    vec4 temp6947 = floor(temp6846);
    vec4 temp7048 = temp6947 + temp6846;
    vec4 temp7149 = ceil(temp7048);
    vec4 temp7250 = temp7149 + temp7048;
    vec4 temp7351 = fract(temp7250);
    vec4 temp7452 = temp7351 + temp7250;
    vec4 temp7553 = mod(temp7452, temp7452);
    vec4 temp7654 = temp7553 + temp7452;
    vec4 temp77 = temp7654.xxxx;
    vec4 temp7856 = mod(temp7654, temp77);
    vec4 temp7957 = temp7856 + temp7654;
    vec4 temp8058 = min(temp7957, uv4);
    vec4 temp8159 = temp8058 + temp7957;
    vec4 temp8260 = max(temp8159, uv4);
    vec4 temp8361 = temp8260 + temp8159;
    vec4 temp8462 = clamp(temp8361, uv4, uv4);
    vec4 temp8563 = temp8462 + temp8361;
    vec4 temp8664 = mix(temp8563, temp8563, temp8563);
    vec4 temp8765 = temp8664 + temp8563;
    vec4 temp8866 = step(temp8765, temp8765);
    vec4 temp8967 = temp8866 + temp8765;
    vec4 temp9068 = smoothstep(temp8967, temp8967, temp8967);
    vec4 temp9169 = temp9068 + temp8967;
    vec4 temp9270 = step(uf, temp9169);
    vec4 temp9371 = temp9169 + temp9270;
    vec4 temp9472 = smoothstep(uf, uf, temp9371);
    vec4 temp9573 = temp9371 + temp9472;
    vec4 temp9674 = normalize(temp9573);
    vec4 temp9775 = temp9573 + temp9674;
    vec4 temp9876 = faceforward(temp9775, temp9775, temp9775);
    vec4 temp9977 = temp9775 + temp9876;
    vec4 temp10078 = reflect(temp9977, temp9977);
    vec4 temp10179 = temp9977 + temp10078;
    vec4 temp10280 = refract(temp10179, temp10179, uf);
    vec4 temp10381 = temp10179 + temp10280;
    vec4 temp10482 = dFdx(temp10381);
    vec4 temp10583 = temp10381 + temp10482;
    vec4 temp10684 = dFdy(temp10583);
    vec4 temp10785 = temp10583 + temp10684;
    vec4 temp10886 = fwidth(temp10785);
    vec4 temp10987 = temp10785 + temp10886;
    vec3 temp110 = vec3(temp10987);
    bvec4 temp11189 = lessThan(temp10987, uv4);
    bool temp11290 = any(temp11189);
    bvec4 temp11391 = lessThanEqual(temp10987, uv4);
    bool temp11492 = any(temp11391);
    bool temp11593 = temp11290 && temp11492;
    bvec4 temp11694 = greaterThan(temp10987, uv4);
    bool temp11795 = any(temp11694);
    bool temp11896 = temp11593 && temp11795;
    bvec4 temp11997 = greaterThanEqual(temp10987, uv4);
    bool temp12098 = any(temp11997);
    bool temp12199 = temp11896 && temp12098;
    bvec4 temp122100 = equal(ub41, ub42);
    bool temp123101 = any(temp122100);
    bool temp124102 = temp12199 && temp123101;
    bvec4 temp125103 = notEqual(ub41, ub42);
    bool temp126104 = any(temp125103);
    bool temp127105 = temp124102 && temp126104;
    bool temp128106 = any(ub41);
    bool temp129107 = temp127105 && temp128106;
    bool temp130108 = all(ub41);
    bool temp131109 = temp129107 && temp130108;
    bvec4 temp132110 = not(ub41);
    bool temp133111 = any(temp132110);
    bool temp134112 = temp131109 && temp133111;
    int temp135113 = temp264 + ui;
    int temp136114 = temp135113 * temp264;
    int temp137115 = temp136114 - ui;
    int temp138116 = temp137115 / temp264;
    int temp139117 = temp138116 % ui;
    float temp140118 = uf + uf;
    float temp141119 = uf * temp140118;
    float temp142120 = temp141119 - uf;
    float temp143121 = temp142120 / uf;
    float temp144122 = length(temp10987);
    float temp145123 = temp143121 + temp144122;
    float temp146124 = dot(temp10987, temp10987);
    float temp147125 = temp145123 + temp146124;
    float temp148126 = uf * temp147125;
    float temp149127 = temp147125 + temp148126;
    vec3 temp150128 = cross(temp110, temp110);
    float temp151129 = temp150128.x + temp149127;
    bool temp152130 = temp151129 == uf;
    bool temp153131 = temp151129 != uf;
    bool temp154132 = temp151129 != const155;
    bool temp156133 = temp153131 && temp154132;
    bool temp157134 = temp152130 || temp156133;
    float temp158135 = temp151129 + const159;
    float select169 = temp157134 ? temp158135 : temp151129;
    vec4 temp161 = vec4(select169);
    bool temp164142 = temp139117 == const163i_2;
    int temp162141 = temp139117 + const165i_1;
    int ternary143_0__goo = temp164142 ? const167i_0 : temp162141;
    int temp168149 = ui & ternary143_0__goo;
    int temp169150 = temp168149 | const170i_66;
    int temp171151 = temp169150 ^ ui;
    int temp172152 = temp171151 % const173i_17;
    int temp174153 = temp172152 >> const163i_2;
    int temp175154 = temp174153 << ui;
    int temp176155 = ~(temp175154);
    float temp177156 = float(temp176155);
    vec4 temp178 = vec4(temp177156);
    vec4 temp179159 = temp178 + temp161;
    vec4 ternary76160 = temp10987 + temp179159;
    vec4 select = temp134112 ? temp10987 : ternary76160;
    gl_FragColor = select;
    
}


