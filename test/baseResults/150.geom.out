
Top IR:
; ModuleID = 'Glslang'

%fromVertex = type { <3 x float> }
%fromVertex.0 = type { <3 x float> }
%gl_PerVertex = type { <4 x float>, float, [1 x float] }
%gl_PerVertex.1 = type { <4 x float>, float, [1 x float] }
%toFragment = type { <3 x float> }

@"anon@0_shadow" = internal global %fromVertex zeroinitializer
@fromV_shadow = internal global [6 x %fromVertex.0] zeroinitializer
@"anon@1_shadow" = internal global %gl_PerVertex zeroinitializer
@in_shadow = internal global [6 x %gl_PerVertex.1] zeroinitializer
@PrimitiveID_shadow = internal global i32 0
@PrimitiveIDIn_shadow = internal global i32 0
@Layer_shadow = internal global i32 0
@toF_shadow = internal global %toFragment zeroinitializer

define fastcc void @main() {
entry:
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  %fromV = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1025, i32 -1), !gla.input !16
  store <3 x float> %fromV, <3 x float>* getelementptr inbounds ([6 x %fromVertex.0]* @fromV_shadow, i32 0, i32 0, i32 0)
  %fromV1 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1026, i32 -1), !gla.input !16
  store <3 x float> %fromV1, <3 x float>* getelementptr inbounds ([6 x %fromVertex.0]* @fromV_shadow, i32 0, i32 1, i32 0)
  %fromV2 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1027, i32 -1), !gla.input !16
  store <3 x float> %fromV2, <3 x float>* getelementptr inbounds ([6 x %fromVertex.0]* @fromV_shadow, i32 0, i32 2, i32 0)
  %fromV3 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1028, i32 -1), !gla.input !16
  store <3 x float> %fromV3, <3 x float>* getelementptr inbounds ([6 x %fromVertex.0]* @fromV_shadow, i32 0, i32 3, i32 0)
  %fromV4 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1029, i32 -1), !gla.input !16
  store <3 x float> %fromV4, <3 x float>* getelementptr inbounds ([6 x %fromVertex.0]* @fromV_shadow, i32 0, i32 4, i32 0)
  %fromV5 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1030, i32 -1), !gla.input !16
  store <3 x float> %fromV5, <3 x float>* getelementptr inbounds ([6 x %fromVertex.0]* @fromV_shadow, i32 0, i32 5, i32 0)
  %0 = load <3 x float>* getelementptr inbounds ([6 x %fromVertex.0]* @fromV_shadow, i32 0, i32 0, i32 0)
  store <3 x float> %0, <3 x float>* getelementptr inbounds (%fromVertex* @"anon@0_shadow", i32 0, i32 0)
  %gl_in = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1034, i32 -1), !gla.input !18
  store <4 x float> %gl_in, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 0, i32 0)
  %gl_in6 = call float @llvm.gla.fReadData.f32(i32 1035, i32 -1), !gla.input !18
  store float %gl_in6, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 0, i32 1)
  %gl_in7 = call float @llvm.gla.fReadData.f32(i32 1036, i32 -1), !gla.input !18
  store float %gl_in7, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 0, i32 2, i32 0)
  %gl_in8 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1037, i32 -1), !gla.input !18
  store <4 x float> %gl_in8, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 1, i32 0)
  %gl_in9 = call float @llvm.gla.fReadData.f32(i32 1038, i32 -1), !gla.input !18
  store float %gl_in9, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 1, i32 1)
  %gl_in10 = call float @llvm.gla.fReadData.f32(i32 1039, i32 -1), !gla.input !18
  store float %gl_in10, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 1, i32 2, i32 0)
  %gl_in11 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1040, i32 -1), !gla.input !18
  store <4 x float> %gl_in11, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 2, i32 0)
  %gl_in12 = call float @llvm.gla.fReadData.f32(i32 1041, i32 -1), !gla.input !18
  store float %gl_in12, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 2, i32 1)
  %gl_in13 = call float @llvm.gla.fReadData.f32(i32 1042, i32 -1), !gla.input !18
  store float %gl_in13, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 2, i32 2, i32 0)
  %gl_in14 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1043, i32 -1), !gla.input !18
  store <4 x float> %gl_in14, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 3, i32 0)
  %gl_in15 = call float @llvm.gla.fReadData.f32(i32 1044, i32 -1), !gla.input !18
  store float %gl_in15, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 3, i32 1)
  %gl_in16 = call float @llvm.gla.fReadData.f32(i32 1045, i32 -1), !gla.input !18
  store float %gl_in16, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 3, i32 2, i32 0)
  %gl_in17 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1046, i32 -1), !gla.input !18
  store <4 x float> %gl_in17, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 4, i32 0)
  %gl_in18 = call float @llvm.gla.fReadData.f32(i32 1047, i32 -1), !gla.input !18
  store float %gl_in18, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 4, i32 1)
  %gl_in19 = call float @llvm.gla.fReadData.f32(i32 1048, i32 -1), !gla.input !18
  store float %gl_in19, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 4, i32 2, i32 0)
  %gl_in20 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1049, i32 -1), !gla.input !18
  store <4 x float> %gl_in20, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 5, i32 0)
  %gl_in21 = call float @llvm.gla.fReadData.f32(i32 1050, i32 -1), !gla.input !18
  store float %gl_in21, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 5, i32 1)
  %gl_in22 = call float @llvm.gla.fReadData.f32(i32 1051, i32 -1), !gla.input !18
  store float %gl_in22, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 5, i32 2, i32 0)
  %1 = load <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 0, i32 0)
  store <4 x float> %1, <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@1_shadow", i32 0, i32 0)
  %gl_in23 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1034, i32 -1), !gla.input !18
  store <4 x float> %gl_in23, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 0, i32 0)
  %gl_in24 = call float @llvm.gla.fReadData.f32(i32 1035, i32 -1), !gla.input !18
  store float %gl_in24, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 0, i32 1)
  %gl_in25 = call float @llvm.gla.fReadData.f32(i32 1036, i32 -1), !gla.input !18
  store float %gl_in25, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 0, i32 2, i32 0)
  %gl_in26 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1037, i32 -1), !gla.input !18
  store <4 x float> %gl_in26, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 1, i32 0)
  %gl_in27 = call float @llvm.gla.fReadData.f32(i32 1038, i32 -1), !gla.input !18
  store float %gl_in27, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 1, i32 1)
  %gl_in28 = call float @llvm.gla.fReadData.f32(i32 1039, i32 -1), !gla.input !18
  store float %gl_in28, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 1, i32 2, i32 0)
  %gl_in29 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1040, i32 -1), !gla.input !18
  store <4 x float> %gl_in29, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 2, i32 0)
  %gl_in30 = call float @llvm.gla.fReadData.f32(i32 1041, i32 -1), !gla.input !18
  store float %gl_in30, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 2, i32 1)
  %gl_in31 = call float @llvm.gla.fReadData.f32(i32 1042, i32 -1), !gla.input !18
  store float %gl_in31, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 2, i32 2, i32 0)
  %gl_in32 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1043, i32 -1), !gla.input !18
  store <4 x float> %gl_in32, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 3, i32 0)
  %gl_in33 = call float @llvm.gla.fReadData.f32(i32 1044, i32 -1), !gla.input !18
  store float %gl_in33, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 3, i32 1)
  %gl_in34 = call float @llvm.gla.fReadData.f32(i32 1045, i32 -1), !gla.input !18
  store float %gl_in34, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 3, i32 2, i32 0)
  %gl_in35 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1046, i32 -1), !gla.input !18
  store <4 x float> %gl_in35, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 4, i32 0)
  %gl_in36 = call float @llvm.gla.fReadData.f32(i32 1047, i32 -1), !gla.input !18
  store float %gl_in36, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 4, i32 1)
  %gl_in37 = call float @llvm.gla.fReadData.f32(i32 1048, i32 -1), !gla.input !18
  store float %gl_in37, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 4, i32 2, i32 0)
  %gl_in38 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1049, i32 -1), !gla.input !18
  store <4 x float> %gl_in38, <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 5, i32 0)
  %gl_in39 = call float @llvm.gla.fReadData.f32(i32 1050, i32 -1), !gla.input !18
  store float %gl_in39, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 5, i32 1)
  %gl_in40 = call float @llvm.gla.fReadData.f32(i32 1051, i32 -1), !gla.input !18
  store float %gl_in40, float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 5, i32 2, i32 0)
  %2 = load float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @in_shadow, i32 0, i32 3, i32 1)
  store float %2, float* getelementptr inbounds (%gl_PerVertex* @"anon@1_shadow", i32 0, i32 1)
  %gl_PrimitiveIDIn = call i32 @llvm.gla.readData.i32(i32 1053, i32 -1), !gla.input !20
  store i32 %gl_PrimitiveIDIn, i32* @PrimitiveIDIn_shadow
  %PrimitiveID_shadow = load i32* @PrimitiveIDIn_shadow
  store i32 %PrimitiveID_shadow, i32* @PrimitiveID_shadow
  store i32 2, i32* @Layer_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %3 = load <3 x float>* getelementptr inbounds (%fromVertex* @"anon@0_shadow", i32 0, i32 0)
  call void @llvm.gla.fWriteData.v3f32(i32 1024, i32 -1, <3 x float> %3), !gla.output !1
  %4 = load <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@1_shadow", i32 0, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 1031, i32 -1, <4 x float> %4), !gla.output !6
  %5 = load float* getelementptr inbounds (%gl_PerVertex* @"anon@1_shadow", i32 0, i32 1)
  call void @llvm.gla.fWriteData.f32(i32 1032, i32 -1, float %5), !gla.output !6
  %6 = load i32* @PrimitiveID_shadow
  call void @llvm.gla.writeData.i32(i32 1052, i32 -1, i32 %6), !gla.output !9
  %7 = load i32* @Layer_shadow
  call void @llvm.gla.writeData.i32(i32 1054, i32 -1, i32 %7), !gla.output !11
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #0

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #0

; Function Attrs: nounwind readonly
declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) #1

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) #1

; Function Attrs: nounwind readonly
declare float @llvm.gla.fReadData.f32(i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @llvm.gla.readData.i32(i32, i32) #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v3f32(i32, i32, <3 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.f32(i32, i32, float) #0

; Function Attrs: nounwind
declare void @llvm.gla.writeData.i32(i32, i32, i32) #0

attributes #0 = { nounwind }
attributes #1 = { nounwind readonly }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1, !6, !9, !11, !13}
!gla.inputs = !{!16, !18, !20}
!gla.noStaticUse = !{!13}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"", i32 16, %fromVertex* @"anon@0_shadow_typeProxy", metadata !2, metadata !3}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"fromVertex", metadata !4, metadata !"color", metadata !5}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"", metadata !4}
!6 = metadata !{metadata !"", i32 16, %gl_PerVertex* @"anon@1_shadow_typeProxy", metadata !7, metadata !8}
!7 = metadata !{i32 0, i32 0, i32 1031, null, i32 0}
!8 = metadata !{metadata !"gl_PerVertex", metadata !4, metadata !"gl_Position", metadata !5, metadata !"gl_PointSize", metadata !5, metadata !"gl_ClipDistance", metadata !5}
!9 = metadata !{metadata !"gl_PrimitiveID", i32 7, i32* @PrimitiveID_shadow_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1052, null, i32 0}
!11 = metadata !{metadata !"gl_Layer", i32 7, i32* @Layer_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1054, null, i32 0}
!13 = metadata !{metadata !"toF", i32 16, %toFragment* @toF_shadow_typeProxy, metadata !14, metadata !15}
!14 = metadata !{i32 0, i32 0, i32 1055, null, i32 0}
!15 = metadata !{metadata !"toFragment", metadata !4, metadata !"color", metadata !5}
!16 = metadata !{metadata !"fromV", i32 17, [6 x %fromVertex.0]* @fromV_shadow_typeProxy, metadata !17, metadata !3}
!17 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!18 = metadata !{metadata !"gl_in", i32 17, [6 x %gl_PerVertex.1]* @in_shadow_typeProxy, metadata !19, metadata !8}
!19 = metadata !{i32 0, i32 0, i32 1034, null, i32 0}
!20 = metadata !{metadata !"gl_PrimitiveIDIn", i32 1, i32* @PrimitiveIDIn_shadow_typeProxy, metadata !21}
!21 = metadata !{i32 0, i32 0, i32 1053, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

%gl_PerVertex = type { <4 x float>, float, [1 x float] }

@"anon@1_shadow" = internal unnamed_addr global %gl_PerVertex zeroinitializer

define fastcc void @main() {
entry:
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  %fromV = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1025, i32 -1), !gla.input !16
  %gl_in = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1034, i32 -1), !gla.input !18
  %gla_constGEP = getelementptr %gl_PerVertex* @"anon@1_shadow", i32 0, i32 0
  store <4 x float> %gl_in, <4 x float>* %gla_constGEP, align 16
  %gl_in33 = call float @llvm.gla.fReadData.f32(i32 1044, i32 -1), !gla.input !18
  %gla_constGEP42 = getelementptr %gl_PerVertex* @"anon@1_shadow", i32 0, i32 1
  store float %gl_in33, float* %gla_constGEP42, align 16
  %gl_PrimitiveIDIn = call i32 @llvm.gla.readData.i32(i32 1053, i32 -1), !gla.input !20
  call void @llvm.gla.fWriteData.v3f32(i32 1024, i32 -1, <3 x float> %fromV), !gla.output !1
  %gla_constGEP43 = getelementptr %gl_PerVertex* @"anon@1_shadow", i32 0, i32 0
  %0 = load <4 x float>* %gla_constGEP43, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 1031, i32 -1, <4 x float> %0), !gla.output !6
  %gla_constGEP44 = getelementptr %gl_PerVertex* @"anon@1_shadow", i32 0, i32 1
  %1 = load float* %gla_constGEP44, align 16
  call void @llvm.gla.fWriteData.f32(i32 1032, i32 -1, float %1), !gla.output !6
  call void @llvm.gla.writeData.i32(i32 1052, i32 -1, i32 %gl_PrimitiveIDIn), !gla.output !9
  call void @llvm.gla.writeData.i32(i32 1054, i32 -1, i32 2), !gla.output !11
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #0

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #0

; Function Attrs: nounwind readonly
declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) #1

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) #1

; Function Attrs: nounwind readonly
declare float @llvm.gla.fReadData.f32(i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @llvm.gla.readData.i32(i32, i32) #1

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v3f32(i32, i32, <3 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.f32(i32, i32, float) #0

; Function Attrs: nounwind
declare void @llvm.gla.writeData.i32(i32, i32, i32) #0

attributes #0 = { nounwind }
attributes #1 = { nounwind readonly }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1, !6, !9, !11, !13}
!gla.inputs = !{!16, !18, !20}
!gla.noStaticUse = !{!13}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"", i32 16, %fromVertex* @"anon@0_shadow_typeProxy", metadata !2, metadata !3}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"fromVertex", metadata !4, metadata !"color", metadata !5}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"", metadata !4}
!6 = metadata !{metadata !"", i32 16, %gl_PerVertex* @"anon@1_shadow_typeProxy", metadata !7, metadata !8}
!7 = metadata !{i32 0, i32 0, i32 1031, null, i32 0}
!8 = metadata !{metadata !"gl_PerVertex", metadata !4, metadata !"gl_Position", metadata !5, metadata !"gl_PointSize", metadata !5, metadata !"gl_ClipDistance", metadata !5}
!9 = metadata !{metadata !"gl_PrimitiveID", i32 7, i32* @PrimitiveID_shadow_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1052, null, i32 0}
!11 = metadata !{metadata !"gl_Layer", i32 7, i32* @Layer_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1054, null, i32 0}
!13 = metadata !{metadata !"toF", i32 16, %toFragment* @toF_shadow_typeProxy, metadata !14, metadata !15}
!14 = metadata !{i32 0, i32 0, i32 1055, null, i32 0}
!15 = metadata !{metadata !"toFragment", metadata !4, metadata !"color", metadata !5}
!16 = metadata !{metadata !"fromV", i32 17, [6 x %fromVertex.0]* @fromV_shadow_typeProxy, metadata !17, metadata !3}
!17 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!18 = metadata !{metadata !"gl_in", i32 17, [6 x %gl_PerVertex.1]* @in_shadow_typeProxy, metadata !19, metadata !8}
!19 = metadata !{i32 0, i32 0, i32 1034, null, i32 0}
!20 = metadata !{metadata !"gl_PrimitiveIDIn", i32 1, i32* @PrimitiveIDIn_shadow_typeProxy, metadata !21}
!21 = metadata !{i32 0, i32 0, i32 1053, null, i32 0}
#version 150 core
// LunarGOO output
in fromVertex {
    vec3 color;
} fromV[6];
out fromVertex {
    vec3 color;
} ;
out gl_PerVertex {
    vec4 gl_Position;
    float gl_PointSize;
    float gl_ClipDistance[1];
} ;
out toFragment {
    vec3 color;
} toF;
gl_PerVertex anon@1_shadow;
const int const23i_2 = 2;

void main()
{
    void temp21 = EmitVertex();
    void temp22 = EndPrimitive();
    anon@1_shadow.gl_Position = gl_in[0].gl_Position;
    anon@1_shadow.gl_PointSize = gl_in[3].gl_PointSize;
    color = fromV[0].color;
    gl_Position = anon@1_shadow.gl_Position;
    gl_PointSize = anon@1_shadow.gl_PointSize;
    gl_PrimitiveID = gl_PrimitiveIDIn;
    gl_Layer = const23i_2;
    
}


tempglsl.geom
ERROR: 0:9: 'built-in block redeclaration' : not supported for this version or the enabled extensions 
ERROR: 0:17: '' :  syntax error
ERROR: 2 compilation errors.  No code generated.


