
Top IR:
; ModuleID = 'Glslang'

%s3 = type { %s2, i32, float, %s1 }
%s2 = type { i32, float, %s1, <4 x float> }
%s1 = type { i32, float }

@foo3 = external addrspace(2) constant %s3
@coord = global <2 x float> zeroinitializer
@condition = external addrspace(2) constant i32
@color = global <4 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32
@foo = external addrspace(2) constant %s1
@foo2 = external addrspace(2) constant %s2
@uFloatArray = external addrspace(2) constant [16 x float]

define fastcc void @main() {
entry:
  %a = alloca [16 x float]
  %i = alloca i32
  %localArray = alloca [16 x float]
  %x = alloca i32
  %localIArray = alloca [8 x i32]
  %localFArray = alloca [16 x float]
  %locals2 = alloca %s2
  %locals21 = load %s2 addrspace(2)* getelementptr inbounds (%s3 addrspace(2)* @foo3, i32 0, i32 0), !gla.uniform !1
  store %s2 %locals21, %s2* %locals2
  %0 = load i32 addrspace(2)* getelementptr inbounds (%s3 addrspace(2)* @foo3, i32 0, i32 0, i32 0), !gla.uniform !1
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = getelementptr %s2* %locals2, i32 0, i32 2, i32 1
  store float 1.000000e+00, float* %2
  %3 = load <2 x float>* @coord
  %4 = extractelement <2 x float> %3, i32 0
  %5 = getelementptr [16 x float]* %localFArray, i32 0, i32 4
  store float %4, float* %5
  %6 = load i32 addrspace(2)* getelementptr inbounds (%s3 addrspace(2)* @foo3, i32 0, i32 0, i32 0), !gla.uniform !1
  %7 = getelementptr [8 x i32]* %localIArray, i32 0, i32 2
  store i32 %6, i32* %7
  br label %ifmerge

else:                                             ; preds = %entry
  %8 = load <2 x float>* @coord
  %9 = extractelement <2 x float> %8, i32 0
  %10 = getelementptr %s2* %locals2, i32 0, i32 2, i32 1
  store float %9, float* %10
  %11 = getelementptr [16 x float]* %localFArray, i32 0, i32 4
  store float 1.000000e+00, float* %11
  %12 = getelementptr [8 x i32]* %localIArray, i32 0, i32 2
  store i32 0, i32* %12
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %13 = getelementptr [8 x i32]* %localIArray, i32 0, i32 2
  %14 = load i32* %13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %then2, label %ifmerge3

then2:                                            ; preds = %ifmerge
  %16 = getelementptr [16 x float]* %localFArray, i32 0, i32 4
  %17 = load float* %16
  %18 = fadd float %17, 1.000000e+00
  store float %18, float* %16
  br label %ifmerge3

ifmerge3:                                         ; preds = %ifmerge, %then2
  store i32 5, i32* %x
  %19 = load i32* %x
  %20 = load <2 x float>* @coord
  %21 = extractelement <2 x float> %20, i32 0
  %22 = getelementptr [16 x float]* %localArray, i32 0, i32 %19
  store float %21, float* %22
  store i32 0, i32* %i
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %ifmerge5, %ifmerge3
  %23 = load i32* %i
  %24 = icmp slt i32 %23, 16
  %25 = xor i1 %24, true
  br i1 %25, label %then4, label %ifmerge5

then4:                                            ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge5

ifmerge5:                                         ; preds = %loop-header, %post-loop-break
  %26 = load i32* %i
  %27 = getelementptr [16 x float]* %a, i32 0, i32 %26
  store float 0.000000e+00, float* %27
  %28 = load i32* %i
  %i6 = add i32 %28, 1
  store i32 %i6, i32* %i
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %then4
  %29 = load i32 addrspace(2)* @condition, !gla.uniform !8
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %then7, label %ifmerge9

then7:                                            ; preds = %loop-merge
  %a8 = load [16 x float]* %localArray
  store [16 x float] %a8, [16 x float]* %a
  br label %ifmerge9

ifmerge9:                                         ; preds = %loop-merge, %then7
  %31 = load <4 x float>* @color
  %32 = getelementptr %s2* %locals2, i32 0, i32 3
  store <4 x float> %31, <4 x float>* %32
  %33 = load <2 x float>* @coord
  %34 = extractelement <2 x float> %33, i32 1
  %35 = getelementptr %s2* %locals2, i32 0, i32 3
  %36 = load <4 x float>* %35
  %37 = insertelement <4 x float> %36, float %34, i32 2
  store <4 x float> %37, <4 x float>* %35
  %38 = getelementptr %s2* %locals2, i32 0, i32 3
  %39 = load <4 x float>* %38
  %40 = getelementptr [16 x float]* %localFArray, i32 0, i32 4
  %41 = load float* %40
  %42 = getelementptr %s2* %locals2, i32 0, i32 2, i32 1
  %43 = load float* %42
  %44 = fadd float %41, %43
  %45 = load i32* %x
  %46 = getelementptr [16 x float]* %localArray, i32 0, i32 %45
  %47 = load float* %46
  %48 = fadd float %44, %47
  %49 = load i32* %x
  %50 = getelementptr [16 x float]* %a, i32 0, i32 %49
  %51 = load float* %50
  %52 = fadd float %48, %51
  %53 = insertelement <4 x float> undef, float %52, i32 0
  %54 = insertelement <4 x float> %53, float %52, i32 1
  %55 = insertelement <4 x float> %54, float %52, i32 2
  %56 = insertelement <4 x float> %55, float %52, i32 3
  %57 = fmul <4 x float> %39, %56
  %58 = load i32 addrspace(1)* @sampler, !gla.uniform !9
  %59 = load <2 x float>* @coord
  %60 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %58, i32 0, <2 x float> %59)
  %gl_FragColor = fmul <4 x float> %57, %60
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge9
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !8, !9, !12, !13, !14}
!gla.inputs = !{!15, !17}
!gla.outputs = !{!19}
!gla.noStaticUse = !{!12, !13, !14}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"foo3", i32 12, %s3* @foo3_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 4, i32 0, i32 1024, null}
!3 = metadata !{metadata !"s3", metadata !2, metadata !"s2_1", metadata !4, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!4 = metadata !{metadata !"s2", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7, metadata !"bleh", metadata !5}
!5 = metadata !{metadata !"", metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"s1", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5}
!8 = metadata !{metadata !"condition", i32 12, i32* @condition_typeProxy, metadata !6}
!9 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!12 = metadata !{metadata !"foo", i32 12, %s1* @foo_typeProxy, metadata !2, metadata !7}
!13 = metadata !{metadata !"foo2", i32 12, %s2* @foo2_typeProxy, metadata !2, metadata !4}
!14 = metadata !{metadata !"uFloatArray", i32 12, [16 x float]* @uFloatArray_typeProxy, metadata !6}
!15 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!17 = metadata !{metadata !"color", i32 1, <4 x float>* @color_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!19 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

%s3 = type { %s2, i32, float, %s1 }
%s2 = type { i32, float, %s1, <4 x float> }
%s1 = type { i32, float }

@foo3 = external addrspace(2) constant %s3
@coord = global <2 x float> zeroinitializer
@condition = external addrspace(2) constant i32
@color = global <4 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %0 = load <2 x float>* @coord, align 8
  %gla_constGEP = getelementptr %s3 addrspace(2)* @foo3, i32 0, i32 0, i32 0
  %1 = load i32 addrspace(2)* %gla_constGEP, align 16, !gla.uniform !1
  %2 = extractelement <2 x float> %0, i32 0
  %3 = icmp sgt i32 %1, 0
  %select = select i1 %3, float 1.000000e+00, float %2
  %4 = load i32 addrspace(2)* @condition, align 4, !gla.uniform !8
  %5 = icmp eq i32 %4, 1
  %select94 = select i1 %5, float %2, float 0.000000e+00
  %6 = load <4 x float>* @color, align 16
  %7 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.v2f32.f32(<4 x float> %6, i32 4, float undef, i32 undef, float undef, i32 undef, <2 x float> %0, i32 1, float undef, i32 undef)
  %8 = select i1 %3, float %2, float 2.000000e+00
  %9 = fadd float %select, %8
  %10 = fadd float %2, %9
  %11 = fadd float %10, %select94
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %11, <4 x i32> zeroinitializer)
  %13 = fmul <4 x float> %7, %12
  %14 = load i32 addrspace(1)* @sampler, align 4, !gla.uniform !9
  %15 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %14, i32 0, <2 x float> %0)
  %gl_FragColor = fmul <4 x float> %15, %13
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.v2f32.f32(<4 x float>, i32, float, i32, float, i32, <2 x float>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !8, !9, !12, !13, !14}
!gla.inputs = !{!15, !17}
!gla.outputs = !{!19}
!gla.noStaticUse = !{!12, !13, !14}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"foo3", i32 12, %s3* @foo3_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 4, i32 0, i32 1024, null}
!3 = metadata !{metadata !"s3", metadata !2, metadata !"s2_1", metadata !4, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!4 = metadata !{metadata !"s2", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7, metadata !"bleh", metadata !5}
!5 = metadata !{metadata !"", metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"s1", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5}
!8 = metadata !{metadata !"condition", i32 12, i32* @condition_typeProxy, metadata !6}
!9 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!12 = metadata !{metadata !"foo", i32 12, %s1* @foo_typeProxy, metadata !2, metadata !7}
!13 = metadata !{metadata !"foo2", i32 12, %s2* @foo2_typeProxy, metadata !2, metadata !4}
!14 = metadata !{metadata !"uFloatArray", i32 12, [16 x float]* @uFloatArray_typeProxy, metadata !6}
!15 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!17 = metadata !{metadata !"color", i32 1, <4 x float>* @color_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!19 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
#version 130
// LunarGOO output
struct s1 {
	int i;
	float f;
};
struct s2 {
	int i;
	float f;
	s1 s1_1;
	vec4 bleh;
};
struct s3 {
	s2 s2_1;
	int i;
	float f;
	s1 s1_1;
};
uniform s3 foo3;
uniform int condition;
uniform sampler2D sampler;
uniform s1 foo;
uniform s2 foo2;
uniform float uFloatArray[16];
in vec2 coord;
in vec4 color;
const int C_0 = 0;
const float C_1d0 = 1.0;
const int C_1 = 1;
const float C_0d0 = 0.0;
const float C_2d0 = 2.0;

void main()
{
	bool H_27n3qy = foo3.s2_1.i > C_0;
	vec4 H_sbr82h = color;
	H_sbr82h.z = coord.y;
	vec4 H_k7fjv2 = vec4(((((H_27n3qy ? C_1d0 : coord.x) + (H_27n3qy ? coord.x : C_2d0)) + coord.x) + ((condition == C_1) ? coord.x : C_0d0)));
	vec4 H_0k8q2q = texture(sampler, coord);
	gl_FragColor = ((H_k7fjv2 * H_sbr82h) * H_0k8q2q);
	
}

#version 130
// LunarGOO output
struct s1 {
	int i;
	float f;
};
struct s2 {
	int i;
	float f;
	s1 s1_1;
	vec4 bleh;
};
struct s3 {
	s2 s2_1;
	int i;
	float f;
	s1 s1_1;
};
uniform s3 foo3;
uniform int condition;
uniform sampler2D sampler;
uniform s1 foo;
uniform s2 foo2;
uniform float uFloatArray[16];
in vec4 color;
in vec2 coord;
const int C_0 = 0;
const float C_1d0 = 1.0;
const float C_2d0 = 2.0;
const int C_1 = 1;
const float C_0d0 = 0.0;

void main()
{
	bool H_uc1 = foo3.s2_1.i > C_0;
	vec4 H_sbr82h = color;
	H_sbr82h.z = coord.y;
	vec4 H_kzuqc41 = vec4(((((H_uc1 ? C_1d0 : coord.x) + (H_uc1 ? coord.x : C_2d0)) + coord.x) + ((condition == C_1) ? coord.x : C_0d0)));
	vec4 H_uc2 = texture(sampler, coord);
	gl_FragColor = ((H_kzuqc41 * H_sbr82h) * H_uc2);
	
}

