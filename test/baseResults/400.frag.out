
Top IR:
; ModuleID = 'Glslang'

@outp = global <4 x float> zeroinitializer
@u2drs = external addrspace(1) constant i32
@arrayedSampler = external addrspace(1) constant [5 x i32]
@i = global i32 0
@c2D = global <2 x float> zeroinitializer
@gl_ClipDistance = global [2 x float] zeroinitializer
@uoutp = global <4 x i32> zeroinitializer
@samp2dr = external addrspace(1) constant i32
@lconst = internal constant [4 x <2 x i32>] [<2 x i32> <i32 1, i32 2>, <2 x i32> <i32 3, i32 4>, <2 x i32> <i32 15, i32 16>, <2 x i32> <i32 -2, i32 0>]
@ioutp = global <4 x i32> zeroinitializer
@isamp2DA = external addrspace(1) constant i32
@gl_FragCoord = global <4 x float> zeroinitializer
@vl2 = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed = alloca <2 x i32>
  %v = alloca <4 x float>
  %0 = load i32* @i
  %1 = getelementptr [5 x i32] addrspace(1)* @arrayedSampler, i32 0, i32 %0
  %2 = load i32 addrspace(1)* %1, !gla.uniform !9
  %3 = load <2 x float>* @c2D
  %v1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %2, i32 0, <2 x float> %3)
  store <4 x float> %v1, <4 x float>* %v
  %4 = load float* getelementptr inbounds ([2 x float]* @gl_ClipDistance, i32 0, i32 1)
  %5 = load <4 x float>* @outp
  %outp = insertelement <4 x float> %5, float %4, i32 0
  store <4 x float> %outp, <4 x float>* @outp
  %6 = load <4 x float>* %v
  %7 = extractelement <4 x float> %6, i32 1
  %8 = insertelement <3 x float> undef, float %7, i32 0
  %9 = extractelement <4 x float> %6, i32 2
  %10 = insertelement <3 x float> %8, float %9, i32 1
  %11 = extractelement <4 x float> %6, i32 3
  %12 = insertelement <3 x float> %10, float %11, i32 2
  %13 = load <4 x float>* @outp
  %14 = extractelement <3 x float> %12, i32 0
  %15 = insertelement <4 x float> %13, float %14, i32 1
  %16 = extractelement <3 x float> %12, i32 1
  %17 = insertelement <4 x float> %15, float %16, i32 2
  %18 = extractelement <3 x float> %12, i32 2
  %outp2 = insertelement <4 x float> %17, float %18, i32 3
  store <4 x float> %outp2, <4 x float>* @outp
  %19 = load i32 addrspace(1)* @samp2dr, !gla.uniform !12
  %20 = load <2 x float>* @c2D
  %21 = load [4 x <2 x i32>]* @lconst
  %22 = extractvalue [4 x <2 x i32>] %21, 0
  %23 = extractvalue [4 x <2 x i32>] %21, 1
  %24 = extractvalue [4 x <2 x i32>] %21, 2
  %25 = extractvalue [4 x <2 x i32>] %21, 3
  %uoutp = call <4 x i32> @llvm.gla.texelGatherOffsets.v4i32.v2f32(i32 5, i32 %19, i32 9536, <2 x float> %20, i32 2, float undef, <2 x i32> %22, <2 x i32> %23, <2 x i32> %24, <2 x i32> %25)
  store <4 x i32> %uoutp, <4 x i32>* @uoutp
  %26 = load i32 addrspace(1)* getelementptr inbounds ([5 x i32] addrspace(1)* @arrayedSampler, i32 0, i32 0), !gla.uniform !9
  %27 = load <2 x float>* @c2D
  %28 = call <4 x float> @llvm.gla.fTexelGather.v4f32.v2f32(i32 2, i32 %26, i32 64, <2 x float> %27, i32 undef, float undef)
  %29 = load <4 x float>* @outp
  %outp3 = fadd <4 x float> %29, %28
  store <4 x float> %outp3, <4 x float>* @outp
  %30 = load i32 addrspace(1)* @isamp2DA, !gla.uniform !15
  %ioutp = call <4 x i32> @llvm.gla.texelGatherOffset.v4i32.v3f32(i32 2, i32 %30, i32 1360, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, i32 3, float undef, <2 x i32> <i32 1, i32 1>)
  store <4 x i32> %ioutp, <4 x i32>* @ioutp
  %31 = load i32 addrspace(1)* @isamp2DA, !gla.uniform !15
  %32 = call <4 x i32> @llvm.gla.texelGatherOffset.v4i32.v3f32(i32 2, i32 %31, i32 1360, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, i32 3, float undef, <2 x i32> <i32 1, i32 1>)
  %33 = load <4 x i32>* @ioutp
  %ioutp4 = add <4 x i32> %33, %32
  store <4 x i32> %ioutp4, <4 x i32>* @ioutp
  %34 = load i32 addrspace(1)* @isamp2DA, !gla.uniform !15
  %35 = load i32* @i
  %36 = load <2 x i32>* %constructed
  %37 = insertelement <2 x i32> undef, i32 %35, i32 0
  %38 = insertelement <2 x i32> %37, i32 %35, i32 1
  %39 = call <4 x i32> @llvm.gla.texelGatherOffset.v4i32.v3f32(i32 2, i32 %34, i32 336, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, i32 undef, float undef, <2 x i32> %38)
  %40 = load <4 x i32>* @ioutp
  %ioutp5 = add <4 x i32> %40, %39
  store <4 x i32> %ioutp5, <4 x i32>* @ioutp
  %41 = load <4 x float>* @gl_FragCoord
  %42 = load <4 x float>* @vl2
  %43 = fadd <4 x float> %41, %42
  %44 = load <4 x float>* @outp
  %outp6 = fadd <4 x float> %44, %43
  store <4 x float> %outp6, <4 x float>* @outp
  call void @"foo23("()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"foo23("() #0 {
entry:
  %0 = load i32 addrspace(1)* @u2drs, !gla.uniform !6
  %1 = load <4 x float>* @outp
  %2 = call float @llvm.gla.fTextureSampleLodRefZOffsetGrad.f32.v4f32.v2i32.v2f32.v2f32(i32 5, i32 %0, i32 265, <4 x float> %1, float undef, float undef, <2 x i32> <i32 3, i32 4>, <2 x float> zeroinitializer, <2 x float> zeroinitializer)
  %3 = load <4 x float>* @outp
  %4 = extractelement <4 x float> %3, i32 0
  %5 = fadd float %4, %2
  %6 = load <4 x float>* @outp
  %outp = insertelement <4 x float> %6, float %5, i32 0
  store <4 x float> %outp, <4 x float>* @outp
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZOffsetGrad.f32.v4f32.v2i32.v2f32.v2f32(i32, i32, i32, <4 x float>, float, float, <2 x i32>, <2 x float>, <2 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.texelGatherOffsets.v4i32.v2f32(i32, i32, i32, <2 x float>, i32, float, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGather.v4f32.v2f32(i32, i32, i32, <2 x float>, i32, float) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.texelGatherOffset.v4i32.v3f32(i32, i32, i32, <3 x float>, i32, float, <2 x i32>) #1

attributes #0 = { alwaysinline }
attributes #1 = { nounwind readnone }

!gla.outputs = !{!0, !2, !4}
!gla.uniforms = !{!6, !9, !12, !15}
!gla.entrypoint = !{!18}
!gla.inputs = !{!19, !21, !23, !25, !27}

!0 = metadata !{metadata !"outp", i32 7, <4 x float>* @outp_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"uoutp", i32 7, <4 x i32>* @uoutp_typeProxy, metadata !3}
!3 = metadata !{i32 1, i32 0, i32 1029, null, i32 0}
!4 = metadata !{metadata !"ioutp", i32 7, <4 x i32>* @ioutp_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1030, null, i32 0}
!6 = metadata !{metadata !"u2drs", i32 12, i32* @u2drs_typeProxy, metadata !7}
!7 = metadata !{i32 5, i32 0, i32 1024, metadata !8}
!8 = metadata !{i32 0, i32* @u2drs_typeProxy, i32 4, i1 false, i1 true, i32 0}
!9 = metadata !{metadata !"arrayedSampler", i32 12, [5 x i32]* @arrayedSampler_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, [5 x i32]* @arrayedSampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!12 = metadata !{metadata !"samp2dr", i32 12, i32* @samp2dr_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 1024, metadata !14}
!14 = metadata !{i32 0, i32* @samp2dr_typeProxy, i32 4, i1 false, i1 false, i32 2}
!15 = metadata !{metadata !"isamp2DA", i32 12, i32* @isamp2DA_typeProxy, metadata !16}
!16 = metadata !{i32 5, i32 0, i32 1024, metadata !17}
!17 = metadata !{i32 0, i32* @isamp2DA_typeProxy, i32 1, i1 true, i1 false, i32 1}
!18 = metadata !{metadata !"main", i32 15}
!19 = metadata !{metadata !"i", i32 1, i32* @i_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!21 = metadata !{metadata !"c2D", i32 1, <2 x float>* @c2D_typeProxy, metadata !22}
!22 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!23 = metadata !{metadata !"gl_ClipDistance", i32 1, [2 x float]* @gl_ClipDistance_typeProxy, metadata !24}
!24 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}
!25 = metadata !{metadata !"gl_FragCoord", i32 5, <4 x float>* @gl_FragCoord_typeProxy, metadata !26}
!26 = metadata !{i32 0, i32 0, i32 1031, null, i32 0}
!27 = metadata !{metadata !"vl2", i32 1, <4 x float>* @vl2_typeProxy, metadata !28}
!28 = metadata !{i32 0, i32 0, i32 6, null, i32 1}


Bottom IR:
; ModuleID = 'Glslang'

@outp = global <4 x float> zeroinitializer
@u2drs = external addrspace(1) constant i32
@arrayedSampler = external addrspace(1) constant [5 x i32]
@i = global i32 0
@c2D = global <2 x float> zeroinitializer
@gl_ClipDistance = global [2 x float] zeroinitializer
@uoutp = global <4 x i32> zeroinitializer
@samp2dr = external addrspace(1) constant i32
@ioutp = global <4 x i32> zeroinitializer
@isamp2DA = external addrspace(1) constant i32
@gl_FragCoord = global <4 x float> zeroinitializer
@vl2 = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load i32* @i, align 4
  %1 = call <2 x i32> @llvm.gla.swizzle.v2i32.i32.v2i32(i32 %0, <2 x i32> zeroinitializer)
  %2 = getelementptr [5 x i32] addrspace(1)* @arrayedSampler, i32 0, i32 %0
  %3 = load i32 addrspace(1)* %2, align 4, !gla.uniform !9
  %4 = load <2 x float>* @c2D, align 8
  %v1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %3, i32 0, <2 x float> %4)
  %gla_constGEP = getelementptr [2 x float]* @gl_ClipDistance, i32 0, i32 1
  %5 = load float* %gla_constGEP, align 4
  %6 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v4f32.v4f32.v4f32(<4 x float> undef, i32 15, float %5, i32 0, <4 x float> %v1, i32 1, <4 x float> %v1, i32 2, <4 x float> %v1, i32 3)
  store <4 x float> %6, <4 x float>* @outp, align 16
  %7 = load i32 addrspace(1)* @samp2dr, align 4, !gla.uniform !12
  %uoutp = call <4 x i32> @llvm.gla.texelGatherOffsets.v4i32.v2f32(i32 5, i32 %7, i32 9536, <2 x float> %4, i32 2, float undef, <2 x i32> <i32 1, i32 2>, <2 x i32> <i32 3, i32 4>, <2 x i32> <i32 15, i32 16>, <2 x i32> <i32 -2, i32 0>)
  store <4 x i32> %uoutp, <4 x i32>* @uoutp, align 16
  %gla_constGEP7 = getelementptr [5 x i32] addrspace(1)* @arrayedSampler, i32 0, i32 0
  %8 = load i32 addrspace(1)* %gla_constGEP7, align 4, !gla.uniform !9
  %9 = call <4 x float> @llvm.gla.fTexelGather.v4f32.v2f32(i32 2, i32 %8, i32 64, <2 x float> %4, i32 undef, float undef)
  %outp3 = fadd <4 x float> %9, %6
  store <4 x float> %outp3, <4 x float>* @outp, align 16
  %10 = load i32 addrspace(1)* @isamp2DA, align 4, !gla.uniform !15
  %ioutp = call <4 x i32> @llvm.gla.texelGatherOffset.v4i32.v3f32(i32 2, i32 %10, i32 1360, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, i32 3, float undef, <2 x i32> <i32 1, i32 1>)
  %ioutp4 = shl <4 x i32> %ioutp, <i32 1, i32 1, i32 1, i32 1>
  %11 = call <4 x i32> @llvm.gla.texelGatherOffset.v4i32.v3f32(i32 2, i32 %10, i32 336, <3 x float> <float 0x3FB99999A0000000, float 0x3FB99999A0000000, float 0x3FB99999A0000000>, i32 undef, float undef, <2 x i32> %1)
  %ioutp5 = add <4 x i32> %ioutp4, %11
  store <4 x i32> %ioutp5, <4 x i32>* @ioutp, align 16
  %12 = load <4 x float>* @gl_FragCoord, align 16
  %13 = load <4 x float>* @vl2, align 16
  %14 = fadd <4 x float> %12, %13
  %outp6 = fadd <4 x float> %outp3, %14
  store <4 x float> %outp6, <4 x float>* @outp, align 16
  %15 = load i32 addrspace(1)* @u2drs, align 4, !gla.uniform !6
  %16 = call float @llvm.gla.fTextureSampleLodRefZOffsetGrad.f32.v4f32.v2i32.v2f32.v2f32(i32 5, i32 %15, i32 265, <4 x float> %outp6, float undef, float undef, <2 x i32> <i32 3, i32 4>, <2 x float> zeroinitializer, <2 x float> zeroinitializer)
  %17 = extractelement <4 x float> %outp6, i32 0
  %18 = fadd float %17, %16
  %19 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %outp6, i32 1, float %18, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  store <4 x float> %19, <4 x float>* @outp, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZOffsetGrad.f32.v4f32.v2i32.v2f32.v2f32(i32, i32, i32, <4 x float>, float, float, <2 x i32>, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.texelGatherOffsets.v4i32.v2f32(i32, i32, i32, <2 x float>, i32, float, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGather.v4f32.v2f32(i32, i32, i32, <2 x float>, i32, float) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.texelGatherOffset.v4i32.v3f32(i32, i32, i32, <3 x float>, i32, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v4f32.v4f32.v4f32(<4 x float>, i32, float, i32, <4 x float>, i32, <4 x float>, i32, <4 x float>, i32) #0

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.swizzle.v2i32.i32.v2i32(i32, <2 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.outputs = !{!0, !2, !4}
!gla.uniforms = !{!6, !9, !12, !15}
!gla.entrypoint = !{!18}
!gla.inputs = !{!19, !21, !23, !25, !27}

!0 = metadata !{metadata !"outp", i32 7, <4 x float>* @outp_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!2 = metadata !{metadata !"uoutp", i32 7, <4 x i32>* @uoutp_typeProxy, metadata !3}
!3 = metadata !{i32 1, i32 0, i32 1029, null, i32 0}
!4 = metadata !{metadata !"ioutp", i32 7, <4 x i32>* @ioutp_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1030, null, i32 0}
!6 = metadata !{metadata !"u2drs", i32 12, i32* @u2drs_typeProxy, metadata !7}
!7 = metadata !{i32 5, i32 0, i32 1024, metadata !8}
!8 = metadata !{i32 0, i32* @u2drs_typeProxy, i32 4, i1 false, i1 true, i32 0}
!9 = metadata !{metadata !"arrayedSampler", i32 12, [5 x i32]* @arrayedSampler_typeProxy, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 1024, metadata !11}
!11 = metadata !{i32 0, [5 x i32]* @arrayedSampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!12 = metadata !{metadata !"samp2dr", i32 12, i32* @samp2dr_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 1024, metadata !14}
!14 = metadata !{i32 0, i32* @samp2dr_typeProxy, i32 4, i1 false, i1 false, i32 2}
!15 = metadata !{metadata !"isamp2DA", i32 12, i32* @isamp2DA_typeProxy, metadata !16}
!16 = metadata !{i32 5, i32 0, i32 1024, metadata !17}
!17 = metadata !{i32 0, i32* @isamp2DA_typeProxy, i32 1, i1 true, i1 false, i32 1}
!18 = metadata !{metadata !"main", i32 15}
!19 = metadata !{metadata !"i", i32 1, i32* @i_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!21 = metadata !{metadata !"c2D", i32 1, <2 x float>* @c2D_typeProxy, metadata !22}
!22 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!23 = metadata !{metadata !"gl_ClipDistance", i32 1, [2 x float]* @gl_ClipDistance_typeProxy, metadata !24}
!24 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}
!25 = metadata !{metadata !"gl_FragCoord", i32 5, <4 x float>* @gl_FragCoord_typeProxy, metadata !26}
!26 = metadata !{i32 0, i32 0, i32 1031, null, i32 0}
!27 = metadata !{metadata !"vl2", i32 1, <4 x float>* @vl2_typeProxy, metadata !28}
!28 = metadata !{i32 0, i32 0, i32 6, null, i32 1}
#version 400 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
uniform sampler2DRectShadow u2drs;
uniform sampler2D arrayedSampler[5];
uniform usampler2DRect samp2dr;
uniform isampler2DArray isamp2DA;
flat in int i;
in vec2 c2D;
in float gl_ClipDistance[2];
layout(location=6) in vec4 vl2;
out vec4 outp;
out uvec4 uoutp;
out ivec4 ioutp;
const ivec2[4] offsets_4 = ivec2[4](ivec2(1, 2), ivec2(3, 4), ivec2(15, 16), ivec2(-2, 0));
const int L_5 = 2;
const vec3 L_9 = vec3(0.1);
const ivec2 L_a = ivec2(1);
const int L_b = 3;
const ivec4 L_d = ivec4(1);
const vec2 L_10 = vec2(0.0);
const ivec2 L_11 = ivec2(3, 4);

void main()
{
	ivec2 L_1 = ivec2(i);
	vec4 L_2 = texture(arrayedSampler[i], c2D);
	vec4 L_3 = vec4(gl_ClipDistance[1], L_2.y, L_2.z, L_2.w);
	outp = L_3;
	ivec4 uoutp_c1 = ivec4(textureGatherOffsets(samp2dr, c2D, offsets_4, L_5));
	uoutp = uvec4(uoutp_c1);
	vec4 L_7 = textureGather(arrayedSampler[0], c2D);
	vec4 outp_c2 = L_3 + L_7;
	outp = outp_c2;
	ivec4 ioutp_c3 = textureGatherOffset(isamp2DA, L_9, L_a, L_b);
	ivec4 L_e = textureGatherOffset(isamp2DA, L_9, L_1);
	ioutp = ((ioutp_c3 << L_d) + L_e);
	vec4 outp_c4 = (gl_FragCoord + vl2) + outp_c2;
	outp = outp_c4;
	float L_12 = textureProjGradOffset(u2drs, outp_c4, L_10, L_10, L_11);
	vec4 L_13 = outp_c4;
	L_13.x = (L_12 + outp_c4.x);
	outp = L_13;
	
}

#version 400 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
uniform sampler2D arrayedSampler[5];
uniform usampler2DRect samp2dr;
uniform isampler2DArray isamp2DA;
uniform sampler2DRectShadow u2drs;
flat in int i;
in vec2 c2D;
in float gl_ClipDistance[2];
layout(location=6) in vec4 vl2;
out vec4 outp;
out uvec4 uoutp;
out ivec4 ioutp;
const ivec2[4] offsets_4 = ivec2[4](ivec2(1, 2), ivec2(3, 4), ivec2(15, 16), ivec2(-2, 0));
const int L_5 = 2;
const vec3 L_9 = vec3(0.1);
const ivec2 L_a = ivec2(1);
const int L_b = 3;
const ivec4 L_e = ivec4(1);
const vec2 L_10 = vec2(0.0);
const ivec2 L_11 = ivec2(3, 4);

void main()
{
	ivec2 L_1 = ivec2(i);
	vec4 L_uc1 = texture(arrayedSampler[i], c2D);
	vec4 L_3 = vec4(gl_ClipDistance[1], L_uc1.y, L_uc1.z, L_uc1.w);
	outp = L_3;
	ivec4 uoutp_c2 = ivec4(textureGatherOffsets(samp2dr, c2D, offsets_4, L_5));
	uoutp = uvec4(uoutp_c2);
	vec4 L_uc3 = textureGather(arrayedSampler[0], c2D);
	vec4 outp_c4 = L_3 + L_uc3;
	outp = outp_c4;
	ivec4 ioutp_c5 = textureGatherOffset(isamp2DA, L_9, L_a, L_b);
	ivec4 L_e_c6 = textureGatherOffset(isamp2DA, L_9, L_1);
	ioutp = ((ioutp_c5 << L_e) + L_e_c6);
	vec4 outp_c7 = (gl_FragCoord + vl2) + outp_c4;
	outp = outp_c7;
	float L_uc8 = textureProjGradOffset(u2drs, outp_c7, L_10, L_10, L_11);
	vec4 L_13 = outp_c7;
	L_13.x = (L_uc8 + outp_c7.x);
	outp = L_13;
	
}

