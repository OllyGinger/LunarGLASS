
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %f = alloca float
  %constructed = alloca <4 x float>
  %param = alloca <4 x float>
  %color = alloca <4 x float>
  %param1 = load <4 x float>* @BaseColor
  store <4 x float> %param1, <4 x float>* %param
  %0 = call float @"foo(vf4;"(<4 x float>* %param)
  %1 = load <4 x float>* %constructed
  %2 = insertelement <4 x float> undef, float %0, i32 0, !gla.precision !8
  %3 = insertelement <4 x float> %2, float %0, i32 1, !gla.precision !8
  %4 = insertelement <4 x float> %3, float %0, i32 2, !gla.precision !8
  %color2 = insertelement <4 x float> %4, float %0, i32 3, !gla.precision !8
  store <4 x float> %color2, <4 x float>* %color
  call void @"bar("()
  %f3 = call float @"unreachableReturn("()
  store float %f3, float* %f
  %5 = load <4 x float>* %color
  %6 = load float* %f
  %7 = insertelement <4 x float> undef, float %6, i32 0, !gla.precision !8
  %8 = insertelement <4 x float> %7, float %6, i32 1, !gla.precision !8
  %9 = insertelement <4 x float> %8, float %6, i32 2, !gla.precision !8
  %10 = insertelement <4 x float> %9, float %6, i32 3, !gla.precision !8
  %gl_FragColor = fmul <4 x float> %5, %10, !gla.precision !8
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar("() #0 {
entry:
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc float @"unreachableReturn("() #0 {
entry:
  %dummyReturn = alloca float
  call void @"bar("()
  %0 = load float addrspace(2)* @d, !gla.uniform !5
  %1 = fcmp olt float %0, 0x4010CCCCC0000000
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  ret float 0x3FF3333340000000

post-return:                                      ; No predecessors!
  br label %ifmerge

else:                                             ; preds = %entry
  ret float 4.500000e+00

post-return1:                                     ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %post-return1, %post-return
  %2 = load float* %dummyReturn
  ret float %2
}

; Function Attrs: alwaysinline
define internal fastcc float @"foo(vf4;"(<4 x float>*) #0 {
entry:
  %1 = load <4 x float>* %0
  %2 = extractelement <4 x float> %1, i32 0, !gla.precision !8
  %3 = load <4 x float>* %0
  %4 = extractelement <4 x float> %3, i32 1, !gla.precision !8
  %5 = fadd float %2, %4, !gla.precision !8
  ret float %5

post-return:                                      ; No predecessors!
  unreachable
}

attributes #0 = { alwaysinline }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.outputs = !{!3}
!gla.uniforms = !{!5, !7}
!gla.noStaticUse = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null, i32 1}
!3 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 2, i32 1025, null, i32 0}
!5 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 2, i32 1024, null}
!7 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !6}
!8 = metadata !{i32 2}


Bottom IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %param1 = load <4 x float>* @BaseColor, align 16
  %0 = extractelement <4 x float> %param1, i32 0, !gla.precision !8
  %1 = extractelement <4 x float> %param1, i32 1, !gla.precision !8
  %2 = fadd float %0, %1, !gla.precision !8
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %2, <4 x i32> zeroinitializer)
  %4 = load float addrspace(2)* @d, align 4, !gla.uniform !5
  %5 = fcmp olt float %4, 0x4010CCCCC0000000
  %. = select i1 %5, float 0x3FF3333340000000, float 4.500000e+00
  %6 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %., <4 x i32> zeroinitializer)
  %gl_FragColor = fmul <4 x float> %3, %6, !gla.precision !8
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.outputs = !{!3}
!gla.uniforms = !{!5, !7}
!gla.noStaticUse = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null, i32 1}
!3 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 2, i32 1025, null, i32 0}
!5 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 2, i32 1024, null}
!7 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !6}
!8 = metadata !{i32 2}
#version 100
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform mediump float d;
uniform mediump vec4 bigColor;
varying mediump vec4 BaseColor;
const float C_4d2 = 4.2;
const float C_1d2 = 1.2;
const float C_4d5 = 4.5;

void main()
{
	vec4 L_1 = vec4((BaseColor.x + BaseColor.y));
	vec4 L_2 = vec4(((d < C_4d2) ? C_1d2 : C_4d5));
	gl_FragColor = (L_1 * L_2);
	
}

#version 100
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform mediump float d;
uniform mediump vec4 bigColor;
varying mediump vec4 BaseColor;
const float C_4d2 = 4.2;
const float C_1d2 = 1.2;
const float C_4d5 = 4.5;

void main()
{
	vec4 L_1 = vec4((BaseColor.x + BaseColor.y));
	vec4 L_2 = vec4(((d < C_4d2) ? C_1d2 : C_4d5));
	gl_FragColor = (L_1 * L_2);
	
}

