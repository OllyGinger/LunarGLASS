
Top IR:
; ModuleID = 'Glslang'

%s3 = type { [12 x %s2], i32, float, %s1 }
%s2 = type { i32, float, %s1 }
%s1 = type { i32, float, %s0 }
%s0 = type { i32 }
%s00 = type { %s0 }

@foo3 = external addrspace(2) constant %s3
@lconst = internal constant %s1 { i32 0, float 1.000000e+00, %s0 zeroinitializer }
@lconst1 = internal constant [6 x float] zeroinitializer
@foo1 = external addrspace(2) constant %s1
@lconst2 = internal constant %s0 zeroinitializer
@lconst3 = internal constant %s00 zeroinitializer
@coord = global <2 x float> zeroinitializer
@foo0 = external addrspace(2) constant %s0
@lconst4 = internal constant [6 x float] [float 0.000000e+00, float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00]
@foo00 = external addrspace(2) constant %s00
@gl_FragColor = global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32
@foo2 = external addrspace(2) constant %s2

define fastcc void @main() {
entry:
  %constructed = alloca %s1
  %locals00 = alloca %s00
  %locals0 = alloca %s0
  %locals1Array = alloca [10 x %s1]
  %fArray = alloca [6 x float]
  %locals2 = alloca %s2
  %0 = load i32 addrspace(2)* getelementptr inbounds (%s3 addrspace(2)* @foo3, i32 0, i32 0, i32 9, i32 0), !gla.uniform !1
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = getelementptr %s2* %locals2, i32 0, i32 1
  store float 1.000000e+00, float* %2
  %3 = load %s1* @lconst
  %4 = getelementptr %s2* %locals2, i32 0, i32 2
  store %s1 %3, %s1* %4
  %fArray1 = load [6 x float]* @lconst1
  store [6 x float] %fArray1, [6 x float]* %fArray
  %5 = load %s1 addrspace(2)* @foo1, !gla.uniform !9
  %6 = getelementptr [10 x %s1]* %locals1Array, i32 0, i32 6
  store %s1 %5, %s1* %6
  %locals02 = load %s0* @lconst2
  store %s0 %locals02, %s0* %locals0
  %locals003 = load %s00* @lconst3
  store %s00 %locals003, %s00* %locals00
  br label %ifmerge

else:                                             ; preds = %entry
  %7 = load <2 x float>* @coord
  %8 = extractelement <2 x float> %7, i32 0
  %9 = getelementptr %s2* %locals2, i32 0, i32 1
  store float %8, float* %9
  %10 = load <2 x float>* @coord
  %11 = extractelement <2 x float> %10, i32 1
  %12 = load %s0 addrspace(2)* @foo0, !gla.uniform !10
  %13 = getelementptr %s1* %constructed, i32 0, i32 0
  store i32 1, i32* %13
  %14 = getelementptr %s1* %constructed, i32 0, i32 1
  store float %11, float* %14
  %15 = getelementptr %s1* %constructed, i32 0, i32 2
  store %s0 %12, %s0* %15
  %16 = load %s1* %constructed
  %17 = getelementptr %s2* %locals2, i32 0, i32 2
  store %s1 %16, %s1* %17
  %fArray4 = load [6 x float]* @lconst4
  store [6 x float] %fArray4, [6 x float]* %fArray
  %18 = getelementptr %s2* %locals2, i32 0, i32 2
  %19 = load %s1* %18
  %20 = getelementptr [10 x %s1]* %locals1Array, i32 0, i32 6
  store %s1 %19, %s1* %20
  %locals05 = load %s0 addrspace(2)* getelementptr inbounds (%s1 addrspace(2)* @foo1, i32 0, i32 2), !gla.uniform !9
  store %s0 %locals05, %s0* %locals0
  %locals006 = load %s00 addrspace(2)* @foo00, !gla.uniform !11
  store %s00 %locals006, %s00* %locals00
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %21 = getelementptr %s0* %locals0, i32 0, i32 0
  %22 = load i32* %21
  %23 = icmp sgt i32 %22, 5
  br i1 %23, label %then7, label %ifmerge9

then7:                                            ; preds = %ifmerge
  %24 = getelementptr %s00* %locals00, i32 0, i32 0
  %locals08 = load %s0* %24
  store %s0 %locals08, %s0* %locals0
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge, %then7
  %25 = getelementptr %s0* %locals0, i32 0, i32 0
  %26 = load i32* %25
  %27 = sitofp i32 %26 to float
  %28 = getelementptr [10 x %s1]* %locals1Array, i32 0, i32 6, i32 1
  %29 = load float* %28
  %30 = fadd float %27, %29
  %31 = getelementptr [6 x float]* %fArray, i32 0, i32 3
  %32 = load float* %31
  %33 = fadd float %30, %32
  %34 = getelementptr %s2* %locals2, i32 0, i32 2, i32 1
  %35 = load float* %34
  %36 = fadd float %33, %35
  %37 = load i32 addrspace(1)* @sampler, !gla.uniform !13
  %38 = load <2 x float>* @coord
  %39 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %37, i32 0, <2 x float> %38)
  %40 = insertelement <4 x float> undef, float %36, i32 0
  %41 = insertelement <4 x float> %40, float %36, i32 1
  %42 = insertelement <4 x float> %41, float %36, i32 2
  %43 = insertelement <4 x float> %42, float %36, i32 3
  %gl_FragColor = fmul <4 x float> %43, %39
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge9
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !9, !10, !11, !13, !16}
!gla.inputs = !{!17}
!gla.outputs = !{!19}
!gla.noStaticUse = !{!16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"foo3", i32 12, %s3* @foo3_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 4, i32 0, i32 1024, null}
!3 = metadata !{metadata !"s3", metadata !2, metadata !"s2_1", metadata !4, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!4 = metadata !{metadata !"s2", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!5 = metadata !{metadata !"", metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"s1", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s0_1", metadata !8}
!8 = metadata !{metadata !"s0", metadata !2, metadata !"i", metadata !5}
!9 = metadata !{metadata !"foo1", i32 12, %s1* @foo1_typeProxy, metadata !2, metadata !7}
!10 = metadata !{metadata !"foo0", i32 12, %s0* @foo0_typeProxy, metadata !2, metadata !8}
!11 = metadata !{metadata !"foo00", i32 12, %s00* @foo00_typeProxy, metadata !2, metadata !12}
!12 = metadata !{metadata !"s00", metadata !2, metadata !"s0_0", metadata !8}
!13 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 0, i32 1024, metadata !15}
!15 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"foo2", i32 12, %s2* @foo2_typeProxy, metadata !2, metadata !4}
!17 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!19 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

%s3 = type { [12 x %s2], i32, float, %s1 }
%s2 = type { i32, float, %s1 }
%s1 = type { i32, float, %s0 }
%s0 = type { i32 }
%s00 = type { %s0 }

@foo3 = external addrspace(2) constant %s3
@foo1 = external addrspace(2) constant %s1
@coord = global <2 x float> zeroinitializer
@foo0 = external addrspace(2) constant %s0
@foo00 = external addrspace(2) constant %s00
@gl_FragColor = global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr %s3 addrspace(2)* @foo3, i32 0, i32 0, i32 9, i32 0
  %0 = load i32 addrspace(2)* %gla_constGEP, align 4, !gla.uniform !1
  %1 = icmp sgt i32 %0, 0
  %gla_constGEP48 = getelementptr %s1 addrspace(2)* @foo1, i32 0, i32 1
  %2 = load float addrspace(2)* %gla_constGEP48, align 4
  %3 = load <2 x float>* @coord, align 8
  %4 = extractelement <2 x float> %3, i32 1
  %gla_constGEP49 = getelementptr %s1 addrspace(2)* @foo1, i32 0, i32 2, i32 0
  %5 = load i32 addrspace(2)* %gla_constGEP49, align 4
  %gla_constGEP50 = getelementptr %s00 addrspace(2)* @foo00, i32 0, i32 0, i32 0
  %6 = load i32 addrspace(2)* %gla_constGEP50, align 4
  %select = select i1 %1, float 0.000000e+00, float 3.000000e+00
  %select44 = select i1 %1, i32 0, i32 %5
  %select45 = select i1 %1, i32 0, i32 %6
  %select46 = select i1 %1, float 1.000000e+00, float %4
  %select47 = select i1 %1, float %2, float %4
  %7 = icmp sgt i32 %select44, 5
  %locals00.0.0.0.locals0.0.0 = select i1 %7, i32 %select45, i32 %select44
  %8 = sitofp i32 %locals00.0.0.0.locals0.0.0 to float
  %9 = fadd float %select47, %8
  %10 = fadd float %select, %9
  %11 = fadd float %select46, %10
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %11, <4 x i32> zeroinitializer)
  %13 = load i32 addrspace(1)* @sampler, align 4, !gla.uniform !13
  %14 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %13, i32 0, <2 x float> %3)
  %gl_FragColor = fmul <4 x float> %14, %12
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !9, !10, !11, !13, !16}
!gla.inputs = !{!17}
!gla.outputs = !{!19}
!gla.noStaticUse = !{!16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"foo3", i32 12, %s3* @foo3_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 4, i32 0, i32 1024, null}
!3 = metadata !{metadata !"s3", metadata !2, metadata !"s2_1", metadata !4, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!4 = metadata !{metadata !"s2", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!5 = metadata !{metadata !"", metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"s1", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s0_1", metadata !8}
!8 = metadata !{metadata !"s0", metadata !2, metadata !"i", metadata !5}
!9 = metadata !{metadata !"foo1", i32 12, %s1* @foo1_typeProxy, metadata !2, metadata !7}
!10 = metadata !{metadata !"foo0", i32 12, %s0* @foo0_typeProxy, metadata !2, metadata !8}
!11 = metadata !{metadata !"foo00", i32 12, %s00* @foo00_typeProxy, metadata !2, metadata !12}
!12 = metadata !{metadata !"s00", metadata !2, metadata !"s0_0", metadata !8}
!13 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 0, i32 1024, metadata !15}
!15 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"foo2", i32 12, %s2* @foo2_typeProxy, metadata !2, metadata !4}
!17 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!19 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 130
// LunarGOO output
struct s0 {
	int i;
};
struct s1 {
	int i;
	float f;
	s0 s0_1;
};
struct s2 {
	int i;
	float f;
	s1 s1_1;
};
struct s3 {
	s2 s2_1[12];
	int i;
	float f;
	s1 s1_1;
};
struct s00 {
	s0 s0_0;
};
uniform s3 foo3;
uniform s1 foo1;
uniform s0 foo0;
uniform s00 foo00;
uniform sampler2D sampler;
uniform s2 foo2;
in vec2 coord;
const int C_0 = 0;
const float C_0d0 = 0.0;
const float C_3d0 = 3.0;
const float C_1d0 = 1.0;
const int C_5 = 5;

void main()
{
	bool H_vyfm0e = foo3.s2_1[9].i > C_0;
	int select_c1 = H_vyfm0e ? C_0 : foo1.s0_1.i;
	float H_5y1u8t = ((H_vyfm0e ? foo1.f : coord.y) + (float(((select_c1 > C_5) ? (H_vyfm0e ? C_0 : foo00.s0_0.i) : select_c1)))) + (H_vyfm0e ? C_0d0 : C_3d0);
	vec4 H_0k8q2q = texture(sampler, coord);
	gl_FragColor = (H_0k8q2q * vec4(((H_vyfm0e ? C_1d0 : coord.y) + H_5y1u8t)));
	
}

#version 130
// LunarGOO output
struct s0 {
	int i;
};
struct s1 {
	int i;
	float f;
	s0 s0_1;
};
struct s2 {
	int i;
	float f;
	s1 s1_1;
};
struct s3 {
	s2 s2_1[12];
	int i;
	float f;
	s1 s1_1;
};
struct s00 {
	s0 s0_0;
};
uniform s3 foo3;
uniform s1 foo1;
uniform s00 foo00;
uniform sampler2D sampler;
uniform s0 foo0;
uniform s2 foo2;
in vec2 coord;
const int C_0 = 0;
const int C_5 = 5;
const float C_0d0 = 0.0;
const float C_3d0 = 3.0;
const float C_1d0 = 1.0;

void main()
{
	bool H_vyfm_c1 = foo3.s2_1[9].i > C_0;
	int ternary_uc2 = H_vyfm_c1 ? C_0 : foo1.s0_1.i;
	float H_uc3 = ((H_vyfm_c1 ? foo1.f : coord.y) + (float(((ternary_uc2 > C_5) ? (H_vyfm_c1 ? C_0 : foo00.s0_0.i) : ternary_uc2)))) + (H_vyfm_c1 ? C_0d0 : C_3d0);
	vec4 H_uc4 = texture(sampler, coord);
	gl_FragColor = (H_uc4 * vec4(((H_vyfm_c1 ? C_1d0 : coord.y) + H_uc3)));
	
}

