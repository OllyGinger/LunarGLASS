
Top IR:
; ModuleID = 'Glslang'

%s3 = type { [12 x %s2], i32, float, %s1 }
%s2 = type { i32, float, %s1 }
%s1 = type { i32, float, %s0 }
%s0 = type { i32 }
%s00 = type { %s0 }

@foo3 = external addrspace(2) constant %s3
@foo1 = external addrspace(2) constant %s1
@coord = global <2 x float> zeroinitializer
@foo0 = external addrspace(2) constant %s0
@foo00 = external addrspace(2) constant %s00
@gl_FragColor = global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32
@foo2 = external addrspace(2) constant %s2

define fastcc void @main() {
entry:
  %constructed = alloca %s1
  %locals00 = alloca %s00
  %locals0 = alloca %s0
  %locals1Array = alloca [10 x %s1]
  %fArray = alloca [6 x float]
  %locals2 = alloca %s2
  %0 = load i32 addrspace(2)* getelementptr inbounds (%s3 addrspace(2)* @foo3, i32 0, i32 0, i32 9, i32 0), !gla.uniform !1
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = getelementptr %s2* %locals2, i32 0, i32 1
  store float 1.000000e+00, float* %2
  %3 = getelementptr %s2* %locals2, i32 0, i32 2
  store %s1 { i32 0, float 1.000000e+00, %s0 zeroinitializer }, %s1* %3
  store [6 x float] zeroinitializer, [6 x float]* %fArray
  %4 = load %s1 addrspace(2)* @foo1, !gla.uniform !9
  %5 = getelementptr [10 x %s1]* %locals1Array, i32 0, i32 6
  store %s1 %4, %s1* %5
  store %s0 zeroinitializer, %s0* %locals0
  store %s00 zeroinitializer, %s00* %locals00
  br label %ifmerge

else:                                             ; preds = %entry
  %6 = load <2 x float>* @coord
  %7 = extractelement <2 x float> %6, i32 0
  %8 = getelementptr %s2* %locals2, i32 0, i32 1
  store float %7, float* %8
  %9 = load <2 x float>* @coord
  %10 = extractelement <2 x float> %9, i32 1
  %11 = load %s0 addrspace(2)* @foo0, !gla.uniform !10
  %12 = getelementptr %s1* %constructed, i32 0, i32 0
  store i32 1, i32* %12
  %13 = getelementptr %s1* %constructed, i32 0, i32 1
  store float %10, float* %13
  %14 = getelementptr %s1* %constructed, i32 0, i32 2
  store %s0 %11, %s0* %14
  %15 = load %s1* %constructed
  %16 = getelementptr %s2* %locals2, i32 0, i32 2
  store %s1 %15, %s1* %16
  store [6 x float] [float 0.000000e+00, float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00], [6 x float]* %fArray
  %17 = getelementptr %s2* %locals2, i32 0, i32 2
  %18 = load %s1* %17
  %19 = getelementptr [10 x %s1]* %locals1Array, i32 0, i32 6
  store %s1 %18, %s1* %19
  %locals01 = load %s0 addrspace(2)* getelementptr inbounds (%s1 addrspace(2)* @foo1, i32 0, i32 2), !gla.uniform !9
  store %s0 %locals01, %s0* %locals0
  %locals002 = load %s00 addrspace(2)* @foo00, !gla.uniform !11
  store %s00 %locals002, %s00* %locals00
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %20 = getelementptr %s0* %locals0, i32 0, i32 0
  %21 = load i32* %20
  %22 = icmp sgt i32 %21, 5
  br i1 %22, label %then3, label %ifmerge5

then3:                                            ; preds = %ifmerge
  %23 = getelementptr %s00* %locals00, i32 0, i32 0
  %locals04 = load %s0* %23
  store %s0 %locals04, %s0* %locals0
  br label %ifmerge5

ifmerge5:                                         ; preds = %ifmerge, %then3
  %24 = getelementptr %s0* %locals0, i32 0, i32 0
  %25 = load i32* %24
  %26 = sitofp i32 %25 to float
  %27 = getelementptr [10 x %s1]* %locals1Array, i32 0, i32 6, i32 1
  %28 = load float* %27
  %29 = fadd float %26, %28
  %30 = getelementptr [6 x float]* %fArray, i32 0, i32 3
  %31 = load float* %30
  %32 = fadd float %29, %31
  %33 = getelementptr %s2* %locals2, i32 0, i32 2, i32 1
  %34 = load float* %33
  %35 = fadd float %32, %34
  %36 = load i32 addrspace(1)* @sampler, !gla.uniform !13
  %37 = load <2 x float>* @coord
  %38 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %36, i32 0, <2 x float> %37)
  %39 = insertelement <4 x float> undef, float %35, i32 0
  %40 = insertelement <4 x float> %39, float %35, i32 1
  %41 = insertelement <4 x float> %40, float %35, i32 2
  %42 = insertelement <4 x float> %41, float %35, i32 3
  %gl_FragColor = fmul <4 x float> %42, %38
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge5
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !9, !10, !11, !13, !16}
!gla.inputs = !{!17}
!gla.outputs = !{!19}
!gla.noStaticUse = !{!16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"foo3", i32 12, %s3* @foo3_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 4, i32 0, i32 1024, null}
!3 = metadata !{metadata !"s3", metadata !2, metadata !"s2_1", metadata !4, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!4 = metadata !{metadata !"s2", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!5 = metadata !{metadata !"", metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"s1", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s0_1", metadata !8}
!8 = metadata !{metadata !"s0", metadata !2, metadata !"i", metadata !5}
!9 = metadata !{metadata !"foo1", i32 12, %s1* @foo1_typeProxy, metadata !2, metadata !7}
!10 = metadata !{metadata !"foo0", i32 12, %s0* @foo0_typeProxy, metadata !2, metadata !8}
!11 = metadata !{metadata !"foo00", i32 12, %s00* @foo00_typeProxy, metadata !2, metadata !12}
!12 = metadata !{metadata !"s00", metadata !2, metadata !"s0_0", metadata !8}
!13 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 0, i32 1024, metadata !15}
!15 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"foo2", i32 12, %s2* @foo2_typeProxy, metadata !2, metadata !4}
!17 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!19 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

%s3 = type { [12 x %s2], i32, float, %s1 }
%s2 = type { i32, float, %s1 }
%s1 = type { i32, float, %s0 }
%s0 = type { i32 }
%s00 = type { %s0 }

@foo3 = external addrspace(2) constant %s3
@foo1 = external addrspace(2) constant %s1
@coord = global <2 x float> zeroinitializer
@foo0 = external addrspace(2) constant %s0
@foo00 = external addrspace(2) constant %s00
@gl_FragColor = global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr %s3 addrspace(2)* @foo3, i32 0, i32 0, i32 9, i32 0
  %0 = load i32 addrspace(2)* %gla_constGEP, align 4, !gla.uniform !1
  %1 = icmp sgt i32 %0, 0
  %gla_constGEP44 = getelementptr %s1 addrspace(2)* @foo1, i32 0, i32 1
  %2 = load float addrspace(2)* %gla_constGEP44, align 4
  %3 = load <2 x float>* @coord, align 8
  %4 = extractelement <2 x float> %3, i32 1
  %gla_constGEP45 = getelementptr %s1 addrspace(2)* @foo1, i32 0, i32 2, i32 0
  %5 = load i32 addrspace(2)* %gla_constGEP45, align 4
  %gla_constGEP46 = getelementptr %s00 addrspace(2)* @foo00, i32 0, i32 0, i32 0
  %6 = load i32 addrspace(2)* %gla_constGEP46, align 4
  %select = select i1 %1, float 0.000000e+00, float 3.000000e+00
  %select40 = select i1 %1, i32 0, i32 %5
  %select41 = select i1 %1, i32 0, i32 %6
  %select42 = select i1 %1, float 1.000000e+00, float %4
  %select43 = select i1 %1, float %2, float %4
  %7 = icmp sgt i32 %select40, 5
  %locals00.0.0.0.locals0.0.0 = select i1 %7, i32 %select41, i32 %select40
  %8 = sitofp i32 %locals00.0.0.0.locals0.0.0 to float
  %9 = fadd float %select43, %8
  %10 = fadd float %select, %9
  %11 = fadd float %select42, %10
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %11, <4 x i32> zeroinitializer)
  %13 = load i32 addrspace(1)* @sampler, align 4, !gla.uniform !13
  %14 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %13, i32 0, <2 x float> %3)
  %gl_FragColor = fmul <4 x float> %12, %14
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !9, !10, !11, !13, !16}
!gla.inputs = !{!17}
!gla.outputs = !{!19}
!gla.noStaticUse = !{!16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"foo3", i32 12, %s3* @foo3_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 4, i32 0, i32 1024, null}
!3 = metadata !{metadata !"s3", metadata !2, metadata !"s2_1", metadata !4, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!4 = metadata !{metadata !"s2", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s1_1", metadata !7}
!5 = metadata !{metadata !"", metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"s1", metadata !2, metadata !"i", metadata !5, metadata !"f", metadata !5, metadata !"s0_1", metadata !8}
!8 = metadata !{metadata !"s0", metadata !2, metadata !"i", metadata !5}
!9 = metadata !{metadata !"foo1", i32 12, %s1* @foo1_typeProxy, metadata !2, metadata !7}
!10 = metadata !{metadata !"foo0", i32 12, %s0* @foo0_typeProxy, metadata !2, metadata !8}
!11 = metadata !{metadata !"foo00", i32 12, %s00* @foo00_typeProxy, metadata !2, metadata !12}
!12 = metadata !{metadata !"s00", metadata !2, metadata !"s0_0", metadata !8}
!13 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 0, i32 1024, metadata !15}
!15 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"foo2", i32 12, %s2* @foo2_typeProxy, metadata !2, metadata !4}
!17 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!19 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 130
// LunarGOO output
struct s0 {
	int i;
};
struct s1 {
	int i;
	float f;
	s0 s0_1;
};
struct s2 {
	int i;
	float f;
	s1 s1_1;
};
struct s3 {
	s2 s2_1[12];
	int i;
	float f;
	s1 s1_1;
};
struct s00 {
	s0 s0_0;
};
uniform s3 foo3;
uniform s1 foo1;
uniform s0 foo0;
uniform s00 foo00;
uniform sampler2D sampler;
uniform s2 foo2;
in vec2 coord;
const int L_2 = 0;
const float L_4 = 0.0;
const float L_5 = 3.0;
const float L_9 = 1.0;
const int L_c = 5;

void main()
{
	bool L_1 = foo3.s2_1[9].i > L_2;
	float select_c1 = L_1 ? L_4 : L_5;
	int select_c2 = L_1 ? L_2 : foo1.s0_1.i;
	int select_c3 = L_1 ? L_2 : foo00.s0_0.i;
	float select_c4 = L_1 ? L_9 : coord.y;
	float select_c5 = L_1 ? foo1.f : coord.y;
	bool L_b = select_c2 > L_c;
	int locals_c6 = L_b ? select_c3 : select_c2;
	float L_e = float(locals_c6);
	float L_f = L_e + select_c5;
	float L_10 = L_f + select_c1;
	float L_11 = L_10 + select_c4;
	vec4 L_12 = vec4(L_11);
	vec4 L_13 = texture(sampler, coord);
	vec4 Ll_FragColor_c7 = L_12 * L_13;
	gl_FragColor = Ll_FragColor_c7;
	
}

#version 130
// LunarGOO output
struct s0 {
	int i;
};
struct s1 {
	int i;
	float f;
	s0 s0_1;
};
struct s2 {
	int i;
	float f;
	s1 s1_1;
};
struct s3 {
	s2 s2_1[12];
	int i;
	float f;
	s1 s1_1;
};
struct s00 {
	s0 s0_0;
};
uniform s3 foo3;
uniform s1 foo1;
uniform s00 foo00;
uniform sampler2D sampler;
uniform s0 foo0;
uniform s2 foo2;
in vec2 coord;
const int L_2 = 0;
const float L_4 = 0.0;
const float L_5 = 3.0;
const float L_9 = 1.0;
const int L_c = 5;

void main()
{
	bool L_uc1 = foo3.s2_1[9].i > L_2;
	float L_3 = L_uc1 ? L_4 : L_5;
	int ternary_c2 = L_uc1 ? L_2 : foo1.s0_1.i;
	int ternary_c3 = L_uc1 ? L_2 : foo00.s0_0.i;
	float select_c4 = L_uc1 ? L_9 : coord.y;
	float select_c5 = L_uc1 ? foo1.f : coord.y;
	bool L_b_c6 = ternary_c2 > L_c;
	int ternary_c7 = L_b_c6 ? ternary_c3 : ternary_c2;
	float L_e_c8 = float(ternary_c7);
	float L_f_c9 = L_e_c8 + select_c5;
	float L_uc10 = L_3 + L_f_c9;
	float L_uc11 = L_uc10 + select_c4;
	vec4 L_12 = vec4(L_uc11);
	vec4 L_uc12 = texture(sampler, coord);
	vec4 Ll_FragColor_c13 = L_12 * L_uc12;
	gl_FragColor = Ll_FragColor_c13;
	
}

