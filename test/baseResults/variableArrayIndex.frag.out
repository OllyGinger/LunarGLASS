
Top IR:
; ModuleID = 'Glslang'

%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct1 = type { i32, float }

@Count = external addrspace(2) constant i32
@foo3 = external addrspace(2) constant %lunarStruct3
@foo2 = external addrspace(2) constant [5 x %lunarStruct2]
@foo = external addrspace(2) constant %lunarStruct1
@gl_FragColor = global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32
@coord = global <2 x float> zeroinitializer

define fastcc void @main() {
entry:
  %gl_FragColor9 = alloca <4 x float>
  %constructed7 = alloca [3 x <2 x float>]
  %constructed6 = alloca <2 x float>
  %constructed = alloca [3 x <2 x float>]
  %scale = alloca float
  %iLocal = alloca i32
  %iLocal1 = load i32 addrspace(2)* @Count, !gla.uniform !1
  store i32 %iLocal1, i32* %iLocal
  %0 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 1, i32 0), !gla.uniform !3
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct1 addrspace(2)* @foo, i32 0, i32 0), !gla.uniform !10
  %3 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 %2, i32 0
  %4 = load i32 addrspace(2)* %3, !gla.uniform !3
  %5 = add i32 %4, 2
  %6 = load i32* %iLocal
  %iLocal2 = add i32 %6, 1
  store i32 %iLocal2, i32* %iLocal
  %7 = add i32 %5, %iLocal2
  %8 = getelementptr [5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 %7, i32 2, i32 1
  %scale3 = load float addrspace(2)* %8, !gla.uniform !9
  store float %scale3, float* %scale
  br label %ifmerge

else:                                             ; preds = %entry
  %scale4 = load float addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1), !gla.uniform !3
  store float %scale4, float* %scale
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %9 = load float* %scale
  %10 = load i32 addrspace(1)* @sampler, !gla.uniform !11
  %11 = load <2 x float>* @coord
  %gl_FragColor = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %10, i32 0, <2 x float> %11)
  %12 = insertelement <4 x float> undef, float %9, i32 0
  %13 = insertelement <4 x float> %12, float %9, i32 1
  %14 = insertelement <4 x float> %13, float %9, i32 2
  %15 = insertelement <4 x float> %14, float %9, i32 3
  %gl_FragColor5 = fmul <4 x float> %15, %gl_FragColor
  store <4 x float> %gl_FragColor5, <4 x float>* @gl_FragColor
  %16 = load <2 x float>* @coord
  %17 = load float* %scale
  %18 = load <2 x float>* %constructed6
  %19 = insertelement <2 x float> undef, float %17, i32 0
  %20 = insertelement <2 x float> %19, float %17, i32 1
  %21 = getelementptr [3 x <2 x float>]* %constructed7, i32 0, i32 0
  store <2 x float> %16, <2 x float>* %21
  %22 = getelementptr [3 x <2 x float>]* %constructed7, i32 0, i32 1
  store <2 x float> %20, <2 x float>* %22
  %23 = getelementptr [3 x <2 x float>]* %constructed7, i32 0, i32 2
  store <2 x float> <float 1.000000e+00, float 2.000000e+00>, <2 x float>* %23
  %constructed8 = load [3 x <2 x float>]* %constructed7
  store [3 x <2 x float>] %constructed8, [3 x <2 x float>]* %constructed
  %24 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct1 addrspace(2)* @foo, i32 0, i32 0), !gla.uniform !10
  %25 = getelementptr [3 x <2 x float>]* %constructed, i32 0, i32 %24
  %26 = load <2 x float>* %25
  %27 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct1 addrspace(2)* @foo, i32 0, i32 0), !gla.uniform !10
  %28 = getelementptr [3 x <2 x float>]* %constructed, i32 0, i32 %27
  %29 = load <2 x float>* %28
  %30 = load <4 x float>* %gl_FragColor9
  %31 = extractelement <2 x float> %26, i32 0
  %32 = insertelement <4 x float> %30, float %31, i32 0
  %33 = extractelement <2 x float> %26, i32 1
  %34 = insertelement <4 x float> %32, float %33, i32 1
  %35 = extractelement <2 x float> %29, i32 0
  %36 = insertelement <4 x float> %34, float %35, i32 2
  %37 = extractelement <2 x float> %29, i32 1
  %38 = insertelement <4 x float> %36, float %37, i32 3
  %39 = load <4 x float>* @gl_FragColor
  %gl_FragColor10 = fadd <4 x float> %39, %38
  store <4 x float> %gl_FragColor10, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !9, !10, !11}
!gla.outputs = !{!14}
!gla.inputs = !{!16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"foo3", i32 12, %lunarStruct3* @foo3_typeProxy, metadata !4, metadata !5}
!4 = metadata !{i32 4, i32 0, i32 1024, null}
!5 = metadata !{metadata !"lunarStruct3", metadata !4, metadata !"s2_1", metadata !6, metadata !"i", metadata !7, metadata !"f", metadata !7, metadata !"s1_1", metadata !8}
!6 = metadata !{metadata !"lunarStruct2", metadata !4, metadata !"i", metadata !7, metadata !"f", metadata !7, metadata !"s1_1", metadata !8}
!7 = metadata !{metadata !"", metadata !2}
!8 = metadata !{metadata !"lunarStruct1", metadata !4, metadata !"i", metadata !7, metadata !"f", metadata !7}
!9 = metadata !{metadata !"foo2", i32 12, [5 x %lunarStruct2]* @foo2_typeProxy, metadata !4, metadata !6}
!10 = metadata !{metadata !"foo", i32 12, %lunarStruct1* @foo_typeProxy, metadata !4, metadata !8}
!11 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !12}
!12 = metadata !{i32 5, i32 0, i32 1024, metadata !13}
!13 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!14 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !15}
!15 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!16 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !17}
!17 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}


Bottom IR:
; ModuleID = 'Glslang'

%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct1 = type { i32, float }

@Count = external addrspace(2) constant i32
@foo3 = external addrspace(2) constant %lunarStruct3
@foo2 = external addrspace(2) constant [5 x %lunarStruct2]
@foo = external addrspace(2) constant %lunarStruct1
@gl_FragColor = global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32
@coord = global <2 x float> zeroinitializer
@gla_globalAgg = internal global [3 x <2 x float>] undef

define fastcc void @main() {
entry:
  %constructed = alloca [3 x <2 x float>], align 8
  %gla_constGEP = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 1, i32 0
  %0 = load i32 addrspace(2)* %gla_constGEP, align 4, !gla.uniform !3
  %1 = icmp sgt i32 %0, 0
  %iLocal1 = load i32 addrspace(2)* @Count, align 4, !gla.uniform !1
  %gla_constGEP15 = getelementptr %lunarStruct1 addrspace(2)* @foo, i32 0, i32 0
  %2 = load i32 addrspace(2)* %gla_constGEP15, align 4, !gla.uniform !10
  %3 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 %2, i32 0
  %4 = load i32 addrspace(2)* %3, align 4, !gla.uniform !3
  %iLocal2 = add i32 %iLocal1, 3
  %5 = add i32 %iLocal2, %4
  %6 = getelementptr [5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 %5, i32 2, i32 1
  %gla_constGEP16 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1
  %select = select i1 %1, float addrspace(2)* %6, float addrspace(2)* %gla_constGEP16
  %scale.0 = load float addrspace(2)* %select, align 4
  %7 = call <2 x float> @llvm.gla.fSwizzle.v2f32.f32.v2i32(float %scale.0, <2 x i32> zeroinitializer)
  %8 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %scale.0, <4 x i32> zeroinitializer)
  %9 = load i32 addrspace(1)* @sampler, align 4, !gla.uniform !11
  %10 = load <2 x float>* @coord, align 8
  %gl_FragColor = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %9, i32 0, <2 x float> %10)
  %gl_FragColor5 = fmul <4 x float> %gl_FragColor, %8
  store <4 x float> %gl_FragColor5, <4 x float>* @gl_FragColor, align 16
  %aggregate = load [3 x <2 x float>]* @gla_globalAgg
  %insert = insertvalue [3 x <2 x float>] %aggregate, <2 x float> %10, 0
  %insert12 = insertvalue [3 x <2 x float>] %insert, <2 x float> %7, 1
  %insert14 = insertvalue [3 x <2 x float>] %insert12, <2 x float> <float 1.000000e+00, float 2.000000e+00>, 2
  store [3 x <2 x float>] %insert14, [3 x <2 x float>]* %constructed, align 8
  %11 = getelementptr [3 x <2 x float>]* %constructed, i32 0, i32 %2
  %12 = load <2 x float>* %11, align 8
  %13 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v2f32.v4i32(<2 x float> %12, <4 x i32> <i32 0, i32 1, i32 0, i32 1>)
  %gl_FragColor10 = fadd <4 x float> %gl_FragColor5, %13
  store <4 x float> %gl_FragColor10, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fSwizzle.v2f32.f32.v2i32(float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.v2f32.v4i32(<2 x float>, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !9, !10, !11}
!gla.outputs = !{!14}
!gla.inputs = !{!16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"foo3", i32 12, %lunarStruct3* @foo3_typeProxy, metadata !4, metadata !5}
!4 = metadata !{i32 4, i32 0, i32 1024, null}
!5 = metadata !{metadata !"lunarStruct3", metadata !4, metadata !"s2_1", metadata !6, metadata !"i", metadata !7, metadata !"f", metadata !7, metadata !"s1_1", metadata !8}
!6 = metadata !{metadata !"lunarStruct2", metadata !4, metadata !"i", metadata !7, metadata !"f", metadata !7, metadata !"s1_1", metadata !8}
!7 = metadata !{metadata !"", metadata !2}
!8 = metadata !{metadata !"lunarStruct1", metadata !4, metadata !"i", metadata !7, metadata !"f", metadata !7}
!9 = metadata !{metadata !"foo2", i32 12, [5 x %lunarStruct2]* @foo2_typeProxy, metadata !4, metadata !6}
!10 = metadata !{metadata !"foo", i32 12, %lunarStruct1* @foo_typeProxy, metadata !4, metadata !8}
!11 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !12}
!12 = metadata !{i32 5, i32 0, i32 1024, metadata !13}
!13 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!14 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !15}
!15 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!16 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_typeProxy, metadata !17}
!17 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
#version 130
// LunarGOO output
struct lunarStruct1 {
	int i;
	float f;
};
struct lunarStruct2 {
	int i;
	float f;
	lunarStruct1 s1_1;
};
struct lunarStruct3 {
	lunarStruct2 s2_1[3];
	int i;
	float f;
	lunarStruct1 s1_1;
};
uniform int Count;
uniform lunarStruct3 foo3;
uniform lunarStruct2 foo2[5];
uniform lunarStruct1 foo;
uniform sampler2D sampler;
in vec2 coord;
vec2 gla_globalAgg[3];
const int C_0 = 0;
const int C_3 = 3;
const vec2 C_7vuc471 = vec2(1.0, 2.0);

void main()
{
	vec2[3] constructed;
	bool H_jntasm = foo3.s2_1[1].i > C_0;
	int iLocal = Count + C_3;
	int H_m08wui = foo3.s2_1[foo.i].i + iLocal;
	float select = H_jntasm ? foo2[H_m08wui].s1_1.f : foo3.s2_1[0].s1_1.f;
	vec2 H_2md4p11 = vec2(select);
	vec4 H_c1z5nn = vec4(select);
	vec4 Ll_FragColor1 = texture(sampler, coord);
	vec4 Ll_FragColor2 = H_c1z5nn * Ll_FragColor1;
	gl_FragColor = Ll_FragColor2;
	gla_globalAgg[0] = coord;
	gla_globalAgg[1] = H_2md4p11;
	gla_globalAgg[2] = C_7vuc471;
	vec4 Ll_FragColor3 = Ll_FragColor2 + gla_globalAgg[foo.i].xyxy;
	gl_FragColor = Ll_FragColor3;
	
}

#version 130
// LunarGOO output
struct lunarStruct1 {
	int i;
	float f;
};
struct lunarStruct2 {
	int i;
	float f;
	lunarStruct1 s1_1;
};
struct lunarStruct3 {
	lunarStruct2 s2_1[3];
	int i;
	float f;
	lunarStruct1 s1_1;
};
uniform lunarStruct3 foo3;
uniform int Count;
uniform lunarStruct1 foo;
uniform lunarStruct2 foo2[5];
uniform sampler2D sampler;
in vec2 coord;
vec2 gla_globalAgg[3];
const int C_0 = 0;
const int C_3 = 3;
const vec2 C_7vuc471 = vec2(1.0, 2.0);

void main()
{
	bool H_jntasm = foo3.s2_1[1].i > C_0;
	int iLocal = Count + C_3;
	int H_m08wui = foo3.s2_1[foo.i].i + iLocal;
	float select = H_jntasm ? foo2[H_m08wui].s1_1.f : foo3.s2_1[0].s1_1.f;
	vec4 H_c1z5nn = vec4(select);
	vec2 H_2md4p11 = vec2(select);
	vec4 Ll_FragColor = texture(sampler, coord);
	vec4 Ll_FragColor1 = H_c1z5nn * Ll_FragColor;
	gl_FragColor = Ll_FragColor1;
	gla_globalAgg[0] = coord;
	gla_globalAgg[1] = H_2md4p11;
	gla_globalAgg[2] = C_7vuc471;
	vec4 Ll_FragColor2 = Ll_FragColor1 + gla_globalAgg[foo.i].xyxy;
	gl_FragColor = Ll_FragColor2;
	
}

