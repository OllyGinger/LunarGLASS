
Top IR:
; ModuleID = 'Glslang'

@v3 = global <3 x float> zeroinitializer
@m32 = external addrspace(2) constant [3 x <2 x float>]
@gl_Position = global <4 x float> zeroinitializer
@lconst = internal constant [4 x <4 x float>] [<4 x float> <float 3.000000e+00, float 6.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float> <float 9.000000e+00, float 1.200000e+01, float 0.000000e+00, float 0.000000e+00>, <4 x float> <float 1.500000e+01, float 1.800000e+01, float 0.000000e+00, float 0.000000e+00>, <4 x float> <float 2.100000e+01, float 2.400000e+01, float 0.000000e+00, float 0.000000e+00>]
@v4 = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %m42 = alloca [4 x <2 x float>]
  %m24 = alloca [2 x <4 x float>]
  %cv2 = alloca <2 x float>
  %0 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %1 = alloca <3 x float>
  %2 = alloca <3 x float>
  %3 = alloca [3 x <3 x float>]
  %4 = alloca <2 x float>
  %b = alloca <2 x float>
  %5 = alloca <2 x float>
  %m23 = alloca [2 x <3 x float>]
  %a = alloca <2 x float>
  %6 = load <3 x float>* @v3
  %7 = load [2 x <3 x float>]* %m23
  %8 = load <2 x float>* %5
  %column = extractvalue [2 x <3 x float>] %7, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %6, <3 x float> %column)
  %9 = insertelement <2 x float> %8, float %dotres, i32 0
  %column1 = extractvalue [2 x <3 x float>] %7, 1
  %dotres2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %6, <3 x float> %column1)
  %a3 = insertelement <2 x float> %9, float %dotres2, i32 1
  store <2 x float> %a3, <2 x float>* %a
  %10 = load [3 x <2 x float>] addrspace(2)* @m32, !gla.uniform !5
  %11 = load <3 x float>* @v3
  %12 = load <2 x float>* %4
  %component = extractelement <3 x float> %11, i32 0
  %component4 = extractelement <3 x float> %11, i32 1
  %component5 = extractelement <3 x float> %11, i32 2
  %column6 = extractvalue [3 x <2 x float>] %10, 0
  %element = extractelement <2 x float> %column6, i32 0
  %product = fmul float %element, %component
  %column7 = extractvalue [3 x <2 x float>] %10, 1
  %element8 = extractelement <2 x float> %column7, i32 0
  %product9 = fmul float %element8, %component4
  %dotProduct = fadd float %product, %product9
  %column10 = extractvalue [3 x <2 x float>] %10, 2
  %element11 = extractelement <2 x float> %column10, i32 0
  %product12 = fmul float %element11, %component5
  %dotProduct13 = fadd float %dotProduct, %product12
  %13 = insertelement <2 x float> %12, float %dotProduct13, i32 0
  %column14 = extractvalue [3 x <2 x float>] %10, 0
  %element15 = extractelement <2 x float> %column14, i32 1
  %product16 = fmul float %element15, %component
  %column17 = extractvalue [3 x <2 x float>] %10, 1
  %element18 = extractelement <2 x float> %column17, i32 1
  %product19 = fmul float %element18, %component4
  %dotProduct20 = fadd float %product16, %product19
  %column21 = extractvalue [3 x <2 x float>] %10, 2
  %element22 = extractelement <2 x float> %column21, i32 1
  %product23 = fmul float %element22, %component5
  %dotProduct24 = fadd float %dotProduct20, %product23
  %b25 = insertelement <2 x float> %13, float %dotProduct24, i32 1
  store <2 x float> %b25, <2 x float>* %b
  %14 = load [2 x <3 x float>]* %m23
  %15 = load [3 x <2 x float>] addrspace(2)* @m32, !gla.uniform !5
  %resultMatrix = load [3 x <3 x float>]* %3
  %tempColumn = load <3 x float>* %2
  %rightColumn = extractvalue [3 x <2 x float>] %15, 0
  %leftColumn = extractvalue [2 x <3 x float>] %14, 0
  %leftComp = extractelement <3 x float> %leftColumn, i32 0
  %rightComp = extractelement <2 x float> %rightColumn, i32 0
  %product26 = fmul float %leftComp, %rightComp
  %leftColumn27 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp28 = extractelement <3 x float> %leftColumn27, i32 0
  %rightComp29 = extractelement <2 x float> %rightColumn, i32 1
  %product30 = fmul float %leftComp28, %rightComp29
  %dotProduct31 = fadd float %product26, %product30
  %column32 = insertelement <3 x float> %tempColumn, float %dotProduct31, i32 0
  %leftColumn33 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp34 = extractelement <3 x float> %leftColumn33, i32 1
  %rightComp35 = extractelement <2 x float> %rightColumn, i32 0
  %product36 = fmul float %leftComp34, %rightComp35
  %leftColumn37 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp38 = extractelement <3 x float> %leftColumn37, i32 1
  %rightComp39 = extractelement <2 x float> %rightColumn, i32 1
  %product40 = fmul float %leftComp38, %rightComp39
  %dotProduct41 = fadd float %product36, %product40
  %column42 = insertelement <3 x float> %column32, float %dotProduct41, i32 1
  %leftColumn43 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp44 = extractelement <3 x float> %leftColumn43, i32 2
  %rightComp45 = extractelement <2 x float> %rightColumn, i32 0
  %product46 = fmul float %leftComp44, %rightComp45
  %leftColumn47 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp48 = extractelement <3 x float> %leftColumn47, i32 2
  %rightComp49 = extractelement <2 x float> %rightColumn, i32 1
  %product50 = fmul float %leftComp48, %rightComp49
  %dotProduct51 = fadd float %product46, %product50
  %column52 = insertelement <3 x float> %column42, float %dotProduct51, i32 2
  %resultMatrix53 = insertvalue [3 x <3 x float>] %resultMatrix, <3 x float> %column52, 0
  %rightColumn54 = extractvalue [3 x <2 x float>] %15, 1
  %leftColumn55 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp56 = extractelement <3 x float> %leftColumn55, i32 0
  %rightComp57 = extractelement <2 x float> %rightColumn54, i32 0
  %product58 = fmul float %leftComp56, %rightComp57
  %leftColumn59 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp60 = extractelement <3 x float> %leftColumn59, i32 0
  %rightComp61 = extractelement <2 x float> %rightColumn54, i32 1
  %product62 = fmul float %leftComp60, %rightComp61
  %dotProduct63 = fadd float %product58, %product62
  %column64 = insertelement <3 x float> %column52, float %dotProduct63, i32 0
  %leftColumn65 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp66 = extractelement <3 x float> %leftColumn65, i32 1
  %rightComp67 = extractelement <2 x float> %rightColumn54, i32 0
  %product68 = fmul float %leftComp66, %rightComp67
  %leftColumn69 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp70 = extractelement <3 x float> %leftColumn69, i32 1
  %rightComp71 = extractelement <2 x float> %rightColumn54, i32 1
  %product72 = fmul float %leftComp70, %rightComp71
  %dotProduct73 = fadd float %product68, %product72
  %column74 = insertelement <3 x float> %column64, float %dotProduct73, i32 1
  %leftColumn75 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp76 = extractelement <3 x float> %leftColumn75, i32 2
  %rightComp77 = extractelement <2 x float> %rightColumn54, i32 0
  %product78 = fmul float %leftComp76, %rightComp77
  %leftColumn79 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp80 = extractelement <3 x float> %leftColumn79, i32 2
  %rightComp81 = extractelement <2 x float> %rightColumn54, i32 1
  %product82 = fmul float %leftComp80, %rightComp81
  %dotProduct83 = fadd float %product78, %product82
  %column84 = insertelement <3 x float> %column74, float %dotProduct83, i32 2
  %resultMatrix85 = insertvalue [3 x <3 x float>] %resultMatrix53, <3 x float> %column84, 1
  %rightColumn86 = extractvalue [3 x <2 x float>] %15, 2
  %leftColumn87 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp88 = extractelement <3 x float> %leftColumn87, i32 0
  %rightComp89 = extractelement <2 x float> %rightColumn86, i32 0
  %product90 = fmul float %leftComp88, %rightComp89
  %leftColumn91 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp92 = extractelement <3 x float> %leftColumn91, i32 0
  %rightComp93 = extractelement <2 x float> %rightColumn86, i32 1
  %product94 = fmul float %leftComp92, %rightComp93
  %dotProduct95 = fadd float %product90, %product94
  %column96 = insertelement <3 x float> %column84, float %dotProduct95, i32 0
  %leftColumn97 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp98 = extractelement <3 x float> %leftColumn97, i32 1
  %rightComp99 = extractelement <2 x float> %rightColumn86, i32 0
  %product100 = fmul float %leftComp98, %rightComp99
  %leftColumn101 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp102 = extractelement <3 x float> %leftColumn101, i32 1
  %rightComp103 = extractelement <2 x float> %rightColumn86, i32 1
  %product104 = fmul float %leftComp102, %rightComp103
  %dotProduct105 = fadd float %product100, %product104
  %column106 = insertelement <3 x float> %column96, float %dotProduct105, i32 1
  %leftColumn107 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp108 = extractelement <3 x float> %leftColumn107, i32 2
  %rightComp109 = extractelement <2 x float> %rightColumn86, i32 0
  %product110 = fmul float %leftComp108, %rightComp109
  %leftColumn111 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp112 = extractelement <3 x float> %leftColumn111, i32 2
  %rightComp113 = extractelement <2 x float> %rightColumn86, i32 1
  %product114 = fmul float %leftComp112, %rightComp113
  %dotProduct115 = fadd float %product110, %product114
  %column116 = insertelement <3 x float> %column106, float %dotProduct115, i32 2
  %resultMatrix117 = insertvalue [3 x <3 x float>] %resultMatrix85, <3 x float> %column116, 2
  %16 = load <3 x float>* @v3
  %17 = load <3 x float>* %1
  %component118 = extractelement <3 x float> %16, i32 0
  %component119 = extractelement <3 x float> %16, i32 1
  %component120 = extractelement <3 x float> %16, i32 2
  %column121 = extractvalue [3 x <3 x float>] %resultMatrix117, 0
  %element122 = extractelement <3 x float> %column121, i32 0
  %product123 = fmul float %element122, %component118
  %column124 = extractvalue [3 x <3 x float>] %resultMatrix117, 1
  %element125 = extractelement <3 x float> %column124, i32 0
  %product126 = fmul float %element125, %component119
  %dotProduct127 = fadd float %product123, %product126
  %column128 = extractvalue [3 x <3 x float>] %resultMatrix117, 2
  %element129 = extractelement <3 x float> %column128, i32 0
  %product130 = fmul float %element129, %component120
  %dotProduct131 = fadd float %dotProduct127, %product130
  %18 = insertelement <3 x float> %17, float %dotProduct131, i32 0
  %column132 = extractvalue [3 x <3 x float>] %resultMatrix117, 0
  %element133 = extractelement <3 x float> %column132, i32 1
  %product134 = fmul float %element133, %component118
  %column135 = extractvalue [3 x <3 x float>] %resultMatrix117, 1
  %element136 = extractelement <3 x float> %column135, i32 1
  %product137 = fmul float %element136, %component119
  %dotProduct138 = fadd float %product134, %product137
  %column139 = extractvalue [3 x <3 x float>] %resultMatrix117, 2
  %element140 = extractelement <3 x float> %column139, i32 1
  %product141 = fmul float %element140, %component120
  %dotProduct142 = fadd float %dotProduct138, %product141
  %19 = insertelement <3 x float> %18, float %dotProduct142, i32 1
  %column143 = extractvalue [3 x <3 x float>] %resultMatrix117, 0
  %element144 = extractelement <3 x float> %column143, i32 2
  %product145 = fmul float %element144, %component118
  %column146 = extractvalue [3 x <3 x float>] %resultMatrix117, 1
  %element147 = extractelement <3 x float> %column146, i32 2
  %product148 = fmul float %element147, %component119
  %dotProduct149 = fadd float %product145, %product148
  %column150 = extractvalue [3 x <3 x float>] %resultMatrix117, 2
  %element151 = extractelement <3 x float> %column150, i32 2
  %product152 = fmul float %element151, %component120
  %dotProduct153 = fadd float %dotProduct149, %product152
  %20 = insertelement <3 x float> %19, float %dotProduct153, i32 2
  %21 = load <4 x float>* %constructed
  %22 = extractelement <3 x float> %20, i32 0
  %23 = insertelement <4 x float> %21, float %22, i32 0
  %24 = extractelement <3 x float> %20, i32 1
  %25 = insertelement <4 x float> %23, float %24, i32 1
  %26 = extractelement <3 x float> %20, i32 2
  %27 = insertelement <4 x float> %25, float %26, i32 2
  %28 = insertelement <4 x float> %27, float 0.000000e+00, i32 3
  %29 = load [4 x <4 x float>]* @lconst
  %30 = load <4 x float>* @v4
  %31 = load <4 x float>* %0
  %component154 = extractelement <4 x float> %30, i32 0
  %component155 = extractelement <4 x float> %30, i32 1
  %component156 = extractelement <4 x float> %30, i32 2
  %component157 = extractelement <4 x float> %30, i32 3
  %column158 = extractvalue [4 x <4 x float>] %29, 0
  %element159 = extractelement <4 x float> %column158, i32 0
  %product160 = fmul float %element159, %component154
  %column161 = extractvalue [4 x <4 x float>] %29, 1
  %element162 = extractelement <4 x float> %column161, i32 0
  %product163 = fmul float %element162, %component155
  %dotProduct164 = fadd float %product160, %product163
  %column165 = extractvalue [4 x <4 x float>] %29, 2
  %element166 = extractelement <4 x float> %column165, i32 0
  %product167 = fmul float %element166, %component156
  %dotProduct168 = fadd float %dotProduct164, %product167
  %column169 = extractvalue [4 x <4 x float>] %29, 3
  %element170 = extractelement <4 x float> %column169, i32 0
  %product171 = fmul float %element170, %component157
  %dotProduct172 = fadd float %dotProduct168, %product171
  %32 = insertelement <4 x float> %31, float %dotProduct172, i32 0
  %column173 = extractvalue [4 x <4 x float>] %29, 0
  %element174 = extractelement <4 x float> %column173, i32 1
  %product175 = fmul float %element174, %component154
  %column176 = extractvalue [4 x <4 x float>] %29, 1
  %element177 = extractelement <4 x float> %column176, i32 1
  %product178 = fmul float %element177, %component155
  %dotProduct179 = fadd float %product175, %product178
  %column180 = extractvalue [4 x <4 x float>] %29, 2
  %element181 = extractelement <4 x float> %column180, i32 1
  %product182 = fmul float %element181, %component156
  %dotProduct183 = fadd float %dotProduct179, %product182
  %column184 = extractvalue [4 x <4 x float>] %29, 3
  %element185 = extractelement <4 x float> %column184, i32 1
  %product186 = fmul float %element185, %component157
  %dotProduct187 = fadd float %dotProduct183, %product186
  %33 = insertelement <4 x float> %32, float %dotProduct187, i32 1
  %column188 = extractvalue [4 x <4 x float>] %29, 0
  %element189 = extractelement <4 x float> %column188, i32 2
  %product190 = fmul float %element189, %component154
  %column191 = extractvalue [4 x <4 x float>] %29, 1
  %element192 = extractelement <4 x float> %column191, i32 2
  %product193 = fmul float %element192, %component155
  %dotProduct194 = fadd float %product190, %product193
  %column195 = extractvalue [4 x <4 x float>] %29, 2
  %element196 = extractelement <4 x float> %column195, i32 2
  %product197 = fmul float %element196, %component156
  %dotProduct198 = fadd float %dotProduct194, %product197
  %column199 = extractvalue [4 x <4 x float>] %29, 3
  %element200 = extractelement <4 x float> %column199, i32 2
  %product201 = fmul float %element200, %component157
  %dotProduct202 = fadd float %dotProduct198, %product201
  %34 = insertelement <4 x float> %33, float %dotProduct202, i32 2
  %column203 = extractvalue [4 x <4 x float>] %29, 0
  %element204 = extractelement <4 x float> %column203, i32 3
  %product205 = fmul float %element204, %component154
  %column206 = extractvalue [4 x <4 x float>] %29, 1
  %element207 = extractelement <4 x float> %column206, i32 3
  %product208 = fmul float %element207, %component155
  %dotProduct209 = fadd float %product205, %product208
  %column210 = extractvalue [4 x <4 x float>] %29, 2
  %element211 = extractelement <4 x float> %column210, i32 3
  %product212 = fmul float %element211, %component156
  %dotProduct213 = fadd float %dotProduct209, %product212
  %column214 = extractvalue [4 x <4 x float>] %29, 3
  %element215 = extractelement <4 x float> %column214, i32 3
  %product216 = fmul float %element215, %component157
  %dotProduct217 = fadd float %dotProduct213, %product216
  %35 = insertelement <4 x float> %34, float %dotProduct217, i32 3
  %36 = fadd <4 x float> %28, %35
  %37 = fadd <4 x float> %36, <float 5.000000e+01, float 1.100000e+02, float 1.700000e+02, float 2.300000e+02>
  %38 = fadd <4 x float> %37, <float 3.000000e+01, float 6.000000e+01, float 0.000000e+00, float 0.000000e+00>
  %gl_Position = fadd <4 x float> %38, <float 2.000000e+01, float 1.000000e+01, float 6.000000e+00, float 5.000000e+00>
  store <4 x float> %gl_Position, <4 x float>* @gl_Position
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5}
!gla.outputs = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"v3", i32 1, <3 x float>* @v3_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"v4", i32 1, <4 x float>* @v4_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!5 = metadata !{metadata !"m32", i32 12, [3 x <2 x float>]* @m32_typeProxy, metadata !6}
!6 = metadata !{i32 3, i32 0, i32 1024, null}
!7 = metadata !{metadata !"gl_Position", i32 8, <4 x float>* @gl_Position_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@v3 = global <3 x float> zeroinitializer
@m32 = external addrspace(2) constant [3 x <2 x float>]
@gl_Position = global <4 x float> zeroinitializer
@v4 = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load [3 x <2 x float>] addrspace(2)* @m32, align 8, !gla.uniform !5
  %rightColumn = extractvalue [3 x <2 x float>] %0, 0
  %rightComp = extractelement <2 x float> %rightColumn, i32 0
  %product26 = fmul float %rightComp, undef
  %rightComp29 = extractelement <2 x float> %rightColumn, i32 1
  %product30 = fmul float %rightComp29, undef
  %dotProduct31 = fadd float %product26, %product30
  %rightColumn54 = extractvalue [3 x <2 x float>] %0, 1
  %rightComp57 = extractelement <2 x float> %rightColumn54, i32 0
  %product58 = fmul float %rightComp57, undef
  %rightComp61 = extractelement <2 x float> %rightColumn54, i32 1
  %product62 = fmul float %rightComp61, undef
  %dotProduct63 = fadd float %product58, %product62
  %rightColumn86 = extractvalue [3 x <2 x float>] %0, 2
  %rightComp89 = extractelement <2 x float> %rightColumn86, i32 0
  %product90 = fmul float %rightComp89, undef
  %rightComp93 = extractelement <2 x float> %rightColumn86, i32 1
  %product94 = fmul float %rightComp93, undef
  %dotProduct95 = fadd float %product90, %product94
  %1 = load <3 x float>* @v3, align 16
  %component118 = extractelement <3 x float> %1, i32 0
  %component119 = extractelement <3 x float> %1, i32 1
  %component120 = extractelement <3 x float> %1, i32 2
  %product123 = fmul float %component118, %dotProduct31
  %product126 = fmul float %component119, %dotProduct63
  %dotProduct127 = fadd float %product123, %product126
  %product130 = fmul float %component120, %dotProduct95
  %dotProduct131 = fadd float %product130, %dotProduct127
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct131, i32 0, float %dotProduct131, i32 0, float %dotProduct131, i32 0, float 0.000000e+00, i32 0)
  %3 = load <4 x float>* @v4, align 16
  %component154 = extractelement <4 x float> %3, i32 0
  %component155 = extractelement <4 x float> %3, i32 1
  %component156 = extractelement <4 x float> %3, i32 2
  %component157 = extractelement <4 x float> %3, i32 3
  %product160 = fmul float %component154, 3.000000e+00
  %product163 = fmul float %component155, 9.000000e+00
  %dotProduct164 = fadd float %product160, %product163
  %product167 = fmul float %component156, 1.500000e+01
  %dotProduct168 = fadd float %product167, %dotProduct164
  %product171 = fmul float %component157, 2.100000e+01
  %dotProduct172 = fadd float %product171, %dotProduct168
  %product175 = fmul float %component154, 6.000000e+00
  %product178 = fmul float %component155, 1.200000e+01
  %dotProduct179 = fadd float %product175, %product178
  %product182 = fmul float %component156, 1.800000e+01
  %dotProduct183 = fadd float %product182, %dotProduct179
  %product186 = fmul float %component157, 2.400000e+01
  %dotProduct187 = fadd float %product186, %dotProduct183
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct172, i32 0, float %dotProduct187, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %5 = fadd <4 x float> %2, %4
  %6 = fadd <4 x float> %5, <float 5.000000e+01, float 1.100000e+02, float 1.700000e+02, float 2.300000e+02>
  %7 = fadd <4 x float> %6, <float 3.000000e+01, float 6.000000e+01, float 0.000000e+00, float 0.000000e+00>
  %gl_Position = fadd <4 x float> %7, <float 2.000000e+01, float 1.000000e+01, float 6.000000e+00, float 5.000000e+00>
  store <4 x float> %gl_Position, <4 x float>* @gl_Position, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5}
!gla.outputs = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"v3", i32 1, <3 x float>* @v3_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"v4", i32 1, <4 x float>* @v4_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!5 = metadata !{metadata !"m32", i32 12, [3 x <2 x float>]* @m32_typeProxy, metadata !6}
!6 = metadata !{i32 3, i32 0, i32 1024, null}
!7 = metadata !{metadata !"gl_Position", i32 8, <4 x float>* @gl_Position_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 120
// LunarGOO output
uniform mat3x2 m32;
attribute vec3 v3;
attribute vec4 v4;
const float C_0d0 = 0.0;
const float C_3d0 = 3.0;
const float C_9d0 = 9.0;
const float C_15d0 = 15.0;
const float C_21d0 = 21.0;
const float C_6d0 = 6.0;
const float C_12d0 = 12.0;
const float C_18d0 = 18.0;
const float C_24d0 = 24.0;
const vec4 C_ix7g97 = vec4(50.0, 110.0, 170.0, 230.0);
const vec4 C_n4w2t3 = vec4(30.0, 60.0, 0.0, 0.0);
const vec4 C_uly6d21 = vec4(20.0, 10.0, 6.0, 5.0);

void main()
{
	float product_c1 = m32[0].x * C_0d0;
	float product_c2 = C_0d0 * m32[0].y;
	float dotProduct_c3 = product_c1 + product_c2;
	float product_c4 = C_0d0 * m32[1].x;
	float product_c5 = C_0d0 * m32[1].y;
	float dotProduct_c6 = product_c4 + product_c5;
	float product_c7 = C_0d0 * m32[2].x;
	float product_c8 = C_0d0 * m32[2].y;
	float dotProduct_c9 = product_c7 + product_c8;
	float product_c10 = dotProduct_c3 * v3.x;
	float product_c11 = dotProduct_c6 * v3.y;
	float dotProduct_c12 = product_c10 + product_c11;
	float product_c13 = dotProduct_c9 * v3.z;
	float dotProduct_c14 = dotProduct_c12 + product_c13;
	vec4 H_d95d8m = vec4(dotProduct_c14, dotProduct_c14, dotProduct_c14, C_0d0);
	float product_c15 = v4.x * C_3d0;
	float product_c16 = v4.y * C_9d0;
	float dotProduct_c17 = product_c15 + product_c16;
	float product_c18 = v4.z * C_15d0;
	float dotProduct_c19 = dotProduct_c17 + product_c18;
	float product_c20 = v4.w * C_21d0;
	float dotProduct_c21 = dotProduct_c19 + product_c20;
	float product_c22 = v4.x * C_6d0;
	float product_c23 = v4.y * C_12d0;
	float dotProduct_c24 = product_c22 + product_c23;
	float product_c25 = v4.z * C_18d0;
	float dotProduct_c26 = dotProduct_c24 + product_c25;
	float product_c27 = v4.w * C_24d0;
	float dotProduct_c28 = dotProduct_c26 + product_c27;
	vec4 H_p6318a = vec4(dotProduct_c21, dotProduct_c28, C_0d0, C_0d0);
	vec4 H_g76j7p = H_d95d8m + H_p6318a;
	vec4 H_x91id = H_g76j7p + C_ix7g97;
	vec4 H_qsyf5y1 = H_x91id + C_n4w2t3;
	vec4 Ll_Position_c29 = H_qsyf5y1 + C_uly6d21;
	gl_Position = Ll_Position_c29;
	
}

#version 120
// LunarGOO output
uniform mat3x2 m32;
attribute vec3 v3;
attribute vec4 v4;
const float C_3d0 = 3.0;
const float C_9d0 = 9.0;
const float C_15d0 = 15.0;
const float C_21d0 = 21.0;
const float C_6d0 = 6.0;
const float C_12d0 = 12.0;
const float C_18d0 = 18.0;
const float C_24d0 = 24.0;
const float C_0d0 = 0.0;
const vec4 C_ix7g97 = vec4(50.0, 110.0, 170.0, 230.0);
const vec4 C_n4w2t3 = vec4(30.0, 60.0, 0.0, 0.0);
const vec4 C_uly6d21 = vec4(20.0, 10.0, 6.0, 5.0);

void main()
{
	float product_c1 = v4.x * C_3d0;
	float product_c2 = v4.y * C_9d0;
	float dotProduct_c3 = product_c1 + product_c2;
	float product_c4 = v4.z * C_15d0;
	float dotProduct_c5 = dotProduct_c3 + product_c4;
	float product_c6 = v4.w * C_21d0;
	float dotProduct_c7 = dotProduct_c5 + product_c6;
	float product_c8 = v4.x * C_6d0;
	float product_c9 = v4.y * C_12d0;
	float dotProduct_c10 = product_c8 + product_c9;
	float product_c11 = v4.z * C_18d0;
	float dotProduct_c12 = dotProduct_c10 + product_c11;
	float product_c13 = v4.w * C_24d0;
	float dotProduct_c14 = dotProduct_c12 + product_c13;
	vec4 H_a0y0071 = vec4(dotProduct_c7, dotProduct_c14, C_0d0, C_0d0);
	vec4 H_x_c15 = H_a0y0071 + C_ix7g97;
	vec4 H_qsyf_c16 = H_x_c15 + C_n4w2t3;
	vec4 Ll_Position_c17 = H_qsyf_c16 + C_uly6d21;
	gl_Position = Ll_Position_c17;
	
}

