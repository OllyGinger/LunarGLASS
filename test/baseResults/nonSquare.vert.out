
Top IR:
; ModuleID = 'Glslang'

@v3_shadow = internal global <3 x float> zeroinitializer
@m32 = external addrspace(2) constant [3 x <2 x float>]
@Position_shadow = internal global <4 x float> zeroinitializer
@v4_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %m42 = alloca [4 x <2 x float>]
  %m24 = alloca [2 x <4 x float>]
  %cv2 = alloca <2 x float>
  %0 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %1 = alloca <3 x float>
  %2 = alloca <3 x float>
  %3 = alloca [3 x <3 x float>]
  %4 = alloca <2 x float>
  %b = alloca <2 x float>
  %5 = alloca <2 x float>
  %m23 = alloca [2 x <3 x float>]
  %a = alloca <2 x float>
  %v3 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1024, i32 -1), !gla.input !1
  store <3 x float> %v3, <3 x float>* @v3_shadow
  %6 = load <3 x float>* @v3_shadow
  %7 = load [2 x <3 x float>]* %m23
  %8 = load <2 x float>* %5
  %column = extractvalue [2 x <3 x float>] %7, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %6, <3 x float> %column)
  %9 = insertelement <2 x float> %8, float %dotres, i32 0
  %column1 = extractvalue [2 x <3 x float>] %7, 1
  %dotres2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %6, <3 x float> %column1)
  %a3 = insertelement <2 x float> %9, float %dotres2, i32 1
  store <2 x float> %a3, <2 x float>* %a
  %10 = load [3 x <2 x float>] addrspace(2)* @m32, !gla.uniform !5
  %v34 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1024, i32 -1), !gla.input !1
  store <3 x float> %v34, <3 x float>* @v3_shadow
  %11 = load <3 x float>* @v3_shadow
  %12 = load <2 x float>* %4
  %component = extractelement <3 x float> %11, i32 0
  %component5 = extractelement <3 x float> %11, i32 1
  %component6 = extractelement <3 x float> %11, i32 2
  %column7 = extractvalue [3 x <2 x float>] %10, 0
  %element = extractelement <2 x float> %column7, i32 0
  %product = fmul float %element, %component
  %column8 = extractvalue [3 x <2 x float>] %10, 1
  %element9 = extractelement <2 x float> %column8, i32 0
  %product10 = fmul float %element9, %component5
  %dotProduct = fadd float %product, %product10
  %column11 = extractvalue [3 x <2 x float>] %10, 2
  %element12 = extractelement <2 x float> %column11, i32 0
  %product13 = fmul float %element12, %component6
  %dotProduct14 = fadd float %dotProduct, %product13
  %13 = insertelement <2 x float> %12, float %dotProduct14, i32 0
  %column15 = extractvalue [3 x <2 x float>] %10, 0
  %element16 = extractelement <2 x float> %column15, i32 1
  %product17 = fmul float %element16, %component
  %column18 = extractvalue [3 x <2 x float>] %10, 1
  %element19 = extractelement <2 x float> %column18, i32 1
  %product20 = fmul float %element19, %component5
  %dotProduct21 = fadd float %product17, %product20
  %column22 = extractvalue [3 x <2 x float>] %10, 2
  %element23 = extractelement <2 x float> %column22, i32 1
  %product24 = fmul float %element23, %component6
  %dotProduct25 = fadd float %dotProduct21, %product24
  %b26 = insertelement <2 x float> %13, float %dotProduct25, i32 1
  store <2 x float> %b26, <2 x float>* %b
  %14 = load [2 x <3 x float>]* %m23
  %15 = load [3 x <2 x float>] addrspace(2)* @m32, !gla.uniform !5
  %resultMatrix = load [3 x <3 x float>]* %3
  %tempColumn = load <3 x float>* %2
  %rightColumn = extractvalue [3 x <2 x float>] %15, 0
  %leftColumn = extractvalue [2 x <3 x float>] %14, 0
  %leftComp = extractelement <3 x float> %leftColumn, i32 0
  %rightComp = extractelement <2 x float> %rightColumn, i32 0
  %product27 = fmul float %leftComp, %rightComp
  %leftColumn28 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp29 = extractelement <3 x float> %leftColumn28, i32 0
  %rightComp30 = extractelement <2 x float> %rightColumn, i32 1
  %product31 = fmul float %leftComp29, %rightComp30
  %dotProduct32 = fadd float %product27, %product31
  %column33 = insertelement <3 x float> %tempColumn, float %dotProduct32, i32 0
  %leftColumn34 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp35 = extractelement <3 x float> %leftColumn34, i32 1
  %rightComp36 = extractelement <2 x float> %rightColumn, i32 0
  %product37 = fmul float %leftComp35, %rightComp36
  %leftColumn38 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp39 = extractelement <3 x float> %leftColumn38, i32 1
  %rightComp40 = extractelement <2 x float> %rightColumn, i32 1
  %product41 = fmul float %leftComp39, %rightComp40
  %dotProduct42 = fadd float %product37, %product41
  %column43 = insertelement <3 x float> %column33, float %dotProduct42, i32 1
  %leftColumn44 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp45 = extractelement <3 x float> %leftColumn44, i32 2
  %rightComp46 = extractelement <2 x float> %rightColumn, i32 0
  %product47 = fmul float %leftComp45, %rightComp46
  %leftColumn48 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp49 = extractelement <3 x float> %leftColumn48, i32 2
  %rightComp50 = extractelement <2 x float> %rightColumn, i32 1
  %product51 = fmul float %leftComp49, %rightComp50
  %dotProduct52 = fadd float %product47, %product51
  %column53 = insertelement <3 x float> %column43, float %dotProduct52, i32 2
  %resultMatrix54 = insertvalue [3 x <3 x float>] %resultMatrix, <3 x float> %column53, 0
  %rightColumn55 = extractvalue [3 x <2 x float>] %15, 1
  %leftColumn56 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp57 = extractelement <3 x float> %leftColumn56, i32 0
  %rightComp58 = extractelement <2 x float> %rightColumn55, i32 0
  %product59 = fmul float %leftComp57, %rightComp58
  %leftColumn60 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp61 = extractelement <3 x float> %leftColumn60, i32 0
  %rightComp62 = extractelement <2 x float> %rightColumn55, i32 1
  %product63 = fmul float %leftComp61, %rightComp62
  %dotProduct64 = fadd float %product59, %product63
  %column65 = insertelement <3 x float> %column53, float %dotProduct64, i32 0
  %leftColumn66 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp67 = extractelement <3 x float> %leftColumn66, i32 1
  %rightComp68 = extractelement <2 x float> %rightColumn55, i32 0
  %product69 = fmul float %leftComp67, %rightComp68
  %leftColumn70 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp71 = extractelement <3 x float> %leftColumn70, i32 1
  %rightComp72 = extractelement <2 x float> %rightColumn55, i32 1
  %product73 = fmul float %leftComp71, %rightComp72
  %dotProduct74 = fadd float %product69, %product73
  %column75 = insertelement <3 x float> %column65, float %dotProduct74, i32 1
  %leftColumn76 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp77 = extractelement <3 x float> %leftColumn76, i32 2
  %rightComp78 = extractelement <2 x float> %rightColumn55, i32 0
  %product79 = fmul float %leftComp77, %rightComp78
  %leftColumn80 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp81 = extractelement <3 x float> %leftColumn80, i32 2
  %rightComp82 = extractelement <2 x float> %rightColumn55, i32 1
  %product83 = fmul float %leftComp81, %rightComp82
  %dotProduct84 = fadd float %product79, %product83
  %column85 = insertelement <3 x float> %column75, float %dotProduct84, i32 2
  %resultMatrix86 = insertvalue [3 x <3 x float>] %resultMatrix54, <3 x float> %column85, 1
  %rightColumn87 = extractvalue [3 x <2 x float>] %15, 2
  %leftColumn88 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp89 = extractelement <3 x float> %leftColumn88, i32 0
  %rightComp90 = extractelement <2 x float> %rightColumn87, i32 0
  %product91 = fmul float %leftComp89, %rightComp90
  %leftColumn92 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp93 = extractelement <3 x float> %leftColumn92, i32 0
  %rightComp94 = extractelement <2 x float> %rightColumn87, i32 1
  %product95 = fmul float %leftComp93, %rightComp94
  %dotProduct96 = fadd float %product91, %product95
  %column97 = insertelement <3 x float> %column85, float %dotProduct96, i32 0
  %leftColumn98 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp99 = extractelement <3 x float> %leftColumn98, i32 1
  %rightComp100 = extractelement <2 x float> %rightColumn87, i32 0
  %product101 = fmul float %leftComp99, %rightComp100
  %leftColumn102 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp103 = extractelement <3 x float> %leftColumn102, i32 1
  %rightComp104 = extractelement <2 x float> %rightColumn87, i32 1
  %product105 = fmul float %leftComp103, %rightComp104
  %dotProduct106 = fadd float %product101, %product105
  %column107 = insertelement <3 x float> %column97, float %dotProduct106, i32 1
  %leftColumn108 = extractvalue [2 x <3 x float>] %14, 0
  %leftComp109 = extractelement <3 x float> %leftColumn108, i32 2
  %rightComp110 = extractelement <2 x float> %rightColumn87, i32 0
  %product111 = fmul float %leftComp109, %rightComp110
  %leftColumn112 = extractvalue [2 x <3 x float>] %14, 1
  %leftComp113 = extractelement <3 x float> %leftColumn112, i32 2
  %rightComp114 = extractelement <2 x float> %rightColumn87, i32 1
  %product115 = fmul float %leftComp113, %rightComp114
  %dotProduct116 = fadd float %product111, %product115
  %column117 = insertelement <3 x float> %column107, float %dotProduct116, i32 2
  %resultMatrix118 = insertvalue [3 x <3 x float>] %resultMatrix86, <3 x float> %column117, 2
  %v3119 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1024, i32 -1), !gla.input !1
  store <3 x float> %v3119, <3 x float>* @v3_shadow
  %16 = load <3 x float>* @v3_shadow
  %17 = load <3 x float>* %1
  %component120 = extractelement <3 x float> %16, i32 0
  %component121 = extractelement <3 x float> %16, i32 1
  %component122 = extractelement <3 x float> %16, i32 2
  %column123 = extractvalue [3 x <3 x float>] %resultMatrix118, 0
  %element124 = extractelement <3 x float> %column123, i32 0
  %product125 = fmul float %element124, %component120
  %column126 = extractvalue [3 x <3 x float>] %resultMatrix118, 1
  %element127 = extractelement <3 x float> %column126, i32 0
  %product128 = fmul float %element127, %component121
  %dotProduct129 = fadd float %product125, %product128
  %column130 = extractvalue [3 x <3 x float>] %resultMatrix118, 2
  %element131 = extractelement <3 x float> %column130, i32 0
  %product132 = fmul float %element131, %component122
  %dotProduct133 = fadd float %dotProduct129, %product132
  %18 = insertelement <3 x float> %17, float %dotProduct133, i32 0
  %column134 = extractvalue [3 x <3 x float>] %resultMatrix118, 0
  %element135 = extractelement <3 x float> %column134, i32 1
  %product136 = fmul float %element135, %component120
  %column137 = extractvalue [3 x <3 x float>] %resultMatrix118, 1
  %element138 = extractelement <3 x float> %column137, i32 1
  %product139 = fmul float %element138, %component121
  %dotProduct140 = fadd float %product136, %product139
  %column141 = extractvalue [3 x <3 x float>] %resultMatrix118, 2
  %element142 = extractelement <3 x float> %column141, i32 1
  %product143 = fmul float %element142, %component122
  %dotProduct144 = fadd float %dotProduct140, %product143
  %19 = insertelement <3 x float> %18, float %dotProduct144, i32 1
  %column145 = extractvalue [3 x <3 x float>] %resultMatrix118, 0
  %element146 = extractelement <3 x float> %column145, i32 2
  %product147 = fmul float %element146, %component120
  %column148 = extractvalue [3 x <3 x float>] %resultMatrix118, 1
  %element149 = extractelement <3 x float> %column148, i32 2
  %product150 = fmul float %element149, %component121
  %dotProduct151 = fadd float %product147, %product150
  %column152 = extractvalue [3 x <3 x float>] %resultMatrix118, 2
  %element153 = extractelement <3 x float> %column152, i32 2
  %product154 = fmul float %element153, %component122
  %dotProduct155 = fadd float %dotProduct151, %product154
  %20 = insertelement <3 x float> %19, float %dotProduct155, i32 2
  %21 = load <4 x float>* %constructed
  %22 = extractelement <3 x float> %20, i32 0
  %23 = insertelement <4 x float> %21, float %22, i32 0
  %24 = extractelement <3 x float> %20, i32 1
  %25 = insertelement <4 x float> %23, float %24, i32 1
  %26 = extractelement <3 x float> %20, i32 2
  %27 = insertelement <4 x float> %25, float %26, i32 2
  %28 = insertelement <4 x float> %27, float 0.000000e+00, i32 3
  %v4 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1026, i32 -1), !gla.input !3
  store <4 x float> %v4, <4 x float>* @v4_shadow
  %29 = load <4 x float>* @v4_shadow
  %30 = load <4 x float>* %0
  %component156 = extractelement <4 x float> %29, i32 0
  %component157 = extractelement <4 x float> %29, i32 1
  %component158 = extractelement <4 x float> %29, i32 2
  %component159 = extractelement <4 x float> %29, i32 3
  %product160 = fmul float 3.000000e+00, %component156
  %product161 = fmul float 9.000000e+00, %component157
  %dotProduct162 = fadd float %product160, %product161
  %product163 = fmul float 1.500000e+01, %component158
  %dotProduct164 = fadd float %dotProduct162, %product163
  %product165 = fmul float 2.100000e+01, %component159
  %dotProduct166 = fadd float %dotProduct164, %product165
  %31 = insertelement <4 x float> %30, float %dotProduct166, i32 0
  %product167 = fmul float 6.000000e+00, %component156
  %product168 = fmul float 1.200000e+01, %component157
  %dotProduct169 = fadd float %product167, %product168
  %product170 = fmul float 1.800000e+01, %component158
  %dotProduct171 = fadd float %dotProduct169, %product170
  %product172 = fmul float 2.400000e+01, %component159
  %dotProduct173 = fadd float %dotProduct171, %product172
  %32 = insertelement <4 x float> %31, float %dotProduct173, i32 1
  %product174 = fmul float 0.000000e+00, %component156
  %product175 = fmul float 0.000000e+00, %component157
  %dotProduct176 = fadd float %product174, %product175
  %product177 = fmul float 0.000000e+00, %component158
  %dotProduct178 = fadd float %dotProduct176, %product177
  %product179 = fmul float 0.000000e+00, %component159
  %dotProduct180 = fadd float %dotProduct178, %product179
  %33 = insertelement <4 x float> %32, float %dotProduct180, i32 2
  %product181 = fmul float 0.000000e+00, %component156
  %product182 = fmul float 0.000000e+00, %component157
  %dotProduct183 = fadd float %product181, %product182
  %product184 = fmul float 0.000000e+00, %component158
  %dotProduct185 = fadd float %dotProduct183, %product184
  %product186 = fmul float 0.000000e+00, %component159
  %dotProduct187 = fadd float %dotProduct185, %product186
  %34 = insertelement <4 x float> %33, float %dotProduct187, i32 3
  %35 = fadd <4 x float> %28, %34
  %36 = fadd <4 x float> %35, <float 5.000000e+01, float 1.100000e+02, float 1.700000e+02, float 2.300000e+02>
  %37 = fadd <4 x float> %36, <float 3.000000e+01, float 6.000000e+01, float 0.000000e+00, float 0.000000e+00>
  %Position_shadow = fadd <4 x float> %37, <float 2.000000e+01, float 1.000000e+01, float 6.000000e+00, float 5.000000e+00>
  store <4 x float> %Position_shadow, <4 x float>* @Position_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %38 = load <4 x float>* @Position_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %38), !gla.output !7
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readonly
declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) #1

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #2

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5}
!gla.outputs = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"v3", i32 1, <3 x float>* @v3_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"v4", i32 1, <4 x float>* @v4_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!5 = metadata !{metadata !"m32", i32 12, [3 x <2 x float>]* @m32_typeProxy, metadata !6}
!6 = metadata !{i32 3, i32 0, i32 1024, null}
!7 = metadata !{metadata !"gl_Position", i32 8, <4 x float>* @Position_shadow_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@m32 = external addrspace(2) constant [3 x <2 x float>]

define fastcc void @main() {
entry:
  %0 = load [3 x <2 x float>] addrspace(2)* @m32, align 8, !gla.uniform !5
  %rightColumn = extractvalue [3 x <2 x float>] %0, 0
  %rightColumn55 = extractvalue [3 x <2 x float>] %0, 1
  %rightColumn87 = extractvalue [3 x <2 x float>] %0, 2
  %v3119 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1024, i32 -1), !gla.input !1
  %component120 = extractelement <3 x float> %v3119, i32 0
  %component121 = extractelement <3 x float> %v3119, i32 1
  %component122 = extractelement <3 x float> %v3119, i32 2
  %v4 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1026, i32 -1), !gla.input !3
  %component156 = extractelement <4 x float> %v4, i32 0
  %component157 = extractelement <4 x float> %v4, i32 1
  %component158 = extractelement <4 x float> %v4, i32 2
  %component159 = extractelement <4 x float> %v4, i32 3
  %rightComp62 = extractelement <2 x float> %rightColumn55, i32 1
  %rightComp58 = extractelement <2 x float> %rightColumn55, i32 0
  %rightComp30 = extractelement <2 x float> %rightColumn, i32 1
  %rightComp = extractelement <2 x float> %rightColumn, i32 0
  %rightComp94 = extractelement <2 x float> %rightColumn87, i32 1
  %rightComp90 = extractelement <2 x float> %rightColumn87, i32 0
  %product63 = fmul float %rightComp62, undef
  %product59 = fmul float %rightComp58, undef
  %product31 = fmul float %rightComp30, undef
  %product27 = fmul float %rightComp, undef
  %product161 = fmul float %component157, 9.000000e+00
  %product160 = fmul float %component156, 3.000000e+00
  %product95 = fmul float %rightComp94, undef
  %product91 = fmul float %rightComp90, undef
  %dotProduct64 = fadd float %product59, %product63
  %dotProduct32 = fadd float %product27, %product31
  %product168 = fmul float %component157, 1.200000e+01
  %product167 = fmul float %component156, 6.000000e+00
  %product163 = fmul float %component158, 1.500000e+01
  %dotProduct162 = fadd float %product160, %product161
  %product128 = fmul float %component121, %dotProduct64
  %product125 = fmul float %component120, %dotProduct32
  %dotProduct96 = fadd float %product91, %product95
  %product170 = fmul float %component158, 1.800000e+01
  %dotProduct169 = fadd float %product167, %product168
  %product165 = fmul float %component159, 2.100000e+01
  %dotProduct164 = fadd float %product163, %dotProduct162
  %product132 = fmul float %component122, %dotProduct96
  %dotProduct129 = fadd float %product125, %product128
  %product172 = fmul float %component159, 2.400000e+01
  %dotProduct171 = fadd float %product170, %dotProduct169
  %dotProduct166 = fadd float %product165, %dotProduct164
  %dotProduct133 = fadd float %product132, %dotProduct129
  %dotProduct173 = fadd float %product172, %dotProduct171
  %1 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct166, i32 0, float %dotProduct173, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct133, i32 0, float %dotProduct133, i32 0, float %dotProduct133, i32 0, float 0.000000e+00, i32 0)
  %3 = fadd <4 x float> %2, %1
  %4 = fadd <4 x float> %3, <float 5.000000e+01, float 1.100000e+02, float 1.700000e+02, float 2.300000e+02>
  %5 = fadd <4 x float> %4, <float 3.000000e+01, float 6.000000e+01, float 0.000000e+00, float 0.000000e+00>
  %Position_shadow = fadd <4 x float> %5, <float 2.000000e+01, float 1.000000e+01, float 6.000000e+00, float 5.000000e+00>
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %Position_shadow), !gla.output !7
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readonly
declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) #0

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #2

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5}
!gla.outputs = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"v3", i32 1, <3 x float>* @v3_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"v4", i32 1, <4 x float>* @v4_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!5 = metadata !{metadata !"m32", i32 12, [3 x <2 x float>]* @m32_typeProxy, metadata !6}
!6 = metadata !{i32 3, i32 0, i32 1024, null}
!7 = metadata !{metadata !"gl_Position", i32 8, <4 x float>* @Position_shadow_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 120
// LunarGOO output
uniform mat3x2 m32;
attribute vec3 v3;
attribute vec4 v4;
const float const30 = 9.0;
const float const32 = 3.0;
const float const38 = 12.0;
const float const40 = 6.0;
const float const42 = 15.0;
const float const48 = 18.0;
const float const51 = 21.0;
const float const56 = 24.0;
const float const62 = 0.0;
const vec4 const66 = vec4(50.0, 110.0, 170.0, 230.0);
const vec4 const68 = vec4(30.0, 60.0, 0.0, 0.0);
const vec4 const70 = vec4(20.0, 10.0, 6.0, 5.0);

void main()
{
    vec2 rightColumn = m32[0];
    vec2 rightColumn55 = m32[1];
    vec2 rightColumn87 = m32[2];
    float product63 = rightColumn55.y * 
    float 25;25;
    float product59 = 25 * rightColumn55.x;
    float product31 = 25 * rightColumn.y;
    float product27 = 25 * rightColumn.x;
    float product161 = v4.y * const30;
    float product160 = v4.x * const32;
    float product95 = 25 * rightColumn87.y;
    float product91 = 25 * rightColumn87.x;
    float dotProduct64 = product59 + product63;
    float dotProduct32 = product27 + product31;
    float product168 = v4.y * const38;
    float product167 = v4.x * const40;
    float product163 = v4.z * const42;
    float dotProduct162 = product160 + product161;
    float product128 = dotProduct64 * v3.y;
    float product125 = dotProduct32 * v3.x;
    float dotProduct96 = product91 + product95;
    float product170 = v4.z * const48;
    float dotProduct169 = product167 + product168;
    float product165 = v4.w * const51;
    float dotProduct164 = dotProduct162 + product163;
    float product132 = dotProduct96 * v3.z;
    float dotProduct129 = product125 + product128;
    float product172 = v4.w * const56;
    float dotProduct171 = dotProduct169 + product170;
    float dotProduct166 = dotProduct164 + product165;
    float dotProduct133 = dotProduct129 + product132;
    float dotProduct173 = dotProduct171 + product172;
    vec4 temp61 = vec4(dotProduct166, dotProduct173, const62, const62);
    vec4 temp63 = vec4(dotProduct133, dotProduct133, dotProduct133, const62);
    vec4 temp64 = temp61 + temp63;
    vec4 temp65 = temp64 + const66;
    vec4 temp67 = temp65 + const68;
    vec4 Position_shadow = temp67 + const70;
    gl_Position = Position_shadow;
    
}


tempglsl.vert
ERROR: 0:25: '' :  syntax error
ERROR: 1 compilation errors.  No code generated.


