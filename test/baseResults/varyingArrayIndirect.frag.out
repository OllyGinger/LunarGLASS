
Top IR:
; ModuleID = 'Glslang'

@texSampler2D = external addrspace(1) constant i32
@userIn = global [2 x <4 x float>] zeroinitializer
@b = external addrspace(2) constant i32
@gl_TexCoord = global [6 x <4 x float>] zeroinitializer
@a = external addrspace(2) constant i32
@color = global <4 x float> zeroinitializer
@alpha = global float 0.000000e+00
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed = alloca <2 x float>
  %texColor = alloca <4 x float>
  %0 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !1
  %1 = load i32 addrspace(2)* @b, !gla.uniform !4
  %2 = getelementptr [2 x <4 x float>]* @userIn, i32 0, i32 %1
  %3 = load <4 x float>* %2
  %4 = load i32 addrspace(2)* @a, !gla.uniform !6
  %5 = getelementptr [6 x <4 x float>]* @gl_TexCoord, i32 0, i32 %4
  %6 = load <4 x float>* %5
  %7 = fadd <4 x float> %3, %6
  %8 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @gl_TexCoord, i32 0, i32 5)
  %9 = fadd <4 x float> %7, %8
  %10 = load <2 x float>* %constructed
  %11 = extractelement <4 x float> %9, i32 0
  %12 = insertelement <2 x float> %10, float %11, i32 0
  %13 = extractelement <4 x float> %9, i32 1
  %14 = insertelement <2 x float> %12, float %13, i32 1
  %texColor1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %14)
  store <4 x float> %texColor1, <4 x float>* %texColor
  %15 = load <4 x float>* @color
  %16 = load <4 x float>* %texColor
  %texColor2 = fadd <4 x float> %16, %15
  store <4 x float> %texColor2, <4 x float>* %texColor
  %17 = load float* @alpha
  %18 = load <4 x float>* %texColor
  %texColor3 = insertelement <4 x float> %18, float %17, i32 3
  store <4 x float> %texColor3, <4 x float>* %texColor
  %19 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @gl_TexCoord, i32 0, i32 0)
  %20 = load i32 addrspace(2)* @b, !gla.uniform !4
  %21 = getelementptr [6 x <4 x float>]* @gl_TexCoord, i32 0, i32 %20
  %22 = load <4 x float>* %21
  %23 = fadd <4 x float> %19, %22
  %24 = load <4 x float>* %texColor
  %25 = fadd <4 x float> %23, %24
  %26 = load i32 addrspace(2)* @a, !gla.uniform !6
  %27 = getelementptr [2 x <4 x float>]* @userIn, i32 0, i32 %26
  %28 = load <4 x float>* %27
  %gl_FragColor = fadd <4 x float> %25, %28
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !4, !6}
!gla.inputs = !{!7, !9, !11, !13}
!gla.outputs = !{!15}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, metadata !2}
!2 = metadata !{i32 5, i32 0, i32 1024, metadata !3}
!3 = metadata !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = metadata !{metadata !"b", i32 12, i32* @b_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null}
!6 = metadata !{metadata !"a", i32 12, i32* @a_typeProxy, metadata !5}
!7 = metadata !{metadata !"userIn", i32 1, [2 x <4 x float>]* @userIn_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!9 = metadata !{metadata !"gl_TexCoord", i32 1, [6 x <4 x float>]* @gl_TexCoord_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!11 = metadata !{metadata !"color", i32 1, <4 x float>* @color_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1032, null, i32 1}
!13 = metadata !{metadata !"alpha", i32 1, float* @alpha_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!15 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1034, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@texSampler2D = external addrspace(1) constant i32
@userIn = global [2 x <4 x float>] zeroinitializer
@b = external addrspace(2) constant i32
@gl_TexCoord = global [6 x <4 x float>] zeroinitializer
@a = external addrspace(2) constant i32
@color = global <4 x float> zeroinitializer
@alpha = global float 0.000000e+00
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @texSampler2D, align 4, !gla.uniform !1
  %1 = load i32 addrspace(2)* @b, align 4, !gla.uniform !4
  %2 = getelementptr [2 x <4 x float>]* @userIn, i32 0, i32 %1
  %3 = load <4 x float>* %2, align 16
  %4 = load i32 addrspace(2)* @a, align 4, !gla.uniform !6
  %5 = getelementptr [6 x <4 x float>]* @gl_TexCoord, i32 0, i32 %4
  %6 = load <4 x float>* %5, align 16
  %7 = fadd <4 x float> %3, %6
  %gla_constGEP = getelementptr [6 x <4 x float>]* @gl_TexCoord, i32 0, i32 5
  %8 = load <4 x float>* %gla_constGEP, align 16
  %9 = fadd <4 x float> %7, %8
  %10 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float> %9, <2 x i32> <i32 0, i32 1>)
  %texColor1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %10)
  %11 = load <4 x float>* @color, align 16
  %texColor2 = fadd <4 x float> %texColor1, %11
  %12 = load float* @alpha, align 4
  %13 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %texColor2, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %12, i32 0)
  %gla_constGEP4 = getelementptr [6 x <4 x float>]* @gl_TexCoord, i32 0, i32 0
  %14 = load <4 x float>* %gla_constGEP4, align 16
  %15 = getelementptr [6 x <4 x float>]* @gl_TexCoord, i32 0, i32 %1
  %16 = load <4 x float>* %15, align 16
  %17 = fadd <4 x float> %14, %16
  %18 = fadd <4 x float> %13, %17
  %19 = getelementptr [2 x <4 x float>]* @userIn, i32 0, i32 %4
  %20 = load <4 x float>* %19, align 16
  %gl_FragColor = fadd <4 x float> %20, %18
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float>, <2 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !4, !6}
!gla.inputs = !{!7, !9, !11, !13}
!gla.outputs = !{!15}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, metadata !2}
!2 = metadata !{i32 5, i32 0, i32 1024, metadata !3}
!3 = metadata !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = metadata !{metadata !"b", i32 12, i32* @b_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null}
!6 = metadata !{metadata !"a", i32 12, i32* @a_typeProxy, metadata !5}
!7 = metadata !{metadata !"userIn", i32 1, [2 x <4 x float>]* @userIn_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!9 = metadata !{metadata !"gl_TexCoord", i32 1, [6 x <4 x float>]* @gl_TexCoord_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!11 = metadata !{metadata !"color", i32 1, <4 x float>* @color_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1032, null, i32 1}
!13 = metadata !{metadata !"alpha", i32 1, float* @alpha_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1033, null, i32 1}
!15 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1034, null, i32 0}
#version 130
// LunarGOO output
uniform sampler2D texSampler2D;
uniform int b;
uniform int a;
in vec4 userIn[2];
in vec4 gl_TexCoord[6];
in vec4 color;
in float alpha;

void main()
{
	vec2 L_1 = vec2(((gl_TexCoord[a] + userIn[b]) + gl_TexCoord[5]));
	vec4 texColor_c1 = texture(texSampler2D, L_1);
	vec4 L_3 = (color + texColor_c1);
	L_3.w = alpha;
	gl_FragColor = (((gl_TexCoord[0] + gl_TexCoord[b]) + L_3) + userIn[a]);
	
}

#version 130
// LunarGOO output
uniform int a;
uniform int b;
uniform sampler2D texSampler2D;
in vec4 gl_TexCoord[6];
in vec4 userIn[2];
in vec4 color;
in float alpha;

void main()
{
	vec2 L_1 = vec2(((gl_TexCoord[a] + userIn[b]) + gl_TexCoord[5]));
	vec4 texColor_c1 = texture(texSampler2D, L_1);
	vec4 L_3 = (color + texColor_c1);
	L_3.w = alpha;
	gl_FragColor = (((gl_TexCoord[0] + gl_TexCoord[b]) + L_3) + userIn[a]);
	
}

