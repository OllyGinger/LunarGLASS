
Top IR:
; ModuleID = 'Glslang'

@BaseColor_shadow = internal global <4 x float> zeroinitializer
@bigColor = external addrspace(2) constant <4 x float>
@d = external addrspace(2) constant float
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor, <4 x float>* @BaseColor_shadow
  %color1 = load <4 x float>* @BaseColor_shadow
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %ifmerge, %entry
  %0 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !3
  %1 = load <4 x float>* %color
  %color2 = fadd <4 x float> %1, %0
  store <4 x float> %color2, <4 x float>* %color
  %2 = load <4 x float>* %color
  %3 = extractelement <4 x float> %2, i32 0
  %4 = load float addrspace(2)* @d, !gla.uniform !5
  %5 = fcmp olt float %3, %4
  %6 = xor i1 %5, true
  br i1 %6, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %then
  %FragColor_shadow = load <4 x float>* %color
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge
  %7 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %7), !gla.output !6
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@bigColor = external addrspace(2) constant <4 x float>
@d = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  %.pre = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !3
  %.pre4 = load float addrspace(2)* @d, align 4, !gla.uniform !5
  br label %loop-header

loop-header:                                      ; preds = %loop-header, %entry
  %color.0 = phi <4 x float> [ %BaseColor, %entry ], [ %color2, %loop-header ]
  %color2 = fadd <4 x float> %color.0, %.pre
  %0 = extractelement <4 x float> %color2, i32 0
  %1 = fcmp uge float %0, %.pre4
  br i1 %1, label %then, label %loop-header

then:                                             ; preds = %loop-header
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %color2), !gla.output !6
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %then
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!6 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 110
// LunarGOO output
uniform vec4 bigColor;
uniform float d;
varying vec4 BaseColor;
vec4 color2;

void main()
{
    vec4 colord0;
    colord0 = BaseColor;
    while (true) {
        color2 = colord0 + bigColor;
        bool temp23 = color2.x >= d;
        if (temp23) {
            break;
        }
        
        colord0 = color2;
    }
    
    gl_FragColor = color2;
    
}


#version 110
// LunarGOO output
uniform vec4 bigColor;
uniform float d;
varying vec4 BaseColor;
vec4 color2;

void main()
{
    vec4 colord0d0;
    colord0d0 = BaseColor;
    while (true) {
        color2 = colord0d0 + bigColor;
        bool temp232 = color2.x < d;
        if (! temp232) {
            break;
        }
        
        colord0d0 = color2;
    }
    
    gl_FragColor = color2;
    
}


