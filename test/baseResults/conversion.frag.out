
Top IR:
; ModuleID = 'Glslang'

@u_i = external addrspace(2) constant i32
@u_f = external addrspace(2) constant float
@i_i = global i32 0
@i_f = global float 0.000000e+00
@u_f2 = external addrspace(2) constant <2 x float>
@u_f3 = external addrspace(2) constant <3 x float>
@u_f4 = external addrspace(2) constant <4 x float>
@i_i4 = global <4 x i32> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@u_b = external addrspace(2) constant i1
@u_b2 = external addrspace(2) constant <2 x i1>
@u_b3 = external addrspace(2) constant <3 x i1>
@u_b4 = external addrspace(2) constant <4 x i1>
@u_i2 = external addrspace(2) constant <2 x i32>
@u_i3 = external addrspace(2) constant <3 x i32>
@u_i4 = external addrspace(2) constant <4 x i32>
@i_b = external addrspace(2) constant i1
@i_b2 = external addrspace(2) constant <2 x i1>
@i_b3 = external addrspace(2) constant <3 x i1>
@i_b4 = external addrspace(2) constant <4 x i1>
@i_i2 = global <2 x i32> zeroinitializer
@i_i3 = global <3 x i32> zeroinitializer
@i_f2 = global <2 x float> zeroinitializer
@i_f3 = global <3 x float> zeroinitializer
@i_f4 = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed58 = alloca float
  %cv5 = alloca <4 x i1>
  %cv2 = alloca <4 x i32>
  %constructed53 = alloca <4 x float>
  %ternary51 = alloca <4 x float>
  %ternary43 = alloca float
  %ternary = alloca float
  %constructed38 = alloca <4 x i32>
  %constructed36 = alloca <3 x i32>
  %constructed34 = alloca <2 x i32>
  %constructed32 = alloca <4 x float>
  %constructed30 = alloca <3 x float>
  %constructed28 = alloca <2 x float>
  %constructed26 = alloca <4 x float>
  %constructed24 = alloca <3 x float>
  %constructed22 = alloca <2 x float>
  %f4 = alloca <4 x float>
  %f3 = alloca <3 x float>
  %f2 = alloca <2 x float>
  %f = alloca float
  %i4 = alloca <4 x i32>
  %i3 = alloca <3 x i32>
  %i2 = alloca <2 x i32>
  %i = alloca i32
  %constructed5 = alloca <4 x i1>
  %b4 = alloca <4 x i1>
  %constructed3 = alloca <3 x i1>
  %b3 = alloca <3 x i1>
  %constructed = alloca <2 x i1>
  %b2 = alloca <2 x i1>
  %b = alloca i1
  %0 = load i32 addrspace(2)* @u_i, !gla.uniform !1
  %1 = icmp ne i32 %0, 0
  %2 = load float addrspace(2)* @u_f, !gla.uniform !3
  %3 = fcmp one float %2, 0.000000e+00
  %b1 = xor i1 %1, %3
  store i1 %b1, i1* %b
  %4 = load i32 addrspace(2)* @u_i, !gla.uniform !1
  %5 = icmp ne i32 %4, 0
  %6 = load float addrspace(2)* @u_f, !gla.uniform !3
  %7 = fcmp one float %6, 0.000000e+00
  %8 = load <2 x i1>* %constructed
  %9 = insertelement <2 x i1> %8, i1 %5, i32 0
  %b22 = insertelement <2 x i1> %9, i1 %7, i32 1
  store <2 x i1> %b22, <2 x i1>* %b2
  %10 = load i32 addrspace(2)* @u_i, !gla.uniform !1
  %11 = icmp ne i32 %10, 0
  %12 = load float addrspace(2)* @u_f, !gla.uniform !3
  %13 = fcmp one float %12, 0.000000e+00
  %14 = load i32* @i_i
  %15 = icmp ne i32 %14, 0
  %16 = load <3 x i1>* %constructed3
  %17 = insertelement <3 x i1> %16, i1 %11, i32 0
  %18 = insertelement <3 x i1> %17, i1 %13, i32 1
  %b34 = insertelement <3 x i1> %18, i1 %15, i32 2
  store <3 x i1> %b34, <3 x i1>* %b3
  %19 = load i32 addrspace(2)* @u_i, !gla.uniform !1
  %20 = icmp ne i32 %19, 0
  %21 = load float addrspace(2)* @u_f, !gla.uniform !3
  %22 = fcmp one float %21, 0.000000e+00
  %23 = load i32* @i_i
  %24 = icmp ne i32 %23, 0
  %25 = load float* @i_f
  %26 = fcmp one float %25, 0.000000e+00
  %27 = load <4 x i1>* %constructed5
  %28 = insertelement <4 x i1> %27, i1 %20, i32 0
  %29 = insertelement <4 x i1> %28, i1 %22, i32 1
  %30 = insertelement <4 x i1> %29, i1 %24, i32 2
  %b46 = insertelement <4 x i1> %30, i1 %26, i32 3
  store <4 x i1> %b46, <4 x i1>* %b4
  %31 = load float addrspace(2)* @u_f, !gla.uniform !3
  %32 = fptosi float %31 to i32
  %33 = load i1* %b
  %34 = zext i1 %33 to i32
  %i7 = add i32 %32, %34
  store i32 %i7, i32* %i
  %35 = load <2 x float> addrspace(2)* @u_f2, !gla.uniform !4
  %36 = fptosi <2 x float> %35 to <2 x i32>
  %37 = load <2 x i1>* %b2
  %38 = zext <2 x i1> %37 to <2 x i32>
  %i28 = add <2 x i32> %36, %38
  store <2 x i32> %i28, <2 x i32>* %i2
  %39 = load <3 x float> addrspace(2)* @u_f3, !gla.uniform !5
  %40 = fptosi <3 x float> %39 to <3 x i32>
  %41 = load <3 x i1>* %b3
  %42 = zext <3 x i1> %41 to <3 x i32>
  %i39 = add <3 x i32> %40, %42
  store <3 x i32> %i39, <3 x i32>* %i3
  %43 = load <4 x float> addrspace(2)* @u_f4, !gla.uniform !6
  %44 = fptosi <4 x float> %43 to <4 x i32>
  %45 = load <4 x i1>* %b4
  %46 = zext <4 x i1> %45 to <4 x i32>
  %i410 = add <4 x i32> %44, %46
  store <4 x i32> %i410, <4 x i32>* %i4
  %47 = load i32* %i
  %f11 = sitofp i32 %47 to float
  store float %f11, float* %f
  %48 = load <2 x i32>* %i2
  %f212 = sitofp <2 x i32> %48 to <2 x float>
  store <2 x float> %f212, <2 x float>* %f2
  %49 = load <3 x i32>* %i3
  %f313 = sitofp <3 x i32> %49 to <3 x float>
  store <3 x float> %f313, <3 x float>* %f3
  %50 = load <4 x i32>* %i4
  %f414 = sitofp <4 x i32> %50 to <4 x float>
  store <4 x float> %f414, <4 x float>* %f4
  %51 = load i32* %i
  %52 = sitofp i32 %51 to float
  %53 = load i1* %b
  %54 = uitofp i1 %53 to float
  %55 = fadd float %52, %54
  %56 = load float* %f
  %f15 = fadd float %56, %55
  store float %f15, float* %f
  %57 = load <2 x i32>* %i2
  %58 = sitofp <2 x i32> %57 to <2 x float>
  %59 = load <2 x i1>* %b2
  %60 = uitofp <2 x i1> %59 to <2 x float>
  %61 = fadd <2 x float> %58, %60
  %62 = load <2 x float>* %f2
  %f216 = fsub <2 x float> %62, %61
  store <2 x float> %f216, <2 x float>* %f2
  %63 = load <3 x i32>* %i3
  %64 = sitofp <3 x i32> %63 to <3 x float>
  %65 = load <3 x i1>* %b3
  %66 = uitofp <3 x i1> %65 to <3 x float>
  %67 = fadd <3 x float> %64, %66
  %68 = load <3 x float>* %f3
  %f317 = fdiv <3 x float> %68, %67
  store <3 x float> %f317, <3 x float>* %f3
  %69 = load <4 x i32>* %i4
  %70 = sitofp <4 x i32> %69 to <4 x float>
  %71 = load <4 x i1>* %b4
  %72 = uitofp <4 x i1> %71 to <4 x float>
  %73 = fadd <4 x float> %70, %72
  %74 = load <4 x float>* %f4
  %f418 = fadd <4 x float> %74, %73
  store <4 x float> %f418, <4 x float>* %f4
  %75 = load <4 x i32>* @i_i4
  %76 = icmp ne <4 x i32> %75, zeroinitializer
  %77 = uitofp <4 x i1> %76 to <4 x float>
  %78 = load <4 x float>* %f4
  %f419 = fadd <4 x float> %78, %77
  store <4 x float> %f419, <4 x float>* %f4
  %79 = load <4 x float> addrspace(2)* @u_f4, !gla.uniform !6
  %80 = fcmp one <4 x float> %79, zeroinitializer
  %81 = uitofp <4 x i1> %80 to <4 x float>
  %82 = load <4 x float>* %f4
  %f420 = fadd <4 x float> %82, %81
  store <4 x float> %f420, <4 x float>* %f4
  %83 = load float* %f
  %84 = load i32* %i
  %85 = sitofp i32 %84 to float
  %86 = fsub float %83, %85
  %87 = load float* %f
  %f21 = fadd float %87, %86
  store float %f21, float* %f
  %88 = load float* %f
  %89 = load i32* %i
  %90 = sitofp i32 %89 to float
  %91 = load <2 x float>* %constructed22
  %92 = insertelement <2 x float> %91, float %88, i32 0
  %93 = insertelement <2 x float> %92, float %90, i32 1
  %94 = load <2 x i32>* %i2
  %95 = sitofp <2 x i32> %94 to <2 x float>
  %96 = fadd <2 x float> %93, %95
  %97 = load <2 x float>* %f2
  %f223 = fadd <2 x float> %97, %96
  store <2 x float> %f223, <2 x float>* %f2
  %98 = load <3 x i32>* %i3
  %99 = sitofp <3 x i32> %98 to <3 x float>
  %100 = load float* %f
  %101 = load i32* %i
  %102 = sitofp i32 %101 to float
  %103 = load float* %f
  %104 = load <3 x float>* %constructed24
  %105 = insertelement <3 x float> %104, float %100, i32 0
  %106 = insertelement <3 x float> %105, float %102, i32 1
  %107 = insertelement <3 x float> %106, float %103, i32 2
  %108 = fadd <3 x float> %99, %107
  %109 = load <3 x float>* %f3
  %f325 = fadd <3 x float> %109, %108
  store <3 x float> %f325, <3 x float>* %f3
  %110 = load i1* %b
  %111 = uitofp i1 %110 to float
  %112 = load i32* %i
  %113 = sitofp i32 %112 to float
  %114 = load float* %f
  %115 = load i32* %i
  %116 = sitofp i32 %115 to float
  %117 = load <4 x float>* %constructed26
  %118 = insertelement <4 x float> %117, float %111, i32 0
  %119 = insertelement <4 x float> %118, float %113, i32 1
  %120 = insertelement <4 x float> %119, float %114, i32 2
  %121 = insertelement <4 x float> %120, float %116, i32 3
  %122 = load <4 x i32>* %i4
  %123 = sitofp <4 x i32> %122 to <4 x float>
  %124 = fadd <4 x float> %121, %123
  %125 = load <4 x float>* %f4
  %f427 = fadd <4 x float> %125, %124
  store <4 x float> %f427, <4 x float>* %f4
  %126 = load float* %f
  %127 = load i32* %i
  %128 = sitofp i32 %127 to float
  %129 = load <2 x float>* %constructed28
  %130 = insertelement <2 x float> %129, float %126, i32 0
  %131 = insertelement <2 x float> %130, float %128, i32 1
  %132 = load i32* %i
  %133 = sitofp i32 %132 to float
  %134 = insertelement <2 x float> undef, float %133, i32 0
  %135 = insertelement <2 x float> %134, float %133, i32 1
  %136 = fmul <2 x float> %131, %135
  %137 = load <2 x float>* %f2
  %f229 = fadd <2 x float> %137, %136
  store <2 x float> %f229, <2 x float>* %f2
  %138 = load float* %f
  %139 = load i32* %i
  %140 = sitofp i32 %139 to float
  %141 = load float* %f
  %142 = load <3 x float>* %constructed30
  %143 = insertelement <3 x float> %142, float %138, i32 0
  %144 = insertelement <3 x float> %143, float %140, i32 1
  %145 = insertelement <3 x float> %144, float %141, i32 2
  %146 = load i32* %i
  %147 = sitofp i32 %146 to float
  %148 = insertelement <3 x float> undef, float %147, i32 0
  %149 = insertelement <3 x float> %148, float %147, i32 1
  %150 = insertelement <3 x float> %149, float %147, i32 2
  %151 = fadd <3 x float> %145, %150
  %152 = load <3 x float>* %f3
  %f331 = fadd <3 x float> %152, %151
  store <3 x float> %f331, <3 x float>* %f3
  %153 = load i32* %i
  %154 = sitofp i32 %153 to float
  %155 = load i1* %b
  %156 = uitofp i1 %155 to float
  %157 = load i32* %i
  %158 = sitofp i32 %157 to float
  %159 = load float* %f
  %160 = load i32* %i
  %161 = sitofp i32 %160 to float
  %162 = load <4 x float>* %constructed32
  %163 = insertelement <4 x float> %162, float %156, i32 0
  %164 = insertelement <4 x float> %163, float %158, i32 1
  %165 = insertelement <4 x float> %164, float %159, i32 2
  %166 = insertelement <4 x float> %165, float %161, i32 3
  %167 = insertelement <4 x float> undef, float %154, i32 0
  %168 = insertelement <4 x float> %167, float %154, i32 1
  %169 = insertelement <4 x float> %168, float %154, i32 2
  %170 = insertelement <4 x float> %169, float %154, i32 3
  %171 = fsub <4 x float> %170, %166
  %172 = load <4 x float>* %f4
  %f433 = fadd <4 x float> %172, %171
  store <4 x float> %f433, <4 x float>* %f4
  %173 = load float* %f
  %174 = fptosi float %173 to i32
  %175 = load i32* %i
  %176 = load <2 x i32>* %constructed34
  %177 = insertelement <2 x i32> %176, i32 %174, i32 0
  %178 = insertelement <2 x i32> %177, i32 %175, i32 1
  %179 = load <2 x i32>* %i2
  %i235 = add <2 x i32> %179, %178
  store <2 x i32> %i235, <2 x i32>* %i2
  %180 = load float* %f
  %181 = fptosi float %180 to i32
  %182 = load i32* %i
  %183 = load float* %f
  %184 = fptosi float %183 to i32
  %185 = load <3 x i32>* %constructed36
  %186 = insertelement <3 x i32> %185, i32 %181, i32 0
  %187 = insertelement <3 x i32> %186, i32 %182, i32 1
  %188 = insertelement <3 x i32> %187, i32 %184, i32 2
  %189 = load <3 x i32>* %i3
  %i337 = add <3 x i32> %189, %188
  store <3 x i32> %i337, <3 x i32>* %i3
  %190 = load i1* %b
  %191 = zext i1 %190 to i32
  %192 = load i32* %i
  %193 = load float* %f
  %194 = fptosi float %193 to i32
  %195 = load i32* %i
  %196 = load <4 x i32>* %constructed38
  %197 = insertelement <4 x i32> %196, i32 %191, i32 0
  %198 = insertelement <4 x i32> %197, i32 %192, i32 1
  %199 = insertelement <4 x i32> %198, i32 %194, i32 2
  %200 = insertelement <4 x i32> %199, i32 %195, i32 3
  %201 = load <4 x i32>* %i4
  %i439 = add <4 x i32> %201, %200
  store <4 x i32> %i439, <4 x i32>* %i4
  %202 = load float* %f
  %203 = load i32* %i
  %204 = sitofp i32 %203 to float
  %205 = fcmp olt float %202, %204
  %206 = load i32* %i
  %207 = sitofp i32 %206 to float
  %208 = load float* %f
  %209 = fcmp olt float %207, %208
  %210 = or i1 %205, %209
  %211 = load <2 x float>* %f2
  %212 = load <2 x i32>* %i2
  %213 = sitofp <2 x i32> %212 to <2 x float>
  %214 = fcmp oeq <2 x float> %211, %213
  %215 = call i1 @llvm.gla.all.v2i1(<2 x i1> %214)
  %216 = or i1 %210, %215
  %217 = load <3 x i32>* %i3
  %218 = sitofp <3 x i32> %217 to <3 x float>
  %219 = load <3 x float>* %f3
  %220 = fcmp one <3 x float> %218, %219
  %221 = call i1 @llvm.gla.any.v3i1(<3 x i1> %220)
  %222 = or i1 %216, %221
  br i1 %222, label %then, label %ifmerge50

then:                                             ; preds = %entry
  %223 = load i1* %b
  br i1 %223, label %then40, label %else

then40:                                           ; preds = %then
  %224 = load i32* %i
  %ternary41 = sitofp i32 %224 to float
  store float %ternary41, float* %ternary
  br label %ifmerge

else:                                             ; preds = %then
  %225 = load <2 x float>* %f2
  %ternary42 = extractelement <2 x float> %225, i32 0
  store float %ternary42, float* %ternary
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then40
  %226 = load float* %ternary
  %227 = load <2 x i1>* %b2
  %228 = extractelement <2 x i1> %227, i32 0
  br i1 %228, label %then44, label %else46

then44:                                           ; preds = %ifmerge
  %229 = load <3 x float>* %f3
  %ternary4345 = extractelement <3 x float> %229, i32 0
  store float %ternary4345, float* %ternary43
  br label %ifmerge48

else46:                                           ; preds = %ifmerge
  %230 = load <2 x i32>* %i2
  %231 = extractelement <2 x i32> %230, i32 1
  %ternary4347 = sitofp i32 %231 to float
  store float %ternary4347, float* %ternary43
  br label %ifmerge48

ifmerge48:                                        ; preds = %else46, %then44
  %232 = load float* %ternary43
  %f49 = fadd float %226, %232
  store float %f49, float* %f
  br label %ifmerge50

ifmerge50:                                        ; preds = %entry, %ifmerge48
  %233 = load i1* %b
  %234 = load <2 x i1>* %b2
  %235 = extractelement <2 x i1> %234, i32 0
  %236 = or i1 %233, %235
  %237 = load <2 x i1>* %b2
  %238 = extractelement <2 x i1> %237, i32 1
  %239 = or i1 %236, %238
  %240 = load <3 x i1>* %b3
  %241 = extractelement <3 x i1> %240, i32 0
  %242 = or i1 %239, %241
  %243 = load <3 x i1>* %b3
  %244 = extractelement <3 x i1> %243, i32 1
  %245 = or i1 %242, %244
  %246 = load <3 x i1>* %b3
  %247 = extractelement <3 x i1> %246, i32 2
  %248 = or i1 %245, %247
  %249 = load <4 x i1>* %b4
  %250 = extractelement <4 x i1> %249, i32 0
  %251 = or i1 %248, %250
  %252 = load <4 x i1>* %b4
  %253 = extractelement <4 x i1> %252, i32 1
  %254 = or i1 %251, %253
  %255 = load <4 x i1>* %b4
  %256 = extractelement <4 x i1> %255, i32 2
  %257 = or i1 %254, %256
  %258 = load <4 x i1>* %b4
  %259 = extractelement <4 x i1> %258, i32 3
  %260 = or i1 %257, %259
  br i1 %260, label %then52, label %else55

then52:                                           ; preds = %ifmerge50
  %261 = load i32* %i
  %262 = load <2 x i32>* %i2
  %263 = extractelement <2 x i32> %262, i32 0
  %264 = add i32 %261, %263
  %265 = load <2 x i32>* %i2
  %266 = extractelement <2 x i32> %265, i32 1
  %267 = add i32 %264, %266
  %268 = load <3 x i32>* %i3
  %269 = extractelement <3 x i32> %268, i32 0
  %270 = add i32 %267, %269
  %271 = load <3 x i32>* %i3
  %272 = extractelement <3 x i32> %271, i32 1
  %273 = add i32 %270, %272
  %274 = load <3 x i32>* %i3
  %275 = extractelement <3 x i32> %274, i32 2
  %276 = add i32 %273, %275
  %277 = load <4 x i32>* %i4
  %278 = extractelement <4 x i32> %277, i32 0
  %279 = add i32 %276, %278
  %280 = load <4 x i32>* %i4
  %281 = extractelement <4 x i32> %280, i32 1
  %282 = add i32 %279, %281
  %283 = load <4 x i32>* %i4
  %284 = extractelement <4 x i32> %283, i32 2
  %285 = add i32 %282, %284
  %286 = load <4 x i32>* %i4
  %287 = extractelement <4 x i32> %286, i32 3
  %288 = add i32 %285, %287
  %289 = sitofp i32 %288 to float
  %290 = load float* %f
  %291 = fadd float %289, %290
  %292 = load <2 x float>* %f2
  %293 = extractelement <2 x float> %292, i32 0
  %294 = fadd float %291, %293
  %295 = load <2 x float>* %f2
  %296 = extractelement <2 x float> %295, i32 1
  %297 = fadd float %294, %296
  %298 = load <3 x float>* %f3
  %299 = extractelement <3 x float> %298, i32 0
  %300 = fadd float %297, %299
  %301 = load <3 x float>* %f3
  %302 = extractelement <3 x float> %301, i32 1
  %303 = fadd float %300, %302
  %304 = load <3 x float>* %f3
  %305 = extractelement <3 x float> %304, i32 2
  %306 = fadd float %303, %305
  %307 = load <4 x float>* %f4
  %308 = extractelement <4 x float> %307, i32 0
  %309 = fadd float %306, %308
  %310 = load <4 x float>* %f4
  %311 = extractelement <4 x float> %310, i32 1
  %312 = fadd float %309, %311
  %313 = load <4 x float>* %f4
  %314 = extractelement <4 x float> %313, i32 2
  %315 = fadd float %312, %314
  %316 = load <4 x float>* %f4
  %317 = extractelement <4 x float> %316, i32 3
  %318 = fadd float %315, %317
  %319 = load <4 x float>* %constructed53
  %320 = insertelement <4 x float> undef, float %318, i32 0
  %321 = insertelement <4 x float> %320, float %318, i32 1
  %322 = insertelement <4 x float> %321, float %318, i32 2
  %ternary5154 = insertelement <4 x float> %322, float %318, i32 3
  store <4 x float> %ternary5154, <4 x float>* %ternary51
  br label %ifmerge56

else55:                                           ; preds = %ifmerge50
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %ternary51
  br label %ifmerge56

ifmerge56:                                        ; preds = %else55, %then52
  %gl_FragColor = load <4 x float>* %ternary51
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %cv2
  %323 = load <4 x i32>* %cv2
  %cv557 = icmp ne <4 x i32> %323, zeroinitializer
  store <4 x i1> %cv557, <4 x i1>* %cv5
  %324 = load <4 x i1>* %cv5
  %325 = uitofp <4 x i1> %324 to <4 x float>
  %326 = load float* %constructed58
  %327 = extractelement <4 x float> %325, i32 0
  %328 = load <4 x float>* @gl_FragColor
  %329 = insertelement <4 x float> undef, float %327, i32 0
  %330 = insertelement <4 x float> %329, float %327, i32 1
  %331 = insertelement <4 x float> %330, float %327, i32 2
  %332 = insertelement <4 x float> %331, float %327, i32 3
  %gl_FragColor59 = fadd <4 x float> %328, %332
  store <4 x float> %gl_FragColor59, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge56
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v2i1(<2 x i1>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v3i1(<3 x i1>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17}
!gla.inputs = !{!18, !20, !22, !24, !26, !28, !30, !32}
!gla.outputs = !{!34}
!gla.noStaticUse = !{!7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !24, !26, !28, !30, !32}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"u_i", i32 12, i32* @u_i_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"u_f", i32 12, float* @u_f_typeProxy, metadata !2}
!4 = metadata !{metadata !"u_f2", i32 12, <2 x float>* @u_f2_typeProxy, metadata !2}
!5 = metadata !{metadata !"u_f3", i32 12, <3 x float>* @u_f3_typeProxy, metadata !2}
!6 = metadata !{metadata !"u_f4", i32 12, <4 x float>* @u_f4_typeProxy, metadata !2}
!7 = metadata !{metadata !"u_b", i32 12, i1* @u_b_typeProxy, metadata !2}
!8 = metadata !{metadata !"u_b2", i32 12, <2 x i1>* @u_b2_typeProxy, metadata !2}
!9 = metadata !{metadata !"u_b3", i32 12, <3 x i1>* @u_b3_typeProxy, metadata !2}
!10 = metadata !{metadata !"u_b4", i32 12, <4 x i1>* @u_b4_typeProxy, metadata !2}
!11 = metadata !{metadata !"u_i2", i32 12, <2 x i32>* @u_i2_typeProxy, metadata !2}
!12 = metadata !{metadata !"u_i3", i32 12, <3 x i32>* @u_i3_typeProxy, metadata !2}
!13 = metadata !{metadata !"u_i4", i32 12, <4 x i32>* @u_i4_typeProxy, metadata !2}
!14 = metadata !{metadata !"i_b", i32 12, i1* @i_b_typeProxy, metadata !2}
!15 = metadata !{metadata !"i_b2", i32 12, <2 x i1>* @i_b2_typeProxy, metadata !2}
!16 = metadata !{metadata !"i_b3", i32 12, <3 x i1>* @i_b3_typeProxy, metadata !2}
!17 = metadata !{metadata !"i_b4", i32 12, <4 x i1>* @i_b4_typeProxy, metadata !2}
!18 = metadata !{metadata !"i_i", i32 1, i32* @i_i_typeProxy, metadata !19}
!19 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!20 = metadata !{metadata !"i_f", i32 1, float* @i_f_typeProxy, metadata !21}
!21 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!22 = metadata !{metadata !"i_i4", i32 1, <4 x i32>* @i_i4_typeProxy, metadata !23}
!23 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!24 = metadata !{metadata !"i_i2", i32 1, <2 x i32>* @i_i2_typeProxy, metadata !25}
!25 = metadata !{i32 0, i32 0, i32 1028, null, i32 0}
!26 = metadata !{metadata !"i_i3", i32 1, <3 x i32>* @i_i3_typeProxy, metadata !27}
!27 = metadata !{i32 0, i32 0, i32 1029, null, i32 0}
!28 = metadata !{metadata !"i_f2", i32 1, <2 x float>* @i_f2_typeProxy, metadata !29}
!29 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!30 = metadata !{metadata !"i_f3", i32 1, <3 x float>* @i_f3_typeProxy, metadata !31}
!31 = metadata !{i32 0, i32 0, i32 1031, null, i32 1}
!32 = metadata !{metadata !"i_f4", i32 1, <4 x float>* @i_f4_typeProxy, metadata !33}
!33 = metadata !{i32 0, i32 0, i32 1032, null, i32 1}
!34 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !35}
!35 = metadata !{i32 0, i32 0, i32 1027, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@u_i = external addrspace(2) constant i32
@u_f = external addrspace(2) constant float
@i_i = global i32 0
@i_f = global float 0.000000e+00
@u_f2 = external addrspace(2) constant <2 x float>
@u_f3 = external addrspace(2) constant <3 x float>
@u_f4 = external addrspace(2) constant <4 x float>
@i_i4 = global <4 x i32> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@i_i2 = global <2 x i32> zeroinitializer
@i_i3 = global <3 x i32> zeroinitializer
@i_f2 = global <2 x float> zeroinitializer
@i_f3 = global <3 x float> zeroinitializer
@i_f4 = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(2)* @u_i, align 4, !gla.uniform !1
  %1 = icmp ne i32 %0, 0
  %2 = load float addrspace(2)* @u_f, align 4, !gla.uniform !3
  %3 = fcmp one float %2, 0.000000e+00
  %b1 = xor i1 %1, %3
  %4 = call <2 x i1> @llvm.gla.multiInsert.v2i1.v2i1.i1.i1.i1.i1(<2 x i1> undef, i32 3, i1 %1, i32 0, i1 %3, i32 0, i1 undef, i32 undef, i1 undef, i32 undef)
  %5 = load i32* @i_i, align 4
  %6 = icmp ne i32 %5, 0
  %7 = call <3 x i1> @llvm.gla.multiInsert.v3i1.v3i1.i1.i1.i1.i1(<3 x i1> undef, i32 7, i1 %1, i32 0, i1 %3, i32 0, i1 %6, i32 0, i1 undef, i32 undef)
  %8 = load float* @i_f, align 4
  %9 = fcmp one float %8, 0.000000e+00
  %10 = call <4 x i1> @llvm.gla.multiInsert.v4i1.v4i1.i1.i1.i1.i1(<4 x i1> undef, i32 15, i1 %1, i32 0, i1 %3, i32 0, i1 %6, i32 0, i1 %9, i32 0)
  %11 = fptosi float %2 to i32
  %12 = zext i1 %b1 to i32
  %i7 = add i32 %12, %11
  %13 = load <2 x float> addrspace(2)* @u_f2, align 8, !gla.uniform !4
  %14 = fptosi <2 x float> %13 to <2 x i32>
  %15 = zext <2 x i1> %4 to <2 x i32>
  %i28 = add <2 x i32> %14, %15
  %16 = load <3 x float> addrspace(2)* @u_f3, align 16, !gla.uniform !5
  %17 = fptosi <3 x float> %16 to <3 x i32>
  %18 = zext <3 x i1> %7 to <3 x i32>
  %i39 = add <3 x i32> %17, %18
  %19 = load <4 x float> addrspace(2)* @u_f4, align 16, !gla.uniform !6
  %20 = fptosi <4 x float> %19 to <4 x i32>
  %21 = zext <4 x i1> %10 to <4 x i32>
  %i410 = add <4 x i32> %20, %21
  %f11 = sitofp i32 %i7 to float
  %22 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %f11, <4 x i32> zeroinitializer)
  %23 = call <3 x float> @llvm.gla.fSwizzle.v3f32.f32.v3i32(float %f11, <3 x i32> zeroinitializer)
  %24 = call <2 x float> @llvm.gla.fSwizzle.v2f32.f32.v2i32(float %f11, <2 x i32> zeroinitializer)
  %f212 = sitofp <2 x i32> %i28 to <2 x float>
  %f313 = sitofp <3 x i32> %i39 to <3 x float>
  %f414 = sitofp <4 x i32> %i410 to <4 x float>
  %25 = uitofp i1 %b1 to float
  %26 = fadd float %25, %f11
  %f15 = fadd float %f11, %26
  %27 = uitofp <2 x i1> %4 to <2 x float>
  %28 = fadd <2 x float> %27, %f212
  %f216 = fsub <2 x float> %f212, %28
  %29 = uitofp <3 x i1> %7 to <3 x float>
  %30 = fadd <3 x float> %29, %f313
  %f317 = fdiv <3 x float> %f313, %30
  %31 = uitofp <4 x i1> %10 to <4 x float>
  %32 = fadd <4 x float> %31, %f414
  %f418 = fadd <4 x float> %f414, %32
  %33 = load <4 x i32>* @i_i4, align 16
  %34 = icmp ne <4 x i32> %33, zeroinitializer
  %35 = uitofp <4 x i1> %34 to <4 x float>
  %f419 = fadd <4 x float> %35, %f418
  %36 = fcmp one <4 x float> %19, zeroinitializer
  %37 = uitofp <4 x i1> %36 to <4 x float>
  %f420 = fadd <4 x float> %37, %f419
  %38 = fsub float %f15, %f11
  %f21 = fadd float %f15, %38
  %39 = call <2 x float> @llvm.gla.fMultiInsert.v2f32.v2f32.f32.f32.f32.f32(<2 x float> undef, i32 3, float %f21, i32 0, float %f11, i32 0, float undef, i32 undef, float undef, i32 undef)
  %40 = fadd <2 x float> %f212, %39
  %f223 = fadd <2 x float> %f216, %40
  %41 = call <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.f32.f32.f32.f32(<3 x float> undef, i32 7, float %f21, i32 0, float %f11, i32 0, float %f21, i32 0, float undef, i32 undef)
  %42 = fadd <3 x float> %f313, %41
  %f325 = fadd <3 x float> %f317, %42
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %25, i32 0, float %f11, i32 0, float %f21, i32 0, float %f11, i32 0)
  %44 = fadd <4 x float> %f414, %43
  %f427 = fadd <4 x float> %f420, %44
  %45 = fmul <2 x float> %24, %39
  %f229 = fadd <2 x float> %45, %f223
  %46 = fadd <3 x float> %23, %41
  %f331 = fadd <3 x float> %46, %f325
  %47 = fsub <4 x float> %22, %43
  %f433 = fadd <4 x float> %47, %f427
  %48 = fptosi float %f21 to i32
  %49 = call <2 x i32> @llvm.gla.multiInsert.v2i32.v2i32.i32.i32.i32.i32(<2 x i32> undef, i32 3, i32 %48, i32 0, i32 %i7, i32 0, i32 undef, i32 undef, i32 undef, i32 undef)
  %i235 = add <2 x i32> %i28, %49
  %50 = call <3 x i32> @llvm.gla.multiInsert.v3i32.v3i32.i32.i32.i32.i32(<3 x i32> undef, i32 7, i32 %48, i32 0, i32 %i7, i32 0, i32 %48, i32 0, i32 undef, i32 undef)
  %i337 = add <3 x i32> %i39, %50
  %51 = call <4 x i32> @llvm.gla.multiInsert.v4i32.v4i32.i32.i32.i32.i32(<4 x i32> undef, i32 15, i32 %12, i32 0, i32 %i7, i32 0, i32 %48, i32 0, i32 %i7, i32 0)
  %i439 = add <4 x i32> %i410, %51
  %52 = or i1 %1, %3
  %53 = or i1 %52, %6
  %54 = or i1 %53, %9
  br i1 %54, label %then52, label %else55

then52:                                           ; preds = %entry
  %55 = sitofp <2 x i32> %i235 to <2 x float>
  %56 = extractelement <2 x i32> %i235, i32 1
  %57 = sitofp <3 x i32> %i337 to <3 x float>
  %58 = fcmp oeq <2 x float> %f229, %55
  %ternary4347 = sitofp i32 %56 to float
  %ternary4345 = extractelement <3 x float> %f331, i32 0
  %ternary42 = extractelement <2 x float> %f229, i32 0
  %59 = fcmp one <3 x float> %57, %f331
  %60 = call i1 @llvm.gla.all.v2i1(<2 x i1> %58)
  %61 = fcmp one float %f21, %f11
  %select = select i1 %1, float %ternary4345, float %ternary4347
  %select60 = select i1 %b1, float %f11, float %ternary42
  %62 = call i1 @llvm.gla.any.v3i1(<3 x i1> %59)
  %63 = or i1 %61, %60
  %f49 = fadd float %select60, %select
  %64 = or i1 %63, %62
  %select61 = select i1 %64, float %f49, float %f21
  %65 = extractelement <2 x i32> %i235, i32 0
  %66 = add i32 %65, %i7
  %67 = add i32 %66, %56
  %68 = extractelement <3 x i32> %i337, i32 0
  %69 = extractelement <3 x i32> %i337, i32 1
  %70 = extractelement <3 x i32> %i337, i32 2
  %71 = extractelement <4 x i32> %i439, i32 0
  %72 = extractelement <4 x i32> %i439, i32 1
  %73 = extractelement <4 x i32> %i439, i32 2
  %74 = extractelement <4 x i32> %i439, i32 3
  %75 = add i32 %67, %71
  %76 = add i32 %75, %72
  %77 = add i32 %76, %73
  %78 = add i32 %77, %74
  %79 = add i32 %78, %68
  %80 = add i32 %79, %69
  %81 = add i32 %80, %70
  %82 = sitofp i32 %81 to float
  %83 = fadd float %select61, %82
  %84 = fadd float %ternary42, %83
  %85 = extractelement <2 x float> %f229, i32 1
  %86 = fadd float %85, %84
  %87 = fadd float %ternary4345, %86
  %88 = extractelement <3 x float> %f331, i32 1
  %89 = fadd float %88, %87
  %90 = extractelement <3 x float> %f331, i32 2
  %91 = fadd float %90, %89
  %92 = extractelement <4 x float> %f433, i32 0
  %93 = fadd float %92, %91
  %94 = extractelement <4 x float> %f433, i32 1
  %95 = fadd float %94, %93
  %96 = extractelement <4 x float> %f433, i32 2
  %97 = fadd float %96, %95
  %98 = extractelement <4 x float> %f433, i32 3
  %99 = fadd float %98, %97
  %100 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %99, <4 x i32> zeroinitializer)
  %phitmp = fadd <4 x float> %100, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %ifmerge56

else55:                                           ; preds = %entry
  br label %ifmerge56

ifmerge56:                                        ; preds = %else55, %then52
  %ternary51.0 = phi <4 x float> [ %phitmp, %then52 ], [ <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %else55 ]
  store <4 x float> %ternary51.0, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge56
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v2i1(<2 x i1>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v3i1(<3 x i1>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.multiInsert.v4i32.v4i32.i32.i32.i32.i32(<4 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.multiInsert.v3i32.v3i32.i32.i32.i32.i32(<3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.multiInsert.v2i32.v2i32.i32.i32.i32.i32(<2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.f32.f32.f32.f32(<3 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fMultiInsert.v2f32.v2f32.f32.f32.f32.f32(<2 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x i1> @llvm.gla.multiInsert.v4i1.v4i1.i1.i1.i1.i1(<4 x i1>, i32, i1, i32, i1, i32, i1, i32, i1, i32) #0

; Function Attrs: nounwind readnone
declare <3 x i1> @llvm.gla.multiInsert.v3i1.v3i1.i1.i1.i1.i1(<3 x i1>, i32, i1, i32, i1, i32, i1, i32, i1, i32) #0

; Function Attrs: nounwind readnone
declare <2 x i1> @llvm.gla.multiInsert.v2i1.v2i1.i1.i1.i1.i1(<2 x i1>, i32, i1, i32, i1, i32, i1, i32, i1, i32) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fSwizzle.v2f32.f32.v2i32(float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fSwizzle.v3f32.f32.v3i32(float, <3 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17}
!gla.inputs = !{!18, !20, !22, !24, !26, !28, !30, !32}
!gla.outputs = !{!34}
!gla.noStaticUse = !{!7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !24, !26, !28, !30, !32}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"u_i", i32 12, i32* @u_i_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"u_f", i32 12, float* @u_f_typeProxy, metadata !2}
!4 = metadata !{metadata !"u_f2", i32 12, <2 x float>* @u_f2_typeProxy, metadata !2}
!5 = metadata !{metadata !"u_f3", i32 12, <3 x float>* @u_f3_typeProxy, metadata !2}
!6 = metadata !{metadata !"u_f4", i32 12, <4 x float>* @u_f4_typeProxy, metadata !2}
!7 = metadata !{metadata !"u_b", i32 12, i1* @u_b_typeProxy, metadata !2}
!8 = metadata !{metadata !"u_b2", i32 12, <2 x i1>* @u_b2_typeProxy, metadata !2}
!9 = metadata !{metadata !"u_b3", i32 12, <3 x i1>* @u_b3_typeProxy, metadata !2}
!10 = metadata !{metadata !"u_b4", i32 12, <4 x i1>* @u_b4_typeProxy, metadata !2}
!11 = metadata !{metadata !"u_i2", i32 12, <2 x i32>* @u_i2_typeProxy, metadata !2}
!12 = metadata !{metadata !"u_i3", i32 12, <3 x i32>* @u_i3_typeProxy, metadata !2}
!13 = metadata !{metadata !"u_i4", i32 12, <4 x i32>* @u_i4_typeProxy, metadata !2}
!14 = metadata !{metadata !"i_b", i32 12, i1* @i_b_typeProxy, metadata !2}
!15 = metadata !{metadata !"i_b2", i32 12, <2 x i1>* @i_b2_typeProxy, metadata !2}
!16 = metadata !{metadata !"i_b3", i32 12, <3 x i1>* @i_b3_typeProxy, metadata !2}
!17 = metadata !{metadata !"i_b4", i32 12, <4 x i1>* @i_b4_typeProxy, metadata !2}
!18 = metadata !{metadata !"i_i", i32 1, i32* @i_i_typeProxy, metadata !19}
!19 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!20 = metadata !{metadata !"i_f", i32 1, float* @i_f_typeProxy, metadata !21}
!21 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!22 = metadata !{metadata !"i_i4", i32 1, <4 x i32>* @i_i4_typeProxy, metadata !23}
!23 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!24 = metadata !{metadata !"i_i2", i32 1, <2 x i32>* @i_i2_typeProxy, metadata !25}
!25 = metadata !{i32 0, i32 0, i32 1028, null, i32 0}
!26 = metadata !{metadata !"i_i3", i32 1, <3 x i32>* @i_i3_typeProxy, metadata !27}
!27 = metadata !{i32 0, i32 0, i32 1029, null, i32 0}
!28 = metadata !{metadata !"i_f2", i32 1, <2 x float>* @i_f2_typeProxy, metadata !29}
!29 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!30 = metadata !{metadata !"i_f3", i32 1, <3 x float>* @i_f3_typeProxy, metadata !31}
!31 = metadata !{i32 0, i32 0, i32 1031, null, i32 1}
!32 = metadata !{metadata !"i_f4", i32 1, <4 x float>* @i_f4_typeProxy, metadata !33}
!33 = metadata !{i32 0, i32 0, i32 1032, null, i32 1}
!34 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !35}
!35 = metadata !{i32 0, i32 0, i32 1027, null, i32 0}
#version 130
// LunarGOO output
uniform int u_i;
uniform float u_f;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
uniform bool u_b;
uniform bvec2 u_b2;
uniform bvec3 u_b3;
uniform bvec4 u_b4;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform bool i_b;
uniform bvec2 i_b2;
uniform bvec3 i_b3;
uniform bvec4 i_b4;
flat in int i_i;
in float i_f;
flat in ivec4 i_i4;
flat in ivec2 i_i2;
flat in ivec3 i_i3;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
const int C_0 = 0;
const float C_0d0 = 0.0;
const ivec4 C_ivec4p0p = ivec4(0);
const vec4 C_vec4p0d0p = vec4(0.0);
const vec4 C_vec4p1d0p = vec4(1.0);
const vec4 C_vec4p2d0p = vec4(2.0);

void main()
{
	vec4 ternary_c1;
	bool H_c405hx1 = u_i != C_0;
	bool H_vze3i4 = u_f != C_0d0;
	bool H_3v0kym1 = H_c405hx1 ^^ H_vze3i4;
	bvec2 H_4d5wws1 = bvec2(H_c405hx1, H_vze3i4);
	bool H_04wo4n1 = i_i != C_0;
	bvec3 H_pgbbt4 = bvec3(H_c405hx1, H_vze3i4, H_04wo4n1);
	bool H_blm8w81 = i_f != C_0d0;
	bvec4 H_2qrvnw1 = bvec4(H_c405hx1, H_vze3i4, H_04wo4n1, H_blm8w81);
	int H_eqmvcn1 = (int(H_3v0kym1)) + (int(u_f));
	ivec2 H_knezu61 = (ivec2(H_4d5wws1)) + (ivec2(u_f2));
	ivec3 H_htmzc5 = (ivec3(H_pgbbt4)) + (ivec3(u_f3));
	ivec4 H_emw9961 = (ivec4(H_2qrvnw1)) + (ivec4(u_f4));
	float H_yl7ien = ((float(H_3v0kym1)) + (float(H_eqmvcn1))) + (float(H_eqmvcn1));
	vec4 H_i7fl9r1 = ((((vec4(H_2qrvnw1)) + (vec4(H_emw9961))) + (vec4(H_emw9961))) + (vec4(notEqual(i_i4, C_ivec4p0p)))) + (vec4(notEqual(u_f4, C_vec4p0d0p)));
	float H_4krsin1 = (H_yl7ien - (float(H_eqmvcn1))) + H_yl7ien;
	vec2 H_ps0kuo1 = vec2(H_4krsin1, (float(H_eqmvcn1)));
	vec3 H_rgz5i5 = vec3(H_4krsin1, (float(H_eqmvcn1)), H_4krsin1);
	vec4 H_lyrdtw1 = vec4((float(H_3v0kym1)), (float(H_eqmvcn1)), H_4krsin1, (float(H_eqmvcn1)));
	vec2 H_xefh6c = (((vec2(H_knezu61)) + H_ps0kuo1) + ((vec2(H_knezu61)) - ((vec2(H_4d5wws1)) + (vec2(H_knezu61))))) + (H_ps0kuo1 * vec2((float(H_eqmvcn1))));
	vec3 H_ye5v5w = (((vec3(H_htmzc5)) + H_rgz5i5) + ((vec3(H_htmzc5)) / ((vec3(H_htmzc5)) + (vec3(H_pgbbt4))))) + (H_rgz5i5 + vec3((float(H_eqmvcn1))));
	vec4 H_dmofn1 = (((vec4(H_emw9961)) + H_lyrdtw1) + H_i7fl9r1) + (vec4((float(H_eqmvcn1))) - H_lyrdtw1);
	ivec2 H_71jfj = ivec2((int(H_4krsin1)), H_eqmvcn1);
	ivec2 H_ces96r = H_71jfj + H_knezu61;
	ivec3 H_qz2hcm1 = ivec3((int(H_4krsin1)), H_eqmvcn1, (int(H_4krsin1)));
	ivec3 H_ljbimi1 = H_htmzc5 + H_qz2hcm1;
	ivec4 H_6v3wht = ivec4((int(H_3v0kym1)), H_eqmvcn1, (int(H_4krsin1)), H_eqmvcn1);
	ivec4 H_gaeivj1 = H_6v3wht + H_emw9961;
	if ((((H_c405hx1 || H_vze3i4) || H_04wo4n1) || H_blm8w81)) {
		bool H_8103gl1 = ((H_4krsin1 != (float(H_eqmvcn1))) || all(equal(H_xefh6c, (vec2(H_ces96r))))) || any(notEqual((vec3(H_ljbimi1)), H_ye5v5w));
		int H_e4r1d71 = (((((((H_ces96r.x + H_eqmvcn1) + H_ces96r.y) + H_gaeivj1.x) + H_gaeivj1.y) + H_gaeivj1.z) + H_gaeivj1.w) + H_ljbimi1.x) + H_ljbimi1.y;
		float H_5rd3zx = (H_8103gl1 ? ((H_3v0kym1 ? (float(H_eqmvcn1)) : H_xefh6c.x) + (H_c405hx1 ? H_ye5v5w.x : (float(H_ces96r.y)))) : H_4krsin1) + (float((H_e4r1d71 + H_ljbimi1.z)));
		float H_mt7w7b1 = (((((((H_5rd3zx + H_xefh6c.x) + H_xefh6c.y) + H_ye5v5w.x) + H_ye5v5w.y) + H_ye5v5w.z) + H_dmofn1.x) + H_dmofn1.y) + H_dmofn1.z;
		ternary_c1 = (vec4((H_dmofn1.w + H_mt7w7b1)) + C_vec4p1d0p);
	} else {
		ternary_c1 = C_vec4p2d0p;
	}
	
	gl_FragColor = ternary_c1;
	
}

#version 130
// LunarGOO output
uniform int u_i;
uniform float u_f;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
uniform bool u_b;
uniform bvec2 u_b2;
uniform bvec3 u_b3;
uniform bvec4 u_b4;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform bool i_b;
uniform bvec2 i_b2;
uniform bvec3 i_b3;
uniform bvec4 i_b4;
flat in int i_i;
in float i_f;
flat in ivec4 i_i4;
flat in ivec2 i_i2;
flat in ivec3 i_i3;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
const int C_0 = 0;
const float C_0d0 = 0.0;
const ivec4 C_ivec4p0p = ivec4(0);
const vec4 C_vec4p0d0p = vec4(0.0);
const vec4 C_vec4p1d0p = vec4(1.0);
const vec4 C_vec4p2d0p = vec4(2.0);

void main()
{
	vec4 ternary_c1;
	bool H_c2 = u_i != C_0;
	bool H_vze_c3 = u_f != C_0d0;
	bool H_uc4 = H_c2 ^^ H_vze_c3;
	bvec2 H_bj9eze1 = bvec2(H_c2, H_vze_c3);
	bool H_uc5 = i_i != C_0;
	bvec3 H_ayqgqd1 = bvec3(H_c2, H_vze_c3, H_uc5);
	bool H_blm_c6 = i_f != C_0d0;
	bvec4 H_jl1c3h = bvec4(H_c2, H_vze_c3, H_uc5, H_blm_c6);
	int H_eqmvcn_c7 = (int(H_uc4)) + (int(u_f));
	ivec2 H_knezu_c8 = (ivec2(H_bj9eze1)) + (ivec2(u_f2));
	ivec3 H_htmzc_c9 = (ivec3(H_ayqgqd1)) + (ivec3(u_f3));
	ivec4 H_emw_c10 = (ivec4(H_jl1c3h)) + (ivec4(u_f4));
	float H_yl_c11 = ((float(H_eqmvcn_c7)) + (float(H_uc4))) + (float(H_eqmvcn_c7));
	vec4 H_i_c12 = ((((vec4(H_emw_c10)) + (vec4(H_jl1c3h))) + (vec4(H_emw_c10))) + (vec4(notEqual(i_i4, C_ivec4p0p)))) + (vec4(notEqual(u_f4, C_vec4p0d0p)));
	float H_uc13 = (H_yl_c11 - (float(H_eqmvcn_c7))) + H_yl_c11;
	vec2 H_hucbnf1 = vec2(H_uc13, (float(H_eqmvcn_c7)));
	vec3 H_94nh4j1 = vec3(H_uc13, (float(H_eqmvcn_c7)), H_uc13);
	vec4 H_qw49ix = vec4((float(H_uc4)), (float(H_eqmvcn_c7)), H_uc13, (float(H_eqmvcn_c7)));
	vec2 H_xefh_c14 = (((vec2(H_knezu_c8)) + H_hucbnf1) + ((vec2(H_knezu_c8)) - ((vec2(H_bj9eze1)) + (vec2(H_knezu_c8))))) + (H_hucbnf1 * vec2((float(H_eqmvcn_c7))));
	vec3 H_ye_c15 = (((vec3(H_htmzc_c9)) + H_94nh4j1) + ((vec3(H_htmzc_c9)) / ((vec3(H_ayqgqd1)) + (vec3(H_htmzc_c9))))) + (H_94nh4j1 + vec3((float(H_eqmvcn_c7))));
	vec4 H_dmofn_c16 = (((vec4(H_emw_c10)) + H_qw49ix) + H_i_c12) + (vec4((float(H_eqmvcn_c7))) - H_qw49ix);
	ivec2 H_re6i3s = ivec2((int(H_uc13)), H_eqmvcn_c7);
	ivec2 H_ces_c17 = H_knezu_c8 + H_re6i3s;
	ivec3 H_ity8l4 = ivec3((int(H_uc13)), H_eqmvcn_c7, (int(H_uc13)));
	ivec3 H_ljbimi_c18 = H_htmzc_c9 + H_ity8l4;
	ivec4 H_xuvubm1 = ivec4((int(H_uc4)), H_eqmvcn_c7, (int(H_uc13)), H_eqmvcn_c7);
	ivec4 H_gaeivj_c19 = H_emw_c10 + H_xuvubm1;
	if ((((H_c2 || H_vze_c3) || H_uc5) || H_blm_c6)) {
		bool H_uc20 = ((H_uc13 != (float(H_eqmvcn_c7))) || all(equal(H_xefh_c14, (vec2(H_ces_c17))))) || any(notEqual((vec3(H_ljbimi_c18)), H_ye_c15));
		int H_oaalyh = ((((((H_ces_c17.x + H_eqmvcn_c7) + H_ces_c17.y) + H_gaeivj_c19.x) + H_gaeivj_c19.y) + H_gaeivj_c19.z) + H_gaeivj_c19.w) + H_ljbimi_c18.x;
		float H_uc21 = (H_uc20 ? ((H_c2 ? H_ye_c15.x : (float(H_ces_c17.y))) + (H_uc4 ? (float(H_eqmvcn_c7)) : H_xefh_c14.x)) : H_uc13) + (float(((H_ljbimi_c18.y + H_oaalyh) + H_ljbimi_c18.z)));
		float H_mt_c22 = (((((((H_uc21 + H_xefh_c14.x) + H_xefh_c14.y) + H_ye_c15.x) + H_ye_c15.y) + H_ye_c15.z) + H_dmofn_c16.x) + H_dmofn_c16.y) + H_dmofn_c16.z;
		ternary_c1 = (vec4((H_dmofn_c16.w + H_mt_c22)) + C_vec4p1d0p);
	} else {
		ternary_c1 = C_vec4p2d0p;
	}
	
	gl_FragColor = ternary_c1;
	
}

