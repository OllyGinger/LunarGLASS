test.frag
#version 110
// LunarGOO output
uniform sampler2D texSampler2D;
uniform vec2 scale;
uniform sampler3D texSampler3D;
uniform vec4 u;
uniform float blend;
varying vec2 t;
varying vec3 coords;
const float const28 = 1.789;

void main()
{
    vec2 temp21 = scale + t;
    vec2 temp22 = temp21 / scale;
    vec4 temp23 = texture2D(texSampler2D, temp22);
    vec4 temp24 = temp23.wzyx;
    vec4 temp25 = texture3D(texSampler3D, coords);
    vec4 temp26 = temp24 + temp25;
    float temp27 = blend * const28;
    vec4 gla_gl_FragColor_c1 = mix(temp26, u, temp27);
    gl_FragColor = gla_gl_FragColor_c1;
    
}


test.vert
#version 130
// LunarGOO output
uniform mat4 transform;
in vec2 uv_in;
in vec4 position;
out vec2 uv;

void main()
{
    uv = uv_in;
    vec4 temp21 = ftransform();
    vec4 gla_gl_Position_c1 = position + temp21;
    gl_Position = gla_gl_Position_c1;
    
}


deepRvalue.frag
#version 120
// LunarGOO output
uniform sampler2D sampler;
const vec2 const22 = vec2(0.5);
const float const24 = 0.1;
const float const26 = 7.0;
const float const27 = 19.0;
const vec4 const31 = vec4(361.0, 841.0, 5.0, 0.0);

void main()
{
    vec4 temp21 = texture2D(sampler, const22);
    bool temp23 = temp21.y > const24;
    float temp25 = temp23 ? const26 : const27;
    float temp28 = temp21.y + temp25;
    float temp29 = const26 + temp28;
    vec4 temp30 = const31;
    temp30.w = temp29;
    gl_FragColor = temp30;
    
}


block.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations

struct S {
    mediump vec4 u;
    mediump uvec4 v;
    lowp isampler2D sampler;
    mediump vec3 w;
    mediump mat3 m3a[5];
};

uniform S s;
uniform fooBlock {
    mediump vec4 bu;
    mediump vec2 bw;
    mediump uvec4 bv;
    S bs;
    mediump mat2 bm2;
    mediump mat4 m4a[8];
} ;
uniform barBlock {
    mediump vec4 nbu;
    mediump mat3 nbm;
    mediump uvec4 nbv;
    mediump int ni;
} inst[4];
out mediump vec4 color;

void main()
{
    mediump ivec4 temp21 = texture(s.sampler, bw);
    mediump vec4 temp22 = vec4(temp21);
    mediump vec4 temp23 = inst[3].nbu + temp22;
    mediump vec4 color_c1 = bu + temp23;
    color = color_c1;
    
}


length.frag
#version 120
// LunarGOO output
uniform vec4 u[3];
varying vec2 v[2];
const vec4 const21 = vec4(30.0);

void main()
{
    gl_FragColor = const21;
    
}


matrix2.frag
#version 150 core
// LunarGOO output
uniform mat3x4 un34;
uniform mat4x3 um43;
uniform mat4 um4;
uniform mat2 um2;
uniform mat3 um3;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
in vec4 v;
in vec3 u;
in vec3 Color;
out vec4 FragColor;
const vec4 const37 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 const39 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 const41 = vec4(0.0, 0.0, 4.3, 0.0);
const float const43 = 1.0;
const vec4 const156 = vec4(0.0, 0.0, 0.0, 1.0);
const float const158 = 0.0;
const float const285 = 0.0;

void main()
{
    float element_c1 = u.x * v.x;
    float element_c2 = u.x * v.y;
    float element_c3 = u.x * v.z;
    float element_c4 = u.x * v.w;
    vec4 temp25 = vec4(element_c1, element_c2, element_c3, element_c4);
    float element_c5 = u.y * v.x;
    float element_c6 = u.y * v.y;
    float element_c7 = u.y * v.z;
    float element_c8 = u.y * v.w;
    vec4 temp30 = vec4(element_c5, element_c6, element_c7, element_c8);
    float element_c9 = u.z * v.x;
    float element_c10 = u.z * v.y;
    float element_c11 = u.z * v.z;
    float element_c12 = u.z * v.w;
    vec4 temp35 = vec4(element_c9, element_c10, element_c11, element_c12);
    vec4 column_c13 = temp25 + const37;
    vec4 column_c14 = temp30 + const39;
    vec4 column_c15 = temp35 + const41;
    vec4 temp42 = vec4(Color.x, Color.y, Color.z, const43);
    float dotres_c16 = dot(temp42, column_c13);
    float dotres_c17 = dot(temp42, column_c14);
    float dotres_c18 = dot(temp42, column_c15);
    vec4 temp47 = vec4(dotres_c16, dotres_c17, dotres_c18, const43);
    vec4 FragColor_c19 = temp42 * temp47;
    FragColor = FragColor_c19;
    float temp49 = column_c13.x * v.x;
    float temp50 = column_c13.y * v.x;
    float temp51 = column_c13.z * v.x;
    float temp52 = column_c13.w * v.x;
    float temp53 = column_c14.x * v.x;
    float temp54 = column_c14.y * v.x;
    float temp55 = column_c14.z * v.x;
    float temp56 = column_c14.w * v.x;
    float temp57 = column_c15.x * v.x;
    float temp58 = column_c15.y * v.x;
    float temp59 = column_c15.z * v.x;
    float temp60 = column_c15.w * v.x;
    vec4 column_c20 = un34[0];
    vec4 column_c21 = un34[1];
    vec4 column_c22 = un34[2];
    vec3 rightColumn_c23 = um43[0];
    float product_c24 = rightColumn_c23.x * temp49;
    float product_c25 = rightColumn_c23.y * temp53;
    float dotProduct_c26 = product_c24 + product_c25;
    float product_c27 = rightColumn_c23.z * temp57;
    float dotProduct_c28 = dotProduct_c26 + product_c27;
    float product_c29 = rightColumn_c23.x * temp50;
    float product_c30 = rightColumn_c23.y * temp54;
    float dotProduct_c31 = product_c29 + product_c30;
    float product_c32 = rightColumn_c23.z * temp58;
    float dotProduct_c33 = dotProduct_c31 + product_c32;
    float product_c34 = rightColumn_c23.x * temp51;
    float product_c35 = rightColumn_c23.y * temp55;
    float dotProduct_c36 = product_c34 + product_c35;
    float product_c37 = rightColumn_c23.z * temp59;
    float dotProduct_c38 = dotProduct_c36 + product_c37;
    float product_c39 = rightColumn_c23.x * temp52;
    float product_c40 = rightColumn_c23.y * temp56;
    float dotProduct_c41 = product_c39 + product_c40;
    float product_c42 = rightColumn_c23.z * temp60;
    float dotProduct_c43 = dotProduct_c41 + product_c42;
    vec4 temp85 = vec4(dotProduct_c28, dotProduct_c33, dotProduct_c38, dotProduct_c43);
    vec3 rightColumn_c44 = um43[1];
    float product_c45 = rightColumn_c44.x * temp49;
    float product_c46 = rightColumn_c44.y * temp53;
    float dotProduct_c47 = product_c45 + product_c46;
    float product_c48 = rightColumn_c44.z * temp57;
    float dotProduct_c49 = dotProduct_c47 + product_c48;
    float product_c50 = rightColumn_c44.x * temp50;
    float product_c51 = rightColumn_c44.y * temp54;
    float dotProduct_c52 = product_c50 + product_c51;
    float product_c53 = rightColumn_c44.z * temp58;
    float dotProduct_c54 = dotProduct_c52 + product_c53;
    float product_c55 = rightColumn_c44.x * temp51;
    float product_c56 = rightColumn_c44.y * temp55;
    float dotProduct_c57 = product_c55 + product_c56;
    float product_c58 = rightColumn_c44.z * temp59;
    float dotProduct_c59 = dotProduct_c57 + product_c58;
    float product_c60 = rightColumn_c44.x * temp52;
    float product_c61 = rightColumn_c44.y * temp56;
    float dotProduct_c62 = product_c60 + product_c61;
    float product_c63 = rightColumn_c44.z * temp60;
    float dotProduct_c64 = dotProduct_c62 + product_c63;
    vec4 temp107 = vec4(dotProduct_c49, dotProduct_c54, dotProduct_c59, dotProduct_c64);
    vec3 rightColumn_c65 = um43[2];
    float product_c66 = rightColumn_c65.x * temp49;
    float product_c67 = rightColumn_c65.y * temp53;
    float dotProduct_c68 = product_c66 + product_c67;
    float product_c69 = rightColumn_c65.z * temp57;
    float dotProduct_c70 = dotProduct_c68 + product_c69;
    float product_c71 = rightColumn_c65.x * temp50;
    float product_c72 = rightColumn_c65.y * temp54;
    float dotProduct_c73 = product_c71 + product_c72;
    float product_c74 = rightColumn_c65.z * temp58;
    float dotProduct_c75 = dotProduct_c73 + product_c74;
    float product_c76 = rightColumn_c65.x * temp51;
    float product_c77 = rightColumn_c65.y * temp55;
    float dotProduct_c78 = product_c76 + product_c77;
    float product_c79 = rightColumn_c65.z * temp59;
    float dotProduct_c80 = dotProduct_c78 + product_c79;
    float product_c81 = rightColumn_c65.x * temp52;
    float product_c82 = rightColumn_c65.y * temp56;
    float dotProduct_c83 = product_c81 + product_c82;
    float product_c84 = rightColumn_c65.z * temp60;
    float dotProduct_c85 = dotProduct_c83 + product_c84;
    vec4 temp129 = vec4(dotProduct_c70, dotProduct_c75, dotProduct_c80, dotProduct_c85);
    vec3 rightColumn_c86 = um43[3];
    float product_c87 = rightColumn_c86.x * temp49;
    float product_c88 = rightColumn_c86.y * temp53;
    float dotProduct_c89 = product_c87 + product_c88;
    float product_c90 = rightColumn_c86.z * temp57;
    float dotProduct_c91 = dotProduct_c89 + product_c90;
    float product_c92 = rightColumn_c86.x * temp50;
    float product_c93 = rightColumn_c86.y * temp54;
    float dotProduct_c94 = product_c92 + product_c93;
    float product_c95 = rightColumn_c86.z * temp58;
    float dotProduct_c96 = dotProduct_c94 + product_c95;
    float product_c97 = rightColumn_c86.x * temp51;
    float product_c98 = rightColumn_c86.y * temp55;
    float dotProduct_c99 = product_c97 + product_c98;
    float product_c100 = rightColumn_c86.z * temp59;
    float dotProduct_c101 = dotProduct_c99 + product_c100;
    float product_c102 = rightColumn_c86.x * temp52;
    float product_c103 = rightColumn_c86.y * temp56;
    float dotProduct_c104 = product_c102 + product_c103;
    float product_c105 = rightColumn_c86.z * temp60;
    float dotProduct_c106 = dotProduct_c104 + product_c105;
    vec4 temp151 = vec4(dotProduct_c91, dotProduct_c96, dotProduct_c101, dotProduct_c106);
    vec4 column_c107 = column_c20 + temp85;
    vec4 column_c108 = column_c21 + temp107;
    vec4 column_c109 = column_c22 + temp129;
    vec4 column_c110 = temp151 + const156;
    float temp157 = const158 - column_c107.x;
    float temp159 = const158 - column_c107.y;
    float temp160 = const158 - column_c107.z;
    float temp161 = const158 - column_c107.w;
    float temp162 = const158 - column_c108.x;
    float temp163 = const158 - column_c108.y;
    float temp164 = const158 - column_c108.z;
    float temp165 = const158 - column_c108.w;
    float temp166 = const158 - column_c109.x;
    float temp167 = const158 - column_c109.y;
    float temp168 = const158 - column_c109.z;
    float temp169 = const158 - column_c109.w;
    float temp170 = const158 - column_c110.x;
    float temp171 = const158 - column_c110.y;
    float temp172 = const158 - column_c110.z;
    float temp173 = const158 - column_c110.w;
    float product_c111 = temp157 * v.x;
    float product_c112 = temp162 * v.y;
    float dotProduct_c113 = product_c111 + product_c112;
    float product_c114 = temp166 * v.z;
    float dotProduct_c115 = dotProduct_c113 + product_c114;
    float product_c116 = temp170 * v.w;
    float dotProduct_c117 = dotProduct_c115 + product_c116;
    float product_c118 = temp159 * v.x;
    float product_c119 = temp163 * v.y;
    float dotProduct_c120 = product_c118 + product_c119;
    float product_c121 = temp167 * v.z;
    float dotProduct_c122 = dotProduct_c120 + product_c121;
    float product_c123 = temp171 * v.w;
    float dotProduct_c124 = dotProduct_c122 + product_c123;
    float product_c125 = temp160 * v.x;
    float product_c126 = temp164 * v.y;
    float dotProduct_c127 = product_c125 + product_c126;
    float product_c128 = temp168 * v.z;
    float dotProduct_c129 = dotProduct_c127 + product_c128;
    float product_c130 = temp172 * v.w;
    float dotProduct_c131 = dotProduct_c129 + product_c130;
    float product_c132 = temp161 * v.x;
    float product_c133 = temp165 * v.y;
    float dotProduct_c134 = product_c132 + product_c133;
    float product_c135 = temp169 * v.z;
    float dotProduct_c136 = dotProduct_c134 + product_c135;
    float product_c137 = temp173 * v.w;
    float dotProduct_c138 = dotProduct_c136 + product_c137;
    vec4 temp202 = vec4(dotProduct_c117, dotProduct_c124, dotProduct_c131, dotProduct_c138);
    vec4 FragColor_c139 = FragColor + temp202;
    vec4 column_c140 = column_c107 * column_c107;
    vec4 column_c141 = column_c108 * column_c108;
    vec4 column_c142 = column_c109 * column_c109;
    vec4 column_c143 = column_c110 * column_c110;
    float dotres_c144 = dot(FragColor_c139, column_c140);
    float dotres_c145 = dot(FragColor_c139, column_c141);
    float dotres_c146 = dot(FragColor_c139, column_c142);
    float dotres_c147 = dot(FragColor_c139, column_c143);
    vec4 temp212 = vec4(dotres_c144, dotres_c145, dotres_c146, dotres_c147);
    FragColor = temp212;
    vec3 column_c148 = um43[0];
    vec3 column_c149 = um43[1];
    vec3 column_c150 = um43[2];
    vec3 column_c151 = um43[3];
    vec4 temp217 = vec4(column_c148.x, column_c149.x, column_c150.x, column_c151.x);
    vec4 temp218 = vec4(column_c148.y, column_c149.y, column_c150.y, column_c151.y);
    vec4 temp219 = vec4(column_c148.z, column_c149.z, column_c150.z, column_c151.z);
    float dotres_c152 = dot(temp212, temp217);
    float dotres_c153 = dot(temp212, temp218);
    float dotres_c154 = dot(temp212, temp219);
    vec4 temp223 = vec4(dotres_c152, dotres_c153, dotres_c154, const43);
    vec4 FragColor_c155 = temp212 * temp223;
    FragColor = FragColor_c155;
    vec4 column_c156 = um4[0];
    vec4 column_c157 = um4[1];
    vec4 column_c158 = um4[2];
    vec4 column_c159 = um4[3];
    float temp229 = column_c158.z * column_c159.w;
    float temp230 = column_c158.w * column_c159.z;
    float temp231 = temp229 - temp230;
    float temp232 = column_c157.y * temp231;
    float temp233 = column_c157.z * column_c159.w;
    float temp234 = column_c157.w * column_c159.z;
    float temp235 = temp233 - temp234;
    float temp236 = column_c158.y * temp235;
    float temp237 = temp232 - temp236;
    float temp238 = column_c157.z * column_c158.w;
    float temp239 = column_c157.w * column_c158.z;
    float temp240 = temp238 - temp239;
    float temp241 = column_c159.y * temp240;
    float temp242 = temp237 + temp241;
    float temp243 = column_c156.x * temp242;
    float temp244 = column_c156.y * temp231;
    float temp245 = column_c156.z * column_c159.w;
    float temp246 = column_c156.w * column_c159.z;
    float temp247 = temp245 - temp246;
    float temp248 = column_c158.y * temp247;
    float temp249 = temp244 - temp248;
    float temp250 = column_c156.z * column_c158.w;
    float temp251 = column_c156.w * column_c158.z;
    float temp252 = temp250 - temp251;
    float temp253 = column_c159.y * temp252;
    float temp254 = temp249 + temp253;
    float temp255 = column_c157.x * temp254;
    float temp256 = temp243 - temp255;
    float temp257 = column_c156.y * temp235;
    float temp258 = column_c157.y * temp247;
    float temp259 = temp257 - temp258;
    float temp260 = column_c156.z * column_c157.w;
    float temp261 = column_c156.w * column_c157.z;
    float temp262 = temp260 - temp261;
    float temp263 = column_c159.y * temp262;
    float temp264 = temp259 + temp263;
    float temp265 = column_c158.x * temp264;
    float temp266 = temp256 + temp265;
    float temp267 = column_c156.y * temp240;
    float temp268 = column_c157.y * temp252;
    float temp269 = temp267 - temp268;
    float temp270 = column_c158.y * temp262;
    float temp271 = temp269 + temp270;
    float temp272 = column_c159.x * temp271;
    float temp273 = temp266 - temp272;
    vec4 temp274 = vec4(temp273);
    vec4 FragColor_c160 = FragColor_c155 * temp274;
    FragColor = FragColor_c160;
    vec2 column_c161 = um2[0];
    vec2 column_c162 = um2[1];
    float temp278 = column_c161.x * column_c162.y;
    float temp279 = column_c161.y * column_c162.x;
    float temp280 = temp278 - temp279;
    float temp281 = const43 / temp280;
    float temp282 = column_c162.y * temp281;
    float temp283 = column_c162.x * temp281;
    float temp284 = const285 - temp283;
    float temp286 = column_c161.y * temp281;
    float temp287 = const285 - temp286;
    float temp288 = column_c161.x * temp281;
    vec4 temp289 = vec4(temp282, temp284, temp287, temp288);
    vec4 FragColor_c163 = FragColor_c160 * temp289;
    FragColor = FragColor_c163;
    vec3 column_c164 = um3[0];
    vec3 column_c165 = um3[1];
    vec3 column_c166 = um3[2];
    float temp294 = column_c164.x * column_c166.y;
    float temp295 = column_c164.y * column_c166.x;
    float temp296 = temp294 - temp295;
    float temp297 = column_c165.y * column_c166.z;
    float temp298 = column_c165.z * column_c166.y;
    float temp299 = temp297 - temp298;
    float temp300 = column_c164.x * temp299;
    float temp301 = column_c164.y * column_c166.z;
    float temp302 = column_c164.z * column_c166.y;
    float temp303 = temp301 - temp302;
    float temp304 = column_c165.x * temp303;
    float temp305 = temp300 - temp304;
    float temp306 = column_c164.y * column_c165.z;
    float temp307 = column_c164.z * column_c165.y;
    float temp308 = temp306 - temp307;
    float temp309 = column_c166.x * temp308;
    float temp310 = temp305 + temp309;
    float temp311 = const43 / temp310;
    float temp312 = temp296 * temp311;
    float temp313 = const285 - temp312;
    vec4 temp314 = vec4(temp313);
    vec4 FragColor_c167 = FragColor_c163 * temp314;
    FragColor = FragColor_c167;
    vec4 column_c168 = um4[0];
    vec4 column_c169 = um4[1];
    vec4 column_c170 = um4[2];
    vec4 column_c171 = um4[3];
    float temp320 = column_c170.z * column_c171.w;
    float temp321 = column_c170.w * column_c171.z;
    float temp322 = temp320 - temp321;
    float temp323 = column_c169.y * temp322;
    float temp324 = column_c169.z * column_c171.w;
    float temp325 = column_c169.w * column_c171.z;
    float temp326 = temp324 - temp325;
    float temp327 = column_c170.y * temp326;
    float temp328 = temp323 - temp327;
    float temp329 = column_c169.z * column_c170.w;
    float temp330 = column_c169.w * column_c170.z;
    float temp331 = temp329 - temp330;
    float temp332 = column_c171.y * temp331;
    float temp333 = temp328 + temp332;
    float temp334 = column_c168.y * temp322;
    float temp335 = column_c168.z * column_c171.w;
    float temp336 = column_c168.w * column_c171.z;
    float temp337 = temp335 - temp336;
    float temp338 = column_c170.y * temp337;
    float temp339 = temp334 - temp338;
    float temp340 = column_c168.z * column_c170.w;
    float temp341 = column_c168.w * column_c170.z;
    float temp342 = temp340 - temp341;
    float temp343 = column_c171.y * temp342;
    float temp344 = temp339 + temp343;
    float temp345 = column_c168.y * temp326;
    float temp346 = column_c169.y * temp337;
    float temp347 = temp345 - temp346;
    float temp348 = column_c168.z * column_c169.w;
    float temp349 = column_c168.w * column_c169.z;
    float temp350 = temp348 - temp349;
    float temp351 = column_c171.y * temp350;
    float temp352 = temp347 + temp351;
    float temp353 = column_c168.y * temp331;
    float temp354 = column_c169.y * temp342;
    float temp355 = temp353 - temp354;
    float temp356 = column_c170.y * temp350;
    float temp357 = temp355 + temp356;
    float temp358 = column_c169.x * temp322;
    float temp359 = column_c170.x * temp326;
    float temp360 = temp358 - temp359;
    float temp361 = column_c171.x * temp331;
    float temp362 = temp360 + temp361;
    float temp363 = column_c168.x * temp322;
    float temp364 = column_c170.x * temp337;
    float temp365 = temp363 - temp364;
    float temp366 = column_c171.x * temp342;
    float temp367 = temp365 + temp366;
    float temp368 = column_c168.x * temp326;
    float temp369 = column_c169.x * temp337;
    float temp370 = temp368 - temp369;
    float temp371 = column_c171.x * temp350;
    float temp372 = temp370 + temp371;
    float temp373 = column_c168.x * temp331;
    float temp374 = column_c169.x * temp342;
    float temp375 = temp373 - temp374;
    float temp376 = column_c170.x * temp350;
    float temp377 = temp375 + temp376;
    float temp378 = column_c170.y * column_c171.w;
    float temp379 = column_c170.w * column_c171.y;
    float temp380 = temp378 - temp379;
    float temp381 = column_c169.x * temp380;
    float temp382 = column_c169.y * column_c171.w;
    float temp383 = column_c169.w * column_c171.y;
    float temp384 = temp382 - temp383;
    float temp385 = column_c170.x * temp384;
    float temp386 = temp381 - temp385;
    float temp387 = column_c169.y * column_c170.w;
    float temp388 = column_c169.w * column_c170.y;
    float temp389 = temp387 - temp388;
    float temp390 = column_c171.x * temp389;
    float temp391 = temp386 + temp390;
    float temp392 = column_c168.x * temp380;
    float temp393 = column_c168.y * column_c171.w;
    float temp394 = column_c168.w * column_c171.y;
    float temp395 = temp393 - temp394;
    float temp396 = column_c170.x * temp395;
    float temp397 = temp392 - temp396;
    float temp398 = column_c168.y * column_c170.w;
    float temp399 = column_c168.w * column_c170.y;
    float temp400 = temp398 - temp399;
    float temp401 = column_c171.x * temp400;
    float temp402 = temp397 + temp401;
    float temp403 = column_c168.x * temp384;
    float temp404 = column_c169.x * temp395;
    float temp405 = temp403 - temp404;
    float temp406 = column_c168.y * column_c169.w;
    float temp407 = column_c168.w * column_c169.y;
    float temp408 = temp406 - temp407;
    float temp409 = column_c171.x * temp408;
    float temp410 = temp405 + temp409;
    float temp411 = column_c168.x * temp389;
    float temp412 = column_c169.x * temp400;
    float temp413 = temp411 - temp412;
    float temp414 = column_c170.x * temp408;
    float temp415 = temp413 + temp414;
    float temp416 = column_c170.y * column_c171.z;
    float temp417 = column_c170.z * column_c171.y;
    float temp418 = temp416 - temp417;
    float temp419 = column_c169.x * temp418;
    float temp420 = column_c169.y * column_c171.z;
    float temp421 = column_c169.z * column_c171.y;
    float temp422 = temp420 - temp421;
    float temp423 = column_c170.x * temp422;
    float temp424 = temp419 - temp423;
    float temp425 = column_c169.y * column_c170.z;
    float temp426 = column_c169.z * column_c170.y;
    float temp427 = temp425 - temp426;
    float temp428 = column_c171.x * temp427;
    float temp429 = temp424 + temp428;
    float temp430 = column_c168.x * temp418;
    float temp431 = column_c168.y * column_c171.z;
    float temp432 = column_c168.z * column_c171.y;
    float temp433 = temp431 - temp432;
    float temp434 = column_c170.x * temp433;
    float temp435 = temp430 - temp434;
    float temp436 = column_c168.y * column_c170.z;
    float temp437 = column_c168.z * column_c170.y;
    float temp438 = temp436 - temp437;
    float temp439 = column_c171.x * temp438;
    float temp440 = temp435 + temp439;
    float temp441 = column_c168.x * temp422;
    float temp442 = column_c169.x * temp433;
    float temp443 = temp441 - temp442;
    float temp444 = column_c168.y * column_c169.z;
    float temp445 = column_c168.z * column_c169.y;
    float temp446 = temp444 - temp445;
    float temp447 = column_c171.x * temp446;
    float temp448 = temp443 + temp447;
    float temp449 = column_c168.x * temp427;
    float temp450 = column_c169.x * temp438;
    float temp451 = temp449 - temp450;
    float temp452 = column_c170.x * temp446;
    float temp453 = temp451 + temp452;
    float temp454 = column_c168.x * temp333;
    float temp455 = column_c169.x * temp344;
    float temp456 = temp454 - temp455;
    float temp457 = column_c170.x * temp352;
    float temp458 = temp456 + temp457;
    float temp459 = column_c171.x * temp357;
    float temp460 = temp458 - temp459;
    float temp461 = const43 / temp460;
    float temp462 = temp333 * temp461;
    float temp463 = temp362 * temp461;
    float temp464 = const285 - temp463;
    float temp465 = temp391 * temp461;
    float temp466 = temp429 * temp461;
    float temp467 = const285 - temp466;
    float temp468 = temp344 * temp461;
    float temp469 = const285 - temp468;
    float temp470 = temp367 * temp461;
    float temp471 = temp402 * temp461;
    float temp472 = const285 - temp471;
    float temp473 = temp440 * temp461;
    float temp474 = temp352 * temp461;
    float temp475 = temp372 * temp461;
    float temp476 = const285 - temp475;
    float temp477 = temp410 * temp461;
    float temp478 = temp448 * temp461;
    float temp479 = const285 - temp478;
    float temp480 = temp357 * temp461;
    float temp481 = const285 - temp480;
    float temp482 = temp377 * temp461;
    float temp483 = temp415 * temp461;
    float temp484 = const285 - temp483;
    float temp485 = temp453 * temp461;
    vec4 temp486 = vec4(temp462, temp469, temp474, temp481);
    vec4 temp487 = vec4(temp464, temp470, temp476, temp482);
    vec4 temp488 = vec4(temp465, temp472, temp477, temp484);
    vec4 temp489 = vec4(temp467, temp473, temp479, temp485);
    float dotres_c172 = dot(FragColor_c167, temp486);
    float dotres_c173 = dot(FragColor_c167, temp487);
    float dotres_c174 = dot(FragColor_c167, temp488);
    float dotres_c175 = dot(FragColor_c167, temp489);
    vec4 temp494 = vec4(dotres_c172, dotres_c173, dotres_c174, dotres_c175);
    FragColor = temp494;
    vec4 leftColumn_c176 = un34[0];
    vec4 column_c177 = leftColumn_c176 * leftColumn_c176;
    vec4 leftColumn_c178 = un34[1];
    vec4 column_c179 = leftColumn_c178 * leftColumn_c178;
    vec4 leftColumn_c180 = un34[2];
    vec4 column_c181 = leftColumn_c180 * leftColumn_c180;
    float dotres_c182 = dot(temp494, column_c177);
    float dotres_c183 = dot(temp494, column_c179);
    float dotres_c184 = dot(temp494, column_c181);
    vec4 temp504 = vec4(dotres_c182, dotres_c183, dotres_c184, dotres_c175);
    FragColor = temp504;
    
}


matrixAgg.frag
#version 120
// LunarGOO output
struct s {
    int count;
    mat4x3 sm[12];
};

uniform s us;
uniform int i;
uniform mat4x3 am[8];
uniform mat4x3 m;
varying vec3 v;

void main()
{
    vec3 leftColumn_c1 = us.sm[i][0];
    vec3 rightColumn_c2 = am[4][0];
    vec3 column_c3 = leftColumn_c1 + rightColumn_c2;
    vec3 leftColumn_c4 = us.sm[i][1];
    vec3 rightColumn_c5 = am[4][1];
    vec3 column_c6 = leftColumn_c4 + rightColumn_c5;
    vec3 leftColumn_c7 = us.sm[i][2];
    vec3 rightColumn_c8 = am[4][2];
    vec3 column_c9 = leftColumn_c7 + rightColumn_c8;
    vec3 leftColumn_c10 = us.sm[i][3];
    vec3 rightColumn_c11 = am[4][3];
    vec3 column_c12 = leftColumn_c10 + rightColumn_c11;
    float dotres_c13 = dot(v, column_c3);
    float dotres_c14 = dot(v, column_c6);
    float dotres_c15 = dot(v, column_c9);
    float dotres_c16 = dot(v, column_c12);
    vec4 temp37 = vec4(dotres_c13, dotres_c14, dotres_c15, dotres_c16);
    gl_FragColor = temp37;
    
}


texture.frag
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
uniform vec4 u;
uniform float blend;
uniform vec2 scale;
in vec2 coords2D;
in vec2 t;
const float const22 = 1.789;
const float const24 = 2.0;
const vec4 const29 = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 const40 = vec3(1.789, 2.718, 3.453);
const ivec2 const73 = ivec2(0, 5);
const int const74i_1 = 1;
const ivec2 const84 = ivec2(3, -7);
const float const89 = 3.0;

void main()
{
    vec4 temp21 = texture(texSampler1D, const22);
    vec4 temp23 = texture(texSampler1D, const22, const24);
    vec4 color_c1 = temp21 + temp23;
    vec4 temp26 = textureProj(texSampler1D, coords2D);
    vec4 color_c2 = color_c1 + temp26;
    vec4 temp28 = textureProj(texSampler1D, const29);
    vec4 color_c3 = color_c2 + temp28;
    vec4 temp31 = textureProj(texSampler1D, coords2D, const24);
    vec4 color_c4 = color_c3 + temp31;
    vec4 temp33 = textureProj(texSampler1D, const29, const24);
    vec4 color_c5 = color_c4 + temp33;
    vec4 temp35 = texture(texSampler2D, coords2D);
    vec4 color_c6 = color_c5 + temp35;
    vec4 temp37 = texture(texSampler2D, coords2D, const24);
    vec4 color_c7 = color_c6 + temp37;
    vec4 temp39 = textureProj(texSampler2D, const40);
    vec4 color_c8 = color_c7 + temp39;
    vec4 temp42 = textureProj(texSampler2D, const29, const24);
    vec4 color_c9 = color_c8 + temp42;
    vec4 temp44 = texture(texSampler3D, const40);
    vec4 color_c10 = color_c9 + temp44;
    vec4 temp46 = texture(texSampler3D, const40, const24);
    vec4 color_c11 = color_c10 + temp46;
    vec4 temp48 = textureProj(texSampler3D, const29);
    vec4 color_c12 = color_c11 + temp48;
    vec4 temp50 = textureProj(texSampler3D, const29, const24);
    vec4 color_c13 = color_c12 + temp50;
    vec4 temp52 = texture(texSamplerCube, const40);
    vec4 color_c14 = color_c13 + temp52;
    vec4 temp54 = texture(texSamplerCube, const40, const24);
    vec4 color_c15 = color_c14 + temp54;
    vec4 temp56 = shadow1D(shadowSampler1D, const40);
    vec4 color_c16 = color_c15 + temp56;
    vec4 temp58 = shadow1D(shadowSampler1D, const40, const24);
    vec4 color_c17 = color_c16 + temp58;
    vec4 temp60 = shadow2D(shadowSampler2D, const40);
    vec4 color_c18 = color_c17 + temp60;
    vec4 temp62 = shadow2D(shadowSampler2D, const40, const24);
    vec4 color_c19 = color_c18 + temp62;
    vec4 temp64 = shadow1DProj(shadowSampler1D, const29);
    vec4 color_c20 = color_c19 + temp64;
    vec4 temp66 = shadow1DProj(shadowSampler1D, const29, const24);
    vec4 color_c21 = color_c20 + temp66;
    vec4 temp68 = shadow2DProj(shadowSampler2D, const29);
    vec4 color_c22 = color_c21 + temp68;
    vec4 temp70 = shadow2DProj(shadowSampler2D, const29, const24);
    vec4 color_c23 = color_c22 + temp70;
    vec4 temp72 = texelFetch(texSampler2D, const73, const74i_1);
    vec4 color_c24 = color_c23 + temp72;
    vec2 gradX_c25 = dFdx(coords2D);
    vec2 gradY_c26 = dFdy(coords2D);
    vec4 temp78 = textureGrad(texSampler2D, coords2D, gradX_c25, gradY_c26);
    vec4 color_c27 = color_c24 + temp78;
    vec3 temp80;
    temp80.xyz = vec3(coords2D.x, coords2D.y, const24);
    vec4 temp81 = textureProjGrad(texSampler2D, temp80, gradX_c25, gradY_c26);
    vec4 color_c28 = color_c27 + temp81;
    vec4 temp83 = textureGradOffset(texSampler2D, coords2D, gradX_c25, gradY_c26, const84);
    vec4 color_c29 = color_c28 + temp83;
    vec4 temp86 = textureProjGradOffset(texSampler2D, const40, gradX_c25, gradY_c26, const84);
    vec4 color_c30 = color_c29 + temp86;
    vec3 temp88;
    temp88.xyz = vec3(coords2D.x, coords2D.y, const89);
    float temp90 = textureGrad(shadowSampler2D, temp88, gradX_c25, gradY_c26);
    vec4 temp91 = vec4(temp90);
    vec4 color_c31 = color_c30 + temp91;
    float temp93 = blend * const22;
    vec4 gla_gl_FragColor_c32 = mix(color_c31, u, temp93);
    gl_FragColor = gla_gl_FragColor_c32;
    
}


texture.vert
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
in vec2 coords2D;
const float const22 = 1.789;
const float const23 = 3.0;
const vec4 const27 = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 const32 = vec3(1.789, 2.718, 3.453);

void main()
{
    vec4 temp21 = textureLod(texSampler1D, const22, const23);
    vec4 temp24 = textureProjLod(texSampler1D, coords2D, const23);
    vec4 color_c1 = temp21 + temp24;
    vec4 temp26 = textureProjLod(texSampler1D, const27, const23);
    vec4 color_c2 = color_c1 + temp26;
    vec4 temp29 = textureLod(texSampler2D, coords2D, const23);
    vec4 color_c3 = color_c2 + temp29;
    vec4 temp31 = textureProjLod(texSampler2D, const32, const23);
    vec4 color_c4 = color_c3 + temp31;
    vec4 temp34 = textureProjLod(texSampler2D, const27, const23);
    vec4 color_c5 = color_c4 + temp34;
    vec4 temp36 = textureLod(texSampler3D, const32, const23);
    vec4 color_c6 = color_c5 + temp36;
    vec4 temp38 = textureProjLod(texSampler3D, const27, const23);
    vec4 color_c7 = color_c6 + temp38;
    vec4 temp40 = textureLod(texSamplerCube, const32, const23);
    vec4 color_c8 = color_c7 + temp40;
    vec4 temp42 = shadow1DLod(shadowSampler1D, const32, const23);
    vec4 color_c9 = color_c8 + temp42;
    vec4 temp44 = shadow2DLod(shadowSampler2D, const32, const23);
    vec4 color_c10 = color_c9 + temp44;
    vec4 temp46 = shadow1DProjLod(shadowSampler1D, const27, const23);
    vec4 color_c11 = color_c10 + temp46;
    vec4 temp48 = shadow2DProjLod(shadowSampler2D, const27, const23);
    vec4 color_c12 = color_c11 + temp48;
    gl_Position = color_c12;
    
}


300BuiltIns.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations

uniform bvec3 bv;
uniform mediump int imin;
uniform mediump int imax;
uniform mediump uint umin;
uniform mediump uint umax;
in mediump vec3 x;
in mediump vec3 y;
flat in mediump ivec4 iv4a;
flat in mediump ivec4 iv4b;
flat in mediump uvec2 uv2x;
flat in mediump uvec2 uv2y;
flat in mediump uvec4 uv4y;
flat in mediump uint uy;
flat in mediump ivec3 iv3a;
flat in mediump ivec3 iv3b;
flat in mediump uvec2 uv2c;
in mediump float f;
in mediump vec2 v2a;
in mediump vec4 v4;
in mediump vec2 v2b;
out mediump vec4 result;
const highp float const23 = 0.0;
const highp int const33i_0 = 0;
const highp vec2 const99 = vec2(2.0);
const highp float const104 = 0.1;

void main()
{
    mediump vec3 temp21 = mix(x, y, bv);
    vec4 temp22 = vec4(temp21.x, temp21.y, temp21.z, const23);
    mediump ivec4 isum_c1 = abs(iv4a);
    mediump ivec4 temp25 = sign(iv4a);
    mediump ivec4 isum_c2 = isum_c1 + temp25;
    mediump ivec4 temp27 = min(iv4a, iv4b);
    mediump ivec4 isum_c3 = isum_c2 + temp27;
    mediump ivec4 temp29 = min(iv4a, imin);
    mediump ivec4 isum_c4 = isum_c3 + temp29;
    mediump ivec2 temp31 = min(ivec2(uv2x), ivec2(uv2y));
    ivec4 temp32 = ivec4(temp31.x, temp31.y, const33i_0, const33i_0);
    mediump ivec4 temp34 = min(ivec4(uv4y), int(uy));
    mediump ivec4 usum_c5 = temp32 + temp34;
    mediump ivec3 temp36 = max(iv3a, iv3b);
    ivec4 temp37 = ivec4(temp36.x, temp36.y, temp36.z, const33i_0);
    mediump ivec4 isum_c6 = isum_c4 + temp37;
    mediump ivec4 temp39 = max(iv4a, imax);
    mediump ivec4 isum_c7 = isum_c6 + temp39;
    mediump ivec2 temp41 = max(ivec2(uv2x), ivec2(uv2y));
    mediump ivec2 temp42 = max(ivec2(uv2x), int(uy));
    ivec4 temp43 = ivec4(temp41.x, temp41.y, temp42.x, temp42.y);
    mediump ivec4 usum_c8 = temp43 + usum_c5;
    mediump ivec4 temp45 = clamp(iv4a, iv4a, iv4b);
    mediump ivec4 isum_c9 = isum_c7 + temp45;
    mediump ivec4 temp47 = clamp(iv4a, imin, imax);
    mediump ivec4 isum_c10 = isum_c9 + temp47;
    mediump ivec2 temp49 = clamp(ivec2(uv2x), ivec2(uv2y), ivec2(uv2c));
    ivec4 temp50 = ivec4(temp49.x, temp49.y, const33i_0, const33i_0);
    mediump ivec4 usum_c11 = temp50 + usum_c8;
    mediump ivec4 temp52 = clamp(ivec4(uv4y), int(umin), int(umax));
    mediump ivec4 usum_c12 = temp52 + usum_c11;
    struct  {
    vec3 member0;
    vec3 member1;
} temp54; temp54.member0 = modf(x, temp54.member1);
    vec3 modfOut_c13 = temp54.member1;
    vec3 temp56 = temp54.member0;
    vec4 temp57 = vec4(temp56.x, temp56.y, temp56.z, modfOut_c13.x);
    mediump vec4 sum_c14 = temp22 + temp57;
    mediump float temp59 = trunc(f);
    vec4 temp60 = vec4(temp59);
    mediump vec4 sum_c15 = sum_c14 + temp60;
    mediump vec2 temp62 = round(v2a);
    mediump vec2 temp63 = roundEven(v2a);
    vec4 temp64 = vec4(temp62.x, temp62.y, temp63.x, temp63.y);
    mediump vec4 sum_c16 = sum_c15 + temp64;
    bvec2 temp66 = isnan(v2a);
    bvec4 temp67 = isinf(v4);
    mediump ivec2 temp68 = ivec2(temp66);
    mediump ivec4 temp69 = ivec4(temp67);
    ivec4 temp70 = ivec4(temp68.x, temp68.y, temp69.x, temp69.y);
    mediump ivec4 isum_c17 = isum_c10 + temp70;
    mediump int temp72 = floatBitsToInt(f);
    ivec4 temp73 = ivec4(temp72);
    mediump ivec4 isum_c18 = isum_c17 + temp73;
    mediump ivec4 temp75 = floatBitsToInt(v4);
    mediump ivec4 usum_c19 = temp75 + usum_c12;
    mediump vec4 temp77 = intBitsToFloat(iv4a);
    mediump vec4 sum_c20 = sum_c16 + temp77;
    mediump vec2 temp79 = intBitsToFloat(ivec2(uv2c));
    vec4 temp80 = vec4(temp79.x, temp79.y, const23, const23);
    mediump vec4 sum_c21 = sum_c20 + temp80;
    highp int temp82 = int(packSnorm2x16(v2a));
    highp vec2 temp83 = unpackSnorm2x16(uint(int(uy)));
    highp int temp84 = int(packUnorm2x16(v2a));
    highp vec2 temp85 = unpackUnorm2x16(uint(int(uy)));
    highp int temp86 = int(packHalf2x16(v2b));
    mediump vec2 temp87 = unpackHalf2x16(uint(int(uy)));
    ivec4 temp88 = ivec4(temp82, temp84, temp86, const33i_0);
    mediump ivec4 usum_c22 = temp88 + usum_c19;
    vec4 temp90 = vec4(temp83.x, temp83.y, temp85.x, temp85.y);
    mediump vec4 sum_c23 = sum_c21 + temp90;
    vec4 temp92 = vec4(temp87.x, temp87.y, const23, const23);
    mediump vec4 sum_c24 = sum_c23 + temp92;
    mediump vec4 temp94 = vec4(isum_c18);
    mediump vec4 temp95 = sum_c24 + temp94;
    mediump vec4 temp96 = vec4(usum_c22);
    mediump vec4 result_c25 = temp95 + temp96;
    result = result_c25;
    mediump vec2 temp98 = gl_PointCoord * const99;
    vec4 temp100 = vec4(gl_PointCoord.x, gl_PointCoord.y, temp98.x, temp98.y);
    highp vec4 temp101 = gl_FragCoord + temp100;
    highp vec4 result_c26 = result_c25 + temp101;
    result = result_c26;
    highp float gla_gl_FragDepth_c27 = f + const104;
    gl_FragDepth = gla_gl_FragDepth_c27;
    
}


300BuiltIns.vert
#version 300 es
// LunarGOO output
in mediump float ps;
const highp int const22i_2 = 2;
const highp int const24i_u10 = -10;
invariant gl_Position ;
void main()
{
    int temp21 = gl_VertexID << const22i_2;
    int temp23 = temp21 + const24i_u10;
    vec4 temp25 = vec4(ps);
    highp float temp26 = float(temp23);
    vec4 temp27 = vec4(temp26);
    highp vec4 gla_gl_Position_c1 = temp25 * temp27;
    gl_Position = gla_gl_Position_c1;
    highp float gla_gl_PointSize_c2 = ps * temp26;
    gl_PointSize = gla_gl_PointSize_c2;
    
}


uniformArray.frag
#version 130
// LunarGOO output
uniform vec4 color[6];
uniform vec3 inColor;
uniform float alpha[16];
uniform sampler2D texSampler2D;

void main()
{
    vec4 texColor_c1 = color[1] + color[1];
    vec3 temp22 = vec3(texColor_c1);
    vec3 temp23 = inColor + temp22;
    float temp24 = alpha[12] + texColor_c1.w;
    vec4 temp25 = vec4(temp23.x, temp23.y, temp23.z, temp24);
    gl_FragColor = temp25;
    
}


newTexture.frag
#version 430 core
// LunarGOO output
uniform sampler2D s2D;
uniform sampler3D s3D;
uniform sampler2DArray s2DArray;
uniform sampler2DShadow s2DShadow;
uniform samplerCube sCube;
uniform sampler2DArrayShadow s2DArrayShadow;
uniform isampler2D is2D;
uniform isampler3D is3D;
uniform isamplerCube isCube;
uniform isampler2DArray is2DArray;
uniform samplerCubeShadow sCubeShadow;
uniform isampler2D is2Dms;
uniform usampler2D us2D;
uniform usampler3D us3D;
uniform usamplerCube usCube;
uniform usampler2DArray us2DArray;
in vec2 c2D;
in vec4 c4D;
in vec3 c3D;
in float c1D;
flat in ivec3 ic3D;
flat in int ic1D;
flat in ivec2 ic2D;
flat in ivec4 ic4D;
out vec4 FragData;
const float const25 = 1.2;
const ivec2 const28 = ivec2(3);
const int const34i_4 = 4;
const float const63 = 4.2;
const int const73i_2 = 2;
const float const76 = 0.0;

void main()
{
    vec4 temp21 = texture(s2D, c2D);
    vec4 temp22 = textureProj(s3D, c4D);
    vec4 temp23 = temp21 + temp22;
    vec4 temp24 = textureLod(s2DArray, c3D, const25);
    vec4 temp26 = temp23 + temp24;
    float temp27 = textureOffset(s2DShadow, c3D, const28, c1D);
    float temp29 = temp26.y + temp27;
    vec4 temp30 = temp26;
    temp30.y = temp29;
    vec4 temp31 = texelFetch(s3D, ic3D, ic1D);
    vec4 temp32 = temp30 + temp31;
    vec4 temp33 = texelFetchOffset(s2D, ic2D, const34i_4, ic2D);
    vec4 temp35 = temp32 + temp33;
    float temp36 = textureLodOffset(s2DShadow, c3D, c1D, const28);
    float temp37 = temp35.y + temp36;
    vec4 temp38 = temp35;
    temp38.y = temp37;
    vec4 temp39 = textureProjLodOffset(s2D, c3D, c1D, const28);
    vec4 temp40 = temp38 + temp39;
    vec4 temp41 = textureGrad(sCube, c3D, c3D, c3D);
    vec4 temp42 = temp40 + temp41;
    float temp43 = textureGradOffset(s2DArrayShadow, c4D, c2D, c2D, const28);
    float temp44 = temp42.x + temp43;
    vec4 temp45 = temp42;
    temp45.x = temp44;
    vec4 temp46 = textureProjGrad(s3D, c4D, c3D, c3D);
    vec4 temp47 = temp45 + temp46;
    vec4 temp48 = textureProjGradOffset(s2D, c3D, c2D, c2D, const28);
    vec4 temp49 = temp47 + temp48;
    ivec4 iv_c1 = texture(is2D, c2D);
    vec4 temp51 = vec4(iv_c1);
    vec4 temp52 = temp49 + temp51;
    ivec4 iv_c2 = textureProjOffset(is2D, c4D, const28);
    vec4 temp54 = vec4(iv_c2);
    vec4 temp55 = temp52 + temp54;
    ivec4 iv_c3 = textureProjLod(is2D, c3D, c1D);
    vec4 temp57 = vec4(iv_c3);
    vec4 temp58 = temp55 + temp57;
    ivec4 iv_c4 = textureProjGrad(is2D, c3D, c2D, c2D);
    vec4 temp60 = vec4(iv_c4);
    vec4 temp61 = temp58 + temp60;
    ivec4 iv_c5 = texture(is3D, c3D, const63);
    vec4 temp64 = vec4(iv_c5);
    vec4 temp65 = temp61 + temp64;
    ivec4 iv_c6 = textureLod(isCube, c3D, c1D);
    vec4 temp67 = vec4(iv_c6);
    vec4 temp68 = temp65 + temp67;
    ivec4 iv_c7 = texelFetch(is2DArray, ic3D, ic1D);
    vec4 temp70 = vec4(iv_c7);
    vec4 temp71 = temp68 + temp70;
    ivec2 iv_c8 = textureSize(sCubeShadow, const73i_2);
    vec2 temp74 = vec2(iv_c8);
    vec4 temp75 = vec4(temp74.x, temp74.y, const76, const76);
    vec4 FragData_c9 = temp71 + temp75;
    FragData = FragData_c9;
    
}


qualifiers.frag
#version 430 core
// LunarGOO output
uniform vec4 buf;
uniform image2D imageVc;
uniform image2D imageVv;
uniform image2D imageVr;
uniform image2D imageVro;
uniform image2D imageVwo;
uniform image2D imageVall;
centroid in vec4 inVc;
in vec4 inVs;
flat in vec4 inVf;
noperspective in vec4 inVn;
centroid noperspective in vec4 inVcn;
sample in vec4 inV;
out vec4 outVi;
invariant outVi ;
void main()
{
    vec4 temp21 = inVc + inVs;
    vec4 temp22 = inVf + temp21;
    vec4 temp23 = inVn + temp22;
    vec4 outVi_c1 = inVcn + temp23;
    outVi = outVi_c1;
    
}


