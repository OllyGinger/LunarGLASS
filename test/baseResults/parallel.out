test.frag
#version 110
// LunarGOO output
uniform sampler2D texSampler2D;
uniform vec2 scale;
uniform sampler3D texSampler3D;
uniform vec4 u;
uniform float blend;
varying vec2 t;
varying vec3 coords;
const float C_1d789 = 1.789;

void main()
{
	vec4 L_1 = texture2D(texSampler2D, ((scale + t) / scale));
	vec4 L_2 = L_1.wzyx;
	vec4 L_3 = texture3D(texSampler3D, coords);
	vec4 Ll_FragColor_c1 = mix((L_2 + L_3), u, (blend * C_1d789));
	gl_FragColor = Ll_FragColor_c1;
	
}

test.vert
#version 130
// LunarGOO output
uniform mat4 transform;
in vec2 uv_in;
in vec4 position;
out vec2 uv;

void main()
{
	uv = uv_in;
	vec4 L_1 = ftransform();
	gl_Position = (L_1 + position);
	
}

deepRvalue.frag
#version 120
// LunarGOO output
uniform sampler2D sampler;
const vec2 C_vec2p0d5p = vec2(0.5);
const float C_0d1 = 0.1;
const float C_7d0 = 7.0;
const float C_19d0 = 19.0;
const vec4 C_1boipyy = vec4(361.0, 841.0, 5.0, 0.0);

void main()
{
	vec4 L_1 = texture2D(sampler, C_vec2p0d5p);
	vec4 L_2 = C_1boipyy;
	L_2.w = ((((L_1.y > C_0d1) ? C_7d0 : C_19d0) + L_1.y) + C_7d0);
	gl_FragColor = L_2;
	
}

block.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
struct S {
	mediump vec4 u;
	mediump uvec4 v;
	lowp isampler2D sampler;
	mediump vec3 w;
	mediump mat3 m3a[5];
};
uniform S s;
uniform fooBlock {
	mediump vec4 bu;
	mediump vec2 bw;
	mediump uvec4 bv;
	S bs;
	mediump mat2 bm2;
	mediump mat4 m4a[8];
} ;
uniform barBlock {
	mediump vec4 nbu;
	mediump mat3 nbm;
	mediump uvec4 nbv;
	mediump int ni;
} inst[4];
out mediump vec4 color;

void main()
{
	mediump ivec4 L_1 = texture(s.sampler, bw);
	color = (((vec4(L_1)) + inst[3].nbu) + bu);
	
}

length.frag
#version 120
// LunarGOO output
uniform vec4 u[3];
varying vec2 v[2];
const vec4 C_vec4p30d0p = vec4(30.0);

void main()
{
	gl_FragColor = C_vec4p30d0p;
	
}

matrix2.frag
#version 150 core
// LunarGOO output
uniform mat3x4 un34;
uniform mat4x3 um43;
uniform mat4 um4;
uniform mat2 um2;
uniform mat3 um3;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
in vec4 v;
in vec3 u;
in vec3 Color;
out vec4 FragColor;
const vec4 C_32guqd = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 C_2bzbpr = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 C_ucv5a1 = vec4(0.0, 0.0, 4.3, 0.0);
const float C_1d0 = 1.0;
const vec4 C_1m2m1xx = vec4(0.0, 0.0, 0.0, 1.0);
const float C_0d0 = 0.0;

void main()
{
	vec4 L_1 = vec4((u.x * v.x), (u.x * v.y), (u.x * v.z), (u.x * v.w));
	vec4 L_2 = vec4((u.y * v.x), (u.y * v.y), (u.y * v.z), (u.y * v.w));
	vec4 L_3 = vec4((u.z * v.x), (u.z * v.y), (u.z * v.z), (u.z * v.w));
	vec4 column_c1 = L_1 + C_32guqd;
	vec4 column_c2 = L_2 + C_2bzbpr;
	vec4 column_c3 = L_3 + C_ucv5a1;
	vec4 L_7 = vec4(Color.x, Color.y, Color.z, C_1d0);
	float dotres_c4 = dot(L_7, column_c1);
	float dotres_c5 = dot(L_7, column_c2);
	float dotres_c6 = dot(L_7, column_c3);
	vec4 L_b = vec4(dotres_c4, dotres_c5, dotres_c6, C_1d0);
	FragColor = (L_7 * L_b);
	float L_c = column_c1.x * v.x;
	float L_d = column_c1.y * v.x;
	float L_e = column_c1.z * v.x;
	float L_f = column_c1.w * v.x;
	float L_10 = column_c2.x * v.x;
	float L_11 = column_c2.y * v.x;
	float L_12 = column_c2.z * v.x;
	float L_13 = column_c2.w * v.x;
	float L_14 = column_c3.x * v.x;
	float L_15 = column_c3.y * v.x;
	float L_16 = column_c3.z * v.x;
	float L_17 = column_c3.w * v.x;
	vec4 L_18 = vec4((((L_10 * um43[0].y) + (L_c * um43[0].x)) + (L_14 * um43[0].z)), (((L_11 * um43[0].y) + (L_d * um43[0].x)) + (L_15 * um43[0].z)), (((L_12 * um43[0].y) + (L_e * um43[0].x)) + (L_16 * um43[0].z)), (((L_13 * um43[0].y) + (L_f * um43[0].x)) + (L_17 * um43[0].z)));
	vec4 L_19 = vec4((((L_10 * um43[1].y) + (L_c * um43[1].x)) + (L_14 * um43[1].z)), (((L_11 * um43[1].y) + (L_d * um43[1].x)) + (L_15 * um43[1].z)), (((L_12 * um43[1].y) + (L_e * um43[1].x)) + (L_16 * um43[1].z)), (((L_13 * um43[1].y) + (L_f * um43[1].x)) + (L_17 * um43[1].z)));
	vec4 L_1a = vec4((((L_10 * um43[2].y) + (L_c * um43[2].x)) + (L_14 * um43[2].z)), (((L_11 * um43[2].y) + (L_d * um43[2].x)) + (L_15 * um43[2].z)), (((L_12 * um43[2].y) + (L_e * um43[2].x)) + (L_16 * um43[2].z)), (((L_13 * um43[2].y) + (L_f * um43[2].x)) + (L_17 * um43[2].z)));
	vec4 L_1b = vec4((((L_10 * um43[3].y) + (L_c * um43[3].x)) + (L_14 * um43[3].z)), (((L_11 * um43[3].y) + (L_d * um43[3].x)) + (L_15 * um43[3].z)), (((L_12 * um43[3].y) + (L_e * um43[3].x)) + (L_16 * um43[3].z)), (((L_13 * um43[3].y) + (L_f * um43[3].x)) + (L_17 * um43[3].z)));
	vec4 column_c7 = L_18 + un34[0];
	vec4 column_c8 = L_19 + un34[1];
	vec4 column_c9 = L_1a + un34[2];
	vec4 column_c10 = L_1b + C_1m2m1xx;
	float dotProduct_c11 = ((((C_0d0 - column_c7.x) * v.x) + ((C_0d0 - column_c8.x) * v.y)) + ((C_0d0 - column_c9.x) * v.z)) + ((C_0d0 - column_c10.x) * v.w);
	float dotProduct_c12 = ((((C_0d0 - column_c7.y) * v.x) + ((C_0d0 - column_c8.y) * v.y)) + ((C_0d0 - column_c9.y) * v.z)) + ((C_0d0 - column_c10.y) * v.w);
	float dotProduct_c13 = ((((C_0d0 - column_c7.z) * v.x) + ((C_0d0 - column_c8.z) * v.y)) + ((C_0d0 - column_c9.z) * v.z)) + ((C_0d0 - column_c10.z) * v.w);
	float dotProduct_c14 = ((((C_0d0 - column_c7.w) * v.x) + ((C_0d0 - column_c8.w) * v.y)) + ((C_0d0 - column_c9.w) * v.z)) + ((C_0d0 - column_c10.w) * v.w);
	vec4 L_24 = vec4(dotProduct_c11, dotProduct_c12, dotProduct_c13, dotProduct_c14);
	vec4 FragColor_c15 = FragColor + L_24;
	float dotres_c16 = dot(FragColor_c15, (column_c7 * column_c7));
	float dotres_c17 = dot(FragColor_c15, (column_c8 * column_c8));
	float dotres_c18 = dot(FragColor_c15, (column_c9 * column_c9));
	float dotres_c19 = dot(FragColor_c15, (column_c10 * column_c10));
	vec4 L_2a = vec4(dotres_c16, dotres_c17, dotres_c18, dotres_c19);
	FragColor = L_2a;
	vec4 L_2b = vec4(um43[0].x, um43[1].x, um43[2].x, um43[3].x);
	vec4 L_2c = vec4(um43[0].y, um43[1].y, um43[2].y, um43[3].y);
	vec4 L_2d = vec4(um43[0].z, um43[1].z, um43[2].z, um43[3].z);
	float dotres_c20 = dot(L_2a, L_2b);
	float dotres_c21 = dot(L_2a, L_2c);
	float dotres_c22 = dot(L_2a, L_2d);
	vec4 L_31 = vec4(dotres_c20, dotres_c21, dotres_c22, C_1d0);
	vec4 FragColor_c23 = L_2a * L_31;
	FragColor = FragColor_c23;
	float L_33 = (um4[2].z * um4[3].w) - (um4[2].w * um4[3].z);
	float L_34 = (um4[1].z * um4[3].w) - (um4[1].w * um4[3].z);
	float L_35 = (um4[1].z * um4[2].w) - (um4[1].w * um4[2].z);
	float L_36 = (um4[0].z * um4[3].w) - (um4[0].w * um4[3].z);
	float L_37 = (um4[0].z * um4[2].w) - (um4[0].w * um4[2].z);
	float L_38 = ((((L_33 * um4[1].y) - (L_34 * um4[2].y)) + (L_35 * um4[3].y)) * um4[0].x) - ((((L_33 * um4[0].y) - (L_36 * um4[2].y)) + (L_37 * um4[3].y)) * um4[1].x);
	float L_39 = (um4[0].z * um4[1].w) - (um4[0].w * um4[1].z);
	float L_3a = (((((L_34 * um4[0].y) - (L_36 * um4[1].y)) + (L_39 * um4[3].y)) * um4[2].x) + L_38) - ((((L_35 * um4[0].y) - (L_37 * um4[1].y)) + (L_39 * um4[2].y)) * um4[3].x);
	vec4 L_3b = vec4(L_3a);
	vec4 FragColor_c24 = FragColor_c23 * L_3b;
	FragColor = FragColor_c24;
	float L_3d = C_1d0 / ((um2[0].x * um2[1].y) - (um2[0].y * um2[1].x));
	vec4 L_3e = vec4((L_3d * um2[1].y), (C_0d0 - (L_3d * um2[1].x)), (C_0d0 - (L_3d * um2[0].y)), (L_3d * um2[0].x));
	vec4 FragColor_c25 = FragColor_c24 * L_3e;
	FragColor = FragColor_c25;
	float L_40 = (((um3[1].y * um3[2].z) - (um3[1].z * um3[2].y)) * um3[0].x) - (((um3[0].y * um3[2].z) - (um3[0].z * um3[2].y)) * um3[1].x);
	float L_41 = ((um3[0].x * um3[2].y) - (um3[0].y * um3[2].x)) * (C_1d0 / ((((um3[0].y * um3[1].z) - (um3[0].z * um3[1].y)) * um3[2].x) + L_40));
	vec4 L_42 = vec4((C_0d0 - L_41));
	vec4 FragColor_c26 = FragColor_c25 * L_42;
	FragColor = FragColor_c26;
	float L_44 = (um4[2].z * um4[3].w) - (um4[2].w * um4[3].z);
	float L_45 = (um4[1].z * um4[3].w) - (um4[1].w * um4[3].z);
	float L_46 = (um4[1].z * um4[2].w) - (um4[1].w * um4[2].z);
	float L_47 = ((L_44 * um4[1].y) - (L_45 * um4[2].y)) + (L_46 * um4[3].y);
	float L_48 = (um4[0].z * um4[3].w) - (um4[0].w * um4[3].z);
	float L_49 = (um4[0].z * um4[2].w) - (um4[0].w * um4[2].z);
	float L_4a = ((L_44 * um4[0].y) - (L_48 * um4[2].y)) + (L_49 * um4[3].y);
	float L_4b = (um4[0].z * um4[1].w) - (um4[0].w * um4[1].z);
	float L_4c = ((L_45 * um4[0].y) - (L_48 * um4[1].y)) + (L_4b * um4[3].y);
	float L_4d = ((L_46 * um4[0].y) - (L_49 * um4[1].y)) + (L_4b * um4[2].y);
	float L_4e = (um4[2].y * um4[3].w) - (um4[2].w * um4[3].y);
	float L_4f = (um4[1].y * um4[3].w) - (um4[1].w * um4[3].y);
	float L_50 = (um4[1].y * um4[2].w) - (um4[1].w * um4[2].y);
	float L_51 = (um4[0].y * um4[3].w) - (um4[0].w * um4[3].y);
	float L_52 = (um4[0].y * um4[2].w) - (um4[0].w * um4[2].y);
	float L_53 = (um4[0].y * um4[1].w) - (um4[0].w * um4[1].y);
	float L_54 = (um4[2].y * um4[3].z) - (um4[2].z * um4[3].y);
	float L_55 = (um4[1].y * um4[3].z) - (um4[1].z * um4[3].y);
	float L_56 = (um4[1].y * um4[2].z) - (um4[1].z * um4[2].y);
	float L_57 = (um4[0].y * um4[3].z) - (um4[0].z * um4[3].y);
	float L_58 = (um4[0].y * um4[2].z) - (um4[0].z * um4[2].y);
	float L_59 = (um4[0].y * um4[1].z) - (um4[0].z * um4[1].y);
	float L_5a = C_1d0 / ((((L_47 * um4[0].x) - (L_4a * um4[1].x)) + (L_4c * um4[2].x)) - (L_4d * um4[3].x));
	vec4 L_5b = vec4((L_47 * L_5a), (C_0d0 - (L_4a * L_5a)), (L_4c * L_5a), (C_0d0 - (L_4d * L_5a)));
	vec4 L_5c = vec4((C_0d0 - ((((L_44 * um4[1].x) - (L_45 * um4[2].x)) + (L_46 * um4[3].x)) * L_5a)), ((((L_44 * um4[0].x) - (L_48 * um4[2].x)) + (L_49 * um4[3].x)) * L_5a), (C_0d0 - ((((L_45 * um4[0].x) - (L_48 * um4[1].x)) + (L_4b * um4[3].x)) * L_5a)), ((((L_46 * um4[0].x) - (L_49 * um4[1].x)) + (L_4b * um4[2].x)) * L_5a));
	vec4 L_5d = vec4(((((L_4e * um4[1].x) - (L_4f * um4[2].x)) + (L_50 * um4[3].x)) * L_5a), (C_0d0 - ((((L_4e * um4[0].x) - (L_51 * um4[2].x)) + (L_52 * um4[3].x)) * L_5a)), ((((L_4f * um4[0].x) - (L_51 * um4[1].x)) + (L_53 * um4[3].x)) * L_5a), (C_0d0 - ((((L_50 * um4[0].x) - (L_52 * um4[1].x)) + (L_53 * um4[2].x)) * L_5a)));
	vec4 L_5e = vec4((C_0d0 - ((((L_54 * um4[1].x) - (L_55 * um4[2].x)) + (L_56 * um4[3].x)) * L_5a)), ((((L_54 * um4[0].x) - (L_57 * um4[2].x)) + (L_58 * um4[3].x)) * L_5a), (C_0d0 - ((((L_55 * um4[0].x) - (L_57 * um4[1].x)) + (L_59 * um4[3].x)) * L_5a)), ((((L_56 * um4[0].x) - (L_58 * um4[1].x)) + (L_59 * um4[2].x)) * L_5a));
	float dotres_c27 = dot(FragColor_c26, L_5b);
	float dotres_c28 = dot(FragColor_c26, L_5c);
	float dotres_c29 = dot(FragColor_c26, L_5d);
	float dotres_c30 = dot(FragColor_c26, L_5e);
	vec4 L_63 = vec4(dotres_c27, dotres_c28, dotres_c29, dotres_c30);
	FragColor = L_63;
	float dotres_c31 = dot(L_63, (un34[0] * un34[0]));
	float dotres_c32 = dot(L_63, (un34[1] * un34[1]));
	float dotres_c33 = dot(L_63, (un34[2] * un34[2]));
	vec4 L_67 = vec4(dotres_c31, dotres_c32, dotres_c33, dotres_c30);
	FragColor = L_67;
	
}

matrixAgg.frag
#version 120
// LunarGOO output
struct s {
	int count;
	mat4x3 sm[12];
};
uniform s us;
uniform int i;
uniform mat4x3 am[8];
uniform mat4x3 m;
varying vec3 v;

void main()
{
	float dotres_c1 = dot(v, (am[4][0] + us.sm[i][0]));
	float dotres_c2 = dot(v, (am[4][1] + us.sm[i][1]));
	float dotres_c3 = dot(v, (am[4][2] + us.sm[i][2]));
	float dotres_c4 = dot(v, (am[4][3] + us.sm[i][3]));
	vec4 L_5 = vec4(dotres_c1, dotres_c2, dotres_c3, dotres_c4);
	gl_FragColor = L_5;
	
}

texture.frag
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
uniform vec4 u;
uniform float blend;
uniform vec2 scale;
in vec2 coords2D;
in vec2 t;
const float C_1d789 = 1.789;
const float C_2d0 = 2.0;
const vec4 C_187yyg = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 C_1m8ff1t = vec3(1.789, 2.718, 3.453);
const ivec2 C_ivec2p0ca5p = ivec2(0, 5);
const int C_1 = 1;
const ivec2 C_1lvkzeo = ivec2(3, -7);
const float C_3d0 = 3.0;

void main()
{
	vec4 L_1 = texture(texSampler1D, C_1d789);
	vec4 L_2 = texture(texSampler1D, C_1d789, C_2d0);
	vec4 L_3 = textureProj(texSampler1D, coords2D);
	vec4 L_4 = textureProj(texSampler1D, C_187yyg);
	vec4 L_5 = textureProj(texSampler1D, coords2D, C_2d0);
	vec4 L_6 = textureProj(texSampler1D, C_187yyg, C_2d0);
	vec4 L_7 = texture(texSampler2D, coords2D);
	vec4 L_8 = texture(texSampler2D, coords2D, C_2d0);
	vec4 L_9 = textureProj(texSampler2D, C_1m8ff1t);
	vec4 L_a = textureProj(texSampler2D, C_187yyg, C_2d0);
	vec4 L_b = texture(texSampler3D, C_1m8ff1t);
	vec4 L_c = texture(texSampler3D, C_1m8ff1t, C_2d0);
	vec4 L_d = textureProj(texSampler3D, C_187yyg);
	vec4 L_e = textureProj(texSampler3D, C_187yyg, C_2d0);
	vec4 L_f = texture(texSamplerCube, C_1m8ff1t);
	vec4 L_10 = texture(texSamplerCube, C_1m8ff1t, C_2d0);
	vec4 color_c1 = ((((((((((((((L_1 + L_2) + L_3) + L_4) + L_5) + L_6) + L_7) + L_8) + L_9) + L_a) + L_b) + L_c) + L_d) + L_e) + L_f) + L_10;
	vec4 L_12 = shadow1D(shadowSampler1D, C_1m8ff1t);
	vec4 L_13 = shadow1D(shadowSampler1D, C_1m8ff1t, C_2d0);
	vec4 L_14 = shadow2D(shadowSampler2D, C_1m8ff1t);
	vec4 L_15 = shadow2D(shadowSampler2D, C_1m8ff1t, C_2d0);
	vec4 L_16 = shadow1DProj(shadowSampler1D, C_187yyg);
	vec4 L_17 = shadow1DProj(shadowSampler1D, C_187yyg, C_2d0);
	vec4 L_18 = shadow2DProj(shadowSampler2D, C_187yyg);
	vec4 L_19 = shadow2DProj(shadowSampler2D, C_187yyg, C_2d0);
	vec4 L_1a = texelFetch(texSampler2D, C_ivec2p0ca5p, C_1);
	vec2 gradX_c2 = dFdx(coords2D);
	vec2 gradY_c3 = dFdy(coords2D);
	vec4 L_1d = textureGrad(texSampler2D, coords2D, gradX_c2, gradY_c3);
	vec3 L_1e;
	L_1e.xyz = vec3(coords2D.x, coords2D.y, C_2d0);
	vec4 L_1f = textureProjGrad(texSampler2D, L_1e, gradX_c2, gradY_c3);
	vec4 L_20 = textureGradOffset(texSampler2D, coords2D, gradX_c2, gradY_c3, C_1lvkzeo);
	vec4 L_21 = textureProjGradOffset(texSampler2D, C_1m8ff1t, gradX_c2, gradY_c3, C_1lvkzeo);
	vec4 color_c4 = ((((((((((((L_12 + color_c1) + L_13) + L_14) + L_15) + L_16) + L_17) + L_18) + L_19) + L_1a) + L_1d) + L_1f) + L_20) + L_21;
	vec3 L_23;
	L_23.xyz = vec3(coords2D.x, coords2D.y, C_3d0);
	float L_24 = textureGrad(shadowSampler2D, L_23, gradX_c2, gradY_c3);
	vec4 L_25 = vec4(L_24);
	vec4 Ll_FragColor_c5 = mix((L_25 + color_c4), u, (C_1d789 * blend));
	gl_FragColor = Ll_FragColor_c5;
	
}

texture.vert
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
in vec2 coords2D;
const float C_1d789 = 1.789;
const float C_3d0 = 3.0;
const vec4 C_187yyg = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 C_1m8ff1t = vec3(1.789, 2.718, 3.453);

void main()
{
	vec4 L_1 = textureLod(texSampler1D, C_1d789, C_3d0);
	vec4 L_2 = textureProjLod(texSampler1D, coords2D, C_3d0);
	vec4 L_3 = textureProjLod(texSampler1D, C_187yyg, C_3d0);
	vec4 L_4 = textureLod(texSampler2D, coords2D, C_3d0);
	vec4 L_5 = textureProjLod(texSampler2D, C_1m8ff1t, C_3d0);
	vec4 L_6 = textureProjLod(texSampler2D, C_187yyg, C_3d0);
	vec4 L_7 = textureLod(texSampler3D, C_1m8ff1t, C_3d0);
	vec4 L_8 = textureProjLod(texSampler3D, C_187yyg, C_3d0);
	vec4 L_9 = textureLod(texSamplerCube, C_1m8ff1t, C_3d0);
	vec4 L_a = shadow1DLod(shadowSampler1D, C_1m8ff1t, C_3d0);
	vec4 L_b = shadow2DLod(shadowSampler2D, C_1m8ff1t, C_3d0);
	vec4 L_c = shadow1DProjLod(shadowSampler1D, C_187yyg, C_3d0);
	vec4 L_d = shadow2DProjLod(shadowSampler2D, C_187yyg, C_3d0);
	gl_Position = ((((((((((((L_1 + L_2) + L_3) + L_4) + L_5) + L_6) + L_7) + L_8) + L_9) + L_a) + L_b) + L_c) + L_d);
	
}

300BuiltIns.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform bvec3 bv;
uniform mediump int imin;
uniform mediump int imax;
uniform mediump uint umin;
uniform mediump uint umax;
in mediump vec3 x;
in mediump vec3 y;
flat in mediump ivec4 iv4a;
flat in mediump ivec4 iv4b;
flat in mediump uvec2 uv2x;
flat in mediump uvec2 uv2y;
flat in mediump uvec4 uv4y;
flat in mediump uint uy;
flat in mediump ivec3 iv3a;
flat in mediump ivec3 iv3b;
flat in mediump uvec2 uv2c;
in mediump float f;
in mediump vec2 v2a;
in mediump vec4 v4;
in mediump vec2 v2b;
out mediump vec4 result;
const float C_0d0 = 0.0;
const int C_0 = 0;
const vec2 C_vec2p2d0p = vec2(2.0);
const float C_0d1 = 0.1;

void main()
{
	mediump vec3 L_1 = mix(x, y, bv);
	vec4 L_2 = vec4(L_1.x, L_1.y, L_1.z, C_0d0);
	mediump ivec4 isum_c1 = abs(iv4a);
	mediump ivec4 L_4 = sign(iv4a);
	mediump ivec4 L_5 = min(iv4a, iv4b);
	mediump ivec4 L_6 = min(iv4a, imin);
	mediump ivec2 L_7 = min(ivec2(uv2x), ivec2(uv2y));
	ivec4 L_8 = ivec4(L_7.x, L_7.y, C_0, C_0);
	mediump ivec4 L_9 = min(ivec4(uv4y), int(uy));
	mediump ivec3 L_a = max(iv3a, iv3b);
	ivec4 L_b = ivec4(L_a.x, L_a.y, L_a.z, C_0);
	mediump ivec4 L_c = max(iv4a, imax);
	mediump ivec2 L_d = max(ivec2(uv2x), ivec2(uv2y));
	mediump ivec2 L_e = max(ivec2(uv2x), int(uy));
	ivec4 L_f = ivec4(L_d.x, L_d.y, L_e.x, L_e.y);
	mediump ivec4 L_10 = clamp(iv4a, iv4a, iv4b);
	mediump ivec4 L_11 = clamp(iv4a, imin, imax);
	mediump ivec2 L_12 = clamp(ivec2(uv2x), ivec2(uv2y), ivec2(uv2c));
	ivec4 L_13 = ivec4(L_12.x, L_12.y, C_0, C_0);
	mediump ivec4 L_14 = clamp(ivec4(uv4y), int(umin), int(umax));
	struct  {
	vec3 member0;
	vec3 member1;
} L_15; L_15.member0 = modf(x, L_15.member1);
	vec4 L_16 = vec4(L_15.member0.x, L_15.member0.y, L_15.member0.z, L_15.member1.x);
	mediump float L_17 = trunc(f);
	vec4 L_18 = vec4(L_17);
	mediump vec2 L_19 = round(v2a);
	mediump vec2 L_1a = roundEven(v2a);
	vec4 L_1b = vec4(L_19.x, L_19.y, L_1a.x, L_1a.y);
	bvec2 L_1c = isnan(v2a);
	bvec4 L_1d = isinf(v4);
	mediump ivec2 L_1e = ivec2(L_1c);
	mediump ivec4 L_1f = ivec4(L_1d);
	ivec4 L_20 = ivec4(L_1e.x, L_1e.y, L_1f.x, L_1f.y);
	mediump int L_21 = floatBitsToInt(f);
	ivec4 L_22 = ivec4(L_21);
	mediump ivec4 L_23 = floatBitsToInt(v4);
	mediump vec4 L_24 = intBitsToFloat(iv4a);
	mediump vec2 L_25 = intBitsToFloat(ivec2(uv2c));
	vec4 L_26 = vec4(L_25.x, L_25.y, C_0d0, C_0d0);
	highp int L_27 = int(packSnorm2x16(v2a));
	highp vec2 L_28 = unpackSnorm2x16(uint(int(uy)));
	highp int L_29 = int(packUnorm2x16(v2a));
	highp vec2 L_2a = unpackUnorm2x16(uint(int(uy)));
	highp int L_2b = int(packHalf2x16(v2b));
	mediump vec2 L_2c = unpackHalf2x16(uint(int(uy)));
	ivec4 L_2d = ivec4(L_27, L_29, L_2b, C_0);
	vec4 L_2e = vec4(L_28.x, L_28.y, L_2a.x, L_2a.y);
	vec4 L_2f = vec4(L_2c.x, L_2c.y, C_0d0, C_0d0);
	mediump vec4 L_30 = (((((((L_16 + L_2) + L_18) + L_1b) + L_24) + L_26) + L_2e) + L_2f) + (vec4((((((((((L_4 + isum_c1) + L_5) + L_6) + L_b) + L_c) + L_10) + L_11) + L_20) + L_22)));
	mediump vec4 result_c2 = (vec4(((((((L_8 + L_9) + L_f) + L_13) + L_14) + L_23) + L_2d))) + L_30;
	result = result_c2;
	mediump vec2 L_32 = gl_PointCoord * C_vec2p2d0p;
	vec4 L_33 = vec4(gl_PointCoord.x, gl_PointCoord.y, L_32.x, L_32.y);
	highp vec4 result_c3 = (L_33 + gl_FragCoord) + result_c2;
	result = result_c3;
	highp float Ll_FragDepth_c4 = f + C_0d1;
	gl_FragDepth = Ll_FragDepth_c4;
	
}

300BuiltIns.vert
#version 300 es
// LunarGOO output
in mediump float ps;
const int C_2 = 2;
const int C_a10 = -10;
invariant gl_Position ;
void main()
{
	vec4 L_1 = vec4(ps);
	highp float L_2 = float(((gl_VertexID << C_2) + C_a10));
	vec4 L_3 = vec4(L_2);
	gl_Position = (L_1 * L_3);
	gl_PointSize = (L_2 * ps);
	
}

uniformArray.frag
#version 130
// LunarGOO output
uniform vec4 color[6];
uniform vec3 inColor;
uniform float alpha[16];
uniform sampler2D texSampler2D;

void main()
{
	vec4 texColor_c1 = color[1] + color[1];
	vec3 L_2 = vec3(texColor_c1);
	vec3 L_3 = L_2 + inColor;
	vec4 L_4 = vec4(L_3.x, L_3.y, L_3.z, (alpha[12] + texColor_c1.w));
	gl_FragColor = L_4;
	
}

newTexture.frag
#version 430 core
// LunarGOO output
uniform sampler2D s2D;
uniform sampler3D s3D;
uniform sampler2DArray s2DArray;
uniform sampler2DShadow s2DShadow;
uniform samplerCube sCube;
uniform sampler2DArrayShadow s2DArrayShadow;
uniform isampler2D is2D;
uniform isampler3D is3D;
uniform isamplerCube isCube;
uniform isampler2DArray is2DArray;
uniform samplerCubeShadow sCubeShadow;
uniform isampler2D is2Dms;
uniform usampler2D us2D;
uniform usampler3D us3D;
uniform usamplerCube usCube;
uniform usampler2DArray us2DArray;
in vec2 c2D;
in vec4 c4D;
in vec3 c3D;
in float c1D;
flat in ivec3 ic3D;
flat in int ic1D;
flat in ivec2 ic2D;
flat in ivec4 ic4D;
out vec4 FragData;
const float C_1d2 = 1.2;
const ivec2 C_ivec2p3p = ivec2(3);
const int C_4 = 4;
const float C_4d2 = 4.2;
const int C_2 = 2;
const float C_0d0 = 0.0;

void main()
{
	vec4 L_1 = texture(s2D, c2D);
	vec4 L_2 = textureProj(s3D, c4D);
	vec4 L_3 = textureLod(s2DArray, c3D, C_1d2);
	vec4 L_4 = (L_1 + L_2) + L_3;
	float L_5 = textureOffset(s2DShadow, c3D, C_ivec2p3p, c1D);
	vec4 L_6 = L_4;
	L_6.y = (L_4.y + L_5);
	vec4 L_7 = texelFetch(s3D, ic3D, ic1D);
	vec4 L_8 = texelFetchOffset(s2D, ic2D, C_4, ic2D);
	vec4 L_9 = (L_6 + L_7) + L_8;
	float L_a = textureLodOffset(s2DShadow, c3D, c1D, C_ivec2p3p);
	vec4 L_b = L_9;
	L_b.y = (L_9.y + L_a);
	vec4 L_c = textureProjLodOffset(s2D, c3D, c1D, C_ivec2p3p);
	vec4 L_d = textureGrad(sCube, c3D, c3D, c3D);
	vec4 L_e = (L_b + L_c) + L_d;
	float L_f = textureGradOffset(s2DArrayShadow, c4D, c2D, c2D, C_ivec2p3p);
	vec4 L_10 = L_e;
	L_10.x = (L_e.x + L_f);
	vec4 L_11 = textureProjGrad(s3D, c4D, c3D, c3D);
	vec4 L_12 = textureProjGradOffset(s2D, c3D, c2D, c2D, C_ivec2p3p);
	ivec4 iv_c1 = texture(is2D, c2D);
	ivec4 iv_c2 = textureProjOffset(is2D, c4D, C_ivec2p3p);
	ivec4 iv_c3 = textureProjLod(is2D, c3D, c1D);
	ivec4 iv_c4 = textureProjGrad(is2D, c3D, c2D, c2D);
	ivec4 iv_c5 = texture(is3D, c3D, C_4d2);
	ivec4 iv_c6 = textureLod(isCube, c3D, c1D);
	vec4 L_19 = (((((((L_10 + L_11) + L_12) + (vec4(iv_c1))) + (vec4(iv_c2))) + (vec4(iv_c3))) + (vec4(iv_c4))) + (vec4(iv_c5))) + (vec4(iv_c6));
	ivec4 iv_c7 = texelFetch(is2DArray, ic3D, ic1D);
	ivec2 iv_c8 = textureSize(sCubeShadow, C_2);
	vec2 L_1c = vec2(iv_c8);
	vec4 L_1d = vec4(L_1c.x, L_1c.y, C_0d0, C_0d0);
	FragData = (((vec4(iv_c7)) + L_19) + L_1d);
	
}

qualifiers.frag
#version 430 core
// LunarGOO output
uniform vec4 buf;
uniform image2D imageVc;
uniform image2D imageVv;
uniform image2D imageVr;
uniform image2D imageVro;
uniform image2D imageVwo;
uniform image2D imageVall;
centroid in vec4 inVc;
in vec4 inVs;
flat in vec4 inVf;
noperspective in vec4 inVn;
centroid noperspective in vec4 inVcn;
sample in vec4 inV;
out vec4 outVi;
invariant outVi ;
void main()
{
	outVi = ((((inVc + inVs) + inVf) + inVn) + inVcn);
	
}

