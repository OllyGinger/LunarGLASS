test.frag
#version 110
// LunarGOO output
uniform sampler2D texSampler2D;
uniform vec2 scale;
uniform sampler3D texSampler3D;
uniform vec4 u;
uniform float blend;
varying vec2 t;
varying vec3 coords;
const float C_1d789 = 1.789;

void main()
{
	vec2 H_4wn73n1 = scale + t;
	vec2 H_hop76e = H_4wn73n1 / scale;
	vec4 H_y7dumr = texture2D(texSampler2D, H_hop76e);
	vec4 H_ehrlka1 = texture3D(texSampler3D, coords);
	vec4 H_ui7hl51 = H_ehrlka1 + H_y7dumr.wzyx;
	float H_lcv9ud = blend * C_1d789;
	vec4 Ll_FragColor1 = mix(H_ui7hl51, u, H_lcv9ud);
	gl_FragColor = Ll_FragColor1;
	
}

test.vert
#version 130
// LunarGOO output
uniform mat4 transform;
in vec2 uv_in;
in vec4 position;
out vec2 uv;

void main()
{
	uv = uv_in;
	vec4 ical2a = ftransform();
	vec4 Ll_Position1 = ical2a + position;
	gl_Position = Ll_Position1;
	
}

deepRvalue.frag
#version 120
// LunarGOO output
uniform sampler2D sampler;
const vec2 C_vec2p0d5p = vec2(0.5);
const float C_0d1 = 0.1;
const float C_7d0 = 7.0;
const float C_19d0 = 19.0;
const vec4 C_yypiob1 = vec4(361.0, 841.0, 5.0, 0.0);

void main()
{
	vec4 H_wqgd641 = texture2D(sampler, C_vec2p0d5p);
	bool H_qkexhz = H_wqgd641.y > C_0d1;
	float H_1fdumq = H_qkexhz ? C_7d0 : C_19d0;
	float H_tprxde = H_1fdumq + H_wqgd641.y;
	float H_fzxwdz = C_7d0 + H_tprxde;
	vec4 H_q57d5g1 = C_yypiob1;
	H_q57d5g1.w = H_fzxwdz;
	gl_FragColor = H_q57d5g1;
	
}

block.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
struct S {
	mediump vec4 u;
	mediump uvec4 v;
	lowp isampler2D sampler;
	mediump vec3 w;
	mediump mat3 m3a[5];
};
uniform S s;
uniform fooBlock {
	mediump vec4 bu;
	mediump vec2 bw;
	mediump uvec4 bv;
	S bs;
	mediump mat2 bm2;
	mediump mat4 m4a[8];
} ;
uniform barBlock {
	mediump vec4 nbu;
	mediump mat3 nbm;
	mediump uvec4 nbv;
	mediump int ni;
} inst[4];
out mediump vec4 color;

void main()
{
	mediump ivec4 color1 = texture(s.sampler, bw);
	mediump vec4 H_y0cidm1 = vec4(color1);
	mediump vec4 H_ovfbtf1 = H_y0cidm1 + inst[3].nbu;
	mediump vec4 color2 = H_ovfbtf1 + bu;
	color = color2;
	
}

length.frag
#version 120
// LunarGOO output
uniform vec4 u[3];
varying vec2 v[2];
const vec4 C_vec4p30d0p = vec4(30.0);

void main()
{
	gl_FragColor = C_vec4p30d0p;
	
}

matrix2.frag
#version 150 core
// LunarGOO output
uniform mat3x4 un34;
uniform mat4x3 um43;
uniform mat4 um4;
uniform mat2 um2;
uniform mat3 um3;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
in vec4 v;
in vec3 u;
in vec3 Color;
out vec4 FragColor;
const vec4 C_dqug23 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 C_rpbzb2 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 C_1a5vcu = vec4(0.0, 0.0, 4.3, 0.0);
const float C_1d0 = 1.0;
const vec4 C_xx1m2m1 = vec4(0.0, 0.0, 0.0, 1.0);
const float C_0d0 = 0.0;

void main()
{
	float element = u.x * v.x;
	float element1 = u.x * v.y;
	float element2 = u.x * v.z;
	float element3 = u.x * v.w;
	vec4 H_6tjxa51 = vec4(element, element1, element2, element3);
	float element4 = u.y * v.x;
	float element5 = u.y * v.y;
	float element6 = u.y * v.z;
	float element7 = u.y * v.w;
	vec4 H_g07nmt = vec4(element4, element5, element6, element7);
	float element8 = u.z * v.x;
	float element9 = u.z * v.y;
	float elementa = u.z * v.z;
	float elementb = u.z * v.w;
	vec4 H_254sj9 = vec4(element8, element9, elementa, elementb);
	vec4 column = H_6tjxa51 + C_dqug23;
	vec4 column1 = H_g07nmt + C_rpbzb2;
	vec4 column2 = H_254sj9 + C_1a5vcu;
	vec4 H_f89cek1 = vec4(Color.x, Color.y, Color.z, C_1d0);
	float dotres = dot(H_f89cek1, column);
	float dotres1 = dot(H_f89cek1, column1);
	float dotres2 = dot(H_f89cek1, column2);
	vec4 H_vokf33 = vec4(dotres, dotres1, dotres2, C_1d0);
	vec4 FragColor1 = H_f89cek1 * H_vokf33;
	FragColor = FragColor1;
	float H_nzd0al = column.x * v.x;
	float H_wfvnu = column.y * v.x;
	float H_xeblpt = column.z * v.x;
	float H_ava4xl = column.w * v.x;
	float H_64je6f1 = column1.x * v.x;
	float H_1fmxyv1 = column1.y * v.x;
	float H_woltq61 = column1.z * v.x;
	float H_f5tii71 = column1.w * v.x;
	float H_jm62fa1 = column2.x * v.x;
	float H_8z1wkm = column2.y * v.x;
	float H_t5l0o61 = column2.z * v.x;
	float H_apoo6l1 = column2.w * v.x;
	float product = H_nzd0al * um43[0].x;
	float product1 = H_64je6f1 * um43[0].y;
	float dotProduct = product + product1;
	float product2 = H_jm62fa1 * um43[0].z;
	float dotProduct1 = dotProduct + product2;
	float product3 = H_wfvnu * um43[0].x;
	float product4 = H_1fmxyv1 * um43[0].y;
	float dotProduct2 = product3 + product4;
	float product5 = H_8z1wkm * um43[0].z;
	float dotProduct3 = dotProduct2 + product5;
	float product6 = H_xeblpt * um43[0].x;
	float product7 = H_woltq61 * um43[0].y;
	float dotProduct4 = product6 + product7;
	float product8 = H_t5l0o61 * um43[0].z;
	float dotProduct5 = dotProduct4 + product8;
	float product9 = H_ava4xl * um43[0].x;
	float producta = H_f5tii71 * um43[0].y;
	float dotProduct6 = product9 + producta;
	float productb = H_apoo6l1 * um43[0].z;
	float dotProduct7 = dotProduct6 + productb;
	vec4 H_8n1esy1 = vec4(dotProduct1, dotProduct3, dotProduct5, dotProduct7);
	float productc = H_nzd0al * um43[1].x;
	float productd = H_64je6f1 * um43[1].y;
	float dotProduct8 = productc + productd;
	float producte = H_jm62fa1 * um43[1].z;
	float dotProduct9 = dotProduct8 + producte;
	float productf = H_wfvnu * um43[1].x;
	float productg = H_1fmxyv1 * um43[1].y;
	float dotProducta = productf + productg;
	float producth = H_8z1wkm * um43[1].z;
	float dotProductb = dotProducta + producth;
	float producti = H_xeblpt * um43[1].x;
	float productj = H_woltq61 * um43[1].y;
	float dotProductc = producti + productj;
	float productk = H_t5l0o61 * um43[1].z;
	float dotProductd = dotProductc + productk;
	float productl = H_ava4xl * um43[1].x;
	float productm = H_f5tii71 * um43[1].y;
	float dotProducte = productl + productm;
	float productn = H_apoo6l1 * um43[1].z;
	float dotProductf = dotProducte + productn;
	vec4 H_j0jz62 = vec4(dotProduct9, dotProductb, dotProductd, dotProductf);
	float producto = H_nzd0al * um43[2].x;
	float productp = H_64je6f1 * um43[2].y;
	float dotProductg = producto + productp;
	float productq = H_jm62fa1 * um43[2].z;
	float dotProducth = dotProductg + productq;
	float productr = H_wfvnu * um43[2].x;
	float products = H_1fmxyv1 * um43[2].y;
	float dotProducti = productr + products;
	float productt = H_8z1wkm * um43[2].z;
	float dotProductj = dotProducti + productt;
	float productu = H_xeblpt * um43[2].x;
	float productv = H_woltq61 * um43[2].y;
	float dotProductk = productu + productv;
	float productw = H_t5l0o61 * um43[2].z;
	float dotProductl = dotProductk + productw;
	float productx = H_ava4xl * um43[2].x;
	float producty = H_f5tii71 * um43[2].y;
	float dotProductm = productx + producty;
	float productz = H_apoo6l1 * um43[2].z;
	float dotProductn = dotProductm + productz;
	vec4 H_gjrllq = vec4(dotProducth, dotProductj, dotProductl, dotProductn);
	float product01 = H_nzd0al * um43[3].x;
	float product11 = H_64je6f1 * um43[3].y;
	float dotProducto = product01 + product11;
	float product21 = H_jm62fa1 * um43[3].z;
	float dotProductp = dotProducto + product21;
	float product31 = H_wfvnu * um43[3].x;
	float product41 = H_1fmxyv1 * um43[3].y;
	float dotProductq = product31 + product41;
	float product51 = H_8z1wkm * um43[3].z;
	float dotProductr = dotProductq + product51;
	float product61 = H_xeblpt * um43[3].x;
	float product71 = H_woltq61 * um43[3].y;
	float dotProducts = product61 + product71;
	float product81 = H_t5l0o61 * um43[3].z;
	float dotProductt = dotProducts + product81;
	float product91 = H_ava4xl * um43[3].x;
	float producta1 = H_f5tii71 * um43[3].y;
	float dotProductu = product91 + producta1;
	float productb1 = H_apoo6l1 * um43[3].z;
	float dotProductv = dotProductu + productb1;
	vec4 H_c0k5ot = vec4(dotProductp, dotProductr, dotProductt, dotProductv);
	vec4 column3 = H_8n1esy1 + un34[0];
	vec4 column4 = H_j0jz62 + un34[1];
	vec4 column5 = H_gjrllq + un34[2];
	vec4 column6 = H_c0k5ot + C_xx1m2m1;
	float H_zs7squ1 = C_0d0 - column3.x;
	float H_04msgu1 = C_0d0 - column3.y;
	float H_x6frav1 = C_0d0 - column3.z;
	float H_mt1ncy1 = C_0d0 - column3.w;
	float H_mm0dww1 = C_0d0 - column4.x;
	float H_lbmc6x1 = C_0d0 - column4.y;
	float H_o8tdcw1 = C_0d0 - column4.z;
	float H_r50fiv1 = C_0d0 - column4.w;
	float H_pnnq0v = C_0d0 - column5.x;
	float H_qy1rqu = C_0d0 - column5.y;
	float H_r9grgu = C_0d0 - column5.z;
	float H_oc9qav = C_0d0 - column5.w;
	float H_o0exbl1 = C_0d0 - column6.x;
	float H_npzwll1 = C_0d0 - column6.y;
	float H_melwvl1 = C_0d0 - column6.z;
	float H_pbsx1l1 = C_0d0 - column6.w;
	float productc1 = H_zs7squ1 * v.x;
	float productd1 = H_mm0dww1 * v.y;
	float dotProductw = productc1 + productd1;
	float producte1 = H_pnnq0v * v.z;
	float dotProductx = dotProductw + producte1;
	float productf1 = H_o0exbl1 * v.w;
	float dotProducty = dotProductx + productf1;
	float productg1 = H_04msgu1 * v.x;
	float producth1 = H_lbmc6x1 * v.y;
	float dotProductz = productg1 + producth1;
	float producti1 = H_qy1rqu * v.z;
	float dotProduct01 = dotProductz + producti1;
	float productj1 = H_npzwll1 * v.w;
	float dotProduct11 = dotProduct01 + productj1;
	float productk1 = H_x6frav1 * v.x;
	float productl1 = H_o8tdcw1 * v.y;
	float dotProduct21 = productk1 + productl1;
	float productm1 = H_r9grgu * v.z;
	float dotProduct31 = dotProduct21 + productm1;
	float productn1 = H_melwvl1 * v.w;
	float dotProduct41 = dotProduct31 + productn1;
	float producto1 = H_mt1ncy1 * v.x;
	float productp1 = H_r50fiv1 * v.y;
	float dotProduct51 = producto1 + productp1;
	float productq1 = H_oc9qav * v.z;
	float dotProduct61 = dotProduct51 + productq1;
	float productr1 = H_pbsx1l1 * v.w;
	float dotProduct71 = dotProduct61 + productr1;
	vec4 H_cwt2y01 = vec4(dotProducty, dotProduct11, dotProduct41, dotProduct71);
	vec4 FragColor2 = FragColor + H_cwt2y01;
	vec4 column7 = column3 * column3;
	vec4 column8 = column4 * column4;
	vec4 column9 = column5 * column5;
	vec4 columna = column6 * column6;
	float dotres3 = dot(FragColor2, column7);
	float dotres4 = dot(FragColor2, column8);
	float dotres5 = dot(FragColor2, column9);
	float dotres6 = dot(FragColor2, columna);
	vec4 H_40o89y = vec4(dotres3, dotres4, dotres5, dotres6);
	FragColor = H_40o89y;
	vec4 H_kwzczo = vec4(um43[0].x, um43[1].x, um43[2].x, um43[3].x);
	vec4 H_kgu2311 = vec4(um43[0].y, um43[1].y, um43[2].y, um43[3].y);
	vec4 H_kv20e21 = vec4(um43[0].z, um43[1].z, um43[2].z, um43[3].z);
	float dotres7 = dot(H_40o89y, H_kwzczo);
	float dotres8 = dot(H_40o89y, H_kgu2311);
	float dotres9 = dot(H_40o89y, H_kv20e21);
	vec4 H_qfyms8 = vec4(dotres7, dotres8, dotres9, C_1d0);
	vec4 FragColor3 = H_40o89y * H_qfyms8;
	FragColor = FragColor3;
	float H_3li6wo = um4[2].z * um4[3].w;
	float H_l15ytn = um4[2].w * um4[3].z;
	float H_t2shgo1 = H_3li6wo - H_l15ytn;
	float H_ghwwrc = H_t2shgo1 * um4[1].y;
	float H_m74evs = um4[1].z * um4[3].w;
	float H_kh0649 = um4[1].w * um4[3].z;
	float H_qmghsx = H_m74evs - H_kh0649;
	float H_nrl37d1 = H_qmghsx * um4[2].y;
	float H_f1v9y2 = H_ghwwrc - H_nrl37d1;
	float H_ztcjf7 = um4[1].z * um4[2].w;
	float H_tfjde61 = um4[1].w * um4[2].z;
	float H_2mwh9b = H_ztcjf7 - H_tfjde61;
	float H_z8bayb = H_2mwh9b * um4[3].y;
	float H_39v7uu = H_f1v9y2 + H_z8bayb;
	float H_jvuhgz = H_39v7uu * um4[0].x;
	float H_115e0k = H_t2shgo1 * um4[0].y;
	float H_1shxba = um4[0].z * um4[3].w;
	float H_jkir871 = um4[0].w * um4[3].z;
	float H_xev94a = H_1shxba - H_jkir871;
	float H_am5qd51 = H_xev94a * um4[2].y;
	float H_rzojvc1 = H_115e0k - H_am5qd51;
	float H_ov62hq1 = um4[0].z * um4[2].w;
	float H_ulhosr1 = um4[0].w * um4[2].z;
	float H_927ghn1 = H_ov62hq1 - H_ulhosr1;
	float H_u6kl2p1 = H_927ghn1 * um4[3].y;
	float H_aqdzhm1 = H_rzojvc1 + H_u6kl2p1;
	float H_r8un9j1 = H_aqdzhm1 * um4[1].x;
	float H_tb8s0q1 = H_jvuhgz - H_r8un9j1;
	float H_t5q2h9 = H_qmghsx * um4[0].y;
	float H_16sjyg = H_xev94a * um4[1].y;
	float H_3t8hwu1 = H_t5q2h9 - H_16sjyg;
	float H_77kxqf1 = um4[0].z * um4[1].w;
	float H_1p635d1 = um4[0].w * um4[1].z;
	float H_jht1fu = H_77kxqf1 - H_1p635d1;
	float H_kjabsp = H_jht1fu * um4[3].y;
	float H_5u33bp = H_3t8hwu1 + H_kjabsp;
	float H_8cqhgo1 = H_5u33bp * um4[2].x;
	float H_gn2svw = H_8cqhgo1 + H_tb8s0q1;
	float H_kblvuv1 = H_2mwh9b * um4[0].y;
	float H_g7sztq = H_927ghn1 * um4[1].y;
	float H_d2jvfn = H_kblvuv1 - H_g7sztq;
	float H_t5tn0h = H_jht1fu * um4[2].y;
	float H_5yzvee1 = H_d2jvfn + H_t5tn0h;
	float H_aadfrz = H_5yzvee1 * um4[3].x;
	float H_rjdp921 = H_gn2svw - H_aadfrz;
	vec4 H_lh5ure = vec4(H_rjdp921);
	vec4 FragColor4 = FragColor3 * H_lh5ure;
	FragColor = FragColor4;
	float H_b6222b1 = um2[0].x * um2[1].y;
	float H_16xwf31 = um2[0].y * um2[1].x;
	float H_nwxe9d = H_b6222b1 - H_16xwf31;
	float recip = C_1d0 / H_nwxe9d;
	float H_wcs1ba = recip * um2[1].y;
	float H_v1e1la = recip * um2[1].x;
	float H_fwex8f = C_0d0 - H_v1e1la;
	float H_hw4bdh = recip * um2[0].y;
	float H_4re2p11 = C_0d0 - H_hw4bdh;
	float H_i7jb3h = recip * um2[0].x;
	vec4 H_xic1dt = vec4(H_wcs1ba, H_fwex8f, H_4re2p11, H_i7jb3h);
	vec4 FragColor5 = FragColor4 * H_xic1dt;
	FragColor = FragColor5;
	float H_qglfme = um3[0].x * um3[2].y;
	float H_gxj04t1 = um3[0].y * um3[2].x;
	float H_gha4hp1 = H_qglfme - H_gxj04t1;
	float H_tql9f41 = um3[1].y * um3[2].z;
	float H_n3tbtc = um3[1].z * um3[2].y;
	float H_vrojuk = H_tql9f41 - H_n3tbtc;
	float H_44m56n1 = H_vrojuk * um3[0].x;
	float H_ebrznt1 = um3[0].y * um3[2].z;
	float H_s5hfvd1 = um3[0].z * um3[2].y;
	float H_nzqwd21 = H_ebrznt1 - H_s5hfvd1;
	float H_xxz15r = H_nzqwd21 * um3[1].x;
	float H_plwbhx1 = H_44m56n1 - H_xxz15r;
	float H_p5a3xi = um3[0].y * um3[1].z;
	float H_ft4jtw = um3[0].z * um3[1].y;
	float H_1mc5ce = H_p5a3xi - H_ft4jtw;
	float H_74ry191 = H_1mc5ce * um3[2].x;
	float H_1oj4yo = H_74ry191 + H_plwbhx1;
	float recip1 = C_1d0 / H_1oj4yo;
	float H_vgxbr11 = H_gha4hp1 * recip1;
	float H_25y0a9 = C_0d0 - H_vgxbr11;
	vec4 H_lrj8z9 = vec4(H_25y0a9);
	vec4 FragColor6 = FragColor5 * H_lrj8z9;
	FragColor = FragColor6;
	float H_3li6wor = um4[2].z * um4[3].w;
	float H_l15ytnr = um4[2].w * um4[3].z;
	float H_zxm3yu = H_3li6wor - H_l15ytnr;
	float H_6kxwqp1 = H_zxm3yu * um4[1].y;
	float H_m74evsr = um4[1].z * um4[3].w;
	float H_kh0649r = um4[1].w * um4[3].z;
	float H_mi6bsr = H_m74evsr - H_kh0649r;
	float H_gzqyp7 = H_mi6bsr * um4[2].y;
	float H_spnr071 = H_6kxwqp1 - H_gzqyp7;
	float H_ztcjf7r = um4[1].z * um4[2].w;
	float H_tfjde61r = um4[1].w * um4[2].z;
	float H_eat6ef = H_ztcjf7r - H_tfjde61r;
	float H_1y3hr6 = H_eat6ef * um4[3].y;
	float H_209nuu1 = H_1y3hr6 + H_spnr071;
	float H_zvecet1 = H_zxm3yu * um4[0].y;
	float H_1shxbar = um4[0].z * um4[3].w;
	float H_jkir871r = um4[0].w * um4[3].z;
	float H_1wgt9k = H_1shxbar - H_jkir871r;
	float H_w5dpev = H_1wgt9k * um4[2].y;
	float H_ba16km = H_zvecet1 - H_w5dpev;
	float H_ov62hq1r = um4[0].z * um4[2].w;
	float H_ulhosr1r = um4[0].w * um4[2].z;
	float H_9ypwrb = H_ov62hq1r - H_ulhosr1r;
	float H_l5n0s61 = H_9ypwrb * um4[3].y;
	float H_vxu2ms = H_ba16km + H_l5n0s61;
	float H_umhlx2 = H_mi6bsr * um4[0].y;
	float H_rzucjq1 = H_1wgt9k * um4[1].y;
	float H_47q6xs = H_umhlx2 - H_rzucjq1;
	float H_77kxqf1r = um4[0].z * um4[1].w;
	float H_1p635d1r = um4[0].w * um4[1].z;
	float H_7a2vzp1 = H_77kxqf1r - H_1p635d1r;
	float H_3i5c371 = H_7a2vzp1 * um4[3].y;
	float H_el5zkl1 = H_3i5c371 + H_47q6xs;
	float H_ehaf721 = H_eat6ef * um4[0].y;
	float H_z6m3ry = H_9ypwrb * um4[1].y;
	float H_33yuv41 = H_ehaf721 - H_z6m3ry;
	float H_qmi5jb = H_7a2vzp1 * um4[2].y;
	float H_d99psd1 = H_33yuv41 + H_qmi5jb;
	float H_59jw0q1 = H_zxm3yu * um4[1].x;
	float H_focyz7 = H_mi6bsr * um4[2].x;
	float H_rzijp61 = H_59jw0q1 - H_focyz7;
	float H_29ihh6 = H_eat6ef * um4[3].x;
	float H_w5tyjj1 = H_29ihh6 + H_rzijp61;
	float H_07tc4t1 = H_zxm3yu * um4[0].x;
	float H_vuyoov = H_1wgt9k * um4[2].x;
	float H_h7wzbs = H_07tc4t1 - H_vuyoov;
	float H_mg11i61 = H_9ypwrb * um4[3].x;
	float H_1abjwc = H_h7wzbs + H_mg11i61;
	float H_tb3l73 = H_mi6bsr * um4[0].x;
	float H_sa9d9q1 = H_1wgt9k * um4[1].x;
	float H_d3penl1 = H_tb3l73 - H_sa9d9q1;
	float H_4tjct61 = H_7a2vzp1 * um4[3].x;
	float H_55jrt71 = H_4tjct61 + H_d3penl1;
	float H_d6weh21 = H_eat6ef * um4[0].x;
	float H_0i04hy = H_9ypwrb * um4[1].x;
	float H_tbzsnn1 = H_d6weh21 - H_0i04hy;
	float H_pb45tb = H_7a2vzp1 * um4[2].x;
	float H_12125n = H_pb45tb + H_tbzsnn1;
	float H_supot = um4[2].y * um4[3].w;
	float H_oybzzm = um4[2].w * um4[3].y;
	float H_k9e60m = H_supot - H_oybzzm;
	float H_l37ydo1 = H_k9e60m * um4[1].x;
	float H_5xwilx = um4[1].y * um4[3].w;
	float H_hkt4y9 = um4[1].w * um4[3].y;
	float H_s1vr3r1 = H_5xwilx - H_hkt4y9;
	float H_yvuvd41 = H_s1vr3r1 * um4[2].x;
	float H_o3b8591 = H_l37ydo1 - H_yvuvd41;
	float H_kulft11 = um4[1].y * um4[2].w;
	float H_wcqek51 = um4[1].w * um4[2].y;
	float H_7ndc331 = H_kulft11 - H_wcqek51;
	float H_ov9x691 = H_7ndc331 * um4[3].x;
	float H_78cnyl1 = H_o3b8591 + H_ov9x691;
	float H_4sfuv8 = H_k9e60m * um4[0].x;
	float H_6x6th21 = um4[0].y * um4[3].w;
	float H_i94ri71 = um4[0].w * um4[3].y;
	float H_mxwnr6 = H_6x6th21 - H_i94ri71;
	float H_60m5an = H_mxwnr6 * um4[2].x;
	float H_xbx79c1 = H_4sfuv8 - H_60m5an;
	float H_znnd6o = um4[0].y * um4[2].w;
	float H_vwvoir1 = um4[0].w * um4[2].y;
	float H_z1ycwe1 = H_znnd6o - H_vwvoir1;
	float H_ntfv1r = H_z1ycwe1 * um4[3].x;
	float H_9bam4s = H_ntfv1r + H_xbx79c1;
	float H_slhk3g = H_s1vr3r1 * um4[0].x;
	float H_hxz2aj1 = H_mxwnr6 * um4[1].x;
	float H_2nqj5x1 = H_slhk3g - H_hxz2aj1;
	float H_86dtga1 = um4[0].y * um4[1].w;
	float H_4md4bc1 = um4[0].w * um4[1].y;
	float H_yx2t34 = H_86dtga1 - H_4md4bc1;
	float H_nd1n9s1 = H_yx2t34 * um4[3].x;
	float H_3m31g61 = H_2nqj5x1 + H_nd1n9s1;
	float H_3dllsu = H_7ndc331 * um4[0].x;
	float H_d61epq = H_z1ycwe1 * um4[1].x;
	float H_arheuf1 = H_3dllsu - H_d61epq;
	float H_yl884j1 = H_yx2t34 * um4[2].x;
	float H_idyv91 = H_arheuf1 + H_yl884j1;
	float H_775xsw1 = um4[2].y * um4[3].z;
	float H_dnha4m = um4[2].z * um4[3].y;
	float H_yilpft = H_775xsw1 - H_dnha4m;
	float H_pb1puf = H_yilpft * um4[1].x;
	float H_ujjen01 = um4[1].y * um4[3].z;
	float H_klbdft = um4[1].z * um4[3].y;
	float H_2svmmm = H_ujjen01 - H_klbdft;
	float H_u274q11 = H_2svmmm * um4[2].x;
	float H_pusgkj1 = H_pb1puf - H_u274q11;
	float H_fbmd731 = um4[1].y * um4[2].z;
	float H_9wbnn4 = um4[1].z * um4[2].y;
	float H_k2bkuq = H_fbmd731 - H_9wbnn4;
	float H_vz0rfd1 = H_k2bkuq * um4[3].x;
	float H_2jg71w1 = H_pusgkj1 + H_vz0rfd1;
	float H_c3egiu = H_yilpft * um4[0].x;
	float H_hakxfz = um4[0].y * um4[3].z;
	float H_7mvzn8 = um4[0].z * um4[3].y;
	float H_21jt0c1 = H_hakxfz - H_7mvzn8;
	float H_l6hesv = H_21jt0c1 * um4[2].x;
	float H_kpc5mv1 = H_c3egiu - H_l6hesv;
	float H_wqgc0p = um4[0].y * um4[2].z;
	float H_yx56pn1 = um4[0].z * um4[2].y;
	float H_xg0zgo = H_wqgc0p - H_yx56pn1;
	float H_k5r0ms1 = H_xg0zgo * um4[3].x;
	float H_8g1ksk = H_k5r0ms1 + H_kpc5mv1;
	float H_wmo9im = H_2svmmm * um4[0].x;
	float H_ecy4q6 = H_21jt0c1 * um4[1].x;
	float H_kbo8ax = H_wmo9im - H_ecy4q6;
	float H_v67o2e1 = um4[0].y * um4[1].z;
	float H_twzrmj1 = um4[0].z * um4[1].y;
	float H_fqw6r = H_v67o2e1 - H_twzrmj1;
	float H_djhool1 = H_fqw6r * um4[3].x;
	float H_o4jy991 = H_djhool1 + H_kbo8ax;
	float H_wuzc29 = H_k2bkuq * um4[0].x;
	float H_em7rs8 = H_xg0zgo * um4[1].x;
	float H_647b9l = H_wuzc29 - H_em7rs8;
	float H_gff5r5 = H_fqw6r * um4[2].x;
	float H_9e9nmp1 = H_647b9l + H_gff5r5;
	float H_iqvkgn = H_209nuu1 * um4[0].x;
	float H_u2g6rf1 = H_vxu2ms * um4[1].x;
	float H_1hy0be = H_iqvkgn - H_u2g6rf1;
	float H_qs9ugk1 = H_el5zkl1 * um4[2].x;
	float H_sipbvx1 = H_1hy0be + H_qs9ugk1;
	float H_z616v41 = H_d99psd1 * um4[3].x;
	float H_zvhf6o = H_sipbvx1 - H_z616v41;
	float recip2 = C_1d0 / H_zvhf6o;
	float H_vxbvle1 = H_209nuu1 * recip2;
	float H_v7mlhl1 = H_w5tyjj1 * recip2;
	float H_g0sh5r1 = C_0d0 - H_v7mlhl1;
	float H_3d9y5t = H_78cnyl1 * recip2;
	float H_i6bq5c1 = H_2jg71w1 * recip2;
	float H_gp4s8w1 = C_0d0 - H_i6bq5c1;
	float H_a5lvgi1 = H_vxu2ms * recip2;
	float H_euax2s1 = C_0d0 - H_a5lvgi1;
	float H_l95xx2 = H_1abjwc * recip2;
	float H_tlhlug1 = H_9bam4s * recip2;
	float H_iu3tds = C_0d0 - H_tlhlug1;
	float H_sntwbp = H_8g1ksk * recip2;
	float H_hajl4f1 = H_el5zkl1 * recip2;
	float H_byl6411 = H_55jrt71 * recip2;
	float H_e0jrcq1 = C_0d0 - H_byl6411;
	float H_59xuad = H_3m31g61 * recip2;
	float H_w5n2oc1 = H_o4jy991 * recip2;
	float H_o7q1hm = C_0d0 - H_w5n2oc1;
	float H_pnpcwj = H_d99psd1 * recip2;
	float H_19dbzn1 = C_0d0 - H_pnpcwj;
	float H_8vsrht1 = H_12125n * recip2;
	float H_ho60y2 = H_idyv91 * recip2;
	float H_zg7ftt = C_0d0 - H_ho60y2;
	float H_4nk6ok1 = H_9e9nmp1 * recip2;
	vec4 H_yks06y = vec4(H_vxbvle1, H_euax2s1, H_hajl4f1, H_19dbzn1);
	vec4 H_ey9ac11 = vec4(H_g0sh5r1, H_l95xx2, H_e0jrcq1, H_8vsrht1);
	vec4 H_iay5gm1 = vec4(H_3d9y5t, H_iu3tds, H_59xuad, H_zg7ftt);
	vec4 H_dm6oae1 = vec4(H_gp4s8w1, H_sntwbp, H_o7q1hm, H_4nk6ok1);
	float dotresa = dot(FragColor6, H_yks06y);
	float dotresb = dot(FragColor6, H_ey9ac11);
	float dotresc = dot(FragColor6, H_iay5gm1);
	float dotresd = dot(FragColor6, H_dm6oae1);
	vec4 H_ocqmv81 = vec4(dotresa, dotresb, dotresc, dotresd);
	FragColor = H_ocqmv81;
	vec4 columnb = un34[0] * un34[0];
	vec4 columnc = un34[1] * un34[1];
	vec4 columnd = un34[2] * un34[2];
	float dotrese = dot(H_ocqmv81, columnb);
	float dotresf = dot(H_ocqmv81, columnc);
	float dotresg = dot(H_ocqmv81, columnd);
	vec4 H_wp299l1 = vec4(dotrese, dotresf, dotresg, dotresd);
	FragColor = H_wp299l1;
	
}

matrixAgg.frag
#version 120
// LunarGOO output
struct s {
	int count;
	mat4x3 sm[12];
};
uniform s us;
uniform int i;
uniform mat4x3 am[8];
uniform mat4x3 m;
varying vec3 v;

void main()
{
	vec3 column = am[4][0] + us.sm[i][0];
	vec3 column1 = am[4][1] + us.sm[i][1];
	vec3 column2 = am[4][2] + us.sm[i][2];
	vec3 column3 = am[4][3] + us.sm[i][3];
	float dotres = dot(v, column);
	float dotres1 = dot(v, column1);
	float dotres2 = dot(v, column2);
	float dotres3 = dot(v, column3);
	vec4 H_siz04c = vec4(dotres, dotres1, dotres2, dotres3);
	gl_FragColor = H_siz04c;
	
}

texture.frag
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
uniform vec4 u;
uniform float blend;
uniform vec2 scale;
in vec2 coords2D;
in vec2 t;
const float C_1d789 = 1.789;
const float C_2d0 = 2.0;
const vec4 C_gyy781 = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 C_t1ff8m1 = vec3(1.789, 2.718, 3.453);
const ivec2 C_ivec2p0ca5p = ivec2(0, 5);
const int C_1 = 1;
const ivec2 C_oezkvl1 = ivec2(3, -7);
const float C_3d0 = 3.0;

void main()
{
	vec4 color = texture(texSampler1D, C_1d789);
	vec4 color1 = texture(texSampler1D, C_1d789, C_2d0);
	vec4 color2 = color + color1;
	vec4 color3 = textureProj(texSampler1D, coords2D);
	vec4 color4 = color2 + color3;
	vec4 color5 = textureProj(texSampler1D, C_gyy781);
	vec4 color6 = color4 + color5;
	vec4 color7 = textureProj(texSampler1D, coords2D, C_2d0);
	vec4 color8 = color6 + color7;
	vec4 color9 = textureProj(texSampler1D, C_gyy781, C_2d0);
	vec4 colora = color8 + color9;
	vec4 colorb = texture(texSampler2D, coords2D);
	vec4 colorc = colora + colorb;
	vec4 colord = texture(texSampler2D, coords2D, C_2d0);
	vec4 colore = colorc + colord;
	vec4 colorf = textureProj(texSampler2D, C_t1ff8m1);
	vec4 colorg = colore + colorf;
	vec4 colorh = textureProj(texSampler2D, C_gyy781, C_2d0);
	vec4 colori = colorg + colorh;
	vec4 colorj = texture(texSampler3D, C_t1ff8m1);
	vec4 colork = colori + colorj;
	vec4 colorl = texture(texSampler3D, C_t1ff8m1, C_2d0);
	vec4 colorm = colork + colorl;
	vec4 colorn = textureProj(texSampler3D, C_gyy781);
	vec4 coloro = colorm + colorn;
	vec4 colorp = textureProj(texSampler3D, C_gyy781, C_2d0);
	vec4 colorq = coloro + colorp;
	vec4 colorr = texture(texSamplerCube, C_t1ff8m1);
	vec4 colors = colorq + colorr;
	vec4 colort = texture(texSamplerCube, C_t1ff8m1, C_2d0);
	vec4 coloru = colors + colort;
	vec4 colorv = shadow1D(shadowSampler1D, C_t1ff8m1);
	vec4 colorw = coloru + colorv;
	vec4 colorx = shadow1D(shadowSampler1D, C_t1ff8m1, C_2d0);
	vec4 colory = colorw + colorx;
	vec4 colorz = shadow2D(shadowSampler2D, C_t1ff8m1);
	vec4 color01 = colory + colorz;
	vec4 color11 = shadow2D(shadowSampler2D, C_t1ff8m1, C_2d0);
	vec4 color21 = color01 + color11;
	vec4 color31 = shadow1DProj(shadowSampler1D, C_gyy781);
	vec4 color41 = color21 + color31;
	vec4 color51 = shadow1DProj(shadowSampler1D, C_gyy781, C_2d0);
	vec4 color61 = color41 + color51;
	vec4 color71 = shadow2DProj(shadowSampler2D, C_gyy781);
	vec4 color81 = color61 + color71;
	vec4 color91 = shadow2DProj(shadowSampler2D, C_gyy781, C_2d0);
	vec4 colora1 = color81 + color91;
	vec4 colorb1 = texelFetch(texSampler2D, C_ivec2p0ca5p, C_1);
	vec4 colorc1 = colora1 + colorb1;
	vec2 gradX = dFdx(coords2D);
	vec2 gradY = dFdy(coords2D);
	vec4 colord1 = textureGrad(texSampler2D, coords2D, gradX, gradY);
	vec4 colore1 = colorc1 + colord1;
	vec3 H_qoi6ir1 = vec3(coords2D.x, coords2D.y, C_2d0);
	vec4 colorf1 = textureProjGrad(texSampler2D, H_qoi6ir1, gradX, gradY);
	vec4 colorg1 = colore1 + colorf1;
	vec4 colorh1 = textureGradOffset(texSampler2D, coords2D, gradX, gradY, C_oezkvl1);
	vec4 colori1 = colorg1 + colorh1;
	vec4 colorj1 = textureProjGradOffset(texSampler2D, C_t1ff8m1, gradX, gradY, C_oezkvl1);
	vec4 colork1 = colori1 + colorj1;
	vec3 H_7u8f7h1 = vec3(coords2D.x, coords2D.y, C_3d0);
	float colorl1 = textureGrad(shadowSampler2D, H_7u8f7h1, gradX, gradY);
	vec4 H_a3k5mx = vec4(colorl1);
	vec4 colorm1 = H_a3k5mx + colork1;
	float H_tualej = C_1d789 * blend;
	vec4 Ll_FragColor1 = mix(colorm1, u, H_tualej);
	gl_FragColor = Ll_FragColor1;
	
}

texture.vert
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
in vec2 coords2D;
const float C_1d789 = 1.789;
const float C_3d0 = 3.0;
const vec4 C_gyy781 = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 C_t1ff8m1 = vec3(1.789, 2.718, 3.453);

void main()
{
	vec4 color = textureLod(texSampler1D, C_1d789, C_3d0);
	vec4 color1 = textureProjLod(texSampler1D, coords2D, C_3d0);
	vec4 color2 = color + color1;
	vec4 color3 = textureProjLod(texSampler1D, C_gyy781, C_3d0);
	vec4 color4 = color2 + color3;
	vec4 color5 = textureLod(texSampler2D, coords2D, C_3d0);
	vec4 color6 = color4 + color5;
	vec4 color7 = textureProjLod(texSampler2D, C_t1ff8m1, C_3d0);
	vec4 color8 = color6 + color7;
	vec4 color9 = textureProjLod(texSampler2D, C_gyy781, C_3d0);
	vec4 colora = color8 + color9;
	vec4 colorb = textureLod(texSampler3D, C_t1ff8m1, C_3d0);
	vec4 colorc = colora + colorb;
	vec4 colord = textureProjLod(texSampler3D, C_gyy781, C_3d0);
	vec4 colore = colorc + colord;
	vec4 colorf = textureLod(texSamplerCube, C_t1ff8m1, C_3d0);
	vec4 colorg = colore + colorf;
	vec4 colorh = shadow1DLod(shadowSampler1D, C_t1ff8m1, C_3d0);
	vec4 colori = colorg + colorh;
	vec4 colorj = shadow2DLod(shadowSampler2D, C_t1ff8m1, C_3d0);
	vec4 colork = colori + colorj;
	vec4 colorl = shadow1DProjLod(shadowSampler1D, C_gyy781, C_3d0);
	vec4 colorm = colork + colorl;
	vec4 colorn = shadow2DProjLod(shadowSampler2D, C_gyy781, C_3d0);
	vec4 coloro = colorm + colorn;
	gl_Position = coloro;
	
}

300BuiltIns.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform bvec3 bv;
uniform mediump int imin;
uniform mediump int imax;
uniform mediump uint umin;
uniform mediump uint umax;
in mediump vec3 x;
in mediump vec3 y;
flat in mediump ivec4 iv4a;
flat in mediump ivec4 iv4b;
flat in mediump uvec2 uv2x;
flat in mediump uvec2 uv2y;
flat in mediump uvec4 uv4y;
flat in mediump uint uy;
flat in mediump ivec3 iv3a;
flat in mediump ivec3 iv3b;
flat in mediump uvec2 uv2c;
in mediump float f;
in mediump vec2 v2a;
in mediump vec4 v4;
in mediump vec2 v2b;
out mediump vec4 result;
const float C_0d0 = 0.0;
const int C_0 = 0;
const vec2 C_vec2p2d0p = vec2(2.0);
const float C_0d1 = 0.1;

void main()
{
	mediump vec3 sum = mix(x, y, bv);
	vec4 H_mwcelf = vec4(sum.x, sum.y, sum.z, C_0d0);
	mediump ivec4 isum = abs(iv4a);
	mediump ivec4 isum1 = sign(iv4a);
	mediump ivec4 isum2 = isum + isum1;
	mediump ivec4 isum3 = min(iv4a, iv4b);
	mediump ivec4 isum4 = isum2 + isum3;
	mediump ivec4 isum5 = min(iv4a, imin);
	mediump ivec4 isum6 = isum4 + isum5;
	mediump ivec2 H_hzeqx4 = min(ivec2(uv2x), ivec2(uv2y));
	ivec4 H_4l54vw = ivec4(H_hzeqx4.x, H_hzeqx4.y, C_0, C_0);
	mediump ivec4 usum = min(ivec4(uv4y), int(uy));
	mediump ivec4 usum1 = H_4l54vw + usum;
	mediump ivec3 H_pf1wc21 = max(iv3a, iv3b);
	ivec4 H_9qn0ej1 = ivec4(H_pf1wc21.x, H_pf1wc21.y, H_pf1wc21.z, C_0);
	mediump ivec4 isum7 = H_9qn0ej1 + isum6;
	mediump ivec4 isum8 = max(iv4a, imax);
	mediump ivec4 isum9 = isum7 + isum8;
	mediump ivec2 H_blgwez = max(ivec2(uv2x), ivec2(uv2y));
	mediump ivec2 H_t00eqj = max(ivec2(uv2x), int(uy));
	ivec4 H_t86uxe1 = ivec4(H_blgwez.x, H_blgwez.y, H_t00eqj.x, H_t00eqj.y);
	mediump ivec4 usum2 = H_t86uxe1 + usum1;
	mediump ivec4 isuma = clamp(iv4a, iv4a, iv4b);
	mediump ivec4 isumb = isum9 + isuma;
	mediump ivec4 isumc = clamp(iv4a, imin, imax);
	mediump ivec4 isumd = isumb + isumc;
	mediump ivec2 H_ctk6mt = clamp(ivec2(uv2x), ivec2(uv2y), ivec2(uv2c));
	ivec4 H_o4xdcc1 = ivec4(H_ctk6mt.x, H_ctk6mt.y, C_0, C_0);
	mediump ivec4 usum3 = H_o4xdcc1 + usum2;
	mediump ivec4 usum4 = clamp(ivec4(uv4y), int(umin), int(umax));
	mediump ivec4 usum5 = usum3 + usum4;
	struct  {
	vec3 member0;
	vec3 member1;
} Lg_1; Lg_1.member0 = modf(x, Lg_1.member1);
	vec4 H_ynrwua1 = vec4(Lg_1.member0.x, Lg_1.member0.y, Lg_1.member0.z, Lg_1.member1.x);
	mediump vec4 sum1 = H_mwcelf + H_ynrwua1;
	mediump float sum2 = trunc(f);
	vec4 H_9c5itt = vec4(sum2);
	mediump vec4 sum3 = H_9c5itt + sum1;
	mediump vec2 H_z56gqk1 = round(v2a);
	mediump vec2 H_z05d6r = roundEven(v2a);
	vec4 H_kqw9d31 = vec4(H_z56gqk1.x, H_z56gqk1.y, H_z05d6r.x, H_z05d6r.y);
	mediump vec4 sum4 = H_kqw9d31 + sum3;
	bvec2 H_cy3k1z = isnan(v2a);
	bvec4 H_tx61al1 = isinf(v4);
	mediump ivec2 H_r3r3xx = ivec2(H_cy3k1z);
	mediump ivec4 H_tad3bu1 = ivec4(H_tx61al1);
	ivec4 H_vxhdx71 = ivec4(H_r3r3xx.x, H_r3r3xx.y, H_tad3bu1.x, H_tad3bu1.y);
	mediump ivec4 isume = H_vxhdx71 + isumd;
	mediump int H_i86q1r = floatBitsToInt(f);
	ivec4 H_vvf8zk1 = ivec4(H_i86q1r);
	mediump ivec4 isumf = H_vvf8zk1 + isume;
	mediump ivec4 usum6 = floatBitsToInt(v4);
	mediump ivec4 usum7 = usum5 + usum6;
	mediump vec4 sum5 = intBitsToFloat(iv4a);
	mediump vec4 sum6 = sum4 + sum5;
	mediump vec2 H_awczdb = intBitsToFloat(ivec2(uv2c));
	vec4 H_h40lmx1 = vec4(H_awczdb.x, H_awczdb.y, C_0d0, C_0d0);
	mediump vec4 sum7 = H_h40lmx1 + sum6;
	highp int H_aqcc2q1 = int(packSnorm2x16(v2a));
	highp vec2 H_bcj1fu = unpackSnorm2x16(uint(int(uy)));
	highp int H_slyzqu1 = int(packUnorm2x16(v2a));
	highp vec2 H_pltztp1 = unpackUnorm2x16(uint(int(uy)));
	highp int H_jzskf11 = int(packHalf2x16(v2b));
	mediump vec2 H_73yecd1 = unpackHalf2x16(uint(int(uy)));
	ivec4 H_3vcyzg = ivec4(H_aqcc2q1, H_slyzqu1, H_jzskf11, C_0);
	mediump ivec4 usum8 = H_3vcyzg + usum7;
	vec4 H_wppdxa1 = vec4(H_bcj1fu.x, H_bcj1fu.y, H_pltztp1.x, H_pltztp1.y);
	mediump vec4 sum8 = H_wppdxa1 + sum7;
	vec4 H_f628sr1 = vec4(H_73yecd1.x, H_73yecd1.y, C_0d0, C_0d0);
	mediump vec4 sum9 = H_f628sr1 + sum8;
	mediump vec4 H_u9g6me = vec4(isumf);
	mediump vec4 H_6vyoua1 = H_u9g6me + sum9;
	mediump vec4 H_cy3br51 = vec4(usum8);
	mediump vec4 result1 = H_6vyoua1 + H_cy3br51;
	result = result1;
	mediump vec2 H_67d0kq1 = gl_PointCoord * C_vec2p2d0p;
	vec4 H_0wse3z = vec4(gl_PointCoord.x, gl_PointCoord.y, H_67d0kq1.x, H_67d0kq1.y);
	highp vec4 H_uyk0mz = H_0wse3z + gl_FragCoord;
	highp vec4 result2 = H_uyk0mz + result1;
	result = result2;
	highp float Ll_FragDepth1 = f + C_0d1;
	gl_FragDepth = Ll_FragDepth1;
	
}

300BuiltIns.vert
#version 300 es
// LunarGOO output
in mediump float ps;
const int C_2 = 2;
const int C_a10 = -10;
invariant gl_Position ;
void main()
{
	int H_0e5x2b = gl_VertexID << C_2;
	int H_zzd96r = H_0e5x2b + C_a10;
	vec4 H_n1bm9l1 = vec4(ps);
	highp float H_sgg9t9 = float(H_zzd96r);
	vec4 H_g3cgr71 = vec4(H_sgg9t9);
	highp vec4 Ll_Position1 = H_g3cgr71 * H_n1bm9l1;
	gl_Position = Ll_Position1;
	highp float Ll_PointSize1 = H_sgg9t9 * ps;
	gl_PointSize = Ll_PointSize1;
	
}

uniformArray.frag
#version 130
// LunarGOO output
uniform vec4 color[6];
uniform vec3 inColor;
uniform float alpha[16];
uniform sampler2D texSampler2D;

void main()
{
	vec4 texColor = color[1] + color[1];
	vec3 H_x8o15e1 = inColor + texColor.xyz;
	float H_298fmk = alpha[12] + texColor.w;
	vec4 H_d3vqz51 = vec4(H_x8o15e1.x, H_x8o15e1.y, H_x8o15e1.z, H_298fmk);
	gl_FragColor = H_d3vqz51;
	
}

newTexture.frag
#version 430 core
// LunarGOO output
uniform sampler2D s2D;
uniform sampler3D s3D;
uniform sampler2DArray s2DArray;
uniform sampler2DShadow s2DShadow;
uniform samplerCube sCube;
uniform sampler2DArrayShadow s2DArrayShadow;
uniform isampler2D is2D;
uniform isampler3D is3D;
uniform isamplerCube isCube;
uniform isampler2DArray is2DArray;
uniform samplerCubeShadow sCubeShadow;
uniform isampler2D is2Dms;
uniform usampler2D us2D;
uniform usampler3D us3D;
uniform usamplerCube usCube;
uniform usampler2DArray us2DArray;
in vec2 c2D;
in vec4 c4D;
in vec3 c3D;
in float c1D;
flat in ivec3 ic3D;
flat in int ic1D;
flat in ivec2 ic2D;
flat in ivec4 ic4D;
out vec4 FragData;
const float C_1d2 = 1.2;
const ivec2 C_ivec2p3p = ivec2(3);
const int C_4 = 4;
const float C_4d2 = 4.2;
const int C_2 = 2;
const float C_0d0 = 0.0;

void main()
{
	vec4 H_psozrr1 = texture(s2D, c2D);
	vec4 H_hrxjei = textureProj(s3D, c4D);
	vec4 H_j5s1i91 = H_hrxjei + H_psozrr1;
	vec4 H_zy7hav1 = textureLod(s2DArray, c3D, C_1d2);
	vec4 H_4uplnx = H_j5s1i91 + H_zy7hav1;
	float H_hjrk4h = textureOffset(s2DShadow, c3D, C_ivec2p3p, c1D);
	float H_7jsn5f = H_4uplnx.y + H_hjrk4h;
	vec4 H_xgwibs = H_4uplnx;
	H_xgwibs.y = H_7jsn5f;
	vec4 H_8sp3bo1 = texelFetch(s3D, ic3D, ic1D);
	vec4 H_yfqtjc1 = H_8sp3bo1 + H_xgwibs;
	vec4 H_w1booj = texelFetchOffset(s2D, ic2D, C_4, ic2D);
	vec4 H_o77xck1 = H_w1booj + H_yfqtjc1;
	float H_cyjcmi = textureLodOffset(s2DShadow, c3D, c1D, C_ivec2p3p);
	float H_0q4wej1 = H_cyjcmi + H_o77xck1.y;
	vec4 H_mbhnl21 = H_o77xck1;
	H_mbhnl21.y = H_0q4wej1;
	vec4 H_rng2f5 = textureProjLodOffset(s2D, c3D, c1D, C_ivec2p3p);
	vec4 H_8f7hu8 = H_mbhnl21 + H_rng2f5;
	vec4 H_lr92sb = textureGrad(sCube, c3D, c3D, c3D);
	vec4 H_64fhq61 = H_8f7hu8 + H_lr92sb;
	float H_b9nber = textureGradOffset(s2DArrayShadow, c4D, c2D, c2D, C_ivec2p3p);
	float H_oxgvt11 = H_64fhq61.x + H_b9nber;
	vec4 H_iv0jvn = H_64fhq61;
	H_iv0jvn.x = H_oxgvt11;
	vec4 H_pkmpj3 = textureProjGrad(s3D, c4D, c3D, c3D);
	vec4 H_u1hknb1 = H_iv0jvn + H_pkmpj3;
	vec4 H_ot18mt = textureProjGradOffset(s2D, c3D, c2D, c2D, C_ivec2p3p);
	vec4 H_vx78251 = H_ot18mt + H_u1hknb1;
	ivec4 iv = texture(is2D, c2D);
	vec4 H_drjgdg1 = vec4(iv);
	vec4 H_qxtwxg1 = H_drjgdg1 + H_vx78251;
	ivec4 iv1 = textureProjOffset(is2D, c4D, C_ivec2p3p);
	vec4 H_4tvuqr1 = vec4(iv1);
	vec4 H_n7us35 = H_4tvuqr1 + H_qxtwxg1;
	ivec4 iv2 = textureProjLod(is2D, c3D, c1D);
	vec4 H_ria08s = vec4(iv2);
	vec4 H_qilkce = H_n7us35 + H_ria08s;
	ivec4 iv3 = textureProjGrad(is2D, c3D, c2D, c2D);
	vec4 H_ydpzyj1 = vec4(iv3);
	vec4 H_6knan71 = H_qilkce + H_ydpzyj1;
	ivec4 iv4 = texture(is3D, c3D, C_4d2);
	vec4 H_5pjwgk = vec4(iv4);
	vec4 H_ujhcnu1 = H_5pjwgk + H_6knan71;
	ivec4 iv5 = textureLod(isCube, c3D, c1D);
	vec4 H_46elgu = vec4(iv5);
	vec4 H_r3pnvg1 = H_46elgu + H_ujhcnu1;
	ivec4 iv6 = texelFetch(is2DArray, ic3D, ic1D);
	vec4 H_3hnokl = vec4(iv6);
	vec4 H_kije5n1 = H_3hnokl + H_r3pnvg1;
	ivec2 iv7 = textureSize(sCubeShadow, C_2);
	vec2 H_w4k3ff = vec2(iv7);
	vec4 H_1s1qp41 = vec4(H_w4k3ff.x, H_w4k3ff.y, C_0d0, C_0d0);
	vec4 FragData1 = H_1s1qp41 + H_kije5n1;
	FragData = FragData1;
	
}

qualifiers.frag
#version 430 core
// LunarGOO output
uniform image2D imageVc;
uniform image2D imageVv;
uniform image2D imageVr;
uniform image2D imageVro;
uniform image2D imageVwo;
uniform image2D imageVall;
centroid in vec4 inVc;
in vec4 inVs;
flat in vec4 inVf;
noperspective in vec4 inVn;
centroid noperspective in vec4 inVcn;
sample in vec4 inV;
out vec4 outVi;
invariant outVi ;
void main()
{
	vec4 H_gwjc1z = inVc + inVs;
	vec4 H_ywu9xw = H_gwjc1z + inVf;
	vec4 H_96hcbo = H_ywu9xw + inVn;
	vec4 outVi1 = H_96hcbo + inVcn;
	outVi = outVi1;
	
}

