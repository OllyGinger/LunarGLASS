test.frag
#version 110
// LunarGOO output
uniform sampler2D texSampler2D;
uniform vec2 scale;
uniform sampler3D texSampler3D;
uniform vec4 u;
uniform float blend;
varying vec2 t;
varying vec3 coords;
const float L_8 = 1.789;

void main()
{
	vec2 L_1 = scale + t;
	vec2 L_2 = L_1 / scale;
	vec4 L_3 = texture2D(texSampler2D, L_2);
	vec4 L_4 = L_3.wzyx;
	vec4 L_5 = texture3D(texSampler3D, coords);
	vec4 L_6 = L_4 + L_5;
	float L_7 = blend * L_8;
	vec4 Ll_FragColor_c1 = mix(L_6, u, L_7);
	gl_FragColor = Ll_FragColor_c1;
	
}

test.vert
#version 130
// LunarGOO output
uniform mat4 transform;
in vec2 uv_in;
in vec4 position;
out vec2 uv;

void main()
{
	uv = uv_in;
	vec4 L_1 = ftransform();
	vec4 Ll_Position_c1 = L_1 + position;
	gl_Position = Ll_Position_c1;
	
}

deepRvalue.frag
#version 120
// LunarGOO output
uniform sampler2D sampler;
const vec2 L_2 = vec2(0.5);
const float L_4 = 0.1;
const float L_6 = 7.0;
const float L_7 = 19.0;
const vec4 L_b = vec4(361.0, 841.0, 5.0, 0.0);

void main()
{
	vec4 L_1 = texture2D(sampler, L_2);
	bool L_3 = L_1.y > L_4;
	float L_5 = L_3 ? L_6 : L_7;
	float L_8 = L_1.y + L_5;
	float L_9 = L_6 + L_8;
	vec4 L_a = L_b;
	L_a.w = L_9;
	gl_FragColor = L_a;
	
}

block.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
struct S {
	mediump vec4 u;
	mediump uvec4 v;
	lowp isampler2D sampler;
	mediump vec3 w;
	mediump mat3 m3a[5];
};
uniform S s;
uniform fooBlock {
	mediump vec4 bu;
	mediump vec2 bw;
	mediump uvec4 bv;
	S bs;
	mediump mat2 bm2;
	mediump mat4 m4a[8];
} ;
uniform barBlock {
	mediump vec4 nbu;
	mediump mat3 nbm;
	mediump uvec4 nbv;
	mediump int ni;
} inst[4];
out mediump vec4 color;

void main()
{
	mediump ivec4 L_1 = texture(s.sampler, bw);
	mediump vec4 L_2 = vec4(L_1);
	mediump vec4 L_3 = L_2 + inst[3].nbu;
	mediump vec4 color_c1 = L_3 + bu;
	color = color_c1;
	
}

length.frag
#version 120
// LunarGOO output
uniform vec4 u[3];
varying vec2 v[2];
const vec4 L_1 = vec4(30.0);

void main()
{
	gl_FragColor = L_1;
	
}

matrix2.frag
#version 150 core
// LunarGOO output
uniform mat3x4 un34;
uniform mat4x3 um43;
uniform mat4 um4;
uniform mat2 um2;
uniform mat3 um3;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
in vec4 v;
in vec3 u;
in vec3 Color;
out vec4 FragColor;
const vec4 L_11 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 L_13 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 L_15 = vec4(0.0, 0.0, 4.3, 0.0);
const float L_17 = 1.0;
const vec4 L_88 = vec4(0.0, 0.0, 0.0, 1.0);
const float L_8a = 0.0;
const float L_109 = 0.0;

void main()
{
	float element_c1 = u.x * v.x;
	float element_c2 = u.x * v.y;
	float element_c3 = u.x * v.z;
	float element_c4 = u.x * v.w;
	vec4 L_5 = vec4(element_c1, element_c2, element_c3, element_c4);
	float element_c5 = u.y * v.x;
	float element_c6 = u.y * v.y;
	float element_c7 = u.y * v.z;
	float element_c8 = u.y * v.w;
	vec4 L_a = vec4(element_c5, element_c6, element_c7, element_c8);
	float element_c9 = u.z * v.x;
	float element_c10 = u.z * v.y;
	float element_c11 = u.z * v.z;
	float element_c12 = u.z * v.w;
	vec4 L_f = vec4(element_c9, element_c10, element_c11, element_c12);
	vec4 column_c13 = L_5 + L_11;
	vec4 column_c14 = L_a + L_13;
	vec4 column_c15 = L_f + L_15;
	vec4 L_16 = vec4(Color.x, Color.y, Color.z, L_17);
	float dotres_c16 = dot(L_16, column_c13);
	float dotres_c17 = dot(L_16, column_c14);
	float dotres_c18 = dot(L_16, column_c15);
	vec4 L_1b = vec4(dotres_c16, dotres_c17, dotres_c18, L_17);
	vec4 FragColor_c19 = L_16 * L_1b;
	FragColor = FragColor_c19;
	float L_1d = column_c13.x * v.x;
	float L_1e = column_c13.y * v.x;
	float L_1f = column_c13.z * v.x;
	float L_20 = column_c13.w * v.x;
	float L_21 = column_c14.x * v.x;
	float L_22 = column_c14.y * v.x;
	float L_23 = column_c14.z * v.x;
	float L_24 = column_c14.w * v.x;
	float L_25 = column_c15.x * v.x;
	float L_26 = column_c15.y * v.x;
	float L_27 = column_c15.z * v.x;
	float L_28 = column_c15.w * v.x;
	vec4 column_c20 = un34[0];
	vec4 column_c21 = un34[1];
	vec4 column_c22 = un34[2];
	vec3 rightColumn_c23 = um43[0];
	float product_c24 = L_1d * rightColumn_c23.x;
	float product_c25 = L_21 * rightColumn_c23.y;
	float dotProduct_c26 = product_c24 + product_c25;
	float product_c27 = L_25 * rightColumn_c23.z;
	float dotProduct_c28 = dotProduct_c26 + product_c27;
	float product_c29 = L_1e * rightColumn_c23.x;
	float product_c30 = L_22 * rightColumn_c23.y;
	float dotProduct_c31 = product_c29 + product_c30;
	float product_c32 = L_26 * rightColumn_c23.z;
	float dotProduct_c33 = dotProduct_c31 + product_c32;
	float product_c34 = L_1f * rightColumn_c23.x;
	float product_c35 = L_23 * rightColumn_c23.y;
	float dotProduct_c36 = product_c34 + product_c35;
	float product_c37 = L_27 * rightColumn_c23.z;
	float dotProduct_c38 = dotProduct_c36 + product_c37;
	float product_c39 = L_20 * rightColumn_c23.x;
	float product_c40 = L_24 * rightColumn_c23.y;
	float dotProduct_c41 = product_c39 + product_c40;
	float product_c42 = L_28 * rightColumn_c23.z;
	float dotProduct_c43 = dotProduct_c41 + product_c42;
	vec4 L_41 = vec4(dotProduct_c28, dotProduct_c33, dotProduct_c38, dotProduct_c43);
	vec3 rightColumn_c44 = um43[1];
	float product_c45 = L_1d * rightColumn_c44.x;
	float product_c46 = L_21 * rightColumn_c44.y;
	float dotProduct_c47 = product_c45 + product_c46;
	float product_c48 = L_25 * rightColumn_c44.z;
	float dotProduct_c49 = dotProduct_c47 + product_c48;
	float product_c50 = L_1e * rightColumn_c44.x;
	float product_c51 = L_22 * rightColumn_c44.y;
	float dotProduct_c52 = product_c50 + product_c51;
	float product_c53 = L_26 * rightColumn_c44.z;
	float dotProduct_c54 = dotProduct_c52 + product_c53;
	float product_c55 = L_1f * rightColumn_c44.x;
	float product_c56 = L_23 * rightColumn_c44.y;
	float dotProduct_c57 = product_c55 + product_c56;
	float product_c58 = L_27 * rightColumn_c44.z;
	float dotProduct_c59 = dotProduct_c57 + product_c58;
	float product_c60 = L_20 * rightColumn_c44.x;
	float product_c61 = L_24 * rightColumn_c44.y;
	float dotProduct_c62 = product_c60 + product_c61;
	float product_c63 = L_28 * rightColumn_c44.z;
	float dotProduct_c64 = dotProduct_c62 + product_c63;
	vec4 L_57 = vec4(dotProduct_c49, dotProduct_c54, dotProduct_c59, dotProduct_c64);
	vec3 rightColumn_c65 = um43[2];
	float product_c66 = L_1d * rightColumn_c65.x;
	float product_c67 = L_21 * rightColumn_c65.y;
	float dotProduct_c68 = product_c66 + product_c67;
	float product_c69 = L_25 * rightColumn_c65.z;
	float dotProduct_c70 = dotProduct_c68 + product_c69;
	float product_c71 = L_1e * rightColumn_c65.x;
	float product_c72 = L_22 * rightColumn_c65.y;
	float dotProduct_c73 = product_c71 + product_c72;
	float product_c74 = L_26 * rightColumn_c65.z;
	float dotProduct_c75 = dotProduct_c73 + product_c74;
	float product_c76 = L_1f * rightColumn_c65.x;
	float product_c77 = L_23 * rightColumn_c65.y;
	float dotProduct_c78 = product_c76 + product_c77;
	float product_c79 = L_27 * rightColumn_c65.z;
	float dotProduct_c80 = dotProduct_c78 + product_c79;
	float product_c81 = L_20 * rightColumn_c65.x;
	float product_c82 = L_24 * rightColumn_c65.y;
	float dotProduct_c83 = product_c81 + product_c82;
	float product_c84 = L_28 * rightColumn_c65.z;
	float dotProduct_c85 = dotProduct_c83 + product_c84;
	vec4 L_6d = vec4(dotProduct_c70, dotProduct_c75, dotProduct_c80, dotProduct_c85);
	vec3 rightColumn_c86 = um43[3];
	float product_c87 = L_1d * rightColumn_c86.x;
	float product_c88 = L_21 * rightColumn_c86.y;
	float dotProduct_c89 = product_c87 + product_c88;
	float product_c90 = L_25 * rightColumn_c86.z;
	float dotProduct_c91 = dotProduct_c89 + product_c90;
	float product_c92 = L_1e * rightColumn_c86.x;
	float product_c93 = L_22 * rightColumn_c86.y;
	float dotProduct_c94 = product_c92 + product_c93;
	float product_c95 = L_26 * rightColumn_c86.z;
	float dotProduct_c96 = dotProduct_c94 + product_c95;
	float product_c97 = L_1f * rightColumn_c86.x;
	float product_c98 = L_23 * rightColumn_c86.y;
	float dotProduct_c99 = product_c97 + product_c98;
	float product_c100 = L_27 * rightColumn_c86.z;
	float dotProduct_c101 = dotProduct_c99 + product_c100;
	float product_c102 = L_20 * rightColumn_c86.x;
	float product_c103 = L_24 * rightColumn_c86.y;
	float dotProduct_c104 = product_c102 + product_c103;
	float product_c105 = L_28 * rightColumn_c86.z;
	float dotProduct_c106 = dotProduct_c104 + product_c105;
	vec4 L_83 = vec4(dotProduct_c91, dotProduct_c96, dotProduct_c101, dotProduct_c106);
	vec4 column_c107 = L_41 + column_c20;
	vec4 column_c108 = L_57 + column_c21;
	vec4 column_c109 = L_6d + column_c22;
	vec4 column_c110 = L_83 + L_88;
	float L_89 = L_8a - column_c107.x;
	float L_8b = L_8a - column_c107.y;
	float L_8c = L_8a - column_c107.z;
	float L_8d = L_8a - column_c107.w;
	float L_8e = L_8a - column_c108.x;
	float L_8f = L_8a - column_c108.y;
	float L_90 = L_8a - column_c108.z;
	float L_91 = L_8a - column_c108.w;
	float L_92 = L_8a - column_c109.x;
	float L_93 = L_8a - column_c109.y;
	float L_94 = L_8a - column_c109.z;
	float L_95 = L_8a - column_c109.w;
	float L_96 = L_8a - column_c110.x;
	float L_97 = L_8a - column_c110.y;
	float L_98 = L_8a - column_c110.z;
	float L_99 = L_8a - column_c110.w;
	float product_c111 = L_89 * v.x;
	float product_c112 = L_8e * v.y;
	float dotProduct_c113 = product_c111 + product_c112;
	float product_c114 = L_92 * v.z;
	float dotProduct_c115 = dotProduct_c113 + product_c114;
	float product_c116 = L_96 * v.w;
	float dotProduct_c117 = dotProduct_c115 + product_c116;
	float product_c118 = L_8b * v.x;
	float product_c119 = L_8f * v.y;
	float dotProduct_c120 = product_c118 + product_c119;
	float product_c121 = L_93 * v.z;
	float dotProduct_c122 = dotProduct_c120 + product_c121;
	float product_c123 = L_97 * v.w;
	float dotProduct_c124 = dotProduct_c122 + product_c123;
	float product_c125 = L_8c * v.x;
	float product_c126 = L_90 * v.y;
	float dotProduct_c127 = product_c125 + product_c126;
	float product_c128 = L_94 * v.z;
	float dotProduct_c129 = dotProduct_c127 + product_c128;
	float product_c130 = L_98 * v.w;
	float dotProduct_c131 = dotProduct_c129 + product_c130;
	float product_c132 = L_8d * v.x;
	float product_c133 = L_91 * v.y;
	float dotProduct_c134 = product_c132 + product_c133;
	float product_c135 = L_95 * v.z;
	float dotProduct_c136 = dotProduct_c134 + product_c135;
	float product_c137 = L_99 * v.w;
	float dotProduct_c138 = dotProduct_c136 + product_c137;
	vec4 L_b6 = vec4(dotProduct_c117, dotProduct_c124, dotProduct_c131, dotProduct_c138);
	vec4 FragColor_c139 = FragColor + L_b6;
	vec4 column_c140 = column_c107 * column_c107;
	vec4 column_c141 = column_c108 * column_c108;
	vec4 column_c142 = column_c109 * column_c109;
	vec4 column_c143 = column_c110 * column_c110;
	float dotres_c144 = dot(FragColor_c139, column_c140);
	float dotres_c145 = dot(FragColor_c139, column_c141);
	float dotres_c146 = dot(FragColor_c139, column_c142);
	float dotres_c147 = dot(FragColor_c139, column_c143);
	vec4 L_c0 = vec4(dotres_c144, dotres_c145, dotres_c146, dotres_c147);
	FragColor = L_c0;
	vec3 column_c148 = um43[0];
	vec3 column_c149 = um43[1];
	vec3 column_c150 = um43[2];
	vec3 column_c151 = um43[3];
	vec4 L_c5 = vec4(column_c148.x, column_c149.x, column_c150.x, column_c151.x);
	vec4 L_c6 = vec4(column_c148.y, column_c149.y, column_c150.y, column_c151.y);
	vec4 L_c7 = vec4(column_c148.z, column_c149.z, column_c150.z, column_c151.z);
	float dotres_c152 = dot(L_c0, L_c5);
	float dotres_c153 = dot(L_c0, L_c6);
	float dotres_c154 = dot(L_c0, L_c7);
	vec4 L_cb = vec4(dotres_c152, dotres_c153, dotres_c154, L_17);
	vec4 FragColor_c155 = L_c0 * L_cb;
	FragColor = FragColor_c155;
	vec4 column_c156 = um4[0];
	vec4 column_c157 = um4[1];
	vec4 column_c158 = um4[2];
	vec4 column_c159 = um4[3];
	float L_d1 = column_c158.z * column_c159.w;
	float L_d2 = column_c158.w * column_c159.z;
	float L_d3 = L_d1 - L_d2;
	float L_d4 = L_d3 * column_c157.y;
	float L_d5 = column_c157.z * column_c159.w;
	float L_d6 = column_c157.w * column_c159.z;
	float L_d7 = L_d5 - L_d6;
	float L_d8 = L_d7 * column_c158.y;
	float L_d9 = L_d4 - L_d8;
	float L_da = column_c157.z * column_c158.w;
	float L_db = column_c157.w * column_c158.z;
	float L_dc = L_da - L_db;
	float L_dd = L_dc * column_c159.y;
	float L_de = L_d9 + L_dd;
	float L_df = L_de * column_c156.x;
	float L_e0 = L_d3 * column_c156.y;
	float L_e1 = column_c156.z * column_c159.w;
	float L_e2 = column_c156.w * column_c159.z;
	float L_e3 = L_e1 - L_e2;
	float L_e4 = L_e3 * column_c158.y;
	float L_e5 = L_e0 - L_e4;
	float L_e6 = column_c156.z * column_c158.w;
	float L_e7 = column_c156.w * column_c158.z;
	float L_e8 = L_e6 - L_e7;
	float L_e9 = L_e8 * column_c159.y;
	float L_ea = L_e5 + L_e9;
	float L_eb = L_ea * column_c157.x;
	float L_ec = L_df - L_eb;
	float L_ed = L_d7 * column_c156.y;
	float L_ee = L_e3 * column_c157.y;
	float L_ef = L_ed - L_ee;
	float L_f0 = column_c156.z * column_c157.w;
	float L_f1 = column_c156.w * column_c157.z;
	float L_f2 = L_f0 - L_f1;
	float L_f3 = L_f2 * column_c159.y;
	float L_f4 = L_ef + L_f3;
	float L_f5 = L_f4 * column_c158.x;
	float L_f6 = L_ec + L_f5;
	float L_f7 = L_dc * column_c156.y;
	float L_f8 = L_e8 * column_c157.y;
	float L_f9 = L_f7 - L_f8;
	float L_fa = L_f2 * column_c158.y;
	float L_fb = L_f9 + L_fa;
	float L_fc = L_fb * column_c159.x;
	float L_fd = L_f6 - L_fc;
	vec4 L_fe = vec4(L_fd);
	vec4 FragColor_c160 = FragColor_c155 * L_fe;
	FragColor = FragColor_c160;
	vec2 column_c161 = um2[0];
	vec2 column_c162 = um2[1];
	float L_102 = column_c161.x * column_c162.y;
	float L_103 = column_c161.y * column_c162.x;
	float L_104 = L_102 - L_103;
	float L_105 = L_17 / L_104;
	float L_106 = L_105 * column_c162.y;
	float L_107 = L_105 * column_c162.x;
	float L_108 = L_109 - L_107;
	float L_10a = L_105 * column_c161.y;
	float L_10b = L_109 - L_10a;
	float L_10c = L_105 * column_c161.x;
	vec4 L_10d = vec4(L_106, L_108, L_10b, L_10c);
	vec4 FragColor_c163 = FragColor_c160 * L_10d;
	FragColor = FragColor_c163;
	vec3 column_c164 = um3[0];
	vec3 column_c165 = um3[1];
	vec3 column_c166 = um3[2];
	float L_112 = column_c164.x * column_c166.y;
	float L_113 = column_c164.y * column_c166.x;
	float L_114 = L_112 - L_113;
	float L_115 = column_c165.y * column_c166.z;
	float L_116 = column_c165.z * column_c166.y;
	float L_117 = L_115 - L_116;
	float L_118 = L_117 * column_c164.x;
	float L_119 = column_c164.y * column_c166.z;
	float L_11a = column_c164.z * column_c166.y;
	float L_11b = L_119 - L_11a;
	float L_11c = L_11b * column_c165.x;
	float L_11d = L_118 - L_11c;
	float L_11e = column_c164.y * column_c165.z;
	float L_11f = column_c164.z * column_c165.y;
	float L_120 = L_11e - L_11f;
	float L_121 = L_120 * column_c166.x;
	float L_122 = L_11d + L_121;
	float L_123 = L_17 / L_122;
	float L_124 = L_114 * L_123;
	float L_125 = L_109 - L_124;
	vec4 L_126 = vec4(L_125);
	vec4 FragColor_c167 = FragColor_c163 * L_126;
	FragColor = FragColor_c167;
	vec4 column_c168 = um4[0];
	vec4 column_c169 = um4[1];
	vec4 column_c170 = um4[2];
	vec4 column_c171 = um4[3];
	float L_12c = column_c170.z * column_c171.w;
	float L_12d = column_c170.w * column_c171.z;
	float L_12e = L_12c - L_12d;
	float L_12f = L_12e * column_c169.y;
	float L_130 = column_c169.z * column_c171.w;
	float L_131 = column_c169.w * column_c171.z;
	float L_132 = L_130 - L_131;
	float L_133 = L_132 * column_c170.y;
	float L_134 = L_12f - L_133;
	float L_135 = column_c169.z * column_c170.w;
	float L_136 = column_c169.w * column_c170.z;
	float L_137 = L_135 - L_136;
	float L_138 = L_137 * column_c171.y;
	float L_139 = L_134 + L_138;
	float L_13a = L_12e * column_c168.y;
	float L_13b = column_c168.z * column_c171.w;
	float L_13c = column_c168.w * column_c171.z;
	float L_13d = L_13b - L_13c;
	float L_13e = L_13d * column_c170.y;
	float L_13f = L_13a - L_13e;
	float L_140 = column_c168.z * column_c170.w;
	float L_141 = column_c168.w * column_c170.z;
	float L_142 = L_140 - L_141;
	float L_143 = L_142 * column_c171.y;
	float L_144 = L_13f + L_143;
	float L_145 = L_132 * column_c168.y;
	float L_146 = L_13d * column_c169.y;
	float L_147 = L_145 - L_146;
	float L_148 = column_c168.z * column_c169.w;
	float L_149 = column_c168.w * column_c169.z;
	float L_14a = L_148 - L_149;
	float L_14b = L_14a * column_c171.y;
	float L_14c = L_147 + L_14b;
	float L_14d = L_137 * column_c168.y;
	float L_14e = L_142 * column_c169.y;
	float L_14f = L_14d - L_14e;
	float L_150 = L_14a * column_c170.y;
	float L_151 = L_14f + L_150;
	float L_152 = L_12e * column_c169.x;
	float L_153 = L_132 * column_c170.x;
	float L_154 = L_152 - L_153;
	float L_155 = L_137 * column_c171.x;
	float L_156 = L_154 + L_155;
	float L_157 = L_12e * column_c168.x;
	float L_158 = L_13d * column_c170.x;
	float L_159 = L_157 - L_158;
	float L_15a = L_142 * column_c171.x;
	float L_15b = L_159 + L_15a;
	float L_15c = L_132 * column_c168.x;
	float L_15d = L_13d * column_c169.x;
	float L_15e = L_15c - L_15d;
	float L_15f = L_14a * column_c171.x;
	float L_160 = L_15e + L_15f;
	float L_161 = L_137 * column_c168.x;
	float L_162 = L_142 * column_c169.x;
	float L_163 = L_161 - L_162;
	float L_164 = L_14a * column_c170.x;
	float L_165 = L_163 + L_164;
	float L_166 = column_c170.y * column_c171.w;
	float L_167 = column_c170.w * column_c171.y;
	float L_168 = L_166 - L_167;
	float L_169 = L_168 * column_c169.x;
	float L_16a = column_c169.y * column_c171.w;
	float L_16b = column_c169.w * column_c171.y;
	float L_16c = L_16a - L_16b;
	float L_16d = L_16c * column_c170.x;
	float L_16e = L_169 - L_16d;
	float L_16f = column_c169.y * column_c170.w;
	float L_170 = column_c169.w * column_c170.y;
	float L_171 = L_16f - L_170;
	float L_172 = L_171 * column_c171.x;
	float L_173 = L_16e + L_172;
	float L_174 = L_168 * column_c168.x;
	float L_175 = column_c168.y * column_c171.w;
	float L_176 = column_c168.w * column_c171.y;
	float L_177 = L_175 - L_176;
	float L_178 = L_177 * column_c170.x;
	float L_179 = L_174 - L_178;
	float L_17a = column_c168.y * column_c170.w;
	float L_17b = column_c168.w * column_c170.y;
	float L_17c = L_17a - L_17b;
	float L_17d = L_17c * column_c171.x;
	float L_17e = L_179 + L_17d;
	float L_17f = L_16c * column_c168.x;
	float L_180 = L_177 * column_c169.x;
	float L_181 = L_17f - L_180;
	float L_182 = column_c168.y * column_c169.w;
	float L_183 = column_c168.w * column_c169.y;
	float L_184 = L_182 - L_183;
	float L_185 = L_184 * column_c171.x;
	float L_186 = L_181 + L_185;
	float L_187 = L_171 * column_c168.x;
	float L_188 = L_17c * column_c169.x;
	float L_189 = L_187 - L_188;
	float L_18a = L_184 * column_c170.x;
	float L_18b = L_189 + L_18a;
	float L_18c = column_c170.y * column_c171.z;
	float L_18d = column_c170.z * column_c171.y;
	float L_18e = L_18c - L_18d;
	float L_18f = L_18e * column_c169.x;
	float L_190 = column_c169.y * column_c171.z;
	float L_191 = column_c169.z * column_c171.y;
	float L_192 = L_190 - L_191;
	float L_193 = L_192 * column_c170.x;
	float L_194 = L_18f - L_193;
	float L_195 = column_c169.y * column_c170.z;
	float L_196 = column_c169.z * column_c170.y;
	float L_197 = L_195 - L_196;
	float L_198 = L_197 * column_c171.x;
	float L_199 = L_194 + L_198;
	float L_19a = L_18e * column_c168.x;
	float L_19b = column_c168.y * column_c171.z;
	float L_19c = column_c168.z * column_c171.y;
	float L_19d = L_19b - L_19c;
	float L_19e = L_19d * column_c170.x;
	float L_19f = L_19a - L_19e;
	float L_1a0 = column_c168.y * column_c170.z;
	float L_1a1 = column_c168.z * column_c170.y;
	float L_1a2 = L_1a0 - L_1a1;
	float L_1a3 = L_1a2 * column_c171.x;
	float L_1a4 = L_19f + L_1a3;
	float L_1a5 = L_192 * column_c168.x;
	float L_1a6 = L_19d * column_c169.x;
	float L_1a7 = L_1a5 - L_1a6;
	float L_1a8 = column_c168.y * column_c169.z;
	float L_1a9 = column_c168.z * column_c169.y;
	float L_1aa = L_1a8 - L_1a9;
	float L_1ab = L_1aa * column_c171.x;
	float L_1ac = L_1a7 + L_1ab;
	float L_1ad = L_197 * column_c168.x;
	float L_1ae = L_1a2 * column_c169.x;
	float L_1af = L_1ad - L_1ae;
	float L_1b0 = L_1aa * column_c170.x;
	float L_1b1 = L_1af + L_1b0;
	float L_1b2 = L_139 * column_c168.x;
	float L_1b3 = L_144 * column_c169.x;
	float L_1b4 = L_1b2 - L_1b3;
	float L_1b5 = L_14c * column_c170.x;
	float L_1b6 = L_1b4 + L_1b5;
	float L_1b7 = L_151 * column_c171.x;
	float L_1b8 = L_1b6 - L_1b7;
	float L_1b9 = L_17 / L_1b8;
	float L_1ba = L_139 * L_1b9;
	float L_1bb = L_156 * L_1b9;
	float L_1bc = L_109 - L_1bb;
	float L_1bd = L_173 * L_1b9;
	float L_1be = L_199 * L_1b9;
	float L_1bf = L_109 - L_1be;
	float L_1c0 = L_144 * L_1b9;
	float L_1c1 = L_109 - L_1c0;
	float L_1c2 = L_15b * L_1b9;
	float L_1c3 = L_17e * L_1b9;
	float L_1c4 = L_109 - L_1c3;
	float L_1c5 = L_1a4 * L_1b9;
	float L_1c6 = L_14c * L_1b9;
	float L_1c7 = L_160 * L_1b9;
	float L_1c8 = L_109 - L_1c7;
	float L_1c9 = L_186 * L_1b9;
	float L_1ca = L_1ac * L_1b9;
	float L_1cb = L_109 - L_1ca;
	float L_1cc = L_151 * L_1b9;
	float L_1cd = L_109 - L_1cc;
	float L_1ce = L_165 * L_1b9;
	float L_1cf = L_18b * L_1b9;
	float L_1d0 = L_109 - L_1cf;
	float L_1d1 = L_1b1 * L_1b9;
	vec4 L_1d2 = vec4(L_1ba, L_1c1, L_1c6, L_1cd);
	vec4 L_1d3 = vec4(L_1bc, L_1c2, L_1c8, L_1ce);
	vec4 L_1d4 = vec4(L_1bd, L_1c4, L_1c9, L_1d0);
	vec4 L_1d5 = vec4(L_1bf, L_1c5, L_1cb, L_1d1);
	float dotres_c172 = dot(FragColor_c167, L_1d2);
	float dotres_c173 = dot(FragColor_c167, L_1d3);
	float dotres_c174 = dot(FragColor_c167, L_1d4);
	float dotres_c175 = dot(FragColor_c167, L_1d5);
	vec4 L_1da = vec4(dotres_c172, dotres_c173, dotres_c174, dotres_c175);
	FragColor = L_1da;
	vec4 leftColumn_c176 = un34[0];
	vec4 column_c177 = leftColumn_c176 * leftColumn_c176;
	vec4 leftColumn_c178 = un34[1];
	vec4 column_c179 = leftColumn_c178 * leftColumn_c178;
	vec4 leftColumn_c180 = un34[2];
	vec4 column_c181 = leftColumn_c180 * leftColumn_c180;
	float dotres_c182 = dot(L_1da, column_c177);
	float dotres_c183 = dot(L_1da, column_c179);
	float dotres_c184 = dot(L_1da, column_c181);
	vec4 L_1e4 = vec4(dotres_c182, dotres_c183, dotres_c184, dotres_c175);
	FragColor = L_1e4;
	
}

matrixAgg.frag
#version 120
// LunarGOO output
struct s {
	int count;
	mat4x3 sm[12];
};
uniform s us;
uniform int i;
uniform mat4x3 am[8];
uniform mat4x3 m;
varying vec3 v;

void main()
{
	vec3 leftColumn_c1 = us.sm[i][0];
	vec3 rightColumn_c2 = am[4][0];
	vec3 column_c3 = leftColumn_c1 + rightColumn_c2;
	vec3 leftColumn_c4 = us.sm[i][1];
	vec3 rightColumn_c5 = am[4][1];
	vec3 column_c6 = leftColumn_c4 + rightColumn_c5;
	vec3 leftColumn_c7 = us.sm[i][2];
	vec3 rightColumn_c8 = am[4][2];
	vec3 column_c9 = leftColumn_c7 + rightColumn_c8;
	vec3 leftColumn_c10 = us.sm[i][3];
	vec3 rightColumn_c11 = am[4][3];
	vec3 column_c12 = leftColumn_c10 + rightColumn_c11;
	float dotres_c13 = dot(v, column_c3);
	float dotres_c14 = dot(v, column_c6);
	float dotres_c15 = dot(v, column_c9);
	float dotres_c16 = dot(v, column_c12);
	vec4 L_11 = vec4(dotres_c13, dotres_c14, dotres_c15, dotres_c16);
	gl_FragColor = L_11;
	
}

texture.frag
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
uniform vec4 u;
uniform float blend;
uniform vec2 scale;
in vec2 coords2D;
in vec2 t;
const float L_2 = 1.789;
const float L_4 = 2.0;
const vec4 L_9 = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 L_14 = vec3(1.789, 2.718, 3.453);
const ivec2 L_35 = ivec2(0, 5);
const int L_36 = 1;
const ivec2 L_40 = ivec2(3, -7);
const float L_45 = 3.0;

void main()
{
	vec4 L_1 = texture(texSampler1D, L_2);
	vec4 L_3 = texture(texSampler1D, L_2, L_4);
	vec4 color_c1 = L_1 + L_3;
	vec4 L_6 = textureProj(texSampler1D, coords2D);
	vec4 color_c2 = L_6 + color_c1;
	vec4 L_8 = textureProj(texSampler1D, L_9);
	vec4 color_c3 = L_8 + color_c2;
	vec4 L_b = textureProj(texSampler1D, coords2D, L_4);
	vec4 color_c4 = L_b + color_c3;
	vec4 L_d = textureProj(texSampler1D, L_9, L_4);
	vec4 color_c5 = L_d + color_c4;
	vec4 L_f = texture(texSampler2D, coords2D);
	vec4 color_c6 = L_f + color_c5;
	vec4 L_11 = texture(texSampler2D, coords2D, L_4);
	vec4 color_c7 = L_11 + color_c6;
	vec4 L_13 = textureProj(texSampler2D, L_14);
	vec4 color_c8 = L_13 + color_c7;
	vec4 L_16 = textureProj(texSampler2D, L_9, L_4);
	vec4 color_c9 = L_16 + color_c8;
	vec4 L_18 = texture(texSampler3D, L_14);
	vec4 color_c10 = L_18 + color_c9;
	vec4 L_1a = texture(texSampler3D, L_14, L_4);
	vec4 color_c11 = L_1a + color_c10;
	vec4 L_1c = textureProj(texSampler3D, L_9);
	vec4 color_c12 = L_1c + color_c11;
	vec4 L_1e = textureProj(texSampler3D, L_9, L_4);
	vec4 color_c13 = L_1e + color_c12;
	vec4 L_20 = texture(texSamplerCube, L_14);
	vec4 color_c14 = L_20 + color_c13;
	vec4 L_22 = texture(texSamplerCube, L_14, L_4);
	vec4 color_c15 = L_22 + color_c14;
	vec4 L_24 = shadow1D(shadowSampler1D, L_14);
	vec4 color_c16 = L_24 + color_c15;
	vec4 L_26 = shadow1D(shadowSampler1D, L_14, L_4);
	vec4 color_c17 = L_26 + color_c16;
	vec4 L_28 = shadow2D(shadowSampler2D, L_14);
	vec4 color_c18 = L_28 + color_c17;
	vec4 L_2a = shadow2D(shadowSampler2D, L_14, L_4);
	vec4 color_c19 = L_2a + color_c18;
	vec4 L_2c = shadow1DProj(shadowSampler1D, L_9);
	vec4 color_c20 = L_2c + color_c19;
	vec4 L_2e = shadow1DProj(shadowSampler1D, L_9, L_4);
	vec4 color_c21 = L_2e + color_c20;
	vec4 L_30 = shadow2DProj(shadowSampler2D, L_9);
	vec4 color_c22 = L_30 + color_c21;
	vec4 L_32 = shadow2DProj(shadowSampler2D, L_9, L_4);
	vec4 color_c23 = L_32 + color_c22;
	vec4 L_34 = texelFetch(texSampler2D, L_35, L_36);
	vec4 color_c24 = L_34 + color_c23;
	vec2 gradX_c25 = dFdx(coords2D);
	vec2 gradY_c26 = dFdy(coords2D);
	vec4 L_3a = textureGrad(texSampler2D, coords2D, gradX_c25, gradY_c26);
	vec4 color_c27 = L_3a + color_c24;
	vec3 L_3c;
	L_3c.xyz = vec3(coords2D.x, coords2D.y, L_4);
	vec4 L_3d = textureProjGrad(texSampler2D, L_3c, gradX_c25, gradY_c26);
	vec4 color_c28 = L_3d + color_c27;
	vec4 L_3f = textureGradOffset(texSampler2D, coords2D, gradX_c25, gradY_c26, L_40);
	vec4 color_c29 = L_3f + color_c28;
	vec4 L_42 = textureProjGradOffset(texSampler2D, L_14, gradX_c25, gradY_c26, L_40);
	vec4 color_c30 = L_42 + color_c29;
	vec3 L_44;
	L_44.xyz = vec3(coords2D.x, coords2D.y, L_45);
	float L_46 = textureGrad(shadowSampler2D, L_44, gradX_c25, gradY_c26);
	vec4 L_47 = vec4(L_46);
	vec4 color_c31 = L_47 + color_c30;
	float L_49 = L_2 * blend;
	vec4 Ll_FragColor_c32 = mix(color_c31, u, L_49);
	gl_FragColor = Ll_FragColor_c32;
	
}

texture.vert
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
in vec2 coords2D;
const float L_2 = 1.789;
const float L_3 = 3.0;
const vec4 L_7 = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 L_c = vec3(1.789, 2.718, 3.453);

void main()
{
	vec4 L_1 = textureLod(texSampler1D, L_2, L_3);
	vec4 L_4 = textureProjLod(texSampler1D, coords2D, L_3);
	vec4 color_c1 = L_1 + L_4;
	vec4 L_6 = textureProjLod(texSampler1D, L_7, L_3);
	vec4 color_c2 = L_6 + color_c1;
	vec4 L_9 = textureLod(texSampler2D, coords2D, L_3);
	vec4 color_c3 = L_9 + color_c2;
	vec4 L_b = textureProjLod(texSampler2D, L_c, L_3);
	vec4 color_c4 = L_b + color_c3;
	vec4 L_e = textureProjLod(texSampler2D, L_7, L_3);
	vec4 color_c5 = L_e + color_c4;
	vec4 L_10 = textureLod(texSampler3D, L_c, L_3);
	vec4 color_c6 = L_10 + color_c5;
	vec4 L_12 = textureProjLod(texSampler3D, L_7, L_3);
	vec4 color_c7 = L_12 + color_c6;
	vec4 L_14 = textureLod(texSamplerCube, L_c, L_3);
	vec4 color_c8 = L_14 + color_c7;
	vec4 L_16 = shadow1DLod(shadowSampler1D, L_c, L_3);
	vec4 color_c9 = L_16 + color_c8;
	vec4 L_18 = shadow2DLod(shadowSampler2D, L_c, L_3);
	vec4 color_c10 = L_18 + color_c9;
	vec4 L_1a = shadow1DProjLod(shadowSampler1D, L_7, L_3);
	vec4 color_c11 = L_1a + color_c10;
	vec4 L_1c = shadow2DProjLod(shadowSampler2D, L_7, L_3);
	vec4 color_c12 = L_1c + color_c11;
	gl_Position = color_c12;
	
}

300BuiltIns.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform bvec3 bv;
uniform mediump int imin;
uniform mediump int imax;
uniform mediump uint umin;
uniform mediump uint umax;
in mediump vec3 x;
in mediump vec3 y;
flat in mediump ivec4 iv4a;
flat in mediump ivec4 iv4b;
flat in mediump uvec2 uv2x;
flat in mediump uvec2 uv2y;
flat in mediump uvec4 uv4y;
flat in mediump uint uy;
flat in mediump ivec3 iv3a;
flat in mediump ivec3 iv3b;
flat in mediump uvec2 uv2c;
in mediump float f;
in mediump vec2 v2a;
in mediump vec4 v4;
in mediump vec2 v2b;
out mediump vec4 result;
const highp float L_3 = 0.0;
const highp int L_d = 0;
const highp vec2 L_4f = vec2(2.0);
const highp float L_54 = 0.1;

void main()
{
	mediump vec3 L_1 = mix(x, y, bv);
	vec4 L_2 = vec4(L_1.x, L_1.y, L_1.z, L_3);
	mediump ivec4 isum_c1 = abs(iv4a);
	mediump ivec4 L_5 = sign(iv4a);
	mediump ivec4 isum_c2 = L_5 + isum_c1;
	mediump ivec4 L_7 = min(iv4a, iv4b);
	mediump ivec4 isum_c3 = L_7 + isum_c2;
	mediump ivec4 L_9 = min(iv4a, imin);
	mediump ivec4 isum_c4 = L_9 + isum_c3;
	mediump ivec2 L_b = min(ivec2(uv2x), ivec2(uv2y));
	ivec4 L_c = ivec4(L_b.x, L_b.y, L_d, L_d);
	mediump ivec4 L_e = min(ivec4(uv4y), int(uy));
	mediump ivec4 usum_c5 = L_c + L_e;
	mediump ivec3 L_10 = max(iv3a, iv3b);
	ivec4 L_11 = ivec4(L_10.x, L_10.y, L_10.z, L_d);
	mediump ivec4 isum_c6 = L_11 + isum_c4;
	mediump ivec4 L_13 = max(iv4a, imax);
	mediump ivec4 isum_c7 = L_13 + isum_c6;
	mediump ivec2 L_15 = max(ivec2(uv2x), ivec2(uv2y));
	mediump ivec2 L_16 = max(ivec2(uv2x), int(uy));
	ivec4 L_17 = ivec4(L_15.x, L_15.y, L_16.x, L_16.y);
	mediump ivec4 usum_c8 = L_17 + usum_c5;
	mediump ivec4 L_19 = clamp(iv4a, iv4a, iv4b);
	mediump ivec4 isum_c9 = L_19 + isum_c7;
	mediump ivec4 L_1b = clamp(iv4a, imin, imax);
	mediump ivec4 isum_c10 = L_1b + isum_c9;
	mediump ivec2 L_1d = clamp(ivec2(uv2x), ivec2(uv2y), ivec2(uv2c));
	ivec4 L_1e = ivec4(L_1d.x, L_1d.y, L_d, L_d);
	mediump ivec4 usum_c11 = L_1e + usum_c8;
	mediump ivec4 L_20 = clamp(ivec4(uv4y), int(umin), int(umax));
	mediump ivec4 usum_c12 = L_20 + usum_c11;
	struct  {
	vec3 member0;
	vec3 member1;
} L_22; L_22.member0 = modf(x, L_22.member1);
	vec3 modfOut_c13 = L_22.member1;
	vec3 L_24 = L_22.member0;
	vec4 L_25 = vec4(L_24.x, L_24.y, L_24.z, modfOut_c13.x);
	mediump vec4 sum_c14 = L_2 + L_25;
	mediump float L_27 = trunc(f);
	vec4 L_28 = vec4(L_27);
	mediump vec4 sum_c15 = L_28 + sum_c14;
	mediump vec2 L_2a = round(v2a);
	mediump vec2 L_2b = roundEven(v2a);
	vec4 L_2c = vec4(L_2a.x, L_2a.y, L_2b.x, L_2b.y);
	mediump vec4 sum_c16 = L_2c + sum_c15;
	bvec2 L_2e = isnan(v2a);
	bvec4 L_2f = isinf(v4);
	mediump ivec2 L_30 = ivec2(L_2e);
	mediump ivec4 L_31 = ivec4(L_2f);
	ivec4 L_32 = ivec4(L_30.x, L_30.y, L_31.x, L_31.y);
	mediump ivec4 isum_c17 = L_32 + isum_c10;
	mediump int L_34 = floatBitsToInt(f);
	ivec4 L_35 = ivec4(L_34);
	mediump ivec4 isum_c18 = L_35 + isum_c17;
	mediump ivec4 L_37 = floatBitsToInt(v4);
	mediump ivec4 usum_c19 = L_37 + usum_c12;
	mediump vec4 L_39 = intBitsToFloat(iv4a);
	mediump vec4 sum_c20 = L_39 + sum_c16;
	mediump vec2 L_3b = intBitsToFloat(ivec2(uv2c));
	vec4 L_3c = vec4(L_3b.x, L_3b.y, L_3, L_3);
	mediump vec4 sum_c21 = L_3c + sum_c20;
	highp int L_3e = int(packSnorm2x16(v2a));
	highp vec2 L_3f = unpackSnorm2x16(uint(int(uy)));
	highp int L_40 = int(packUnorm2x16(v2a));
	highp vec2 L_41 = unpackUnorm2x16(uint(int(uy)));
	highp int L_42 = int(packHalf2x16(v2b));
	mediump vec2 L_43 = unpackHalf2x16(uint(int(uy)));
	ivec4 L_44 = ivec4(L_3e, L_40, L_42, L_d);
	mediump ivec4 usum_c22 = L_44 + usum_c19;
	vec4 L_46 = vec4(L_3f.x, L_3f.y, L_41.x, L_41.y);
	mediump vec4 sum_c23 = L_46 + sum_c21;
	vec4 L_48 = vec4(L_43.x, L_43.y, L_3, L_3);
	mediump vec4 sum_c24 = L_48 + sum_c23;
	mediump vec4 L_4a = vec4(isum_c18);
	mediump vec4 L_4b = L_4a + sum_c24;
	mediump vec4 L_4c = vec4(usum_c22);
	mediump vec4 result_c25 = L_4b + L_4c;
	result = result_c25;
	mediump vec2 L_4e = gl_PointCoord * L_4f;
	vec4 L_50 = vec4(gl_PointCoord.x, gl_PointCoord.y, L_4e.x, L_4e.y);
	highp vec4 L_51 = L_50 + gl_FragCoord;
	highp vec4 result_c26 = L_51 + result_c25;
	result = result_c26;
	highp float Ll_FragDepth_c27 = f + L_54;
	gl_FragDepth = Ll_FragDepth_c27;
	
}

300BuiltIns.vert
#version 300 es
// LunarGOO output
in mediump float ps;
const highp int L_2 = 2;
const highp int L_4 = -10;
invariant gl_Position ;
void main()
{
	int L_1 = gl_VertexID << L_2;
	int L_3 = L_1 + L_4;
	vec4 L_5 = vec4(ps);
	highp float L_6 = float(L_3);
	vec4 L_7 = vec4(L_6);
	highp vec4 Ll_Position_c1 = L_5 * L_7;
	gl_Position = Ll_Position_c1;
	highp float Ll_PointSize_c2 = L_6 * ps;
	gl_PointSize = Ll_PointSize_c2;
	
}

uniformArray.frag
#version 130
// LunarGOO output
uniform vec4 color[6];
uniform vec3 inColor;
uniform float alpha[16];
uniform sampler2D texSampler2D;

void main()
{
	vec4 texColor_c1 = color[1] + color[1];
	vec3 L_2 = vec3(texColor_c1);
	vec3 L_3 = L_2 + inColor;
	float L_4 = alpha[12] + texColor_c1.w;
	vec4 L_5 = vec4(L_3.x, L_3.y, L_3.z, L_4);
	gl_FragColor = L_5;
	
}

newTexture.frag
#version 430 core
// LunarGOO output
uniform sampler2D s2D;
uniform sampler3D s3D;
uniform sampler2DArray s2DArray;
uniform sampler2DShadow s2DShadow;
uniform samplerCube sCube;
uniform sampler2DArrayShadow s2DArrayShadow;
uniform isampler2D is2D;
uniform isampler3D is3D;
uniform isamplerCube isCube;
uniform isampler2DArray is2DArray;
uniform samplerCubeShadow sCubeShadow;
uniform isampler2D is2Dms;
uniform usampler2D us2D;
uniform usampler3D us3D;
uniform usamplerCube usCube;
uniform usampler2DArray us2DArray;
in vec2 c2D;
in vec4 c4D;
in vec3 c3D;
in float c1D;
flat in ivec3 ic3D;
flat in int ic1D;
flat in ivec2 ic2D;
flat in ivec4 ic4D;
out vec4 FragData;
const float L_5 = 1.2;
const ivec2 L_8 = ivec2(3);
const int L_e = 4;
const float L_2b = 4.2;
const int L_35 = 2;
const float L_38 = 0.0;

void main()
{
	vec4 L_1 = texture(s2D, c2D);
	vec4 L_2 = textureProj(s3D, c4D);
	vec4 L_3 = L_1 + L_2;
	vec4 L_4 = textureLod(s2DArray, c3D, L_5);
	vec4 L_6 = L_3 + L_4;
	float L_7 = textureOffset(s2DShadow, c3D, L_8, c1D);
	float L_9 = L_6.y + L_7;
	vec4 L_a = L_6;
	L_a.y = L_9;
	vec4 L_b = texelFetch(s3D, ic3D, ic1D);
	vec4 L_c = L_a + L_b;
	vec4 L_d = texelFetchOffset(s2D, ic2D, L_e, ic2D);
	vec4 L_f = L_c + L_d;
	float L_10 = textureLodOffset(s2DShadow, c3D, c1D, L_8);
	float L_11 = L_10 + L_f.y;
	vec4 L_12 = L_f;
	L_12.y = L_11;
	vec4 L_13 = textureProjLodOffset(s2D, c3D, c1D, L_8);
	vec4 L_14 = L_12 + L_13;
	vec4 L_15 = textureGrad(sCube, c3D, c3D, c3D);
	vec4 L_16 = L_14 + L_15;
	float L_17 = textureGradOffset(s2DArrayShadow, c4D, c2D, c2D, L_8);
	float L_18 = L_16.x + L_17;
	vec4 L_19 = L_16;
	L_19.x = L_18;
	vec4 L_1a = textureProjGrad(s3D, c4D, c3D, c3D);
	vec4 L_1b = L_19 + L_1a;
	vec4 L_1c = textureProjGradOffset(s2D, c3D, c2D, c2D, L_8);
	vec4 L_1d = L_1b + L_1c;
	ivec4 iv_c1 = texture(is2D, c2D);
	vec4 L_1f = vec4(iv_c1);
	vec4 L_20 = L_1d + L_1f;
	ivec4 iv_c2 = textureProjOffset(is2D, c4D, L_8);
	vec4 L_22 = vec4(iv_c2);
	vec4 L_23 = L_20 + L_22;
	ivec4 iv_c3 = textureProjLod(is2D, c3D, c1D);
	vec4 L_25 = vec4(iv_c3);
	vec4 L_26 = L_23 + L_25;
	ivec4 iv_c4 = textureProjGrad(is2D, c3D, c2D, c2D);
	vec4 L_28 = vec4(iv_c4);
	vec4 L_29 = L_26 + L_28;
	ivec4 iv_c5 = texture(is3D, c3D, L_2b);
	vec4 L_2c = vec4(iv_c5);
	vec4 L_2d = L_29 + L_2c;
	ivec4 iv_c6 = textureLod(isCube, c3D, c1D);
	vec4 L_2f = vec4(iv_c6);
	vec4 L_30 = L_2d + L_2f;
	ivec4 iv_c7 = texelFetch(is2DArray, ic3D, ic1D);
	vec4 L_32 = vec4(iv_c7);
	vec4 L_33 = L_30 + L_32;
	ivec2 iv_c8 = textureSize(sCubeShadow, L_35);
	vec2 L_36 = vec2(iv_c8);
	vec4 L_37 = vec4(L_36.x, L_36.y, L_38, L_38);
	vec4 FragData_c9 = L_33 + L_37;
	FragData = FragData_c9;
	
}

qualifiers.frag
#version 430 core
// LunarGOO output
uniform vec4 buf;
uniform image2D imageVc;
uniform image2D imageVv;
uniform image2D imageVr;
uniform image2D imageVro;
uniform image2D imageVwo;
uniform image2D imageVall;
centroid in vec4 inVc;
in vec4 inVs;
flat in vec4 inVf;
noperspective in vec4 inVn;
centroid noperspective in vec4 inVcn;
sample in vec4 inV;
out vec4 outVi;
invariant outVi ;
void main()
{
	vec4 L_1 = inVc + inVs;
	vec4 L_2 = L_1 + inVf;
	vec4 L_3 = L_2 + inVn;
	vec4 outVi_c1 = L_3 + inVcn;
	outVi = outVi_c1;
	
}

