test.frag
#version 110
// LunarGOO output
uniform sampler2D texSampler2D;
uniform vec2 scale;
uniform sampler3D texSampler3D;
uniform vec4 u;
uniform float blend;
varying vec2 t;
varying vec3 coords;
const float L_4 = 1.789;

void main()
{
	vec4 L_1 = texture2D(texSampler2D, ((scale + t) / scale));
	vec4 L_2 = L_1.wzyx;
	vec4 L_3 = texture3D(texSampler3D, coords);
	vec4 Ll_FragColor_c1 = mix((L_2 + L_3), u, (blend * L_4));
	gl_FragColor = Ll_FragColor_c1;
	
}

test.vert
#version 130
// LunarGOO output
uniform mat4 transform;
in vec2 uv_in;
in vec4 position;
out vec2 uv;

void main()
{
	uv = uv_in;
	vec4 L_1 = ftransform();
	gl_Position = (L_1 + position);
	
}

deepRvalue.frag
#version 120
// LunarGOO output
uniform sampler2D sampler;
const vec2 L_2 = vec2(0.5);
const float L_3 = 0.1;
const float L_4 = 7.0;
const float L_5 = 19.0;
const vec4 L_7 = vec4(361.0, 841.0, 5.0, 0.0);

void main()
{
	vec4 L_1 = texture2D(sampler, L_2);
	vec4 L_6 = L_7;
	L_6.w = ((((L_1.y > L_3) ? L_4 : L_5) + L_1.y) + L_4);
	gl_FragColor = L_6;
	
}

block.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
struct S {
	mediump vec4 u;
	mediump uvec4 v;
	lowp isampler2D sampler;
	mediump vec3 w;
	mediump mat3 m3a[5];
};
uniform S s;
uniform fooBlock {
	mediump vec4 bu;
	mediump vec2 bw;
	mediump uvec4 bv;
	S bs;
	mediump mat2 bm2;
	mediump mat4 m4a[8];
} ;
uniform barBlock {
	mediump vec4 nbu;
	mediump mat3 nbm;
	mediump uvec4 nbv;
	mediump int ni;
} inst[4];
out mediump vec4 color;

void main()
{
	mediump ivec4 L_1 = texture(s.sampler, bw);
	color = (((vec4(L_1)) + inst[3].nbu) + bu);
	
}

length.frag
#version 120
// LunarGOO output
uniform vec4 u[3];
varying vec2 v[2];
const vec4 L_1 = vec4(30.0);

void main()
{
	gl_FragColor = L_1;
	
}

matrix2.frag
#version 150 core
// LunarGOO output
uniform mat3x4 un34;
uniform mat4x3 um43;
uniform mat4 um4;
uniform mat2 um2;
uniform mat3 um3;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
in vec4 v;
in vec3 u;
in vec3 Color;
out vec4 FragColor;
const vec4 L_4 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 L_6 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 L_8 = vec4(0.0, 0.0, 4.3, 0.0);
const float L_b = 1.0;
const vec4 L_27 = vec4(0.0, 0.0, 0.0, 1.0);
const float L_29 = 0.0;
const float L_52 = 0.0;

void main()
{
	vec4 L_1 = vec4((u.x * v.x), (u.x * v.y), (u.x * v.z), (u.x * v.w));
	vec4 L_2 = vec4((u.y * v.x), (u.y * v.y), (u.y * v.z), (u.y * v.w));
	vec4 L_3 = vec4((u.z * v.x), (u.z * v.y), (u.z * v.z), (u.z * v.w));
	vec4 column_c1 = L_1 + L_4;
	vec4 column_c2 = L_2 + L_6;
	vec4 column_c3 = L_3 + L_8;
	vec4 L_a = vec4(Color.x, Color.y, Color.z, L_b);
	float dotres_c4 = dot(L_a, column_c1);
	float dotres_c5 = dot(L_a, column_c2);
	float dotres_c6 = dot(L_a, column_c3);
	vec4 L_f = vec4(dotres_c4, dotres_c5, dotres_c6, L_b);
	FragColor = (L_a * L_f);
	float L_10 = column_c1.x * v.x;
	float L_11 = column_c1.y * v.x;
	float L_12 = column_c1.z * v.x;
	float L_13 = column_c1.w * v.x;
	float L_14 = column_c2.x * v.x;
	float L_15 = column_c2.y * v.x;
	float L_16 = column_c2.z * v.x;
	float L_17 = column_c2.w * v.x;
	float L_18 = column_c3.x * v.x;
	float L_19 = column_c3.y * v.x;
	float L_1a = column_c3.z * v.x;
	float L_1b = column_c3.w * v.x;
	vec3 rightColumn_c7 = um43[0];
	vec4 L_1d = vec4((((L_10 * rightColumn_c7.x) + (L_14 * rightColumn_c7.y)) + (L_18 * rightColumn_c7.z)), (((L_11 * rightColumn_c7.x) + (L_15 * rightColumn_c7.y)) + (L_19 * rightColumn_c7.z)), (((L_12 * rightColumn_c7.x) + (L_16 * rightColumn_c7.y)) + (L_1a * rightColumn_c7.z)), (((L_13 * rightColumn_c7.x) + (L_17 * rightColumn_c7.y)) + (L_1b * rightColumn_c7.z)));
	vec3 rightColumn_c8 = um43[1];
	vec4 L_1f = vec4((((L_10 * rightColumn_c8.x) + (L_14 * rightColumn_c8.y)) + (L_18 * rightColumn_c8.z)), (((L_11 * rightColumn_c8.x) + (L_15 * rightColumn_c8.y)) + (L_19 * rightColumn_c8.z)), (((L_12 * rightColumn_c8.x) + (L_16 * rightColumn_c8.y)) + (L_1a * rightColumn_c8.z)), (((L_13 * rightColumn_c8.x) + (L_17 * rightColumn_c8.y)) + (L_1b * rightColumn_c8.z)));
	vec3 rightColumn_c9 = um43[2];
	vec4 L_21 = vec4((((L_10 * rightColumn_c9.x) + (L_14 * rightColumn_c9.y)) + (L_18 * rightColumn_c9.z)), (((L_11 * rightColumn_c9.x) + (L_15 * rightColumn_c9.y)) + (L_19 * rightColumn_c9.z)), (((L_12 * rightColumn_c9.x) + (L_16 * rightColumn_c9.y)) + (L_1a * rightColumn_c9.z)), (((L_13 * rightColumn_c9.x) + (L_17 * rightColumn_c9.y)) + (L_1b * rightColumn_c9.z)));
	vec3 rightColumn_c10 = um43[3];
	vec4 L_23 = vec4((((L_10 * rightColumn_c10.x) + (L_14 * rightColumn_c10.y)) + (L_18 * rightColumn_c10.z)), (((L_11 * rightColumn_c10.x) + (L_15 * rightColumn_c10.y)) + (L_19 * rightColumn_c10.z)), (((L_12 * rightColumn_c10.x) + (L_16 * rightColumn_c10.y)) + (L_1a * rightColumn_c10.z)), (((L_13 * rightColumn_c10.x) + (L_17 * rightColumn_c10.y)) + (L_1b * rightColumn_c10.z)));
	vec4 column_c11 = (un34[0]) + L_1d;
	vec4 column_c12 = (un34[1]) + L_1f;
	vec4 column_c13 = (un34[2]) + L_21;
	vec4 column_c14 = L_23 + L_27;
	float dotProduct_c15 = ((((L_29 - column_c11.x) * v.x) + ((L_29 - column_c12.x) * v.y)) + ((L_29 - column_c13.x) * v.z)) + ((L_29 - column_c14.x) * v.w);
	float dotProduct_c16 = ((((L_29 - column_c11.y) * v.x) + ((L_29 - column_c12.y) * v.y)) + ((L_29 - column_c13.y) * v.z)) + ((L_29 - column_c14.y) * v.w);
	float dotProduct_c17 = ((((L_29 - column_c11.z) * v.x) + ((L_29 - column_c12.z) * v.y)) + ((L_29 - column_c13.z) * v.z)) + ((L_29 - column_c14.z) * v.w);
	float dotProduct_c18 = ((((L_29 - column_c11.w) * v.x) + ((L_29 - column_c12.w) * v.y)) + ((L_29 - column_c13.w) * v.z)) + ((L_29 - column_c14.w) * v.w);
	vec4 L_2e = vec4(dotProduct_c15, dotProduct_c16, dotProduct_c17, dotProduct_c18);
	vec4 FragColor_c19 = FragColor + L_2e;
	float dotres_c20 = dot(FragColor_c19, (column_c11 * column_c11));
	float dotres_c21 = dot(FragColor_c19, (column_c12 * column_c12));
	float dotres_c22 = dot(FragColor_c19, (column_c13 * column_c13));
	float dotres_c23 = dot(FragColor_c19, (column_c14 * column_c14));
	vec4 L_34 = vec4(dotres_c20, dotres_c21, dotres_c22, dotres_c23);
	FragColor = L_34;
	vec3 column_c24 = um43[0];
	vec3 column_c25 = um43[1];
	vec3 column_c26 = um43[2];
	vec3 column_c27 = um43[3];
	vec4 L_39 = vec4(column_c24.x, column_c25.x, column_c26.x, column_c27.x);
	vec4 L_3a = vec4(column_c24.y, column_c25.y, column_c26.y, column_c27.y);
	vec4 L_3b = vec4(column_c24.z, column_c25.z, column_c26.z, column_c27.z);
	float dotres_c28 = dot(L_34, L_39);
	float dotres_c29 = dot(L_34, L_3a);
	float dotres_c30 = dot(L_34, L_3b);
	vec4 L_3f = vec4(dotres_c28, dotres_c29, dotres_c30, L_b);
	vec4 FragColor_c31 = L_34 * L_3f;
	FragColor = FragColor_c31;
	vec4 column_c32 = um4[0];
	vec4 column_c33 = um4[1];
	vec4 column_c34 = um4[2];
	vec4 column_c35 = um4[3];
	float L_45 = (column_c34.z * column_c35.w) - (column_c34.w * column_c35.z);
	float L_46 = (column_c33.z * column_c35.w) - (column_c33.w * column_c35.z);
	float L_47 = (column_c33.z * column_c34.w) - (column_c33.w * column_c34.z);
	float L_48 = (column_c32.z * column_c35.w) - (column_c32.w * column_c35.z);
	float L_49 = (column_c32.z * column_c34.w) - (column_c32.w * column_c34.z);
	float L_4a = ((((L_45 * column_c33.y) - (L_46 * column_c34.y)) + (L_47 * column_c35.y)) * column_c32.x) - ((((L_45 * column_c32.y) - (L_48 * column_c34.y)) + (L_49 * column_c35.y)) * column_c33.x);
	float L_4b = (column_c32.z * column_c33.w) - (column_c32.w * column_c33.z);
	float L_4c = (((((L_46 * column_c32.y) - (L_48 * column_c33.y)) + (L_4b * column_c35.y)) * column_c34.x) + L_4a) - ((((L_47 * column_c32.y) - (L_49 * column_c33.y)) + (L_4b * column_c34.y)) * column_c35.x);
	vec4 L_4d = vec4(L_4c);
	vec4 FragColor_c36 = FragColor_c31 * L_4d;
	FragColor = FragColor_c36;
	vec2 column_c37 = um2[0];
	vec2 column_c38 = um2[1];
	float L_51 = L_b / ((column_c37.x * column_c38.y) - (column_c37.y * column_c38.x));
	vec4 L_53 = vec4((L_51 * column_c38.y), (L_52 - (L_51 * column_c38.x)), (L_52 - (L_51 * column_c37.y)), (L_51 * column_c37.x));
	vec4 FragColor_c39 = FragColor_c36 * L_53;
	FragColor = FragColor_c39;
	vec3 column_c40 = um3[0];
	vec3 column_c41 = um3[1];
	vec3 column_c42 = um3[2];
	float L_58 = (((column_c41.y * column_c42.z) - (column_c41.z * column_c42.y)) * column_c40.x) - (((column_c40.y * column_c42.z) - (column_c40.z * column_c42.y)) * column_c41.x);
	float L_59 = ((column_c40.x * column_c42.y) - (column_c40.y * column_c42.x)) * (L_b / ((((column_c40.y * column_c41.z) - (column_c40.z * column_c41.y)) * column_c42.x) + L_58));
	vec4 L_5a = vec4((L_52 - L_59));
	vec4 FragColor_c43 = FragColor_c39 * L_5a;
	FragColor = FragColor_c43;
	vec4 column_c44 = um4[0];
	vec4 column_c45 = um4[1];
	vec4 column_c46 = um4[2];
	vec4 column_c47 = um4[3];
	float L_60 = (column_c46.z * column_c47.w) - (column_c46.w * column_c47.z);
	float L_61 = (column_c45.z * column_c47.w) - (column_c45.w * column_c47.z);
	float L_62 = (column_c45.z * column_c46.w) - (column_c45.w * column_c46.z);
	float L_63 = ((L_60 * column_c45.y) - (L_61 * column_c46.y)) + (L_62 * column_c47.y);
	float L_64 = (column_c44.z * column_c47.w) - (column_c44.w * column_c47.z);
	float L_65 = (column_c44.z * column_c46.w) - (column_c44.w * column_c46.z);
	float L_66 = ((L_60 * column_c44.y) - (L_64 * column_c46.y)) + (L_65 * column_c47.y);
	float L_67 = (column_c44.z * column_c45.w) - (column_c44.w * column_c45.z);
	float L_68 = ((L_61 * column_c44.y) - (L_64 * column_c45.y)) + (L_67 * column_c47.y);
	float L_69 = ((L_62 * column_c44.y) - (L_65 * column_c45.y)) + (L_67 * column_c46.y);
	float L_6a = (column_c46.y * column_c47.w) - (column_c46.w * column_c47.y);
	float L_6b = (column_c45.y * column_c47.w) - (column_c45.w * column_c47.y);
	float L_6c = (column_c45.y * column_c46.w) - (column_c45.w * column_c46.y);
	float L_6d = (column_c44.y * column_c47.w) - (column_c44.w * column_c47.y);
	float L_6e = (column_c44.y * column_c46.w) - (column_c44.w * column_c46.y);
	float L_6f = (column_c44.y * column_c45.w) - (column_c44.w * column_c45.y);
	float L_70 = (column_c46.y * column_c47.z) - (column_c46.z * column_c47.y);
	float L_71 = (column_c45.y * column_c47.z) - (column_c45.z * column_c47.y);
	float L_72 = (column_c45.y * column_c46.z) - (column_c45.z * column_c46.y);
	float L_73 = (column_c44.y * column_c47.z) - (column_c44.z * column_c47.y);
	float L_74 = (column_c44.y * column_c46.z) - (column_c44.z * column_c46.y);
	float L_75 = (column_c44.y * column_c45.z) - (column_c44.z * column_c45.y);
	float L_76 = L_b / ((((L_63 * column_c44.x) - (L_66 * column_c45.x)) + (L_68 * column_c46.x)) - (L_69 * column_c47.x));
	vec4 L_77 = vec4((L_63 * L_76), (L_52 - (L_66 * L_76)), (L_68 * L_76), (L_52 - (L_69 * L_76)));
	vec4 L_78 = vec4((L_52 - ((((L_60 * column_c45.x) - (L_61 * column_c46.x)) + (L_62 * column_c47.x)) * L_76)), ((((L_60 * column_c44.x) - (L_64 * column_c46.x)) + (L_65 * column_c47.x)) * L_76), (L_52 - ((((L_61 * column_c44.x) - (L_64 * column_c45.x)) + (L_67 * column_c47.x)) * L_76)), ((((L_62 * column_c44.x) - (L_65 * column_c45.x)) + (L_67 * column_c46.x)) * L_76));
	vec4 L_79 = vec4(((((L_6a * column_c45.x) - (L_6b * column_c46.x)) + (L_6c * column_c47.x)) * L_76), (L_52 - ((((L_6a * column_c44.x) - (L_6d * column_c46.x)) + (L_6e * column_c47.x)) * L_76)), ((((L_6b * column_c44.x) - (L_6d * column_c45.x)) + (L_6f * column_c47.x)) * L_76), (L_52 - ((((L_6c * column_c44.x) - (L_6e * column_c45.x)) + (L_6f * column_c46.x)) * L_76)));
	vec4 L_7a = vec4((L_52 - ((((L_70 * column_c45.x) - (L_71 * column_c46.x)) + (L_72 * column_c47.x)) * L_76)), ((((L_70 * column_c44.x) - (L_73 * column_c46.x)) + (L_74 * column_c47.x)) * L_76), (L_52 - ((((L_71 * column_c44.x) - (L_73 * column_c45.x)) + (L_75 * column_c47.x)) * L_76)), ((((L_72 * column_c44.x) - (L_74 * column_c45.x)) + (L_75 * column_c46.x)) * L_76));
	float dotres_c48 = dot(FragColor_c43, L_77);
	float dotres_c49 = dot(FragColor_c43, L_78);
	float dotres_c50 = dot(FragColor_c43, L_79);
	float dotres_c51 = dot(FragColor_c43, L_7a);
	vec4 L_7f = vec4(dotres_c48, dotres_c49, dotres_c50, dotres_c51);
	FragColor = L_7f;
	vec4 leftColumn_c52 = un34[0];
	vec4 leftColumn_c53 = un34[1];
	vec4 leftColumn_c54 = un34[2];
	float dotres_c55 = dot(L_7f, (leftColumn_c52 * leftColumn_c52));
	float dotres_c56 = dot(L_7f, (leftColumn_c53 * leftColumn_c53));
	float dotres_c57 = dot(L_7f, (leftColumn_c54 * leftColumn_c54));
	vec4 L_86 = vec4(dotres_c55, dotres_c56, dotres_c57, dotres_c51);
	FragColor = L_86;
	
}

matrixAgg.frag
#version 120
// LunarGOO output
struct s {
	int count;
	mat4x3 sm[12];
};
uniform s us;
uniform int i;
uniform mat4x3 am[8];
uniform mat4x3 m;
varying vec3 v;

void main()
{
	float dotres_c1 = dot(v, ((am[4][0]) + (us.sm[i][0])));
	float dotres_c2 = dot(v, ((am[4][1]) + (us.sm[i][1])));
	float dotres_c3 = dot(v, ((am[4][2]) + (us.sm[i][2])));
	float dotres_c4 = dot(v, ((am[4][3]) + (us.sm[i][3])));
	vec4 L_5 = vec4(dotres_c1, dotres_c2, dotres_c3, dotres_c4);
	gl_FragColor = L_5;
	
}

texture.frag
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
uniform vec4 u;
uniform float blend;
uniform vec2 scale;
in vec2 coords2D;
in vec2 t;
const float L_2 = 1.789;
const float L_4 = 2.0;
const vec4 L_7 = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 L_d = vec3(1.789, 2.718, 3.453);
const ivec2 L_1f = ivec2(0, 5);
const int L_20 = 1;
const ivec2 L_27 = ivec2(3, -7);
const float L_2b = 3.0;

void main()
{
	vec4 L_1 = texture(texSampler1D, L_2);
	vec4 L_3 = texture(texSampler1D, L_2, L_4);
	vec4 L_5 = textureProj(texSampler1D, coords2D);
	vec4 L_6 = textureProj(texSampler1D, L_7);
	vec4 L_8 = textureProj(texSampler1D, coords2D, L_4);
	vec4 L_9 = textureProj(texSampler1D, L_7, L_4);
	vec4 L_a = texture(texSampler2D, coords2D);
	vec4 L_b = texture(texSampler2D, coords2D, L_4);
	vec4 L_c = textureProj(texSampler2D, L_d);
	vec4 L_e = textureProj(texSampler2D, L_7, L_4);
	vec4 L_f = texture(texSampler3D, L_d);
	vec4 L_10 = texture(texSampler3D, L_d, L_4);
	vec4 L_11 = textureProj(texSampler3D, L_7);
	vec4 L_12 = textureProj(texSampler3D, L_7, L_4);
	vec4 L_13 = texture(texSamplerCube, L_d);
	vec4 L_14 = texture(texSamplerCube, L_d, L_4);
	vec4 color_c1 = ((((((((((((((L_1 + L_3) + L_5) + L_6) + L_8) + L_9) + L_a) + L_b) + L_c) + L_e) + L_f) + L_10) + L_11) + L_12) + L_13) + L_14;
	vec4 L_16 = shadow1D(shadowSampler1D, L_d);
	vec4 L_17 = shadow1D(shadowSampler1D, L_d, L_4);
	vec4 L_18 = shadow2D(shadowSampler2D, L_d);
	vec4 L_19 = shadow2D(shadowSampler2D, L_d, L_4);
	vec4 L_1a = shadow1DProj(shadowSampler1D, L_7);
	vec4 L_1b = shadow1DProj(shadowSampler1D, L_7, L_4);
	vec4 L_1c = shadow2DProj(shadowSampler2D, L_7);
	vec4 L_1d = shadow2DProj(shadowSampler2D, L_7, L_4);
	vec4 L_1e = texelFetch(texSampler2D, L_1f, L_20);
	vec2 gradX_c2 = dFdx(coords2D);
	vec2 gradY_c3 = dFdy(coords2D);
	vec4 L_23 = textureGrad(texSampler2D, coords2D, gradX_c2, gradY_c3);
	vec3 L_24;
	L_24.xyz = vec3(coords2D.x, coords2D.y, L_4);
	vec4 L_25 = textureProjGrad(texSampler2D, L_24, gradX_c2, gradY_c3);
	vec4 L_26 = textureGradOffset(texSampler2D, coords2D, gradX_c2, gradY_c3, L_27);
	vec4 L_28 = textureProjGradOffset(texSampler2D, L_d, gradX_c2, gradY_c3, L_27);
	vec4 color_c4 = ((((((((((((L_16 + color_c1) + L_17) + L_18) + L_19) + L_1a) + L_1b) + L_1c) + L_1d) + L_1e) + L_23) + L_25) + L_26) + L_28;
	vec3 L_2a;
	L_2a.xyz = vec3(coords2D.x, coords2D.y, L_2b);
	float L_2c = textureGrad(shadowSampler2D, L_2a, gradX_c2, gradY_c3);
	vec4 L_2d = vec4(L_2c);
	vec4 Ll_FragColor_c5 = mix((L_2d + color_c4), u, (L_2 * blend));
	gl_FragColor = Ll_FragColor_c5;
	
}

texture.vert
#version 130
// LunarGOO output
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform sampler1DShadow shadowSampler1D;
uniform sampler2DShadow shadowSampler2D;
in vec2 coords2D;
const float L_2 = 1.789;
const float L_3 = 3.0;
const vec4 L_6 = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 L_9 = vec3(1.789, 2.718, 3.453);

void main()
{
	vec4 L_1 = textureLod(texSampler1D, L_2, L_3);
	vec4 L_4 = textureProjLod(texSampler1D, coords2D, L_3);
	vec4 L_5 = textureProjLod(texSampler1D, L_6, L_3);
	vec4 L_7 = textureLod(texSampler2D, coords2D, L_3);
	vec4 L_8 = textureProjLod(texSampler2D, L_9, L_3);
	vec4 L_a = textureProjLod(texSampler2D, L_6, L_3);
	vec4 L_b = textureLod(texSampler3D, L_9, L_3);
	vec4 L_c = textureProjLod(texSampler3D, L_6, L_3);
	vec4 L_d = textureLod(texSamplerCube, L_9, L_3);
	vec4 L_e = shadow1DLod(shadowSampler1D, L_9, L_3);
	vec4 L_f = shadow2DLod(shadowSampler2D, L_9, L_3);
	vec4 L_10 = shadow1DProjLod(shadowSampler1D, L_6, L_3);
	vec4 L_11 = shadow2DProjLod(shadowSampler2D, L_6, L_3);
	gl_Position = ((((((((((((L_1 + L_4) + L_5) + L_7) + L_8) + L_a) + L_b) + L_c) + L_d) + L_e) + L_f) + L_10) + L_11);
	
}

300BuiltIns.frag
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform bvec3 bv;
uniform mediump int imin;
uniform mediump int imax;
uniform mediump uint umin;
uniform mediump uint umax;
in mediump vec3 x;
in mediump vec3 y;
flat in mediump ivec4 iv4a;
flat in mediump ivec4 iv4b;
flat in mediump uvec2 uv2x;
flat in mediump uvec2 uv2y;
flat in mediump uvec4 uv4y;
flat in mediump uint uy;
flat in mediump ivec3 iv3a;
flat in mediump ivec3 iv3b;
flat in mediump uvec2 uv2c;
in mediump float f;
in mediump vec2 v2a;
in mediump vec4 v4;
in mediump vec2 v2b;
out mediump vec4 result;
const highp float L_3 = 0.0;
const highp int L_a = 0;
const highp vec2 L_35 = vec2(2.0);
const highp float L_39 = 0.1;

void main()
{
	mediump vec3 L_1 = mix(x, y, bv);
	vec4 L_2 = vec4(L_1.x, L_1.y, L_1.z, L_3);
	mediump ivec4 isum_c1 = abs(iv4a);
	mediump ivec4 L_5 = sign(iv4a);
	mediump ivec4 L_6 = min(iv4a, iv4b);
	mediump ivec4 L_7 = min(iv4a, imin);
	mediump ivec2 L_8 = min(ivec2(uv2x), ivec2(uv2y));
	ivec4 L_9 = ivec4(L_8.x, L_8.y, L_a, L_a);
	mediump ivec4 L_b = min(ivec4(uv4y), int(uy));
	mediump ivec3 L_c = max(iv3a, iv3b);
	ivec4 L_d = ivec4(L_c.x, L_c.y, L_c.z, L_a);
	mediump ivec4 L_e = max(iv4a, imax);
	mediump ivec2 L_f = max(ivec2(uv2x), ivec2(uv2y));
	mediump ivec2 L_10 = max(ivec2(uv2x), int(uy));
	ivec4 L_11 = ivec4(L_f.x, L_f.y, L_10.x, L_10.y);
	mediump ivec4 L_12 = clamp(iv4a, iv4a, iv4b);
	mediump ivec4 L_13 = clamp(iv4a, imin, imax);
	mediump ivec2 L_14 = clamp(ivec2(uv2x), ivec2(uv2y), ivec2(uv2c));
	ivec4 L_15 = ivec4(L_14.x, L_14.y, L_a, L_a);
	mediump ivec4 L_16 = clamp(ivec4(uv4y), int(umin), int(umax));
	struct  {
	vec3 member0;
	vec3 member1;
} L_17; L_17.member0 = modf(x, L_17.member1);
	vec3 L_18 = L_17.member0;
	vec4 L_19 = vec4(L_18.x, L_18.y, L_18.z, (L_17.member1).x);
	mediump float L_1a = trunc(f);
	vec4 L_1b = vec4(L_1a);
	mediump vec2 L_1c = round(v2a);
	mediump vec2 L_1d = roundEven(v2a);
	vec4 L_1e = vec4(L_1c.x, L_1c.y, L_1d.x, L_1d.y);
	bvec2 L_1f = isnan(v2a);
	bvec4 L_20 = isinf(v4);
	mediump ivec2 L_21 = ivec2(L_1f);
	mediump ivec4 L_22 = ivec4(L_20);
	ivec4 L_23 = ivec4(L_21.x, L_21.y, L_22.x, L_22.y);
	mediump int L_24 = floatBitsToInt(f);
	ivec4 L_25 = ivec4(L_24);
	mediump ivec4 L_26 = floatBitsToInt(v4);
	mediump vec4 L_27 = intBitsToFloat(iv4a);
	mediump vec2 L_28 = intBitsToFloat(ivec2(uv2c));
	vec4 L_29 = vec4(L_28.x, L_28.y, L_3, L_3);
	highp int L_2a = int(packSnorm2x16(v2a));
	highp vec2 L_2b = unpackSnorm2x16(uint(int(uy)));
	highp int L_2c = int(packUnorm2x16(v2a));
	highp vec2 L_2d = unpackUnorm2x16(uint(int(uy)));
	highp int L_2e = int(packHalf2x16(v2b));
	mediump vec2 L_2f = unpackHalf2x16(uint(int(uy)));
	ivec4 L_30 = ivec4(L_2a, L_2c, L_2e, L_a);
	vec4 L_31 = vec4(L_2b.x, L_2b.y, L_2d.x, L_2d.y);
	vec4 L_32 = vec4(L_2f.x, L_2f.y, L_3, L_3);
	mediump vec4 L_33 = (((((((L_19 + L_2) + L_1b) + L_1e) + L_27) + L_29) + L_31) + L_32) + (vec4((((((((((L_5 + isum_c1) + L_6) + L_7) + L_d) + L_e) + L_12) + L_13) + L_23) + L_25)));
	mediump vec4 result_c2 = (vec4(((((((L_9 + L_b) + L_11) + L_15) + L_16) + L_26) + L_30))) + L_33;
	result = result_c2;
	mediump vec2 L_36 = gl_PointCoord * L_35;
	vec4 L_37 = vec4(gl_PointCoord.x, gl_PointCoord.y, L_36.x, L_36.y);
	highp vec4 result_c3 = (L_37 + gl_FragCoord) + result_c2;
	result = result_c3;
	highp float Ll_FragDepth_c4 = f + L_39;
	gl_FragDepth = Ll_FragDepth_c4;
	
}

300BuiltIns.vert
#version 300 es
// LunarGOO output
in mediump float ps;
const highp int L_1 = 2;
const highp int L_2 = -10;
invariant gl_Position ;
void main()
{
	vec4 L_3 = vec4(ps);
	highp float L_4 = float(((gl_VertexID << L_1) + L_2));
	vec4 L_5 = vec4(L_4);
	gl_Position = (L_3 * L_5);
	gl_PointSize = (L_4 * ps);
	
}

uniformArray.frag
#version 130
// LunarGOO output
uniform vec4 color[6];
uniform vec3 inColor;
uniform float alpha[16];
uniform sampler2D texSampler2D;

void main()
{
	vec4 texColor_c1 = color[1] + color[1];
	vec3 L_2 = vec3(texColor_c1);
	vec3 L_3 = L_2 + inColor;
	vec4 L_4 = vec4(L_3.x, L_3.y, L_3.z, (alpha[12] + texColor_c1.w));
	gl_FragColor = L_4;
	
}

newTexture.frag
#version 430 core
// LunarGOO output
uniform sampler2D s2D;
uniform sampler3D s3D;
uniform sampler2DArray s2DArray;
uniform sampler2DShadow s2DShadow;
uniform samplerCube sCube;
uniform sampler2DArrayShadow s2DArrayShadow;
uniform isampler2D is2D;
uniform isampler3D is3D;
uniform isamplerCube isCube;
uniform isampler2DArray is2DArray;
uniform samplerCubeShadow sCubeShadow;
uniform isampler2D is2Dms;
uniform usampler2D us2D;
uniform usampler3D us3D;
uniform usamplerCube usCube;
uniform usampler2DArray us2DArray;
in vec2 c2D;
in vec4 c4D;
in vec3 c3D;
in float c1D;
flat in ivec3 ic3D;
flat in int ic1D;
flat in ivec2 ic2D;
flat in ivec4 ic4D;
out vec4 FragData;
const float L_4 = 1.2;
const ivec2 L_7 = ivec2(3);
const int L_b = 4;
const float L_1b = 4.2;
const int L_20 = 2;
const float L_23 = 0.0;

void main()
{
	vec4 L_1 = texture(s2D, c2D);
	vec4 L_2 = textureProj(s3D, c4D);
	vec4 L_3 = textureLod(s2DArray, c3D, L_4);
	vec4 L_5 = (L_1 + L_2) + L_3;
	float L_6 = textureOffset(s2DShadow, c3D, L_7, c1D);
	vec4 L_8 = L_5;
	L_8.y = (L_5.y + L_6);
	vec4 L_9 = texelFetch(s3D, ic3D, ic1D);
	vec4 L_a = texelFetchOffset(s2D, ic2D, L_b, ic2D);
	vec4 L_c = (L_8 + L_9) + L_a;
	float L_d = textureLodOffset(s2DShadow, c3D, c1D, L_7);
	vec4 L_e = L_c;
	L_e.y = (L_c.y + L_d);
	vec4 L_f = textureProjLodOffset(s2D, c3D, c1D, L_7);
	vec4 L_10 = textureGrad(sCube, c3D, c3D, c3D);
	vec4 L_11 = (L_e + L_f) + L_10;
	float L_12 = textureGradOffset(s2DArrayShadow, c4D, c2D, c2D, L_7);
	vec4 L_13 = L_11;
	L_13.x = (L_11.x + L_12);
	vec4 L_14 = textureProjGrad(s3D, c4D, c3D, c3D);
	vec4 L_15 = textureProjGradOffset(s2D, c3D, c2D, c2D, L_7);
	ivec4 iv_c1 = texture(is2D, c2D);
	ivec4 iv_c2 = textureProjOffset(is2D, c4D, L_7);
	ivec4 iv_c3 = textureProjLod(is2D, c3D, c1D);
	ivec4 iv_c4 = textureProjGrad(is2D, c3D, c2D, c2D);
	ivec4 iv_c5 = texture(is3D, c3D, L_1b);
	ivec4 iv_c6 = textureLod(isCube, c3D, c1D);
	vec4 L_1d = (((((((L_13 + L_14) + L_15) + (vec4(iv_c1))) + (vec4(iv_c2))) + (vec4(iv_c3))) + (vec4(iv_c4))) + (vec4(iv_c5))) + (vec4(iv_c6));
	ivec4 iv_c7 = texelFetch(is2DArray, ic3D, ic1D);
	ivec2 iv_c8 = textureSize(sCubeShadow, L_20);
	vec2 L_21 = vec2(iv_c8);
	vec4 L_22 = vec4(L_21.x, L_21.y, L_23, L_23);
	FragData = (((vec4(iv_c7)) + L_1d) + L_22);
	
}

qualifiers.frag
#version 430 core
// LunarGOO output
uniform vec4 buf;
uniform image2D imageVc;
uniform image2D imageVv;
uniform image2D imageVr;
uniform image2D imageVro;
uniform image2D imageVwo;
uniform image2D imageVall;
centroid in vec4 inVc;
in vec4 inVs;
flat in vec4 inVf;
noperspective in vec4 inVn;
centroid noperspective in vec4 inVcn;
sample in vec4 inV;
out vec4 outVi;
invariant outVi ;
void main()
{
	outVi = ((((inVc + inVs) + inVf) + inVn) + inVcn);
	
}

