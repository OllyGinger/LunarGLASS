
Top IR:
; ModuleID = 'Glslang'

@gl_FragColor = global <4 x float> zeroinitializer
@un34 = external addrspace(2) constant [4 x <4 x float>]
@Color = global <3 x float> zeroinitializer
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@v = global <4 x float> zeroinitializer
@u = global <4 x float> zeroinitializer
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %0 = alloca <4 x float>
  %1 = alloca <4 x float>
  %2 = alloca [4 x <4 x float>]
  %3 = alloca <4 x float>
  %4 = alloca [4 x <4 x float>]
  %constructed157 = alloca [4 x <4 x float>]
  %5 = alloca [4 x <4 x float>]
  %constructed119 = alloca [4 x <4 x float>]
  %constructed95 = alloca [4 x <4 x float>]
  %m34 = alloca [4 x <4 x float>]
  %6 = alloca <4 x float>
  %7 = alloca [4 x <4 x float>]
  %8 = alloca <4 x float>
  %constructed5 = alloca <4 x float>
  %9 = alloca <3 x float>
  %constructed = alloca <4 x float>
  %10 = load <4 x float> addrspace(2)* getelementptr inbounds ([4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1), !gla.uniform !3
  %11 = load <4 x float>* %constructed
  %12 = extractelement <4 x float> %10, i32 0
  %13 = insertelement <4 x float> %11, float %12, i32 0
  %14 = extractelement <4 x float> %10, i32 1
  %15 = insertelement <4 x float> %13, float %14, i32 1
  %16 = extractelement <4 x float> %10, i32 2
  %17 = insertelement <4 x float> %15, float %16, i32 2
  %18 = extractelement <4 x float> %10, i32 3
  %gl_FragColor = insertelement <4 x float> %17, float %18, i32 3
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %19 = load <3 x float>* @Color
  %20 = load [3 x <3 x float>] addrspace(2)* @colorTransform, !gla.uniform !5
  %21 = load <3 x float>* %9
  %column = extractvalue [3 x <3 x float>] %20, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %19, <3 x float> %column)
  %22 = insertelement <3 x float> %21, float %dotres, i32 0
  %column1 = extractvalue [3 x <3 x float>] %20, 1
  %dotres2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %19, <3 x float> %column1)
  %23 = insertelement <3 x float> %22, float %dotres2, i32 1
  %column3 = extractvalue [3 x <3 x float>] %20, 2
  %dotres4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %19, <3 x float> %column3)
  %24 = insertelement <3 x float> %23, float %dotres4, i32 2
  %25 = load <4 x float>* %constructed5
  %26 = extractelement <3 x float> %24, i32 0
  %27 = insertelement <4 x float> %25, float %26, i32 0
  %28 = extractelement <3 x float> %24, i32 1
  %29 = insertelement <4 x float> %27, float %28, i32 1
  %30 = extractelement <3 x float> %24, i32 2
  %31 = insertelement <4 x float> %29, float %30, i32 2
  %32 = insertelement <4 x float> %31, float 1.000000e+00, i32 3
  %33 = load <4 x float>* @gl_FragColor
  %gl_FragColor6 = fadd <4 x float> %33, %32
  store <4 x float> %gl_FragColor6, <4 x float>* @gl_FragColor
  %34 = load [4 x <4 x float>] addrspace(2)* @m, !gla.uniform !6
  %35 = load [4 x <4 x float>] addrspace(2)* @n, !gla.uniform !7
  %element1 = extractvalue [4 x <4 x float>] %34, 0
  %element2 = extractvalue [4 x <4 x float>] %35, 0
  %36 = fcmp one <4 x float> %element1, %element2
  %37 = call i1 @llvm.gla.any.v4i1(<4 x i1> %36)
  %element17 = extractvalue [4 x <4 x float>] %34, 1
  %element28 = extractvalue [4 x <4 x float>] %35, 1
  %38 = fcmp one <4 x float> %element17, %element28
  %39 = call i1 @llvm.gla.any.v4i1(<4 x i1> %38)
  %40 = or i1 %37, %39
  %element19 = extractvalue [4 x <4 x float>] %34, 2
  %element210 = extractvalue [4 x <4 x float>] %35, 2
  %41 = fcmp one <4 x float> %element19, %element210
  %42 = call i1 @llvm.gla.any.v4i1(<4 x i1> %41)
  %43 = or i1 %40, %42
  %element111 = extractvalue [4 x <4 x float>] %34, 3
  %element212 = extractvalue [4 x <4 x float>] %35, 3
  %44 = fcmp one <4 x float> %element111, %element212
  %45 = call i1 @llvm.gla.any.v4i1(<4 x i1> %44)
  %46 = or i1 %43, %45
  br i1 %46, label %then, label %else

then:                                             ; preds = %entry
  %47 = load <4 x float>* @v
  %48 = load <4 x float>* @gl_FragColor
  %gl_FragColor13 = fadd <4 x float> %48, %47
  store <4 x float> %gl_FragColor13, <4 x float>* @gl_FragColor
  br label %ifmerge

else:                                             ; preds = %entry
  %49 = load [4 x <4 x float>] addrspace(2)* @m, !gla.uniform !6
  %50 = load <4 x float>* @v
  %51 = load <4 x float>* %8
  %component = extractelement <4 x float> %50, i32 0
  %component14 = extractelement <4 x float> %50, i32 1
  %component15 = extractelement <4 x float> %50, i32 2
  %component16 = extractelement <4 x float> %50, i32 3
  %column17 = extractvalue [4 x <4 x float>] %49, 0
  %element = extractelement <4 x float> %column17, i32 0
  %product = fmul float %element, %component
  %column18 = extractvalue [4 x <4 x float>] %49, 1
  %element20 = extractelement <4 x float> %column18, i32 0
  %product21 = fmul float %element20, %component14
  %dotProduct = fadd float %product, %product21
  %column22 = extractvalue [4 x <4 x float>] %49, 2
  %element23 = extractelement <4 x float> %column22, i32 0
  %product24 = fmul float %element23, %component15
  %dotProduct25 = fadd float %dotProduct, %product24
  %column26 = extractvalue [4 x <4 x float>] %49, 3
  %element27 = extractelement <4 x float> %column26, i32 0
  %product28 = fmul float %element27, %component16
  %dotProduct29 = fadd float %dotProduct25, %product28
  %52 = insertelement <4 x float> %51, float %dotProduct29, i32 0
  %column30 = extractvalue [4 x <4 x float>] %49, 0
  %element31 = extractelement <4 x float> %column30, i32 1
  %product32 = fmul float %element31, %component
  %column33 = extractvalue [4 x <4 x float>] %49, 1
  %element34 = extractelement <4 x float> %column33, i32 1
  %product35 = fmul float %element34, %component14
  %dotProduct36 = fadd float %product32, %product35
  %column37 = extractvalue [4 x <4 x float>] %49, 2
  %element38 = extractelement <4 x float> %column37, i32 1
  %product39 = fmul float %element38, %component15
  %dotProduct40 = fadd float %dotProduct36, %product39
  %column41 = extractvalue [4 x <4 x float>] %49, 3
  %element42 = extractelement <4 x float> %column41, i32 1
  %product43 = fmul float %element42, %component16
  %dotProduct44 = fadd float %dotProduct40, %product43
  %53 = insertelement <4 x float> %52, float %dotProduct44, i32 1
  %column45 = extractvalue [4 x <4 x float>] %49, 0
  %element46 = extractelement <4 x float> %column45, i32 2
  %product47 = fmul float %element46, %component
  %column48 = extractvalue [4 x <4 x float>] %49, 1
  %element49 = extractelement <4 x float> %column48, i32 2
  %product50 = fmul float %element49, %component14
  %dotProduct51 = fadd float %product47, %product50
  %column52 = extractvalue [4 x <4 x float>] %49, 2
  %element53 = extractelement <4 x float> %column52, i32 2
  %product54 = fmul float %element53, %component15
  %dotProduct55 = fadd float %dotProduct51, %product54
  %column56 = extractvalue [4 x <4 x float>] %49, 3
  %element57 = extractelement <4 x float> %column56, i32 2
  %product58 = fmul float %element57, %component16
  %dotProduct59 = fadd float %dotProduct55, %product58
  %54 = insertelement <4 x float> %53, float %dotProduct59, i32 2
  %column60 = extractvalue [4 x <4 x float>] %49, 0
  %element61 = extractelement <4 x float> %column60, i32 3
  %product62 = fmul float %element61, %component
  %column63 = extractvalue [4 x <4 x float>] %49, 1
  %element64 = extractelement <4 x float> %column63, i32 3
  %product65 = fmul float %element64, %component14
  %dotProduct66 = fadd float %product62, %product65
  %column67 = extractvalue [4 x <4 x float>] %49, 2
  %element68 = extractelement <4 x float> %column67, i32 3
  %product69 = fmul float %element68, %component15
  %dotProduct70 = fadd float %dotProduct66, %product69
  %column71 = extractvalue [4 x <4 x float>] %49, 3
  %element72 = extractelement <4 x float> %column71, i32 3
  %product73 = fmul float %element72, %component16
  %dotProduct74 = fadd float %dotProduct70, %product73
  %55 = insertelement <4 x float> %54, float %dotProduct74, i32 3
  %56 = load <4 x float>* @gl_FragColor
  %gl_FragColor75 = fadd <4 x float> %56, %55
  store <4 x float> %gl_FragColor75, <4 x float>* @gl_FragColor
  %57 = load <4 x float>* @v
  %58 = load [4 x <4 x float>] addrspace(2)* @m, !gla.uniform !6
  %59 = load [4 x <4 x float>] addrspace(2)* @n, !gla.uniform !7
  %60 = load [4 x <4 x float>]* %7
  %leftColumn = extractvalue [4 x <4 x float>] %58, 0
  %rightColumn = extractvalue [4 x <4 x float>] %59, 0
  %column76 = fsub <4 x float> %leftColumn, %rightColumn
  %61 = insertvalue [4 x <4 x float>] %60, <4 x float> %column76, 0
  %leftColumn77 = extractvalue [4 x <4 x float>] %58, 1
  %rightColumn78 = extractvalue [4 x <4 x float>] %59, 1
  %column79 = fsub <4 x float> %leftColumn77, %rightColumn78
  %62 = insertvalue [4 x <4 x float>] %61, <4 x float> %column79, 1
  %leftColumn80 = extractvalue [4 x <4 x float>] %58, 2
  %rightColumn81 = extractvalue [4 x <4 x float>] %59, 2
  %column82 = fsub <4 x float> %leftColumn80, %rightColumn81
  %63 = insertvalue [4 x <4 x float>] %62, <4 x float> %column82, 2
  %leftColumn83 = extractvalue [4 x <4 x float>] %58, 3
  %rightColumn84 = extractvalue [4 x <4 x float>] %59, 3
  %column85 = fsub <4 x float> %leftColumn83, %rightColumn84
  %64 = insertvalue [4 x <4 x float>] %63, <4 x float> %column85, 3
  %65 = load <4 x float>* %6
  %column86 = extractvalue [4 x <4 x float>] %64, 0
  %dotres87 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %57, <4 x float> %column86)
  %66 = insertelement <4 x float> %65, float %dotres87, i32 0
  %column88 = extractvalue [4 x <4 x float>] %64, 1
  %dotres89 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %57, <4 x float> %column88)
  %67 = insertelement <4 x float> %66, float %dotres89, i32 1
  %column90 = extractvalue [4 x <4 x float>] %64, 2
  %dotres91 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %57, <4 x float> %column90)
  %68 = insertelement <4 x float> %67, float %dotres91, i32 2
  %column92 = extractvalue [4 x <4 x float>] %64, 3
  %dotres93 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %57, <4 x float> %column92)
  %69 = insertelement <4 x float> %68, float %dotres93, i32 3
  %70 = load <4 x float>* @gl_FragColor
  %gl_FragColor94 = fadd <4 x float> %70, %69
  store <4 x float> %gl_FragColor94, <4 x float>* @gl_FragColor
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %71 = load <4 x float>* @v
  %72 = extractelement <4 x float> %71, i32 0
  %73 = load <4 x float>* @u
  %74 = extractelement <4 x float> %73, i32 0
  %75 = fmul float %72, %74
  %76 = load <4 x float>* @v
  %77 = extractelement <4 x float> %76, i32 0
  %78 = load <4 x float>* @u
  %79 = extractelement <4 x float> %78, i32 1
  %80 = fmul float %77, %79
  %81 = load <4 x float>* @v
  %82 = extractelement <4 x float> %81, i32 0
  %83 = load <4 x float>* @u
  %84 = extractelement <4 x float> %83, i32 2
  %85 = fmul float %82, %84
  %86 = load <4 x float>* @v
  %87 = extractelement <4 x float> %86, i32 0
  %88 = load <4 x float>* @u
  %89 = extractelement <4 x float> %88, i32 3
  %90 = fmul float %87, %89
  %91 = load <4 x float>* @v
  %92 = extractelement <4 x float> %91, i32 1
  %93 = load <4 x float>* @u
  %94 = extractelement <4 x float> %93, i32 0
  %95 = fmul float %92, %94
  %96 = load <4 x float>* @v
  %97 = extractelement <4 x float> %96, i32 1
  %98 = load <4 x float>* @u
  %99 = extractelement <4 x float> %98, i32 1
  %100 = fmul float %97, %99
  %101 = load <4 x float>* @v
  %102 = extractelement <4 x float> %101, i32 1
  %103 = load <4 x float>* @u
  %104 = extractelement <4 x float> %103, i32 2
  %105 = fmul float %102, %104
  %106 = load <4 x float>* @v
  %107 = extractelement <4 x float> %106, i32 1
  %108 = load <4 x float>* @u
  %109 = extractelement <4 x float> %108, i32 3
  %110 = fmul float %107, %109
  %111 = load <4 x float>* @v
  %112 = extractelement <4 x float> %111, i32 2
  %113 = load <4 x float>* @u
  %114 = extractelement <4 x float> %113, i32 0
  %115 = fmul float %112, %114
  %116 = load <4 x float>* @v
  %117 = extractelement <4 x float> %116, i32 2
  %118 = load <4 x float>* @u
  %119 = extractelement <4 x float> %118, i32 1
  %120 = fmul float %117, %119
  %121 = load <4 x float>* @v
  %122 = extractelement <4 x float> %121, i32 2
  %123 = load <4 x float>* @u
  %124 = extractelement <4 x float> %123, i32 2
  %125 = fmul float %122, %124
  %126 = load <4 x float>* @v
  %127 = extractelement <4 x float> %126, i32 2
  %128 = load <4 x float>* @u
  %129 = extractelement <4 x float> %128, i32 3
  %130 = fmul float %127, %129
  %131 = load <4 x float>* @v
  %132 = extractelement <4 x float> %131, i32 3
  %133 = load <4 x float>* @u
  %134 = extractelement <4 x float> %133, i32 0
  %135 = fmul float %132, %134
  %136 = load <4 x float>* @v
  %137 = extractelement <4 x float> %136, i32 3
  %138 = load <4 x float>* @u
  %139 = extractelement <4 x float> %138, i32 1
  %140 = fmul float %137, %139
  %141 = load <4 x float>* @v
  %142 = extractelement <4 x float> %141, i32 3
  %143 = load <4 x float>* @u
  %144 = extractelement <4 x float> %143, i32 2
  %145 = fmul float %142, %144
  %146 = load <4 x float>* @v
  %147 = extractelement <4 x float> %146, i32 3
  %148 = load <4 x float>* @u
  %149 = extractelement <4 x float> %148, i32 3
  %150 = fmul float %147, %149
  %151 = load [4 x <4 x float>]* %constructed95
  %column96 = extractvalue [4 x <4 x float>] %151, 0
  %column97 = insertelement <4 x float> %column96, float %75, i32 0
  %column98 = insertelement <4 x float> %column97, float %80, i32 1
  %column99 = insertelement <4 x float> %column98, float %85, i32 2
  %column100 = insertelement <4 x float> %column99, float %90, i32 3
  %matrix = insertvalue [4 x <4 x float>] %151, <4 x float> %column100, 0
  %column101 = extractvalue [4 x <4 x float>] %151, 1
  %column102 = insertelement <4 x float> %column101, float %95, i32 0
  %column103 = insertelement <4 x float> %column102, float %100, i32 1
  %column104 = insertelement <4 x float> %column103, float %105, i32 2
  %column105 = insertelement <4 x float> %column104, float %110, i32 3
  %matrix106 = insertvalue [4 x <4 x float>] %matrix, <4 x float> %column105, 1
  %column107 = extractvalue [4 x <4 x float>] %151, 2
  %column108 = insertelement <4 x float> %column107, float %115, i32 0
  %column109 = insertelement <4 x float> %column108, float %120, i32 1
  %column110 = insertelement <4 x float> %column109, float %125, i32 2
  %column111 = insertelement <4 x float> %column110, float %130, i32 3
  %matrix112 = insertvalue [4 x <4 x float>] %matrix106, <4 x float> %column111, 2
  %column113 = extractvalue [4 x <4 x float>] %151, 3
  %column114 = insertelement <4 x float> %column113, float %135, i32 0
  %column115 = insertelement <4 x float> %column114, float %140, i32 1
  %column116 = insertelement <4 x float> %column115, float %145, i32 2
  %column117 = insertelement <4 x float> %column116, float %150, i32 3
  %matrix118 = insertvalue [4 x <4 x float>] %matrix112, <4 x float> %column117, 3
  store [4 x <4 x float>] %matrix118, [4 x <4 x float>]* %m34
  %152 = load <4 x float>* @v
  %153 = extractelement <4 x float> %152, i32 0
  %154 = load [4 x <4 x float>]* %constructed119
  %column120 = extractvalue [4 x <4 x float>] %154, 0
  %column121 = insertelement <4 x float> %column120, float %153, i32 0
  %column122 = insertelement <4 x float> %column121, float 0.000000e+00, i32 1
  %column123 = insertelement <4 x float> %column122, float 0.000000e+00, i32 2
  %column124 = insertelement <4 x float> %column123, float 0.000000e+00, i32 3
  %matrix125 = insertvalue [4 x <4 x float>] %154, <4 x float> %column124, 0
  %column126 = extractvalue [4 x <4 x float>] %154, 1
  %column127 = insertelement <4 x float> %column126, float 0.000000e+00, i32 0
  %column128 = insertelement <4 x float> %column127, float %153, i32 1
  %column129 = insertelement <4 x float> %column128, float 0.000000e+00, i32 2
  %column130 = insertelement <4 x float> %column129, float 0.000000e+00, i32 3
  %matrix131 = insertvalue [4 x <4 x float>] %matrix125, <4 x float> %column130, 1
  %column132 = extractvalue [4 x <4 x float>] %154, 2
  %column133 = insertelement <4 x float> %column132, float 0.000000e+00, i32 0
  %column134 = insertelement <4 x float> %column133, float 0.000000e+00, i32 1
  %column135 = insertelement <4 x float> %column134, float %153, i32 2
  %column136 = insertelement <4 x float> %column135, float 0.000000e+00, i32 3
  %matrix137 = insertvalue [4 x <4 x float>] %matrix131, <4 x float> %column136, 2
  %column138 = extractvalue [4 x <4 x float>] %154, 3
  %column139 = insertelement <4 x float> %column138, float 0.000000e+00, i32 0
  %column140 = insertelement <4 x float> %column139, float 0.000000e+00, i32 1
  %column141 = insertelement <4 x float> %column140, float 0.000000e+00, i32 2
  %column142 = insertelement <4 x float> %column141, float %153, i32 3
  %matrix143 = insertvalue [4 x <4 x float>] %matrix137, <4 x float> %column142, 3
  %155 = load [4 x <4 x float>]* %m34
  %156 = load [4 x <4 x float>]* %5
  %leftColumn144 = extractvalue [4 x <4 x float>] %155, 0
  %rightColumn145 = extractvalue [4 x <4 x float>] %matrix143, 0
  %column146 = fadd <4 x float> %leftColumn144, %rightColumn145
  %157 = insertvalue [4 x <4 x float>] %156, <4 x float> %column146, 0
  %leftColumn147 = extractvalue [4 x <4 x float>] %155, 1
  %rightColumn148 = extractvalue [4 x <4 x float>] %matrix143, 1
  %column149 = fadd <4 x float> %leftColumn147, %rightColumn148
  %158 = insertvalue [4 x <4 x float>] %157, <4 x float> %column149, 1
  %leftColumn150 = extractvalue [4 x <4 x float>] %155, 2
  %rightColumn151 = extractvalue [4 x <4 x float>] %matrix143, 2
  %column152 = fadd <4 x float> %leftColumn150, %rightColumn151
  %159 = insertvalue [4 x <4 x float>] %158, <4 x float> %column152, 2
  %leftColumn153 = extractvalue [4 x <4 x float>] %155, 3
  %rightColumn154 = extractvalue [4 x <4 x float>] %matrix143, 3
  %column155 = fadd <4 x float> %leftColumn153, %rightColumn154
  %m34156 = insertvalue [4 x <4 x float>] %159, <4 x float> %column155, 3
  store [4 x <4 x float>] %m34156, [4 x <4 x float>]* %m34
  %160 = load <4 x float>* @u
  %161 = load <4 x float>* @u
  %162 = extractelement <4 x float> %161, i32 0
  %163 = load <4 x float>* @u
  %164 = load <4 x float>* @u
  %165 = extractelement <4 x float> %164, i32 0
  %166 = load <4 x float>* @u
  %167 = load <4 x float>* @u
  %168 = extractelement <4 x float> %167, i32 0
  %169 = load <4 x float>* @u
  %170 = extractelement <4 x float> %169, i32 0
  %171 = load [4 x <4 x float>]* %constructed157
  %element158 = extractelement <4 x float> %160, i32 0
  %element159 = extractelement <4 x float> %160, i32 1
  %element160 = extractelement <4 x float> %160, i32 2
  %element161 = extractelement <4 x float> %160, i32 3
  %element162 = extractelement <4 x float> %163, i32 0
  %element163 = extractelement <4 x float> %163, i32 1
  %element164 = extractelement <4 x float> %163, i32 2
  %element165 = extractelement <4 x float> %163, i32 3
  %element166 = extractelement <4 x float> %166, i32 0
  %element167 = extractelement <4 x float> %166, i32 1
  %element168 = extractelement <4 x float> %166, i32 2
  %element169 = extractelement <4 x float> %166, i32 3
  %column170 = extractvalue [4 x <4 x float>] %171, 0
  %column171 = insertelement <4 x float> %column170, float %element158, i32 0
  %column172 = insertelement <4 x float> %column171, float %element159, i32 1
  %column173 = insertelement <4 x float> %column172, float %element160, i32 2
  %column174 = insertelement <4 x float> %column173, float %element161, i32 3
  %matrix175 = insertvalue [4 x <4 x float>] %171, <4 x float> %column174, 0
  %column176 = extractvalue [4 x <4 x float>] %171, 1
  %column177 = insertelement <4 x float> %column176, float %162, i32 0
  %column178 = insertelement <4 x float> %column177, float %element162, i32 1
  %column179 = insertelement <4 x float> %column178, float %element163, i32 2
  %column180 = insertelement <4 x float> %column179, float %element164, i32 3
  %matrix181 = insertvalue [4 x <4 x float>] %matrix175, <4 x float> %column180, 1
  %column182 = extractvalue [4 x <4 x float>] %171, 2
  %column183 = insertelement <4 x float> %column182, float %element165, i32 0
  %column184 = insertelement <4 x float> %column183, float %165, i32 1
  %column185 = insertelement <4 x float> %column184, float %element166, i32 2
  %column186 = insertelement <4 x float> %column185, float %element167, i32 3
  %matrix187 = insertvalue [4 x <4 x float>] %matrix181, <4 x float> %column186, 2
  %column188 = extractvalue [4 x <4 x float>] %171, 3
  %column189 = insertelement <4 x float> %column188, float %element168, i32 0
  %column190 = insertelement <4 x float> %column189, float %element169, i32 1
  %column191 = insertelement <4 x float> %column190, float %168, i32 2
  %column192 = insertelement <4 x float> %column191, float %170, i32 3
  %matrix193 = insertvalue [4 x <4 x float>] %matrix187, <4 x float> %column192, 3
  %172 = load [4 x <4 x float>]* %m34
  %173 = load [4 x <4 x float>]* %4
  %leftColumn194 = extractvalue [4 x <4 x float>] %172, 0
  %rightColumn195 = extractvalue [4 x <4 x float>] %matrix193, 0
  %column196 = fadd <4 x float> %leftColumn194, %rightColumn195
  %174 = insertvalue [4 x <4 x float>] %173, <4 x float> %column196, 0
  %leftColumn197 = extractvalue [4 x <4 x float>] %172, 1
  %rightColumn198 = extractvalue [4 x <4 x float>] %matrix193, 1
  %column199 = fadd <4 x float> %leftColumn197, %rightColumn198
  %175 = insertvalue [4 x <4 x float>] %174, <4 x float> %column199, 1
  %leftColumn200 = extractvalue [4 x <4 x float>] %172, 2
  %rightColumn201 = extractvalue [4 x <4 x float>] %matrix193, 2
  %column202 = fadd <4 x float> %leftColumn200, %rightColumn201
  %176 = insertvalue [4 x <4 x float>] %175, <4 x float> %column202, 2
  %leftColumn203 = extractvalue [4 x <4 x float>] %172, 3
  %rightColumn204 = extractvalue [4 x <4 x float>] %matrix193, 3
  %column205 = fadd <4 x float> %leftColumn203, %rightColumn204
  %m34206 = insertvalue [4 x <4 x float>] %176, <4 x float> %column205, 3
  store [4 x <4 x float>] %m34206, [4 x <4 x float>]* %m34
  %177 = load [4 x <4 x float>]* %m34
  %178 = load [4 x <4 x float>] addrspace(2)* @un34, !gla.uniform !3
  %element1207 = extractvalue [4 x <4 x float>] %177, 0
  %element2208 = extractvalue [4 x <4 x float>] %178, 0
  %179 = fcmp oeq <4 x float> %element1207, %element2208
  %180 = call i1 @llvm.gla.all.v4i1(<4 x i1> %179)
  %element1209 = extractvalue [4 x <4 x float>] %177, 1
  %element2210 = extractvalue [4 x <4 x float>] %178, 1
  %181 = fcmp oeq <4 x float> %element1209, %element2210
  %182 = call i1 @llvm.gla.all.v4i1(<4 x i1> %181)
  %183 = and i1 %180, %182
  %element1211 = extractvalue [4 x <4 x float>] %177, 2
  %element2212 = extractvalue [4 x <4 x float>] %178, 2
  %184 = fcmp oeq <4 x float> %element1211, %element2212
  %185 = call i1 @llvm.gla.all.v4i1(<4 x i1> %184)
  %186 = and i1 %183, %185
  %element1213 = extractvalue [4 x <4 x float>] %177, 3
  %element2214 = extractvalue [4 x <4 x float>] %178, 3
  %187 = fcmp oeq <4 x float> %element1213, %element2214
  %188 = call i1 @llvm.gla.all.v4i1(<4 x i1> %187)
  %189 = and i1 %186, %188
  br i1 %189, label %then215, label %else281

then215:                                          ; preds = %ifmerge
  %190 = load [4 x <4 x float>]* %m34
  %191 = load <4 x float>* @u
  %192 = load <4 x float>* %3
  %component216 = extractelement <4 x float> %191, i32 0
  %component217 = extractelement <4 x float> %191, i32 1
  %component218 = extractelement <4 x float> %191, i32 2
  %component219 = extractelement <4 x float> %191, i32 3
  %column220 = extractvalue [4 x <4 x float>] %190, 0
  %element221 = extractelement <4 x float> %column220, i32 0
  %product222 = fmul float %element221, %component216
  %column223 = extractvalue [4 x <4 x float>] %190, 1
  %element224 = extractelement <4 x float> %column223, i32 0
  %product225 = fmul float %element224, %component217
  %dotProduct226 = fadd float %product222, %product225
  %column227 = extractvalue [4 x <4 x float>] %190, 2
  %element228 = extractelement <4 x float> %column227, i32 0
  %product229 = fmul float %element228, %component218
  %dotProduct230 = fadd float %dotProduct226, %product229
  %column231 = extractvalue [4 x <4 x float>] %190, 3
  %element232 = extractelement <4 x float> %column231, i32 0
  %product233 = fmul float %element232, %component219
  %dotProduct234 = fadd float %dotProduct230, %product233
  %193 = insertelement <4 x float> %192, float %dotProduct234, i32 0
  %column235 = extractvalue [4 x <4 x float>] %190, 0
  %element236 = extractelement <4 x float> %column235, i32 1
  %product237 = fmul float %element236, %component216
  %column238 = extractvalue [4 x <4 x float>] %190, 1
  %element239 = extractelement <4 x float> %column238, i32 1
  %product240 = fmul float %element239, %component217
  %dotProduct241 = fadd float %product237, %product240
  %column242 = extractvalue [4 x <4 x float>] %190, 2
  %element243 = extractelement <4 x float> %column242, i32 1
  %product244 = fmul float %element243, %component218
  %dotProduct245 = fadd float %dotProduct241, %product244
  %column246 = extractvalue [4 x <4 x float>] %190, 3
  %element247 = extractelement <4 x float> %column246, i32 1
  %product248 = fmul float %element247, %component219
  %dotProduct249 = fadd float %dotProduct245, %product248
  %194 = insertelement <4 x float> %193, float %dotProduct249, i32 1
  %column250 = extractvalue [4 x <4 x float>] %190, 0
  %element251 = extractelement <4 x float> %column250, i32 2
  %product252 = fmul float %element251, %component216
  %column253 = extractvalue [4 x <4 x float>] %190, 1
  %element254 = extractelement <4 x float> %column253, i32 2
  %product255 = fmul float %element254, %component217
  %dotProduct256 = fadd float %product252, %product255
  %column257 = extractvalue [4 x <4 x float>] %190, 2
  %element258 = extractelement <4 x float> %column257, i32 2
  %product259 = fmul float %element258, %component218
  %dotProduct260 = fadd float %dotProduct256, %product259
  %column261 = extractvalue [4 x <4 x float>] %190, 3
  %element262 = extractelement <4 x float> %column261, i32 2
  %product263 = fmul float %element262, %component219
  %dotProduct264 = fadd float %dotProduct260, %product263
  %195 = insertelement <4 x float> %194, float %dotProduct264, i32 2
  %column265 = extractvalue [4 x <4 x float>] %190, 0
  %element266 = extractelement <4 x float> %column265, i32 3
  %product267 = fmul float %element266, %component216
  %column268 = extractvalue [4 x <4 x float>] %190, 1
  %element269 = extractelement <4 x float> %column268, i32 3
  %product270 = fmul float %element269, %component217
  %dotProduct271 = fadd float %product267, %product270
  %column272 = extractvalue [4 x <4 x float>] %190, 2
  %element273 = extractelement <4 x float> %column272, i32 3
  %product274 = fmul float %element273, %component218
  %dotProduct275 = fadd float %dotProduct271, %product274
  %column276 = extractvalue [4 x <4 x float>] %190, 3
  %element277 = extractelement <4 x float> %column276, i32 3
  %product278 = fmul float %element277, %component219
  %dotProduct279 = fadd float %dotProduct275, %product278
  %196 = insertelement <4 x float> %195, float %dotProduct279, i32 3
  %197 = load <4 x float>* @gl_FragColor
  %gl_FragColor280 = fadd <4 x float> %197, %196
  store <4 x float> %gl_FragColor280, <4 x float>* @gl_FragColor
  br label %ifmerge673

else281:                                          ; preds = %ifmerge
  %198 = load [4 x <4 x float>] addrspace(2)* @un34, !gla.uniform !3
  %199 = load [4 x <4 x float>] addrspace(2)* @um43, !gla.uniform !8
  %resultMatrix = load [4 x <4 x float>]* %2
  %tempColumn = load <4 x float>* %1
  %rightColumn282 = extractvalue [4 x <4 x float>] %199, 0
  %leftColumn283 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp = extractelement <4 x float> %leftColumn283, i32 0
  %rightComp = extractelement <4 x float> %rightColumn282, i32 0
  %product284 = fmul float %leftComp, %rightComp
  %leftColumn285 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp286 = extractelement <4 x float> %leftColumn285, i32 0
  %rightComp287 = extractelement <4 x float> %rightColumn282, i32 1
  %product288 = fmul float %leftComp286, %rightComp287
  %dotProduct289 = fadd float %product284, %product288
  %leftColumn290 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp291 = extractelement <4 x float> %leftColumn290, i32 0
  %rightComp292 = extractelement <4 x float> %rightColumn282, i32 2
  %product293 = fmul float %leftComp291, %rightComp292
  %dotProduct294 = fadd float %dotProduct289, %product293
  %leftColumn295 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp296 = extractelement <4 x float> %leftColumn295, i32 0
  %rightComp297 = extractelement <4 x float> %rightColumn282, i32 3
  %product298 = fmul float %leftComp296, %rightComp297
  %dotProduct299 = fadd float %dotProduct294, %product298
  %column300 = insertelement <4 x float> %tempColumn, float %dotProduct299, i32 0
  %leftColumn301 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp302 = extractelement <4 x float> %leftColumn301, i32 1
  %rightComp303 = extractelement <4 x float> %rightColumn282, i32 0
  %product304 = fmul float %leftComp302, %rightComp303
  %leftColumn305 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp306 = extractelement <4 x float> %leftColumn305, i32 1
  %rightComp307 = extractelement <4 x float> %rightColumn282, i32 1
  %product308 = fmul float %leftComp306, %rightComp307
  %dotProduct309 = fadd float %product304, %product308
  %leftColumn310 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp311 = extractelement <4 x float> %leftColumn310, i32 1
  %rightComp312 = extractelement <4 x float> %rightColumn282, i32 2
  %product313 = fmul float %leftComp311, %rightComp312
  %dotProduct314 = fadd float %dotProduct309, %product313
  %leftColumn315 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp316 = extractelement <4 x float> %leftColumn315, i32 1
  %rightComp317 = extractelement <4 x float> %rightColumn282, i32 3
  %product318 = fmul float %leftComp316, %rightComp317
  %dotProduct319 = fadd float %dotProduct314, %product318
  %column320 = insertelement <4 x float> %column300, float %dotProduct319, i32 1
  %leftColumn321 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp322 = extractelement <4 x float> %leftColumn321, i32 2
  %rightComp323 = extractelement <4 x float> %rightColumn282, i32 0
  %product324 = fmul float %leftComp322, %rightComp323
  %leftColumn325 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp326 = extractelement <4 x float> %leftColumn325, i32 2
  %rightComp327 = extractelement <4 x float> %rightColumn282, i32 1
  %product328 = fmul float %leftComp326, %rightComp327
  %dotProduct329 = fadd float %product324, %product328
  %leftColumn330 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp331 = extractelement <4 x float> %leftColumn330, i32 2
  %rightComp332 = extractelement <4 x float> %rightColumn282, i32 2
  %product333 = fmul float %leftComp331, %rightComp332
  %dotProduct334 = fadd float %dotProduct329, %product333
  %leftColumn335 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp336 = extractelement <4 x float> %leftColumn335, i32 2
  %rightComp337 = extractelement <4 x float> %rightColumn282, i32 3
  %product338 = fmul float %leftComp336, %rightComp337
  %dotProduct339 = fadd float %dotProduct334, %product338
  %column340 = insertelement <4 x float> %column320, float %dotProduct339, i32 2
  %leftColumn341 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp342 = extractelement <4 x float> %leftColumn341, i32 3
  %rightComp343 = extractelement <4 x float> %rightColumn282, i32 0
  %product344 = fmul float %leftComp342, %rightComp343
  %leftColumn345 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp346 = extractelement <4 x float> %leftColumn345, i32 3
  %rightComp347 = extractelement <4 x float> %rightColumn282, i32 1
  %product348 = fmul float %leftComp346, %rightComp347
  %dotProduct349 = fadd float %product344, %product348
  %leftColumn350 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp351 = extractelement <4 x float> %leftColumn350, i32 3
  %rightComp352 = extractelement <4 x float> %rightColumn282, i32 2
  %product353 = fmul float %leftComp351, %rightComp352
  %dotProduct354 = fadd float %dotProduct349, %product353
  %leftColumn355 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp356 = extractelement <4 x float> %leftColumn355, i32 3
  %rightComp357 = extractelement <4 x float> %rightColumn282, i32 3
  %product358 = fmul float %leftComp356, %rightComp357
  %dotProduct359 = fadd float %dotProduct354, %product358
  %column360 = insertelement <4 x float> %column340, float %dotProduct359, i32 3
  %resultMatrix361 = insertvalue [4 x <4 x float>] %resultMatrix, <4 x float> %column360, 0
  %rightColumn362 = extractvalue [4 x <4 x float>] %199, 1
  %leftColumn363 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp364 = extractelement <4 x float> %leftColumn363, i32 0
  %rightComp365 = extractelement <4 x float> %rightColumn362, i32 0
  %product366 = fmul float %leftComp364, %rightComp365
  %leftColumn367 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp368 = extractelement <4 x float> %leftColumn367, i32 0
  %rightComp369 = extractelement <4 x float> %rightColumn362, i32 1
  %product370 = fmul float %leftComp368, %rightComp369
  %dotProduct371 = fadd float %product366, %product370
  %leftColumn372 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp373 = extractelement <4 x float> %leftColumn372, i32 0
  %rightComp374 = extractelement <4 x float> %rightColumn362, i32 2
  %product375 = fmul float %leftComp373, %rightComp374
  %dotProduct376 = fadd float %dotProduct371, %product375
  %leftColumn377 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp378 = extractelement <4 x float> %leftColumn377, i32 0
  %rightComp379 = extractelement <4 x float> %rightColumn362, i32 3
  %product380 = fmul float %leftComp378, %rightComp379
  %dotProduct381 = fadd float %dotProduct376, %product380
  %column382 = insertelement <4 x float> %column360, float %dotProduct381, i32 0
  %leftColumn383 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp384 = extractelement <4 x float> %leftColumn383, i32 1
  %rightComp385 = extractelement <4 x float> %rightColumn362, i32 0
  %product386 = fmul float %leftComp384, %rightComp385
  %leftColumn387 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp388 = extractelement <4 x float> %leftColumn387, i32 1
  %rightComp389 = extractelement <4 x float> %rightColumn362, i32 1
  %product390 = fmul float %leftComp388, %rightComp389
  %dotProduct391 = fadd float %product386, %product390
  %leftColumn392 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp393 = extractelement <4 x float> %leftColumn392, i32 1
  %rightComp394 = extractelement <4 x float> %rightColumn362, i32 2
  %product395 = fmul float %leftComp393, %rightComp394
  %dotProduct396 = fadd float %dotProduct391, %product395
  %leftColumn397 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp398 = extractelement <4 x float> %leftColumn397, i32 1
  %rightComp399 = extractelement <4 x float> %rightColumn362, i32 3
  %product400 = fmul float %leftComp398, %rightComp399
  %dotProduct401 = fadd float %dotProduct396, %product400
  %column402 = insertelement <4 x float> %column382, float %dotProduct401, i32 1
  %leftColumn403 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp404 = extractelement <4 x float> %leftColumn403, i32 2
  %rightComp405 = extractelement <4 x float> %rightColumn362, i32 0
  %product406 = fmul float %leftComp404, %rightComp405
  %leftColumn407 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp408 = extractelement <4 x float> %leftColumn407, i32 2
  %rightComp409 = extractelement <4 x float> %rightColumn362, i32 1
  %product410 = fmul float %leftComp408, %rightComp409
  %dotProduct411 = fadd float %product406, %product410
  %leftColumn412 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp413 = extractelement <4 x float> %leftColumn412, i32 2
  %rightComp414 = extractelement <4 x float> %rightColumn362, i32 2
  %product415 = fmul float %leftComp413, %rightComp414
  %dotProduct416 = fadd float %dotProduct411, %product415
  %leftColumn417 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp418 = extractelement <4 x float> %leftColumn417, i32 2
  %rightComp419 = extractelement <4 x float> %rightColumn362, i32 3
  %product420 = fmul float %leftComp418, %rightComp419
  %dotProduct421 = fadd float %dotProduct416, %product420
  %column422 = insertelement <4 x float> %column402, float %dotProduct421, i32 2
  %leftColumn423 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp424 = extractelement <4 x float> %leftColumn423, i32 3
  %rightComp425 = extractelement <4 x float> %rightColumn362, i32 0
  %product426 = fmul float %leftComp424, %rightComp425
  %leftColumn427 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp428 = extractelement <4 x float> %leftColumn427, i32 3
  %rightComp429 = extractelement <4 x float> %rightColumn362, i32 1
  %product430 = fmul float %leftComp428, %rightComp429
  %dotProduct431 = fadd float %product426, %product430
  %leftColumn432 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp433 = extractelement <4 x float> %leftColumn432, i32 3
  %rightComp434 = extractelement <4 x float> %rightColumn362, i32 2
  %product435 = fmul float %leftComp433, %rightComp434
  %dotProduct436 = fadd float %dotProduct431, %product435
  %leftColumn437 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp438 = extractelement <4 x float> %leftColumn437, i32 3
  %rightComp439 = extractelement <4 x float> %rightColumn362, i32 3
  %product440 = fmul float %leftComp438, %rightComp439
  %dotProduct441 = fadd float %dotProduct436, %product440
  %column442 = insertelement <4 x float> %column422, float %dotProduct441, i32 3
  %resultMatrix443 = insertvalue [4 x <4 x float>] %resultMatrix361, <4 x float> %column442, 1
  %rightColumn444 = extractvalue [4 x <4 x float>] %199, 2
  %leftColumn445 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp446 = extractelement <4 x float> %leftColumn445, i32 0
  %rightComp447 = extractelement <4 x float> %rightColumn444, i32 0
  %product448 = fmul float %leftComp446, %rightComp447
  %leftColumn449 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp450 = extractelement <4 x float> %leftColumn449, i32 0
  %rightComp451 = extractelement <4 x float> %rightColumn444, i32 1
  %product452 = fmul float %leftComp450, %rightComp451
  %dotProduct453 = fadd float %product448, %product452
  %leftColumn454 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp455 = extractelement <4 x float> %leftColumn454, i32 0
  %rightComp456 = extractelement <4 x float> %rightColumn444, i32 2
  %product457 = fmul float %leftComp455, %rightComp456
  %dotProduct458 = fadd float %dotProduct453, %product457
  %leftColumn459 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp460 = extractelement <4 x float> %leftColumn459, i32 0
  %rightComp461 = extractelement <4 x float> %rightColumn444, i32 3
  %product462 = fmul float %leftComp460, %rightComp461
  %dotProduct463 = fadd float %dotProduct458, %product462
  %column464 = insertelement <4 x float> %column442, float %dotProduct463, i32 0
  %leftColumn465 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp466 = extractelement <4 x float> %leftColumn465, i32 1
  %rightComp467 = extractelement <4 x float> %rightColumn444, i32 0
  %product468 = fmul float %leftComp466, %rightComp467
  %leftColumn469 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp470 = extractelement <4 x float> %leftColumn469, i32 1
  %rightComp471 = extractelement <4 x float> %rightColumn444, i32 1
  %product472 = fmul float %leftComp470, %rightComp471
  %dotProduct473 = fadd float %product468, %product472
  %leftColumn474 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp475 = extractelement <4 x float> %leftColumn474, i32 1
  %rightComp476 = extractelement <4 x float> %rightColumn444, i32 2
  %product477 = fmul float %leftComp475, %rightComp476
  %dotProduct478 = fadd float %dotProduct473, %product477
  %leftColumn479 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp480 = extractelement <4 x float> %leftColumn479, i32 1
  %rightComp481 = extractelement <4 x float> %rightColumn444, i32 3
  %product482 = fmul float %leftComp480, %rightComp481
  %dotProduct483 = fadd float %dotProduct478, %product482
  %column484 = insertelement <4 x float> %column464, float %dotProduct483, i32 1
  %leftColumn485 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp486 = extractelement <4 x float> %leftColumn485, i32 2
  %rightComp487 = extractelement <4 x float> %rightColumn444, i32 0
  %product488 = fmul float %leftComp486, %rightComp487
  %leftColumn489 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp490 = extractelement <4 x float> %leftColumn489, i32 2
  %rightComp491 = extractelement <4 x float> %rightColumn444, i32 1
  %product492 = fmul float %leftComp490, %rightComp491
  %dotProduct493 = fadd float %product488, %product492
  %leftColumn494 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp495 = extractelement <4 x float> %leftColumn494, i32 2
  %rightComp496 = extractelement <4 x float> %rightColumn444, i32 2
  %product497 = fmul float %leftComp495, %rightComp496
  %dotProduct498 = fadd float %dotProduct493, %product497
  %leftColumn499 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp500 = extractelement <4 x float> %leftColumn499, i32 2
  %rightComp501 = extractelement <4 x float> %rightColumn444, i32 3
  %product502 = fmul float %leftComp500, %rightComp501
  %dotProduct503 = fadd float %dotProduct498, %product502
  %column504 = insertelement <4 x float> %column484, float %dotProduct503, i32 2
  %leftColumn505 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp506 = extractelement <4 x float> %leftColumn505, i32 3
  %rightComp507 = extractelement <4 x float> %rightColumn444, i32 0
  %product508 = fmul float %leftComp506, %rightComp507
  %leftColumn509 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp510 = extractelement <4 x float> %leftColumn509, i32 3
  %rightComp511 = extractelement <4 x float> %rightColumn444, i32 1
  %product512 = fmul float %leftComp510, %rightComp511
  %dotProduct513 = fadd float %product508, %product512
  %leftColumn514 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp515 = extractelement <4 x float> %leftColumn514, i32 3
  %rightComp516 = extractelement <4 x float> %rightColumn444, i32 2
  %product517 = fmul float %leftComp515, %rightComp516
  %dotProduct518 = fadd float %dotProduct513, %product517
  %leftColumn519 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp520 = extractelement <4 x float> %leftColumn519, i32 3
  %rightComp521 = extractelement <4 x float> %rightColumn444, i32 3
  %product522 = fmul float %leftComp520, %rightComp521
  %dotProduct523 = fadd float %dotProduct518, %product522
  %column524 = insertelement <4 x float> %column504, float %dotProduct523, i32 3
  %resultMatrix525 = insertvalue [4 x <4 x float>] %resultMatrix443, <4 x float> %column524, 2
  %rightColumn526 = extractvalue [4 x <4 x float>] %199, 3
  %leftColumn527 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp528 = extractelement <4 x float> %leftColumn527, i32 0
  %rightComp529 = extractelement <4 x float> %rightColumn526, i32 0
  %product530 = fmul float %leftComp528, %rightComp529
  %leftColumn531 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp532 = extractelement <4 x float> %leftColumn531, i32 0
  %rightComp533 = extractelement <4 x float> %rightColumn526, i32 1
  %product534 = fmul float %leftComp532, %rightComp533
  %dotProduct535 = fadd float %product530, %product534
  %leftColumn536 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp537 = extractelement <4 x float> %leftColumn536, i32 0
  %rightComp538 = extractelement <4 x float> %rightColumn526, i32 2
  %product539 = fmul float %leftComp537, %rightComp538
  %dotProduct540 = fadd float %dotProduct535, %product539
  %leftColumn541 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp542 = extractelement <4 x float> %leftColumn541, i32 0
  %rightComp543 = extractelement <4 x float> %rightColumn526, i32 3
  %product544 = fmul float %leftComp542, %rightComp543
  %dotProduct545 = fadd float %dotProduct540, %product544
  %column546 = insertelement <4 x float> %column524, float %dotProduct545, i32 0
  %leftColumn547 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp548 = extractelement <4 x float> %leftColumn547, i32 1
  %rightComp549 = extractelement <4 x float> %rightColumn526, i32 0
  %product550 = fmul float %leftComp548, %rightComp549
  %leftColumn551 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp552 = extractelement <4 x float> %leftColumn551, i32 1
  %rightComp553 = extractelement <4 x float> %rightColumn526, i32 1
  %product554 = fmul float %leftComp552, %rightComp553
  %dotProduct555 = fadd float %product550, %product554
  %leftColumn556 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp557 = extractelement <4 x float> %leftColumn556, i32 1
  %rightComp558 = extractelement <4 x float> %rightColumn526, i32 2
  %product559 = fmul float %leftComp557, %rightComp558
  %dotProduct560 = fadd float %dotProduct555, %product559
  %leftColumn561 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp562 = extractelement <4 x float> %leftColumn561, i32 1
  %rightComp563 = extractelement <4 x float> %rightColumn526, i32 3
  %product564 = fmul float %leftComp562, %rightComp563
  %dotProduct565 = fadd float %dotProduct560, %product564
  %column566 = insertelement <4 x float> %column546, float %dotProduct565, i32 1
  %leftColumn567 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp568 = extractelement <4 x float> %leftColumn567, i32 2
  %rightComp569 = extractelement <4 x float> %rightColumn526, i32 0
  %product570 = fmul float %leftComp568, %rightComp569
  %leftColumn571 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp572 = extractelement <4 x float> %leftColumn571, i32 2
  %rightComp573 = extractelement <4 x float> %rightColumn526, i32 1
  %product574 = fmul float %leftComp572, %rightComp573
  %dotProduct575 = fadd float %product570, %product574
  %leftColumn576 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp577 = extractelement <4 x float> %leftColumn576, i32 2
  %rightComp578 = extractelement <4 x float> %rightColumn526, i32 2
  %product579 = fmul float %leftComp577, %rightComp578
  %dotProduct580 = fadd float %dotProduct575, %product579
  %leftColumn581 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp582 = extractelement <4 x float> %leftColumn581, i32 2
  %rightComp583 = extractelement <4 x float> %rightColumn526, i32 3
  %product584 = fmul float %leftComp582, %rightComp583
  %dotProduct585 = fadd float %dotProduct580, %product584
  %column586 = insertelement <4 x float> %column566, float %dotProduct585, i32 2
  %leftColumn587 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp588 = extractelement <4 x float> %leftColumn587, i32 3
  %rightComp589 = extractelement <4 x float> %rightColumn526, i32 0
  %product590 = fmul float %leftComp588, %rightComp589
  %leftColumn591 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp592 = extractelement <4 x float> %leftColumn591, i32 3
  %rightComp593 = extractelement <4 x float> %rightColumn526, i32 1
  %product594 = fmul float %leftComp592, %rightComp593
  %dotProduct595 = fadd float %product590, %product594
  %leftColumn596 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp597 = extractelement <4 x float> %leftColumn596, i32 3
  %rightComp598 = extractelement <4 x float> %rightColumn526, i32 2
  %product599 = fmul float %leftComp597, %rightComp598
  %dotProduct600 = fadd float %dotProduct595, %product599
  %leftColumn601 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp602 = extractelement <4 x float> %leftColumn601, i32 3
  %rightComp603 = extractelement <4 x float> %rightColumn526, i32 3
  %product604 = fmul float %leftComp602, %rightComp603
  %dotProduct605 = fadd float %dotProduct600, %product604
  %column606 = insertelement <4 x float> %column586, float %dotProduct605, i32 3
  %resultMatrix607 = insertvalue [4 x <4 x float>] %resultMatrix525, <4 x float> %column606, 3
  %200 = load <4 x float>* @v
  %201 = load <4 x float>* %0
  %component608 = extractelement <4 x float> %200, i32 0
  %component609 = extractelement <4 x float> %200, i32 1
  %component610 = extractelement <4 x float> %200, i32 2
  %component611 = extractelement <4 x float> %200, i32 3
  %column612 = extractvalue [4 x <4 x float>] %resultMatrix607, 0
  %element613 = extractelement <4 x float> %column612, i32 0
  %product614 = fmul float %element613, %component608
  %column615 = extractvalue [4 x <4 x float>] %resultMatrix607, 1
  %element616 = extractelement <4 x float> %column615, i32 0
  %product617 = fmul float %element616, %component609
  %dotProduct618 = fadd float %product614, %product617
  %column619 = extractvalue [4 x <4 x float>] %resultMatrix607, 2
  %element620 = extractelement <4 x float> %column619, i32 0
  %product621 = fmul float %element620, %component610
  %dotProduct622 = fadd float %dotProduct618, %product621
  %column623 = extractvalue [4 x <4 x float>] %resultMatrix607, 3
  %element624 = extractelement <4 x float> %column623, i32 0
  %product625 = fmul float %element624, %component611
  %dotProduct626 = fadd float %dotProduct622, %product625
  %202 = insertelement <4 x float> %201, float %dotProduct626, i32 0
  %column627 = extractvalue [4 x <4 x float>] %resultMatrix607, 0
  %element628 = extractelement <4 x float> %column627, i32 1
  %product629 = fmul float %element628, %component608
  %column630 = extractvalue [4 x <4 x float>] %resultMatrix607, 1
  %element631 = extractelement <4 x float> %column630, i32 1
  %product632 = fmul float %element631, %component609
  %dotProduct633 = fadd float %product629, %product632
  %column634 = extractvalue [4 x <4 x float>] %resultMatrix607, 2
  %element635 = extractelement <4 x float> %column634, i32 1
  %product636 = fmul float %element635, %component610
  %dotProduct637 = fadd float %dotProduct633, %product636
  %column638 = extractvalue [4 x <4 x float>] %resultMatrix607, 3
  %element639 = extractelement <4 x float> %column638, i32 1
  %product640 = fmul float %element639, %component611
  %dotProduct641 = fadd float %dotProduct637, %product640
  %203 = insertelement <4 x float> %202, float %dotProduct641, i32 1
  %column642 = extractvalue [4 x <4 x float>] %resultMatrix607, 0
  %element643 = extractelement <4 x float> %column642, i32 2
  %product644 = fmul float %element643, %component608
  %column645 = extractvalue [4 x <4 x float>] %resultMatrix607, 1
  %element646 = extractelement <4 x float> %column645, i32 2
  %product647 = fmul float %element646, %component609
  %dotProduct648 = fadd float %product644, %product647
  %column649 = extractvalue [4 x <4 x float>] %resultMatrix607, 2
  %element650 = extractelement <4 x float> %column649, i32 2
  %product651 = fmul float %element650, %component610
  %dotProduct652 = fadd float %dotProduct648, %product651
  %column653 = extractvalue [4 x <4 x float>] %resultMatrix607, 3
  %element654 = extractelement <4 x float> %column653, i32 2
  %product655 = fmul float %element654, %component611
  %dotProduct656 = fadd float %dotProduct652, %product655
  %204 = insertelement <4 x float> %203, float %dotProduct656, i32 2
  %column657 = extractvalue [4 x <4 x float>] %resultMatrix607, 0
  %element658 = extractelement <4 x float> %column657, i32 3
  %product659 = fmul float %element658, %component608
  %column660 = extractvalue [4 x <4 x float>] %resultMatrix607, 1
  %element661 = extractelement <4 x float> %column660, i32 3
  %product662 = fmul float %element661, %component609
  %dotProduct663 = fadd float %product659, %product662
  %column664 = extractvalue [4 x <4 x float>] %resultMatrix607, 2
  %element665 = extractelement <4 x float> %column664, i32 3
  %product666 = fmul float %element665, %component610
  %dotProduct667 = fadd float %dotProduct663, %product666
  %column668 = extractvalue [4 x <4 x float>] %resultMatrix607, 3
  %element669 = extractelement <4 x float> %column668, i32 3
  %product670 = fmul float %element669, %component611
  %dotProduct671 = fadd float %dotProduct667, %product670
  %205 = insertelement <4 x float> %204, float %dotProduct671, i32 3
  %206 = load <4 x float>* @gl_FragColor
  %gl_FragColor672 = fadd <4 x float> %206, %205
  store <4 x float> %gl_FragColor672, <4 x float>* @gl_FragColor
  br label %ifmerge673

ifmerge673:                                       ; preds = %else281, %then215
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge673
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8}
!gla.inputs = !{!9, !11, !13}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"un34", i32 12, [4 x <4 x float>]* @un34_typeProxy, metadata !4}
!4 = metadata !{i32 3, i32 0, i32 1024, null}
!5 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !4}
!6 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !4}
!7 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !4}
!8 = metadata !{metadata !"um43", i32 12, [4 x <4 x float>]* @um43_typeProxy, metadata !4}
!9 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!11 = metadata !{metadata !"v", i32 1, <4 x float>* @v_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!13 = metadata !{metadata !"u", i32 1, <4 x float>* @u_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}


Bottom IR:
; ModuleID = 'Glslang'

@gl_FragColor = global <4 x float> zeroinitializer
@un34 = external addrspace(2) constant [4 x <4 x float>]
@Color = global <3 x float> zeroinitializer
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@v = global <4 x float> zeroinitializer
@u = global <4 x float> zeroinitializer
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1
  %0 = load <4 x float> addrspace(2)* %gla_constGEP, align 16, !gla.uniform !3
  store <4 x float> %0, <4 x float>* @gl_FragColor, align 16
  %1 = load <3 x float>* @Color, align 16
  %2 = load [3 x <3 x float>] addrspace(2)* @colorTransform, align 16, !gla.uniform !5
  %column = extractvalue [3 x <3 x float>] %2, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %1, <3 x float> %column)
  %column1 = extractvalue [3 x <3 x float>] %2, 1
  %dotres2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %1, <3 x float> %column1)
  %column3 = extractvalue [3 x <3 x float>] %2, 2
  %dotres4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %1, <3 x float> %column3)
  %3 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres, i32 0, float %dotres2, i32 0, float %dotres4, i32 0, float 1.000000e+00, i32 0)
  %gl_FragColor6 = fadd <4 x float> %0, %3
  store <4 x float> %gl_FragColor6, <4 x float>* @gl_FragColor, align 16
  %4 = load [4 x <4 x float>] addrspace(2)* @m, align 16, !gla.uniform !6
  %5 = load [4 x <4 x float>] addrspace(2)* @n, align 16, !gla.uniform !7
  %element1 = extractvalue [4 x <4 x float>] %4, 0
  %element2 = extractvalue [4 x <4 x float>] %5, 0
  %6 = fcmp one <4 x float> %element1, %element2
  %7 = call i1 @llvm.gla.any.v4i1(<4 x i1> %6)
  %element17 = extractvalue [4 x <4 x float>] %4, 1
  %element28 = extractvalue [4 x <4 x float>] %5, 1
  %8 = fcmp one <4 x float> %element17, %element28
  %9 = call i1 @llvm.gla.any.v4i1(<4 x i1> %8)
  %10 = or i1 %7, %9
  %element19 = extractvalue [4 x <4 x float>] %4, 2
  %element210 = extractvalue [4 x <4 x float>] %5, 2
  %11 = fcmp one <4 x float> %element19, %element210
  %12 = call i1 @llvm.gla.any.v4i1(<4 x i1> %11)
  %13 = or i1 %10, %12
  %element111 = extractvalue [4 x <4 x float>] %4, 3
  %element212 = extractvalue [4 x <4 x float>] %5, 3
  %14 = fcmp one <4 x float> %element111, %element212
  %15 = call i1 @llvm.gla.any.v4i1(<4 x i1> %14)
  %16 = or i1 %13, %15
  %17 = load <4 x float>* @v, align 16
  br i1 %16, label %then, label %else

then:                                             ; preds = %entry
  %gl_FragColor13 = fadd <4 x float> %gl_FragColor6, %17
  %.pre = extractelement <4 x float> %17, i32 0
  %.pre675 = extractelement <4 x float> %17, i32 1
  %.pre677 = extractelement <4 x float> %17, i32 2
  %.pre679 = extractelement <4 x float> %17, i32 3
  br label %ifmerge

else:                                             ; preds = %entry
  %component = extractelement <4 x float> %17, i32 0
  %component14 = extractelement <4 x float> %17, i32 1
  %component15 = extractelement <4 x float> %17, i32 2
  %component16 = extractelement <4 x float> %17, i32 3
  %element = extractelement <4 x float> %element1, i32 0
  %product = fmul float %element, %component
  %element20 = extractelement <4 x float> %element17, i32 0
  %product21 = fmul float %element20, %component14
  %dotProduct = fadd float %product, %product21
  %element23 = extractelement <4 x float> %element19, i32 0
  %product24 = fmul float %element23, %component15
  %dotProduct25 = fadd float %product24, %dotProduct
  %element27 = extractelement <4 x float> %element111, i32 0
  %product28 = fmul float %element27, %component16
  %dotProduct29 = fadd float %product28, %dotProduct25
  %element31 = extractelement <4 x float> %element1, i32 1
  %product32 = fmul float %element31, %component
  %element34 = extractelement <4 x float> %element17, i32 1
  %product35 = fmul float %element34, %component14
  %dotProduct36 = fadd float %product32, %product35
  %element38 = extractelement <4 x float> %element19, i32 1
  %product39 = fmul float %element38, %component15
  %dotProduct40 = fadd float %product39, %dotProduct36
  %element42 = extractelement <4 x float> %element111, i32 1
  %product43 = fmul float %element42, %component16
  %dotProduct44 = fadd float %product43, %dotProduct40
  %element46 = extractelement <4 x float> %element1, i32 2
  %product47 = fmul float %element46, %component
  %element49 = extractelement <4 x float> %element17, i32 2
  %product50 = fmul float %element49, %component14
  %dotProduct51 = fadd float %product47, %product50
  %element53 = extractelement <4 x float> %element19, i32 2
  %product54 = fmul float %element53, %component15
  %dotProduct55 = fadd float %product54, %dotProduct51
  %element57 = extractelement <4 x float> %element111, i32 2
  %product58 = fmul float %element57, %component16
  %dotProduct59 = fadd float %product58, %dotProduct55
  %element61 = extractelement <4 x float> %element1, i32 3
  %product62 = fmul float %element61, %component
  %element64 = extractelement <4 x float> %element17, i32 3
  %product65 = fmul float %element64, %component14
  %dotProduct66 = fadd float %product62, %product65
  %element68 = extractelement <4 x float> %element19, i32 3
  %product69 = fmul float %element68, %component15
  %dotProduct70 = fadd float %product69, %dotProduct66
  %element72 = extractelement <4 x float> %element111, i32 3
  %product73 = fmul float %element72, %component16
  %dotProduct74 = fadd float %product73, %dotProduct70
  %18 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct29, i32 0, float %dotProduct44, i32 0, float %dotProduct59, i32 0, float %dotProduct74, i32 0)
  %gl_FragColor75 = fadd <4 x float> %gl_FragColor6, %18
  store <4 x float> %gl_FragColor75, <4 x float>* @gl_FragColor, align 16
  %column76 = fsub <4 x float> %element1, %element2
  %column79 = fsub <4 x float> %element17, %element28
  %column82 = fsub <4 x float> %element19, %element210
  %column85 = fsub <4 x float> %element111, %element212
  %dotres87 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %17, <4 x float> %column76)
  %dotres89 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %17, <4 x float> %column79)
  %dotres91 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %17, <4 x float> %column82)
  %dotres93 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %17, <4 x float> %column85)
  %19 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres87, i32 0, float %dotres89, i32 0, float %dotres91, i32 0, float %dotres93, i32 0)
  %gl_FragColor94 = fadd <4 x float> %gl_FragColor75, %19
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %.pre-phi680 = phi float [ %component16, %else ], [ %.pre679, %then ]
  %.pre-phi678 = phi float [ %component15, %else ], [ %.pre677, %then ]
  %.pre-phi676 = phi float [ %component14, %else ], [ %.pre675, %then ]
  %.pre-phi = phi float [ %component, %else ], [ %.pre, %then ]
  %storemerge674 = phi <4 x float> [ %gl_FragColor94, %else ], [ %gl_FragColor13, %then ]
  store <4 x float> %storemerge674, <4 x float>* @gl_FragColor, align 16
  %20 = load <4 x float>* @u, align 16
  %21 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %20, <4 x i32> <i32 2, i32 3, i32 0, i32 0>)
  %22 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %20, <4 x i32> <i32 3, i32 0, i32 0, i32 1>)
  %23 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %20, <4 x i32> <i32 0, i32 0, i32 1, i32 2>)
  %24 = extractelement <4 x float> %20, i32 0
  %25 = fmul float %.pre-phi, %24
  %26 = extractelement <4 x float> %20, i32 1
  %27 = fmul float %.pre-phi, %26
  %28 = extractelement <4 x float> %20, i32 2
  %29 = fmul float %.pre-phi, %28
  %30 = extractelement <4 x float> %20, i32 3
  %31 = fmul float %.pre-phi, %30
  %32 = fmul float %.pre-phi676, %24
  %33 = fmul float %.pre-phi676, %26
  %34 = fmul float %.pre-phi676, %28
  %35 = fmul float %.pre-phi676, %30
  %36 = fmul float %.pre-phi678, %24
  %37 = fmul float %.pre-phi678, %26
  %38 = fmul float %.pre-phi678, %28
  %39 = fmul float %.pre-phi678, %30
  %40 = fmul float %.pre-phi680, %24
  %41 = fmul float %.pre-phi680, %26
  %42 = fmul float %.pre-phi680, %28
  %43 = fmul float %.pre-phi680, %30
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %25, i32 0, float %27, i32 0, float %29, i32 0, float %31, i32 0)
  %45 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %32, i32 0, float %33, i32 0, float %34, i32 0, float %35, i32 0)
  %46 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %36, i32 0, float %37, i32 0, float %38, i32 0, float %39, i32 0)
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %40, i32 0, float %41, i32 0, float %42, i32 0, float %43, i32 0)
  %48 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %49 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float undef, float undef, float undef>, i32 14, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %50 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, i32 12, float undef, i32 undef, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0)
  %51 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float> undef, i32 15, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, <4 x float> %17, i32 0)
  %column146 = fadd <4 x float> %48, %44
  %column149 = fadd <4 x float> %49, %45
  %column152 = fadd <4 x float> %50, %46
  %column155 = fadd <4 x float> %51, %47
  %column196 = fadd <4 x float> %20, %column146
  %column199 = fadd <4 x float> %23, %column149
  %column202 = fadd <4 x float> %22, %column152
  %column205 = fadd <4 x float> %21, %column155
  %52 = load [4 x <4 x float>] addrspace(2)* @un34, align 16, !gla.uniform !3
  %element2208 = extractvalue [4 x <4 x float>] %52, 0
  %53 = fcmp oeq <4 x float> %column196, %element2208
  %54 = call i1 @llvm.gla.all.v4i1(<4 x i1> %53)
  %element2210 = extractvalue [4 x <4 x float>] %52, 1
  %55 = fcmp oeq <4 x float> %column199, %element2210
  %56 = call i1 @llvm.gla.all.v4i1(<4 x i1> %55)
  %57 = and i1 %54, %56
  %element2212 = extractvalue [4 x <4 x float>] %52, 2
  %58 = fcmp oeq <4 x float> %column202, %element2212
  %59 = call i1 @llvm.gla.all.v4i1(<4 x i1> %58)
  %60 = and i1 %57, %59
  %element2214 = extractvalue [4 x <4 x float>] %52, 3
  %61 = fcmp oeq <4 x float> %column205, %element2214
  %62 = call i1 @llvm.gla.all.v4i1(<4 x i1> %61)
  %63 = and i1 %60, %62
  br i1 %63, label %then215, label %else281

then215:                                          ; preds = %ifmerge
  %element221 = extractelement <4 x float> %column196, i32 0
  %product222 = fmul float %24, %element221
  %element224 = extractelement <4 x float> %column199, i32 0
  %product225 = fmul float %26, %element224
  %dotProduct226 = fadd float %product222, %product225
  %element228 = extractelement <4 x float> %column202, i32 0
  %product229 = fmul float %28, %element228
  %dotProduct230 = fadd float %product229, %dotProduct226
  %element232 = extractelement <4 x float> %column205, i32 0
  %product233 = fmul float %30, %element232
  %dotProduct234 = fadd float %product233, %dotProduct230
  %element236 = extractelement <4 x float> %column196, i32 1
  %product237 = fmul float %24, %element236
  %element239 = extractelement <4 x float> %column199, i32 1
  %product240 = fmul float %26, %element239
  %dotProduct241 = fadd float %product237, %product240
  %element243 = extractelement <4 x float> %column202, i32 1
  %product244 = fmul float %28, %element243
  %dotProduct245 = fadd float %product244, %dotProduct241
  %element247 = extractelement <4 x float> %column205, i32 1
  %product248 = fmul float %30, %element247
  %dotProduct249 = fadd float %product248, %dotProduct245
  %element251 = extractelement <4 x float> %column196, i32 2
  %product252 = fmul float %24, %element251
  %element254 = extractelement <4 x float> %column199, i32 2
  %product255 = fmul float %26, %element254
  %dotProduct256 = fadd float %product252, %product255
  %element258 = extractelement <4 x float> %column202, i32 2
  %product259 = fmul float %28, %element258
  %dotProduct260 = fadd float %product259, %dotProduct256
  %element262 = extractelement <4 x float> %column205, i32 2
  %product263 = fmul float %30, %element262
  %dotProduct264 = fadd float %product263, %dotProduct260
  %element266 = extractelement <4 x float> %column196, i32 3
  %product267 = fmul float %24, %element266
  %element269 = extractelement <4 x float> %column199, i32 3
  %product270 = fmul float %26, %element269
  %dotProduct271 = fadd float %product267, %product270
  %element273 = extractelement <4 x float> %column202, i32 3
  %product274 = fmul float %28, %element273
  %dotProduct275 = fadd float %product274, %dotProduct271
  %element277 = extractelement <4 x float> %column205, i32 3
  %product278 = fmul float %30, %element277
  %dotProduct279 = fadd float %product278, %dotProduct275
  %64 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct234, i32 0, float %dotProduct249, i32 0, float %dotProduct264, i32 0, float %dotProduct279, i32 0)
  br label %ifmerge673

else281:                                          ; preds = %ifmerge
  %65 = load [4 x <4 x float>] addrspace(2)* @um43, align 16, !gla.uniform !8
  %rightColumn282 = extractvalue [4 x <4 x float>] %65, 0
  %leftComp = extractelement <4 x float> %element2208, i32 0
  %rightComp = extractelement <4 x float> %rightColumn282, i32 0
  %product284 = fmul float %leftComp, %rightComp
  %leftComp286 = extractelement <4 x float> %element2210, i32 0
  %rightComp287 = extractelement <4 x float> %rightColumn282, i32 1
  %product288 = fmul float %leftComp286, %rightComp287
  %dotProduct289 = fadd float %product284, %product288
  %leftComp291 = extractelement <4 x float> %element2212, i32 0
  %rightComp292 = extractelement <4 x float> %rightColumn282, i32 2
  %product293 = fmul float %leftComp291, %rightComp292
  %dotProduct294 = fadd float %product293, %dotProduct289
  %leftComp296 = extractelement <4 x float> %element2214, i32 0
  %rightComp297 = extractelement <4 x float> %rightColumn282, i32 3
  %product298 = fmul float %leftComp296, %rightComp297
  %dotProduct299 = fadd float %product298, %dotProduct294
  %leftComp302 = extractelement <4 x float> %element2208, i32 1
  %product304 = fmul float %leftComp302, %rightComp
  %leftComp306 = extractelement <4 x float> %element2210, i32 1
  %product308 = fmul float %leftComp306, %rightComp287
  %dotProduct309 = fadd float %product304, %product308
  %leftComp311 = extractelement <4 x float> %element2212, i32 1
  %product313 = fmul float %leftComp311, %rightComp292
  %dotProduct314 = fadd float %product313, %dotProduct309
  %leftComp316 = extractelement <4 x float> %element2214, i32 1
  %product318 = fmul float %leftComp316, %rightComp297
  %dotProduct319 = fadd float %product318, %dotProduct314
  %leftComp322 = extractelement <4 x float> %element2208, i32 2
  %product324 = fmul float %leftComp322, %rightComp
  %leftComp326 = extractelement <4 x float> %element2210, i32 2
  %product328 = fmul float %leftComp326, %rightComp287
  %dotProduct329 = fadd float %product324, %product328
  %leftComp331 = extractelement <4 x float> %element2212, i32 2
  %product333 = fmul float %leftComp331, %rightComp292
  %dotProduct334 = fadd float %product333, %dotProduct329
  %leftComp336 = extractelement <4 x float> %element2214, i32 2
  %product338 = fmul float %leftComp336, %rightComp297
  %dotProduct339 = fadd float %product338, %dotProduct334
  %leftComp342 = extractelement <4 x float> %element2208, i32 3
  %product344 = fmul float %leftComp342, %rightComp
  %leftComp346 = extractelement <4 x float> %element2210, i32 3
  %product348 = fmul float %leftComp346, %rightComp287
  %dotProduct349 = fadd float %product344, %product348
  %leftComp351 = extractelement <4 x float> %element2212, i32 3
  %product353 = fmul float %leftComp351, %rightComp292
  %dotProduct354 = fadd float %product353, %dotProduct349
  %leftComp356 = extractelement <4 x float> %element2214, i32 3
  %product358 = fmul float %leftComp356, %rightComp297
  %dotProduct359 = fadd float %product358, %dotProduct354
  %rightColumn362 = extractvalue [4 x <4 x float>] %65, 1
  %rightComp365 = extractelement <4 x float> %rightColumn362, i32 0
  %product366 = fmul float %leftComp, %rightComp365
  %rightComp369 = extractelement <4 x float> %rightColumn362, i32 1
  %product370 = fmul float %leftComp286, %rightComp369
  %dotProduct371 = fadd float %product366, %product370
  %rightComp374 = extractelement <4 x float> %rightColumn362, i32 2
  %product375 = fmul float %leftComp291, %rightComp374
  %dotProduct376 = fadd float %product375, %dotProduct371
  %rightComp379 = extractelement <4 x float> %rightColumn362, i32 3
  %product380 = fmul float %leftComp296, %rightComp379
  %dotProduct381 = fadd float %product380, %dotProduct376
  %product386 = fmul float %leftComp302, %rightComp365
  %product390 = fmul float %leftComp306, %rightComp369
  %dotProduct391 = fadd float %product386, %product390
  %product395 = fmul float %leftComp311, %rightComp374
  %dotProduct396 = fadd float %product395, %dotProduct391
  %product400 = fmul float %leftComp316, %rightComp379
  %dotProduct401 = fadd float %product400, %dotProduct396
  %product406 = fmul float %leftComp322, %rightComp365
  %product410 = fmul float %leftComp326, %rightComp369
  %dotProduct411 = fadd float %product406, %product410
  %product415 = fmul float %leftComp331, %rightComp374
  %dotProduct416 = fadd float %product415, %dotProduct411
  %product420 = fmul float %leftComp336, %rightComp379
  %dotProduct421 = fadd float %product420, %dotProduct416
  %product426 = fmul float %leftComp342, %rightComp365
  %product430 = fmul float %leftComp346, %rightComp369
  %dotProduct431 = fadd float %product426, %product430
  %product435 = fmul float %leftComp351, %rightComp374
  %dotProduct436 = fadd float %product435, %dotProduct431
  %product440 = fmul float %leftComp356, %rightComp379
  %dotProduct441 = fadd float %product440, %dotProduct436
  %rightColumn444 = extractvalue [4 x <4 x float>] %65, 2
  %rightComp447 = extractelement <4 x float> %rightColumn444, i32 0
  %product448 = fmul float %leftComp, %rightComp447
  %rightComp451 = extractelement <4 x float> %rightColumn444, i32 1
  %product452 = fmul float %leftComp286, %rightComp451
  %dotProduct453 = fadd float %product448, %product452
  %rightComp456 = extractelement <4 x float> %rightColumn444, i32 2
  %product457 = fmul float %leftComp291, %rightComp456
  %dotProduct458 = fadd float %product457, %dotProduct453
  %rightComp461 = extractelement <4 x float> %rightColumn444, i32 3
  %product462 = fmul float %leftComp296, %rightComp461
  %dotProduct463 = fadd float %product462, %dotProduct458
  %product468 = fmul float %leftComp302, %rightComp447
  %product472 = fmul float %leftComp306, %rightComp451
  %dotProduct473 = fadd float %product468, %product472
  %product477 = fmul float %leftComp311, %rightComp456
  %dotProduct478 = fadd float %product477, %dotProduct473
  %product482 = fmul float %leftComp316, %rightComp461
  %dotProduct483 = fadd float %product482, %dotProduct478
  %product488 = fmul float %leftComp322, %rightComp447
  %product492 = fmul float %leftComp326, %rightComp451
  %dotProduct493 = fadd float %product488, %product492
  %product497 = fmul float %leftComp331, %rightComp456
  %dotProduct498 = fadd float %product497, %dotProduct493
  %product502 = fmul float %leftComp336, %rightComp461
  %dotProduct503 = fadd float %product502, %dotProduct498
  %product508 = fmul float %leftComp342, %rightComp447
  %product512 = fmul float %leftComp346, %rightComp451
  %dotProduct513 = fadd float %product508, %product512
  %product517 = fmul float %leftComp351, %rightComp456
  %dotProduct518 = fadd float %product517, %dotProduct513
  %product522 = fmul float %leftComp356, %rightComp461
  %dotProduct523 = fadd float %product522, %dotProduct518
  %rightColumn526 = extractvalue [4 x <4 x float>] %65, 3
  %rightComp529 = extractelement <4 x float> %rightColumn526, i32 0
  %product530 = fmul float %leftComp, %rightComp529
  %rightComp533 = extractelement <4 x float> %rightColumn526, i32 1
  %product534 = fmul float %leftComp286, %rightComp533
  %dotProduct535 = fadd float %product530, %product534
  %rightComp538 = extractelement <4 x float> %rightColumn526, i32 2
  %product539 = fmul float %leftComp291, %rightComp538
  %dotProduct540 = fadd float %product539, %dotProduct535
  %rightComp543 = extractelement <4 x float> %rightColumn526, i32 3
  %product544 = fmul float %leftComp296, %rightComp543
  %dotProduct545 = fadd float %product544, %dotProduct540
  %product550 = fmul float %leftComp302, %rightComp529
  %product554 = fmul float %leftComp306, %rightComp533
  %dotProduct555 = fadd float %product550, %product554
  %product559 = fmul float %leftComp311, %rightComp538
  %dotProduct560 = fadd float %product559, %dotProduct555
  %product564 = fmul float %leftComp316, %rightComp543
  %dotProduct565 = fadd float %product564, %dotProduct560
  %product570 = fmul float %leftComp322, %rightComp529
  %product574 = fmul float %leftComp326, %rightComp533
  %dotProduct575 = fadd float %product570, %product574
  %product579 = fmul float %leftComp331, %rightComp538
  %dotProduct580 = fadd float %product579, %dotProduct575
  %product584 = fmul float %leftComp336, %rightComp543
  %dotProduct585 = fadd float %product584, %dotProduct580
  %product590 = fmul float %leftComp342, %rightComp529
  %product594 = fmul float %leftComp346, %rightComp533
  %dotProduct595 = fadd float %product590, %product594
  %product599 = fmul float %leftComp351, %rightComp538
  %dotProduct600 = fadd float %product599, %dotProduct595
  %product604 = fmul float %leftComp356, %rightComp543
  %dotProduct605 = fadd float %product604, %dotProduct600
  %product614 = fmul float %.pre-phi, %dotProduct299
  %product617 = fmul float %.pre-phi676, %dotProduct381
  %dotProduct618 = fadd float %product614, %product617
  %product621 = fmul float %.pre-phi678, %dotProduct463
  %dotProduct622 = fadd float %product621, %dotProduct618
  %product625 = fmul float %.pre-phi680, %dotProduct545
  %dotProduct626 = fadd float %product625, %dotProduct622
  %product629 = fmul float %.pre-phi, %dotProduct319
  %product632 = fmul float %.pre-phi676, %dotProduct401
  %dotProduct633 = fadd float %product629, %product632
  %product636 = fmul float %.pre-phi678, %dotProduct483
  %dotProduct637 = fadd float %product636, %dotProduct633
  %product640 = fmul float %.pre-phi680, %dotProduct565
  %dotProduct641 = fadd float %product640, %dotProduct637
  %product644 = fmul float %.pre-phi, %dotProduct339
  %product647 = fmul float %.pre-phi676, %dotProduct421
  %dotProduct648 = fadd float %product644, %product647
  %product651 = fmul float %.pre-phi678, %dotProduct503
  %dotProduct652 = fadd float %product651, %dotProduct648
  %product655 = fmul float %.pre-phi680, %dotProduct585
  %dotProduct656 = fadd float %product655, %dotProduct652
  %product659 = fmul float %.pre-phi, %dotProduct359
  %product662 = fmul float %.pre-phi676, %dotProduct441
  %dotProduct663 = fadd float %product659, %product662
  %product666 = fmul float %.pre-phi678, %dotProduct523
  %dotProduct667 = fadd float %product666, %dotProduct663
  %product670 = fmul float %.pre-phi680, %dotProduct605
  %dotProduct671 = fadd float %product670, %dotProduct667
  %66 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct626, i32 0, float %dotProduct641, i32 0, float %dotProduct656, i32 0, float %dotProduct671, i32 0)
  br label %ifmerge673

ifmerge673:                                       ; preds = %else281, %then215
  %.pn = phi <4 x float> [ %64, %then215 ], [ %66, %else281 ]
  %storemerge = fadd <4 x float> %storemerge674, %.pn
  store <4 x float> %storemerge, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge673
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float>, i32, float, i32, float, i32, float, i32, <4 x float>, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8}
!gla.inputs = !{!9, !11, !13}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"un34", i32 12, [4 x <4 x float>]* @un34_typeProxy, metadata !4}
!4 = metadata !{i32 3, i32 0, i32 1024, null}
!5 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !4}
!6 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !4}
!7 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !4}
!8 = metadata !{metadata !"um43", i32 12, [4 x <4 x float>]* @um43_typeProxy, metadata !4}
!9 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!11 = metadata !{metadata !"v", i32 1, <4 x float>* @v_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!13 = metadata !{metadata !"u", i32 1, <4 x float>* @u_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}
#version 130
// LunarGOO output
uniform mat4 un34;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
uniform mat4 um43;
in vec3 Color;
in vec4 v;
in vec4 u;
const float L_a = 1.0;
const float L_1e = 0.0;
const vec4 L_20 = vec4(0.0, 0.0, 0.0, 0.0);
const vec4 L_22 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
	float _pre_phi_c1;
	float _pre_phi_c2;
	float _pre_phi_c3;
	float _pre_phi_c4;
	vec4 storemerge_c5;
	vec4 _pn_c6;
	gl_FragColor = un34[1];
	float dotres_c7 = dot(Color, colorTransform[0]);
	float dotres_c8 = dot(Color, colorTransform[1]);
	float dotres_c9 = dot(Color, colorTransform[2]);
	vec4 L_b = vec4(dotres_c7, dotres_c8, dotres_c9, L_a);
	gl_FragColor = (L_b + un34[1]);
	bool L_c = any((notEqual(m[0], n[0])));
	bool L_d = any((notEqual(m[1], n[1])));
	bool L_e = any((notEqual(m[2], n[2])));
	bool L_f = any((notEqual(m[3], n[3])));
	if ((((L_c || L_d) || L_e) || L_f)) {
		_pre_phi_c1 = v.w;
		_pre_phi_c2 = v.z;
		_pre_phi_c3 = v.y;
		_pre_phi_c4 = v.x;
		storemerge_c5 = ((L_b + un34[1]) + v);
	} else {
		vec4 L_10 = vec4(((((m[0].x * v.x) + (m[1].x * v.y)) + (m[2].x * v.z)) + (m[3].x * v.w)), ((((m[0].y * v.x) + (m[1].y * v.y)) + (m[2].y * v.z)) + (m[3].y * v.w)), ((((m[0].z * v.x) + (m[1].z * v.y)) + (m[2].z * v.z)) + (m[3].z * v.w)), ((((m[0].w * v.x) + (m[1].w * v.y)) + (m[2].w * v.z)) + (m[3].w * v.w)));
		vec4 Ll_FragColor_c10 = (L_b + un34[1]) + L_10;
		gl_FragColor = Ll_FragColor_c10;
		float dotres_c11 = dot(v, (m[0] - n[0]));
		float dotres_c12 = dot(v, (m[1] - n[1]));
		float dotres_c13 = dot(v, (m[2] - n[2]));
		float dotres_c14 = dot(v, (m[3] - n[3]));
		vec4 L_16 = vec4(dotres_c11, dotres_c12, dotres_c13, dotres_c14);
		_pre_phi_c1 = v.w;
		_pre_phi_c2 = v.z;
		_pre_phi_c3 = v.y;
		_pre_phi_c4 = v.x;
		storemerge_c5 = (L_16 + Ll_FragColor_c10);
	}
	
	gl_FragColor = storemerge_c5;
	vec4 L_17 = u.zwxx;
	vec4 L_18 = u.wxxy;
	vec4 L_19 = u.xxyz;
	vec4 L_1a = vec4((_pre_phi_c4 * u.x), (_pre_phi_c4 * u.y), (_pre_phi_c4 * u.z), (_pre_phi_c4 * u.w));
	vec4 L_1b = vec4((_pre_phi_c3 * u.x), (_pre_phi_c3 * u.y), (_pre_phi_c3 * u.z), (_pre_phi_c3 * u.w));
	vec4 L_1c = vec4((_pre_phi_c2 * u.x), (_pre_phi_c2 * u.y), (_pre_phi_c2 * u.z), (_pre_phi_c2 * u.w));
	vec4 L_1d = vec4((_pre_phi_c1 * u.x), (_pre_phi_c1 * u.y), (_pre_phi_c1 * u.z), (_pre_phi_c1 * u.w));
	vec4 L_1f = vec4(_pre_phi_c4, L_1e, L_1e, L_1e);
	vec4 L_21 = L_20;
	L_21.yzw = vec3(_pre_phi_c4, L_1e, L_1e);
	vec4 L_23 = L_22;
	L_23.zw = vec2(_pre_phi_c4, L_1e);
	vec4 L_24 = vec4(L_1e, L_1e, L_1e, v.x);
	bool L_25 = all((equal(((L_1a + L_1f) + u), un34[0])));
	bool L_26 = all((equal(((L_1b + L_21) + L_19), un34[1])));
	bool L_27 = all((equal(((L_1c + L_23) + L_18), un34[2])));
	bool L_28 = all((equal(((L_1d + L_24) + L_17), un34[3])));
	if ((((L_25 && L_26) && L_27) && L_28)) {
		float dotProduct_c15 = (((((L_1a + L_1f) + u).x * u.x) + (((L_1b + L_21) + L_19).x * u.y)) + (((L_1c + L_23) + L_18).x * u.z)) + (((L_1d + L_24) + L_17).x * u.w);
		float dotProduct_c16 = (((((L_1a + L_1f) + u).y * u.x) + (((L_1b + L_21) + L_19).y * u.y)) + (((L_1c + L_23) + L_18).y * u.z)) + (((L_1d + L_24) + L_17).y * u.w);
		float dotProduct_c17 = (((((L_1a + L_1f) + u).z * u.x) + (((L_1b + L_21) + L_19).z * u.y)) + (((L_1c + L_23) + L_18).z * u.z)) + (((L_1d + L_24) + L_17).z * u.w);
		float dotProduct_c18 = (((((L_1a + L_1f) + u).w * u.x) + (((L_1b + L_21) + L_19).w * u.y)) + (((L_1c + L_23) + L_18).w * u.z)) + (((L_1d + L_24) + L_17).w * u.w);
		vec4 L_2d = vec4(dotProduct_c15, dotProduct_c16, dotProduct_c17, dotProduct_c18);
		_pn_c6 = L_2d;
	} else {
		float product_c19 = ((((um43[0].x * un34[0].x) + (um43[0].y * un34[1].x)) + (um43[0].z * un34[2].x)) + (um43[0].w * un34[3].x)) * _pre_phi_c4;
		float product_c20 = ((((um43[1].x * un34[0].x) + (um43[1].y * un34[1].x)) + (um43[1].z * un34[2].x)) + (um43[1].w * un34[3].x)) * _pre_phi_c3;
		float product_c21 = ((((um43[2].x * un34[0].x) + (um43[2].y * un34[1].x)) + (um43[2].z * un34[2].x)) + (um43[2].w * un34[3].x)) * _pre_phi_c2;
		float product_c22 = ((((um43[3].x * un34[0].x) + (um43[3].y * un34[1].x)) + (um43[3].z * un34[2].x)) + (um43[3].w * un34[3].x)) * _pre_phi_c1;
		float product_c23 = ((((um43[0].x * un34[0].y) + (um43[0].y * un34[1].y)) + (um43[0].z * un34[2].y)) + (um43[0].w * un34[3].y)) * _pre_phi_c4;
		float product_c24 = ((((um43[1].x * un34[0].y) + (um43[1].y * un34[1].y)) + (um43[1].z * un34[2].y)) + (um43[1].w * un34[3].y)) * _pre_phi_c3;
		float product_c25 = ((((um43[2].x * un34[0].y) + (um43[2].y * un34[1].y)) + (um43[2].z * un34[2].y)) + (um43[2].w * un34[3].y)) * _pre_phi_c2;
		float product_c26 = ((((um43[3].x * un34[0].y) + (um43[3].y * un34[1].y)) + (um43[3].z * un34[2].y)) + (um43[3].w * un34[3].y)) * _pre_phi_c1;
		float product_c27 = ((((um43[0].x * un34[0].z) + (um43[0].y * un34[1].z)) + (um43[0].z * un34[2].z)) + (um43[0].w * un34[3].z)) * _pre_phi_c4;
		float product_c28 = ((((um43[1].x * un34[0].z) + (um43[1].y * un34[1].z)) + (um43[1].z * un34[2].z)) + (um43[1].w * un34[3].z)) * _pre_phi_c3;
		float product_c29 = ((((um43[2].x * un34[0].z) + (um43[2].y * un34[1].z)) + (um43[2].z * un34[2].z)) + (um43[2].w * un34[3].z)) * _pre_phi_c2;
		float product_c30 = ((((um43[3].x * un34[0].z) + (um43[3].y * un34[1].z)) + (um43[3].z * un34[2].z)) + (um43[3].w * un34[3].z)) * _pre_phi_c1;
		float product_c31 = ((((um43[0].x * un34[0].w) + (um43[0].y * un34[1].w)) + (um43[0].z * un34[2].w)) + (um43[0].w * un34[3].w)) * _pre_phi_c4;
		float product_c32 = ((((um43[1].x * un34[0].w) + (um43[1].y * un34[1].w)) + (um43[1].z * un34[2].w)) + (um43[1].w * un34[3].w)) * _pre_phi_c3;
		float product_c33 = ((((um43[2].x * un34[0].w) + (um43[2].y * un34[1].w)) + (um43[2].z * un34[2].w)) + (um43[2].w * un34[3].w)) * _pre_phi_c2;
		float product_c34 = ((((um43[3].x * un34[0].w) + (um43[3].y * un34[1].w)) + (um43[3].z * un34[2].w)) + (um43[3].w * un34[3].w)) * _pre_phi_c1;
		vec4 L_3e = vec4((((product_c19 + product_c20) + product_c21) + product_c22), (((product_c23 + product_c24) + product_c25) + product_c26), (((product_c27 + product_c28) + product_c29) + product_c30), (((product_c31 + product_c32) + product_c33) + product_c34));
		_pn_c6 = L_3e;
	}
	
	gl_FragColor = (_pn_c6 + storemerge_c5);
	
}

#version 130
// LunarGOO output
uniform mat4 un34;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
uniform mat4 um43;
in vec3 Color;
in vec4 v;
in vec4 u;
const float L_a = 1.0;
const float L_1e = 0.0;
const vec4 L_20 = vec4(0.0, 0.0, 0.0, 0.0);
const vec4 L_22 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
	vec4 storemerge_c1;
	float _pre_phi_c2;
	float _pre_phi_c3;
	float _pre_phi_c4;
	float _pre_phi_c5;
	vec4 _pn_c6;
	gl_FragColor = un34[1];
	float dotres_c7 = dot(Color, colorTransform[0]);
	float dotres_c8 = dot(Color, colorTransform[1]);
	float dotres_c9 = dot(Color, colorTransform[2]);
	vec4 L_b = vec4(dotres_c7, dotres_c8, dotres_c9, L_a);
	gl_FragColor = (L_b + un34[1]);
	bool L_c10 = any((notEqual(m[0], n[0])));
	bool L_d_c11 = any((notEqual(m[1], n[1])));
	bool L_e_c12 = any((notEqual(m[2], n[2])));
	bool L_f_c13 = any((notEqual(m[3], n[3])));
	if ((((L_c10 || L_d_c11) || L_e_c12) || L_f_c13)) {
		storemerge_c1 = ((L_b + un34[1]) + v);
		_pre_phi_c2 = v.x;
		_pre_phi_c3 = v.y;
		_pre_phi_c4 = v.z;
		_pre_phi_c5 = v.w;
	} else {
		vec4 L_10 = vec4(((((m[0].x * v.x) + (m[1].x * v.y)) + (m[2].x * v.z)) + (m[3].x * v.w)), ((((m[0].y * v.x) + (m[1].y * v.y)) + (m[2].y * v.z)) + (m[3].y * v.w)), ((((m[0].z * v.x) + (m[1].z * v.y)) + (m[2].z * v.z)) + (m[3].z * v.w)), ((((m[0].w * v.x) + (m[1].w * v.y)) + (m[2].w * v.z)) + (m[3].w * v.w)));
		vec4 Ll_FragColor_c14 = (L_b + un34[1]) + L_10;
		gl_FragColor = Ll_FragColor_c14;
		float dotres_c15 = dot(v, (m[0] - n[0]));
		float dotres_c16 = dot(v, (m[1] - n[1]));
		float dotres_c17 = dot(v, (m[2] - n[2]));
		float dotres_c18 = dot(v, (m[3] - n[3]));
		vec4 L_16 = vec4(dotres_c15, dotres_c16, dotres_c17, dotres_c18);
		storemerge_c1 = (L_16 + Ll_FragColor_c14);
		_pre_phi_c2 = v.x;
		_pre_phi_c3 = v.y;
		_pre_phi_c4 = v.z;
		_pre_phi_c5 = v.w;
	}
	
	gl_FragColor = storemerge_c1;
	vec4 L_17 = u.xxyz;
	vec4 L_18 = u.wxxy;
	vec4 L_19 = u.zwxx;
	vec4 L_1a = vec4((_pre_phi_c2 * u.x), (_pre_phi_c2 * u.y), (_pre_phi_c2 * u.z), (_pre_phi_c2 * u.w));
	vec4 L_1b = vec4((_pre_phi_c3 * u.x), (_pre_phi_c3 * u.y), (_pre_phi_c3 * u.z), (_pre_phi_c3 * u.w));
	vec4 L_1c = vec4((_pre_phi_c4 * u.x), (_pre_phi_c4 * u.y), (_pre_phi_c4 * u.z), (_pre_phi_c4 * u.w));
	vec4 L_1d = vec4((_pre_phi_c5 * u.x), (_pre_phi_c5 * u.y), (_pre_phi_c5 * u.z), (_pre_phi_c5 * u.w));
	vec4 L_1f = vec4(_pre_phi_c2, L_1e, L_1e, L_1e);
	vec4 L_21 = L_20;
	L_21.yzw = vec3(_pre_phi_c2, L_1e, L_1e);
	vec4 L_23 = L_22;
	L_23.zw = vec2(_pre_phi_c2, L_1e);
	vec4 L_24 = vec4(L_1e, L_1e, L_1e, v.x);
	bool L_uc19 = all((equal(((L_1a + L_1f) + u), un34[0])));
	bool L_uc20 = all((equal(((L_1b + L_21) + L_17), un34[1])));
	bool L_uc21 = all((equal(((L_1c + L_23) + L_18), un34[2])));
	bool L_uc22 = all((equal(((L_1d + L_24) + L_19), un34[3])));
	if ((((L_uc19 && L_uc20) && L_uc21) && L_uc22)) {
		float L_29 = (((((_pre_phi_c2 * u.x) + _pre_phi_c2) + u.x) * u.x) + (((_pre_phi_c3 * u.x) + u.x) * u.y)) + (((_pre_phi_c4 * u.x) + u.w) * u.z);
		float L_2a = (((((_pre_phi_c3 * u.y) + _pre_phi_c2) + u.x) * u.y) + (((_pre_phi_c2 * u.y) + u.y) * u.x)) + (((_pre_phi_c4 * u.y) + u.x) * u.z);
		float L_2b = ((((_pre_phi_c2 * u.z) + u.z) * u.x) + (((_pre_phi_c3 * u.z) + u.y) * u.y)) + ((((_pre_phi_c4 * u.z) + _pre_phi_c2) + u.x) * u.z);
		float dotProduct_c23 = (((((_pre_phi_c2 * u.w) + u.w) * u.x) + (((_pre_phi_c3 * u.w) + u.z) * u.y)) + (((_pre_phi_c4 * u.w) + u.y) * u.z)) + ((((_pre_phi_c5 * u.w) + v.x) + u.x) * u.w);
		vec4 L_2d = vec4(((((_pre_phi_c5 * u.x) + u.z) * u.w) + L_29), ((((_pre_phi_c5 * u.y) + u.w) * u.w) + L_2a), ((((_pre_phi_c5 * u.z) + u.x) * u.w) + L_2b), dotProduct_c23);
		_pn_c6 = L_2d;
	} else {
		float product_c24 = ((((um43[0].x * un34[0].x) + (um43[0].y * un34[1].x)) + (um43[0].z * un34[2].x)) + (um43[0].w * un34[3].x)) * _pre_phi_c2;
		float product_c25 = ((((um43[1].x * un34[0].x) + (um43[1].y * un34[1].x)) + (um43[1].z * un34[2].x)) + (um43[1].w * un34[3].x)) * _pre_phi_c3;
		float product_c26 = ((((um43[2].x * un34[0].x) + (um43[2].y * un34[1].x)) + (um43[2].z * un34[2].x)) + (um43[2].w * un34[3].x)) * _pre_phi_c4;
		float product_c27 = ((((um43[3].x * un34[0].x) + (um43[3].y * un34[1].x)) + (um43[3].z * un34[2].x)) + (um43[3].w * un34[3].x)) * _pre_phi_c5;
		float product_c28 = ((((um43[0].x * un34[0].y) + (um43[0].y * un34[1].y)) + (um43[0].z * un34[2].y)) + (um43[0].w * un34[3].y)) * _pre_phi_c2;
		float product_c29 = ((((um43[1].x * un34[0].y) + (um43[1].y * un34[1].y)) + (um43[1].z * un34[2].y)) + (um43[1].w * un34[3].y)) * _pre_phi_c3;
		float product_c30 = ((((um43[2].x * un34[0].y) + (um43[2].y * un34[1].y)) + (um43[2].z * un34[2].y)) + (um43[2].w * un34[3].y)) * _pre_phi_c4;
		float product_c31 = ((((um43[3].x * un34[0].y) + (um43[3].y * un34[1].y)) + (um43[3].z * un34[2].y)) + (um43[3].w * un34[3].y)) * _pre_phi_c5;
		float product_c32 = ((((um43[0].x * un34[0].z) + (um43[0].y * un34[1].z)) + (um43[0].z * un34[2].z)) + (um43[0].w * un34[3].z)) * _pre_phi_c2;
		float product_c33 = ((((um43[1].x * un34[0].z) + (um43[1].y * un34[1].z)) + (um43[1].z * un34[2].z)) + (um43[1].w * un34[3].z)) * _pre_phi_c3;
		float product_c34 = ((((um43[2].x * un34[0].z) + (um43[2].y * un34[1].z)) + (um43[2].z * un34[2].z)) + (um43[2].w * un34[3].z)) * _pre_phi_c4;
		float product_c35 = ((((um43[3].x * un34[0].z) + (um43[3].y * un34[1].z)) + (um43[3].z * un34[2].z)) + (um43[3].w * un34[3].z)) * _pre_phi_c5;
		float product_c36 = ((((um43[0].x * un34[0].w) + (um43[0].y * un34[1].w)) + (um43[0].z * un34[2].w)) + (um43[0].w * un34[3].w)) * _pre_phi_c2;
		float product_c37 = ((((um43[1].x * un34[0].w) + (um43[1].y * un34[1].w)) + (um43[1].z * un34[2].w)) + (um43[1].w * un34[3].w)) * _pre_phi_c3;
		float product_c38 = ((((um43[2].x * un34[0].w) + (um43[2].y * un34[1].w)) + (um43[2].z * un34[2].w)) + (um43[2].w * un34[3].w)) * _pre_phi_c4;
		float product_c39 = ((((um43[3].x * un34[0].w) + (um43[3].y * un34[1].w)) + (um43[3].z * un34[2].w)) + (um43[3].w * un34[3].w)) * _pre_phi_c5;
		vec4 L_3e = vec4((((product_c24 + product_c25) + product_c26) + product_c27), (((product_c28 + product_c29) + product_c30) + product_c31), (((product_c32 + product_c33) + product_c34) + product_c35), (((product_c36 + product_c37) + product_c38) + product_c39));
		_pn_c6 = L_3e;
	}
	
	gl_FragColor = (_pn_c6 + storemerge_c1);
	
}

