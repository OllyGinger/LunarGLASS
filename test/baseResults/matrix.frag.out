
Top IR:
; ModuleID = 'Glslang'

@gl_FragColor = global <4 x float> zeroinitializer
@un34 = external addrspace(2) constant [4 x <4 x float>]
@Color = global <3 x float> zeroinitializer
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@v = global <4 x float> zeroinitializer
@u = global <4 x float> zeroinitializer
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %0 = alloca <4 x float>
  %1 = alloca <4 x float>
  %2 = alloca [4 x <4 x float>]
  %3 = alloca <4 x float>
  %4 = alloca [4 x <4 x float>]
  %m34160 = alloca [4 x <4 x float>]
  %5 = alloca [4 x <4 x float>]
  %m34122 = alloca [4 x <4 x float>]
  %m3498 = alloca [4 x <4 x float>]
  %m34 = alloca [4 x <4 x float>]
  %6 = alloca <4 x float>
  %7 = alloca [4 x <4 x float>]
  %8 = alloca <4 x float>
  %gl_FragColor6 = alloca <4 x float>
  %9 = alloca <3 x float>
  %gl_FragColor = alloca <4 x float>
  %10 = load <4 x float> addrspace(2)* getelementptr inbounds ([4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1), !gla.uniform !3
  %11 = load <4 x float>* %gl_FragColor
  %12 = extractelement <4 x float> %10, i32 0
  %13 = insertelement <4 x float> %11, float %12, i32 0
  %14 = extractelement <4 x float> %10, i32 1
  %15 = insertelement <4 x float> %13, float %14, i32 1
  %16 = extractelement <4 x float> %10, i32 2
  %17 = insertelement <4 x float> %15, float %16, i32 2
  %18 = extractelement <4 x float> %10, i32 3
  %gl_FragColor1 = insertelement <4 x float> %17, float %18, i32 3
  store <4 x float> %gl_FragColor1, <4 x float>* @gl_FragColor
  %19 = load <3 x float>* @Color
  %20 = load [3 x <3 x float>] addrspace(2)* @colorTransform, !gla.uniform !5
  %21 = load <3 x float>* %9
  %column = extractvalue [3 x <3 x float>] %20, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %19, <3 x float> %column)
  %22 = insertelement <3 x float> %21, float %dotres, i32 0
  %column2 = extractvalue [3 x <3 x float>] %20, 1
  %dotres3 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %19, <3 x float> %column2)
  %23 = insertelement <3 x float> %22, float %dotres3, i32 1
  %column4 = extractvalue [3 x <3 x float>] %20, 2
  %dotres5 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %19, <3 x float> %column4)
  %24 = insertelement <3 x float> %23, float %dotres5, i32 2
  %25 = load <4 x float>* %gl_FragColor6
  %26 = extractelement <3 x float> %24, i32 0
  %27 = insertelement <4 x float> %25, float %26, i32 0
  %28 = extractelement <3 x float> %24, i32 1
  %29 = insertelement <4 x float> %27, float %28, i32 1
  %30 = extractelement <3 x float> %24, i32 2
  %31 = insertelement <4 x float> %29, float %30, i32 2
  %32 = insertelement <4 x float> %31, float 1.000000e+00, i32 3
  %33 = load <4 x float>* @gl_FragColor
  %gl_FragColor7 = fadd <4 x float> %33, %32
  store <4 x float> %gl_FragColor7, <4 x float>* @gl_FragColor
  %34 = load [4 x <4 x float>] addrspace(2)* @m, !gla.uniform !6
  %35 = load [4 x <4 x float>] addrspace(2)* @n, !gla.uniform !7
  %element1 = extractvalue [4 x <4 x float>] %34, 0
  %element2 = extractvalue [4 x <4 x float>] %35, 0
  %36 = fcmp one <4 x float> %element1, %element2
  %comp = call i1 @llvm.gla.any.v4i1(<4 x i1> %36)
  %element18 = extractvalue [4 x <4 x float>] %34, 1
  %element29 = extractvalue [4 x <4 x float>] %35, 1
  %37 = fcmp one <4 x float> %element18, %element29
  %comp10 = call i1 @llvm.gla.any.v4i1(<4 x i1> %37)
  %38 = or i1 %comp, %comp10
  %element111 = extractvalue [4 x <4 x float>] %34, 2
  %element212 = extractvalue [4 x <4 x float>] %35, 2
  %39 = fcmp one <4 x float> %element111, %element212
  %comp13 = call i1 @llvm.gla.any.v4i1(<4 x i1> %39)
  %40 = or i1 %38, %comp13
  %element114 = extractvalue [4 x <4 x float>] %34, 3
  %element215 = extractvalue [4 x <4 x float>] %35, 3
  %41 = fcmp one <4 x float> %element114, %element215
  %comp16 = call i1 @llvm.gla.any.v4i1(<4 x i1> %41)
  %42 = or i1 %40, %comp16
  br i1 %42, label %then, label %else

then:                                             ; preds = %entry
  %43 = load <4 x float>* @v
  %44 = load <4 x float>* @gl_FragColor
  %gl_FragColor17 = fadd <4 x float> %44, %43
  store <4 x float> %gl_FragColor17, <4 x float>* @gl_FragColor
  br label %ifmerge

else:                                             ; preds = %entry
  %45 = load [4 x <4 x float>] addrspace(2)* @m, !gla.uniform !6
  %46 = load <4 x float>* @v
  %47 = load <4 x float>* %8
  %component = extractelement <4 x float> %46, i32 0
  %component18 = extractelement <4 x float> %46, i32 1
  %component19 = extractelement <4 x float> %46, i32 2
  %component20 = extractelement <4 x float> %46, i32 3
  %column21 = extractvalue [4 x <4 x float>] %45, 0
  %element = extractelement <4 x float> %column21, i32 0
  %product = fmul float %element, %component
  %column22 = extractvalue [4 x <4 x float>] %45, 1
  %element23 = extractelement <4 x float> %column22, i32 0
  %product24 = fmul float %element23, %component18
  %dotProduct = fadd float %product, %product24
  %column25 = extractvalue [4 x <4 x float>] %45, 2
  %element26 = extractelement <4 x float> %column25, i32 0
  %product27 = fmul float %element26, %component19
  %dotProduct28 = fadd float %dotProduct, %product27
  %column29 = extractvalue [4 x <4 x float>] %45, 3
  %element30 = extractelement <4 x float> %column29, i32 0
  %product31 = fmul float %element30, %component20
  %dotProduct32 = fadd float %dotProduct28, %product31
  %48 = insertelement <4 x float> %47, float %dotProduct32, i32 0
  %column33 = extractvalue [4 x <4 x float>] %45, 0
  %element34 = extractelement <4 x float> %column33, i32 1
  %product35 = fmul float %element34, %component
  %column36 = extractvalue [4 x <4 x float>] %45, 1
  %element37 = extractelement <4 x float> %column36, i32 1
  %product38 = fmul float %element37, %component18
  %dotProduct39 = fadd float %product35, %product38
  %column40 = extractvalue [4 x <4 x float>] %45, 2
  %element41 = extractelement <4 x float> %column40, i32 1
  %product42 = fmul float %element41, %component19
  %dotProduct43 = fadd float %dotProduct39, %product42
  %column44 = extractvalue [4 x <4 x float>] %45, 3
  %element45 = extractelement <4 x float> %column44, i32 1
  %product46 = fmul float %element45, %component20
  %dotProduct47 = fadd float %dotProduct43, %product46
  %49 = insertelement <4 x float> %48, float %dotProduct47, i32 1
  %column48 = extractvalue [4 x <4 x float>] %45, 0
  %element49 = extractelement <4 x float> %column48, i32 2
  %product50 = fmul float %element49, %component
  %column51 = extractvalue [4 x <4 x float>] %45, 1
  %element52 = extractelement <4 x float> %column51, i32 2
  %product53 = fmul float %element52, %component18
  %dotProduct54 = fadd float %product50, %product53
  %column55 = extractvalue [4 x <4 x float>] %45, 2
  %element56 = extractelement <4 x float> %column55, i32 2
  %product57 = fmul float %element56, %component19
  %dotProduct58 = fadd float %dotProduct54, %product57
  %column59 = extractvalue [4 x <4 x float>] %45, 3
  %element60 = extractelement <4 x float> %column59, i32 2
  %product61 = fmul float %element60, %component20
  %dotProduct62 = fadd float %dotProduct58, %product61
  %50 = insertelement <4 x float> %49, float %dotProduct62, i32 2
  %column63 = extractvalue [4 x <4 x float>] %45, 0
  %element64 = extractelement <4 x float> %column63, i32 3
  %product65 = fmul float %element64, %component
  %column66 = extractvalue [4 x <4 x float>] %45, 1
  %element67 = extractelement <4 x float> %column66, i32 3
  %product68 = fmul float %element67, %component18
  %dotProduct69 = fadd float %product65, %product68
  %column70 = extractvalue [4 x <4 x float>] %45, 2
  %element71 = extractelement <4 x float> %column70, i32 3
  %product72 = fmul float %element71, %component19
  %dotProduct73 = fadd float %dotProduct69, %product72
  %column74 = extractvalue [4 x <4 x float>] %45, 3
  %element75 = extractelement <4 x float> %column74, i32 3
  %product76 = fmul float %element75, %component20
  %dotProduct77 = fadd float %dotProduct73, %product76
  %51 = insertelement <4 x float> %50, float %dotProduct77, i32 3
  %52 = load <4 x float>* @gl_FragColor
  %gl_FragColor78 = fadd <4 x float> %52, %51
  store <4 x float> %gl_FragColor78, <4 x float>* @gl_FragColor
  %53 = load <4 x float>* @v
  %54 = load [4 x <4 x float>] addrspace(2)* @m, !gla.uniform !6
  %55 = load [4 x <4 x float>] addrspace(2)* @n, !gla.uniform !7
  %56 = load [4 x <4 x float>]* %7
  %leftColumn = extractvalue [4 x <4 x float>] %54, 0
  %rightColumn = extractvalue [4 x <4 x float>] %55, 0
  %column79 = fsub <4 x float> %leftColumn, %rightColumn
  %57 = insertvalue [4 x <4 x float>] %56, <4 x float> %column79, 0
  %leftColumn80 = extractvalue [4 x <4 x float>] %54, 1
  %rightColumn81 = extractvalue [4 x <4 x float>] %55, 1
  %column82 = fsub <4 x float> %leftColumn80, %rightColumn81
  %58 = insertvalue [4 x <4 x float>] %57, <4 x float> %column82, 1
  %leftColumn83 = extractvalue [4 x <4 x float>] %54, 2
  %rightColumn84 = extractvalue [4 x <4 x float>] %55, 2
  %column85 = fsub <4 x float> %leftColumn83, %rightColumn84
  %59 = insertvalue [4 x <4 x float>] %58, <4 x float> %column85, 2
  %leftColumn86 = extractvalue [4 x <4 x float>] %54, 3
  %rightColumn87 = extractvalue [4 x <4 x float>] %55, 3
  %column88 = fsub <4 x float> %leftColumn86, %rightColumn87
  %60 = insertvalue [4 x <4 x float>] %59, <4 x float> %column88, 3
  %61 = load <4 x float>* %6
  %column89 = extractvalue [4 x <4 x float>] %60, 0
  %dotres90 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %53, <4 x float> %column89)
  %62 = insertelement <4 x float> %61, float %dotres90, i32 0
  %column91 = extractvalue [4 x <4 x float>] %60, 1
  %dotres92 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %53, <4 x float> %column91)
  %63 = insertelement <4 x float> %62, float %dotres92, i32 1
  %column93 = extractvalue [4 x <4 x float>] %60, 2
  %dotres94 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %53, <4 x float> %column93)
  %64 = insertelement <4 x float> %63, float %dotres94, i32 2
  %column95 = extractvalue [4 x <4 x float>] %60, 3
  %dotres96 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %53, <4 x float> %column95)
  %65 = insertelement <4 x float> %64, float %dotres96, i32 3
  %66 = load <4 x float>* @gl_FragColor
  %gl_FragColor97 = fadd <4 x float> %66, %65
  store <4 x float> %gl_FragColor97, <4 x float>* @gl_FragColor
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %67 = load <4 x float>* @v
  %68 = extractelement <4 x float> %67, i32 0
  %69 = load <4 x float>* @u
  %70 = extractelement <4 x float> %69, i32 0
  %71 = fmul float %68, %70
  %72 = load <4 x float>* @v
  %73 = extractelement <4 x float> %72, i32 0
  %74 = load <4 x float>* @u
  %75 = extractelement <4 x float> %74, i32 1
  %76 = fmul float %73, %75
  %77 = load <4 x float>* @v
  %78 = extractelement <4 x float> %77, i32 0
  %79 = load <4 x float>* @u
  %80 = extractelement <4 x float> %79, i32 2
  %81 = fmul float %78, %80
  %82 = load <4 x float>* @v
  %83 = extractelement <4 x float> %82, i32 0
  %84 = load <4 x float>* @u
  %85 = extractelement <4 x float> %84, i32 3
  %86 = fmul float %83, %85
  %87 = load <4 x float>* @v
  %88 = extractelement <4 x float> %87, i32 1
  %89 = load <4 x float>* @u
  %90 = extractelement <4 x float> %89, i32 0
  %91 = fmul float %88, %90
  %92 = load <4 x float>* @v
  %93 = extractelement <4 x float> %92, i32 1
  %94 = load <4 x float>* @u
  %95 = extractelement <4 x float> %94, i32 1
  %96 = fmul float %93, %95
  %97 = load <4 x float>* @v
  %98 = extractelement <4 x float> %97, i32 1
  %99 = load <4 x float>* @u
  %100 = extractelement <4 x float> %99, i32 2
  %101 = fmul float %98, %100
  %102 = load <4 x float>* @v
  %103 = extractelement <4 x float> %102, i32 1
  %104 = load <4 x float>* @u
  %105 = extractelement <4 x float> %104, i32 3
  %106 = fmul float %103, %105
  %107 = load <4 x float>* @v
  %108 = extractelement <4 x float> %107, i32 2
  %109 = load <4 x float>* @u
  %110 = extractelement <4 x float> %109, i32 0
  %111 = fmul float %108, %110
  %112 = load <4 x float>* @v
  %113 = extractelement <4 x float> %112, i32 2
  %114 = load <4 x float>* @u
  %115 = extractelement <4 x float> %114, i32 1
  %116 = fmul float %113, %115
  %117 = load <4 x float>* @v
  %118 = extractelement <4 x float> %117, i32 2
  %119 = load <4 x float>* @u
  %120 = extractelement <4 x float> %119, i32 2
  %121 = fmul float %118, %120
  %122 = load <4 x float>* @v
  %123 = extractelement <4 x float> %122, i32 2
  %124 = load <4 x float>* @u
  %125 = extractelement <4 x float> %124, i32 3
  %126 = fmul float %123, %125
  %127 = load <4 x float>* @v
  %128 = extractelement <4 x float> %127, i32 3
  %129 = load <4 x float>* @u
  %130 = extractelement <4 x float> %129, i32 0
  %131 = fmul float %128, %130
  %132 = load <4 x float>* @v
  %133 = extractelement <4 x float> %132, i32 3
  %134 = load <4 x float>* @u
  %135 = extractelement <4 x float> %134, i32 1
  %136 = fmul float %133, %135
  %137 = load <4 x float>* @v
  %138 = extractelement <4 x float> %137, i32 3
  %139 = load <4 x float>* @u
  %140 = extractelement <4 x float> %139, i32 2
  %141 = fmul float %138, %140
  %142 = load <4 x float>* @v
  %143 = extractelement <4 x float> %142, i32 3
  %144 = load <4 x float>* @u
  %145 = extractelement <4 x float> %144, i32 3
  %146 = fmul float %143, %145
  %147 = load [4 x <4 x float>]* %m3498
  %column99 = extractvalue [4 x <4 x float>] %147, 0
  %column100 = insertelement <4 x float> %column99, float %71, i32 0
  %column101 = insertelement <4 x float> %column100, float %76, i32 1
  %column102 = insertelement <4 x float> %column101, float %81, i32 2
  %column103 = insertelement <4 x float> %column102, float %86, i32 3
  %matrix = insertvalue [4 x <4 x float>] %147, <4 x float> %column103, 0
  %column104 = extractvalue [4 x <4 x float>] %147, 1
  %column105 = insertelement <4 x float> %column104, float %91, i32 0
  %column106 = insertelement <4 x float> %column105, float %96, i32 1
  %column107 = insertelement <4 x float> %column106, float %101, i32 2
  %column108 = insertelement <4 x float> %column107, float %106, i32 3
  %matrix109 = insertvalue [4 x <4 x float>] %matrix, <4 x float> %column108, 1
  %column110 = extractvalue [4 x <4 x float>] %147, 2
  %column111 = insertelement <4 x float> %column110, float %111, i32 0
  %column112 = insertelement <4 x float> %column111, float %116, i32 1
  %column113 = insertelement <4 x float> %column112, float %121, i32 2
  %column114 = insertelement <4 x float> %column113, float %126, i32 3
  %matrix115 = insertvalue [4 x <4 x float>] %matrix109, <4 x float> %column114, 2
  %column116 = extractvalue [4 x <4 x float>] %147, 3
  %column117 = insertelement <4 x float> %column116, float %131, i32 0
  %column118 = insertelement <4 x float> %column117, float %136, i32 1
  %column119 = insertelement <4 x float> %column118, float %141, i32 2
  %column120 = insertelement <4 x float> %column119, float %146, i32 3
  %matrix121 = insertvalue [4 x <4 x float>] %matrix115, <4 x float> %column120, 3
  store [4 x <4 x float>] %matrix121, [4 x <4 x float>]* %m34
  %148 = load <4 x float>* @v
  %149 = extractelement <4 x float> %148, i32 0
  %150 = load [4 x <4 x float>]* %m34122
  %column123 = extractvalue [4 x <4 x float>] %150, 0
  %column124 = insertelement <4 x float> %column123, float %149, i32 0
  %column125 = insertelement <4 x float> %column124, float 0.000000e+00, i32 1
  %column126 = insertelement <4 x float> %column125, float 0.000000e+00, i32 2
  %column127 = insertelement <4 x float> %column126, float 0.000000e+00, i32 3
  %matrix128 = insertvalue [4 x <4 x float>] %150, <4 x float> %column127, 0
  %column129 = extractvalue [4 x <4 x float>] %150, 1
  %column130 = insertelement <4 x float> %column129, float 0.000000e+00, i32 0
  %column131 = insertelement <4 x float> %column130, float %149, i32 1
  %column132 = insertelement <4 x float> %column131, float 0.000000e+00, i32 2
  %column133 = insertelement <4 x float> %column132, float 0.000000e+00, i32 3
  %matrix134 = insertvalue [4 x <4 x float>] %matrix128, <4 x float> %column133, 1
  %column135 = extractvalue [4 x <4 x float>] %150, 2
  %column136 = insertelement <4 x float> %column135, float 0.000000e+00, i32 0
  %column137 = insertelement <4 x float> %column136, float 0.000000e+00, i32 1
  %column138 = insertelement <4 x float> %column137, float %149, i32 2
  %column139 = insertelement <4 x float> %column138, float 0.000000e+00, i32 3
  %matrix140 = insertvalue [4 x <4 x float>] %matrix134, <4 x float> %column139, 2
  %column141 = extractvalue [4 x <4 x float>] %150, 3
  %column142 = insertelement <4 x float> %column141, float 0.000000e+00, i32 0
  %column143 = insertelement <4 x float> %column142, float 0.000000e+00, i32 1
  %column144 = insertelement <4 x float> %column143, float 0.000000e+00, i32 2
  %column145 = insertelement <4 x float> %column144, float %149, i32 3
  %matrix146 = insertvalue [4 x <4 x float>] %matrix140, <4 x float> %column145, 3
  %151 = load [4 x <4 x float>]* %m34
  %152 = load [4 x <4 x float>]* %5
  %leftColumn147 = extractvalue [4 x <4 x float>] %151, 0
  %rightColumn148 = extractvalue [4 x <4 x float>] %matrix146, 0
  %column149 = fadd <4 x float> %leftColumn147, %rightColumn148
  %153 = insertvalue [4 x <4 x float>] %152, <4 x float> %column149, 0
  %leftColumn150 = extractvalue [4 x <4 x float>] %151, 1
  %rightColumn151 = extractvalue [4 x <4 x float>] %matrix146, 1
  %column152 = fadd <4 x float> %leftColumn150, %rightColumn151
  %154 = insertvalue [4 x <4 x float>] %153, <4 x float> %column152, 1
  %leftColumn153 = extractvalue [4 x <4 x float>] %151, 2
  %rightColumn154 = extractvalue [4 x <4 x float>] %matrix146, 2
  %column155 = fadd <4 x float> %leftColumn153, %rightColumn154
  %155 = insertvalue [4 x <4 x float>] %154, <4 x float> %column155, 2
  %leftColumn156 = extractvalue [4 x <4 x float>] %151, 3
  %rightColumn157 = extractvalue [4 x <4 x float>] %matrix146, 3
  %column158 = fadd <4 x float> %leftColumn156, %rightColumn157
  %m34159 = insertvalue [4 x <4 x float>] %155, <4 x float> %column158, 3
  store [4 x <4 x float>] %m34159, [4 x <4 x float>]* %m34
  %156 = load <4 x float>* @u
  %157 = load <4 x float>* @u
  %158 = extractelement <4 x float> %157, i32 0
  %159 = load <4 x float>* @u
  %160 = load <4 x float>* @u
  %161 = extractelement <4 x float> %160, i32 0
  %162 = load <4 x float>* @u
  %163 = load <4 x float>* @u
  %164 = extractelement <4 x float> %163, i32 0
  %165 = load <4 x float>* @u
  %166 = extractelement <4 x float> %165, i32 0
  %167 = load [4 x <4 x float>]* %m34160
  %element161 = extractelement <4 x float> %156, i32 0
  %element162 = extractelement <4 x float> %156, i32 1
  %element163 = extractelement <4 x float> %156, i32 2
  %element164 = extractelement <4 x float> %156, i32 3
  %element165 = extractelement <4 x float> %159, i32 0
  %element166 = extractelement <4 x float> %159, i32 1
  %element167 = extractelement <4 x float> %159, i32 2
  %element168 = extractelement <4 x float> %159, i32 3
  %element169 = extractelement <4 x float> %162, i32 0
  %element170 = extractelement <4 x float> %162, i32 1
  %element171 = extractelement <4 x float> %162, i32 2
  %element172 = extractelement <4 x float> %162, i32 3
  %column173 = extractvalue [4 x <4 x float>] %167, 0
  %column174 = insertelement <4 x float> %column173, float %element161, i32 0
  %column175 = insertelement <4 x float> %column174, float %element162, i32 1
  %column176 = insertelement <4 x float> %column175, float %element163, i32 2
  %column177 = insertelement <4 x float> %column176, float %element164, i32 3
  %matrix178 = insertvalue [4 x <4 x float>] %167, <4 x float> %column177, 0
  %column179 = extractvalue [4 x <4 x float>] %167, 1
  %column180 = insertelement <4 x float> %column179, float %158, i32 0
  %column181 = insertelement <4 x float> %column180, float %element165, i32 1
  %column182 = insertelement <4 x float> %column181, float %element166, i32 2
  %column183 = insertelement <4 x float> %column182, float %element167, i32 3
  %matrix184 = insertvalue [4 x <4 x float>] %matrix178, <4 x float> %column183, 1
  %column185 = extractvalue [4 x <4 x float>] %167, 2
  %column186 = insertelement <4 x float> %column185, float %element168, i32 0
  %column187 = insertelement <4 x float> %column186, float %161, i32 1
  %column188 = insertelement <4 x float> %column187, float %element169, i32 2
  %column189 = insertelement <4 x float> %column188, float %element170, i32 3
  %matrix190 = insertvalue [4 x <4 x float>] %matrix184, <4 x float> %column189, 2
  %column191 = extractvalue [4 x <4 x float>] %167, 3
  %column192 = insertelement <4 x float> %column191, float %element171, i32 0
  %column193 = insertelement <4 x float> %column192, float %element172, i32 1
  %column194 = insertelement <4 x float> %column193, float %164, i32 2
  %column195 = insertelement <4 x float> %column194, float %166, i32 3
  %matrix196 = insertvalue [4 x <4 x float>] %matrix190, <4 x float> %column195, 3
  %168 = load [4 x <4 x float>]* %m34
  %169 = load [4 x <4 x float>]* %4
  %leftColumn197 = extractvalue [4 x <4 x float>] %168, 0
  %rightColumn198 = extractvalue [4 x <4 x float>] %matrix196, 0
  %column199 = fadd <4 x float> %leftColumn197, %rightColumn198
  %170 = insertvalue [4 x <4 x float>] %169, <4 x float> %column199, 0
  %leftColumn200 = extractvalue [4 x <4 x float>] %168, 1
  %rightColumn201 = extractvalue [4 x <4 x float>] %matrix196, 1
  %column202 = fadd <4 x float> %leftColumn200, %rightColumn201
  %171 = insertvalue [4 x <4 x float>] %170, <4 x float> %column202, 1
  %leftColumn203 = extractvalue [4 x <4 x float>] %168, 2
  %rightColumn204 = extractvalue [4 x <4 x float>] %matrix196, 2
  %column205 = fadd <4 x float> %leftColumn203, %rightColumn204
  %172 = insertvalue [4 x <4 x float>] %171, <4 x float> %column205, 2
  %leftColumn206 = extractvalue [4 x <4 x float>] %168, 3
  %rightColumn207 = extractvalue [4 x <4 x float>] %matrix196, 3
  %column208 = fadd <4 x float> %leftColumn206, %rightColumn207
  %m34209 = insertvalue [4 x <4 x float>] %172, <4 x float> %column208, 3
  store [4 x <4 x float>] %m34209, [4 x <4 x float>]* %m34
  %173 = load [4 x <4 x float>]* %m34
  %174 = load [4 x <4 x float>] addrspace(2)* @un34, !gla.uniform !3
  %element1210 = extractvalue [4 x <4 x float>] %173, 0
  %element2211 = extractvalue [4 x <4 x float>] %174, 0
  %175 = fcmp oeq <4 x float> %element1210, %element2211
  %comp212 = call i1 @llvm.gla.all.v4i1(<4 x i1> %175)
  %element1213 = extractvalue [4 x <4 x float>] %173, 1
  %element2214 = extractvalue [4 x <4 x float>] %174, 1
  %176 = fcmp oeq <4 x float> %element1213, %element2214
  %comp215 = call i1 @llvm.gla.all.v4i1(<4 x i1> %176)
  %177 = and i1 %comp212, %comp215
  %element1216 = extractvalue [4 x <4 x float>] %173, 2
  %element2217 = extractvalue [4 x <4 x float>] %174, 2
  %178 = fcmp oeq <4 x float> %element1216, %element2217
  %comp218 = call i1 @llvm.gla.all.v4i1(<4 x i1> %178)
  %179 = and i1 %177, %comp218
  %element1219 = extractvalue [4 x <4 x float>] %173, 3
  %element2220 = extractvalue [4 x <4 x float>] %174, 3
  %180 = fcmp oeq <4 x float> %element1219, %element2220
  %comp221 = call i1 @llvm.gla.all.v4i1(<4 x i1> %180)
  %181 = and i1 %179, %comp221
  br i1 %181, label %then222, label %else288

then222:                                          ; preds = %ifmerge
  %182 = load [4 x <4 x float>]* %m34
  %183 = load <4 x float>* @u
  %184 = load <4 x float>* %3
  %component223 = extractelement <4 x float> %183, i32 0
  %component224 = extractelement <4 x float> %183, i32 1
  %component225 = extractelement <4 x float> %183, i32 2
  %component226 = extractelement <4 x float> %183, i32 3
  %column227 = extractvalue [4 x <4 x float>] %182, 0
  %element228 = extractelement <4 x float> %column227, i32 0
  %product229 = fmul float %element228, %component223
  %column230 = extractvalue [4 x <4 x float>] %182, 1
  %element231 = extractelement <4 x float> %column230, i32 0
  %product232 = fmul float %element231, %component224
  %dotProduct233 = fadd float %product229, %product232
  %column234 = extractvalue [4 x <4 x float>] %182, 2
  %element235 = extractelement <4 x float> %column234, i32 0
  %product236 = fmul float %element235, %component225
  %dotProduct237 = fadd float %dotProduct233, %product236
  %column238 = extractvalue [4 x <4 x float>] %182, 3
  %element239 = extractelement <4 x float> %column238, i32 0
  %product240 = fmul float %element239, %component226
  %dotProduct241 = fadd float %dotProduct237, %product240
  %185 = insertelement <4 x float> %184, float %dotProduct241, i32 0
  %column242 = extractvalue [4 x <4 x float>] %182, 0
  %element243 = extractelement <4 x float> %column242, i32 1
  %product244 = fmul float %element243, %component223
  %column245 = extractvalue [4 x <4 x float>] %182, 1
  %element246 = extractelement <4 x float> %column245, i32 1
  %product247 = fmul float %element246, %component224
  %dotProduct248 = fadd float %product244, %product247
  %column249 = extractvalue [4 x <4 x float>] %182, 2
  %element250 = extractelement <4 x float> %column249, i32 1
  %product251 = fmul float %element250, %component225
  %dotProduct252 = fadd float %dotProduct248, %product251
  %column253 = extractvalue [4 x <4 x float>] %182, 3
  %element254 = extractelement <4 x float> %column253, i32 1
  %product255 = fmul float %element254, %component226
  %dotProduct256 = fadd float %dotProduct252, %product255
  %186 = insertelement <4 x float> %185, float %dotProduct256, i32 1
  %column257 = extractvalue [4 x <4 x float>] %182, 0
  %element258 = extractelement <4 x float> %column257, i32 2
  %product259 = fmul float %element258, %component223
  %column260 = extractvalue [4 x <4 x float>] %182, 1
  %element261 = extractelement <4 x float> %column260, i32 2
  %product262 = fmul float %element261, %component224
  %dotProduct263 = fadd float %product259, %product262
  %column264 = extractvalue [4 x <4 x float>] %182, 2
  %element265 = extractelement <4 x float> %column264, i32 2
  %product266 = fmul float %element265, %component225
  %dotProduct267 = fadd float %dotProduct263, %product266
  %column268 = extractvalue [4 x <4 x float>] %182, 3
  %element269 = extractelement <4 x float> %column268, i32 2
  %product270 = fmul float %element269, %component226
  %dotProduct271 = fadd float %dotProduct267, %product270
  %187 = insertelement <4 x float> %186, float %dotProduct271, i32 2
  %column272 = extractvalue [4 x <4 x float>] %182, 0
  %element273 = extractelement <4 x float> %column272, i32 3
  %product274 = fmul float %element273, %component223
  %column275 = extractvalue [4 x <4 x float>] %182, 1
  %element276 = extractelement <4 x float> %column275, i32 3
  %product277 = fmul float %element276, %component224
  %dotProduct278 = fadd float %product274, %product277
  %column279 = extractvalue [4 x <4 x float>] %182, 2
  %element280 = extractelement <4 x float> %column279, i32 3
  %product281 = fmul float %element280, %component225
  %dotProduct282 = fadd float %dotProduct278, %product281
  %column283 = extractvalue [4 x <4 x float>] %182, 3
  %element284 = extractelement <4 x float> %column283, i32 3
  %product285 = fmul float %element284, %component226
  %dotProduct286 = fadd float %dotProduct282, %product285
  %188 = insertelement <4 x float> %187, float %dotProduct286, i32 3
  %189 = load <4 x float>* @gl_FragColor
  %gl_FragColor287 = fadd <4 x float> %189, %188
  store <4 x float> %gl_FragColor287, <4 x float>* @gl_FragColor
  br label %ifmerge680

else288:                                          ; preds = %ifmerge
  %190 = load [4 x <4 x float>] addrspace(2)* @un34, !gla.uniform !3
  %191 = load [4 x <4 x float>] addrspace(2)* @um43, !gla.uniform !8
  %resultMatrix = load [4 x <4 x float>]* %2
  %tempColumn = load <4 x float>* %1
  %rightColumn289 = extractvalue [4 x <4 x float>] %191, 0
  %leftColumn290 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp = extractelement <4 x float> %leftColumn290, i32 0
  %rightComp = extractelement <4 x float> %rightColumn289, i32 0
  %product291 = fmul float %leftComp, %rightComp
  %leftColumn292 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp293 = extractelement <4 x float> %leftColumn292, i32 0
  %rightComp294 = extractelement <4 x float> %rightColumn289, i32 1
  %product295 = fmul float %leftComp293, %rightComp294
  %dotProduct296 = fadd float %product291, %product295
  %leftColumn297 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp298 = extractelement <4 x float> %leftColumn297, i32 0
  %rightComp299 = extractelement <4 x float> %rightColumn289, i32 2
  %product300 = fmul float %leftComp298, %rightComp299
  %dotProduct301 = fadd float %dotProduct296, %product300
  %leftColumn302 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp303 = extractelement <4 x float> %leftColumn302, i32 0
  %rightComp304 = extractelement <4 x float> %rightColumn289, i32 3
  %product305 = fmul float %leftComp303, %rightComp304
  %dotProduct306 = fadd float %dotProduct301, %product305
  %column307 = insertelement <4 x float> %tempColumn, float %dotProduct306, i32 0
  %leftColumn308 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp309 = extractelement <4 x float> %leftColumn308, i32 1
  %rightComp310 = extractelement <4 x float> %rightColumn289, i32 0
  %product311 = fmul float %leftComp309, %rightComp310
  %leftColumn312 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp313 = extractelement <4 x float> %leftColumn312, i32 1
  %rightComp314 = extractelement <4 x float> %rightColumn289, i32 1
  %product315 = fmul float %leftComp313, %rightComp314
  %dotProduct316 = fadd float %product311, %product315
  %leftColumn317 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp318 = extractelement <4 x float> %leftColumn317, i32 1
  %rightComp319 = extractelement <4 x float> %rightColumn289, i32 2
  %product320 = fmul float %leftComp318, %rightComp319
  %dotProduct321 = fadd float %dotProduct316, %product320
  %leftColumn322 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp323 = extractelement <4 x float> %leftColumn322, i32 1
  %rightComp324 = extractelement <4 x float> %rightColumn289, i32 3
  %product325 = fmul float %leftComp323, %rightComp324
  %dotProduct326 = fadd float %dotProduct321, %product325
  %column327 = insertelement <4 x float> %column307, float %dotProduct326, i32 1
  %leftColumn328 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp329 = extractelement <4 x float> %leftColumn328, i32 2
  %rightComp330 = extractelement <4 x float> %rightColumn289, i32 0
  %product331 = fmul float %leftComp329, %rightComp330
  %leftColumn332 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp333 = extractelement <4 x float> %leftColumn332, i32 2
  %rightComp334 = extractelement <4 x float> %rightColumn289, i32 1
  %product335 = fmul float %leftComp333, %rightComp334
  %dotProduct336 = fadd float %product331, %product335
  %leftColumn337 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp338 = extractelement <4 x float> %leftColumn337, i32 2
  %rightComp339 = extractelement <4 x float> %rightColumn289, i32 2
  %product340 = fmul float %leftComp338, %rightComp339
  %dotProduct341 = fadd float %dotProduct336, %product340
  %leftColumn342 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp343 = extractelement <4 x float> %leftColumn342, i32 2
  %rightComp344 = extractelement <4 x float> %rightColumn289, i32 3
  %product345 = fmul float %leftComp343, %rightComp344
  %dotProduct346 = fadd float %dotProduct341, %product345
  %column347 = insertelement <4 x float> %column327, float %dotProduct346, i32 2
  %leftColumn348 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp349 = extractelement <4 x float> %leftColumn348, i32 3
  %rightComp350 = extractelement <4 x float> %rightColumn289, i32 0
  %product351 = fmul float %leftComp349, %rightComp350
  %leftColumn352 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp353 = extractelement <4 x float> %leftColumn352, i32 3
  %rightComp354 = extractelement <4 x float> %rightColumn289, i32 1
  %product355 = fmul float %leftComp353, %rightComp354
  %dotProduct356 = fadd float %product351, %product355
  %leftColumn357 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp358 = extractelement <4 x float> %leftColumn357, i32 3
  %rightComp359 = extractelement <4 x float> %rightColumn289, i32 2
  %product360 = fmul float %leftComp358, %rightComp359
  %dotProduct361 = fadd float %dotProduct356, %product360
  %leftColumn362 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp363 = extractelement <4 x float> %leftColumn362, i32 3
  %rightComp364 = extractelement <4 x float> %rightColumn289, i32 3
  %product365 = fmul float %leftComp363, %rightComp364
  %dotProduct366 = fadd float %dotProduct361, %product365
  %column367 = insertelement <4 x float> %column347, float %dotProduct366, i32 3
  %resultMatrix368 = insertvalue [4 x <4 x float>] %resultMatrix, <4 x float> %column367, 0
  %rightColumn369 = extractvalue [4 x <4 x float>] %191, 1
  %leftColumn370 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp371 = extractelement <4 x float> %leftColumn370, i32 0
  %rightComp372 = extractelement <4 x float> %rightColumn369, i32 0
  %product373 = fmul float %leftComp371, %rightComp372
  %leftColumn374 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp375 = extractelement <4 x float> %leftColumn374, i32 0
  %rightComp376 = extractelement <4 x float> %rightColumn369, i32 1
  %product377 = fmul float %leftComp375, %rightComp376
  %dotProduct378 = fadd float %product373, %product377
  %leftColumn379 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp380 = extractelement <4 x float> %leftColumn379, i32 0
  %rightComp381 = extractelement <4 x float> %rightColumn369, i32 2
  %product382 = fmul float %leftComp380, %rightComp381
  %dotProduct383 = fadd float %dotProduct378, %product382
  %leftColumn384 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp385 = extractelement <4 x float> %leftColumn384, i32 0
  %rightComp386 = extractelement <4 x float> %rightColumn369, i32 3
  %product387 = fmul float %leftComp385, %rightComp386
  %dotProduct388 = fadd float %dotProduct383, %product387
  %column389 = insertelement <4 x float> %column367, float %dotProduct388, i32 0
  %leftColumn390 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp391 = extractelement <4 x float> %leftColumn390, i32 1
  %rightComp392 = extractelement <4 x float> %rightColumn369, i32 0
  %product393 = fmul float %leftComp391, %rightComp392
  %leftColumn394 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp395 = extractelement <4 x float> %leftColumn394, i32 1
  %rightComp396 = extractelement <4 x float> %rightColumn369, i32 1
  %product397 = fmul float %leftComp395, %rightComp396
  %dotProduct398 = fadd float %product393, %product397
  %leftColumn399 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp400 = extractelement <4 x float> %leftColumn399, i32 1
  %rightComp401 = extractelement <4 x float> %rightColumn369, i32 2
  %product402 = fmul float %leftComp400, %rightComp401
  %dotProduct403 = fadd float %dotProduct398, %product402
  %leftColumn404 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp405 = extractelement <4 x float> %leftColumn404, i32 1
  %rightComp406 = extractelement <4 x float> %rightColumn369, i32 3
  %product407 = fmul float %leftComp405, %rightComp406
  %dotProduct408 = fadd float %dotProduct403, %product407
  %column409 = insertelement <4 x float> %column389, float %dotProduct408, i32 1
  %leftColumn410 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp411 = extractelement <4 x float> %leftColumn410, i32 2
  %rightComp412 = extractelement <4 x float> %rightColumn369, i32 0
  %product413 = fmul float %leftComp411, %rightComp412
  %leftColumn414 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp415 = extractelement <4 x float> %leftColumn414, i32 2
  %rightComp416 = extractelement <4 x float> %rightColumn369, i32 1
  %product417 = fmul float %leftComp415, %rightComp416
  %dotProduct418 = fadd float %product413, %product417
  %leftColumn419 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp420 = extractelement <4 x float> %leftColumn419, i32 2
  %rightComp421 = extractelement <4 x float> %rightColumn369, i32 2
  %product422 = fmul float %leftComp420, %rightComp421
  %dotProduct423 = fadd float %dotProduct418, %product422
  %leftColumn424 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp425 = extractelement <4 x float> %leftColumn424, i32 2
  %rightComp426 = extractelement <4 x float> %rightColumn369, i32 3
  %product427 = fmul float %leftComp425, %rightComp426
  %dotProduct428 = fadd float %dotProduct423, %product427
  %column429 = insertelement <4 x float> %column409, float %dotProduct428, i32 2
  %leftColumn430 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp431 = extractelement <4 x float> %leftColumn430, i32 3
  %rightComp432 = extractelement <4 x float> %rightColumn369, i32 0
  %product433 = fmul float %leftComp431, %rightComp432
  %leftColumn434 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp435 = extractelement <4 x float> %leftColumn434, i32 3
  %rightComp436 = extractelement <4 x float> %rightColumn369, i32 1
  %product437 = fmul float %leftComp435, %rightComp436
  %dotProduct438 = fadd float %product433, %product437
  %leftColumn439 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp440 = extractelement <4 x float> %leftColumn439, i32 3
  %rightComp441 = extractelement <4 x float> %rightColumn369, i32 2
  %product442 = fmul float %leftComp440, %rightComp441
  %dotProduct443 = fadd float %dotProduct438, %product442
  %leftColumn444 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp445 = extractelement <4 x float> %leftColumn444, i32 3
  %rightComp446 = extractelement <4 x float> %rightColumn369, i32 3
  %product447 = fmul float %leftComp445, %rightComp446
  %dotProduct448 = fadd float %dotProduct443, %product447
  %column449 = insertelement <4 x float> %column429, float %dotProduct448, i32 3
  %resultMatrix450 = insertvalue [4 x <4 x float>] %resultMatrix368, <4 x float> %column449, 1
  %rightColumn451 = extractvalue [4 x <4 x float>] %191, 2
  %leftColumn452 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp453 = extractelement <4 x float> %leftColumn452, i32 0
  %rightComp454 = extractelement <4 x float> %rightColumn451, i32 0
  %product455 = fmul float %leftComp453, %rightComp454
  %leftColumn456 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp457 = extractelement <4 x float> %leftColumn456, i32 0
  %rightComp458 = extractelement <4 x float> %rightColumn451, i32 1
  %product459 = fmul float %leftComp457, %rightComp458
  %dotProduct460 = fadd float %product455, %product459
  %leftColumn461 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp462 = extractelement <4 x float> %leftColumn461, i32 0
  %rightComp463 = extractelement <4 x float> %rightColumn451, i32 2
  %product464 = fmul float %leftComp462, %rightComp463
  %dotProduct465 = fadd float %dotProduct460, %product464
  %leftColumn466 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp467 = extractelement <4 x float> %leftColumn466, i32 0
  %rightComp468 = extractelement <4 x float> %rightColumn451, i32 3
  %product469 = fmul float %leftComp467, %rightComp468
  %dotProduct470 = fadd float %dotProduct465, %product469
  %column471 = insertelement <4 x float> %column449, float %dotProduct470, i32 0
  %leftColumn472 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp473 = extractelement <4 x float> %leftColumn472, i32 1
  %rightComp474 = extractelement <4 x float> %rightColumn451, i32 0
  %product475 = fmul float %leftComp473, %rightComp474
  %leftColumn476 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp477 = extractelement <4 x float> %leftColumn476, i32 1
  %rightComp478 = extractelement <4 x float> %rightColumn451, i32 1
  %product479 = fmul float %leftComp477, %rightComp478
  %dotProduct480 = fadd float %product475, %product479
  %leftColumn481 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp482 = extractelement <4 x float> %leftColumn481, i32 1
  %rightComp483 = extractelement <4 x float> %rightColumn451, i32 2
  %product484 = fmul float %leftComp482, %rightComp483
  %dotProduct485 = fadd float %dotProduct480, %product484
  %leftColumn486 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp487 = extractelement <4 x float> %leftColumn486, i32 1
  %rightComp488 = extractelement <4 x float> %rightColumn451, i32 3
  %product489 = fmul float %leftComp487, %rightComp488
  %dotProduct490 = fadd float %dotProduct485, %product489
  %column491 = insertelement <4 x float> %column471, float %dotProduct490, i32 1
  %leftColumn492 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp493 = extractelement <4 x float> %leftColumn492, i32 2
  %rightComp494 = extractelement <4 x float> %rightColumn451, i32 0
  %product495 = fmul float %leftComp493, %rightComp494
  %leftColumn496 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp497 = extractelement <4 x float> %leftColumn496, i32 2
  %rightComp498 = extractelement <4 x float> %rightColumn451, i32 1
  %product499 = fmul float %leftComp497, %rightComp498
  %dotProduct500 = fadd float %product495, %product499
  %leftColumn501 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp502 = extractelement <4 x float> %leftColumn501, i32 2
  %rightComp503 = extractelement <4 x float> %rightColumn451, i32 2
  %product504 = fmul float %leftComp502, %rightComp503
  %dotProduct505 = fadd float %dotProduct500, %product504
  %leftColumn506 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp507 = extractelement <4 x float> %leftColumn506, i32 2
  %rightComp508 = extractelement <4 x float> %rightColumn451, i32 3
  %product509 = fmul float %leftComp507, %rightComp508
  %dotProduct510 = fadd float %dotProduct505, %product509
  %column511 = insertelement <4 x float> %column491, float %dotProduct510, i32 2
  %leftColumn512 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp513 = extractelement <4 x float> %leftColumn512, i32 3
  %rightComp514 = extractelement <4 x float> %rightColumn451, i32 0
  %product515 = fmul float %leftComp513, %rightComp514
  %leftColumn516 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp517 = extractelement <4 x float> %leftColumn516, i32 3
  %rightComp518 = extractelement <4 x float> %rightColumn451, i32 1
  %product519 = fmul float %leftComp517, %rightComp518
  %dotProduct520 = fadd float %product515, %product519
  %leftColumn521 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp522 = extractelement <4 x float> %leftColumn521, i32 3
  %rightComp523 = extractelement <4 x float> %rightColumn451, i32 2
  %product524 = fmul float %leftComp522, %rightComp523
  %dotProduct525 = fadd float %dotProduct520, %product524
  %leftColumn526 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp527 = extractelement <4 x float> %leftColumn526, i32 3
  %rightComp528 = extractelement <4 x float> %rightColumn451, i32 3
  %product529 = fmul float %leftComp527, %rightComp528
  %dotProduct530 = fadd float %dotProduct525, %product529
  %column531 = insertelement <4 x float> %column511, float %dotProduct530, i32 3
  %resultMatrix532 = insertvalue [4 x <4 x float>] %resultMatrix450, <4 x float> %column531, 2
  %rightColumn533 = extractvalue [4 x <4 x float>] %191, 3
  %leftColumn534 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp535 = extractelement <4 x float> %leftColumn534, i32 0
  %rightComp536 = extractelement <4 x float> %rightColumn533, i32 0
  %product537 = fmul float %leftComp535, %rightComp536
  %leftColumn538 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp539 = extractelement <4 x float> %leftColumn538, i32 0
  %rightComp540 = extractelement <4 x float> %rightColumn533, i32 1
  %product541 = fmul float %leftComp539, %rightComp540
  %dotProduct542 = fadd float %product537, %product541
  %leftColumn543 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp544 = extractelement <4 x float> %leftColumn543, i32 0
  %rightComp545 = extractelement <4 x float> %rightColumn533, i32 2
  %product546 = fmul float %leftComp544, %rightComp545
  %dotProduct547 = fadd float %dotProduct542, %product546
  %leftColumn548 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp549 = extractelement <4 x float> %leftColumn548, i32 0
  %rightComp550 = extractelement <4 x float> %rightColumn533, i32 3
  %product551 = fmul float %leftComp549, %rightComp550
  %dotProduct552 = fadd float %dotProduct547, %product551
  %column553 = insertelement <4 x float> %column531, float %dotProduct552, i32 0
  %leftColumn554 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp555 = extractelement <4 x float> %leftColumn554, i32 1
  %rightComp556 = extractelement <4 x float> %rightColumn533, i32 0
  %product557 = fmul float %leftComp555, %rightComp556
  %leftColumn558 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp559 = extractelement <4 x float> %leftColumn558, i32 1
  %rightComp560 = extractelement <4 x float> %rightColumn533, i32 1
  %product561 = fmul float %leftComp559, %rightComp560
  %dotProduct562 = fadd float %product557, %product561
  %leftColumn563 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp564 = extractelement <4 x float> %leftColumn563, i32 1
  %rightComp565 = extractelement <4 x float> %rightColumn533, i32 2
  %product566 = fmul float %leftComp564, %rightComp565
  %dotProduct567 = fadd float %dotProduct562, %product566
  %leftColumn568 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp569 = extractelement <4 x float> %leftColumn568, i32 1
  %rightComp570 = extractelement <4 x float> %rightColumn533, i32 3
  %product571 = fmul float %leftComp569, %rightComp570
  %dotProduct572 = fadd float %dotProduct567, %product571
  %column573 = insertelement <4 x float> %column553, float %dotProduct572, i32 1
  %leftColumn574 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp575 = extractelement <4 x float> %leftColumn574, i32 2
  %rightComp576 = extractelement <4 x float> %rightColumn533, i32 0
  %product577 = fmul float %leftComp575, %rightComp576
  %leftColumn578 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp579 = extractelement <4 x float> %leftColumn578, i32 2
  %rightComp580 = extractelement <4 x float> %rightColumn533, i32 1
  %product581 = fmul float %leftComp579, %rightComp580
  %dotProduct582 = fadd float %product577, %product581
  %leftColumn583 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp584 = extractelement <4 x float> %leftColumn583, i32 2
  %rightComp585 = extractelement <4 x float> %rightColumn533, i32 2
  %product586 = fmul float %leftComp584, %rightComp585
  %dotProduct587 = fadd float %dotProduct582, %product586
  %leftColumn588 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp589 = extractelement <4 x float> %leftColumn588, i32 2
  %rightComp590 = extractelement <4 x float> %rightColumn533, i32 3
  %product591 = fmul float %leftComp589, %rightComp590
  %dotProduct592 = fadd float %dotProduct587, %product591
  %column593 = insertelement <4 x float> %column573, float %dotProduct592, i32 2
  %leftColumn594 = extractvalue [4 x <4 x float>] %190, 0
  %leftComp595 = extractelement <4 x float> %leftColumn594, i32 3
  %rightComp596 = extractelement <4 x float> %rightColumn533, i32 0
  %product597 = fmul float %leftComp595, %rightComp596
  %leftColumn598 = extractvalue [4 x <4 x float>] %190, 1
  %leftComp599 = extractelement <4 x float> %leftColumn598, i32 3
  %rightComp600 = extractelement <4 x float> %rightColumn533, i32 1
  %product601 = fmul float %leftComp599, %rightComp600
  %dotProduct602 = fadd float %product597, %product601
  %leftColumn603 = extractvalue [4 x <4 x float>] %190, 2
  %leftComp604 = extractelement <4 x float> %leftColumn603, i32 3
  %rightComp605 = extractelement <4 x float> %rightColumn533, i32 2
  %product606 = fmul float %leftComp604, %rightComp605
  %dotProduct607 = fadd float %dotProduct602, %product606
  %leftColumn608 = extractvalue [4 x <4 x float>] %190, 3
  %leftComp609 = extractelement <4 x float> %leftColumn608, i32 3
  %rightComp610 = extractelement <4 x float> %rightColumn533, i32 3
  %product611 = fmul float %leftComp609, %rightComp610
  %dotProduct612 = fadd float %dotProduct607, %product611
  %column613 = insertelement <4 x float> %column593, float %dotProduct612, i32 3
  %resultMatrix614 = insertvalue [4 x <4 x float>] %resultMatrix532, <4 x float> %column613, 3
  %192 = load <4 x float>* @v
  %193 = load <4 x float>* %0
  %component615 = extractelement <4 x float> %192, i32 0
  %component616 = extractelement <4 x float> %192, i32 1
  %component617 = extractelement <4 x float> %192, i32 2
  %component618 = extractelement <4 x float> %192, i32 3
  %column619 = extractvalue [4 x <4 x float>] %resultMatrix614, 0
  %element620 = extractelement <4 x float> %column619, i32 0
  %product621 = fmul float %element620, %component615
  %column622 = extractvalue [4 x <4 x float>] %resultMatrix614, 1
  %element623 = extractelement <4 x float> %column622, i32 0
  %product624 = fmul float %element623, %component616
  %dotProduct625 = fadd float %product621, %product624
  %column626 = extractvalue [4 x <4 x float>] %resultMatrix614, 2
  %element627 = extractelement <4 x float> %column626, i32 0
  %product628 = fmul float %element627, %component617
  %dotProduct629 = fadd float %dotProduct625, %product628
  %column630 = extractvalue [4 x <4 x float>] %resultMatrix614, 3
  %element631 = extractelement <4 x float> %column630, i32 0
  %product632 = fmul float %element631, %component618
  %dotProduct633 = fadd float %dotProduct629, %product632
  %194 = insertelement <4 x float> %193, float %dotProduct633, i32 0
  %column634 = extractvalue [4 x <4 x float>] %resultMatrix614, 0
  %element635 = extractelement <4 x float> %column634, i32 1
  %product636 = fmul float %element635, %component615
  %column637 = extractvalue [4 x <4 x float>] %resultMatrix614, 1
  %element638 = extractelement <4 x float> %column637, i32 1
  %product639 = fmul float %element638, %component616
  %dotProduct640 = fadd float %product636, %product639
  %column641 = extractvalue [4 x <4 x float>] %resultMatrix614, 2
  %element642 = extractelement <4 x float> %column641, i32 1
  %product643 = fmul float %element642, %component617
  %dotProduct644 = fadd float %dotProduct640, %product643
  %column645 = extractvalue [4 x <4 x float>] %resultMatrix614, 3
  %element646 = extractelement <4 x float> %column645, i32 1
  %product647 = fmul float %element646, %component618
  %dotProduct648 = fadd float %dotProduct644, %product647
  %195 = insertelement <4 x float> %194, float %dotProduct648, i32 1
  %column649 = extractvalue [4 x <4 x float>] %resultMatrix614, 0
  %element650 = extractelement <4 x float> %column649, i32 2
  %product651 = fmul float %element650, %component615
  %column652 = extractvalue [4 x <4 x float>] %resultMatrix614, 1
  %element653 = extractelement <4 x float> %column652, i32 2
  %product654 = fmul float %element653, %component616
  %dotProduct655 = fadd float %product651, %product654
  %column656 = extractvalue [4 x <4 x float>] %resultMatrix614, 2
  %element657 = extractelement <4 x float> %column656, i32 2
  %product658 = fmul float %element657, %component617
  %dotProduct659 = fadd float %dotProduct655, %product658
  %column660 = extractvalue [4 x <4 x float>] %resultMatrix614, 3
  %element661 = extractelement <4 x float> %column660, i32 2
  %product662 = fmul float %element661, %component618
  %dotProduct663 = fadd float %dotProduct659, %product662
  %196 = insertelement <4 x float> %195, float %dotProduct663, i32 2
  %column664 = extractvalue [4 x <4 x float>] %resultMatrix614, 0
  %element665 = extractelement <4 x float> %column664, i32 3
  %product666 = fmul float %element665, %component615
  %column667 = extractvalue [4 x <4 x float>] %resultMatrix614, 1
  %element668 = extractelement <4 x float> %column667, i32 3
  %product669 = fmul float %element668, %component616
  %dotProduct670 = fadd float %product666, %product669
  %column671 = extractvalue [4 x <4 x float>] %resultMatrix614, 2
  %element672 = extractelement <4 x float> %column671, i32 3
  %product673 = fmul float %element672, %component617
  %dotProduct674 = fadd float %dotProduct670, %product673
  %column675 = extractvalue [4 x <4 x float>] %resultMatrix614, 3
  %element676 = extractelement <4 x float> %column675, i32 3
  %product677 = fmul float %element676, %component618
  %dotProduct678 = fadd float %dotProduct674, %product677
  %197 = insertelement <4 x float> %196, float %dotProduct678, i32 3
  %198 = load <4 x float>* @gl_FragColor
  %gl_FragColor679 = fadd <4 x float> %198, %197
  store <4 x float> %gl_FragColor679, <4 x float>* @gl_FragColor
  br label %ifmerge680

ifmerge680:                                       ; preds = %else288, %then222
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge680
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8}
!gla.inputs = !{!9, !11, !13}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"un34", i32 12, [4 x <4 x float>]* @un34_typeProxy, metadata !4}
!4 = metadata !{i32 3, i32 0, i32 1024, null}
!5 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !4}
!6 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !4}
!7 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !4}
!8 = metadata !{metadata !"um43", i32 12, [4 x <4 x float>]* @um43_typeProxy, metadata !4}
!9 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!11 = metadata !{metadata !"v", i32 1, <4 x float>* @v_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!13 = metadata !{metadata !"u", i32 1, <4 x float>* @u_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}


Bottom IR:
; ModuleID = 'Glslang'

@gl_FragColor = global <4 x float> zeroinitializer
@un34 = external addrspace(2) constant [4 x <4 x float>]
@Color = global <3 x float> zeroinitializer
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@v = global <4 x float> zeroinitializer
@u = global <4 x float> zeroinitializer
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1
  %0 = load <4 x float> addrspace(2)* %gla_constGEP, align 16, !gla.uniform !3
  store <4 x float> %0, <4 x float>* @gl_FragColor, align 16
  %1 = load <3 x float>* @Color, align 16
  %2 = load [3 x <3 x float>] addrspace(2)* @colorTransform, align 16, !gla.uniform !5
  %column = extractvalue [3 x <3 x float>] %2, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %1, <3 x float> %column)
  %column2 = extractvalue [3 x <3 x float>] %2, 1
  %dotres3 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %1, <3 x float> %column2)
  %column4 = extractvalue [3 x <3 x float>] %2, 2
  %dotres5 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %1, <3 x float> %column4)
  %3 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres, i32 0, float %dotres3, i32 0, float %dotres5, i32 0, float 1.000000e+00, i32 0)
  %gl_FragColor7 = fadd <4 x float> %0, %3
  store <4 x float> %gl_FragColor7, <4 x float>* @gl_FragColor, align 16
  %4 = load [4 x <4 x float>] addrspace(2)* @m, align 16, !gla.uniform !6
  %5 = load [4 x <4 x float>] addrspace(2)* @n, align 16, !gla.uniform !7
  %element1 = extractvalue [4 x <4 x float>] %4, 0
  %element2 = extractvalue [4 x <4 x float>] %5, 0
  %6 = fcmp one <4 x float> %element1, %element2
  %comp = call i1 @llvm.gla.any.v4i1(<4 x i1> %6)
  %element18 = extractvalue [4 x <4 x float>] %4, 1
  %element29 = extractvalue [4 x <4 x float>] %5, 1
  %7 = fcmp one <4 x float> %element18, %element29
  %comp10 = call i1 @llvm.gla.any.v4i1(<4 x i1> %7)
  %8 = or i1 %comp, %comp10
  %element111 = extractvalue [4 x <4 x float>] %4, 2
  %element212 = extractvalue [4 x <4 x float>] %5, 2
  %9 = fcmp one <4 x float> %element111, %element212
  %comp13 = call i1 @llvm.gla.any.v4i1(<4 x i1> %9)
  %10 = or i1 %8, %comp13
  %element114 = extractvalue [4 x <4 x float>] %4, 3
  %element215 = extractvalue [4 x <4 x float>] %5, 3
  %11 = fcmp one <4 x float> %element114, %element215
  %comp16 = call i1 @llvm.gla.any.v4i1(<4 x i1> %11)
  %12 = or i1 %10, %comp16
  %13 = load <4 x float>* @v, align 16
  br i1 %12, label %then, label %else

then:                                             ; preds = %entry
  %gl_FragColor17 = fadd <4 x float> %gl_FragColor7, %13
  %.pre = extractelement <4 x float> %13, i32 0
  %.pre682 = extractelement <4 x float> %13, i32 1
  %.pre684 = extractelement <4 x float> %13, i32 2
  %.pre686 = extractelement <4 x float> %13, i32 3
  br label %ifmerge

else:                                             ; preds = %entry
  %component = extractelement <4 x float> %13, i32 0
  %component18 = extractelement <4 x float> %13, i32 1
  %component19 = extractelement <4 x float> %13, i32 2
  %component20 = extractelement <4 x float> %13, i32 3
  %element = extractelement <4 x float> %element1, i32 0
  %product = fmul float %element, %component
  %element23 = extractelement <4 x float> %element18, i32 0
  %product24 = fmul float %element23, %component18
  %dotProduct = fadd float %product, %product24
  %element26 = extractelement <4 x float> %element111, i32 0
  %product27 = fmul float %element26, %component19
  %dotProduct28 = fadd float %product27, %dotProduct
  %element30 = extractelement <4 x float> %element114, i32 0
  %product31 = fmul float %element30, %component20
  %dotProduct32 = fadd float %product31, %dotProduct28
  %element34 = extractelement <4 x float> %element1, i32 1
  %product35 = fmul float %element34, %component
  %element37 = extractelement <4 x float> %element18, i32 1
  %product38 = fmul float %element37, %component18
  %dotProduct39 = fadd float %product35, %product38
  %element41 = extractelement <4 x float> %element111, i32 1
  %product42 = fmul float %element41, %component19
  %dotProduct43 = fadd float %product42, %dotProduct39
  %element45 = extractelement <4 x float> %element114, i32 1
  %product46 = fmul float %element45, %component20
  %dotProduct47 = fadd float %product46, %dotProduct43
  %element49 = extractelement <4 x float> %element1, i32 2
  %product50 = fmul float %element49, %component
  %element52 = extractelement <4 x float> %element18, i32 2
  %product53 = fmul float %element52, %component18
  %dotProduct54 = fadd float %product50, %product53
  %element56 = extractelement <4 x float> %element111, i32 2
  %product57 = fmul float %element56, %component19
  %dotProduct58 = fadd float %product57, %dotProduct54
  %element60 = extractelement <4 x float> %element114, i32 2
  %product61 = fmul float %element60, %component20
  %dotProduct62 = fadd float %product61, %dotProduct58
  %element64 = extractelement <4 x float> %element1, i32 3
  %product65 = fmul float %element64, %component
  %element67 = extractelement <4 x float> %element18, i32 3
  %product68 = fmul float %element67, %component18
  %dotProduct69 = fadd float %product65, %product68
  %element71 = extractelement <4 x float> %element111, i32 3
  %product72 = fmul float %element71, %component19
  %dotProduct73 = fadd float %product72, %dotProduct69
  %element75 = extractelement <4 x float> %element114, i32 3
  %product76 = fmul float %element75, %component20
  %dotProduct77 = fadd float %product76, %dotProduct73
  %14 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct32, i32 0, float %dotProduct47, i32 0, float %dotProduct62, i32 0, float %dotProduct77, i32 0)
  %gl_FragColor78 = fadd <4 x float> %gl_FragColor7, %14
  store <4 x float> %gl_FragColor78, <4 x float>* @gl_FragColor, align 16
  %column79 = fsub <4 x float> %element1, %element2
  %column82 = fsub <4 x float> %element18, %element29
  %column85 = fsub <4 x float> %element111, %element212
  %column88 = fsub <4 x float> %element114, %element215
  %dotres90 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %13, <4 x float> %column79)
  %dotres92 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %13, <4 x float> %column82)
  %dotres94 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %13, <4 x float> %column85)
  %dotres96 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %13, <4 x float> %column88)
  %15 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres90, i32 0, float %dotres92, i32 0, float %dotres94, i32 0, float %dotres96, i32 0)
  %gl_FragColor97 = fadd <4 x float> %gl_FragColor78, %15
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %.pre-phi687 = phi float [ %component20, %else ], [ %.pre686, %then ]
  %.pre-phi685 = phi float [ %component19, %else ], [ %.pre684, %then ]
  %.pre-phi683 = phi float [ %component18, %else ], [ %.pre682, %then ]
  %.pre-phi = phi float [ %component, %else ], [ %.pre, %then ]
  %storemerge681 = phi <4 x float> [ %gl_FragColor97, %else ], [ %gl_FragColor17, %then ]
  store <4 x float> %storemerge681, <4 x float>* @gl_FragColor, align 16
  %16 = load <4 x float>* @u, align 16
  %17 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %16, <4 x i32> <i32 2, i32 3, i32 0, i32 0>)
  %18 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %16, <4 x i32> <i32 3, i32 0, i32 0, i32 1>)
  %19 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %16, <4 x i32> <i32 0, i32 0, i32 1, i32 2>)
  %20 = extractelement <4 x float> %16, i32 0
  %21 = fmul float %.pre-phi, %20
  %22 = extractelement <4 x float> %16, i32 1
  %23 = fmul float %.pre-phi, %22
  %24 = extractelement <4 x float> %16, i32 2
  %25 = fmul float %.pre-phi, %24
  %26 = extractelement <4 x float> %16, i32 3
  %27 = fmul float %.pre-phi, %26
  %28 = fmul float %.pre-phi683, %20
  %29 = fmul float %.pre-phi683, %22
  %30 = fmul float %.pre-phi683, %24
  %31 = fmul float %.pre-phi683, %26
  %32 = fmul float %.pre-phi685, %20
  %33 = fmul float %.pre-phi685, %22
  %34 = fmul float %.pre-phi685, %24
  %35 = fmul float %.pre-phi685, %26
  %36 = fmul float %.pre-phi687, %20
  %37 = fmul float %.pre-phi687, %22
  %38 = fmul float %.pre-phi687, %24
  %39 = fmul float %.pre-phi687, %26
  %40 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %21, i32 0, float %23, i32 0, float %25, i32 0, float %27, i32 0)
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %28, i32 0, float %29, i32 0, float %30, i32 0, float %31, i32 0)
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %32, i32 0, float %33, i32 0, float %34, i32 0, float %35, i32 0)
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %36, i32 0, float %37, i32 0, float %38, i32 0, float %39, i32 0)
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %45 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float undef, float undef, float undef>, i32 14, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %46 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, i32 12, float undef, i32 undef, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0)
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float> undef, i32 15, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, <4 x float> %13, i32 0)
  %column149 = fadd <4 x float> %44, %40
  %column152 = fadd <4 x float> %45, %41
  %column155 = fadd <4 x float> %46, %42
  %column158 = fadd <4 x float> %47, %43
  %column199 = fadd <4 x float> %16, %column149
  %column202 = fadd <4 x float> %19, %column152
  %column205 = fadd <4 x float> %18, %column155
  %column208 = fadd <4 x float> %17, %column158
  %48 = load [4 x <4 x float>] addrspace(2)* @un34, align 16, !gla.uniform !3
  %element2211 = extractvalue [4 x <4 x float>] %48, 0
  %49 = fcmp oeq <4 x float> %column199, %element2211
  %comp212 = call i1 @llvm.gla.all.v4i1(<4 x i1> %49)
  %element2214 = extractvalue [4 x <4 x float>] %48, 1
  %50 = fcmp oeq <4 x float> %column202, %element2214
  %comp215 = call i1 @llvm.gla.all.v4i1(<4 x i1> %50)
  %51 = and i1 %comp212, %comp215
  %element2217 = extractvalue [4 x <4 x float>] %48, 2
  %52 = fcmp oeq <4 x float> %column205, %element2217
  %comp218 = call i1 @llvm.gla.all.v4i1(<4 x i1> %52)
  %53 = and i1 %51, %comp218
  %element2220 = extractvalue [4 x <4 x float>] %48, 3
  %54 = fcmp oeq <4 x float> %column208, %element2220
  %comp221 = call i1 @llvm.gla.all.v4i1(<4 x i1> %54)
  %55 = and i1 %53, %comp221
  br i1 %55, label %then222, label %else288

then222:                                          ; preds = %ifmerge
  %element228 = extractelement <4 x float> %column199, i32 0
  %product229 = fmul float %20, %element228
  %element231 = extractelement <4 x float> %column202, i32 0
  %product232 = fmul float %22, %element231
  %dotProduct233 = fadd float %product229, %product232
  %element235 = extractelement <4 x float> %column205, i32 0
  %product236 = fmul float %24, %element235
  %dotProduct237 = fadd float %product236, %dotProduct233
  %element239 = extractelement <4 x float> %column208, i32 0
  %product240 = fmul float %26, %element239
  %dotProduct241 = fadd float %product240, %dotProduct237
  %element243 = extractelement <4 x float> %column199, i32 1
  %product244 = fmul float %20, %element243
  %element246 = extractelement <4 x float> %column202, i32 1
  %product247 = fmul float %22, %element246
  %dotProduct248 = fadd float %product244, %product247
  %element250 = extractelement <4 x float> %column205, i32 1
  %product251 = fmul float %24, %element250
  %dotProduct252 = fadd float %product251, %dotProduct248
  %element254 = extractelement <4 x float> %column208, i32 1
  %product255 = fmul float %26, %element254
  %dotProduct256 = fadd float %product255, %dotProduct252
  %element258 = extractelement <4 x float> %column199, i32 2
  %product259 = fmul float %20, %element258
  %element261 = extractelement <4 x float> %column202, i32 2
  %product262 = fmul float %22, %element261
  %dotProduct263 = fadd float %product259, %product262
  %element265 = extractelement <4 x float> %column205, i32 2
  %product266 = fmul float %24, %element265
  %dotProduct267 = fadd float %product266, %dotProduct263
  %element269 = extractelement <4 x float> %column208, i32 2
  %product270 = fmul float %26, %element269
  %dotProduct271 = fadd float %product270, %dotProduct267
  %element273 = extractelement <4 x float> %column199, i32 3
  %product274 = fmul float %20, %element273
  %element276 = extractelement <4 x float> %column202, i32 3
  %product277 = fmul float %22, %element276
  %dotProduct278 = fadd float %product274, %product277
  %element280 = extractelement <4 x float> %column205, i32 3
  %product281 = fmul float %24, %element280
  %dotProduct282 = fadd float %product281, %dotProduct278
  %element284 = extractelement <4 x float> %column208, i32 3
  %product285 = fmul float %26, %element284
  %dotProduct286 = fadd float %product285, %dotProduct282
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct241, i32 0, float %dotProduct256, i32 0, float %dotProduct271, i32 0, float %dotProduct286, i32 0)
  br label %ifmerge680

else288:                                          ; preds = %ifmerge
  %57 = load [4 x <4 x float>] addrspace(2)* @um43, align 16, !gla.uniform !8
  %rightColumn289 = extractvalue [4 x <4 x float>] %57, 0
  %leftComp = extractelement <4 x float> %element2211, i32 0
  %rightComp = extractelement <4 x float> %rightColumn289, i32 0
  %product291 = fmul float %leftComp, %rightComp
  %leftComp293 = extractelement <4 x float> %element2214, i32 0
  %rightComp294 = extractelement <4 x float> %rightColumn289, i32 1
  %product295 = fmul float %leftComp293, %rightComp294
  %dotProduct296 = fadd float %product291, %product295
  %leftComp298 = extractelement <4 x float> %element2217, i32 0
  %rightComp299 = extractelement <4 x float> %rightColumn289, i32 2
  %product300 = fmul float %leftComp298, %rightComp299
  %dotProduct301 = fadd float %product300, %dotProduct296
  %leftComp303 = extractelement <4 x float> %element2220, i32 0
  %rightComp304 = extractelement <4 x float> %rightColumn289, i32 3
  %product305 = fmul float %leftComp303, %rightComp304
  %dotProduct306 = fadd float %product305, %dotProduct301
  %leftComp309 = extractelement <4 x float> %element2211, i32 1
  %product311 = fmul float %leftComp309, %rightComp
  %leftComp313 = extractelement <4 x float> %element2214, i32 1
  %product315 = fmul float %leftComp313, %rightComp294
  %dotProduct316 = fadd float %product311, %product315
  %leftComp318 = extractelement <4 x float> %element2217, i32 1
  %product320 = fmul float %leftComp318, %rightComp299
  %dotProduct321 = fadd float %product320, %dotProduct316
  %leftComp323 = extractelement <4 x float> %element2220, i32 1
  %product325 = fmul float %leftComp323, %rightComp304
  %dotProduct326 = fadd float %product325, %dotProduct321
  %leftComp329 = extractelement <4 x float> %element2211, i32 2
  %product331 = fmul float %leftComp329, %rightComp
  %leftComp333 = extractelement <4 x float> %element2214, i32 2
  %product335 = fmul float %leftComp333, %rightComp294
  %dotProduct336 = fadd float %product331, %product335
  %leftComp338 = extractelement <4 x float> %element2217, i32 2
  %product340 = fmul float %leftComp338, %rightComp299
  %dotProduct341 = fadd float %product340, %dotProduct336
  %leftComp343 = extractelement <4 x float> %element2220, i32 2
  %product345 = fmul float %leftComp343, %rightComp304
  %dotProduct346 = fadd float %product345, %dotProduct341
  %leftComp349 = extractelement <4 x float> %element2211, i32 3
  %product351 = fmul float %leftComp349, %rightComp
  %leftComp353 = extractelement <4 x float> %element2214, i32 3
  %product355 = fmul float %leftComp353, %rightComp294
  %dotProduct356 = fadd float %product351, %product355
  %leftComp358 = extractelement <4 x float> %element2217, i32 3
  %product360 = fmul float %leftComp358, %rightComp299
  %dotProduct361 = fadd float %product360, %dotProduct356
  %leftComp363 = extractelement <4 x float> %element2220, i32 3
  %product365 = fmul float %leftComp363, %rightComp304
  %dotProduct366 = fadd float %product365, %dotProduct361
  %rightColumn369 = extractvalue [4 x <4 x float>] %57, 1
  %rightComp372 = extractelement <4 x float> %rightColumn369, i32 0
  %product373 = fmul float %leftComp, %rightComp372
  %rightComp376 = extractelement <4 x float> %rightColumn369, i32 1
  %product377 = fmul float %leftComp293, %rightComp376
  %dotProduct378 = fadd float %product373, %product377
  %rightComp381 = extractelement <4 x float> %rightColumn369, i32 2
  %product382 = fmul float %leftComp298, %rightComp381
  %dotProduct383 = fadd float %product382, %dotProduct378
  %rightComp386 = extractelement <4 x float> %rightColumn369, i32 3
  %product387 = fmul float %leftComp303, %rightComp386
  %dotProduct388 = fadd float %product387, %dotProduct383
  %product393 = fmul float %leftComp309, %rightComp372
  %product397 = fmul float %leftComp313, %rightComp376
  %dotProduct398 = fadd float %product393, %product397
  %product402 = fmul float %leftComp318, %rightComp381
  %dotProduct403 = fadd float %product402, %dotProduct398
  %product407 = fmul float %leftComp323, %rightComp386
  %dotProduct408 = fadd float %product407, %dotProduct403
  %product413 = fmul float %leftComp329, %rightComp372
  %product417 = fmul float %leftComp333, %rightComp376
  %dotProduct418 = fadd float %product413, %product417
  %product422 = fmul float %leftComp338, %rightComp381
  %dotProduct423 = fadd float %product422, %dotProduct418
  %product427 = fmul float %leftComp343, %rightComp386
  %dotProduct428 = fadd float %product427, %dotProduct423
  %product433 = fmul float %leftComp349, %rightComp372
  %product437 = fmul float %leftComp353, %rightComp376
  %dotProduct438 = fadd float %product433, %product437
  %product442 = fmul float %leftComp358, %rightComp381
  %dotProduct443 = fadd float %product442, %dotProduct438
  %product447 = fmul float %leftComp363, %rightComp386
  %dotProduct448 = fadd float %product447, %dotProduct443
  %rightColumn451 = extractvalue [4 x <4 x float>] %57, 2
  %rightComp454 = extractelement <4 x float> %rightColumn451, i32 0
  %product455 = fmul float %leftComp, %rightComp454
  %rightComp458 = extractelement <4 x float> %rightColumn451, i32 1
  %product459 = fmul float %leftComp293, %rightComp458
  %dotProduct460 = fadd float %product455, %product459
  %rightComp463 = extractelement <4 x float> %rightColumn451, i32 2
  %product464 = fmul float %leftComp298, %rightComp463
  %dotProduct465 = fadd float %product464, %dotProduct460
  %rightComp468 = extractelement <4 x float> %rightColumn451, i32 3
  %product469 = fmul float %leftComp303, %rightComp468
  %dotProduct470 = fadd float %product469, %dotProduct465
  %product475 = fmul float %leftComp309, %rightComp454
  %product479 = fmul float %leftComp313, %rightComp458
  %dotProduct480 = fadd float %product475, %product479
  %product484 = fmul float %leftComp318, %rightComp463
  %dotProduct485 = fadd float %product484, %dotProduct480
  %product489 = fmul float %leftComp323, %rightComp468
  %dotProduct490 = fadd float %product489, %dotProduct485
  %product495 = fmul float %leftComp329, %rightComp454
  %product499 = fmul float %leftComp333, %rightComp458
  %dotProduct500 = fadd float %product495, %product499
  %product504 = fmul float %leftComp338, %rightComp463
  %dotProduct505 = fadd float %product504, %dotProduct500
  %product509 = fmul float %leftComp343, %rightComp468
  %dotProduct510 = fadd float %product509, %dotProduct505
  %product515 = fmul float %leftComp349, %rightComp454
  %product519 = fmul float %leftComp353, %rightComp458
  %dotProduct520 = fadd float %product515, %product519
  %product524 = fmul float %leftComp358, %rightComp463
  %dotProduct525 = fadd float %product524, %dotProduct520
  %product529 = fmul float %leftComp363, %rightComp468
  %dotProduct530 = fadd float %product529, %dotProduct525
  %rightColumn533 = extractvalue [4 x <4 x float>] %57, 3
  %rightComp536 = extractelement <4 x float> %rightColumn533, i32 0
  %product537 = fmul float %leftComp, %rightComp536
  %rightComp540 = extractelement <4 x float> %rightColumn533, i32 1
  %product541 = fmul float %leftComp293, %rightComp540
  %dotProduct542 = fadd float %product537, %product541
  %rightComp545 = extractelement <4 x float> %rightColumn533, i32 2
  %product546 = fmul float %leftComp298, %rightComp545
  %dotProduct547 = fadd float %product546, %dotProduct542
  %rightComp550 = extractelement <4 x float> %rightColumn533, i32 3
  %product551 = fmul float %leftComp303, %rightComp550
  %dotProduct552 = fadd float %product551, %dotProduct547
  %product557 = fmul float %leftComp309, %rightComp536
  %product561 = fmul float %leftComp313, %rightComp540
  %dotProduct562 = fadd float %product557, %product561
  %product566 = fmul float %leftComp318, %rightComp545
  %dotProduct567 = fadd float %product566, %dotProduct562
  %product571 = fmul float %leftComp323, %rightComp550
  %dotProduct572 = fadd float %product571, %dotProduct567
  %product577 = fmul float %leftComp329, %rightComp536
  %product581 = fmul float %leftComp333, %rightComp540
  %dotProduct582 = fadd float %product577, %product581
  %product586 = fmul float %leftComp338, %rightComp545
  %dotProduct587 = fadd float %product586, %dotProduct582
  %product591 = fmul float %leftComp343, %rightComp550
  %dotProduct592 = fadd float %product591, %dotProduct587
  %product597 = fmul float %leftComp349, %rightComp536
  %product601 = fmul float %leftComp353, %rightComp540
  %dotProduct602 = fadd float %product597, %product601
  %product606 = fmul float %leftComp358, %rightComp545
  %dotProduct607 = fadd float %product606, %dotProduct602
  %product611 = fmul float %leftComp363, %rightComp550
  %dotProduct612 = fadd float %product611, %dotProduct607
  %product621 = fmul float %.pre-phi, %dotProduct306
  %product624 = fmul float %.pre-phi683, %dotProduct388
  %dotProduct625 = fadd float %product621, %product624
  %product628 = fmul float %.pre-phi685, %dotProduct470
  %dotProduct629 = fadd float %product628, %dotProduct625
  %product632 = fmul float %.pre-phi687, %dotProduct552
  %dotProduct633 = fadd float %product632, %dotProduct629
  %product636 = fmul float %.pre-phi, %dotProduct326
  %product639 = fmul float %.pre-phi683, %dotProduct408
  %dotProduct640 = fadd float %product636, %product639
  %product643 = fmul float %.pre-phi685, %dotProduct490
  %dotProduct644 = fadd float %product643, %dotProduct640
  %product647 = fmul float %.pre-phi687, %dotProduct572
  %dotProduct648 = fadd float %product647, %dotProduct644
  %product651 = fmul float %.pre-phi, %dotProduct346
  %product654 = fmul float %.pre-phi683, %dotProduct428
  %dotProduct655 = fadd float %product651, %product654
  %product658 = fmul float %.pre-phi685, %dotProduct510
  %dotProduct659 = fadd float %product658, %dotProduct655
  %product662 = fmul float %.pre-phi687, %dotProduct592
  %dotProduct663 = fadd float %product662, %dotProduct659
  %product666 = fmul float %.pre-phi, %dotProduct366
  %product669 = fmul float %.pre-phi683, %dotProduct448
  %dotProduct670 = fadd float %product666, %product669
  %product673 = fmul float %.pre-phi685, %dotProduct530
  %dotProduct674 = fadd float %product673, %dotProduct670
  %product677 = fmul float %.pre-phi687, %dotProduct612
  %dotProduct678 = fadd float %product677, %dotProduct674
  %58 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct633, i32 0, float %dotProduct648, i32 0, float %dotProduct663, i32 0, float %dotProduct678, i32 0)
  br label %ifmerge680

ifmerge680:                                       ; preds = %else288, %then222
  %.pn = phi <4 x float> [ %56, %then222 ], [ %58, %else288 ]
  %storemerge = fadd <4 x float> %storemerge681, %.pn
  store <4 x float> %storemerge, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge680
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float>, i32, float, i32, float, i32, float, i32, <4 x float>, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8}
!gla.inputs = !{!9, !11, !13}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"un34", i32 12, [4 x <4 x float>]* @un34_typeProxy, metadata !4}
!4 = metadata !{i32 3, i32 0, i32 1024, null}
!5 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !4}
!6 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !4}
!7 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !4}
!8 = metadata !{metadata !"um43", i32 12, [4 x <4 x float>]* @um43_typeProxy, metadata !4}
!9 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!11 = metadata !{metadata !"v", i32 1, <4 x float>* @v_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!13 = metadata !{metadata !"u", i32 1, <4 x float>* @u_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}
#version 130
// LunarGOO output
uniform mat4 un34;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
uniform mat4 um43;
in vec3 Color;
in vec4 v;
in vec4 u;
const float C_1d0 = 1.0;
const float C_0d0 = 0.0;
const vec4 C_obaw8x1 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
	float _L;
	float _L1;
	float _L2;
	float _L3;
	vec4 storemerge;
	vec4 _L4;
	gl_FragColor = un34[1];
	float dotres = dot(Color, colorTransform[0]);
	float dotres1 = dot(Color, colorTransform[1]);
	float dotres2 = dot(Color, colorTransform[2]);
	vec4 H_vokf33 = vec4(dotres, dotres1, dotres2, C_1d0);
	vec4 Ll_FragColor1 = H_vokf33 + un34[1];
	gl_FragColor = Ll_FragColor1;
	bvec4 H_0lvnv21 = notEqual(m[0], n[0]);
	bool comp = any(H_0lvnv21);
	bvec4 H_0aqk621 = notEqual(m[1], n[1]);
	bool comp1 = any(H_0aqk621);
	bool H_ocntog = comp || comp1;
	bvec4 H_c807vc1 = notEqual(m[2], n[2]);
	bool comp2 = any(H_c807vc1);
	bool H_ly5bmd1 = H_ocntog || comp2;
	bvec4 H_sxuf51 = notEqual(m[3], n[3]);
	bool comp3 = any(H_sxuf51);
	bool H_4jdpn6 = H_ly5bmd1 || comp3;
	if (H_4jdpn6) {
		vec4 Ll_FragColor2 = Ll_FragColor1 + v;
		_L = v.w;
		_L1 = v.z;
		_L2 = v.y;
		_L3 = v.x;
		storemerge = Ll_FragColor2;
	} else {
		float product = m[0].x * v.x;
		float product1 = m[1].x * v.y;
		float dotProduct = product + product1;
		float product2 = m[2].x * v.z;
		float dotProduct1 = dotProduct + product2;
		float product3 = m[3].x * v.w;
		float dotProduct2 = dotProduct1 + product3;
		float product4 = m[0].y * v.x;
		float product5 = m[1].y * v.y;
		float dotProduct3 = product4 + product5;
		float product6 = m[2].y * v.z;
		float dotProduct4 = dotProduct3 + product6;
		float product7 = m[3].y * v.w;
		float dotProduct5 = dotProduct4 + product7;
		float product8 = m[0].z * v.x;
		float product9 = m[1].z * v.y;
		float dotProduct6 = product8 + product9;
		float producta = m[2].z * v.z;
		float dotProduct7 = dotProduct6 + producta;
		float productb = m[3].z * v.w;
		float dotProduct8 = dotProduct7 + productb;
		float productc = m[0].w * v.x;
		float productd = m[1].w * v.y;
		float dotProduct9 = productc + productd;
		float producte = m[2].w * v.z;
		float dotProducta = dotProduct9 + producte;
		float productf = m[3].w * v.w;
		float dotProductb = dotProducta + productf;
		vec4 H_9ywkds = vec4(dotProduct2, dotProduct5, dotProduct8, dotProductb);
		vec4 Ll_FragColor3 = H_9ywkds + Ll_FragColor1;
		gl_FragColor = Ll_FragColor3;
		vec4 column = m[0] - n[0];
		vec4 column1 = m[1] - n[1];
		vec4 column2 = m[2] - n[2];
		vec4 column3 = m[3] - n[3];
		float dotres3 = dot(v, column);
		float dotres4 = dot(v, column1);
		float dotres5 = dot(v, column2);
		float dotres6 = dot(v, column3);
		vec4 H_40o89y = vec4(dotres3, dotres4, dotres5, dotres6);
		vec4 Ll_FragColor4 = H_40o89y + Ll_FragColor3;
		_L = v.w;
		_L1 = v.z;
		_L2 = v.y;
		_L3 = v.x;
		storemerge = Ll_FragColor4;
	}
	
	gl_FragColor = storemerge;
	float H_gypiqu1 = _L3 * u.x;
	float H_fnbi0v1 = _L3 * u.y;
	float H_ecxhav1 = _L3 * u.z;
	float H_h94jgu1 = _L3 * u.w;
	float H_fcy2pk = _L2 * u.x;
	float H_gnc3fk = _L2 * u.y;
	float H_dq529l = _L2 * u.z;
	float H_aty03m = _L2 * u.w;
	float H_yn8v0n = _L1 * u.x;
	float H_xcuuan = _L1 * u.y;
	float H_0a1wgm = _L1 * u.z;
	float H_378xml = _L1 * u.w;
	float H_db6v2t = _L * u.x;
	float H_emkvss = _L * u.y;
	float H_fxyvis = _L * u.z;
	float H_4klrkv = _L * u.w;
	vec4 H_k8a9rc1 = vec4(H_gypiqu1, H_fnbi0v1, H_ecxhav1, H_h94jgu1);
	vec4 H_4sj0cu1 = vec4(H_fcy2pk, H_gnc3fk, H_dq529l, H_aty03m);
	vec4 H_tsz8ls1 = vec4(H_yn8v0n, H_xcuuan, H_0a1wgm, H_378xml);
	vec4 H_mw0kse1 = vec4(H_db6v2t, H_emkvss, H_fxyvis, H_4klrkv);
	vec4 H_mvyrdq = vec4(_L3, C_0d0, C_0d0, C_0d0);
	vec4 H_5agmpi = C_obaw8x1;
	H_5agmpi.yzw = vec3(_L3, C_0d0, C_0d0);
	vec4 H_5agmpir = C_obaw8x1;
	H_5agmpir.zw = vec2(_L3, C_0d0);
	vec4 H_uoyl79 = vec4(C_0d0, C_0d0, C_0d0, v.x);
	vec4 column4 = H_k8a9rc1 + H_mvyrdq;
	vec4 column5 = H_4sj0cu1 + H_5agmpi;
	vec4 column6 = H_5agmpir + H_tsz8ls1;
	vec4 column7 = H_mw0kse1 + H_uoyl79;
	vec4 column8 = column4 + u;
	vec4 column9 = column5 + u.xxyz;
	vec4 columna = column6 + u.wxxy;
	vec4 columnb = column7 + u.zwxx;
	bvec4 H_8dgtzu1 = equal(column8, un34[0]);
	bool comp4 = all(H_8dgtzu1);
	bvec4 H_c1kb3w1 = equal(column9, un34[1]);
	bool comp5 = all(H_c1kb3w1);
	bool H_weweva = comp4 && comp5;
	bvec4 H_dres2b1 = equal(columna, un34[2]);
	bool comp6 = all(H_dres2b1);
	bool H_4f99c11 = H_weweva && comp6;
	bvec4 H_vsj6v8 = equal(columnb, un34[3]);
	bool comp7 = all(H_vsj6v8);
	bool H_d5gruo1 = H_4f99c11 && comp7;
	if (H_d5gruo1) {
		float productg = column8.x * u.x;
		float producth = column9.x * u.y;
		float dotProductc = productg + producth;
		float producti = columna.x * u.z;
		float dotProductd = dotProductc + producti;
		float productj = columnb.x * u.w;
		float dotProducte = dotProductd + productj;
		float productk = column8.y * u.x;
		float productl = column9.y * u.y;
		float dotProductf = productk + productl;
		float productm = columna.y * u.z;
		float dotProductg = dotProductf + productm;
		float productn = columnb.y * u.w;
		float dotProducth = dotProductg + productn;
		float producto = column8.z * u.x;
		float productp = column9.z * u.y;
		float dotProducti = producto + productp;
		float productq = columna.z * u.z;
		float dotProductj = dotProducti + productq;
		float productr = columnb.z * u.w;
		float dotProductk = dotProductj + productr;
		float products = column8.w * u.x;
		float productt = column9.w * u.y;
		float dotProductl = products + productt;
		float productu = columna.w * u.z;
		float dotProductm = dotProductl + productu;
		float productv = columnb.w * u.w;
		float dotProductn = dotProductm + productv;
		vec4 H_cvqpsy = vec4(dotProducte, dotProducth, dotProductk, dotProductn);
		_L4 = H_cvqpsy;
	} else {
		float productw = um43[0].x * un34[0].x;
		float productx = um43[0].y * un34[1].x;
		float dotProducto = productw + productx;
		float producty = um43[0].z * un34[2].x;
		float dotProductp = dotProducto + producty;
		float productz = um43[0].w * un34[3].x;
		float dotProductq = dotProductp + productz;
		float product01 = um43[0].x * un34[0].y;
		float product11 = um43[0].y * un34[1].y;
		float dotProductr = product01 + product11;
		float product21 = um43[0].z * un34[2].y;
		float dotProducts = dotProductr + product21;
		float product31 = um43[0].w * un34[3].y;
		float dotProductt = dotProducts + product31;
		float product41 = um43[0].x * un34[0].z;
		float product51 = um43[0].y * un34[1].z;
		float dotProductu = product41 + product51;
		float product61 = um43[0].z * un34[2].z;
		float dotProductv = dotProductu + product61;
		float product71 = um43[0].w * un34[3].z;
		float dotProductw = dotProductv + product71;
		float product81 = um43[0].x * un34[0].w;
		float product91 = um43[0].y * un34[1].w;
		float dotProductx = product81 + product91;
		float producta1 = um43[0].z * un34[2].w;
		float dotProducty = dotProductx + producta1;
		float productb1 = um43[0].w * un34[3].w;
		float dotProductz = dotProducty + productb1;
		float productc1 = um43[1].x * un34[0].x;
		float productd1 = um43[1].y * un34[1].x;
		float dotProduct01 = productc1 + productd1;
		float producte1 = um43[1].z * un34[2].x;
		float dotProduct11 = dotProduct01 + producte1;
		float productf1 = um43[1].w * un34[3].x;
		float dotProduct21 = dotProduct11 + productf1;
		float productg1 = um43[1].x * un34[0].y;
		float producth1 = um43[1].y * un34[1].y;
		float dotProduct31 = productg1 + producth1;
		float producti1 = um43[1].z * un34[2].y;
		float dotProduct41 = dotProduct31 + producti1;
		float productj1 = um43[1].w * un34[3].y;
		float dotProduct51 = dotProduct41 + productj1;
		float productk1 = um43[1].x * un34[0].z;
		float productl1 = um43[1].y * un34[1].z;
		float dotProduct61 = productk1 + productl1;
		float productm1 = um43[1].z * un34[2].z;
		float dotProduct71 = dotProduct61 + productm1;
		float productn1 = um43[1].w * un34[3].z;
		float dotProduct81 = dotProduct71 + productn1;
		float producto1 = um43[1].x * un34[0].w;
		float productp1 = um43[1].y * un34[1].w;
		float dotProduct91 = producto1 + productp1;
		float productq1 = um43[1].z * un34[2].w;
		float dotProducta1 = dotProduct91 + productq1;
		float productr1 = um43[1].w * un34[3].w;
		float dotProductb1 = dotProducta1 + productr1;
		float products1 = um43[2].x * un34[0].x;
		float productt1 = um43[2].y * un34[1].x;
		float dotProductc1 = products1 + productt1;
		float productu1 = um43[2].z * un34[2].x;
		float dotProductd1 = dotProductc1 + productu1;
		float productv1 = um43[2].w * un34[3].x;
		float dotProducte1 = dotProductd1 + productv1;
		float productw1 = um43[2].x * un34[0].y;
		float productx1 = um43[2].y * un34[1].y;
		float dotProductf1 = productw1 + productx1;
		float producty1 = um43[2].z * un34[2].y;
		float dotProductg1 = dotProductf1 + producty1;
		float productz1 = um43[2].w * un34[3].y;
		float dotProducth1 = dotProductg1 + productz1;
		float product02 = um43[2].x * un34[0].z;
		float product12 = um43[2].y * un34[1].z;
		float dotProducti1 = product02 + product12;
		float product22 = um43[2].z * un34[2].z;
		float dotProductj1 = dotProducti1 + product22;
		float product32 = um43[2].w * un34[3].z;
		float dotProductk1 = dotProductj1 + product32;
		float product42 = um43[2].x * un34[0].w;
		float product52 = um43[2].y * un34[1].w;
		float dotProductl1 = product42 + product52;
		float product62 = um43[2].z * un34[2].w;
		float dotProductm1 = dotProductl1 + product62;
		float product72 = um43[2].w * un34[3].w;
		float dotProductn1 = dotProductm1 + product72;
		float product82 = um43[3].x * un34[0].x;
		float product92 = um43[3].y * un34[1].x;
		float dotProducto1 = product82 + product92;
		float producta2 = um43[3].z * un34[2].x;
		float dotProductp1 = dotProducto1 + producta2;
		float productb2 = um43[3].w * un34[3].x;
		float dotProductq1 = dotProductp1 + productb2;
		float productc2 = um43[3].x * un34[0].y;
		float productd2 = um43[3].y * un34[1].y;
		float dotProductr1 = productc2 + productd2;
		float producte2 = um43[3].z * un34[2].y;
		float dotProducts1 = dotProductr1 + producte2;
		float productf2 = um43[3].w * un34[3].y;
		float dotProductt1 = dotProducts1 + productf2;
		float productg2 = um43[3].x * un34[0].z;
		float producth2 = um43[3].y * un34[1].z;
		float dotProductu1 = productg2 + producth2;
		float producti2 = um43[3].z * un34[2].z;
		float dotProductv1 = dotProductu1 + producti2;
		float productj2 = um43[3].w * un34[3].z;
		float dotProductw1 = dotProductv1 + productj2;
		float productk2 = um43[3].x * un34[0].w;
		float productl2 = um43[3].y * un34[1].w;
		float dotProductx1 = productk2 + productl2;
		float productm2 = um43[3].z * un34[2].w;
		float dotProducty1 = dotProductx1 + productm2;
		float productn2 = um43[3].w * un34[3].w;
		float dotProductz1 = dotProducty1 + productn2;
		float producto2 = _L3 * dotProductq;
		float productp2 = _L2 * dotProduct21;
		float dotProduct02 = producto2 + productp2;
		float productq2 = _L1 * dotProducte1;
		float dotProduct12 = dotProduct02 + productq2;
		float productr2 = _L * dotProductq1;
		float dotProduct22 = dotProduct12 + productr2;
		float products2 = _L3 * dotProductt;
		float productt2 = _L2 * dotProduct51;
		float dotProduct32 = products2 + productt2;
		float productu2 = _L1 * dotProducth1;
		float dotProduct42 = dotProduct32 + productu2;
		float productv2 = _L * dotProductt1;
		float dotProduct52 = dotProduct42 + productv2;
		float productw2 = _L3 * dotProductw;
		float productx2 = _L2 * dotProduct81;
		float dotProduct62 = productw2 + productx2;
		float producty2 = _L1 * dotProductk1;
		float dotProduct72 = dotProduct62 + producty2;
		float productz2 = _L * dotProductw1;
		float dotProduct82 = dotProduct72 + productz2;
		float product03 = _L3 * dotProductz;
		float product13 = _L2 * dotProductb1;
		float dotProduct92 = product03 + product13;
		float product23 = _L1 * dotProductn1;
		float dotProducta2 = dotProduct92 + product23;
		float product33 = _L * dotProductz1;
		float dotProductb2 = dotProducta2 + product33;
		vec4 H_j8st0t1 = vec4(dotProduct22, dotProduct52, dotProduct82, dotProductb2);
		_L4 = H_j8st0t1;
	}
	
	vec4 storemerge1 = _L4 + storemerge;
	gl_FragColor = storemerge1;
	
}

#version 130
// LunarGOO output
uniform mat4 un34;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
uniform mat4 um43;
in vec3 Color;
in vec4 v;
in vec4 u;
const float C_1d0 = 1.0;
const float C_0d0 = 0.0;
const vec4 C_obaw8x1 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
	vec4 storemerge;
	float _L;
	float _L1;
	float _L2;
	float _L3;
	vec4 _L4;
	gl_FragColor = un34[1];
	float dotres = dot(Color, colorTransform[0]);
	float dotres1 = dot(Color, colorTransform[1]);
	float dotres2 = dot(Color, colorTransform[2]);
	vec4 H_vokf33 = vec4(dotres, dotres1, dotres2, C_1d0);
	vec4 Ll_FragColor = H_vokf33 + un34[1];
	gl_FragColor = Ll_FragColor;
	bvec4 H_0lvnv = notEqual(m[0], n[0]);
	bool comp = any(H_0lvnv);
	bvec4 H_0aqk = notEqual(m[1], n[1]);
	bool comp1 = any(H_0aqk);
	bool H_ocntog = comp || comp1;
	bvec4 H_c807vc = notEqual(m[2], n[2]);
	bool comp2 = any(H_c807vc);
	bool H_ly5bmd = H_ocntog || comp2;
	bvec4 H_sxuf = notEqual(m[3], n[3]);
	bool comp3 = any(H_sxuf);
	bool H_4jdpn = H_ly5bmd || comp3;
	if (H_4jdpn) {
		vec4 Ll_FragColor1 = Ll_FragColor + v;
		storemerge = Ll_FragColor1;
		_L = v.x;
		_L1 = v.y;
		_L2 = v.z;
		_L3 = v.w;
	} else {
		float product = m[0].x * v.x;
		float product1 = m[1].x * v.y;
		float dotProduct = product + product1;
		float product2 = m[2].x * v.z;
		float dotProduct1 = dotProduct + product2;
		float product3 = m[3].x * v.w;
		float dotProduct2 = dotProduct1 + product3;
		float product4 = m[0].y * v.x;
		float product5 = m[1].y * v.y;
		float dotProduct3 = product4 + product5;
		float product6 = m[2].y * v.z;
		float dotProduct4 = dotProduct3 + product6;
		float product7 = m[3].y * v.w;
		float dotProduct5 = dotProduct4 + product7;
		float product8 = m[0].z * v.x;
		float product9 = m[1].z * v.y;
		float dotProduct6 = product8 + product9;
		float producta = m[2].z * v.z;
		float dotProduct7 = dotProduct6 + producta;
		float productb = m[3].z * v.w;
		float dotProduct8 = dotProduct7 + productb;
		float productc = m[0].w * v.x;
		float productd = m[1].w * v.y;
		float dotProduct9 = productc + productd;
		float producte = m[2].w * v.z;
		float dotProducta = dotProduct9 + producte;
		float productf = m[3].w * v.w;
		float dotProductb = dotProducta + productf;
		vec4 H_9ywkds = vec4(dotProduct2, dotProduct5, dotProduct8, dotProductb);
		vec4 Ll_FragColor2 = H_9ywkds + Ll_FragColor;
		gl_FragColor = Ll_FragColor2;
		vec4 column = m[0] - n[0];
		vec4 column1 = m[1] - n[1];
		vec4 column2 = m[2] - n[2];
		vec4 column3 = m[3] - n[3];
		float dotres3 = dot(v, column);
		float dotres4 = dot(v, column1);
		float dotres5 = dot(v, column2);
		float dotres6 = dot(v, column3);
		vec4 H_40o89y = vec4(dotres3, dotres4, dotres5, dotres6);
		vec4 Ll_FragColor3 = H_40o89y + Ll_FragColor2;
		storemerge = Ll_FragColor3;
		_L = v.x;
		_L1 = v.y;
		_L2 = v.z;
		_L3 = v.w;
	}
	
	gl_FragColor = storemerge;
	float H_gypiqu = _L * u.x;
	float H_fnbi0v = _L * u.y;
	float H_ecxhav = _L * u.z;
	float H_h94jgu = _L * u.w;
	float H_fcy2pk = _L1 * u.x;
	float H_gnc3fk = _L1 * u.y;
	float H_dq529l = _L1 * u.z;
	float H_aty03m = _L1 * u.w;
	float H_yn8v0n = _L2 * u.x;
	float H_xcuuan = _L2 * u.y;
	float H_0a1wgm = _L2 * u.z;
	float H_378xml = _L2 * u.w;
	float H_db6v2t = _L3 * u.x;
	float H_emkvss = _L3 * u.y;
	float H_fxyvis = _L3 * u.z;
	float H_4klrkv = _L3 * u.w;
	vec4 H_wfd8cv1 = vec4(H_gypiqu, H_fnbi0v, H_ecxhav, H_h94jgu);
	vec4 H_4sj0cu1 = vec4(H_fcy2pk, H_gnc3fk, H_dq529l, H_aty03m);
	vec4 H_tsz8ls1 = vec4(H_yn8v0n, H_xcuuan, H_0a1wgm, H_378xml);
	vec4 H_mw0kse1 = vec4(H_db6v2t, H_emkvss, H_fxyvis, H_4klrkv);
	vec4 H_b9c01e1 = vec4(_L, C_0d0, C_0d0, C_0d0);
	vec4 H_5agmpi = C_obaw8x1;
	H_5agmpi.yzw = vec3(_L, C_0d0, C_0d0);
	vec4 H_5agmpir = C_obaw8x1;
	H_5agmpir.zw = vec2(_L, C_0d0);
	vec4 H_uoyl79 = vec4(C_0d0, C_0d0, C_0d0, v.x);
	vec4 column4 = H_b9c01e1 + H_wfd8cv1;
	vec4 column5 = H_4sj0cu1 + H_5agmpi;
	vec4 column6 = H_5agmpir + H_tsz8ls1;
	vec4 column7 = H_mw0kse1 + H_uoyl79;
	vec4 column8 = column4 + u;
	vec4 column9 = column5 + u.xxyz;
	vec4 columna = column6 + u.wxxy;
	vec4 columnb = column7 + u.zwxx;
	bvec4 H_8dgtzu = equal(column8, un34[0]);
	bool comp4 = all(H_8dgtzu);
	bvec4 H_c1kb3w = equal(column9, un34[1]);
	bool comp5 = all(H_c1kb3w);
	bool H_weweva = comp4 && comp5;
	bvec4 H_dres2b = equal(columna, un34[2]);
	bool comp6 = all(H_dres2b);
	bool H_4f99c = H_weweva && comp6;
	bvec4 H_vsj6v = equal(columnb, un34[3]);
	bool comp7 = all(H_vsj6v);
	bool H_d5gruo = H_4f99c && comp7;
	if (H_d5gruo) {
		float productg = column8.x * u.x;
		float producth = column9.x * u.y;
		float dotProductc = productg + producth;
		float producti = columna.x * u.z;
		float dotProductd = dotProductc + producti;
		float productj = columnb.x * u.w;
		float dotProducte = dotProductd + productj;
		float productk = column8.y * u.x;
		float productl = column9.y * u.y;
		float dotProductf = productk + productl;
		float productm = columna.y * u.z;
		float dotProductg = dotProductf + productm;
		float productn = columnb.y * u.w;
		float dotProducth = dotProductg + productn;
		float producto = column8.z * u.x;
		float productp = column9.z * u.y;
		float dotProducti = producto + productp;
		float productq = columna.z * u.z;
		float dotProductj = dotProducti + productq;
		float productr = columnb.z * u.w;
		float dotProductk = dotProductj + productr;
		float products = column8.w * u.x;
		float productt = column9.w * u.y;
		float dotProductl = products + productt;
		float productu = columna.w * u.z;
		float dotProductm = dotProductl + productu;
		float productv = columnb.w * u.w;
		float dotProductn = dotProductm + productv;
		vec4 H_cvqpsy = vec4(dotProducte, dotProducth, dotProductk, dotProductn);
		_L4 = H_cvqpsy;
	} else {
		float productw = um43[0].x * un34[0].x;
		float productx = um43[0].y * un34[1].x;
		float dotProducto = productw + productx;
		float producty = um43[0].z * un34[2].x;
		float dotProductp = dotProducto + producty;
		float productz = um43[0].w * un34[3].x;
		float dotProductq = dotProductp + productz;
		float producta = um43[0].x * un34[0].y;
		float productb = um43[0].y * un34[1].y;
		float dotProductr = producta + productb;
		float productc = um43[0].z * un34[2].y;
		float dotProducts = dotProductr + productc;
		float productd = um43[0].w * un34[3].y;
		float dotProductt = dotProducts + productd;
		float producte = um43[0].x * un34[0].z;
		float productf = um43[0].y * un34[1].z;
		float dotProductu = producte + productf;
		float productg = um43[0].z * un34[2].z;
		float dotProductv = dotProductu + productg;
		float producth = um43[0].w * un34[3].z;
		float dotProductw = dotProductv + producth;
		float producti = um43[0].x * un34[0].w;
		float productj = um43[0].y * un34[1].w;
		float dotProductx = producti + productj;
		float producta1 = um43[0].z * un34[2].w;
		float dotProducty = dotProductx + producta1;
		float productb1 = um43[0].w * un34[3].w;
		float dotProductz = dotProducty + productb1;
		float productc1 = um43[1].x * un34[0].x;
		float productd1 = um43[1].y * un34[1].x;
		float dotProducta = productc1 + productd1;
		float producte1 = um43[1].z * un34[2].x;
		float dotProductb = dotProducta + producte1;
		float productf1 = um43[1].w * un34[3].x;
		float dotProductc = dotProductb + productf1;
		float productg1 = um43[1].x * un34[0].y;
		float producth1 = um43[1].y * un34[1].y;
		float dotProductd = productg1 + producth1;
		float producti1 = um43[1].z * un34[2].y;
		float dotProducte = dotProductd + producti1;
		float productj1 = um43[1].w * un34[3].y;
		float dotProductf = dotProducte + productj1;
		float productk1 = um43[1].x * un34[0].z;
		float productl1 = um43[1].y * un34[1].z;
		float dotProductg = productk1 + productl1;
		float productm1 = um43[1].z * un34[2].z;
		float dotProducth = dotProductg + productm1;
		float productn1 = um43[1].w * un34[3].z;
		float dotProducti = dotProducth + productn1;
		float producto1 = um43[1].x * un34[0].w;
		float productp1 = um43[1].y * un34[1].w;
		float dotProductj = producto1 + productp1;
		float productq1 = um43[1].z * un34[2].w;
		float dotProducta1 = dotProductj + productq1;
		float productr1 = um43[1].w * un34[3].w;
		float dotProductb1 = dotProducta1 + productr1;
		float products1 = um43[2].x * un34[0].x;
		float productt1 = um43[2].y * un34[1].x;
		float dotProductc1 = products1 + productt1;
		float productu1 = um43[2].z * un34[2].x;
		float dotProductd1 = dotProductc1 + productu1;
		float productv1 = um43[2].w * un34[3].x;
		float dotProducte1 = dotProductd1 + productv1;
		float productw1 = um43[2].x * un34[0].y;
		float productx1 = um43[2].y * un34[1].y;
		float dotProductf1 = productw1 + productx1;
		float producty1 = um43[2].z * un34[2].y;
		float dotProductg1 = dotProductf1 + producty1;
		float productz1 = um43[2].w * un34[3].y;
		float dotProducth1 = dotProductg1 + productz1;
		float productk = um43[2].x * un34[0].z;
		float productl = um43[2].y * un34[1].z;
		float dotProducti1 = productk + productl;
		float productm = um43[2].z * un34[2].z;
		float dotProductj1 = dotProducti1 + productm;
		float productn = um43[2].w * un34[3].z;
		float dotProductk1 = dotProductj1 + productn;
		float producto = um43[2].x * un34[0].w;
		float productp = um43[2].y * un34[1].w;
		float dotProductl1 = producto + productp;
		float productq = um43[2].z * un34[2].w;
		float dotProductm1 = dotProductl1 + productq;
		float productr = um43[2].w * un34[3].w;
		float dotProductn1 = dotProductm1 + productr;
		float products = um43[3].x * un34[0].x;
		float productt = um43[3].y * un34[1].x;
		float dotProducto1 = products + productt;
		float producta2 = um43[3].z * un34[2].x;
		float dotProductp1 = dotProducto1 + producta2;
		float productb2 = um43[3].w * un34[3].x;
		float dotProductq1 = dotProductp1 + productb2;
		float productc2 = um43[3].x * un34[0].y;
		float productd2 = um43[3].y * un34[1].y;
		float dotProductr1 = productc2 + productd2;
		float producte2 = um43[3].z * un34[2].y;
		float dotProducts1 = dotProductr1 + producte2;
		float productf2 = um43[3].w * un34[3].y;
		float dotProductt1 = dotProducts1 + productf2;
		float productg2 = um43[3].x * un34[0].z;
		float producth2 = um43[3].y * un34[1].z;
		float dotProductu1 = productg2 + producth2;
		float producti2 = um43[3].z * un34[2].z;
		float dotProductv1 = dotProductu1 + producti2;
		float productj2 = um43[3].w * un34[3].z;
		float dotProductw1 = dotProductv1 + productj2;
		float productk2 = um43[3].x * un34[0].w;
		float productl2 = um43[3].y * un34[1].w;
		float dotProductx1 = productk2 + productl2;
		float productm2 = um43[3].z * un34[2].w;
		float dotProducty1 = dotProductx1 + productm2;
		float productn2 = um43[3].w * un34[3].w;
		float dotProductz1 = dotProducty1 + productn2;
		float producto2 = _L * dotProductq;
		float productp2 = _L1 * dotProductc;
		float dotProductk = producto2 + productp2;
		float productq2 = _L2 * dotProducte1;
		float dotProductl = dotProductk + productq2;
		float productr2 = _L3 * dotProductq1;
		float dotProductm = dotProductl + productr2;
		float products2 = _L * dotProductt;
		float productt2 = _L1 * dotProductf;
		float dotProductn = products2 + productt2;
		float productu2 = _L2 * dotProducth1;
		float dotProducto = dotProductn + productu2;
		float productv2 = _L3 * dotProductt1;
		float dotProductp = dotProducto + productv2;
		float productw2 = _L * dotProductw;
		float productx2 = _L1 * dotProducti;
		float dotProductq = productw2 + productx2;
		float producty2 = _L2 * dotProductk1;
		float dotProductr = dotProductq + producty2;
		float productz2 = _L3 * dotProductw1;
		float dotProducts = dotProductr + productz2;
		float productu = _L * dotProductz;
		float productv = _L1 * dotProductb1;
		float dotProductt = productu + productv;
		float productw = _L2 * dotProductn1;
		float dotProducta2 = dotProductt + productw;
		float productx = _L3 * dotProductz1;
		float dotProductb2 = dotProducta2 + productx;
		vec4 H_0rpwta1 = vec4(dotProductm, dotProductp, dotProducts, dotProductb2);
		_L4 = H_0rpwta1;
	}
	
	vec4 storemerge1 = _L4 + storemerge;
	gl_FragColor = storemerge1;
	
}

