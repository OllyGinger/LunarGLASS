
Top IR:
; ModuleID = 'Glslang'

@FragColor_shadow = internal global <4 x float> zeroinitializer
@un34 = external addrspace(2) constant [4 x <4 x float>]
@Color_shadow = internal global <3 x float> zeroinitializer
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@v_shadow = internal global <4 x float> zeroinitializer
@u_shadow = internal global <4 x float> zeroinitializer
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %0 = alloca <4 x float>
  %1 = alloca <4 x float>
  %2 = alloca [4 x <4 x float>]
  %3 = alloca <4 x float>
  %4 = alloca [4 x <4 x float>]
  %constructed197 = alloca [4 x <4 x float>]
  %5 = alloca [4 x <4 x float>]
  %constructed152 = alloca [4 x <4 x float>]
  %constructed127 = alloca [4 x <4 x float>]
  %m34 = alloca [4 x <4 x float>]
  %6 = alloca <4 x float>
  %7 = alloca [4 x <4 x float>]
  %8 = alloca <4 x float>
  %constructed5 = alloca <4 x float>
  %9 = alloca <3 x float>
  %constructed = alloca <4 x float>
  %10 = load <4 x float> addrspace(2)* getelementptr inbounds ([4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1), !gla.uniform !3
  %11 = load <4 x float>* %constructed
  %12 = extractelement <4 x float> %10, i32 0
  %13 = insertelement <4 x float> %11, float %12, i32 0
  %14 = extractelement <4 x float> %10, i32 1
  %15 = insertelement <4 x float> %13, float %14, i32 1
  %16 = extractelement <4 x float> %10, i32 2
  %17 = insertelement <4 x float> %15, float %16, i32 2
  %18 = extractelement <4 x float> %10, i32 3
  %FragColor_shadow = insertelement <4 x float> %17, float %18, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !9
  store <3 x float> %Color, <3 x float>* @Color_shadow
  %19 = load <3 x float>* @Color_shadow
  %20 = load [3 x <3 x float>] addrspace(2)* @colorTransform, !gla.uniform !5
  %21 = load <3 x float>* %9
  %column = extractvalue [3 x <3 x float>] %20, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %19, <3 x float> %column)
  %22 = insertelement <3 x float> %21, float %dotres, i32 0
  %column1 = extractvalue [3 x <3 x float>] %20, 1
  %dotres2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %19, <3 x float> %column1)
  %23 = insertelement <3 x float> %22, float %dotres2, i32 1
  %column3 = extractvalue [3 x <3 x float>] %20, 2
  %dotres4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %19, <3 x float> %column3)
  %24 = insertelement <3 x float> %23, float %dotres4, i32 2
  %25 = load <4 x float>* %constructed5
  %26 = extractelement <3 x float> %24, i32 0
  %27 = insertelement <4 x float> %25, float %26, i32 0
  %28 = extractelement <3 x float> %24, i32 1
  %29 = insertelement <4 x float> %27, float %28, i32 1
  %30 = extractelement <3 x float> %24, i32 2
  %31 = insertelement <4 x float> %29, float %30, i32 2
  %32 = insertelement <4 x float> %31, float 1.000000e+00, i32 3
  %33 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow6 = fadd <4 x float> %33, %32
  store <4 x float> %FragColor_shadow6, <4 x float>* @FragColor_shadow
  %34 = load [4 x <4 x float>] addrspace(2)* @m, !gla.uniform !6
  %35 = load [4 x <4 x float>] addrspace(2)* @n, !gla.uniform !7
  %element1 = extractvalue [4 x <4 x float>] %34, 0
  %element2 = extractvalue [4 x <4 x float>] %35, 0
  %36 = fcmp one <4 x float> %element1, %element2
  %37 = call i1 @llvm.gla.any.v4i1(<4 x i1> %36)
  %element17 = extractvalue [4 x <4 x float>] %34, 1
  %element28 = extractvalue [4 x <4 x float>] %35, 1
  %38 = fcmp one <4 x float> %element17, %element28
  %39 = call i1 @llvm.gla.any.v4i1(<4 x i1> %38)
  %40 = or i1 %37, %39
  %element19 = extractvalue [4 x <4 x float>] %34, 2
  %element210 = extractvalue [4 x <4 x float>] %35, 2
  %41 = fcmp one <4 x float> %element19, %element210
  %42 = call i1 @llvm.gla.any.v4i1(<4 x i1> %41)
  %43 = or i1 %40, %42
  %element111 = extractvalue [4 x <4 x float>] %34, 3
  %element212 = extractvalue [4 x <4 x float>] %35, 3
  %44 = fcmp one <4 x float> %element111, %element212
  %45 = call i1 @llvm.gla.any.v4i1(<4 x i1> %44)
  %46 = or i1 %43, %45
  br i1 %46, label %then, label %else

then:                                             ; preds = %entry
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v, <4 x float>* @v_shadow
  %47 = load <4 x float>* @v_shadow
  %48 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow13 = fadd <4 x float> %48, %47
  store <4 x float> %FragColor_shadow13, <4 x float>* @FragColor_shadow
  br label %ifmerge

else:                                             ; preds = %entry
  %49 = load [4 x <4 x float>] addrspace(2)* @m, !gla.uniform !6
  %v14 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v14, <4 x float>* @v_shadow
  %50 = load <4 x float>* @v_shadow
  %51 = load <4 x float>* %8
  %component = extractelement <4 x float> %50, i32 0
  %component15 = extractelement <4 x float> %50, i32 1
  %component16 = extractelement <4 x float> %50, i32 2
  %component17 = extractelement <4 x float> %50, i32 3
  %column18 = extractvalue [4 x <4 x float>] %49, 0
  %element = extractelement <4 x float> %column18, i32 0
  %product = fmul float %element, %component
  %column19 = extractvalue [4 x <4 x float>] %49, 1
  %element20 = extractelement <4 x float> %column19, i32 0
  %product21 = fmul float %element20, %component15
  %dotProduct = fadd float %product, %product21
  %column22 = extractvalue [4 x <4 x float>] %49, 2
  %element23 = extractelement <4 x float> %column22, i32 0
  %product24 = fmul float %element23, %component16
  %dotProduct25 = fadd float %dotProduct, %product24
  %column26 = extractvalue [4 x <4 x float>] %49, 3
  %element27 = extractelement <4 x float> %column26, i32 0
  %product28 = fmul float %element27, %component17
  %dotProduct29 = fadd float %dotProduct25, %product28
  %52 = insertelement <4 x float> %51, float %dotProduct29, i32 0
  %column30 = extractvalue [4 x <4 x float>] %49, 0
  %element31 = extractelement <4 x float> %column30, i32 1
  %product32 = fmul float %element31, %component
  %column33 = extractvalue [4 x <4 x float>] %49, 1
  %element34 = extractelement <4 x float> %column33, i32 1
  %product35 = fmul float %element34, %component15
  %dotProduct36 = fadd float %product32, %product35
  %column37 = extractvalue [4 x <4 x float>] %49, 2
  %element38 = extractelement <4 x float> %column37, i32 1
  %product39 = fmul float %element38, %component16
  %dotProduct40 = fadd float %dotProduct36, %product39
  %column41 = extractvalue [4 x <4 x float>] %49, 3
  %element42 = extractelement <4 x float> %column41, i32 1
  %product43 = fmul float %element42, %component17
  %dotProduct44 = fadd float %dotProduct40, %product43
  %53 = insertelement <4 x float> %52, float %dotProduct44, i32 1
  %column45 = extractvalue [4 x <4 x float>] %49, 0
  %element46 = extractelement <4 x float> %column45, i32 2
  %product47 = fmul float %element46, %component
  %column48 = extractvalue [4 x <4 x float>] %49, 1
  %element49 = extractelement <4 x float> %column48, i32 2
  %product50 = fmul float %element49, %component15
  %dotProduct51 = fadd float %product47, %product50
  %column52 = extractvalue [4 x <4 x float>] %49, 2
  %element53 = extractelement <4 x float> %column52, i32 2
  %product54 = fmul float %element53, %component16
  %dotProduct55 = fadd float %dotProduct51, %product54
  %column56 = extractvalue [4 x <4 x float>] %49, 3
  %element57 = extractelement <4 x float> %column56, i32 2
  %product58 = fmul float %element57, %component17
  %dotProduct59 = fadd float %dotProduct55, %product58
  %54 = insertelement <4 x float> %53, float %dotProduct59, i32 2
  %column60 = extractvalue [4 x <4 x float>] %49, 0
  %element61 = extractelement <4 x float> %column60, i32 3
  %product62 = fmul float %element61, %component
  %column63 = extractvalue [4 x <4 x float>] %49, 1
  %element64 = extractelement <4 x float> %column63, i32 3
  %product65 = fmul float %element64, %component15
  %dotProduct66 = fadd float %product62, %product65
  %column67 = extractvalue [4 x <4 x float>] %49, 2
  %element68 = extractelement <4 x float> %column67, i32 3
  %product69 = fmul float %element68, %component16
  %dotProduct70 = fadd float %dotProduct66, %product69
  %column71 = extractvalue [4 x <4 x float>] %49, 3
  %element72 = extractelement <4 x float> %column71, i32 3
  %product73 = fmul float %element72, %component17
  %dotProduct74 = fadd float %dotProduct70, %product73
  %55 = insertelement <4 x float> %54, float %dotProduct74, i32 3
  %56 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow75 = fadd <4 x float> %56, %55
  store <4 x float> %FragColor_shadow75, <4 x float>* @FragColor_shadow
  %v76 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v76, <4 x float>* @v_shadow
  %57 = load <4 x float>* @v_shadow
  %58 = load [4 x <4 x float>] addrspace(2)* @m, !gla.uniform !6
  %59 = load [4 x <4 x float>] addrspace(2)* @n, !gla.uniform !7
  %60 = load [4 x <4 x float>]* %7
  %leftColumn = extractvalue [4 x <4 x float>] %58, 0
  %rightColumn = extractvalue [4 x <4 x float>] %59, 0
  %column77 = fsub <4 x float> %leftColumn, %rightColumn
  %61 = insertvalue [4 x <4 x float>] %60, <4 x float> %column77, 0
  %leftColumn78 = extractvalue [4 x <4 x float>] %58, 1
  %rightColumn79 = extractvalue [4 x <4 x float>] %59, 1
  %column80 = fsub <4 x float> %leftColumn78, %rightColumn79
  %62 = insertvalue [4 x <4 x float>] %61, <4 x float> %column80, 1
  %leftColumn81 = extractvalue [4 x <4 x float>] %58, 2
  %rightColumn82 = extractvalue [4 x <4 x float>] %59, 2
  %column83 = fsub <4 x float> %leftColumn81, %rightColumn82
  %63 = insertvalue [4 x <4 x float>] %62, <4 x float> %column83, 2
  %leftColumn84 = extractvalue [4 x <4 x float>] %58, 3
  %rightColumn85 = extractvalue [4 x <4 x float>] %59, 3
  %column86 = fsub <4 x float> %leftColumn84, %rightColumn85
  %64 = insertvalue [4 x <4 x float>] %63, <4 x float> %column86, 3
  %65 = load <4 x float>* %6
  %column87 = extractvalue [4 x <4 x float>] %64, 0
  %dotres88 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %57, <4 x float> %column87)
  %66 = insertelement <4 x float> %65, float %dotres88, i32 0
  %column89 = extractvalue [4 x <4 x float>] %64, 1
  %dotres90 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %57, <4 x float> %column89)
  %67 = insertelement <4 x float> %66, float %dotres90, i32 1
  %column91 = extractvalue [4 x <4 x float>] %64, 2
  %dotres92 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %57, <4 x float> %column91)
  %68 = insertelement <4 x float> %67, float %dotres92, i32 2
  %column93 = extractvalue [4 x <4 x float>] %64, 3
  %dotres94 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %57, <4 x float> %column93)
  %69 = insertelement <4 x float> %68, float %dotres94, i32 3
  %70 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow95 = fadd <4 x float> %70, %69
  store <4 x float> %FragColor_shadow95, <4 x float>* @FragColor_shadow
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %v96 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v96, <4 x float>* @v_shadow
  %71 = load <4 x float>* @v_shadow
  %72 = extractelement <4 x float> %71, i32 0
  %u = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u, <4 x float>* @u_shadow
  %73 = load <4 x float>* @u_shadow
  %74 = extractelement <4 x float> %73, i32 0
  %75 = fmul float %72, %74
  %v97 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v97, <4 x float>* @v_shadow
  %76 = load <4 x float>* @v_shadow
  %77 = extractelement <4 x float> %76, i32 0
  %u98 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u98, <4 x float>* @u_shadow
  %78 = load <4 x float>* @u_shadow
  %79 = extractelement <4 x float> %78, i32 1
  %80 = fmul float %77, %79
  %v99 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v99, <4 x float>* @v_shadow
  %81 = load <4 x float>* @v_shadow
  %82 = extractelement <4 x float> %81, i32 0
  %u100 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u100, <4 x float>* @u_shadow
  %83 = load <4 x float>* @u_shadow
  %84 = extractelement <4 x float> %83, i32 2
  %85 = fmul float %82, %84
  %v101 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v101, <4 x float>* @v_shadow
  %86 = load <4 x float>* @v_shadow
  %87 = extractelement <4 x float> %86, i32 0
  %u102 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u102, <4 x float>* @u_shadow
  %88 = load <4 x float>* @u_shadow
  %89 = extractelement <4 x float> %88, i32 3
  %90 = fmul float %87, %89
  %v103 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v103, <4 x float>* @v_shadow
  %91 = load <4 x float>* @v_shadow
  %92 = extractelement <4 x float> %91, i32 1
  %u104 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u104, <4 x float>* @u_shadow
  %93 = load <4 x float>* @u_shadow
  %94 = extractelement <4 x float> %93, i32 0
  %95 = fmul float %92, %94
  %v105 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v105, <4 x float>* @v_shadow
  %96 = load <4 x float>* @v_shadow
  %97 = extractelement <4 x float> %96, i32 1
  %u106 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u106, <4 x float>* @u_shadow
  %98 = load <4 x float>* @u_shadow
  %99 = extractelement <4 x float> %98, i32 1
  %100 = fmul float %97, %99
  %v107 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v107, <4 x float>* @v_shadow
  %101 = load <4 x float>* @v_shadow
  %102 = extractelement <4 x float> %101, i32 1
  %u108 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u108, <4 x float>* @u_shadow
  %103 = load <4 x float>* @u_shadow
  %104 = extractelement <4 x float> %103, i32 2
  %105 = fmul float %102, %104
  %v109 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v109, <4 x float>* @v_shadow
  %106 = load <4 x float>* @v_shadow
  %107 = extractelement <4 x float> %106, i32 1
  %u110 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u110, <4 x float>* @u_shadow
  %108 = load <4 x float>* @u_shadow
  %109 = extractelement <4 x float> %108, i32 3
  %110 = fmul float %107, %109
  %v111 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v111, <4 x float>* @v_shadow
  %111 = load <4 x float>* @v_shadow
  %112 = extractelement <4 x float> %111, i32 2
  %u112 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u112, <4 x float>* @u_shadow
  %113 = load <4 x float>* @u_shadow
  %114 = extractelement <4 x float> %113, i32 0
  %115 = fmul float %112, %114
  %v113 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v113, <4 x float>* @v_shadow
  %116 = load <4 x float>* @v_shadow
  %117 = extractelement <4 x float> %116, i32 2
  %u114 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u114, <4 x float>* @u_shadow
  %118 = load <4 x float>* @u_shadow
  %119 = extractelement <4 x float> %118, i32 1
  %120 = fmul float %117, %119
  %v115 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v115, <4 x float>* @v_shadow
  %121 = load <4 x float>* @v_shadow
  %122 = extractelement <4 x float> %121, i32 2
  %u116 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u116, <4 x float>* @u_shadow
  %123 = load <4 x float>* @u_shadow
  %124 = extractelement <4 x float> %123, i32 2
  %125 = fmul float %122, %124
  %v117 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v117, <4 x float>* @v_shadow
  %126 = load <4 x float>* @v_shadow
  %127 = extractelement <4 x float> %126, i32 2
  %u118 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u118, <4 x float>* @u_shadow
  %128 = load <4 x float>* @u_shadow
  %129 = extractelement <4 x float> %128, i32 3
  %130 = fmul float %127, %129
  %v119 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v119, <4 x float>* @v_shadow
  %131 = load <4 x float>* @v_shadow
  %132 = extractelement <4 x float> %131, i32 3
  %u120 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u120, <4 x float>* @u_shadow
  %133 = load <4 x float>* @u_shadow
  %134 = extractelement <4 x float> %133, i32 0
  %135 = fmul float %132, %134
  %v121 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v121, <4 x float>* @v_shadow
  %136 = load <4 x float>* @v_shadow
  %137 = extractelement <4 x float> %136, i32 3
  %u122 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u122, <4 x float>* @u_shadow
  %138 = load <4 x float>* @u_shadow
  %139 = extractelement <4 x float> %138, i32 1
  %140 = fmul float %137, %139
  %v123 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v123, <4 x float>* @v_shadow
  %141 = load <4 x float>* @v_shadow
  %142 = extractelement <4 x float> %141, i32 3
  %u124 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u124, <4 x float>* @u_shadow
  %143 = load <4 x float>* @u_shadow
  %144 = extractelement <4 x float> %143, i32 2
  %145 = fmul float %142, %144
  %v125 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v125, <4 x float>* @v_shadow
  %146 = load <4 x float>* @v_shadow
  %147 = extractelement <4 x float> %146, i32 3
  %u126 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u126, <4 x float>* @u_shadow
  %148 = load <4 x float>* @u_shadow
  %149 = extractelement <4 x float> %148, i32 3
  %150 = fmul float %147, %149
  %151 = load [4 x <4 x float>]* %constructed127
  %column128 = extractvalue [4 x <4 x float>] %151, 0
  %column129 = insertelement <4 x float> %column128, float %75, i32 0
  %column130 = insertelement <4 x float> %column129, float %80, i32 1
  %column131 = insertelement <4 x float> %column130, float %85, i32 2
  %column132 = insertelement <4 x float> %column131, float %90, i32 3
  %matrix = insertvalue [4 x <4 x float>] %151, <4 x float> %column132, 0
  %column133 = extractvalue [4 x <4 x float>] %151, 1
  %column134 = insertelement <4 x float> %column133, float %95, i32 0
  %column135 = insertelement <4 x float> %column134, float %100, i32 1
  %column136 = insertelement <4 x float> %column135, float %105, i32 2
  %column137 = insertelement <4 x float> %column136, float %110, i32 3
  %matrix138 = insertvalue [4 x <4 x float>] %matrix, <4 x float> %column137, 1
  %column139 = extractvalue [4 x <4 x float>] %151, 2
  %column140 = insertelement <4 x float> %column139, float %115, i32 0
  %column141 = insertelement <4 x float> %column140, float %120, i32 1
  %column142 = insertelement <4 x float> %column141, float %125, i32 2
  %column143 = insertelement <4 x float> %column142, float %130, i32 3
  %matrix144 = insertvalue [4 x <4 x float>] %matrix138, <4 x float> %column143, 2
  %column145 = extractvalue [4 x <4 x float>] %151, 3
  %column146 = insertelement <4 x float> %column145, float %135, i32 0
  %column147 = insertelement <4 x float> %column146, float %140, i32 1
  %column148 = insertelement <4 x float> %column147, float %145, i32 2
  %column149 = insertelement <4 x float> %column148, float %150, i32 3
  %matrix150 = insertvalue [4 x <4 x float>] %matrix144, <4 x float> %column149, 3
  store [4 x <4 x float>] %matrix150, [4 x <4 x float>]* %m34
  %v151 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v151, <4 x float>* @v_shadow
  %152 = load <4 x float>* @v_shadow
  %153 = extractelement <4 x float> %152, i32 0
  %154 = load [4 x <4 x float>]* %constructed152
  %column153 = extractvalue [4 x <4 x float>] %154, 0
  %column154 = insertelement <4 x float> %column153, float %153, i32 0
  %column155 = insertelement <4 x float> %column154, float 0.000000e+00, i32 1
  %column156 = insertelement <4 x float> %column155, float 0.000000e+00, i32 2
  %column157 = insertelement <4 x float> %column156, float 0.000000e+00, i32 3
  %matrix158 = insertvalue [4 x <4 x float>] %154, <4 x float> %column157, 0
  %column159 = extractvalue [4 x <4 x float>] %154, 1
  %column160 = insertelement <4 x float> %column159, float 0.000000e+00, i32 0
  %column161 = insertelement <4 x float> %column160, float %153, i32 1
  %column162 = insertelement <4 x float> %column161, float 0.000000e+00, i32 2
  %column163 = insertelement <4 x float> %column162, float 0.000000e+00, i32 3
  %matrix164 = insertvalue [4 x <4 x float>] %matrix158, <4 x float> %column163, 1
  %column165 = extractvalue [4 x <4 x float>] %154, 2
  %column166 = insertelement <4 x float> %column165, float 0.000000e+00, i32 0
  %column167 = insertelement <4 x float> %column166, float 0.000000e+00, i32 1
  %column168 = insertelement <4 x float> %column167, float %153, i32 2
  %column169 = insertelement <4 x float> %column168, float 0.000000e+00, i32 3
  %matrix170 = insertvalue [4 x <4 x float>] %matrix164, <4 x float> %column169, 2
  %column171 = extractvalue [4 x <4 x float>] %154, 3
  %column172 = insertelement <4 x float> %column171, float 0.000000e+00, i32 0
  %column173 = insertelement <4 x float> %column172, float 0.000000e+00, i32 1
  %column174 = insertelement <4 x float> %column173, float 0.000000e+00, i32 2
  %column175 = insertelement <4 x float> %column174, float %153, i32 3
  %matrix176 = insertvalue [4 x <4 x float>] %matrix170, <4 x float> %column175, 3
  %155 = load [4 x <4 x float>]* %m34
  %156 = load [4 x <4 x float>]* %5
  %leftColumn177 = extractvalue [4 x <4 x float>] %155, 0
  %rightColumn178 = extractvalue [4 x <4 x float>] %matrix176, 0
  %column179 = fadd <4 x float> %leftColumn177, %rightColumn178
  %157 = insertvalue [4 x <4 x float>] %156, <4 x float> %column179, 0
  %leftColumn180 = extractvalue [4 x <4 x float>] %155, 1
  %rightColumn181 = extractvalue [4 x <4 x float>] %matrix176, 1
  %column182 = fadd <4 x float> %leftColumn180, %rightColumn181
  %158 = insertvalue [4 x <4 x float>] %157, <4 x float> %column182, 1
  %leftColumn183 = extractvalue [4 x <4 x float>] %155, 2
  %rightColumn184 = extractvalue [4 x <4 x float>] %matrix176, 2
  %column185 = fadd <4 x float> %leftColumn183, %rightColumn184
  %159 = insertvalue [4 x <4 x float>] %158, <4 x float> %column185, 2
  %leftColumn186 = extractvalue [4 x <4 x float>] %155, 3
  %rightColumn187 = extractvalue [4 x <4 x float>] %matrix176, 3
  %column188 = fadd <4 x float> %leftColumn186, %rightColumn187
  %m34189 = insertvalue [4 x <4 x float>] %159, <4 x float> %column188, 3
  store [4 x <4 x float>] %m34189, [4 x <4 x float>]* %m34
  %u190 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u190, <4 x float>* @u_shadow
  %160 = load <4 x float>* @u_shadow
  %u191 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u191, <4 x float>* @u_shadow
  %161 = load <4 x float>* @u_shadow
  %162 = extractelement <4 x float> %161, i32 0
  %u192 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u192, <4 x float>* @u_shadow
  %163 = load <4 x float>* @u_shadow
  %u193 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u193, <4 x float>* @u_shadow
  %164 = load <4 x float>* @u_shadow
  %165 = extractelement <4 x float> %164, i32 0
  %u194 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u194, <4 x float>* @u_shadow
  %166 = load <4 x float>* @u_shadow
  %u195 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u195, <4 x float>* @u_shadow
  %167 = load <4 x float>* @u_shadow
  %168 = extractelement <4 x float> %167, i32 0
  %u196 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u196, <4 x float>* @u_shadow
  %169 = load <4 x float>* @u_shadow
  %170 = extractelement <4 x float> %169, i32 0
  %171 = load [4 x <4 x float>]* %constructed197
  %element198 = extractelement <4 x float> %160, i32 0
  %element199 = extractelement <4 x float> %160, i32 1
  %element200 = extractelement <4 x float> %160, i32 2
  %element201 = extractelement <4 x float> %160, i32 3
  %element202 = extractelement <4 x float> %163, i32 0
  %element203 = extractelement <4 x float> %163, i32 1
  %element204 = extractelement <4 x float> %163, i32 2
  %element205 = extractelement <4 x float> %163, i32 3
  %element206 = extractelement <4 x float> %166, i32 0
  %element207 = extractelement <4 x float> %166, i32 1
  %element208 = extractelement <4 x float> %166, i32 2
  %element209 = extractelement <4 x float> %166, i32 3
  %column210 = extractvalue [4 x <4 x float>] %171, 0
  %column211 = insertelement <4 x float> %column210, float %element198, i32 0
  %column212 = insertelement <4 x float> %column211, float %element199, i32 1
  %column213 = insertelement <4 x float> %column212, float %element200, i32 2
  %column214 = insertelement <4 x float> %column213, float %element201, i32 3
  %matrix215 = insertvalue [4 x <4 x float>] %171, <4 x float> %column214, 0
  %column216 = extractvalue [4 x <4 x float>] %171, 1
  %column217 = insertelement <4 x float> %column216, float %162, i32 0
  %column218 = insertelement <4 x float> %column217, float %element202, i32 1
  %column219 = insertelement <4 x float> %column218, float %element203, i32 2
  %column220 = insertelement <4 x float> %column219, float %element204, i32 3
  %matrix221 = insertvalue [4 x <4 x float>] %matrix215, <4 x float> %column220, 1
  %column222 = extractvalue [4 x <4 x float>] %171, 2
  %column223 = insertelement <4 x float> %column222, float %element205, i32 0
  %column224 = insertelement <4 x float> %column223, float %165, i32 1
  %column225 = insertelement <4 x float> %column224, float %element206, i32 2
  %column226 = insertelement <4 x float> %column225, float %element207, i32 3
  %matrix227 = insertvalue [4 x <4 x float>] %matrix221, <4 x float> %column226, 2
  %column228 = extractvalue [4 x <4 x float>] %171, 3
  %column229 = insertelement <4 x float> %column228, float %element208, i32 0
  %column230 = insertelement <4 x float> %column229, float %element209, i32 1
  %column231 = insertelement <4 x float> %column230, float %168, i32 2
  %column232 = insertelement <4 x float> %column231, float %170, i32 3
  %matrix233 = insertvalue [4 x <4 x float>] %matrix227, <4 x float> %column232, 3
  %172 = load [4 x <4 x float>]* %m34
  %173 = load [4 x <4 x float>]* %4
  %leftColumn234 = extractvalue [4 x <4 x float>] %172, 0
  %rightColumn235 = extractvalue [4 x <4 x float>] %matrix233, 0
  %column236 = fadd <4 x float> %leftColumn234, %rightColumn235
  %174 = insertvalue [4 x <4 x float>] %173, <4 x float> %column236, 0
  %leftColumn237 = extractvalue [4 x <4 x float>] %172, 1
  %rightColumn238 = extractvalue [4 x <4 x float>] %matrix233, 1
  %column239 = fadd <4 x float> %leftColumn237, %rightColumn238
  %175 = insertvalue [4 x <4 x float>] %174, <4 x float> %column239, 1
  %leftColumn240 = extractvalue [4 x <4 x float>] %172, 2
  %rightColumn241 = extractvalue [4 x <4 x float>] %matrix233, 2
  %column242 = fadd <4 x float> %leftColumn240, %rightColumn241
  %176 = insertvalue [4 x <4 x float>] %175, <4 x float> %column242, 2
  %leftColumn243 = extractvalue [4 x <4 x float>] %172, 3
  %rightColumn244 = extractvalue [4 x <4 x float>] %matrix233, 3
  %column245 = fadd <4 x float> %leftColumn243, %rightColumn244
  %m34246 = insertvalue [4 x <4 x float>] %176, <4 x float> %column245, 3
  store [4 x <4 x float>] %m34246, [4 x <4 x float>]* %m34
  %177 = load [4 x <4 x float>]* %m34
  %178 = load [4 x <4 x float>] addrspace(2)* @un34, !gla.uniform !3
  %element1247 = extractvalue [4 x <4 x float>] %177, 0
  %element2248 = extractvalue [4 x <4 x float>] %178, 0
  %179 = fcmp oeq <4 x float> %element1247, %element2248
  %180 = call i1 @llvm.gla.all.v4i1(<4 x i1> %179)
  %element1249 = extractvalue [4 x <4 x float>] %177, 1
  %element2250 = extractvalue [4 x <4 x float>] %178, 1
  %181 = fcmp oeq <4 x float> %element1249, %element2250
  %182 = call i1 @llvm.gla.all.v4i1(<4 x i1> %181)
  %183 = and i1 %180, %182
  %element1251 = extractvalue [4 x <4 x float>] %177, 2
  %element2252 = extractvalue [4 x <4 x float>] %178, 2
  %184 = fcmp oeq <4 x float> %element1251, %element2252
  %185 = call i1 @llvm.gla.all.v4i1(<4 x i1> %184)
  %186 = and i1 %183, %185
  %element1253 = extractvalue [4 x <4 x float>] %177, 3
  %element2254 = extractvalue [4 x <4 x float>] %178, 3
  %187 = fcmp oeq <4 x float> %element1253, %element2254
  %188 = call i1 @llvm.gla.all.v4i1(<4 x i1> %187)
  %189 = and i1 %186, %188
  br i1 %189, label %then255, label %else322

then255:                                          ; preds = %ifmerge
  %190 = load [4 x <4 x float>]* %m34
  %u256 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  store <4 x float> %u256, <4 x float>* @u_shadow
  %191 = load <4 x float>* @u_shadow
  %192 = load <4 x float>* %3
  %component257 = extractelement <4 x float> %191, i32 0
  %component258 = extractelement <4 x float> %191, i32 1
  %component259 = extractelement <4 x float> %191, i32 2
  %component260 = extractelement <4 x float> %191, i32 3
  %column261 = extractvalue [4 x <4 x float>] %190, 0
  %element262 = extractelement <4 x float> %column261, i32 0
  %product263 = fmul float %element262, %component257
  %column264 = extractvalue [4 x <4 x float>] %190, 1
  %element265 = extractelement <4 x float> %column264, i32 0
  %product266 = fmul float %element265, %component258
  %dotProduct267 = fadd float %product263, %product266
  %column268 = extractvalue [4 x <4 x float>] %190, 2
  %element269 = extractelement <4 x float> %column268, i32 0
  %product270 = fmul float %element269, %component259
  %dotProduct271 = fadd float %dotProduct267, %product270
  %column272 = extractvalue [4 x <4 x float>] %190, 3
  %element273 = extractelement <4 x float> %column272, i32 0
  %product274 = fmul float %element273, %component260
  %dotProduct275 = fadd float %dotProduct271, %product274
  %193 = insertelement <4 x float> %192, float %dotProduct275, i32 0
  %column276 = extractvalue [4 x <4 x float>] %190, 0
  %element277 = extractelement <4 x float> %column276, i32 1
  %product278 = fmul float %element277, %component257
  %column279 = extractvalue [4 x <4 x float>] %190, 1
  %element280 = extractelement <4 x float> %column279, i32 1
  %product281 = fmul float %element280, %component258
  %dotProduct282 = fadd float %product278, %product281
  %column283 = extractvalue [4 x <4 x float>] %190, 2
  %element284 = extractelement <4 x float> %column283, i32 1
  %product285 = fmul float %element284, %component259
  %dotProduct286 = fadd float %dotProduct282, %product285
  %column287 = extractvalue [4 x <4 x float>] %190, 3
  %element288 = extractelement <4 x float> %column287, i32 1
  %product289 = fmul float %element288, %component260
  %dotProduct290 = fadd float %dotProduct286, %product289
  %194 = insertelement <4 x float> %193, float %dotProduct290, i32 1
  %column291 = extractvalue [4 x <4 x float>] %190, 0
  %element292 = extractelement <4 x float> %column291, i32 2
  %product293 = fmul float %element292, %component257
  %column294 = extractvalue [4 x <4 x float>] %190, 1
  %element295 = extractelement <4 x float> %column294, i32 2
  %product296 = fmul float %element295, %component258
  %dotProduct297 = fadd float %product293, %product296
  %column298 = extractvalue [4 x <4 x float>] %190, 2
  %element299 = extractelement <4 x float> %column298, i32 2
  %product300 = fmul float %element299, %component259
  %dotProduct301 = fadd float %dotProduct297, %product300
  %column302 = extractvalue [4 x <4 x float>] %190, 3
  %element303 = extractelement <4 x float> %column302, i32 2
  %product304 = fmul float %element303, %component260
  %dotProduct305 = fadd float %dotProduct301, %product304
  %195 = insertelement <4 x float> %194, float %dotProduct305, i32 2
  %column306 = extractvalue [4 x <4 x float>] %190, 0
  %element307 = extractelement <4 x float> %column306, i32 3
  %product308 = fmul float %element307, %component257
  %column309 = extractvalue [4 x <4 x float>] %190, 1
  %element310 = extractelement <4 x float> %column309, i32 3
  %product311 = fmul float %element310, %component258
  %dotProduct312 = fadd float %product308, %product311
  %column313 = extractvalue [4 x <4 x float>] %190, 2
  %element314 = extractelement <4 x float> %column313, i32 3
  %product315 = fmul float %element314, %component259
  %dotProduct316 = fadd float %dotProduct312, %product315
  %column317 = extractvalue [4 x <4 x float>] %190, 3
  %element318 = extractelement <4 x float> %column317, i32 3
  %product319 = fmul float %element318, %component260
  %dotProduct320 = fadd float %dotProduct316, %product319
  %196 = insertelement <4 x float> %195, float %dotProduct320, i32 3
  %197 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow321 = fadd <4 x float> %197, %196
  store <4 x float> %FragColor_shadow321, <4 x float>* @FragColor_shadow
  br label %ifmerge715

else322:                                          ; preds = %ifmerge
  %198 = load [4 x <4 x float>] addrspace(2)* @un34, !gla.uniform !3
  %199 = load [4 x <4 x float>] addrspace(2)* @um43, !gla.uniform !8
  %resultMatrix = load [4 x <4 x float>]* %2
  %tempColumn = load <4 x float>* %1
  %rightColumn323 = extractvalue [4 x <4 x float>] %199, 0
  %leftColumn324 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp = extractelement <4 x float> %leftColumn324, i32 0
  %rightComp = extractelement <4 x float> %rightColumn323, i32 0
  %product325 = fmul float %leftComp, %rightComp
  %leftColumn326 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp327 = extractelement <4 x float> %leftColumn326, i32 0
  %rightComp328 = extractelement <4 x float> %rightColumn323, i32 1
  %product329 = fmul float %leftComp327, %rightComp328
  %dotProduct330 = fadd float %product325, %product329
  %leftColumn331 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp332 = extractelement <4 x float> %leftColumn331, i32 0
  %rightComp333 = extractelement <4 x float> %rightColumn323, i32 2
  %product334 = fmul float %leftComp332, %rightComp333
  %dotProduct335 = fadd float %dotProduct330, %product334
  %leftColumn336 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp337 = extractelement <4 x float> %leftColumn336, i32 0
  %rightComp338 = extractelement <4 x float> %rightColumn323, i32 3
  %product339 = fmul float %leftComp337, %rightComp338
  %dotProduct340 = fadd float %dotProduct335, %product339
  %column341 = insertelement <4 x float> %tempColumn, float %dotProduct340, i32 0
  %leftColumn342 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp343 = extractelement <4 x float> %leftColumn342, i32 1
  %rightComp344 = extractelement <4 x float> %rightColumn323, i32 0
  %product345 = fmul float %leftComp343, %rightComp344
  %leftColumn346 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp347 = extractelement <4 x float> %leftColumn346, i32 1
  %rightComp348 = extractelement <4 x float> %rightColumn323, i32 1
  %product349 = fmul float %leftComp347, %rightComp348
  %dotProduct350 = fadd float %product345, %product349
  %leftColumn351 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp352 = extractelement <4 x float> %leftColumn351, i32 1
  %rightComp353 = extractelement <4 x float> %rightColumn323, i32 2
  %product354 = fmul float %leftComp352, %rightComp353
  %dotProduct355 = fadd float %dotProduct350, %product354
  %leftColumn356 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp357 = extractelement <4 x float> %leftColumn356, i32 1
  %rightComp358 = extractelement <4 x float> %rightColumn323, i32 3
  %product359 = fmul float %leftComp357, %rightComp358
  %dotProduct360 = fadd float %dotProduct355, %product359
  %column361 = insertelement <4 x float> %column341, float %dotProduct360, i32 1
  %leftColumn362 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp363 = extractelement <4 x float> %leftColumn362, i32 2
  %rightComp364 = extractelement <4 x float> %rightColumn323, i32 0
  %product365 = fmul float %leftComp363, %rightComp364
  %leftColumn366 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp367 = extractelement <4 x float> %leftColumn366, i32 2
  %rightComp368 = extractelement <4 x float> %rightColumn323, i32 1
  %product369 = fmul float %leftComp367, %rightComp368
  %dotProduct370 = fadd float %product365, %product369
  %leftColumn371 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp372 = extractelement <4 x float> %leftColumn371, i32 2
  %rightComp373 = extractelement <4 x float> %rightColumn323, i32 2
  %product374 = fmul float %leftComp372, %rightComp373
  %dotProduct375 = fadd float %dotProduct370, %product374
  %leftColumn376 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp377 = extractelement <4 x float> %leftColumn376, i32 2
  %rightComp378 = extractelement <4 x float> %rightColumn323, i32 3
  %product379 = fmul float %leftComp377, %rightComp378
  %dotProduct380 = fadd float %dotProduct375, %product379
  %column381 = insertelement <4 x float> %column361, float %dotProduct380, i32 2
  %leftColumn382 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp383 = extractelement <4 x float> %leftColumn382, i32 3
  %rightComp384 = extractelement <4 x float> %rightColumn323, i32 0
  %product385 = fmul float %leftComp383, %rightComp384
  %leftColumn386 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp387 = extractelement <4 x float> %leftColumn386, i32 3
  %rightComp388 = extractelement <4 x float> %rightColumn323, i32 1
  %product389 = fmul float %leftComp387, %rightComp388
  %dotProduct390 = fadd float %product385, %product389
  %leftColumn391 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp392 = extractelement <4 x float> %leftColumn391, i32 3
  %rightComp393 = extractelement <4 x float> %rightColumn323, i32 2
  %product394 = fmul float %leftComp392, %rightComp393
  %dotProduct395 = fadd float %dotProduct390, %product394
  %leftColumn396 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp397 = extractelement <4 x float> %leftColumn396, i32 3
  %rightComp398 = extractelement <4 x float> %rightColumn323, i32 3
  %product399 = fmul float %leftComp397, %rightComp398
  %dotProduct400 = fadd float %dotProduct395, %product399
  %column401 = insertelement <4 x float> %column381, float %dotProduct400, i32 3
  %resultMatrix402 = insertvalue [4 x <4 x float>] %resultMatrix, <4 x float> %column401, 0
  %rightColumn403 = extractvalue [4 x <4 x float>] %199, 1
  %leftColumn404 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp405 = extractelement <4 x float> %leftColumn404, i32 0
  %rightComp406 = extractelement <4 x float> %rightColumn403, i32 0
  %product407 = fmul float %leftComp405, %rightComp406
  %leftColumn408 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp409 = extractelement <4 x float> %leftColumn408, i32 0
  %rightComp410 = extractelement <4 x float> %rightColumn403, i32 1
  %product411 = fmul float %leftComp409, %rightComp410
  %dotProduct412 = fadd float %product407, %product411
  %leftColumn413 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp414 = extractelement <4 x float> %leftColumn413, i32 0
  %rightComp415 = extractelement <4 x float> %rightColumn403, i32 2
  %product416 = fmul float %leftComp414, %rightComp415
  %dotProduct417 = fadd float %dotProduct412, %product416
  %leftColumn418 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp419 = extractelement <4 x float> %leftColumn418, i32 0
  %rightComp420 = extractelement <4 x float> %rightColumn403, i32 3
  %product421 = fmul float %leftComp419, %rightComp420
  %dotProduct422 = fadd float %dotProduct417, %product421
  %column423 = insertelement <4 x float> %column401, float %dotProduct422, i32 0
  %leftColumn424 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp425 = extractelement <4 x float> %leftColumn424, i32 1
  %rightComp426 = extractelement <4 x float> %rightColumn403, i32 0
  %product427 = fmul float %leftComp425, %rightComp426
  %leftColumn428 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp429 = extractelement <4 x float> %leftColumn428, i32 1
  %rightComp430 = extractelement <4 x float> %rightColumn403, i32 1
  %product431 = fmul float %leftComp429, %rightComp430
  %dotProduct432 = fadd float %product427, %product431
  %leftColumn433 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp434 = extractelement <4 x float> %leftColumn433, i32 1
  %rightComp435 = extractelement <4 x float> %rightColumn403, i32 2
  %product436 = fmul float %leftComp434, %rightComp435
  %dotProduct437 = fadd float %dotProduct432, %product436
  %leftColumn438 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp439 = extractelement <4 x float> %leftColumn438, i32 1
  %rightComp440 = extractelement <4 x float> %rightColumn403, i32 3
  %product441 = fmul float %leftComp439, %rightComp440
  %dotProduct442 = fadd float %dotProduct437, %product441
  %column443 = insertelement <4 x float> %column423, float %dotProduct442, i32 1
  %leftColumn444 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp445 = extractelement <4 x float> %leftColumn444, i32 2
  %rightComp446 = extractelement <4 x float> %rightColumn403, i32 0
  %product447 = fmul float %leftComp445, %rightComp446
  %leftColumn448 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp449 = extractelement <4 x float> %leftColumn448, i32 2
  %rightComp450 = extractelement <4 x float> %rightColumn403, i32 1
  %product451 = fmul float %leftComp449, %rightComp450
  %dotProduct452 = fadd float %product447, %product451
  %leftColumn453 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp454 = extractelement <4 x float> %leftColumn453, i32 2
  %rightComp455 = extractelement <4 x float> %rightColumn403, i32 2
  %product456 = fmul float %leftComp454, %rightComp455
  %dotProduct457 = fadd float %dotProduct452, %product456
  %leftColumn458 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp459 = extractelement <4 x float> %leftColumn458, i32 2
  %rightComp460 = extractelement <4 x float> %rightColumn403, i32 3
  %product461 = fmul float %leftComp459, %rightComp460
  %dotProduct462 = fadd float %dotProduct457, %product461
  %column463 = insertelement <4 x float> %column443, float %dotProduct462, i32 2
  %leftColumn464 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp465 = extractelement <4 x float> %leftColumn464, i32 3
  %rightComp466 = extractelement <4 x float> %rightColumn403, i32 0
  %product467 = fmul float %leftComp465, %rightComp466
  %leftColumn468 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp469 = extractelement <4 x float> %leftColumn468, i32 3
  %rightComp470 = extractelement <4 x float> %rightColumn403, i32 1
  %product471 = fmul float %leftComp469, %rightComp470
  %dotProduct472 = fadd float %product467, %product471
  %leftColumn473 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp474 = extractelement <4 x float> %leftColumn473, i32 3
  %rightComp475 = extractelement <4 x float> %rightColumn403, i32 2
  %product476 = fmul float %leftComp474, %rightComp475
  %dotProduct477 = fadd float %dotProduct472, %product476
  %leftColumn478 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp479 = extractelement <4 x float> %leftColumn478, i32 3
  %rightComp480 = extractelement <4 x float> %rightColumn403, i32 3
  %product481 = fmul float %leftComp479, %rightComp480
  %dotProduct482 = fadd float %dotProduct477, %product481
  %column483 = insertelement <4 x float> %column463, float %dotProduct482, i32 3
  %resultMatrix484 = insertvalue [4 x <4 x float>] %resultMatrix402, <4 x float> %column483, 1
  %rightColumn485 = extractvalue [4 x <4 x float>] %199, 2
  %leftColumn486 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp487 = extractelement <4 x float> %leftColumn486, i32 0
  %rightComp488 = extractelement <4 x float> %rightColumn485, i32 0
  %product489 = fmul float %leftComp487, %rightComp488
  %leftColumn490 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp491 = extractelement <4 x float> %leftColumn490, i32 0
  %rightComp492 = extractelement <4 x float> %rightColumn485, i32 1
  %product493 = fmul float %leftComp491, %rightComp492
  %dotProduct494 = fadd float %product489, %product493
  %leftColumn495 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp496 = extractelement <4 x float> %leftColumn495, i32 0
  %rightComp497 = extractelement <4 x float> %rightColumn485, i32 2
  %product498 = fmul float %leftComp496, %rightComp497
  %dotProduct499 = fadd float %dotProduct494, %product498
  %leftColumn500 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp501 = extractelement <4 x float> %leftColumn500, i32 0
  %rightComp502 = extractelement <4 x float> %rightColumn485, i32 3
  %product503 = fmul float %leftComp501, %rightComp502
  %dotProduct504 = fadd float %dotProduct499, %product503
  %column505 = insertelement <4 x float> %column483, float %dotProduct504, i32 0
  %leftColumn506 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp507 = extractelement <4 x float> %leftColumn506, i32 1
  %rightComp508 = extractelement <4 x float> %rightColumn485, i32 0
  %product509 = fmul float %leftComp507, %rightComp508
  %leftColumn510 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp511 = extractelement <4 x float> %leftColumn510, i32 1
  %rightComp512 = extractelement <4 x float> %rightColumn485, i32 1
  %product513 = fmul float %leftComp511, %rightComp512
  %dotProduct514 = fadd float %product509, %product513
  %leftColumn515 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp516 = extractelement <4 x float> %leftColumn515, i32 1
  %rightComp517 = extractelement <4 x float> %rightColumn485, i32 2
  %product518 = fmul float %leftComp516, %rightComp517
  %dotProduct519 = fadd float %dotProduct514, %product518
  %leftColumn520 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp521 = extractelement <4 x float> %leftColumn520, i32 1
  %rightComp522 = extractelement <4 x float> %rightColumn485, i32 3
  %product523 = fmul float %leftComp521, %rightComp522
  %dotProduct524 = fadd float %dotProduct519, %product523
  %column525 = insertelement <4 x float> %column505, float %dotProduct524, i32 1
  %leftColumn526 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp527 = extractelement <4 x float> %leftColumn526, i32 2
  %rightComp528 = extractelement <4 x float> %rightColumn485, i32 0
  %product529 = fmul float %leftComp527, %rightComp528
  %leftColumn530 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp531 = extractelement <4 x float> %leftColumn530, i32 2
  %rightComp532 = extractelement <4 x float> %rightColumn485, i32 1
  %product533 = fmul float %leftComp531, %rightComp532
  %dotProduct534 = fadd float %product529, %product533
  %leftColumn535 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp536 = extractelement <4 x float> %leftColumn535, i32 2
  %rightComp537 = extractelement <4 x float> %rightColumn485, i32 2
  %product538 = fmul float %leftComp536, %rightComp537
  %dotProduct539 = fadd float %dotProduct534, %product538
  %leftColumn540 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp541 = extractelement <4 x float> %leftColumn540, i32 2
  %rightComp542 = extractelement <4 x float> %rightColumn485, i32 3
  %product543 = fmul float %leftComp541, %rightComp542
  %dotProduct544 = fadd float %dotProduct539, %product543
  %column545 = insertelement <4 x float> %column525, float %dotProduct544, i32 2
  %leftColumn546 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp547 = extractelement <4 x float> %leftColumn546, i32 3
  %rightComp548 = extractelement <4 x float> %rightColumn485, i32 0
  %product549 = fmul float %leftComp547, %rightComp548
  %leftColumn550 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp551 = extractelement <4 x float> %leftColumn550, i32 3
  %rightComp552 = extractelement <4 x float> %rightColumn485, i32 1
  %product553 = fmul float %leftComp551, %rightComp552
  %dotProduct554 = fadd float %product549, %product553
  %leftColumn555 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp556 = extractelement <4 x float> %leftColumn555, i32 3
  %rightComp557 = extractelement <4 x float> %rightColumn485, i32 2
  %product558 = fmul float %leftComp556, %rightComp557
  %dotProduct559 = fadd float %dotProduct554, %product558
  %leftColumn560 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp561 = extractelement <4 x float> %leftColumn560, i32 3
  %rightComp562 = extractelement <4 x float> %rightColumn485, i32 3
  %product563 = fmul float %leftComp561, %rightComp562
  %dotProduct564 = fadd float %dotProduct559, %product563
  %column565 = insertelement <4 x float> %column545, float %dotProduct564, i32 3
  %resultMatrix566 = insertvalue [4 x <4 x float>] %resultMatrix484, <4 x float> %column565, 2
  %rightColumn567 = extractvalue [4 x <4 x float>] %199, 3
  %leftColumn568 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp569 = extractelement <4 x float> %leftColumn568, i32 0
  %rightComp570 = extractelement <4 x float> %rightColumn567, i32 0
  %product571 = fmul float %leftComp569, %rightComp570
  %leftColumn572 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp573 = extractelement <4 x float> %leftColumn572, i32 0
  %rightComp574 = extractelement <4 x float> %rightColumn567, i32 1
  %product575 = fmul float %leftComp573, %rightComp574
  %dotProduct576 = fadd float %product571, %product575
  %leftColumn577 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp578 = extractelement <4 x float> %leftColumn577, i32 0
  %rightComp579 = extractelement <4 x float> %rightColumn567, i32 2
  %product580 = fmul float %leftComp578, %rightComp579
  %dotProduct581 = fadd float %dotProduct576, %product580
  %leftColumn582 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp583 = extractelement <4 x float> %leftColumn582, i32 0
  %rightComp584 = extractelement <4 x float> %rightColumn567, i32 3
  %product585 = fmul float %leftComp583, %rightComp584
  %dotProduct586 = fadd float %dotProduct581, %product585
  %column587 = insertelement <4 x float> %column565, float %dotProduct586, i32 0
  %leftColumn588 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp589 = extractelement <4 x float> %leftColumn588, i32 1
  %rightComp590 = extractelement <4 x float> %rightColumn567, i32 0
  %product591 = fmul float %leftComp589, %rightComp590
  %leftColumn592 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp593 = extractelement <4 x float> %leftColumn592, i32 1
  %rightComp594 = extractelement <4 x float> %rightColumn567, i32 1
  %product595 = fmul float %leftComp593, %rightComp594
  %dotProduct596 = fadd float %product591, %product595
  %leftColumn597 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp598 = extractelement <4 x float> %leftColumn597, i32 1
  %rightComp599 = extractelement <4 x float> %rightColumn567, i32 2
  %product600 = fmul float %leftComp598, %rightComp599
  %dotProduct601 = fadd float %dotProduct596, %product600
  %leftColumn602 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp603 = extractelement <4 x float> %leftColumn602, i32 1
  %rightComp604 = extractelement <4 x float> %rightColumn567, i32 3
  %product605 = fmul float %leftComp603, %rightComp604
  %dotProduct606 = fadd float %dotProduct601, %product605
  %column607 = insertelement <4 x float> %column587, float %dotProduct606, i32 1
  %leftColumn608 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp609 = extractelement <4 x float> %leftColumn608, i32 2
  %rightComp610 = extractelement <4 x float> %rightColumn567, i32 0
  %product611 = fmul float %leftComp609, %rightComp610
  %leftColumn612 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp613 = extractelement <4 x float> %leftColumn612, i32 2
  %rightComp614 = extractelement <4 x float> %rightColumn567, i32 1
  %product615 = fmul float %leftComp613, %rightComp614
  %dotProduct616 = fadd float %product611, %product615
  %leftColumn617 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp618 = extractelement <4 x float> %leftColumn617, i32 2
  %rightComp619 = extractelement <4 x float> %rightColumn567, i32 2
  %product620 = fmul float %leftComp618, %rightComp619
  %dotProduct621 = fadd float %dotProduct616, %product620
  %leftColumn622 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp623 = extractelement <4 x float> %leftColumn622, i32 2
  %rightComp624 = extractelement <4 x float> %rightColumn567, i32 3
  %product625 = fmul float %leftComp623, %rightComp624
  %dotProduct626 = fadd float %dotProduct621, %product625
  %column627 = insertelement <4 x float> %column607, float %dotProduct626, i32 2
  %leftColumn628 = extractvalue [4 x <4 x float>] %198, 0
  %leftComp629 = extractelement <4 x float> %leftColumn628, i32 3
  %rightComp630 = extractelement <4 x float> %rightColumn567, i32 0
  %product631 = fmul float %leftComp629, %rightComp630
  %leftColumn632 = extractvalue [4 x <4 x float>] %198, 1
  %leftComp633 = extractelement <4 x float> %leftColumn632, i32 3
  %rightComp634 = extractelement <4 x float> %rightColumn567, i32 1
  %product635 = fmul float %leftComp633, %rightComp634
  %dotProduct636 = fadd float %product631, %product635
  %leftColumn637 = extractvalue [4 x <4 x float>] %198, 2
  %leftComp638 = extractelement <4 x float> %leftColumn637, i32 3
  %rightComp639 = extractelement <4 x float> %rightColumn567, i32 2
  %product640 = fmul float %leftComp638, %rightComp639
  %dotProduct641 = fadd float %dotProduct636, %product640
  %leftColumn642 = extractvalue [4 x <4 x float>] %198, 3
  %leftComp643 = extractelement <4 x float> %leftColumn642, i32 3
  %rightComp644 = extractelement <4 x float> %rightColumn567, i32 3
  %product645 = fmul float %leftComp643, %rightComp644
  %dotProduct646 = fadd float %dotProduct641, %product645
  %column647 = insertelement <4 x float> %column627, float %dotProduct646, i32 3
  %resultMatrix648 = insertvalue [4 x <4 x float>] %resultMatrix566, <4 x float> %column647, 3
  %v649 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  store <4 x float> %v649, <4 x float>* @v_shadow
  %200 = load <4 x float>* @v_shadow
  %201 = load <4 x float>* %0
  %component650 = extractelement <4 x float> %200, i32 0
  %component651 = extractelement <4 x float> %200, i32 1
  %component652 = extractelement <4 x float> %200, i32 2
  %component653 = extractelement <4 x float> %200, i32 3
  %column654 = extractvalue [4 x <4 x float>] %resultMatrix648, 0
  %element655 = extractelement <4 x float> %column654, i32 0
  %product656 = fmul float %element655, %component650
  %column657 = extractvalue [4 x <4 x float>] %resultMatrix648, 1
  %element658 = extractelement <4 x float> %column657, i32 0
  %product659 = fmul float %element658, %component651
  %dotProduct660 = fadd float %product656, %product659
  %column661 = extractvalue [4 x <4 x float>] %resultMatrix648, 2
  %element662 = extractelement <4 x float> %column661, i32 0
  %product663 = fmul float %element662, %component652
  %dotProduct664 = fadd float %dotProduct660, %product663
  %column665 = extractvalue [4 x <4 x float>] %resultMatrix648, 3
  %element666 = extractelement <4 x float> %column665, i32 0
  %product667 = fmul float %element666, %component653
  %dotProduct668 = fadd float %dotProduct664, %product667
  %202 = insertelement <4 x float> %201, float %dotProduct668, i32 0
  %column669 = extractvalue [4 x <4 x float>] %resultMatrix648, 0
  %element670 = extractelement <4 x float> %column669, i32 1
  %product671 = fmul float %element670, %component650
  %column672 = extractvalue [4 x <4 x float>] %resultMatrix648, 1
  %element673 = extractelement <4 x float> %column672, i32 1
  %product674 = fmul float %element673, %component651
  %dotProduct675 = fadd float %product671, %product674
  %column676 = extractvalue [4 x <4 x float>] %resultMatrix648, 2
  %element677 = extractelement <4 x float> %column676, i32 1
  %product678 = fmul float %element677, %component652
  %dotProduct679 = fadd float %dotProduct675, %product678
  %column680 = extractvalue [4 x <4 x float>] %resultMatrix648, 3
  %element681 = extractelement <4 x float> %column680, i32 1
  %product682 = fmul float %element681, %component653
  %dotProduct683 = fadd float %dotProduct679, %product682
  %203 = insertelement <4 x float> %202, float %dotProduct683, i32 1
  %column684 = extractvalue [4 x <4 x float>] %resultMatrix648, 0
  %element685 = extractelement <4 x float> %column684, i32 2
  %product686 = fmul float %element685, %component650
  %column687 = extractvalue [4 x <4 x float>] %resultMatrix648, 1
  %element688 = extractelement <4 x float> %column687, i32 2
  %product689 = fmul float %element688, %component651
  %dotProduct690 = fadd float %product686, %product689
  %column691 = extractvalue [4 x <4 x float>] %resultMatrix648, 2
  %element692 = extractelement <4 x float> %column691, i32 2
  %product693 = fmul float %element692, %component652
  %dotProduct694 = fadd float %dotProduct690, %product693
  %column695 = extractvalue [4 x <4 x float>] %resultMatrix648, 3
  %element696 = extractelement <4 x float> %column695, i32 2
  %product697 = fmul float %element696, %component653
  %dotProduct698 = fadd float %dotProduct694, %product697
  %204 = insertelement <4 x float> %203, float %dotProduct698, i32 2
  %column699 = extractvalue [4 x <4 x float>] %resultMatrix648, 0
  %element700 = extractelement <4 x float> %column699, i32 3
  %product701 = fmul float %element700, %component650
  %column702 = extractvalue [4 x <4 x float>] %resultMatrix648, 1
  %element703 = extractelement <4 x float> %column702, i32 3
  %product704 = fmul float %element703, %component651
  %dotProduct705 = fadd float %product701, %product704
  %column706 = extractvalue [4 x <4 x float>] %resultMatrix648, 2
  %element707 = extractelement <4 x float> %column706, i32 3
  %product708 = fmul float %element707, %component652
  %dotProduct709 = fadd float %dotProduct705, %product708
  %column710 = extractvalue [4 x <4 x float>] %resultMatrix648, 3
  %element711 = extractelement <4 x float> %column710, i32 3
  %product712 = fmul float %element711, %component653
  %dotProduct713 = fadd float %dotProduct709, %product712
  %205 = insertelement <4 x float> %204, float %dotProduct713, i32 3
  %206 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow714 = fadd <4 x float> %206, %205
  store <4 x float> %FragColor_shadow714, <4 x float>* @FragColor_shadow
  br label %ifmerge715

ifmerge715:                                       ; preds = %else322, %then255
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge715
  %207 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %207), !gla.output !1
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8}
!gla.inputs = !{!9, !11, !13}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"un34", i32 12, [4 x <4 x float>]* @un34_typeProxy, metadata !4}
!4 = metadata !{i32 3, i32 0, i32 1024, null}
!5 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !4}
!6 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !4}
!7 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !4}
!8 = metadata !{metadata !"um43", i32 12, [4 x <4 x float>]* @um43_typeProxy, metadata !4}
!9 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_shadow_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!11 = metadata !{metadata !"v", i32 1, <4 x float>* @v_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!13 = metadata !{metadata !"u", i32 1, <4 x float>* @u_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}


Bottom IR:
; ModuleID = 'Glslang'

@un34 = external addrspace(2) constant [4 x <4 x float>]
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1
  %0 = load <4 x float> addrspace(2)* %gla_constGEP, align 16, !gla.uniform !3
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !9
  %1 = load [3 x <3 x float>] addrspace(2)* @colorTransform, align 16, !gla.uniform !5
  %column = extractvalue [3 x <3 x float>] %1, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %column)
  %column1 = extractvalue [3 x <3 x float>] %1, 1
  %dotres2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %column1)
  %column3 = extractvalue [3 x <3 x float>] %1, 2
  %dotres4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %column3)
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres, i32 0, float %dotres2, i32 0, float %dotres4, i32 0, float 1.000000e+00, i32 0)
  %FragColor_shadow6 = fadd <4 x float> %0, %2
  %3 = load [4 x <4 x float>] addrspace(2)* @m, align 16, !gla.uniform !6
  %4 = load [4 x <4 x float>] addrspace(2)* @n, align 16, !gla.uniform !7
  %element1 = extractvalue [4 x <4 x float>] %3, 0
  %element2 = extractvalue [4 x <4 x float>] %4, 0
  %5 = fcmp one <4 x float> %element1, %element2
  %6 = call i1 @llvm.gla.any.v4i1(<4 x i1> %5)
  %element17 = extractvalue [4 x <4 x float>] %3, 1
  %element28 = extractvalue [4 x <4 x float>] %4, 1
  %7 = fcmp one <4 x float> %element17, %element28
  %8 = call i1 @llvm.gla.any.v4i1(<4 x i1> %7)
  %9 = or i1 %6, %8
  %element19 = extractvalue [4 x <4 x float>] %3, 2
  %element210 = extractvalue [4 x <4 x float>] %4, 2
  %10 = fcmp one <4 x float> %element19, %element210
  %11 = call i1 @llvm.gla.any.v4i1(<4 x i1> %10)
  %12 = or i1 %9, %11
  %element111 = extractvalue [4 x <4 x float>] %3, 3
  %element212 = extractvalue [4 x <4 x float>] %4, 3
  %13 = fcmp one <4 x float> %element111, %element212
  %14 = call i1 @llvm.gla.any.v4i1(<4 x i1> %13)
  %15 = or i1 %12, %14
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !11
  br i1 %15, label %then, label %else

then:                                             ; preds = %entry
  %FragColor_shadow13 = fadd <4 x float> %FragColor_shadow6, %v
  %.pre = extractelement <4 x float> %v, i32 0
  %.pre717 = extractelement <4 x float> %v, i32 1
  %.pre719 = extractelement <4 x float> %v, i32 2
  %.pre721 = extractelement <4 x float> %v, i32 3
  br label %ifmerge

else:                                             ; preds = %entry
  %component = extractelement <4 x float> %v, i32 0
  %component15 = extractelement <4 x float> %v, i32 1
  %component16 = extractelement <4 x float> %v, i32 2
  %component17 = extractelement <4 x float> %v, i32 3
  %element = extractelement <4 x float> %element1, i32 0
  %product = fmul float %element, %component
  %element20 = extractelement <4 x float> %element17, i32 0
  %product21 = fmul float %element20, %component15
  %dotProduct = fadd float %product, %product21
  %element23 = extractelement <4 x float> %element19, i32 0
  %product24 = fmul float %element23, %component16
  %dotProduct25 = fadd float %product24, %dotProduct
  %element27 = extractelement <4 x float> %element111, i32 0
  %product28 = fmul float %element27, %component17
  %dotProduct29 = fadd float %product28, %dotProduct25
  %element31 = extractelement <4 x float> %element1, i32 1
  %product32 = fmul float %element31, %component
  %element34 = extractelement <4 x float> %element17, i32 1
  %product35 = fmul float %element34, %component15
  %dotProduct36 = fadd float %product32, %product35
  %element38 = extractelement <4 x float> %element19, i32 1
  %product39 = fmul float %element38, %component16
  %dotProduct40 = fadd float %product39, %dotProduct36
  %element42 = extractelement <4 x float> %element111, i32 1
  %product43 = fmul float %element42, %component17
  %dotProduct44 = fadd float %product43, %dotProduct40
  %element46 = extractelement <4 x float> %element1, i32 2
  %product47 = fmul float %element46, %component
  %element49 = extractelement <4 x float> %element17, i32 2
  %product50 = fmul float %element49, %component15
  %dotProduct51 = fadd float %product47, %product50
  %element53 = extractelement <4 x float> %element19, i32 2
  %product54 = fmul float %element53, %component16
  %dotProduct55 = fadd float %product54, %dotProduct51
  %element57 = extractelement <4 x float> %element111, i32 2
  %product58 = fmul float %element57, %component17
  %dotProduct59 = fadd float %product58, %dotProduct55
  %element61 = extractelement <4 x float> %element1, i32 3
  %product62 = fmul float %element61, %component
  %element64 = extractelement <4 x float> %element17, i32 3
  %product65 = fmul float %element64, %component15
  %dotProduct66 = fadd float %product62, %product65
  %element68 = extractelement <4 x float> %element19, i32 3
  %product69 = fmul float %element68, %component16
  %dotProduct70 = fadd float %product69, %dotProduct66
  %element72 = extractelement <4 x float> %element111, i32 3
  %product73 = fmul float %element72, %component17
  %dotProduct74 = fadd float %product73, %dotProduct70
  %16 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct29, i32 0, float %dotProduct44, i32 0, float %dotProduct59, i32 0, float %dotProduct74, i32 0)
  %FragColor_shadow75 = fadd <4 x float> %FragColor_shadow6, %16
  %column77 = fsub <4 x float> %element1, %element2
  %column80 = fsub <4 x float> %element17, %element28
  %column83 = fsub <4 x float> %element19, %element210
  %column86 = fsub <4 x float> %element111, %element212
  %dotres88 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %column77)
  %dotres90 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %column80)
  %dotres92 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %column83)
  %dotres94 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %column86)
  %17 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres88, i32 0, float %dotres90, i32 0, float %dotres92, i32 0, float %dotres94, i32 0)
  %FragColor_shadow95 = fadd <4 x float> %FragColor_shadow75, %17
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %.pre-phi722 = phi float [ %component17, %else ], [ %.pre721, %then ]
  %.pre-phi720 = phi float [ %component16, %else ], [ %.pre719, %then ]
  %.pre-phi718 = phi float [ %component15, %else ], [ %.pre717, %then ]
  %.pre-phi = phi float [ %component, %else ], [ %.pre, %then ]
  %FragColor_shadow716.0 = phi <4 x float> [ %FragColor_shadow95, %else ], [ %FragColor_shadow13, %then ]
  %u = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1027, i32 -1, i32 1), !gla.input !13
  %18 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u, <4 x i32> <i32 2, i32 3, i32 0, i32 0>)
  %19 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u, <4 x i32> <i32 3, i32 0, i32 0, i32 1>)
  %20 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u, <4 x i32> <i32 0, i32 0, i32 1, i32 2>)
  %21 = extractelement <4 x float> %u, i32 0
  %22 = fmul float %.pre-phi, %21
  %23 = extractelement <4 x float> %u, i32 1
  %24 = fmul float %.pre-phi, %23
  %25 = extractelement <4 x float> %u, i32 2
  %26 = fmul float %.pre-phi, %25
  %27 = extractelement <4 x float> %u, i32 3
  %28 = fmul float %.pre-phi, %27
  %29 = fmul float %.pre-phi718, %21
  %30 = fmul float %.pre-phi718, %23
  %31 = fmul float %.pre-phi718, %25
  %32 = fmul float %.pre-phi718, %27
  %33 = fmul float %.pre-phi720, %21
  %34 = fmul float %.pre-phi720, %23
  %35 = fmul float %.pre-phi720, %25
  %36 = fmul float %.pre-phi720, %27
  %37 = fmul float %.pre-phi722, %21
  %38 = fmul float %.pre-phi722, %23
  %39 = fmul float %.pre-phi722, %25
  %40 = fmul float %.pre-phi722, %27
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %22, i32 0, float %24, i32 0, float %26, i32 0, float %28, i32 0)
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %29, i32 0, float %30, i32 0, float %31, i32 0, float %32, i32 0)
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %33, i32 0, float %34, i32 0, float %35, i32 0, float %36, i32 0)
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %37, i32 0, float %38, i32 0, float %39, i32 0, float %40, i32 0)
  %45 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %46 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float undef, float undef, float undef>, i32 14, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, i32 12, float undef, i32 undef, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0)
  %48 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float> undef, i32 15, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, <4 x float> %v, i32 0)
  %column179 = fadd <4 x float> %45, %41
  %column182 = fadd <4 x float> %46, %42
  %column185 = fadd <4 x float> %47, %43
  %column188 = fadd <4 x float> %48, %44
  %column236 = fadd <4 x float> %u, %column179
  %column239 = fadd <4 x float> %20, %column182
  %column242 = fadd <4 x float> %19, %column185
  %column245 = fadd <4 x float> %18, %column188
  %49 = load [4 x <4 x float>] addrspace(2)* @un34, align 16, !gla.uniform !3
  %element2248 = extractvalue [4 x <4 x float>] %49, 0
  %50 = fcmp oeq <4 x float> %column236, %element2248
  %51 = call i1 @llvm.gla.all.v4i1(<4 x i1> %50)
  %element2250 = extractvalue [4 x <4 x float>] %49, 1
  %52 = fcmp oeq <4 x float> %column239, %element2250
  %53 = call i1 @llvm.gla.all.v4i1(<4 x i1> %52)
  %54 = and i1 %51, %53
  %element2252 = extractvalue [4 x <4 x float>] %49, 2
  %55 = fcmp oeq <4 x float> %column242, %element2252
  %56 = call i1 @llvm.gla.all.v4i1(<4 x i1> %55)
  %57 = and i1 %54, %56
  %element2254 = extractvalue [4 x <4 x float>] %49, 3
  %58 = fcmp oeq <4 x float> %column245, %element2254
  %59 = call i1 @llvm.gla.all.v4i1(<4 x i1> %58)
  %60 = and i1 %57, %59
  br i1 %60, label %then255, label %else322

then255:                                          ; preds = %ifmerge
  %element262 = extractelement <4 x float> %column236, i32 0
  %product263 = fmul float %21, %element262
  %element265 = extractelement <4 x float> %column239, i32 0
  %product266 = fmul float %23, %element265
  %dotProduct267 = fadd float %product263, %product266
  %element269 = extractelement <4 x float> %column242, i32 0
  %product270 = fmul float %25, %element269
  %dotProduct271 = fadd float %product270, %dotProduct267
  %element273 = extractelement <4 x float> %column245, i32 0
  %product274 = fmul float %27, %element273
  %dotProduct275 = fadd float %product274, %dotProduct271
  %element277 = extractelement <4 x float> %column236, i32 1
  %product278 = fmul float %21, %element277
  %element280 = extractelement <4 x float> %column239, i32 1
  %product281 = fmul float %23, %element280
  %dotProduct282 = fadd float %product278, %product281
  %element284 = extractelement <4 x float> %column242, i32 1
  %product285 = fmul float %25, %element284
  %dotProduct286 = fadd float %product285, %dotProduct282
  %element288 = extractelement <4 x float> %column245, i32 1
  %product289 = fmul float %27, %element288
  %dotProduct290 = fadd float %product289, %dotProduct286
  %element292 = extractelement <4 x float> %column236, i32 2
  %product293 = fmul float %21, %element292
  %element295 = extractelement <4 x float> %column239, i32 2
  %product296 = fmul float %23, %element295
  %dotProduct297 = fadd float %product293, %product296
  %element299 = extractelement <4 x float> %column242, i32 2
  %product300 = fmul float %25, %element299
  %dotProduct301 = fadd float %product300, %dotProduct297
  %element303 = extractelement <4 x float> %column245, i32 2
  %product304 = fmul float %27, %element303
  %dotProduct305 = fadd float %product304, %dotProduct301
  %element307 = extractelement <4 x float> %column236, i32 3
  %product308 = fmul float %21, %element307
  %element310 = extractelement <4 x float> %column239, i32 3
  %product311 = fmul float %23, %element310
  %dotProduct312 = fadd float %product308, %product311
  %element314 = extractelement <4 x float> %column242, i32 3
  %product315 = fmul float %25, %element314
  %dotProduct316 = fadd float %product315, %dotProduct312
  %element318 = extractelement <4 x float> %column245, i32 3
  %product319 = fmul float %27, %element318
  %dotProduct320 = fadd float %product319, %dotProduct316
  %61 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct275, i32 0, float %dotProduct290, i32 0, float %dotProduct305, i32 0, float %dotProduct320, i32 0)
  br label %ifmerge715

else322:                                          ; preds = %ifmerge
  %62 = load [4 x <4 x float>] addrspace(2)* @um43, align 16, !gla.uniform !8
  %rightColumn323 = extractvalue [4 x <4 x float>] %62, 0
  %leftComp = extractelement <4 x float> %element2248, i32 0
  %rightComp = extractelement <4 x float> %rightColumn323, i32 0
  %product325 = fmul float %leftComp, %rightComp
  %leftComp327 = extractelement <4 x float> %element2250, i32 0
  %rightComp328 = extractelement <4 x float> %rightColumn323, i32 1
  %product329 = fmul float %leftComp327, %rightComp328
  %dotProduct330 = fadd float %product325, %product329
  %leftComp332 = extractelement <4 x float> %element2252, i32 0
  %rightComp333 = extractelement <4 x float> %rightColumn323, i32 2
  %product334 = fmul float %leftComp332, %rightComp333
  %dotProduct335 = fadd float %product334, %dotProduct330
  %leftComp337 = extractelement <4 x float> %element2254, i32 0
  %rightComp338 = extractelement <4 x float> %rightColumn323, i32 3
  %product339 = fmul float %leftComp337, %rightComp338
  %dotProduct340 = fadd float %product339, %dotProduct335
  %leftComp343 = extractelement <4 x float> %element2248, i32 1
  %product345 = fmul float %leftComp343, %rightComp
  %leftComp347 = extractelement <4 x float> %element2250, i32 1
  %product349 = fmul float %leftComp347, %rightComp328
  %dotProduct350 = fadd float %product345, %product349
  %leftComp352 = extractelement <4 x float> %element2252, i32 1
  %product354 = fmul float %leftComp352, %rightComp333
  %dotProduct355 = fadd float %product354, %dotProduct350
  %leftComp357 = extractelement <4 x float> %element2254, i32 1
  %product359 = fmul float %leftComp357, %rightComp338
  %dotProduct360 = fadd float %product359, %dotProduct355
  %leftComp363 = extractelement <4 x float> %element2248, i32 2
  %product365 = fmul float %leftComp363, %rightComp
  %leftComp367 = extractelement <4 x float> %element2250, i32 2
  %product369 = fmul float %leftComp367, %rightComp328
  %dotProduct370 = fadd float %product365, %product369
  %leftComp372 = extractelement <4 x float> %element2252, i32 2
  %product374 = fmul float %leftComp372, %rightComp333
  %dotProduct375 = fadd float %product374, %dotProduct370
  %leftComp377 = extractelement <4 x float> %element2254, i32 2
  %product379 = fmul float %leftComp377, %rightComp338
  %dotProduct380 = fadd float %product379, %dotProduct375
  %leftComp383 = extractelement <4 x float> %element2248, i32 3
  %product385 = fmul float %leftComp383, %rightComp
  %leftComp387 = extractelement <4 x float> %element2250, i32 3
  %product389 = fmul float %leftComp387, %rightComp328
  %dotProduct390 = fadd float %product385, %product389
  %leftComp392 = extractelement <4 x float> %element2252, i32 3
  %product394 = fmul float %leftComp392, %rightComp333
  %dotProduct395 = fadd float %product394, %dotProduct390
  %leftComp397 = extractelement <4 x float> %element2254, i32 3
  %product399 = fmul float %leftComp397, %rightComp338
  %dotProduct400 = fadd float %product399, %dotProduct395
  %rightColumn403 = extractvalue [4 x <4 x float>] %62, 1
  %rightComp406 = extractelement <4 x float> %rightColumn403, i32 0
  %product407 = fmul float %leftComp, %rightComp406
  %rightComp410 = extractelement <4 x float> %rightColumn403, i32 1
  %product411 = fmul float %leftComp327, %rightComp410
  %dotProduct412 = fadd float %product407, %product411
  %rightComp415 = extractelement <4 x float> %rightColumn403, i32 2
  %product416 = fmul float %leftComp332, %rightComp415
  %dotProduct417 = fadd float %product416, %dotProduct412
  %rightComp420 = extractelement <4 x float> %rightColumn403, i32 3
  %product421 = fmul float %leftComp337, %rightComp420
  %dotProduct422 = fadd float %product421, %dotProduct417
  %product427 = fmul float %leftComp343, %rightComp406
  %product431 = fmul float %leftComp347, %rightComp410
  %dotProduct432 = fadd float %product427, %product431
  %product436 = fmul float %leftComp352, %rightComp415
  %dotProduct437 = fadd float %product436, %dotProduct432
  %product441 = fmul float %leftComp357, %rightComp420
  %dotProduct442 = fadd float %product441, %dotProduct437
  %product447 = fmul float %leftComp363, %rightComp406
  %product451 = fmul float %leftComp367, %rightComp410
  %dotProduct452 = fadd float %product447, %product451
  %product456 = fmul float %leftComp372, %rightComp415
  %dotProduct457 = fadd float %product456, %dotProduct452
  %product461 = fmul float %leftComp377, %rightComp420
  %dotProduct462 = fadd float %product461, %dotProduct457
  %product467 = fmul float %leftComp383, %rightComp406
  %product471 = fmul float %leftComp387, %rightComp410
  %dotProduct472 = fadd float %product467, %product471
  %product476 = fmul float %leftComp392, %rightComp415
  %dotProduct477 = fadd float %product476, %dotProduct472
  %product481 = fmul float %leftComp397, %rightComp420
  %dotProduct482 = fadd float %product481, %dotProduct477
  %rightColumn485 = extractvalue [4 x <4 x float>] %62, 2
  %rightComp488 = extractelement <4 x float> %rightColumn485, i32 0
  %product489 = fmul float %leftComp, %rightComp488
  %rightComp492 = extractelement <4 x float> %rightColumn485, i32 1
  %product493 = fmul float %leftComp327, %rightComp492
  %dotProduct494 = fadd float %product489, %product493
  %rightComp497 = extractelement <4 x float> %rightColumn485, i32 2
  %product498 = fmul float %leftComp332, %rightComp497
  %dotProduct499 = fadd float %product498, %dotProduct494
  %rightComp502 = extractelement <4 x float> %rightColumn485, i32 3
  %product503 = fmul float %leftComp337, %rightComp502
  %dotProduct504 = fadd float %product503, %dotProduct499
  %product509 = fmul float %leftComp343, %rightComp488
  %product513 = fmul float %leftComp347, %rightComp492
  %dotProduct514 = fadd float %product509, %product513
  %product518 = fmul float %leftComp352, %rightComp497
  %dotProduct519 = fadd float %product518, %dotProduct514
  %product523 = fmul float %leftComp357, %rightComp502
  %dotProduct524 = fadd float %product523, %dotProduct519
  %product529 = fmul float %leftComp363, %rightComp488
  %product533 = fmul float %leftComp367, %rightComp492
  %dotProduct534 = fadd float %product529, %product533
  %product538 = fmul float %leftComp372, %rightComp497
  %dotProduct539 = fadd float %product538, %dotProduct534
  %product543 = fmul float %leftComp377, %rightComp502
  %dotProduct544 = fadd float %product543, %dotProduct539
  %product549 = fmul float %leftComp383, %rightComp488
  %product553 = fmul float %leftComp387, %rightComp492
  %dotProduct554 = fadd float %product549, %product553
  %product558 = fmul float %leftComp392, %rightComp497
  %dotProduct559 = fadd float %product558, %dotProduct554
  %product563 = fmul float %leftComp397, %rightComp502
  %dotProduct564 = fadd float %product563, %dotProduct559
  %rightColumn567 = extractvalue [4 x <4 x float>] %62, 3
  %rightComp570 = extractelement <4 x float> %rightColumn567, i32 0
  %product571 = fmul float %leftComp, %rightComp570
  %rightComp574 = extractelement <4 x float> %rightColumn567, i32 1
  %product575 = fmul float %leftComp327, %rightComp574
  %dotProduct576 = fadd float %product571, %product575
  %rightComp579 = extractelement <4 x float> %rightColumn567, i32 2
  %product580 = fmul float %leftComp332, %rightComp579
  %dotProduct581 = fadd float %product580, %dotProduct576
  %rightComp584 = extractelement <4 x float> %rightColumn567, i32 3
  %product585 = fmul float %leftComp337, %rightComp584
  %dotProduct586 = fadd float %product585, %dotProduct581
  %product591 = fmul float %leftComp343, %rightComp570
  %product595 = fmul float %leftComp347, %rightComp574
  %dotProduct596 = fadd float %product591, %product595
  %product600 = fmul float %leftComp352, %rightComp579
  %dotProduct601 = fadd float %product600, %dotProduct596
  %product605 = fmul float %leftComp357, %rightComp584
  %dotProduct606 = fadd float %product605, %dotProduct601
  %product611 = fmul float %leftComp363, %rightComp570
  %product615 = fmul float %leftComp367, %rightComp574
  %dotProduct616 = fadd float %product611, %product615
  %product620 = fmul float %leftComp372, %rightComp579
  %dotProduct621 = fadd float %product620, %dotProduct616
  %product625 = fmul float %leftComp377, %rightComp584
  %dotProduct626 = fadd float %product625, %dotProduct621
  %product631 = fmul float %leftComp383, %rightComp570
  %product635 = fmul float %leftComp387, %rightComp574
  %dotProduct636 = fadd float %product631, %product635
  %product640 = fmul float %leftComp392, %rightComp579
  %dotProduct641 = fadd float %product640, %dotProduct636
  %product645 = fmul float %leftComp397, %rightComp584
  %dotProduct646 = fadd float %product645, %dotProduct641
  %product656 = fmul float %.pre-phi, %dotProduct340
  %product659 = fmul float %.pre-phi718, %dotProduct422
  %dotProduct660 = fadd float %product656, %product659
  %product663 = fmul float %.pre-phi720, %dotProduct504
  %dotProduct664 = fadd float %product663, %dotProduct660
  %product667 = fmul float %.pre-phi722, %dotProduct586
  %dotProduct668 = fadd float %product667, %dotProduct664
  %product671 = fmul float %.pre-phi, %dotProduct360
  %product674 = fmul float %.pre-phi718, %dotProduct442
  %dotProduct675 = fadd float %product671, %product674
  %product678 = fmul float %.pre-phi720, %dotProduct524
  %dotProduct679 = fadd float %product678, %dotProduct675
  %product682 = fmul float %.pre-phi722, %dotProduct606
  %dotProduct683 = fadd float %product682, %dotProduct679
  %product686 = fmul float %.pre-phi, %dotProduct380
  %product689 = fmul float %.pre-phi718, %dotProduct462
  %dotProduct690 = fadd float %product686, %product689
  %product693 = fmul float %.pre-phi720, %dotProduct544
  %dotProduct694 = fadd float %product693, %dotProduct690
  %product697 = fmul float %.pre-phi722, %dotProduct626
  %dotProduct698 = fadd float %product697, %dotProduct694
  %product701 = fmul float %.pre-phi, %dotProduct400
  %product704 = fmul float %.pre-phi718, %dotProduct482
  %dotProduct705 = fadd float %product701, %product704
  %product708 = fmul float %.pre-phi720, %dotProduct564
  %dotProduct709 = fadd float %product708, %dotProduct705
  %product712 = fmul float %.pre-phi722, %dotProduct646
  %dotProduct713 = fadd float %product712, %dotProduct709
  %63 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct668, i32 0, float %dotProduct683, i32 0, float %dotProduct698, i32 0, float %dotProduct713, i32 0)
  br label %ifmerge715

ifmerge715:                                       ; preds = %else322, %then255
  %.pn = phi <4 x float> [ %61, %then255 ], [ %63, %else322 ]
  %FragColor_shadow716.1 = fadd <4 x float> %FragColor_shadow716.0, %.pn
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %FragColor_shadow716.1), !gla.output !1
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge715
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.any.v4i1(<4 x i1>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v4i1(<4 x i1>) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float>, i32, float, i32, float, i32, float, i32, <4 x float>, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8}
!gla.inputs = !{!9, !11, !13}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"un34", i32 12, [4 x <4 x float>]* @un34_typeProxy, metadata !4}
!4 = metadata !{i32 3, i32 0, i32 1024, null}
!5 = metadata !{metadata !"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, metadata !4}
!6 = metadata !{metadata !"m", i32 12, [4 x <4 x float>]* @m_typeProxy, metadata !4}
!7 = metadata !{metadata !"n", i32 12, [4 x <4 x float>]* @n_typeProxy, metadata !4}
!8 = metadata !{metadata !"um43", i32 12, [4 x <4 x float>]* @um43_typeProxy, metadata !4}
!9 = metadata !{metadata !"Color", i32 1, <3 x float>* @Color_shadow_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!11 = metadata !{metadata !"v", i32 1, <4 x float>* @v_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1026, null, i32 1}
!13 = metadata !{metadata !"u", i32 1, <4 x float>* @u_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1027, null, i32 1}
#version 130
// LunarGOO output
uniform mat4 un34;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
uniform mat4 um43;
in vec3 Color;
in vec4 v;
in vec4 u;
const float const34 = 1.0;
const float const120 = 0.0;
const vec4 const122 = vec4(0.0, 0.0, 0.0, 0.0);
const vec4 const124 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
    float _pre_phi_c1;
    float _pre_phi_c2;
    float _pre_phi_c3;
    float _pre_phi_c4;
    vec4 FragColor_shadow_c5;
    vec4 _pn_c6;
    vec3 column_c7 = colorTransform[0];
    float dotres_c8 = dot(Color, column_c7);
    vec3 column_c9 = colorTransform[1];
    float dotres_c10 = dot(Color, column_c9);
    vec3 column_c11 = colorTransform[2];
    float dotres_c12 = dot(Color, column_c11);
    vec4 temp33 = vec4(dotres_c8, dotres_c10, dotres_c12, const34);
    vec4 FragColor_shadow_c13 = temp33 + un34[1];
    vec4 element_c14 = m[0];
    vec4 element_c15 = n[0];
    bvec4 temp38 = notEqual(element_c14, element_c15);
    bool temp39 = any(temp38);
    vec4 element_c16 = m[1];
    vec4 element_c17 = n[1];
    bvec4 temp42 = notEqual(element_c16, element_c17);
    bool temp43 = any(temp42);
    bool temp44 = temp39 || temp43;
    vec4 element_c18 = m[2];
    vec4 element_c19 = n[2];
    bvec4 temp47 = notEqual(element_c18, element_c19);
    bool temp48 = any(temp47);
    bool temp49 = temp44 || temp48;
    vec4 element_c20 = m[3];
    vec4 element_c21 = n[3];
    bvec4 temp52 = notEqual(element_c20, element_c21);
    bool temp53 = any(temp52);
    bool temp54 = temp49 || temp53;
    if (temp54) {
        vec4 FragColor_shadow_c22 = FragColor_shadow_c13 + v;
        _pre_phi_c1 = v.w;
        _pre_phi_c2 = v.z;
        _pre_phi_c3 = v.y;
        _pre_phi_c4 = v.x;
        FragColor_shadow_c5 = FragColor_shadow_c22;
    }
    else {
        float product_c23 = element_c14.x * v.x;
        float product_c24 = element_c16.x * v.y;
        float dotProduct_c25 = product_c23 + product_c24;
        float product_c26 = element_c18.x * v.z;
        float dotProduct_c27 = dotProduct_c25 + product_c26;
        float product_c28 = element_c20.x * v.w;
        float dotProduct_c29 = dotProduct_c27 + product_c28;
        float product_c30 = element_c14.y * v.x;
        float product_c31 = element_c16.y * v.y;
        float dotProduct_c32 = product_c30 + product_c31;
        float product_c33 = element_c18.y * v.z;
        float dotProduct_c34 = dotProduct_c32 + product_c33;
        float product_c35 = element_c20.y * v.w;
        float dotProduct_c36 = dotProduct_c34 + product_c35;
        float product_c37 = element_c14.z * v.x;
        float product_c38 = element_c16.z * v.y;
        float dotProduct_c39 = product_c37 + product_c38;
        float product_c40 = element_c18.z * v.z;
        float dotProduct_c41 = dotProduct_c39 + product_c40;
        float product_c42 = element_c20.z * v.w;
        float dotProduct_c43 = dotProduct_c41 + product_c42;
        float product_c44 = element_c14.w * v.x;
        float product_c45 = element_c16.w * v.y;
        float dotProduct_c46 = product_c44 + product_c45;
        float product_c47 = element_c18.w * v.z;
        float dotProduct_c48 = dotProduct_c46 + product_c47;
        float product_c49 = element_c20.w * v.w;
        float dotProduct_c50 = dotProduct_c48 + product_c49;
        vec4 temp84 = vec4(dotProduct_c29, dotProduct_c36, dotProduct_c43, dotProduct_c50);
        vec4 FragColor_shadow_c51 = FragColor_shadow_c13 + temp84;
        vec4 column_c52 = element_c14 - element_c15;
        vec4 column_c53 = element_c16 - element_c17;
        vec4 column_c54 = element_c18 - element_c19;
        vec4 column_c55 = element_c20 - element_c21;
        float dotres_c56 = dot(v, column_c52);
        float dotres_c57 = dot(v, column_c53);
        float dotres_c58 = dot(v, column_c54);
        float dotres_c59 = dot(v, column_c55);
        vec4 temp94 = vec4(dotres_c56, dotres_c57, dotres_c58, dotres_c59);
        vec4 FragColor_shadow_c60 = FragColor_shadow_c51 + temp94;
        _pre_phi_c1 = v.w;
        _pre_phi_c2 = v.z;
        _pre_phi_c3 = v.y;
        _pre_phi_c4 = v.x;
        FragColor_shadow_c5 = FragColor_shadow_c60;
    }
    
    vec4 temp96 = u.zwxx;
    vec4 temp97 = u.wxxy;
    vec4 temp98 = u.xxyz;
    float temp99 = _pre_phi_c4 * u.x;
    float temp100 = _pre_phi_c4 * u.y;
    float temp101 = _pre_phi_c4 * u.z;
    float temp102 = _pre_phi_c4 * u.w;
    float temp103 = _pre_phi_c3 * u.x;
    float temp104 = _pre_phi_c3 * u.y;
    float temp105 = _pre_phi_c3 * u.z;
    float temp106 = _pre_phi_c3 * u.w;
    float temp107 = _pre_phi_c2 * u.x;
    float temp108 = _pre_phi_c2 * u.y;
    float temp109 = _pre_phi_c2 * u.z;
    float temp110 = _pre_phi_c2 * u.w;
    float temp111 = _pre_phi_c1 * u.x;
    float temp112 = _pre_phi_c1 * u.y;
    float temp113 = _pre_phi_c1 * u.z;
    float temp114 = _pre_phi_c1 * u.w;
    vec4 temp115 = vec4(temp99, temp100, temp101, temp102);
    vec4 temp116 = vec4(temp103, temp104, temp105, temp106);
    vec4 temp117 = vec4(temp107, temp108, temp109, temp110);
    vec4 temp118 = vec4(temp111, temp112, temp113, temp114);
    vec4 temp119 = vec4(_pre_phi_c4, const120, const120, const120);
    vec4 temp121 = const122;
    temp121.yzw = vec3(_pre_phi_c4, const120, const120);
    vec4 temp123 = const124;
    temp123.zw = vec2(_pre_phi_c4, const120);
    vec4 temp125 = vec4(const120, const120, const120, v.x);
    vec4 column_c61 = temp115 + temp119;
    vec4 column_c62 = temp116 + temp121;
    vec4 column_c63 = temp117 + temp123;
    vec4 column_c64 = temp118 + temp125;
    vec4 column_c65 = column_c61 + u;
    vec4 column_c66 = column_c62 + temp98;
    vec4 column_c67 = column_c63 + temp97;
    vec4 column_c68 = column_c64 + temp96;
    vec4 element_c69 = un34[0];
    bvec4 temp135 = equal(column_c65, element_c69);
    bool temp136 = all(temp135);
    vec4 element_c70 = un34[1];
    bvec4 temp138 = equal(column_c66, element_c70);
    bool temp139 = all(temp138);
    bool temp140 = temp136 && temp139;
    vec4 element_c71 = un34[2];
    bvec4 temp142 = equal(column_c67, element_c71);
    bool temp143 = all(temp142);
    bool temp144 = temp140 && temp143;
    vec4 element_c72 = un34[3];
    bvec4 temp146 = equal(column_c68, element_c72);
    bool temp147 = all(temp146);
    bool temp148 = temp144 && temp147;
    if (temp148) {
        float product_c73 = column_c65.x * u.x;
        float product_c74 = column_c66.x * u.y;
        float dotProduct_c75 = product_c73 + product_c74;
        float product_c76 = column_c67.x * u.z;
        float dotProduct_c77 = dotProduct_c75 + product_c76;
        float product_c78 = column_c68.x * u.w;
        float dotProduct_c79 = dotProduct_c77 + product_c78;
        float product_c80 = column_c65.y * u.x;
        float product_c81 = column_c66.y * u.y;
        float dotProduct_c82 = product_c80 + product_c81;
        float product_c83 = column_c67.y * u.z;
        float dotProduct_c84 = dotProduct_c82 + product_c83;
        float product_c85 = column_c68.y * u.w;
        float dotProduct_c86 = dotProduct_c84 + product_c85;
        float product_c87 = column_c65.z * u.x;
        float product_c88 = column_c66.z * u.y;
        float dotProduct_c89 = product_c87 + product_c88;
        float product_c90 = column_c67.z * u.z;
        float dotProduct_c91 = dotProduct_c89 + product_c90;
        float product_c92 = column_c68.z * u.w;
        float dotProduct_c93 = dotProduct_c91 + product_c92;
        float product_c94 = column_c65.w * u.x;
        float product_c95 = column_c66.w * u.y;
        float dotProduct_c96 = product_c94 + product_c95;
        float product_c97 = column_c67.w * u.z;
        float dotProduct_c98 = dotProduct_c96 + product_c97;
        float product_c99 = column_c68.w * u.w;
        float dotProduct_c100 = dotProduct_c98 + product_c99;
        vec4 temp177 = vec4(dotProduct_c79, dotProduct_c86, dotProduct_c93, dotProduct_c100);
        _pn_c6 = temp177;
    }
    else {
        vec4 rightColumn_c101 = um43[0];
        float product_c102 = element_c69.x * rightColumn_c101.x;
        float product_c103 = element_c70.x * rightColumn_c101.y;
        float dotProduct_c104 = product_c102 + product_c103;
        float product_c105 = element_c71.x * rightColumn_c101.z;
        float dotProduct_c106 = dotProduct_c104 + product_c105;
        float product_c107 = element_c72.x * rightColumn_c101.w;
        float dotProduct_c108 = dotProduct_c106 + product_c107;
        float product_c109 = element_c69.y * rightColumn_c101.x;
        float product_c110 = element_c70.y * rightColumn_c101.y;
        float dotProduct_c111 = product_c109 + product_c110;
        float product_c112 = element_c71.y * rightColumn_c101.z;
        float dotProduct_c113 = dotProduct_c111 + product_c112;
        float product_c114 = element_c72.y * rightColumn_c101.w;
        float dotProduct_c115 = dotProduct_c113 + product_c114;
        float product_c116 = element_c69.z * rightColumn_c101.x;
        float product_c117 = element_c70.z * rightColumn_c101.y;
        float dotProduct_c118 = product_c116 + product_c117;
        float product_c119 = element_c71.z * rightColumn_c101.z;
        float dotProduct_c120 = dotProduct_c118 + product_c119;
        float product_c121 = element_c72.z * rightColumn_c101.w;
        float dotProduct_c122 = dotProduct_c120 + product_c121;
        float product_c123 = element_c69.w * rightColumn_c101.x;
        float product_c124 = element_c70.w * rightColumn_c101.y;
        float dotProduct_c125 = product_c123 + product_c124;
        float product_c126 = element_c71.w * rightColumn_c101.z;
        float dotProduct_c127 = dotProduct_c125 + product_c126;
        float product_c128 = element_c72.w * rightColumn_c101.w;
        float dotProduct_c129 = dotProduct_c127 + product_c128;
        vec4 rightColumn_c130 = um43[1];
        float product_c131 = element_c69.x * rightColumn_c130.x;
        float product_c132 = element_c70.x * rightColumn_c130.y;
        float dotProduct_c133 = product_c131 + product_c132;
        float product_c134 = element_c71.x * rightColumn_c130.z;
        float dotProduct_c135 = dotProduct_c133 + product_c134;
        float product_c136 = element_c72.x * rightColumn_c130.w;
        float dotProduct_c137 = dotProduct_c135 + product_c136;
        float product_c138 = element_c69.y * rightColumn_c130.x;
        float product_c139 = element_c70.y * rightColumn_c130.y;
        float dotProduct_c140 = product_c138 + product_c139;
        float product_c141 = element_c71.y * rightColumn_c130.z;
        float dotProduct_c142 = dotProduct_c140 + product_c141;
        float product_c143 = element_c72.y * rightColumn_c130.w;
        float dotProduct_c144 = dotProduct_c142 + product_c143;
        float product_c145 = element_c69.z * rightColumn_c130.x;
        float product_c146 = element_c70.z * rightColumn_c130.y;
        float dotProduct_c147 = product_c145 + product_c146;
        float product_c148 = element_c71.z * rightColumn_c130.z;
        float dotProduct_c149 = dotProduct_c147 + product_c148;
        float product_c150 = element_c72.z * rightColumn_c130.w;
        float dotProduct_c151 = dotProduct_c149 + product_c150;
        float product_c152 = element_c69.w * rightColumn_c130.x;
        float product_c153 = element_c70.w * rightColumn_c130.y;
        float dotProduct_c154 = product_c152 + product_c153;
        float product_c155 = element_c71.w * rightColumn_c130.z;
        float dotProduct_c156 = dotProduct_c154 + product_c155;
        float product_c157 = element_c72.w * rightColumn_c130.w;
        float dotProduct_c158 = dotProduct_c156 + product_c157;
        vec4 rightColumn_c159 = um43[2];
        float product_c160 = element_c69.x * rightColumn_c159.x;
        float product_c161 = element_c70.x * rightColumn_c159.y;
        float dotProduct_c162 = product_c160 + product_c161;
        float product_c163 = element_c71.x * rightColumn_c159.z;
        float dotProduct_c164 = dotProduct_c162 + product_c163;
        float product_c165 = element_c72.x * rightColumn_c159.w;
        float dotProduct_c166 = dotProduct_c164 + product_c165;
        float product_c167 = element_c69.y * rightColumn_c159.x;
        float product_c168 = element_c70.y * rightColumn_c159.y;
        float dotProduct_c169 = product_c167 + product_c168;
        float product_c170 = element_c71.y * rightColumn_c159.z;
        float dotProduct_c171 = dotProduct_c169 + product_c170;
        float product_c172 = element_c72.y * rightColumn_c159.w;
        float dotProduct_c173 = dotProduct_c171 + product_c172;
        float product_c174 = element_c69.z * rightColumn_c159.x;
        float product_c175 = element_c70.z * rightColumn_c159.y;
        float dotProduct_c176 = product_c174 + product_c175;
        float product_c177 = element_c71.z * rightColumn_c159.z;
        float dotProduct_c178 = dotProduct_c176 + product_c177;
        float product_c179 = element_c72.z * rightColumn_c159.w;
        float dotProduct_c180 = dotProduct_c178 + product_c179;
        float product_c181 = element_c69.w * rightColumn_c159.x;
        float product_c182 = element_c70.w * rightColumn_c159.y;
        float dotProduct_c183 = product_c181 + product_c182;
        float product_c184 = element_c71.w * rightColumn_c159.z;
        float dotProduct_c185 = dotProduct_c183 + product_c184;
        float product_c186 = element_c72.w * rightColumn_c159.w;
        float dotProduct_c187 = dotProduct_c185 + product_c186;
        vec4 rightColumn_c188 = um43[3];
        float product_c189 = element_c69.x * rightColumn_c188.x;
        float product_c190 = element_c70.x * rightColumn_c188.y;
        float dotProduct_c191 = product_c189 + product_c190;
        float product_c192 = element_c71.x * rightColumn_c188.z;
        float dotProduct_c193 = dotProduct_c191 + product_c192;
        float product_c194 = element_c72.x * rightColumn_c188.w;
        float dotProduct_c195 = dotProduct_c193 + product_c194;
        float product_c196 = element_c69.y * rightColumn_c188.x;
        float product_c197 = element_c70.y * rightColumn_c188.y;
        float dotProduct_c198 = product_c196 + product_c197;
        float product_c199 = element_c71.y * rightColumn_c188.z;
        float dotProduct_c200 = dotProduct_c198 + product_c199;
        float product_c201 = element_c72.y * rightColumn_c188.w;
        float dotProduct_c202 = dotProduct_c200 + product_c201;
        float product_c203 = element_c69.z * rightColumn_c188.x;
        float product_c204 = element_c70.z * rightColumn_c188.y;
        float dotProduct_c205 = product_c203 + product_c204;
        float product_c206 = element_c71.z * rightColumn_c188.z;
        float dotProduct_c207 = dotProduct_c205 + product_c206;
        float product_c208 = element_c72.z * rightColumn_c188.w;
        float dotProduct_c209 = dotProduct_c207 + product_c208;
        float product_c210 = element_c69.w * rightColumn_c188.x;
        float product_c211 = element_c70.w * rightColumn_c188.y;
        float dotProduct_c212 = product_c210 + product_c211;
        float product_c213 = element_c71.w * rightColumn_c188.z;
        float dotProduct_c214 = dotProduct_c212 + product_c213;
        float product_c215 = element_c72.w * rightColumn_c188.w;
        float dotProduct_c216 = dotProduct_c214 + product_c215;
        float product_c217 = _pre_phi_c4 * dotProduct_c108;
        float product_c218 = _pre_phi_c3 * dotProduct_c137;
        float dotProduct_c219 = product_c217 + product_c218;
        float product_c220 = _pre_phi_c2 * dotProduct_c166;
        float dotProduct_c221 = dotProduct_c219 + product_c220;
        float product_c222 = _pre_phi_c1 * dotProduct_c195;
        float dotProduct_c223 = dotProduct_c221 + product_c222;
        float product_c224 = _pre_phi_c4 * dotProduct_c115;
        float product_c225 = _pre_phi_c3 * dotProduct_c144;
        float dotProduct_c226 = product_c224 + product_c225;
        float product_c227 = _pre_phi_c2 * dotProduct_c173;
        float dotProduct_c228 = dotProduct_c226 + product_c227;
        float product_c229 = _pre_phi_c1 * dotProduct_c202;
        float dotProduct_c230 = dotProduct_c228 + product_c229;
        float product_c231 = _pre_phi_c4 * dotProduct_c122;
        float product_c232 = _pre_phi_c3 * dotProduct_c151;
        float dotProduct_c233 = product_c231 + product_c232;
        float product_c234 = _pre_phi_c2 * dotProduct_c180;
        float dotProduct_c235 = dotProduct_c233 + product_c234;
        float product_c236 = _pre_phi_c1 * dotProduct_c209;
        float dotProduct_c237 = dotProduct_c235 + product_c236;
        float product_c238 = _pre_phi_c4 * dotProduct_c129;
        float product_c239 = _pre_phi_c3 * dotProduct_c158;
        float dotProduct_c240 = product_c238 + product_c239;
        float product_c241 = _pre_phi_c2 * dotProduct_c187;
        float dotProduct_c242 = dotProduct_c240 + product_c241;
        float product_c243 = _pre_phi_c1 * dotProduct_c216;
        float dotProduct_c244 = dotProduct_c242 + product_c243;
        vec4 temp322 = vec4(dotProduct_c223, dotProduct_c230, dotProduct_c237, dotProduct_c244);
        _pn_c6 = temp322;
    }
    
    vec4 FragColor_shadow_c245 = FragColor_shadow_c5 + _pn_c6;
    gl_FragColor = FragColor_shadow_c245;
    
}


#version 130
// LunarGOO output
uniform mat3 colorTransform;
uniform mat4 un34;
uniform mat4 m;
uniform mat4 n;
uniform mat4 um43;
in vec3 Color;
in vec4 v;
in vec4 u;
const float const31 = 1.0;
const float const109 = 0.0;
const vec4 const111 = vec4(0.0, 0.0, 0.0, 0.0);
const vec4 const113 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
    vec4 FragColor_shadow_c1;
    float _pre_phi_c2;
    float _pre_phi_c3;
    float _pre_phi_c4;
    float _pre_phi_c5;
    vec4 _pn_c6;
    float dotres_c7 = dot(Color, colorTransform[0]);
    float dotres_c8 = dot(Color, colorTransform[1]);
    float dotres_c9 = dot(Color, colorTransform[2]);
    vec4 temp30 = vec4(dotres_c7, dotres_c8, dotres_c9, const31);
    vec4 FragColor_shadow_c10 = temp30 + un34[1];
    bvec4 temp_c11 = notEqual(m[0], n[0]);
    bool temp_c12 = any(temp_c11);
    bvec4 temp_c13 = notEqual(m[1], n[1]);
    bool temp_c14 = any(temp_c13);
    bool temp_c15 = temp_c12 || temp_c14;
    bvec4 temp_c16 = notEqual(m[2], n[2]);
    bool temp_c17 = any(temp_c16);
    bool temp_c18 = temp_c15 || temp_c17;
    bvec4 temp_c19 = notEqual(m[3], n[3]);
    bool temp_c20 = any(temp_c19);
    bool temp_c21 = temp_c18 || temp_c20;
    if (temp_c21) {
        vec4 FragColor_shadow_c22 = FragColor_shadow_c10 + v;
        FragColor_shadow_c1 = FragColor_shadow_c22;
        _pre_phi_c2 = v.x;
        _pre_phi_c3 = v.y;
        _pre_phi_c4 = v.z;
        _pre_phi_c5 = v.w;
    }
    else {
        float product_c23 = m[0].x * v.x;
        float product_c24 = m[1].x * v.y;
        float dotProduct_c25 = product_c23 + product_c24;
        float product_c26 = m[2].x * v.z;
        float dotProduct_c27 = dotProduct_c25 + product_c26;
        float product_c28 = m[3].x * v.w;
        float dotProduct_c29 = dotProduct_c27 + product_c28;
        float product_c30 = m[0].y * v.x;
        float product_c31 = m[1].y * v.y;
        float dotProduct_c32 = product_c30 + product_c31;
        float product_c33 = m[2].y * v.z;
        float dotProduct_c34 = dotProduct_c32 + product_c33;
        float product_c35 = m[3].y * v.w;
        float dotProduct_c36 = dotProduct_c34 + product_c35;
        float product_c37 = m[0].z * v.x;
        float product_c38 = m[1].z * v.y;
        float dotProduct_c39 = product_c37 + product_c38;
        float product_c40 = m[2].z * v.z;
        float dotProduct_c41 = dotProduct_c39 + product_c40;
        float product_c42 = m[3].z * v.w;
        float dotProduct_c43 = dotProduct_c41 + product_c42;
        float product_c44 = m[0].w * v.x;
        float product_c45 = m[1].w * v.y;
        float dotProduct_c46 = product_c44 + product_c45;
        float product_c47 = m[2].w * v.z;
        float dotProduct_c48 = dotProduct_c46 + product_c47;
        float product_c49 = m[3].w * v.w;
        float dotProduct_c50 = dotProduct_c48 + product_c49;
        vec4 temp73 = vec4(dotProduct_c29, dotProduct_c36, dotProduct_c43, dotProduct_c50);
        vec4 FragColor_shadow_c51 = FragColor_shadow_c10 + temp73;
        vec4 column_c52 = m[0] - n[0];
        vec4 column_c53 = m[1] - n[1];
        vec4 column_c54 = m[2] - n[2];
        vec4 column_c55 = m[3] - n[3];
        float dotres_c56 = dot(v, column_c52);
        float dotres_c57 = dot(v, column_c53);
        float dotres_c58 = dot(v, column_c54);
        float dotres_c59 = dot(v, column_c55);
        vec4 temp83 = vec4(dotres_c56, dotres_c57, dotres_c58, dotres_c59);
        vec4 FragColor_shadow_c60 = FragColor_shadow_c51 + temp83;
        FragColor_shadow_c1 = FragColor_shadow_c60;
        _pre_phi_c2 = v.x;
        _pre_phi_c3 = v.y;
        _pre_phi_c4 = v.z;
        _pre_phi_c5 = v.w;
    }
    
    vec4 temp85 = u.xxyz;
    vec4 temp86 = u.wxxy;
    vec4 temp87 = u.zwxx;
    float temp_c61 = _pre_phi_c2 * u.x;
    float temp_c62 = _pre_phi_c2 * u.y;
    float temp_c63 = _pre_phi_c2 * u.z;
    float temp_c64 = _pre_phi_c2 * u.w;
    float temp_c65 = _pre_phi_c3 * u.x;
    float temp_c66 = _pre_phi_c3 * u.y;
    float temp_c67 = _pre_phi_c3 * u.z;
    float temp_c68 = _pre_phi_c3 * u.w;
    float temp_c69 = _pre_phi_c4 * u.x;
    float temp_c70 = _pre_phi_c4 * u.y;
    float temp_c71 = _pre_phi_c4 * u.z;
    float temp_c72 = _pre_phi_c4 * u.w;
    float temp_c73 = _pre_phi_c5 * u.x;
    float temp_c74 = _pre_phi_c5 * u.y;
    float temp_c75 = _pre_phi_c5 * u.z;
    float temp_c76 = _pre_phi_c5 * u.w;
    vec4 temp104 = vec4(temp_c61, temp_c62, temp_c63, temp_c64);
    vec4 temp105 = vec4(temp_c65, temp_c66, temp_c67, temp_c68);
    vec4 temp106 = vec4(temp_c69, temp_c70, temp_c71, temp_c72);
    vec4 temp107 = vec4(temp_c73, temp_c74, temp_c75, temp_c76);
    vec4 temp108 = vec4(_pre_phi_c2, const109, const109, const109);
    vec4 temp110 = const111;
    temp110.yzw = vec3(_pre_phi_c2, const109, const109);
    vec4 temp112 = const113;
    temp112.zw = vec2(_pre_phi_c2, const109);
    vec4 temp114 = vec4(const109, const109, const109, v.x);
    vec4 column_c77 = temp104 + temp108;
    vec4 column_c78 = temp105 + temp110;
    vec4 column_c79 = temp106 + temp112;
    vec4 column_c80 = temp107 + temp114;
    vec4 column_c81 = column_c77 + u;
    vec4 column_c82 = column_c78 + temp85;
    vec4 column_c83 = column_c79 + temp86;
    vec4 column_c84 = column_c80 + temp87;
    bvec4 temp_c85 = equal(column_c81, un34[0]);
    bool temp_c86 = all(temp_c85);
    bvec4 temp_c87 = equal(column_c82, un34[1]);
    bool temp_c88 = all(temp_c87);
    bool temp_c89 = temp_c86 && temp_c88;
    bvec4 temp_c90 = equal(column_c83, un34[2]);
    bool temp_c91 = all(temp_c90);
    bool temp_c92 = temp_c89 && temp_c91;
    bvec4 temp_c93 = equal(column_c84, un34[3]);
    bool temp_c94 = all(temp_c93);
    bool temp_c95 = temp_c92 && temp_c94;
    if (temp_c95) {
        float product_c96 = column_c81.x * u.x;
        float product_c97 = column_c82.x * u.y;
        float dotProduct_c98 = product_c96 + product_c97;
        float product_c99 = column_c83.x * u.z;
        float dotProduct_c100 = dotProduct_c98 + product_c99;
        float product_c101 = column_c84.x * u.w;
        float dotProduct_c102 = dotProduct_c100 + product_c101;
        float product_c103 = column_c81.y * u.x;
        float product_c104 = column_c82.y * u.y;
        float dotProduct_c105 = product_c103 + product_c104;
        float product_c106 = column_c83.y * u.z;
        float dotProduct_c107 = dotProduct_c105 + product_c106;
        float product_c108 = column_c84.y * u.w;
        float dotProduct_c109 = dotProduct_c107 + product_c108;
        float product_c110 = column_c81.z * u.x;
        float product_c111 = column_c82.z * u.y;
        float dotProduct_c112 = product_c110 + product_c111;
        float product_c113 = column_c83.z * u.z;
        float dotProduct_c114 = dotProduct_c112 + product_c113;
        float product_c115 = column_c84.z * u.w;
        float dotProduct_c116 = dotProduct_c114 + product_c115;
        float product_c117 = column_c81.w * u.x;
        float product_c118 = column_c82.w * u.y;
        float dotProduct_c119 = product_c117 + product_c118;
        float product_c120 = column_c83.w * u.z;
        float dotProduct_c121 = dotProduct_c119 + product_c120;
        float product_c122 = column_c84.w * u.w;
        float dotProduct_c123 = dotProduct_c121 + product_c122;
        vec4 temp162 = vec4(dotProduct_c102, dotProduct_c109, dotProduct_c116, dotProduct_c123);
        _pn_c6 = temp162;
    }
    else {
        float product_c124 = um43[0].x * un34[0].x;
        float product_c125 = um43[0].y * un34[1].x;
        float dotProduct_c126 = product_c124 + product_c125;
        float product_c127 = um43[0].z * un34[2].x;
        float dotProduct_c128 = dotProduct_c126 + product_c127;
        float product_c129 = um43[0].w * un34[3].x;
        float dotProduct_c130 = dotProduct_c128 + product_c129;
        float product_c131 = um43[0].x * un34[0].y;
        float product_c132 = um43[0].y * un34[1].y;
        float dotProduct_c133 = product_c131 + product_c132;
        float product_c134 = um43[0].z * un34[2].y;
        float dotProduct_c135 = dotProduct_c133 + product_c134;
        float product_c136 = um43[0].w * un34[3].y;
        float dotProduct_c137 = dotProduct_c135 + product_c136;
        float product_c138 = um43[0].x * un34[0].z;
        float product_c139 = um43[0].y * un34[1].z;
        float dotProduct_c140 = product_c138 + product_c139;
        float product_c141 = um43[0].z * un34[2].z;
        float dotProduct_c142 = dotProduct_c140 + product_c141;
        float product_c143 = um43[0].w * un34[3].z;
        float dotProduct_c144 = dotProduct_c142 + product_c143;
        float product_c145 = um43[0].x * un34[0].w;
        float product_c146 = um43[0].y * un34[1].w;
        float dotProduct_c147 = product_c145 + product_c146;
        float product_c148 = um43[0].z * un34[2].w;
        float dotProduct_c149 = dotProduct_c147 + product_c148;
        float product_c150 = um43[0].w * un34[3].w;
        float dotProduct_c151 = dotProduct_c149 + product_c150;
        float product_c152 = um43[1].x * un34[0].x;
        float product_c153 = um43[1].y * un34[1].x;
        float dotProduct_c154 = product_c152 + product_c153;
        float product_c155 = um43[1].z * un34[2].x;
        float dotProduct_c156 = dotProduct_c154 + product_c155;
        float product_c157 = um43[1].w * un34[3].x;
        float dotProduct_c158 = dotProduct_c156 + product_c157;
        float product_c159 = um43[1].x * un34[0].y;
        float product_c160 = um43[1].y * un34[1].y;
        float dotProduct_c161 = product_c159 + product_c160;
        float product_c162 = um43[1].z * un34[2].y;
        float dotProduct_c163 = dotProduct_c161 + product_c162;
        float product_c164 = um43[1].w * un34[3].y;
        float dotProduct_c165 = dotProduct_c163 + product_c164;
        float product_c166 = um43[1].x * un34[0].z;
        float product_c167 = um43[1].y * un34[1].z;
        float dotProduct_c168 = product_c166 + product_c167;
        float product_c169 = um43[1].z * un34[2].z;
        float dotProduct_c170 = dotProduct_c168 + product_c169;
        float product_c171 = um43[1].w * un34[3].z;
        float dotProduct_c172 = dotProduct_c170 + product_c171;
        float product_c173 = um43[1].x * un34[0].w;
        float product_c174 = um43[1].y * un34[1].w;
        float dotProduct_c175 = product_c173 + product_c174;
        float product_c176 = um43[1].z * un34[2].w;
        float dotProduct_c177 = dotProduct_c175 + product_c176;
        float product_c178 = um43[1].w * un34[3].w;
        float dotProduct_c179 = dotProduct_c177 + product_c178;
        float product_c180 = um43[2].x * un34[0].x;
        float product_c181 = um43[2].y * un34[1].x;
        float dotProduct_c182 = product_c180 + product_c181;
        float product_c183 = um43[2].z * un34[2].x;
        float dotProduct_c184 = dotProduct_c182 + product_c183;
        float product_c185 = um43[2].w * un34[3].x;
        float dotProduct_c186 = dotProduct_c184 + product_c185;
        float product_c187 = um43[2].x * un34[0].y;
        float product_c188 = um43[2].y * un34[1].y;
        float dotProduct_c189 = product_c187 + product_c188;
        float product_c190 = um43[2].z * un34[2].y;
        float dotProduct_c191 = dotProduct_c189 + product_c190;
        float product_c192 = um43[2].w * un34[3].y;
        float dotProduct_c193 = dotProduct_c191 + product_c192;
        float product_c194 = um43[2].x * un34[0].z;
        float product_c195 = um43[2].y * un34[1].z;
        float dotProduct_c196 = product_c194 + product_c195;
        float product_c197 = um43[2].z * un34[2].z;
        float dotProduct_c198 = dotProduct_c196 + product_c197;
        float product_c199 = um43[2].w * un34[3].z;
        float dotProduct_c200 = dotProduct_c198 + product_c199;
        float product_c201 = um43[2].x * un34[0].w;
        float product_c202 = um43[2].y * un34[1].w;
        float dotProduct_c203 = product_c201 + product_c202;
        float product_c204 = um43[2].z * un34[2].w;
        float dotProduct_c205 = dotProduct_c203 + product_c204;
        float product_c206 = um43[2].w * un34[3].w;
        float dotProduct_c207 = dotProduct_c205 + product_c206;
        float product_c208 = um43[3].x * un34[0].x;
        float product_c209 = um43[3].y * un34[1].x;
        float dotProduct_c210 = product_c208 + product_c209;
        float product_c211 = um43[3].z * un34[2].x;
        float dotProduct_c212 = dotProduct_c210 + product_c211;
        float product_c213 = um43[3].w * un34[3].x;
        float dotProduct_c214 = dotProduct_c212 + product_c213;
        float product_c215 = um43[3].x * un34[0].y;
        float product_c216 = um43[3].y * un34[1].y;
        float dotProduct_c217 = product_c215 + product_c216;
        float product_c218 = um43[3].z * un34[2].y;
        float dotProduct_c219 = dotProduct_c217 + product_c218;
        float product_c220 = um43[3].w * un34[3].y;
        float dotProduct_c221 = dotProduct_c219 + product_c220;
        float product_c222 = um43[3].x * un34[0].z;
        float product_c223 = um43[3].y * un34[1].z;
        float dotProduct_c224 = product_c222 + product_c223;
        float product_c225 = um43[3].z * un34[2].z;
        float dotProduct_c226 = dotProduct_c224 + product_c225;
        float product_c227 = um43[3].w * un34[3].z;
        float dotProduct_c228 = dotProduct_c226 + product_c227;
        float product_c229 = um43[3].x * un34[0].w;
        float product_c230 = um43[3].y * un34[1].w;
        float dotProduct_c231 = product_c229 + product_c230;
        float product_c232 = um43[3].z * un34[2].w;
        float dotProduct_c233 = dotProduct_c231 + product_c232;
        float product_c234 = um43[3].w * un34[3].w;
        float dotProduct_c235 = dotProduct_c233 + product_c234;
        float product_c236 = _pre_phi_c2 * dotProduct_c130;
        float product_c237 = _pre_phi_c3 * dotProduct_c158;
        float dotProduct_c238 = product_c236 + product_c237;
        float product_c239 = _pre_phi_c4 * dotProduct_c186;
        float dotProduct_c240 = dotProduct_c238 + product_c239;
        float product_c241 = _pre_phi_c5 * dotProduct_c214;
        float dotProduct_c242 = dotProduct_c240 + product_c241;
        float product_c243 = _pre_phi_c2 * dotProduct_c137;
        float product_c244 = _pre_phi_c3 * dotProduct_c165;
        float dotProduct_c245 = product_c243 + product_c244;
        float product_c246 = _pre_phi_c4 * dotProduct_c193;
        float dotProduct_c247 = dotProduct_c245 + product_c246;
        float product_c248 = _pre_phi_c5 * dotProduct_c221;
        float dotProduct_c249 = dotProduct_c247 + product_c248;
        float product_c250 = _pre_phi_c2 * dotProduct_c144;
        float product_c251 = _pre_phi_c3 * dotProduct_c172;
        float dotProduct_c252 = product_c250 + product_c251;
        float product_c253 = _pre_phi_c4 * dotProduct_c200;
        float dotProduct_c254 = dotProduct_c252 + product_c253;
        float product_c255 = _pre_phi_c5 * dotProduct_c228;
        float dotProduct_c256 = dotProduct_c254 + product_c255;
        float product_c257 = _pre_phi_c2 * dotProduct_c151;
        float product_c258 = _pre_phi_c3 * dotProduct_c179;
        float dotProduct_c259 = product_c257 + product_c258;
        float product_c260 = _pre_phi_c4 * dotProduct_c207;
        float dotProduct_c261 = dotProduct_c259 + product_c260;
        float product_c262 = _pre_phi_c5 * dotProduct_c235;
        float dotProduct_c263 = dotProduct_c261 + product_c262;
        vec4 temp303 = vec4(dotProduct_c242, dotProduct_c249, dotProduct_c256, dotProduct_c263);
        _pn_c6 = temp303;
    }
    
    vec4 FragColor_shadow_c264 = FragColor_shadow_c1 + _pn_c6;
    gl_FragColor = FragColor_shadow_c264;
    
}


