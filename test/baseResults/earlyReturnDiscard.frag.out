
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@otherColor = external addrspace(2) constant <4 x float>
@c = global float 0.000000e+00
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1
@gl_FragColor = global <4 x float> zeroinitializer
@threshhold3 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %color2 = alloca <4 x float>
  %color = alloca <4 x float>
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  %color22 = load <4 x float> addrspace(2)* @otherColor, !gla.uniform !5
  store <4 x float> %color22, <4 x float>* %color2
  %0 = load float* @c
  %1 = load float addrspace(2)* @d, !gla.uniform !7
  %2 = fcmp ogt float %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !8
  %4 = load <4 x float>* %color
  %color3 = fadd <4 x float> %4, %3
  store <4 x float> %color3, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %entry
  %5 = load <4 x float> addrspace(2)* @smallColor, !gla.uniform !9
  %6 = load <4 x float>* %color
  %color4 = fadd <4 x float> %6, %5
  store <4 x float> %color4, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %7 = load <4 x float>* %color
  %8 = extractelement <4 x float> %7, i32 2
  %9 = load float addrspace(2)* @minimum, !gla.uniform !10
  %10 = fcmp olt float %8, %9
  br i1 %10, label %then5, label %ifmerge6

then5:                                            ; preds = %ifmerge
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge6

ifmerge6:                                         ; preds = %ifmerge, %post-return
  %11 = load <4 x float>* %color
  %12 = extractelement <4 x float> %11, i32 2
  %13 = fadd float %12, 1.000000e+00
  %14 = load <4 x float>* %color
  %color7 = insertelement <4 x float> %14, float %13, i32 2
  store <4 x float> %color7, <4 x float>* %color
  %15 = load <4 x float>* %color
  %16 = extractelement <4 x float> %15, i32 2
  %17 = load float addrspace(2)* @threshhold, !gla.uniform !11
  %18 = fcmp ogt float %16, %17
  br i1 %18, label %then8, label %ifmerge9

then8:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge6, %post-discard
  %19 = load <4 x float>* %color
  %color10 = fadd <4 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color10, <4 x float>* %color
  %20 = load <4 x float>* %color
  %21 = extractelement <4 x float> %20, i32 3
  %22 = load float addrspace(2)* @threshhold2, !gla.uniform !12
  %23 = fcmp ogt float %21, %22
  br i1 %23, label %then11, label %else25

then11:                                           ; preds = %ifmerge9
  %24 = load <4 x float>* %color
  %25 = extractelement <4 x float> %24, i32 2
  %26 = load float addrspace(2)* @threshhold2, !gla.uniform !12
  %27 = fcmp ogt float %25, %26
  br i1 %27, label %then12, label %else14

then12:                                           ; preds = %then11
  br label %stage-epilogue

post-return13:                                    ; No predecessors!
  br label %ifmerge24

else14:                                           ; preds = %then11
  %28 = load i1 addrspace(2)* @b, !gla.uniform !13
  br i1 %28, label %then15, label %else17

then15:                                           ; preds = %else14
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fadd float %30, 1.000000e+00
  %32 = load <4 x float>* %color
  %color16 = insertelement <4 x float> %32, float %31, i32 2
  store <4 x float> %color16, <4 x float>* %color
  br label %ifmerge23

else17:                                           ; preds = %else14
  %33 = load <4 x float>* %color
  %34 = extractelement <4 x float> %33, i32 0
  %35 = load float addrspace(2)* @minimum, !gla.uniform !10
  %36 = fcmp olt float %34, %35
  br i1 %36, label %then18, label %else20

then18:                                           ; preds = %else17
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard19:                                   ; No predecessors!
  br label %ifmerge22

else20:                                           ; preds = %else17
  %37 = load <4 x float>* %color
  %color21 = fadd <4 x float> %37, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color21, <4 x float>* %color
  br label %ifmerge22

ifmerge22:                                        ; preds = %else20, %post-discard19
  br label %ifmerge23

ifmerge23:                                        ; preds = %ifmerge22, %then15
  br label %ifmerge24

ifmerge24:                                        ; preds = %ifmerge23, %post-return13
  br label %ifmerge31

else25:                                           ; preds = %ifmerge9
  %38 = load i1 addrspace(2)* @b, !gla.uniform !13
  br i1 %38, label %then26, label %else28

then26:                                           ; preds = %else25
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard27:                                   ; No predecessors!
  br label %ifmerge30

else28:                                           ; preds = %else25
  br label %stage-epilogue

post-return29:                                    ; No predecessors!
  br label %ifmerge30

ifmerge30:                                        ; preds = %post-return29, %post-discard27
  br label %ifmerge31

ifmerge31:                                        ; preds = %ifmerge30, %ifmerge24
  %39 = load <4 x float>* %color
  %40 = load <4 x float>* %color2
  %gl_FragColor = fmul <4 x float> %39, %40
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge31, %else28, %then12, %then5
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then26, %then18, %then8
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

attributes #0 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5, !7, !8, !9, !10, !11, !12, !13, !14}
!gla.outputs = !{!15}
!gla.noStaticUse = !{!14}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"c", i32 1, float* @c_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"otherColor", i32 12, <4 x float>* @otherColor_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !6}
!8 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !6}
!9 = metadata !{metadata !"smallColor", i32 12, <4 x float>* @smallColor_typeProxy, metadata !6}
!10 = metadata !{metadata !"minimum", i32 12, float* @minimum_typeProxy, metadata !6}
!11 = metadata !{metadata !"threshhold", i32 12, float* @threshhold_typeProxy, metadata !6}
!12 = metadata !{metadata !"threshhold2", i32 12, float* @threshhold2_typeProxy, metadata !6}
!13 = metadata !{metadata !"b", i32 12, i1* @b_typeProxy, metadata !6}
!14 = metadata !{metadata !"threshhold3", i32 12, float* @threshhold3_typeProxy, metadata !6}
!15 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@otherColor = external addrspace(2) constant <4 x float>
@c = global float 0.000000e+00
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color1 = load <4 x float>* @BaseColor, align 16
  %color22 = load <4 x float> addrspace(2)* @otherColor, align 16, !gla.uniform !5
  %0 = load float* @c, align 4
  %1 = load float addrspace(2)* @d, align 4, !gla.uniform !7
  %2 = fcmp ogt float %0, %1
  %bigColor.val = load <4 x float> addrspace(2)* @bigColor, align 16
  %smallColor.val = load <4 x float> addrspace(2)* @smallColor, align 16
  %.pn = select i1 %2, <4 x float> %bigColor.val, <4 x float> %smallColor.val
  %color.0 = fadd <4 x float> %color1, %.pn
  %3 = extractelement <4 x float> %color.0, i32 2
  %4 = load float addrspace(2)* @minimum, align 4, !gla.uniform !10
  %5 = fcmp olt float %3, %4
  br i1 %5, label %then5, label %ifmerge6

then5:                                            ; preds = %entry
  br label %stage-epilogue

ifmerge6:                                         ; preds = %entry
  %6 = fadd float %3, 1.000000e+00
  %7 = load float addrspace(2)* @threshhold, align 4, !gla.uniform !11
  %8 = fcmp ogt float %6, %7
  br i1 %8, label %then8, label %ifmerge9

then8:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge9:                                         ; preds = %ifmerge6
  %9 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.0, i32 4, float undef, i32 undef, float undef, i32 undef, float %6, i32 0, float undef, i32 undef)
  %color10 = fadd <4 x float> %9, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %10 = extractelement <4 x float> %color10, i32 3
  %11 = load float addrspace(2)* @threshhold2, align 4, !gla.uniform !12
  %12 = fcmp ogt float %10, %11
  br i1 %12, label %then11, label %else25

then11:                                           ; preds = %ifmerge9
  %13 = extractelement <4 x float> %color10, i32 2
  %14 = fcmp ogt float %13, %11
  br i1 %14, label %then12, label %else14

then12:                                           ; preds = %then11
  br label %stage-epilogue

else14:                                           ; preds = %then11
  %15 = load i1 addrspace(2)* @b, align 1, !gla.uniform !13
  br i1 %15, label %then15, label %else17

then15:                                           ; preds = %else14
  %16 = fadd float %13, 1.000000e+00
  %17 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color10, i32 4, float undef, i32 undef, float undef, i32 undef, float %16, i32 0, float undef, i32 undef)
  br label %ifmerge23

else17:                                           ; preds = %else14
  %18 = extractelement <4 x float> %color10, i32 0
  %19 = fcmp olt float %18, %4
  br i1 %19, label %then18, label %else20

then18:                                           ; preds = %else17
  call void @llvm.gla.discard()
  br label %stage-exit

else20:                                           ; preds = %else17
  %color21 = fadd <4 x float> %color10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %ifmerge23

ifmerge23:                                        ; preds = %else20, %then15
  %color.1 = phi <4 x float> [ %17, %then15 ], [ %color21, %else20 ]
  %gl_FragColor = fmul <4 x float> %color22, %color.1
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

else25:                                           ; preds = %ifmerge9
  %20 = load i1 addrspace(2)* @b, align 1, !gla.uniform !13
  br i1 %20, label %then26, label %else28

then26:                                           ; preds = %else25
  call void @llvm.gla.discard()
  br label %stage-exit

else28:                                           ; preds = %else25
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge23, %else28, %then12, %then5
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then26, %then18, %then8
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #1

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5, !7, !8, !9, !10, !11, !12, !13, !14}
!gla.outputs = !{!15}
!gla.noStaticUse = !{!14}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"c", i32 1, float* @c_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"otherColor", i32 12, <4 x float>* @otherColor_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1024, null}
!7 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !6}
!8 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !6}
!9 = metadata !{metadata !"smallColor", i32 12, <4 x float>* @smallColor_typeProxy, metadata !6}
!10 = metadata !{metadata !"minimum", i32 12, float* @minimum_typeProxy, metadata !6}
!11 = metadata !{metadata !"threshhold", i32 12, float* @threshhold_typeProxy, metadata !6}
!12 = metadata !{metadata !"threshhold2", i32 12, float* @threshhold2_typeProxy, metadata !6}
!13 = metadata !{metadata !"b", i32 12, i1* @b_typeProxy, metadata !6}
!14 = metadata !{metadata !"threshhold3", i32 12, float* @threshhold3_typeProxy, metadata !6}
!15 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
#version 110
// LunarGOO output
uniform vec4 otherColor;
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform float minimum;
uniform float threshhold;
uniform float threshhold2;
uniform bool b;
uniform float threshhold3;
varying vec4 BaseColor;
varying float c;
const float L_7 = 1.0;
const vec4 L_b = vec4(1.0);

void main()
{
	vec4 color_uc1;
	bool L_2 = c > d;
	vec4 _pn_c2 = L_2 ? bigColor : smallColor;
	vec4 color_uc3 = BaseColor + _pn_c2;
	bool L_5 = color_uc3.z < minimum;
	if (L_5) {
		return;
	} else {
		float L_6 = color_uc3.z + L_7;
		bool L_8 = L_6 > threshhold;
		if (L_8) {
			discard;
		}
		
		vec4 L_9 = color_uc3;
		L_9.z = L_6;
		vec4 color_c4 = L_9 + L_b;
		bool L_c = color_c4.w > threshhold2;
		if (L_c) {
			bool L_d = color_c4.z > threshhold2;
			if (L_d) {
				return;
			} else {
				if (b) {
					float L_e = L_7 + color_c4.z;
					vec4 L_f = color_c4;
					L_f.z = L_e;
					color_uc1 = L_f;
				} else {
					bool L_10 = color_c4.x < minimum;
					if (L_10) {
						discard;
					} else {
						vec4 color_c5 = L_b + color_c4;
						color_uc1 = color_c5;
					}
					
				}
				
				vec4 Ll_FragColor_c6 = color_uc1 * otherColor;
				gl_FragColor = Ll_FragColor_c6;
				return;
			}
			
		} else {
			if (b) {
				discard;
			} else {
				
			}
			
		}
		
	}
	
}

#version 110
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform float minimum;
uniform float threshhold;
uniform float threshhold2;
uniform bool b;
uniform vec4 otherColor;
uniform float threshhold3;
varying float c;
varying vec4 BaseColor;
const float L_7 = 1.0;
const vec4 L_b = vec4(1.0);

void main()
{
	vec4 color_uc_c1;
	bool L_uc2 = c > d;
	vec4 ternary_uc3 = L_uc2 ? bigColor : smallColor;
	vec4 color_uc_c4 = BaseColor + ternary_uc3;
	bool L_uc5 = color_uc_c4.z < minimum;
	if (L_uc5) {
		return;
	} else {
		float L_uc6 = color_uc_c4.z + L_7;
		bool L_uc7 = L_uc6 > threshhold;
		if (L_uc7) {
			discard;
		}
		
		vec4 L_9 = color_uc_c4;
		L_9.z = L_uc6;
		vec4 color_c8 = L_9 + L_b;
		bool L_c9 = color_c8.w > threshhold2;
		if (L_c9) {
			bool L_d_c10 = color_c8.z > threshhold2;
			if (L_d_c10) {
				return;
			} else {
				if (b) {
					float L_e_c11 = L_7 + color_c8.z;
					vec4 L_f = color_c8;
					L_f.z = L_e_c11;
					color_uc_c1 = L_f;
				} else {
					bool L_uc12 = color_c8.x < minimum;
					if (L_uc12) {
						discard;
					} else {
						vec4 color_c13 = L_b + color_c8;
						color_uc_c1 = color_c13;
					}
					
				}
				
				vec4 Ll_FragColor_c14 = color_uc_c1 * otherColor;
				gl_FragColor = Ll_FragColor_c14;
				return;
			}
			
		} else {
			if (b) {
				discard;
			} else {
				
			}
			
		}
		
	}
	
}

