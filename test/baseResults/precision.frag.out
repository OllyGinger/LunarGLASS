
Top IR:
; ModuleID = 'Glslang'

@highfin = global <4 x float> zeroinitializer
@uniform_medium = external addrspace(2) constant i32
@uniform_high = external addrspace(2) constant i32
@uniform_low = external addrspace(2) constant i32
@lowfin = global float 0.000000e+00
@mediumfin = global float 0.000000e+00
@mediumfout = global <4 x float> zeroinitializer
@ub2 = external addrspace(2) constant <2 x i1>

define fastcc void @main() {
entry:
  %param = alloca <2 x i1>
  %constructed12 = alloca <4 x float>
  %constructed10 = alloca <2 x i32>
  %constructed9 = alloca <2 x i32>
  %constructed8 = alloca <2 x i32>
  %constructed7 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %local_highp = alloca <4 x float>
  %global_highp = alloca float
  %d = alloca float
  %arg2 = alloca float
  %arg1 = alloca float
  %sum = alloca i32
  %0 = load i32 addrspace(2)* @uniform_medium, !gla.uniform !7
  %1 = load i32 addrspace(2)* @uniform_high, !gla.uniform !9
  %sum1 = add i32 %0, %1, !gla.precision !17
  store i32 %sum1, i32* %sum
  %2 = load i32 addrspace(2)* @uniform_high, !gla.uniform !9
  %3 = load i32* %sum
  %sum2 = add i32 %3, %2, !gla.precision !17
  store i32 %sum2, i32* %sum
  %4 = load i32 addrspace(2)* @uniform_low, !gla.uniform !11
  %5 = load i32* %sum
  %sum3 = add i32 %5, %4, !gla.precision !18
  store i32 %sum3, i32* %sum
  store float 0x40099999A0000000, float* %arg1
  store float 0x412F3F4860000000, float* %arg2
  %6 = load float* @lowfin
  %7 = load float* @mediumfin
  %d4 = call float @llvm.gla.fDistance.f32.f32.f32(float %6, float %7), !gla.precision !19
  store float %d4, float* %d
  %8 = load <4 x float>* @highfin
  %global_highp5 = call float @llvm.gla.fLength.f32.v4f32(<4 x float> %8), !gla.precision !17
  store float %global_highp5, float* %global_highp
  %9 = load float* %global_highp
  %10 = load <4 x float>* %constructed
  %11 = insertelement <4 x float> undef, float %9, i32 0, !gla.precision !17
  %12 = insertelement <4 x float> %11, float %9, i32 1, !gla.precision !17
  %13 = insertelement <4 x float> %12, float %9, i32 2, !gla.precision !17
  %local_highp6 = insertelement <4 x float> %13, float %9, i32 3, !gla.precision !17
  store <4 x float> %local_highp6, <4 x float>* %local_highp
  %14 = load float* %d
  %15 = call float @llvm.gla.fSin.f32.f32(float %14), !gla.precision !18
  %16 = load <4 x float>* %constructed7
  %17 = insertelement <4 x float> undef, float %15, i32 0, !gla.precision !19
  %18 = insertelement <4 x float> %17, float %15, i32 1, !gla.precision !19
  %19 = insertelement <4 x float> %18, float %15, i32 2, !gla.precision !19
  %20 = insertelement <4 x float> %19, float %15, i32 3, !gla.precision !19
  %21 = load float* %arg2
  %22 = insertelement <4 x float> undef, float %21, i32 0, !gla.precision !19
  %23 = insertelement <4 x float> %22, float %21, i32 1, !gla.precision !19
  %24 = insertelement <4 x float> %23, float %21, i32 2, !gla.precision !19
  %25 = insertelement <4 x float> %24, float %21, i32 3, !gla.precision !19
  %26 = fadd <4 x float> %20, %25, !gla.precision !19
  %27 = load <4 x float>* %local_highp
  %mediumfout = fadd <4 x float> %26, %27, !gla.precision !17
  store <4 x float> %mediumfout, <4 x float>* @mediumfout
  %28 = load i32 addrspace(2)* @uniform_low, !gla.uniform !11
  %29 = load <2 x i32>* %constructed8
  %30 = insertelement <2 x i32> undef, i32 %28, i32 0, !gla.precision !18
  %31 = insertelement <2 x i32> %30, i32 %28, i32 1, !gla.precision !18
  %32 = load i32 addrspace(2)* @uniform_high, !gla.uniform !9
  %33 = load <2 x i32>* %constructed9
  %34 = insertelement <2 x i32> undef, i32 %32, i32 0, !gla.precision !18
  %35 = insertelement <2 x i32> %34, i32 %32, i32 1, !gla.precision !18
  %36 = mul <2 x i32> %31, %35, !gla.precision !18
  %37 = load i32 addrspace(2)* @uniform_high, !gla.uniform !9
  %38 = load <2 x i32>* %constructed10
  %39 = insertelement <2 x i32> undef, i32 %37, i32 0, !gla.precision !18
  %40 = insertelement <2 x i32> %39, i32 %37, i32 1, !gla.precision !18
  %41 = add <2 x i32> %36, %40, !gla.precision !18
  %42 = extractelement <2 x i32> %41, i32 0, !gla.precision !18
  %43 = add i32 4, %42, !gla.precision !18
  %44 = load i32* %sum
  %sum11 = add i32 %44, %43, !gla.precision !18
  store i32 %sum11, i32* %sum
  %45 = load i32* %sum
  %46 = sitofp i32 %45 to float, !gla.precision !19
  %47 = load <4 x float>* %constructed12
  %48 = insertelement <4 x float> undef, float %46, i32 0, !gla.precision !19
  %49 = insertelement <4 x float> %48, float %46, i32 1, !gla.precision !19
  %50 = insertelement <4 x float> %49, float %46, i32 2, !gla.precision !19
  %51 = insertelement <4 x float> %50, float %46, i32 3, !gla.precision !19
  %52 = load <4 x float>* @mediumfout
  %mediumfout13 = fadd <4 x float> %52, %51, !gla.precision !19
  store <4 x float> %mediumfout13, <4 x float>* @mediumfout
  %param14 = load <2 x i1> addrspace(2)* @ub2, !gla.uniform !13
  store <2 x i1> %param14, <2 x i1>* %param
  %53 = call i1 @"boolfun(vb2;"(<2 x i1>* %param)
  br i1 %53, label %then, label %ifmerge

then:                                             ; preds = %entry
  %54 = load <4 x float>* @mediumfout
  %mediumfout15 = fadd <4 x float> %54, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !gla.precision !19
  store <4 x float> %mediumfout15, <4 x float>* @mediumfout
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %then
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc <2 x float> @"foo(vf3;"(<3 x float>*) #0 {
entry:
  %1 = load <4 x float>* @highfin
  %2 = extractelement <4 x float> %1, i32 0, !gla.precision !17
  %3 = insertelement <2 x float> undef, float %2, i32 0, !gla.precision !17
  %4 = extractelement <4 x float> %1, i32 1, !gla.precision !17
  %5 = insertelement <2 x float> %3, float %4, i32 1, !gla.precision !17
  ret <2 x float> %5

post-return:                                      ; No predecessors!
  unreachable
}

; Function Attrs: alwaysinline
define internal fastcc i1 @"boolfun(vb2;"(<2 x i1>*) #0 {
entry:
  %1 = load <2 x i1>* %0
  %2 = icmp eq <2 x i1> %1, <i1 false, i1 true>
  %3 = call i1 @llvm.gla.all.v2i1(<2 x i1> %2)
  ret i1 %3

post-return:                                      ; No predecessors!
  unreachable
}

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v2i1(<2 x i1>) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDistance.f32.f32.f32(float, float) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fLength.f32.v4f32(<4 x float>) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fSin.f32.f32(float) #1

attributes #0 = { alwaysinline }
attributes #1 = { nounwind readnone }

!gla.inputs = !{!0, !2, !4}
!gla.entrypoint = !{!6}
!gla.uniforms = !{!7, !9, !11, !13}
!gla.outputs = !{!15}

!0 = metadata !{metadata !"highfin", i32 1, <4 x float>* @highfin_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 3, i32 1024, null, i32 1}
!2 = metadata !{metadata !"lowfin", i32 1, float* @lowfin_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 1, i32 1025, null, i32 1}
!4 = metadata !{metadata !"mediumfin", i32 1, float* @mediumfin_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1026, null, i32 1}
!6 = metadata !{metadata !"main", i32 15}
!7 = metadata !{metadata !"uniform_medium", i32 12, i32* @uniform_medium_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 2, i32 1024, null}
!9 = metadata !{metadata !"uniform_high", i32 12, i32* @uniform_high_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 3, i32 1024, null}
!11 = metadata !{metadata !"uniform_low", i32 12, i32* @uniform_low_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 1, i32 1024, null}
!13 = metadata !{metadata !"ub2", i32 12, <2 x i1>* @ub2_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1024, null}
!15 = metadata !{metadata !"mediumfout", i32 7, <4 x float>* @mediumfout_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 2, i32 1027, null, i32 0}
!17 = metadata !{i32 3}
!18 = metadata !{i32 1}
!19 = metadata !{i32 2}


Bottom IR:
; ModuleID = 'Glslang'

@highfin = global <4 x float> zeroinitializer
@uniform_medium = external addrspace(2) constant i32
@uniform_high = external addrspace(2) constant i32
@uniform_low = external addrspace(2) constant i32
@lowfin = global float 0.000000e+00
@mediumfin = global float 0.000000e+00
@mediumfout = global <4 x float> zeroinitializer
@ub2 = external addrspace(2) constant <2 x i1>

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(2)* @uniform_medium, align 4, !gla.uniform !7
  %1 = load i32 addrspace(2)* @uniform_high, align 4, !gla.uniform !9
  %2 = load i32 addrspace(2)* @uniform_low, align 4, !gla.uniform !11
  %3 = load float* @lowfin, align 4
  %4 = load float* @mediumfin, align 4
  %d4 = call float @llvm.gla.fDistance.f32.f32.f32(float %3, float %4), !gla.precision !17
  %5 = load <4 x float>* @highfin, align 16
  %global_highp5 = call float @llvm.gla.fLength.f32.v4f32(<4 x float> %5), !gla.precision !18
  %6 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %global_highp5, <4 x i32> zeroinitializer)
  %7 = call float @llvm.gla.fSin.f32.f32(float %d4), !gla.precision !19
  %8 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %7, <4 x i32> zeroinitializer)
  %9 = fadd <4 x float> %8, <float 0x412F3F4860000000, float 0x412F3F4860000000, float 0x412F3F4860000000, float 0x412F3F4860000000>, !gla.precision !17
  %mediumfout = fadd <4 x float> %6, %9, !gla.precision !18
  store <4 x float> %mediumfout, <4 x float>* @mediumfout, align 16
  %.lhs = mul i32 %1, %2
  %factor = shl i32 %1, 1
  %10 = add i32 %0, 4, !gla.precision !19
  %sum1 = add i32 %10, %2, !gla.precision !18
  %sum2 = add i32 %sum1, %1, !gla.precision !18
  %sum3 = add i32 %sum2, %.lhs, !gla.precision !19
  %sum11 = add i32 %sum3, %factor, !gla.precision !19
  %11 = sitofp i32 %sum11 to float, !gla.precision !17
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %11, <4 x i32> zeroinitializer)
  %mediumfout13 = fadd <4 x float> %mediumfout, %12, !gla.precision !17
  store <4 x float> %mediumfout13, <4 x float>* @mediumfout, align 16
  %param14 = load <2 x i1> addrspace(2)* @ub2, align 2, !gla.uniform !13
  %13 = icmp eq <2 x i1> %param14, <i1 false, i1 true>
  %14 = call i1 @llvm.gla.all.v2i1(<2 x i1> %13)
  br i1 %14, label %then, label %ifmerge

then:                                             ; preds = %entry
  %mediumfout15 = fadd <4 x float> %mediumfout13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !gla.precision !17
  store <4 x float> %mediumfout15, <4 x float>* @mediumfout, align 16
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %then
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare i1 @llvm.gla.all.v2i1(<2 x i1>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDistance.f32.f32.f32(float, float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fLength.f32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fSin.f32.f32(float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.inputs = !{!0, !2, !4}
!gla.entrypoint = !{!6}
!gla.uniforms = !{!7, !9, !11, !13}
!gla.outputs = !{!15}

!0 = metadata !{metadata !"highfin", i32 1, <4 x float>* @highfin_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 3, i32 1024, null, i32 1}
!2 = metadata !{metadata !"lowfin", i32 1, float* @lowfin_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 1, i32 1025, null, i32 1}
!4 = metadata !{metadata !"mediumfin", i32 1, float* @mediumfin_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1026, null, i32 1}
!6 = metadata !{metadata !"main", i32 15}
!7 = metadata !{metadata !"uniform_medium", i32 12, i32* @uniform_medium_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 2, i32 1024, null}
!9 = metadata !{metadata !"uniform_high", i32 12, i32* @uniform_high_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 3, i32 1024, null}
!11 = metadata !{metadata !"uniform_low", i32 12, i32* @uniform_low_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 1, i32 1024, null}
!13 = metadata !{metadata !"ub2", i32 12, <2 x i1>* @ub2_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1024, null}
!15 = metadata !{metadata !"mediumfout", i32 7, <4 x float>* @mediumfout_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 2, i32 1027, null, i32 0}
!17 = metadata !{i32 2}
!18 = metadata !{i32 3}
!19 = metadata !{i32 1}
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform mediump int uniform_medium;
uniform highp int uniform_high;
uniform lowp int uniform_low;
uniform bvec2 ub2;
in highp vec4 highfin;
in lowp float lowfin;
in mediump float mediumfin;
out mediump vec4 mediumfout;
const vec4 C_8rnsmg = vec4(1.02391e+06);
const int C_1 = 1;
const int C_4 = 4;
const bvec2 C_1uqgwal = bvec2(false, true);
const vec4 C_vec4p1d0p = vec4(1.0);

void main()
{
	mediump float L_1 = distance(lowfin, mediumfin);
	highp float global_highp_c1 = length(highfin);
	vec4 L_3 = vec4(global_highp_c1);
	lowp float L_4 = sin(L_1);
	vec4 L_5 = vec4(L_4);
	mediump vec4 L_6 = L_5 + C_8rnsmg;
	highp vec4 mediumfout_c2 = L_3 + L_6;
	mediumfout = mediumfout_c2;
	lowp int L_8 = uniform_medium + C_4;
	highp int sum_c3 = L_8 + uniform_low;
	lowp int sum_c4 = (sum_c3 + uniform_high) + (uniform_high * uniform_low);
	mediump float L_b = float(((uniform_high << C_1) + sum_c4));
	vec4 L_c = vec4(L_b);
	mediump vec4 mediumfout_c5 = L_c + mediumfout_c2;
	mediumfout = mediumfout_c5;
	bool L_e = all((equal(ub2, C_1uqgwal)));
	if (L_e) {
		mediump vec4 mediumfout_c6 = mediumfout_c5 + C_vec4p1d0p;
		mediumfout = mediumfout_c6;
	}
	
	
}

#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform mediump int uniform_medium;
uniform lowp int uniform_low;
uniform highp int uniform_high;
uniform bvec2 ub2;
in lowp float lowfin;
in mediump float mediumfin;
in highp vec4 highfin;
out mediump vec4 mediumfout;
const vec4 C_xb1zho = vec4(1023910.0);
const int C_2 = 2;
const int C_4 = 4;
const bvec2 C_1uqgwal = bvec2(false, true);
const vec4 C_vec4p1d0p = vec4(1.0);

void main()
{
	mediump float L_uc1 = distance(lowfin, mediumfin);
	highp float global_highp_c2 = length(highfin);
	vec4 L_3 = vec4(global_highp_c2);
	mediump float L_uc3 = sin(L_uc1);
	vec4 L_5 = vec4(L_uc3);
	mediump vec4 L_uc4 = L_5 + C_xb1zho;
	mediump vec4 mediumfout_c5 = L_3 + L_uc4;
	mediumfout = mediumfout_c5;
	lowp int sum_c6 = uniform_medium + C_4;
	highp int L_9 = sum_c6 + uniform_low;
	mediump float L_b_c7 = float((((uniform_low + C_2) * uniform_high) + (L_9 + uniform_high)));
	vec4 L_b = vec4(L_b_c7);
	highp vec4 mediumfout_c8 = L_b + mediumfout_c5;
	mediumfout = mediumfout_c8;
	bool L_e_c9 = all((equal(ub2, C_1uqgwal)));
	if (L_e_c9) {
		mediump vec4 mediumfout_c10 = mediumfout_c8 + C_vec4p1d0p;
		mediumfout = mediumfout_c10;
	}
	
	
}

