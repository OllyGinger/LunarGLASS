
Top IR:
; ModuleID = 'Glslang'

%bn = type { [4 x [4 x <4 x float>]], [4 x [4 x <4 x float>]], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>] }

@o = global <4 x float> zeroinitializer
@gl_ClipDistance = global [5 x float] zeroinitializer
@i = global <4 x float> zeroinitializer
@sampR = external addrspace(1) constant i32
@sampB = external addrspace(1) constant i32
@samp2Da = external addrspace(1) constant [3 x i32]
@"anon@0" = external addrspace(2) constant %bn

define fastcc void @main() {
entry:
  %constructed2 = alloca float
  %constructed = alloca i32
  %0 = load float* getelementptr inbounds ([5 x float]* @gl_ClipDistance, i32 0, i32 2)
  %1 = load <4 x float>* @o
  %o = insertelement <4 x float> %1, float %0, i32 1
  store <4 x float> %o, <4 x float>* @o
  %2 = load <4 x float>* @i
  %3 = fptosi <4 x float> %2 to <4 x i32>
  %4 = load i32* %constructed
  %5 = extractelement <4 x i32> %3, i32 0
  %6 = getelementptr [5 x float]* @gl_ClipDistance, i32 0, i32 %5
  %7 = load float* %6
  %8 = load <4 x float>* @o
  %o1 = insertelement <4 x float> %8, float %7, i32 2
  store <4 x float> %o1, <4 x float>* @o
  %9 = load i32 addrspace(1)* @sampR, !gla.uniform !7
  %10 = call <2 x i32> @llvm.gla.queryTextureSizeNoLod.v2i32(i32 5, i32 %9)
  %11 = load i32 addrspace(1)* @sampB, !gla.uniform !10
  %12 = call i32 @llvm.gla.queryTextureSizeNoLod.i32(i32 0, i32 %11)
  %13 = insertelement <2 x i32> undef, i32 %12, i32 0
  %14 = insertelement <2 x i32> %13, i32 %12, i32 1
  %15 = add <2 x i32> %10, %14
  %16 = sitofp <2 x i32> %15 to <2 x float>
  %17 = load float* %constructed2
  %18 = extractelement <2 x float> %16, i32 0
  %19 = fdiv float %18, 1.000000e+02
  %20 = load <4 x float>* @o
  %o3 = insertelement <4 x float> %20, float %19, i32 3
  store <4 x float> %o3, <4 x float>* @o
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.queryTextureSizeNoLod.v2i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @llvm.gla.queryTextureSizeNoLod.i32(i32, i32) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.inputs = !{!3, !5}
!gla.uniforms = !{!7, !10, !13, !16}
!gla.noStaticUse = !{!13, !16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"o", i32 7, <4 x float>* @o_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"gl_ClipDistance", i32 1, [5 x float]* @gl_ClipDistance_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"i", i32 1, <4 x float>* @i_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!7 = metadata !{metadata !"sampR", i32 12, i32* @sampR_typeProxy, metadata !8}
!8 = metadata !{i32 5, i32 0, i32 1024, metadata !9}
!9 = metadata !{i32 0, i32* @sampR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!10 = metadata !{metadata !"sampB", i32 12, i32* @sampB_typeProxy, metadata !11}
!11 = metadata !{i32 5, i32 0, i32 1024, metadata !12}
!12 = metadata !{i32 0, i32* @sampB_typeProxy, i32 5, i1 false, i1 false, i32 1}
!13 = metadata !{metadata !"samp2Da", i32 12, [3 x i32]* @samp2Da_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 0, i32 1024, metadata !15}
!15 = metadata !{i32 0, [3 x i32]* @samp2Da_typeProxy, i32 1, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"", i32 13, %bn* @"anon@0_typeProxy", metadata !17, metadata !18}
!17 = metadata !{i32 7, i32 0, i32 1024, null}
!18 = metadata !{metadata !"bn", metadata !17, metadata !"matra", metadata !19, metadata !"matca", metadata !21, metadata !"matr", metadata !19, metadata !"matc", metadata !21, metadata !"matrdef", metadata !19}
!19 = metadata !{metadata !"", metadata !20}
!20 = metadata !{i32 2, i32 0, i32 1024, null}
!21 = metadata !{metadata !"", metadata !22}
!22 = metadata !{i32 3, i32 0, i32 1024, null}


Bottom IR:
; ModuleID = 'Glslang'

@o = global <4 x float> zeroinitializer
@gl_ClipDistance = global [5 x float] zeroinitializer
@i = global <4 x float> zeroinitializer
@sampR = external addrspace(1) constant i32
@sampB = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [5 x float]* @gl_ClipDistance, i32 0, i32 2
  %0 = load float* %gla_constGEP, align 8
  %1 = load <4 x float>* @o, align 16
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %1, i32 2, float undef, i32 undef, float %0, i32 0, float undef, i32 undef, float undef, i32 undef)
  store <4 x float> %2, <4 x float>* @o, align 16
  %3 = load <4 x float>* @i, align 16
  %4 = extractelement <4 x float> %3, i32 0
  %5 = fptosi float %4 to i32
  %6 = getelementptr [5 x float]* @gl_ClipDistance, i32 0, i32 %5
  %7 = load float* %6, align 4
  %8 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %1, i32 6, float undef, i32 undef, float %0, i32 0, float %7, i32 0, float undef, i32 undef)
  store <4 x float> %8, <4 x float>* @o, align 16
  %9 = load i32 addrspace(1)* @sampR, align 4, !gla.uniform !7
  %10 = call <2 x i32> @llvm.gla.queryTextureSizeNoLod.v2i32(i32 5, i32 %9)
  %11 = load i32 addrspace(1)* @sampB, align 4, !gla.uniform !10
  %12 = call i32 @llvm.gla.queryTextureSizeNoLod.i32(i32 0, i32 %11)
  %.lhs = extractelement <2 x i32> %10, i32 0
  %13 = add i32 %12, %.lhs
  %14 = sitofp i32 %13 to float
  %15 = fdiv float %14, 1.000000e+02
  %16 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %1, i32 14, float undef, i32 undef, float %0, i32 0, float %7, i32 0, float %15, i32 0)
  store <4 x float> %16, <4 x float>* @o, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.queryTextureSizeNoLod.v2i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @llvm.gla.queryTextureSizeNoLod.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.inputs = !{!3, !5}
!gla.uniforms = !{!7, !10, !13, !16}
!gla.noStaticUse = !{!13, !16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"o", i32 7, <4 x float>* @o_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"gl_ClipDistance", i32 1, [5 x float]* @gl_ClipDistance_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"i", i32 1, <4 x float>* @i_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!7 = metadata !{metadata !"sampR", i32 12, i32* @sampR_typeProxy, metadata !8}
!8 = metadata !{i32 5, i32 0, i32 1024, metadata !9}
!9 = metadata !{i32 0, i32* @sampR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!10 = metadata !{metadata !"sampB", i32 12, i32* @sampB_typeProxy, metadata !11}
!11 = metadata !{i32 5, i32 0, i32 1024, metadata !12}
!12 = metadata !{i32 0, i32* @sampB_typeProxy, i32 5, i1 false, i1 false, i32 1}
!13 = metadata !{metadata !"samp2Da", i32 12, [3 x i32]* @samp2Da_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 0, i32 1024, metadata !15}
!15 = metadata !{i32 0, [3 x i32]* @samp2Da_typeProxy, i32 1, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"", i32 13, %bn* @"anon@0_typeProxy", metadata !17, metadata !18}
!17 = metadata !{i32 7, i32 0, i32 1024, null}
!18 = metadata !{metadata !"bn", metadata !17, metadata !"matra", metadata !19, metadata !"matca", metadata !21, metadata !"matr", metadata !19, metadata !"matc", metadata !21, metadata !"matrdef", metadata !19}
!19 = metadata !{metadata !"", metadata !20}
!20 = metadata !{i32 2, i32 0, i32 1024, null}
!21 = metadata !{metadata !"", metadata !22}
!22 = metadata !{i32 3, i32 0, i32 1024, null}
#version 140
// LunarGOO output
uniform sampler2DRect sampR;
uniform isamplerBuffer sampB;
uniform sampler2D samp2Da[3];
layout(std140) uniform bn {
	layout(row_major) mat4 matra[4];
	mat4 matca[4];
	layout(row_major) mat4 matr;
	mat4 matc;
	layout(row_major) mat4 matrdef;
} ;
in float gl_ClipDistance[5];
in vec4 i;
out vec4 o;
const float L_9 = 100.0;

void main()
{
	vec4 L_1 = o;
	L_1.y = gl_ClipDistance[2];
	o = L_1;
	int L_2 = int(i.x);
	vec4 L_3 = o;
	L_3.yz = vec2(gl_ClipDistance[2], gl_ClipDistance[L_2]);
	o = L_3;
	ivec2 L_4 = textureSize(sampR);
	int L_5 = textureSize(sampB);
	int L_6 = L_4.x + L_5;
	float L_7 = float(L_6);
	float L_8 = L_7 / L_9;
	vec4 L_a = o;
	L_a.yzw = vec3(gl_ClipDistance[2], gl_ClipDistance[L_2], L_8);
	o = L_a;
	
}

#version 140
// LunarGOO output
uniform sampler2DRect sampR;
uniform isamplerBuffer sampB;
uniform sampler2D samp2Da[3];
layout(std140) uniform bn {
	layout(row_major) mat4 matra[4];
	mat4 matca[4];
	layout(row_major) mat4 matr;
	mat4 matc;
	layout(row_major) mat4 matrdef;
} ;
in float gl_ClipDistance[5];
in vec4 i;
out vec4 o;
const float L_9 = 100.0;

void main()
{
	vec4 L_1 = o;
	L_1.y = gl_ClipDistance[2];
	o = L_1;
	int L_uc1 = int(i.x);
	vec4 L_3 = o;
	L_3.yz = vec2(gl_ClipDistance[2], gl_ClipDistance[L_uc1]);
	o = L_3;
	ivec2 L_uc2 = textureSize(sampR);
	int L_uc3 = textureSize(sampB);
	int L_uc4 = L_uc2.x + L_uc3;
	float L_uc5 = float(L_uc4);
	float L_uc6 = L_uc5 / L_9;
	vec4 L_a = o;
	L_a.yzw = vec3(gl_ClipDistance[2], gl_ClipDistance[L_uc1], L_uc6);
	o = L_a;
	
}

