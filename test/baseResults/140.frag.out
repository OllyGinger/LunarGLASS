
Top IR:
; ModuleID = 'Glslang'

%bn = type { [4 x [4 x <4 x float>]], [4 x [4 x <4 x float>]], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>] }

@o_shadow = internal global <4 x float> zeroinitializer
@ClipDistance_shadow = internal global [5 x float] zeroinitializer
@i_shadow = internal global <4 x float> zeroinitializer
@sampR = external addrspace(1) constant i32
@sampB = external addrspace(1) constant i32
@samp2Da = external addrspace(1) constant [3 x i32]
@"anon@0" = external addrspace(2) constant %bn

define fastcc void @main() {
entry:
  %constructed11 = alloca float
  %constructed = alloca i32
  %gl_ClipDistance = call float @llvm.gla.fReadInterpolant.f32(i32 1025, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 0)
  %gl_ClipDistance1 = call float @llvm.gla.fReadInterpolant.f32(i32 1026, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance1, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 1)
  %gl_ClipDistance2 = call float @llvm.gla.fReadInterpolant.f32(i32 1027, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance2, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 2)
  %gl_ClipDistance3 = call float @llvm.gla.fReadInterpolant.f32(i32 1028, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance3, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 3)
  %gl_ClipDistance4 = call float @llvm.gla.fReadInterpolant.f32(i32 1029, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance4, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 4)
  %0 = load float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 2)
  %1 = load <4 x float>* @o_shadow
  %o_shadow = insertelement <4 x float> %1, float %0, i32 1
  store <4 x float> %o_shadow, <4 x float>* @o_shadow
  %gl_ClipDistance5 = call float @llvm.gla.fReadInterpolant.f32(i32 1025, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance5, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 0)
  %gl_ClipDistance6 = call float @llvm.gla.fReadInterpolant.f32(i32 1026, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance6, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 1)
  %gl_ClipDistance7 = call float @llvm.gla.fReadInterpolant.f32(i32 1027, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance7, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 2)
  %gl_ClipDistance8 = call float @llvm.gla.fReadInterpolant.f32(i32 1028, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance8, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 3)
  %gl_ClipDistance9 = call float @llvm.gla.fReadInterpolant.f32(i32 1029, i32 -1, i32 1), !gla.input !3
  store float %gl_ClipDistance9, float* getelementptr inbounds ([5 x float]* @ClipDistance_shadow, i32 0, i32 4)
  %i = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1030, i32 -1, i32 1), !gla.input !5
  store <4 x float> %i, <4 x float>* @i_shadow
  %2 = load <4 x float>* @i_shadow
  %3 = fptosi <4 x float> %2 to <4 x i32>
  %4 = load i32* %constructed
  %5 = extractelement <4 x i32> %3, i32 0
  %6 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 %5
  %7 = load float* %6
  %8 = load <4 x float>* @o_shadow
  %o_shadow10 = insertelement <4 x float> %8, float %7, i32 2
  store <4 x float> %o_shadow10, <4 x float>* @o_shadow
  %9 = load i32 addrspace(1)* @sampR, !gla.uniform !7
  %10 = call <2 x i32> @llvm.gla.queryTextureSizeNoLod.v2i32(i32 5, i32 %9)
  %11 = load i32 addrspace(1)* @sampB, !gla.uniform !10
  %12 = call i32 @llvm.gla.queryTextureSizeNoLod.i32(i32 0, i32 %11)
  %13 = insertelement <2 x i32> undef, i32 %12, i32 0
  %14 = insertelement <2 x i32> %13, i32 %12, i32 1
  %15 = add <2 x i32> %10, %14
  %16 = sitofp <2 x i32> %15 to <2 x float>
  %17 = load float* %constructed11
  %18 = extractelement <2 x float> %16, i32 0
  %19 = fdiv float %18, 1.000000e+02
  %20 = load <4 x float>* @o_shadow
  %o_shadow12 = insertelement <4 x float> %20, float %19, i32 3
  store <4 x float> %o_shadow12, <4 x float>* @o_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %21 = load <4 x float>* @o_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %21), !gla.output !1
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.queryTextureSizeNoLod.v2i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @llvm.gla.queryTextureSizeNoLod.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.inputs = !{!3, !5}
!gla.uniforms = !{!7, !10, !13, !16}
!gla.noStaticUse = !{!13, !16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"o", i32 7, <4 x float>* @o_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"gl_ClipDistance", i32 1, [5 x float]* @ClipDistance_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"i", i32 1, <4 x float>* @i_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!7 = metadata !{metadata !"sampR", i32 12, i32* @sampR_typeProxy, metadata !8}
!8 = metadata !{i32 5, i32 0, i32 1024, metadata !9}
!9 = metadata !{i32 0, i32* @sampR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!10 = metadata !{metadata !"sampB", i32 12, i32* @sampB_typeProxy, metadata !11}
!11 = metadata !{i32 5, i32 0, i32 1024, metadata !12}
!12 = metadata !{i32 0, i32* @sampB_typeProxy, i32 5, i1 false, i1 false, i32 1}
!13 = metadata !{metadata !"samp2Da", i32 12, [3 x i32]* @samp2Da_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 0, i32 1024, metadata !15}
!15 = metadata !{i32 0, [3 x i32]* @samp2Da_typeProxy, i32 1, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"", i32 13, %bn* @"anon@0_typeProxy", metadata !17, metadata !18}
!17 = metadata !{i32 7, i32 0, i32 1024, null}
!18 = metadata !{metadata !"bn", metadata !17, metadata !"matra", metadata !19, metadata !"matca", metadata !21, metadata !"matr", metadata !19, metadata !"matc", metadata !21, metadata !"matrdef", metadata !19}
!19 = metadata !{metadata !"", metadata !20}
!20 = metadata !{i32 2, i32 0, i32 1024, null}
!21 = metadata !{metadata !"", metadata !22}
!22 = metadata !{i32 3, i32 0, i32 1024, null}


Bottom IR:
; ModuleID = 'Glslang'

@ClipDistance_shadow = internal unnamed_addr global [5 x float] zeroinitializer
@sampR = external addrspace(1) constant i32
@sampB = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gl_ClipDistance = call float @llvm.gla.fReadInterpolant.f32(i32 1025, i32 -1, i32 1), !gla.input !3
  %gla_constGEP = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 0
  store float %gl_ClipDistance, float* %gla_constGEP, align 16
  %gl_ClipDistance1 = call float @llvm.gla.fReadInterpolant.f32(i32 1026, i32 -1, i32 1), !gla.input !3
  %gla_constGEP14 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 1
  store float %gl_ClipDistance1, float* %gla_constGEP14, align 4
  %gl_ClipDistance2 = call float @llvm.gla.fReadInterpolant.f32(i32 1027, i32 -1, i32 1), !gla.input !3
  %gla_constGEP15 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 2
  store float %gl_ClipDistance2, float* %gla_constGEP15, align 8
  %gl_ClipDistance3 = call float @llvm.gla.fReadInterpolant.f32(i32 1028, i32 -1, i32 1), !gla.input !3
  %gla_constGEP16 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 3
  store float %gl_ClipDistance3, float* %gla_constGEP16, align 4
  %gl_ClipDistance4 = call float @llvm.gla.fReadInterpolant.f32(i32 1029, i32 -1, i32 1), !gla.input !3
  %gla_constGEP17 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 0
  store float %gl_ClipDistance, float* %gla_constGEP17, align 16
  %gla_constGEP18 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 1
  store float %gl_ClipDistance1, float* %gla_constGEP18, align 4
  %gla_constGEP19 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 2
  store float %gl_ClipDistance2, float* %gla_constGEP19, align 8
  %gla_constGEP20 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 3
  store float %gl_ClipDistance3, float* %gla_constGEP20, align 4
  %gla_constGEP21 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 4
  store float %gl_ClipDistance4, float* %gla_constGEP21, align 16
  %0 = load i32 addrspace(1)* @sampR, align 4, !gla.uniform !7
  %i = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1030, i32 -1, i32 1), !gla.input !5
  %1 = load i32 addrspace(1)* @sampB, align 4, !gla.uniform !10
  %2 = call <2 x i32> @llvm.gla.queryTextureSizeNoLod.v2i32(i32 5, i32 %0)
  %3 = extractelement <4 x float> %i, i32 0
  %.lhs = extractelement <2 x i32> %2, i32 0
  %4 = call i32 @llvm.gla.queryTextureSizeNoLod.i32(i32 0, i32 %1)
  %5 = fptosi float %3 to i32
  %6 = add i32 %.lhs, %4
  %7 = getelementptr [5 x float]* @ClipDistance_shadow, i32 0, i32 %5
  %8 = sitofp i32 %6 to float
  %9 = load float* %7, align 4
  %10 = fdiv float %8, 1.000000e+02
  %11 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float undef, float undef, float undef>, i32 14, float undef, i32 undef, float %gl_ClipDistance2, i32 0, float %9, i32 0, float %10, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %11), !gla.output !1
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.queryTextureSizeNoLod.v2i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @llvm.gla.queryTextureSizeNoLod.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.inputs = !{!3, !5}
!gla.uniforms = !{!7, !10, !13, !16}
!gla.noStaticUse = !{!13, !16}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"o", i32 7, <4 x float>* @o_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!3 = metadata !{metadata !"gl_ClipDistance", i32 1, [5 x float]* @ClipDistance_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
!5 = metadata !{metadata !"i", i32 1, <4 x float>* @i_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!7 = metadata !{metadata !"sampR", i32 12, i32* @sampR_typeProxy, metadata !8}
!8 = metadata !{i32 5, i32 0, i32 1024, metadata !9}
!9 = metadata !{i32 0, i32* @sampR_typeProxy, i32 4, i1 false, i1 false, i32 0}
!10 = metadata !{metadata !"sampB", i32 12, i32* @sampB_typeProxy, metadata !11}
!11 = metadata !{i32 5, i32 0, i32 1024, metadata !12}
!12 = metadata !{i32 0, i32* @sampB_typeProxy, i32 5, i1 false, i1 false, i32 1}
!13 = metadata !{metadata !"samp2Da", i32 12, [3 x i32]* @samp2Da_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 0, i32 1024, metadata !15}
!15 = metadata !{i32 0, [3 x i32]* @samp2Da_typeProxy, i32 1, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"", i32 13, %bn* @"anon@0_typeProxy", metadata !17, metadata !18}
!17 = metadata !{i32 7, i32 0, i32 1024, null}
!18 = metadata !{metadata !"bn", metadata !17, metadata !"matra", metadata !19, metadata !"matca", metadata !21, metadata !"matr", metadata !19, metadata !"matc", metadata !21, metadata !"matrdef", metadata !19}
!19 = metadata !{metadata !"", metadata !20}
!20 = metadata !{i32 2, i32 0, i32 1024, null}
!21 = metadata !{metadata !"", metadata !22}
!22 = metadata !{i32 3, i32 0, i32 1024, null}
#version 140
// LunarGOO output
uniform sampler2DRect sampR;
uniform isamplerBuffer sampB;
uniform sampler2D samp2Da[3];
layout(std140) uniform bn {
    layout(row_major) mat4 matra[4];
    mat4 matca[4];
    layout(row_major) mat4 matr;
    mat4 matc;
    layout(row_major) mat4 matrdef;
} ;
in float gl_ClipDistance[5];
in vec4 i;
out vec4 o;
float ClipDistance_shadow[5];
const float const27 = 100.0;
const vec4 const29 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
    ClipDistance_shadow[0] = gl_ClipDistance[0];
    ClipDistance_shadow[1] = gl_ClipDistance[1];
    ClipDistance_shadow[2] = gl_ClipDistance[2];
    ClipDistance_shadow[3] = gl_ClipDistance[3];
    ClipDistance_shadow[0] = gl_ClipDistance[0];
    ClipDistance_shadow[1] = gl_ClipDistance[1];
    ClipDistance_shadow[2] = gl_ClipDistance[2];
    ClipDistance_shadow[3] = gl_ClipDistance[3];
    ClipDistance_shadow[4] = gl_ClipDistance[4];
    ivec2 temp21 = textureSize(sampR);
    int temp22 = textureSize(sampB);
    int temp23 = int(i.x);
    int temp24 = temp21.x + temp22;
    float temp25 = float(temp24);
    float temp26 = temp25 / const27;
    vec4 temp28 = const29;
    temp28.yzw = vec3(gl_ClipDistance[2], ClipDistance_shadow[temp23], temp26);
    o = temp28;
    
}


#version 140
// LunarGOO output
uniform sampler2DRect sampR;
uniform isamplerBuffer sampB;
uniform sampler2D samp2Da[3];
layout(std140) uniform bn {
    layout(row_major) mat4 matra[4];
    mat4 matca[4];
    layout(row_major) mat4 matr;
    mat4 matc;
    layout(row_major) mat4 matrdef;
} ;
in float gl_ClipDistance[5];
in vec4 i;
out vec4 o;
float ClipDistance_shadow[5];
const float const27 = 100.0;
const vec4 const29 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
    ClipDistance_shadow[0] = gl_ClipDistance[0];
    ClipDistance_shadow[1] = gl_ClipDistance[1];
    ClipDistance_shadow[2] = gl_ClipDistance[2];
    ClipDistance_shadow[3] = gl_ClipDistance[3];
    ClipDistance_shadow[4] = gl_ClipDistance[4];
    ivec2 temp2145 = textureSize(sampR);
    int temp2347 = int(i.x);
    int temp2246 = textureSize(sampB);
    int temp2448 = temp2145.x + temp2246;
    float temp2549 = float(temp2448);
    float temp2650 = temp2549 / const27;
    vec4 temp28 = const29;
    temp28.yzw = vec3(gl_ClipDistance[2], ClipDistance_shadow[temp2347], temp2650);
    o = temp28;
    
}


