
Top IR:
; ModuleID = 'Top'

@gl_FragColor = internal global <4 x float> zeroinitializer
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %0 = load i32 addrspace(1)* @"sampler2D sampler"
  %gl_FragColor = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %coord)
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %1 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %1)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 1)
  %0 = load i32 addrspace(1)* @"sampler2D sampler"
  %gl_FragColor = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %coord)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %gl_FragColor)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
# Fragment Program/Shader 0
  0: TEX OUTPUT[2], INPUT[-1].xyyy, texture[0], 2D;
  1: END
compiling newTexture.frag...
uniform sampler2D sampler ; 
varying vec2 coord ; 
void  main (){
gl_FragColor = texture ( sampler , coord ) ; }



(
(declare (in ) vec2 coord)
(declare (uniform ) sampler2D sampler)
(declare (out ) vec4 gl_FragColor)
(function main
  (signature void
    (parameters
    )
    (
      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (tex (var_ref sampler)  (var_ref coord)  (0 0 0) 1 () )) 
    ))

)


)
Mesa program before mesa optimizations
  0: MOV TEMP[1].xy, INPUT[0].xyyy;
  1: MOV TEMP[2].x, UNIFORM[1].xxxx;
  2: TEX TEMP[3], TEMP[1].xyyy, texture[17], 2D;
  3: MOV OUTPUT[0], TEMP[3];
  4: END

Mesa program after mesa optimizations
  0: TEX OUTPUT[0], INPUT[0].xyyy, texture[17], 2D;
  1: END

===========================================

Optimized Mesa IR without GLA for linked fragment program 0:
