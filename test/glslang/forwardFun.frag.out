
Top IR:
; ModuleID = 'Top'

@BaseColor_shadow = internal global <4 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer
@d = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %f = alloca float
  %constructed = alloca <4 x float>
  %param = alloca <4 x float>
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !0
  store <4 x float> %BaseColor, <4 x float>* @BaseColor_shadow
  %param1 = load <4 x float>* @BaseColor_shadow
  store <4 x float> %param1, <4 x float>* %param
  %0 = call float @"foo(vf4;"(<4 x float>* %param)
  %1 = load <4 x float>* %constructed
  %2 = insertelement <4 x float> undef, float %0, i32 0
  %3 = insertelement <4 x float> %2, float %0, i32 1
  %4 = insertelement <4 x float> %3, float %0, i32 2
  %color2 = insertelement <4 x float> %4, float %0, i32 3
  store <4 x float> %color2, <4 x float>* %color
  call void @"bar("()
  %f3 = call float @"unreachableReturn("()
  store float %f3, float* %f
  %5 = load <4 x float>* %color
  %6 = load float* %f
  %7 = insertelement <4 x float> undef, float %6, i32 0, !gla.precision !6
  %8 = insertelement <4 x float> %7, float %6, i32 1, !gla.precision !6
  %9 = insertelement <4 x float> %8, float %6, i32 2, !gla.precision !6
  %10 = insertelement <4 x float> %9, float %6, i32 3, !gla.precision !6
  %FragColor_shadow = fmul <4 x float> %5, %10, !gla.precision !6
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %11 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %11), !gla.output !2
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

define internal fastcc void @"bar("() alwaysinline {
entry:
  ret void
}

define internal fastcc float @"unreachableReturn("() alwaysinline {
entry:
  %dummyReturn = alloca float
  call void @"bar("()
  %0 = load float addrspace(2)* @d, !gla.uniform !4
  %1 = fcmp olt float %0, 0x4010CCCCC0000000
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  ret float 0x3FF3333340000000

post-return:                                      ; No predecessors!
  br label %ifmerge

else:                                             ; preds = %entry
  ret float 4.500000e+00

post-return1:                                     ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %post-return1, %post-return
  %2 = load float* %dummyReturn
  ret float %2
}

define internal fastcc float @"foo(vf4;"(<4 x float>*) alwaysinline {
entry:
  %1 = load <4 x float>* %0
  %2 = extractelement <4 x float> %1, i32 0
  %3 = load <4 x float>* %0
  %4 = extractelement <4 x float> %3, i32 1
  %5 = fadd float %2, %4
  ret float %5

post-return:                                      ; No predecessors!
  unreachable
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.inputs = !{!0}
!gla.outputs = !{!2}
!gla.uniforms = !{!4}

!0 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 2, i32 1025, null}
!4 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 0, null}
!6 = metadata !{i32 2}


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !0
  %0 = extractelement <4 x float> %BaseColor, i32 0
  %1 = extractelement <4 x float> %BaseColor, i32 1
  %2 = fadd float %0, %1
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %2, <4 x i32> zeroinitializer)
  %4 = load float addrspace(2)* @d, align 4, !gla.uniform !4
  %5 = fcmp olt float %4, 0x4010CCCCC0000000
  %. = select i1 %5, float 0x3FF3333340000000, float 4.500000e+00
  %6 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %., <4 x i32> zeroinitializer)
  %FragColor_shadow = fmul <4 x float> %3, %6, !gla.precision !6
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %FragColor_shadow), !gla.output !2
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

!gla.inputs = !{!0}
!gla.outputs = !{!2}
!gla.uniforms = !{!4}

!0 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 2, i32 1025, null}
!4 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 0, null}
!6 = metadata !{i32 2}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 100
uniform float d;
varying vec4 BaseColor;
const float const24 = 4.2;
const float const26 = 1.2;
const float const27 = 4.5;

void main()
{
    float temp21 = BaseColor.x + BaseColor.y;
    vec4 temp22 = vec4(temp21);
    bool temp23 = d < const24;
    float temp25 = temp23 ? const26 : const27;
    vec4 temp28 = vec4(temp25);
    mediump vec4 FragColor_shadow = temp22 * temp28;
    gl_FragColor = FragColor_shadow;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 100
uniform float d;
varying vec4 BaseColor;
const float const24 = 4.2;
const float const26 = 1.2;
const float const27 = 4.5;

void main()
{
    float temp212 = BaseColor.x + BaseColor.y;
    vec4 temp22 = vec4(temp212);
    bool temp234 = d < const24;
    float temp25 = temp234 ? const26 : const27;
    vec4 temp28 = vec4(temp25);
    mediump vec4 FragColor_shadow8 = temp22 * temp28;
    gl_FragColor = FragColor_shadow8;
    
}
