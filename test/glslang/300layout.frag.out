
Top IR:
; ModuleID = 'Top'

%S = type { <3 x float>, float }

@c_shadow = internal global <3 x float> zeroinitializer
@color_shadow = internal global <3 x float> zeroinitializer
@s_shadow = internal global %S zeroinitializer
@p_shadow = internal global [2 x <4 x float>] zeroinitializer
@pos_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1024, i32 -1, i32 1), !gla.input !4, !gla.precision !14
  store <3 x float> %color, <3 x float>* @color_shadow
  %0 = load <3 x float>* @color_shadow
  %s = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !6, !gla.precision !14
  store <3 x float> %s, <3 x float>* getelementptr inbounds (%S* @s_shadow, i32 0, i32 0)
  %s1 = call float @llvm.gla.fReadInterpolant.f32(i32 1026, i32 -1, i32 1), !gla.input !6, !gla.precision !14
  store float %s1, float* getelementptr inbounds (%S* @s_shadow, i32 0, i32 1)
  %1 = load <3 x float>* getelementptr inbounds (%S* @s_shadow, i32 0, i32 0)
  %c_shadow = fadd <3 x float> %0, %1, !gla.precision !14
  store <3 x float> %c_shadow, <3 x float>* @c_shadow
  %pos = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !12, !gla.precision !14
  store <4 x float> %pos, <4 x float>* @pos_shadow
  %2 = load <4 x float>* @pos_shadow
  %s2 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !6, !gla.precision !14
  store <3 x float> %s2, <3 x float>* getelementptr inbounds (%S* @s_shadow, i32 0, i32 0)
  %s3 = call float @llvm.gla.fReadInterpolant.f32(i32 1026, i32 -1, i32 1), !gla.input !6, !gla.precision !14
  store float %s3, float* getelementptr inbounds (%S* @s_shadow, i32 0, i32 1)
  %3 = load float* getelementptr inbounds (%S* @s_shadow, i32 0, i32 1)
  %4 = insertelement <4 x float> undef, float %3, i32 0, !gla.precision !14
  %5 = insertelement <4 x float> %4, float %3, i32 1, !gla.precision !14
  %6 = insertelement <4 x float> %5, float %3, i32 2, !gla.precision !14
  %7 = insertelement <4 x float> %6, float %3, i32 3, !gla.precision !14
  %8 = fmul <4 x float> %2, %7, !gla.precision !14
  store <4 x float> %8, <4 x float>* getelementptr inbounds ([2 x <4 x float>]* @p_shadow, i32 0, i32 1)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %9 = load <3 x float>* @c_shadow
  call void @llvm.gla.fWriteData.v3f32(i32 7, i32 -1, <3 x float> %9), !gla.output !0
  %10 = load <4 x float>* getelementptr inbounds ([2 x <4 x float>]* @p_shadow, i32 0, i32 1)
  call void @llvm.gla.fWriteData.v4f32(i32 4, i32 -1, <4 x float> %10), !gla.output !2
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v3f32(i32, i32, <3 x float>) nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.outputs = !{!0, !2}
!gla.inputs = !{!4, !6, !12}

!0 = metadata !{metadata !"c", i32 7, <3 x float>* @c_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 2, i32 7, null, i32 0}
!2 = metadata !{metadata !"p", i32 7, [2 x <4 x float>]* @p_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 2, i32 3, null, i32 0}
!4 = metadata !{metadata !"color", i32 1, <3 x float>* @color_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1024, null, i32 1}
!6 = metadata !{metadata !"s", i32 1, %S* @s_shadow_typeProxy, metadata !7, metadata !8}
!7 = metadata !{i32 4, i32 0, i32 1025, null, i32 1}
!8 = metadata !{metadata !"S", metadata !9, metadata !"c", metadata !10, metadata !"f", metadata !10}
!9 = metadata !{i32 4, i32 0, i32 1024, null}
!10 = metadata !{metadata !"", metadata !11}
!11 = metadata !{i32 0, i32 2, i32 1024, null}
!12 = metadata !{metadata !"pos", i32 1, <4 x float>* @pos_shadow_typeProxy, metadata !13}
!13 = metadata !{i32 0, i32 2, i32 1026, null, i32 1}
!14 = metadata !{i32 2}


Bottom IR:
; ModuleID = 'Top'

@p_shadow = internal unnamed_addr global [2 x <4 x float>] zeroinitializer

define fastcc void @main() {
entry:
  %s = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !6, !gla.precision !14
  %s1 = call float @llvm.gla.fReadInterpolant.f32(i32 1026, i32 -1, i32 1), !gla.input !6, !gla.precision !14
  %0 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %s1, <4 x i32> zeroinitializer)
  %pos = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !12, !gla.precision !14
  %1 = fmul <4 x float> %pos, %0, !gla.precision !14
  %gla_constGEP = getelementptr [2 x <4 x float>]* @p_shadow, i32 0, i32 1
  store <4 x float> %1, <4 x float>* %gla_constGEP, align 16
  %color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1024, i32 -1, i32 1), !gla.input !4, !gla.precision !14
  %c_shadow = fadd <3 x float> %s, %color, !gla.precision !14
  call void @llvm.gla.fWriteData.v3f32(i32 7, i32 -1, <3 x float> %c_shadow), !gla.output !0
  %gla_constGEP5 = getelementptr [2 x <4 x float>]* @p_shadow, i32 0, i32 1
  %2 = load <4 x float>* %gla_constGEP5, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 4, i32 -1, <4 x float> %2), !gla.output !2
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v3f32(i32, i32, <3 x float>) nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

!gla.outputs = !{!0, !2}
!gla.inputs = !{!4, !6, !12}

!0 = metadata !{metadata !"c", i32 7, <3 x float>* @c_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 2, i32 7, null, i32 0}
!2 = metadata !{metadata !"p", i32 7, [2 x <4 x float>]* @p_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 2, i32 3, null, i32 0}
!4 = metadata !{metadata !"color", i32 1, <3 x float>* @color_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1024, null, i32 1}
!6 = metadata !{metadata !"s", i32 1, %S* @s_shadow_typeProxy, metadata !7, metadata !8}
!7 = metadata !{i32 4, i32 0, i32 1025, null, i32 1}
!8 = metadata !{metadata !"S", metadata !9, metadata !"c", metadata !10, metadata !"f", metadata !10}
!9 = metadata !{i32 4, i32 0, i32 1024, null}
!10 = metadata !{metadata !"", metadata !11}
!11 = metadata !{i32 0, i32 2, i32 1024, null}
!12 = metadata !{metadata !"pos", i32 1, <4 x float>* @pos_shadow_typeProxy, metadata !13}
!13 = metadata !{i32 0, i32 2, i32 1026, null, i32 1}
!14 = metadata !{i32 2}

***Unsupported functionality: missing metadata on load 0 p_shadow
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 300 es
// LunarGOO output (r722)
struct S {
    mediump vec3 c;
    mediump float f;
};

in mediump vec3 color;
in S s;
in mediump vec4 pos;
layout(location=7) out mediump vec3 c;
layout(location=3) out layout(location=3) mediump vec4 p[2];
vec4 p_shadow[2];

void main()
{
    vec4 temp21 = vec4(s.f);
    mediump vec4 temp22 = pos * temp21;
    p_shadow[1] = temp22;
    mediump vec3 c_shadow = s.c + color;
    c = c_shadow;
    vec4 temp24 = p_shadow[1];
    p[1] = temp24;
    
}

#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 300 es
// LunarGOO output (r722)
struct S {
    mediump vec3 c;
    mediump float f;
};

in S s;
in mediump vec4 pos;
in mediump vec3 color;
layout(location=7) out mediump vec3 c;
layout(location=3) out layout(location=3) mediump vec4 p[2];
vec4 p_shadow1[2];

void main()
{
    vec4 temp21 = vec4(s.f);
    mediump vec4 temp223 = pos * temp21;
    p_shadow1[1] = temp223;
    mediump vec3 c_shadow6 = s.c + color;
    c = c_shadow6;
    vec4 temp24 = p_shadow1[1];
    p[1] = temp24;
    
}

