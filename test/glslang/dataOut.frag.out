
Top IR:
; ModuleID = 'Top'

@gl_FragData = internal global [32 x <4 x float>] zeroinitializer

define fastcc void @main() {
entry:
  %Color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %Color, <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 0)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %0 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %0)
  %1 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 1)
  call void @llvm.gla.fWriteData.v4f32(i32 1, i32 -1, <4 x float> %1)
  %2 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 2)
  call void @llvm.gla.fWriteData.v4f32(i32 2, i32 -1, <4 x float> %2)
  %3 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 3)
  call void @llvm.gla.fWriteData.v4f32(i32 3, i32 -1, <4 x float> %3)
  %4 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 4)
  call void @llvm.gla.fWriteData.v4f32(i32 4, i32 -1, <4 x float> %4)
  %5 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 5)
  call void @llvm.gla.fWriteData.v4f32(i32 5, i32 -1, <4 x float> %5)
  %6 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 6)
  call void @llvm.gla.fWriteData.v4f32(i32 6, i32 -1, <4 x float> %6)
  %7 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 7)
  call void @llvm.gla.fWriteData.v4f32(i32 7, i32 -1, <4 x float> %7)
  %8 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 8)
  call void @llvm.gla.fWriteData.v4f32(i32 8, i32 -1, <4 x float> %8)
  %9 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 9)
  call void @llvm.gla.fWriteData.v4f32(i32 9, i32 -1, <4 x float> %9)
  %10 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 10)
  call void @llvm.gla.fWriteData.v4f32(i32 10, i32 -1, <4 x float> %10)
  %11 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 11)
  call void @llvm.gla.fWriteData.v4f32(i32 11, i32 -1, <4 x float> %11)
  %12 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 12)
  call void @llvm.gla.fWriteData.v4f32(i32 12, i32 -1, <4 x float> %12)
  %13 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 13)
  call void @llvm.gla.fWriteData.v4f32(i32 13, i32 -1, <4 x float> %13)
  %14 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 14)
  call void @llvm.gla.fWriteData.v4f32(i32 14, i32 -1, <4 x float> %14)
  %15 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 15)
  call void @llvm.gla.fWriteData.v4f32(i32 15, i32 -1, <4 x float> %15)
  %16 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 16)
  call void @llvm.gla.fWriteData.v4f32(i32 16, i32 -1, <4 x float> %16)
  %17 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 17)
  call void @llvm.gla.fWriteData.v4f32(i32 17, i32 -1, <4 x float> %17)
  %18 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 18)
  call void @llvm.gla.fWriteData.v4f32(i32 18, i32 -1, <4 x float> %18)
  %19 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 19)
  call void @llvm.gla.fWriteData.v4f32(i32 19, i32 -1, <4 x float> %19)
  %20 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 20)
  call void @llvm.gla.fWriteData.v4f32(i32 20, i32 -1, <4 x float> %20)
  %21 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 21)
  call void @llvm.gla.fWriteData.v4f32(i32 21, i32 -1, <4 x float> %21)
  %22 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 22)
  call void @llvm.gla.fWriteData.v4f32(i32 22, i32 -1, <4 x float> %22)
  %23 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 23)
  call void @llvm.gla.fWriteData.v4f32(i32 23, i32 -1, <4 x float> %23)
  %24 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 24)
  call void @llvm.gla.fWriteData.v4f32(i32 24, i32 -1, <4 x float> %24)
  %25 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 25)
  call void @llvm.gla.fWriteData.v4f32(i32 25, i32 -1, <4 x float> %25)
  %26 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 26)
  call void @llvm.gla.fWriteData.v4f32(i32 26, i32 -1, <4 x float> %26)
  %27 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 27)
  call void @llvm.gla.fWriteData.v4f32(i32 27, i32 -1, <4 x float> %27)
  %28 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 28)
  call void @llvm.gla.fWriteData.v4f32(i32 28, i32 -1, <4 x float> %28)
  %29 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 29)
  call void @llvm.gla.fWriteData.v4f32(i32 29, i32 -1, <4 x float> %29)
  %30 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 30)
  call void @llvm.gla.fWriteData.v4f32(i32 30, i32 -1, <4 x float> %30)
  %31 = load <4 x float>* getelementptr inbounds ([32 x <4 x float>]* @gl_FragData, i32 0, i32 31)
  call void @llvm.gla.fWriteData.v4f32(i32 31, i32 -1, <4 x float> %31)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@gl_FragData = internal unnamed_addr global [32 x <4 x float>] zeroinitializer

define fastcc void @main() {
entry:
  %Color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %gla_constGEP = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 0
  store <4 x float> %Color, <4 x float>* %gla_constGEP, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %Color)
  %gla_constGEP1 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 1
  %0 = load <4 x float>* %gla_constGEP1, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 1, i32 -1, <4 x float> %0)
  %gla_constGEP2 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 2
  %1 = load <4 x float>* %gla_constGEP2, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 2, i32 -1, <4 x float> %1)
  %gla_constGEP3 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 3
  %2 = load <4 x float>* %gla_constGEP3, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 3, i32 -1, <4 x float> %2)
  %gla_constGEP4 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 4
  %3 = load <4 x float>* %gla_constGEP4, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 4, i32 -1, <4 x float> %3)
  %gla_constGEP5 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 5
  %4 = load <4 x float>* %gla_constGEP5, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 5, i32 -1, <4 x float> %4)
  %gla_constGEP6 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 6
  %5 = load <4 x float>* %gla_constGEP6, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 6, i32 -1, <4 x float> %5)
  %gla_constGEP7 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 7
  %6 = load <4 x float>* %gla_constGEP7, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 7, i32 -1, <4 x float> %6)
  %gla_constGEP8 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 8
  %7 = load <4 x float>* %gla_constGEP8, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 8, i32 -1, <4 x float> %7)
  %gla_constGEP9 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 9
  %8 = load <4 x float>* %gla_constGEP9, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 9, i32 -1, <4 x float> %8)
  %gla_constGEP10 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 10
  %9 = load <4 x float>* %gla_constGEP10, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 10, i32 -1, <4 x float> %9)
  %gla_constGEP11 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 11
  %10 = load <4 x float>* %gla_constGEP11, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 11, i32 -1, <4 x float> %10)
  %gla_constGEP12 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 12
  %11 = load <4 x float>* %gla_constGEP12, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 12, i32 -1, <4 x float> %11)
  %gla_constGEP13 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 13
  %12 = load <4 x float>* %gla_constGEP13, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 13, i32 -1, <4 x float> %12)
  %gla_constGEP14 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 14
  %13 = load <4 x float>* %gla_constGEP14, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 14, i32 -1, <4 x float> %13)
  %gla_constGEP15 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 15
  %14 = load <4 x float>* %gla_constGEP15, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 15, i32 -1, <4 x float> %14)
  %gla_constGEP16 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 16
  %15 = load <4 x float>* %gla_constGEP16, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 16, i32 -1, <4 x float> %15)
  %gla_constGEP17 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 17
  %16 = load <4 x float>* %gla_constGEP17, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 17, i32 -1, <4 x float> %16)
  %gla_constGEP18 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 18
  %17 = load <4 x float>* %gla_constGEP18, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 18, i32 -1, <4 x float> %17)
  %gla_constGEP19 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 19
  %18 = load <4 x float>* %gla_constGEP19, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 19, i32 -1, <4 x float> %18)
  %gla_constGEP20 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 20
  %19 = load <4 x float>* %gla_constGEP20, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 20, i32 -1, <4 x float> %19)
  %gla_constGEP21 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 21
  %20 = load <4 x float>* %gla_constGEP21, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 21, i32 -1, <4 x float> %20)
  %gla_constGEP22 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 22
  %21 = load <4 x float>* %gla_constGEP22, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 22, i32 -1, <4 x float> %21)
  %gla_constGEP23 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 23
  %22 = load <4 x float>* %gla_constGEP23, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 23, i32 -1, <4 x float> %22)
  %gla_constGEP24 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 24
  %23 = load <4 x float>* %gla_constGEP24, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 24, i32 -1, <4 x float> %23)
  %gla_constGEP25 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 25
  %24 = load <4 x float>* %gla_constGEP25, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 25, i32 -1, <4 x float> %24)
  %gla_constGEP26 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 26
  %25 = load <4 x float>* %gla_constGEP26, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 26, i32 -1, <4 x float> %25)
  %gla_constGEP27 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 27
  %26 = load <4 x float>* %gla_constGEP27, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 27, i32 -1, <4 x float> %26)
  %gla_constGEP28 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 28
  %27 = load <4 x float>* %gla_constGEP28, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 28, i32 -1, <4 x float> %27)
  %gla_constGEP29 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 29
  %28 = load <4 x float>* %gla_constGEP29, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 29, i32 -1, <4 x float> %28)
  %gla_constGEP30 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 30
  %29 = load <4 x float>* %gla_constGEP30, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 30, i32 -1, <4 x float> %29)
  %gla_constGEP31 = getelementptr [32 x <4 x float>]* @gl_FragData, i32 0, i32 31
  %30 = load <4 x float>* %gla_constGEP31, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 31, i32 -1, <4 x float> %30)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

// LunarGOO(r471) output
#version 130
in vec4 Color;

void main()
{
    gl_FragData[0] = Color;
    gl_FragData0 = Color;
    vec4 temp21 = gl_FragData[1];
    gl_FragData1 = temp21;
    vec4 temp22 = gl_FragData[2];
    gl_FragData2 = temp22;
    vec4 temp23 = gl_FragData[3];
    gl_FragData3 = temp23;
    vec4 temp24 = gl_FragData[4];
    gl_FragData4 = temp24;
    vec4 temp25 = gl_FragData[5];
    gl_FragData5 = temp25;
    vec4 temp26 = gl_FragData[6];
    gl_FragData6 = temp26;
    vec4 temp27 = gl_FragData[7];
    gl_FragData7 = temp27;
    vec4 temp28 = gl_FragData[8];
    gl_FragData8 = temp28;
    vec4 temp29 = gl_FragData[9];
    gl_FragData9 = temp29;
    vec4 temp30 = gl_FragData[10];
    gl_FragData10 = temp30;
    vec4 temp31 = gl_FragData[11];
    gl_FragData11 = temp31;
    vec4 temp32 = gl_FragData[12];
    gl_FragData12 = temp32;
    vec4 temp33 = gl_FragData[13];
    gl_FragData13 = temp33;
    vec4 temp34 = gl_FragData[14];
    gl_FragData14 = temp34;
    vec4 temp35 = gl_FragData[15];
    gl_FragData15 = temp35;
    vec4 temp36 = gl_FragData[16];
    gl_FragData16 = temp36;
    vec4 temp37 = gl_FragData[17];
    gl_FragData17 = temp37;
    vec4 temp38 = gl_FragData[18];
    gl_FragData18 = temp38;
    vec4 temp39 = gl_FragData[19];
    gl_FragData19 = temp39;
    vec4 temp40 = gl_FragData[20];
    gl_FragData20 = temp40;
    vec4 temp41 = gl_FragData[21];
    gl_FragData21 = temp41;
    vec4 temp42 = gl_FragData[22];
    gl_FragData22 = temp42;
    vec4 temp43 = gl_FragData[23];
    gl_FragData23 = temp43;
    vec4 temp44 = gl_FragData[24];
    gl_FragData24 = temp44;
    vec4 temp45 = gl_FragData[25];
    gl_FragData25 = temp45;
    vec4 temp46 = gl_FragData[26];
    gl_FragData26 = temp46;
    vec4 temp47 = gl_FragData[27];
    gl_FragData27 = temp47;
    vec4 temp48 = gl_FragData[28];
    gl_FragData28 = temp48;
    vec4 temp49 = gl_FragData[29];
    gl_FragData29 = temp49;
    vec4 temp50 = gl_FragData[30];
    gl_FragData30 = temp50;
    vec4 temp51 = gl_FragData[31];
    gl_FragData31 = temp51;
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
