
Top IR:
; ModuleID = 'Top'

@BaseColor_shadow = internal global <4 x float> zeroinitializer
@bigColor4 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@d13 = external addrspace(2) constant float
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  %BaseColor__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  store <4 x float> %BaseColor__, <4 x float>* @BaseColor_shadow
  %color1 = load <4 x float>* @BaseColor_shadow
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue13, %ifmerge12, %then4, %entry
  %0 = load <4 x float> addrspace(2)* @bigColor4, !uniform !2
  %1 = load <4 x float>* %color
  %color2 = fadd <4 x float> %1, %0
  store <4 x float> %color2, <4 x float>* %color
  %2 = load <4 x float>* %color
  %3 = extractelement <4 x float> %2, i32 0
  %4 = load float addrspace(2)* @d4, !uniform !4
  %5 = fcmp olt float %3, %4
  br i1 %5, label %then, label %ifmerge6

then:                                             ; preds = %loop-header
  %6 = load <4 x float>* %color
  %7 = extractelement <4 x float> %6, i32 2
  %8 = fadd float %7, 2.000000e+00
  %9 = load <4 x float>* %color
  %color3 = insertelement <4 x float> %9, float %8, i32 2
  store <4 x float> %color3, <4 x float>* %color
  %10 = load <4 x float>* %color
  %11 = extractelement <4 x float> %10, i32 2
  %12 = load float addrspace(2)* @d4, !uniform !4
  %13 = fcmp olt float %11, %12
  br i1 %13, label %then4, label %ifmerge

then4:                                            ; preds = %then
  %14 = load <4 x float>* %color
  %15 = extractelement <4 x float> %14, i32 0
  %16 = fadd float %15, 1.000000e+00
  %17 = load <4 x float>* %color
  %color5 = insertelement <4 x float> %17, float %16, i32 0
  store <4 x float> %color5, <4 x float>* %color
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %then, %post-loop-continue
  br label %ifmerge6

ifmerge6:                                         ; preds = %loop-header, %ifmerge
  %18 = load <4 x float>* %color
  %19 = extractelement <4 x float> %18, i32 1
  %20 = load float addrspace(2)* @d4, !uniform !4
  %21 = fcmp olt float %19, %20
  br i1 %21, label %then7, label %else

then7:                                            ; preds = %ifmerge6
  %22 = load float addrspace(2)* @d4, !uniform !4
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 1
  %25 = fadd float %24, %22
  %26 = load <4 x float>* %color
  %color8 = insertelement <4 x float> %26, float %25, i32 1
  store <4 x float> %color8, <4 x float>* %color
  br label %ifmerge10

else:                                             ; preds = %ifmerge6
  %27 = load float addrspace(2)* @d4, !uniform !4
  %28 = load <4 x float>* %color
  %29 = extractelement <4 x float> %28, i32 0
  %30 = fadd float %29, %27
  %31 = load <4 x float>* %color
  %color9 = insertelement <4 x float> %31, float %30, i32 0
  store <4 x float> %color9, <4 x float>* %color
  br label %ifmerge10

ifmerge10:                                        ; preds = %else, %then7
  %32 = load <4 x float>* %color
  %33 = extractelement <4 x float> %32, i32 2
  %34 = load float addrspace(2)* @d4, !uniform !4
  %35 = fcmp olt float %33, %34
  %36 = xor i1 %35, true
  br i1 %36, label %then11, label %ifmerge12

then11:                                           ; preds = %ifmerge10
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge12

ifmerge12:                                        ; preds = %ifmerge10, %post-loop-break
  br label %loop-header

post-loop-continue13:                             ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %then11
  br label %loop-header14

loop-header14:                                    ; preds = %post-loop-continue36, %ifmerge35, %then26, %loop-merge
  %37 = load <4 x float>* %color
  %38 = extractelement <4 x float> %37, i32 3
  %39 = load float addrspace(2)* @d13, !uniform !5
  %40 = fcmp olt float %38, %39
  %41 = xor i1 %40, true
  br i1 %41, label %then15, label %ifmerge17

then15:                                           ; preds = %loop-header14
  br label %loop-merge37

post-loop-break16:                                ; No predecessors!
  br label %ifmerge17

ifmerge17:                                        ; preds = %loop-header14, %post-loop-break16
  %42 = load <4 x float>* %color
  %43 = extractelement <4 x float> %42, i32 2
  %44 = load float addrspace(2)* @d13, !uniform !5
  %45 = fcmp olt float %43, %44
  br i1 %45, label %then18, label %else20

then18:                                           ; preds = %ifmerge17
  %46 = load <4 x float>* %color
  %color19 = fadd <4 x float> %46, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color19, <4 x float>* %color
  br label %ifmerge22

else20:                                           ; preds = %ifmerge17
  %47 = load <4 x float>* %color
  %color21 = fsub <4 x float> %47, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color21, <4 x float>* %color
  br label %ifmerge22

ifmerge22:                                        ; preds = %else20, %then18
  %48 = load <4 x float> addrspace(2)* @bigColor4, !uniform !2
  %49 = load <4 x float>* %color
  %color23 = fadd <4 x float> %49, %48
  store <4 x float> %color23, <4 x float>* %color
  %50 = load <4 x float>* %color
  %51 = extractelement <4 x float> %50, i32 0
  %52 = load float addrspace(2)* @d4, !uniform !4
  %53 = fcmp olt float %51, %52
  br i1 %53, label %then24, label %ifmerge30

then24:                                           ; preds = %ifmerge22
  %54 = load <4 x float>* %color
  %55 = extractelement <4 x float> %54, i32 2
  %56 = fadd float %55, 2.000000e+00
  %57 = load <4 x float>* %color
  %color25 = insertelement <4 x float> %57, float %56, i32 2
  store <4 x float> %color25, <4 x float>* %color
  %58 = load <4 x float>* %color
  %59 = extractelement <4 x float> %58, i32 2
  %60 = load float addrspace(2)* @d4, !uniform !4
  %61 = fcmp olt float %59, %60
  br i1 %61, label %then26, label %ifmerge29

then26:                                           ; preds = %then24
  %62 = load <4 x float>* %color
  %63 = extractelement <4 x float> %62, i32 0
  %64 = fadd float %63, 1.000000e+00
  %65 = load <4 x float>* %color
  %color27 = insertelement <4 x float> %65, float %64, i32 0
  store <4 x float> %color27, <4 x float>* %color
  br label %loop-header14

post-loop-continue28:                             ; No predecessors!
  br label %ifmerge29

ifmerge29:                                        ; preds = %then24, %post-loop-continue28
  br label %ifmerge30

ifmerge30:                                        ; preds = %ifmerge22, %ifmerge29
  %66 = load <4 x float>* %color
  %67 = extractelement <4 x float> %66, i32 1
  %68 = load float addrspace(2)* @d4, !uniform !4
  %69 = fcmp olt float %67, %68
  br i1 %69, label %then31, label %else33

then31:                                           ; preds = %ifmerge30
  %70 = load float addrspace(2)* @d4, !uniform !4
  %71 = load <4 x float>* %color
  %72 = extractelement <4 x float> %71, i32 1
  %73 = fadd float %72, %70
  %74 = load <4 x float>* %color
  %color32 = insertelement <4 x float> %74, float %73, i32 1
  store <4 x float> %color32, <4 x float>* %color
  br label %ifmerge35

else33:                                           ; preds = %ifmerge30
  %75 = load float addrspace(2)* @d4, !uniform !4
  %76 = load <4 x float>* %color
  %77 = extractelement <4 x float> %76, i32 0
  %78 = fadd float %77, %75
  %79 = load <4 x float>* %color
  %color34 = insertelement <4 x float> %79, float %78, i32 0
  store <4 x float> %color34, <4 x float>* %color
  br label %ifmerge35

ifmerge35:                                        ; preds = %else33, %then31
  br label %loop-header14

post-loop-continue36:                             ; No predecessors!
  br label %loop-header14

loop-merge37:                                     ; preds = %then15
  %80 = load <4 x float>* %color
  %color38 = fadd <4 x float> %80, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color38, <4 x float>* %color
  %FragColor_shadow = load <4 x float>* %color
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge37
  %81 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %81), !output !6
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!inputs = !{!0}
!defaultUniforms = !{!2, !4, !4, !4, !4, !4, !4, !5, !5, !2, !4, !4, !4, !4, !4}
!outputs = !{!6}

!0 = metadata !{metadata !"BaseColor", i32 7, <4 x float>* @BaseColor_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024}
!2 = metadata !{metadata !"bigColor4", i32 12, <4 x float> addrspace(2)* @bigColor4, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 0}
!4 = metadata !{metadata !"d4", i32 12, float addrspace(2)* @d4, metadata !3}
!5 = metadata !{metadata !"d13", i32 12, float addrspace(2)* @d13, metadata !3}
!6 = metadata !{metadata !"gl_FragColor", i32 1, <4 x float>* @FragColor_shadow_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1025}

***Unsupported functionality: general-case cross edges (requires artificial loop)
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
ERROR: Not all shaders have valid object code.
#### END LINKER INFO LOG ####
