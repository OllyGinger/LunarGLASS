
Top IR:
; ModuleID = 'Top'

@bigColor4 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@d13 = external addrspace(2) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue12, %ifmerge11, %then3, %entry
  %0 = load <4 x float> addrspace(2)* @bigColor4
  %1 = load <4 x float>* %color
  %color1 = fadd <4 x float> %1, %0
  store <4 x float> %color1, <4 x float>* %color
  %2 = load <4 x float>* %color
  %3 = extractelement <4 x float> %2, i32 0
  %4 = load float addrspace(2)* @d4
  %5 = fcmp olt float %3, %4
  br i1 %5, label %then, label %ifmerge5

then:                                             ; preds = %loop-header
  %6 = load <4 x float>* %color
  %7 = extractelement <4 x float> %6, i32 2
  %8 = fadd float %7, 2.000000e+00
  %9 = load <4 x float>* %color
  %color2 = insertelement <4 x float> %9, float %8, i32 2
  store <4 x float> %color2, <4 x float>* %color
  %10 = load <4 x float>* %color
  %11 = extractelement <4 x float> %10, i32 2
  %12 = load float addrspace(2)* @d4
  %13 = fcmp olt float %11, %12
  br i1 %13, label %then3, label %ifmerge

then3:                                            ; preds = %then
  %14 = load <4 x float>* %color
  %15 = extractelement <4 x float> %14, i32 0
  %16 = fadd float %15, 1.000000e+00
  %17 = load <4 x float>* %color
  %color4 = insertelement <4 x float> %17, float %16, i32 0
  store <4 x float> %color4, <4 x float>* %color
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %then, %post-loop-continue
  br label %ifmerge5

ifmerge5:                                         ; preds = %loop-header, %ifmerge
  %18 = load <4 x float>* %color
  %19 = extractelement <4 x float> %18, i32 1
  %20 = load float addrspace(2)* @d4
  %21 = fcmp olt float %19, %20
  br i1 %21, label %then6, label %else

then6:                                            ; preds = %ifmerge5
  %22 = load float addrspace(2)* @d4
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 1
  %25 = fadd float %24, %22
  %26 = load <4 x float>* %color
  %color7 = insertelement <4 x float> %26, float %25, i32 1
  store <4 x float> %color7, <4 x float>* %color
  br label %ifmerge9

else:                                             ; preds = %ifmerge5
  %27 = load float addrspace(2)* @d4
  %28 = load <4 x float>* %color
  %29 = extractelement <4 x float> %28, i32 0
  %30 = fadd float %29, %27
  %31 = load <4 x float>* %color
  %color8 = insertelement <4 x float> %31, float %30, i32 0
  store <4 x float> %color8, <4 x float>* %color
  br label %ifmerge9

ifmerge9:                                         ; preds = %else, %then6
  %32 = load <4 x float>* %color
  %33 = extractelement <4 x float> %32, i32 2
  %34 = load float addrspace(2)* @d4
  %35 = fcmp olt float %33, %34
  %36 = xor i1 %35, true
  br i1 %36, label %then10, label %ifmerge11

then10:                                           ; preds = %ifmerge9
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge11

ifmerge11:                                        ; preds = %ifmerge9, %post-loop-break
  br label %loop-header

post-loop-continue12:                             ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %then10
  br label %loop-header13

loop-header13:                                    ; preds = %post-loop-continue35, %ifmerge34, %then25, %loop-merge
  %37 = load <4 x float>* %color
  %38 = extractelement <4 x float> %37, i32 3
  %39 = load float addrspace(2)* @d13
  %40 = fcmp olt float %38, %39
  %41 = xor i1 %40, true
  br i1 %41, label %then14, label %ifmerge16

then14:                                           ; preds = %loop-header13
  br label %loop-merge36

post-loop-break15:                                ; No predecessors!
  br label %ifmerge16

ifmerge16:                                        ; preds = %loop-header13, %post-loop-break15
  %42 = load <4 x float>* %color
  %43 = extractelement <4 x float> %42, i32 2
  %44 = load float addrspace(2)* @d13
  %45 = fcmp olt float %43, %44
  br i1 %45, label %then17, label %else19

then17:                                           ; preds = %ifmerge16
  %46 = load <4 x float>* %color
  %color18 = fadd <4 x float> %46, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color18, <4 x float>* %color
  br label %ifmerge21

else19:                                           ; preds = %ifmerge16
  %47 = load <4 x float>* %color
  %color20 = fsub <4 x float> %47, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color20, <4 x float>* %color
  br label %ifmerge21

ifmerge21:                                        ; preds = %else19, %then17
  %48 = load <4 x float> addrspace(2)* @bigColor4
  %49 = load <4 x float>* %color
  %color22 = fadd <4 x float> %49, %48
  store <4 x float> %color22, <4 x float>* %color
  %50 = load <4 x float>* %color
  %51 = extractelement <4 x float> %50, i32 0
  %52 = load float addrspace(2)* @d4
  %53 = fcmp olt float %51, %52
  br i1 %53, label %then23, label %ifmerge29

then23:                                           ; preds = %ifmerge21
  %54 = load <4 x float>* %color
  %55 = extractelement <4 x float> %54, i32 2
  %56 = fadd float %55, 2.000000e+00
  %57 = load <4 x float>* %color
  %color24 = insertelement <4 x float> %57, float %56, i32 2
  store <4 x float> %color24, <4 x float>* %color
  %58 = load <4 x float>* %color
  %59 = extractelement <4 x float> %58, i32 2
  %60 = load float addrspace(2)* @d4
  %61 = fcmp olt float %59, %60
  br i1 %61, label %then25, label %ifmerge28

then25:                                           ; preds = %then23
  %62 = load <4 x float>* %color
  %63 = extractelement <4 x float> %62, i32 0
  %64 = fadd float %63, 1.000000e+00
  %65 = load <4 x float>* %color
  %color26 = insertelement <4 x float> %65, float %64, i32 0
  store <4 x float> %color26, <4 x float>* %color
  br label %loop-header13

post-loop-continue27:                             ; No predecessors!
  br label %ifmerge28

ifmerge28:                                        ; preds = %then23, %post-loop-continue27
  br label %ifmerge29

ifmerge29:                                        ; preds = %ifmerge21, %ifmerge28
  %66 = load <4 x float>* %color
  %67 = extractelement <4 x float> %66, i32 1
  %68 = load float addrspace(2)* @d4
  %69 = fcmp olt float %67, %68
  br i1 %69, label %then30, label %else32

then30:                                           ; preds = %ifmerge29
  %70 = load float addrspace(2)* @d4
  %71 = load <4 x float>* %color
  %72 = extractelement <4 x float> %71, i32 1
  %73 = fadd float %72, %70
  %74 = load <4 x float>* %color
  %color31 = insertelement <4 x float> %74, float %73, i32 1
  store <4 x float> %color31, <4 x float>* %color
  br label %ifmerge34

else32:                                           ; preds = %ifmerge29
  %75 = load float addrspace(2)* @d4
  %76 = load <4 x float>* %color
  %77 = extractelement <4 x float> %76, i32 0
  %78 = fadd float %77, %75
  %79 = load <4 x float>* %color
  %color33 = insertelement <4 x float> %79, float %78, i32 0
  store <4 x float> %color33, <4 x float>* %color
  br label %ifmerge34

ifmerge34:                                        ; preds = %else32, %then30
  br label %loop-header13

post-loop-continue35:                             ; No predecessors!
  br label %loop-header13

loop-merge36:                                     ; preds = %then14
  %80 = load <4 x float>* %color
  %color37 = fadd <4 x float> %80, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color37, <4 x float>* %color
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge36
  %81 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %81)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

***Unsupported functionality: general-case cross edges (requires artificial loop)
