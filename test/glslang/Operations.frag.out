
Top IR:
; ModuleID = 'Top'

@uv4 = external addrspace(2) constant <4 x float>
@ui = external addrspace(2) constant i32
@uf = external addrspace(2) constant float
@ub41 = external addrspace(2) constant <4 x i1>
@ub42 = external addrspace(2) constant <4 x i1>
@FragColor_shadow = internal global <4 x float> zeroinitializer
@uiv4 = external addrspace(2) constant <4 x i32>
@ub = external addrspace(2) constant i1

define fastcc void @main() {
entry:
  %constructed73 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %ternary = alloca <4 x float>
  %f = alloca float
  %b = alloca i1
  %i = alloca i32
  %v = alloca <4 x float>
  %0 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !0
  %v1 = call <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float> %0)
  store <4 x float> %v1, <4 x float>* %v
  %1 = load <4 x float>* %v
  %2 = call <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float> %1)
  %3 = load <4 x float>* %v
  %v2 = fadd <4 x float> %3, %2
  store <4 x float> %v2, <4 x float>* %v
  %4 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %5 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %i3 = mul i32 %4, %5
  store i32 %i3, i32* %i
  %6 = load <4 x float>* %v
  %7 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %6)
  %8 = load <4 x float>* %v
  %v4 = fadd <4 x float> %8, %7
  store <4 x float> %v4, <4 x float>* %v
  %9 = load <4 x float>* %v
  %10 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %9)
  %11 = load <4 x float>* %v
  %v5 = fadd <4 x float> %11, %10
  store <4 x float> %v5, <4 x float>* %v
  %12 = load <4 x float>* %v
  %13 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %12)
  %14 = load <4 x float>* %v
  %v6 = fadd <4 x float> %14, %13
  store <4 x float> %v6, <4 x float>* %v
  %15 = load <4 x float>* %v
  %16 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %15)
  %17 = load <4 x float>* %v
  %v7 = fadd <4 x float> %17, %16
  store <4 x float> %v7, <4 x float>* %v
  %18 = load <4 x float>* %v
  %19 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %18)
  %20 = load <4 x float>* %v
  %v8 = fadd <4 x float> %20, %19
  store <4 x float> %v8, <4 x float>* %v
  %21 = load <4 x float>* %v
  %22 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %21)
  %23 = load <4 x float>* %v
  %v9 = fadd <4 x float> %23, %22
  store <4 x float> %v9, <4 x float>* %v
  %24 = load <4 x float>* %v
  %25 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %24)
  %26 = load <4 x float>* %v
  %v10 = fadd <4 x float> %26, %25
  store <4 x float> %v10, <4 x float>* %v
  %27 = load <4 x float>* %v
  %28 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %27)
  %29 = load <4 x float>* %v
  %v11 = fadd <4 x float> %29, %28
  store <4 x float> %v11, <4 x float>* %v
  %30 = load <4 x float>* %v
  %31 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %30)
  %32 = load <4 x float>* %v
  %v12 = fadd <4 x float> %32, %31
  store <4 x float> %v12, <4 x float>* %v
  %33 = load <4 x float>* %v
  %34 = call <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float> %33)
  %35 = load <4 x float>* %v
  %v13 = fadd <4 x float> %35, %34
  store <4 x float> %v13, <4 x float>* %v
  %36 = load <4 x float>* %v
  %37 = call <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float> %36)
  %38 = load <4 x float>* %v
  %v14 = fadd <4 x float> %38, %37
  store <4 x float> %v14, <4 x float>* %v
  %39 = load <4 x float>* %v
  %40 = call <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float> %39)
  %41 = load <4 x float>* %v
  %v15 = fadd <4 x float> %41, %40
  store <4 x float> %v15, <4 x float>* %v
  %42 = load <4 x float>* %v
  %43 = load <4 x float>* %v
  %44 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %42, <4 x float> %43)
  %45 = load <4 x float>* %v
  %v16 = fadd <4 x float> %45, %44
  store <4 x float> %v16, <4 x float>* %v
  %46 = load <4 x float>* %v
  %47 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %46)
  %48 = load <4 x float>* %v
  %v17 = fadd <4 x float> %48, %47
  store <4 x float> %v17, <4 x float>* %v
  %49 = load <4 x float>* %v
  %50 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %49)
  %51 = load <4 x float>* %v
  %v18 = fadd <4 x float> %51, %50
  store <4 x float> %v18, <4 x float>* %v
  %52 = load <4 x float>* %v
  %53 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %52)
  %54 = load <4 x float>* %v
  %v19 = fadd <4 x float> %54, %53
  store <4 x float> %v19, <4 x float>* %v
  %55 = load <4 x float>* %v
  %56 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %55)
  %57 = load <4 x float>* %v
  %v20 = fadd <4 x float> %57, %56
  store <4 x float> %v20, <4 x float>* %v
  %58 = load <4 x float>* %v
  %59 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %58)
  %60 = load <4 x float>* %v
  %v21 = fadd <4 x float> %60, %59
  store <4 x float> %v21, <4 x float>* %v
  %61 = load <4 x float>* %v
  %62 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %61)
  %63 = load <4 x float>* %v
  %v22 = fadd <4 x float> %63, %62
  store <4 x float> %v22, <4 x float>* %v
  %64 = load <4 x float>* %v
  %65 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %64)
  %66 = load <4 x float>* %v
  %v23 = fadd <4 x float> %66, %65
  store <4 x float> %v23, <4 x float>* %v
  %67 = load <4 x float>* %v
  %68 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %67)
  %69 = load <4 x float>* %v
  %v24 = fadd <4 x float> %69, %68
  store <4 x float> %v24, <4 x float>* %v
  %70 = load <4 x float>* %v
  %71 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %70)
  %72 = load <4 x float>* %v
  %v25 = fadd <4 x float> %72, %71
  store <4 x float> %v25, <4 x float>* %v
  %73 = load <4 x float>* %v
  %74 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %73)
  %75 = load <4 x float>* %v
  %v26 = fadd <4 x float> %75, %74
  store <4 x float> %v26, <4 x float>* %v
  %76 = load <4 x float>* %v
  %77 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %76)
  %78 = load <4 x float>* %v
  %v27 = fadd <4 x float> %78, %77
  store <4 x float> %v27, <4 x float>* %v
  %79 = load <4 x float>* %v
  %80 = load <4 x float>* %v
  %81 = frem <4 x float> %79, %80
  %82 = load <4 x float>* %v
  %v28 = fadd <4 x float> %82, %81
  store <4 x float> %v28, <4 x float>* %v
  %83 = load <4 x float>* %v
  %84 = load <4 x float>* %v
  %85 = extractelement <4 x float> %84, i32 0
  %86 = insertelement <4 x float> undef, float %85, i32 0
  %87 = insertelement <4 x float> %86, float %85, i32 1
  %88 = insertelement <4 x float> %87, float %85, i32 2
  %89 = insertelement <4 x float> %88, float %85, i32 3
  %90 = frem <4 x float> %83, %89
  %91 = load <4 x float>* %v
  %v29 = fadd <4 x float> %91, %90
  store <4 x float> %v29, <4 x float>* %v
  %92 = load <4 x float>* %v
  %93 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !0
  %94 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %92, <4 x float> %93)
  %95 = load <4 x float>* %v
  %v30 = fadd <4 x float> %95, %94
  store <4 x float> %v30, <4 x float>* %v
  %96 = load <4 x float>* %v
  %97 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !0
  %98 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %96, <4 x float> %97)
  %99 = load <4 x float>* %v
  %v31 = fadd <4 x float> %99, %98
  store <4 x float> %v31, <4 x float>* %v
  %100 = load <4 x float>* %v
  %101 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !0
  %102 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !0
  %103 = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %100, <4 x float> %101, <4 x float> %102)
  %104 = load <4 x float>* %v
  %v32 = fadd <4 x float> %104, %103
  store <4 x float> %v32, <4 x float>* %v
  %105 = load <4 x float>* %v
  %106 = load <4 x float>* %v
  %107 = load <4 x float>* %v
  %108 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %105, <4 x float> %106, <4 x float> %107)
  %109 = load <4 x float>* %v
  %v33 = fadd <4 x float> %109, %108
  store <4 x float> %v33, <4 x float>* %v
  %110 = load <4 x float>* %v
  %111 = load <4 x float>* %v
  %112 = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %110, <4 x float> %111)
  %113 = load <4 x float>* %v
  %v34 = fadd <4 x float> %113, %112
  store <4 x float> %v34, <4 x float>* %v
  %114 = load <4 x float>* %v
  %115 = load <4 x float>* %v
  %116 = load <4 x float>* %v
  %117 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %114, <4 x float> %115, <4 x float> %116)
  %118 = load <4 x float>* %v
  %v35 = fadd <4 x float> %118, %117
  store <4 x float> %v35, <4 x float>* %v
  %119 = load <4 x float>* %v
  %120 = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %119)
  %121 = load <4 x float>* %v
  %v36 = fadd <4 x float> %121, %120
  store <4 x float> %v36, <4 x float>* %v
  %122 = load <4 x float>* %v
  %123 = load <4 x float>* %v
  %124 = load <4 x float>* %v
  %125 = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %122, <4 x float> %123, <4 x float> %124)
  %126 = load <4 x float>* %v
  %v37 = fadd <4 x float> %126, %125
  store <4 x float> %v37, <4 x float>* %v
  %127 = load <4 x float>* %v
  %128 = load <4 x float>* %v
  %129 = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %127, <4 x float> %128)
  %130 = load <4 x float>* %v
  %v38 = fadd <4 x float> %130, %129
  store <4 x float> %v38, <4 x float>* %v
  %131 = load <4 x float>* %v
  %132 = load <4 x float>* %v
  %133 = load float addrspace(2)* @uf, !gla.uniform !3
  %134 = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %131, <4 x float> %132, float %133)
  %135 = load <4 x float>* %v
  %v39 = fadd <4 x float> %135, %134
  store <4 x float> %v39, <4 x float>* %v
  %136 = load <4 x float>* %v
  %137 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %136)
  %138 = load <4 x float>* %v
  %v40 = fadd <4 x float> %138, %137
  store <4 x float> %v40, <4 x float>* %v
  %139 = load <4 x float>* %v
  %140 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %139)
  %141 = load <4 x float>* %v
  %v41 = fadd <4 x float> %141, %140
  store <4 x float> %v41, <4 x float>* %v
  %142 = load <4 x float>* %v
  %143 = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %142)
  %144 = load <4 x float>* %v
  %v42 = fadd <4 x float> %144, %143
  store <4 x float> %v42, <4 x float>* %v
  %145 = load <4 x float>* %v
  %146 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !0
  %147 = fcmp olt <4 x float> %145, %146
  %b43 = call i1 @llvm.gla.any.v4i1(<4 x i1> %147)
  store i1 %b43, i1* %b
  %148 = load i1* %b
  %149 = load <4 x float>* %v
  %150 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !0
  %151 = fcmp ole <4 x float> %149, %150
  %152 = call i1 @llvm.gla.any.v4i1(<4 x i1> %151)
  %b44 = and i1 %148, %152
  store i1 %b44, i1* %b
  %153 = load i1* %b
  %154 = load <4 x float>* %v
  %155 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !0
  %156 = fcmp ogt <4 x float> %154, %155
  %157 = call i1 @llvm.gla.any.v4i1(<4 x i1> %156)
  %b45 = and i1 %153, %157
  store i1 %b45, i1* %b
  %158 = load i1* %b
  %159 = load <4 x float>* %v
  %160 = load <4 x float> addrspace(2)* @uv4, !gla.uniform !0
  %161 = fcmp oge <4 x float> %159, %160
  %162 = call i1 @llvm.gla.any.v4i1(<4 x i1> %161)
  %b46 = and i1 %158, %162
  store i1 %b46, i1* %b
  %163 = load i1* %b
  %164 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !4
  %165 = load <4 x i1> addrspace(2)* @ub42, !gla.uniform !5
  %166 = icmp eq <4 x i1> %164, %165
  %167 = call i1 @llvm.gla.any.v4i1(<4 x i1> %166)
  %b47 = and i1 %163, %167
  store i1 %b47, i1* %b
  %168 = load i1* %b
  %169 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !4
  %170 = load <4 x i1> addrspace(2)* @ub42, !gla.uniform !5
  %171 = icmp ne <4 x i1> %169, %170
  %172 = call i1 @llvm.gla.any.v4i1(<4 x i1> %171)
  %b48 = and i1 %168, %172
  store i1 %b48, i1* %b
  %173 = load i1* %b
  %174 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !4
  %175 = call i1 @llvm.gla.any.v4i1(<4 x i1> %174)
  %b49 = and i1 %173, %175
  store i1 %b49, i1* %b
  %176 = load i1* %b
  %177 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !4
  %178 = call i1 @llvm.gla.all.v4i1(<4 x i1> %177)
  %b50 = and i1 %176, %178
  store i1 %b50, i1* %b
  %179 = load i1* %b
  %180 = load <4 x i1> addrspace(2)* @ub41, !gla.uniform !4
  %181 = xor <4 x i1> %180, <i1 true, i1 true, i1 true, i1 true>
  %182 = call i1 @llvm.gla.any.v4i1(<4 x i1> %181)
  %b51 = and i1 %179, %182
  store i1 %b51, i1* %b
  %183 = load i32* %i
  %184 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %185 = add i32 %183, %184
  %186 = load i32* %i
  %187 = mul i32 %185, %186
  %188 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %189 = sub i32 %187, %188
  %190 = load i32* %i
  %i52 = sdiv i32 %189, %190
  store i32 %i52, i32* %i
  %191 = load i32* %i
  %192 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %i53 = srem i32 %191, %192
  store i32 %i53, i32* %i
  %193 = load i32* %i
  %194 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %195 = icmp eq i32 %193, %194
  %196 = load i32* %i
  %197 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %198 = icmp ne i32 %196, %197
  %199 = load i32* %i
  %200 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %201 = icmp eq i32 %199, %200
  %202 = and i1 %198, %201
  %203 = load i32* %i
  %204 = icmp ne i32 %203, 2
  %205 = xor i1 %202, %204
  %206 = or i1 %195, %205
  br i1 %206, label %then, label %ifmerge

then:                                             ; preds = %entry
  %207 = load i32* %i
  %i54 = add i32 %207, 1
  store i32 %i54, i32* %i
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %then
  %208 = load float addrspace(2)* @uf, !gla.uniform !3
  %209 = load float addrspace(2)* @uf, !gla.uniform !3
  %210 = fadd float %208, %209
  %211 = load float addrspace(2)* @uf, !gla.uniform !3
  %212 = fmul float %210, %211
  %213 = load float addrspace(2)* @uf, !gla.uniform !3
  %214 = fsub float %212, %213
  %215 = load float addrspace(2)* @uf, !gla.uniform !3
  %f55 = fdiv float %214, %215
  store float %f55, float* %f
  %216 = load <4 x float>* %v
  %217 = call float @llvm.gla.fLength.f32.v4f32(<4 x float> %216)
  %218 = load float* %f
  %f56 = fadd float %218, %217
  store float %f56, float* %f
  %219 = load <4 x float>* %v
  %220 = load <4 x float>* %v
  %221 = call float @llvm.gla.fDistance.f32.v4f32.v4f32(<4 x float> %219, <4 x float> %220)
  %222 = load float* %f
  %f57 = fadd float %222, %221
  store float %f57, float* %f
  %223 = load <4 x float>* %v
  %224 = load <4 x float>* %v
  %225 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %223, <4 x float> %224)
  %226 = load float* %f
  %f58 = fadd float %226, %225
  store float %f58, float* %f
  %227 = load float* %f
  %228 = load float addrspace(2)* @uf, !gla.uniform !3
  %229 = fmul float %227, %228
  %230 = load float* %f
  %f59 = fadd float %230, %229
  store float %f59, float* %f
  %231 = load <4 x float>* %v
  %232 = extractelement <4 x float> %231, i32 0
  %233 = insertelement <3 x float> undef, float %232, i32 0
  %234 = extractelement <4 x float> %231, i32 1
  %235 = insertelement <3 x float> %233, float %234, i32 1
  %236 = extractelement <4 x float> %231, i32 2
  %237 = insertelement <3 x float> %235, float %236, i32 2
  %238 = load <4 x float>* %v
  %239 = extractelement <4 x float> %238, i32 0
  %240 = insertelement <3 x float> undef, float %239, i32 0
  %241 = extractelement <4 x float> %238, i32 1
  %242 = insertelement <3 x float> %240, float %241, i32 1
  %243 = extractelement <4 x float> %238, i32 2
  %244 = insertelement <3 x float> %242, float %243, i32 2
  %245 = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %237, <3 x float> %244)
  %246 = extractelement <3 x float> %245, i32 0
  %247 = load float* %f
  %f60 = fadd float %247, %246
  store float %f60, float* %f
  %248 = load float* %f
  %249 = load float addrspace(2)* @uf, !gla.uniform !3
  %250 = fcmp oeq float %248, %249
  %251 = load float* %f
  %252 = load float addrspace(2)* @uf, !gla.uniform !3
  %253 = fcmp one float %251, %252
  %254 = load float* %f
  %255 = fcmp one float %254, 2.000000e+00
  %256 = and i1 %253, %255
  %257 = or i1 %250, %256
  br i1 %257, label %then61, label %ifmerge63

then61:                                           ; preds = %ifmerge
  %258 = load float* %f
  %f62 = fadd float %258, 1.000000e+00
  store float %f62, float* %f
  br label %ifmerge63

ifmerge63:                                        ; preds = %ifmerge, %then61
  %259 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %260 = load i32* %i
  %i64 = and i32 %260, %259
  store i32 %i64, i32* %i
  %261 = load i32* %i
  %i65 = or i32 %261, 66
  store i32 %i65, i32* %i
  %262 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %263 = load i32* %i
  %i66 = xor i32 %263, %262
  store i32 %i66, i32* %i
  %264 = load i32* %i
  %i67 = srem i32 %264, 17
  store i32 %i67, i32* %i
  %265 = load i32* %i
  %i68 = ashr i32 %265, 2
  store i32 %i68, i32* %i
  %266 = load i32 addrspace(2)* @ui, !gla.uniform !2
  %267 = load i32* %i
  %i69 = shl i32 %267, %266
  store i32 %i69, i32* %i
  %268 = load i32* %i
  %i70 = xor i32 %268, -1
  store i32 %i70, i32* %i
  %269 = load i1* %b
  %b71 = xor i1 %269, true
  store i1 %b71, i1* %b
  %270 = load i1* %b
  br i1 %270, label %then72, label %else

then72:                                           ; preds = %ifmerge63
  %271 = load i32* %i
  %272 = sitofp i32 %271 to float
  %273 = load <4 x float>* %constructed
  %274 = insertelement <4 x float> undef, float %272, i32 0
  %275 = insertelement <4 x float> %274, float %272, i32 1
  %276 = insertelement <4 x float> %275, float %272, i32 2
  %277 = insertelement <4 x float> %276, float %272, i32 3
  %278 = load float* %f
  %279 = load <4 x float>* %constructed73
  %280 = insertelement <4 x float> undef, float %278, i32 0
  %281 = insertelement <4 x float> %280, float %278, i32 1
  %282 = insertelement <4 x float> %281, float %278, i32 2
  %283 = insertelement <4 x float> %282, float %278, i32 3
  %284 = fadd <4 x float> %277, %283
  %285 = load <4 x float>* %v
  %ternary74 = fadd <4 x float> %284, %285
  store <4 x float> %ternary74, <4 x float>* %ternary
  br label %ifmerge76

else:                                             ; preds = %ifmerge63
  %ternary75 = load <4 x float>* %v
  store <4 x float> %ternary75, <4 x float>* %ternary
  br label %ifmerge76

ifmerge76:                                        ; preds = %else, %then72
  %FragColor_shadow = load <4 x float>* %ternary
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge76
  %286 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %286), !gla.output !8
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fRadians.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDegrees.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare float @llvm.gla.fLength.f32.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fDistance.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.uniforms = !{!0, !2, !3, !4, !5, !6, !7}
!gla.outputs = !{!8}

!0 = metadata !{metadata !"uv4", i32 12, <4 x float>* @uv4_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"ui", i32 12, i32* @ui_typeProxy, metadata !1}
!3 = metadata !{metadata !"uf", i32 12, float* @uf_typeProxy, metadata !1}
!4 = metadata !{metadata !"ub41", i32 12, <4 x i1>* @ub41_typeProxy, metadata !1}
!5 = metadata !{metadata !"ub42", i32 12, <4 x i1>* @ub42_typeProxy, metadata !1}
!6 = metadata !{metadata !"uiv4", i32 12, <4 x i32>* @uiv4_typeProxy, metadata !1}
!7 = metadata !{metadata !"ub", i32 12, i1* @ub_typeProxy, metadata !1}
!8 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}


Bottom IR:
; ModuleID = 'Top'

@uv4 = external addrspace(2) constant <4 x float>
@ui = external addrspace(2) constant i32
@uf = external addrspace(2) constant float
@ub41 = external addrspace(2) constant <4 x i1>
@ub42 = external addrspace(2) constant <4 x i1>

define fastcc void @main() {
entry:
  %0 = load <4 x float> addrspace(2)* @uv4, align 16, !gla.uniform !0
  %1 = fmul <4 x float> %0, <float 0x3F91DF46A0000000, float 0x3F91DF46A0000000, float 0x3F91DF46A0000000, float 0x3F91DF46A0000000>
  %2 = fmul <4 x float> %1, <float 0x404CA5DC20000000, float 0x404CA5DC20000000, float 0x404CA5DC20000000, float 0x404CA5DC20000000>
  %v2 = fadd <4 x float> %1, %2
  %3 = load i32 addrspace(2)* @ui, align 4, !gla.uniform !2
  %i3 = mul i32 %3, %3
  %4 = call <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float> %v2)
  %v4 = fadd <4 x float> %4, %v2
  %5 = call <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float> %v4)
  %v5 = fadd <4 x float> %5, %v4
  %6 = call <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float> %v5)
  %v6 = fadd <4 x float> %6, %v5
  %7 = call <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float> %v6)
  %v7 = fadd <4 x float> %7, %v6
  %8 = call <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float> %v7)
  %v8 = fadd <4 x float> %8, %v7
  %9 = call <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float> %v8)
  %v9 = fadd <4 x float> %9, %v8
  %10 = call <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float> %v9)
  %v10 = fadd <4 x float> %10, %v9
  %11 = call <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float> %v10)
  %v11 = fadd <4 x float> %11, %v10
  %12 = call <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float> %v11)
  %v12 = fadd <4 x float> %12, %v11
  %13 = call <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float> %v12)
  %v13 = fadd <4 x float> %13, %v12
  %14 = call <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float> %v13)
  %v14 = fadd <4 x float> %14, %v13
  %15 = call <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float> %v14)
  %v15 = fadd <4 x float> %15, %v14
  %16 = call <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float> %v15, <4 x float> %v15)
  %v16 = fadd <4 x float> %16, %v15
  %17 = call <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float> %v16)
  %v17 = fadd <4 x float> %17, %v16
  %18 = call <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float> %v17)
  %v18 = fadd <4 x float> %18, %v17
  %19 = call <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float> %v18)
  %v19 = fadd <4 x float> %19, %v18
  %20 = call <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float> %v19)
  %v20 = fadd <4 x float> %20, %v19
  %21 = call <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float> %v20)
  %v21 = fadd <4 x float> %21, %v20
  %22 = call <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float> %v21)
  %v22 = fadd <4 x float> %22, %v21
  %23 = call <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float> %v22)
  %v23 = fadd <4 x float> %23, %v22
  %24 = call <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float> %v23)
  %v24 = fadd <4 x float> %24, %v23
  %25 = call <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float> %v24)
  %v25 = fadd <4 x float> %25, %v24
  %26 = call <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float> %v25)
  %v26 = fadd <4 x float> %26, %v25
  %27 = call <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float> %v26)
  %v27 = fadd <4 x float> %27, %v26
  %28 = frem <4 x float> %v27, %v27
  %v28 = fadd <4 x float> %28, %v27
  %29 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %v28, <4 x i32> zeroinitializer)
  %30 = frem <4 x float> %v28, %29
  %v29 = fadd <4 x float> %30, %v28
  %31 = call <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float> %v29, <4 x float> %0)
  %v30 = fadd <4 x float> %31, %v29
  %32 = call <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float> %v30, <4 x float> %0)
  %v31 = fadd <4 x float> %32, %v30
  %33 = call <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float> %v31, <4 x float> %0, <4 x float> %0)
  %v32 = fadd <4 x float> %33, %v31
  %34 = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %v32, <4 x float> %v32, <4 x float> %v32)
  %v33 = fadd <4 x float> %34, %v32
  %35 = call <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float> %v33, <4 x float> %v33)
  %v34 = fadd <4 x float> %35, %v33
  %36 = call <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float> %v34, <4 x float> %v34, <4 x float> %v34)
  %v35 = fadd <4 x float> %36, %v34
  %37 = call <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float> %v35)
  %v36 = fadd <4 x float> %37, %v35
  %38 = call <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float> %v36, <4 x float> %v36, <4 x float> %v36)
  %v37 = fadd <4 x float> %38, %v36
  %39 = call <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float> %v37, <4 x float> %v37)
  %v38 = fadd <4 x float> %39, %v37
  %40 = load float addrspace(2)* @uf, align 4, !gla.uniform !3
  %41 = call <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float> %v38, <4 x float> %v38, float %40)
  %v39 = fadd <4 x float> %v38, %41
  %42 = call <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float> %v39)
  %v40 = fadd <4 x float> %v39, %42
  %43 = call <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float> %v40)
  %v41 = fadd <4 x float> %v40, %43
  %44 = call <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float> %v41)
  %v42 = fadd <4 x float> %v41, %44
  %45 = call <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32.v3i32(<4 x float> %v42, <3 x i32> <i32 0, i32 1, i32 2>)
  %46 = fcmp olt <4 x float> %v42, %0
  %b43 = call i1 @llvm.gla.any.v4i1(<4 x i1> %46)
  %47 = fcmp ole <4 x float> %v42, %0
  %48 = call i1 @llvm.gla.any.v4i1(<4 x i1> %47)
  %b44 = and i1 %b43, %48
  %49 = fcmp ogt <4 x float> %v42, %0
  %50 = call i1 @llvm.gla.any.v4i1(<4 x i1> %49)
  %b45 = and i1 %b44, %50
  %51 = fcmp oge <4 x float> %v42, %0
  %52 = call i1 @llvm.gla.any.v4i1(<4 x i1> %51)
  %b46 = and i1 %b45, %52
  %53 = load <4 x i1> addrspace(2)* @ub41, align 4, !gla.uniform !4
  %54 = load <4 x i1> addrspace(2)* @ub42, align 4, !gla.uniform !5
  %55 = icmp eq <4 x i1> %53, %54
  %56 = call i1 @llvm.gla.any.v4i1(<4 x i1> %55)
  %b47 = and i1 %b46, %56
  %57 = icmp ne <4 x i1> %53, %54
  %58 = call i1 @llvm.gla.any.v4i1(<4 x i1> %57)
  %b48 = and i1 %b47, %58
  %59 = call i1 @llvm.gla.any.v4i1(<4 x i1> %53)
  %b49 = and i1 %b48, %59
  %60 = call i1 @llvm.gla.all.v4i1(<4 x i1> %53)
  %b50 = and i1 %b49, %60
  %61 = xor <4 x i1> %53, <i1 true, i1 true, i1 true, i1 true>
  %62 = call i1 @llvm.gla.any.v4i1(<4 x i1> %61)
  %b51 = and i1 %b50, %62
  %63 = add i32 %i3, %3
  %64 = mul i32 %63, %i3
  %65 = sub i32 %64, %3
  %i52 = sdiv i32 %65, %i3
  %i53 = srem i32 %i52, %3
  %66 = fadd float %40, %40
  %67 = fmul float %40, %66
  %68 = fsub float %67, %40
  %f55 = fdiv float %68, %40
  %69 = call float @llvm.gla.fLength.f32.v4f32(<4 x float> %v42)
  %f56 = fadd float %f55, %69
  %70 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v42, <4 x float> %v42)
  %f58 = fadd float %f56, %70
  %71 = fmul float %40, %f58
  %f59 = fadd float %f58, %71
  %72 = call <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float> %45, <3 x float> %45)
  %73 = extractelement <3 x float> %72, i32 0
  %f60 = fadd float %73, %f59
  %74 = fcmp oeq float %f60, %40
  %75 = fcmp one float %f60, %40
  %76 = fcmp one float %f60, 2.000000e+00
  %77 = and i1 %75, %76
  %78 = or i1 %74, %77
  %f62 = fadd float %f60, 1.000000e+00
  %select = select i1 %78, float %f62, float %f60
  %79 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %select, <4 x i32> zeroinitializer)
  %i54 = add i32 %i53, 1
  %80 = icmp eq i32 %i53, 2
  %i.0 = select i1 %80, i32 0, i32 %i54
  %i64 = and i32 %3, %i.0
  %i65 = or i32 %i64, 66
  %i66 = xor i32 %i65, %3
  %i67 = srem i32 %i66, 17
  %i68 = ashr i32 %i67, 2
  %i69 = shl i32 %i68, %3
  %i70 = xor i32 %i69, -1
  %81 = sitofp i32 %i70 to float
  %82 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %81, <4 x i32> zeroinitializer)
  %83 = fadd <4 x float> %79, %82
  %ternary74 = fadd <4 x float> %v42, %83
  %select78 = select i1 %b51, <4 x float> %v42, <4 x float> %ternary74
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %select78), !gla.output !8
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fSin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsin.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcos.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtan.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAsinh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAcosh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAtanh.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fPow.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fExp2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fLog2.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fInverseSqrt.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fAbs.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSign.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFloor.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fCeiling.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFraction.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMin.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMax.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fClamp.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fStep.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fSmoothStep.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fNormalize.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFaceForward.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fReflect.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fRefract.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare <4 x float> @llvm.gla.fDFdx.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fDFdy.v4f32.v4f32(<4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fFilterWidth.v4f32.v4f32(<4 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare float @llvm.gla.fLength.f32.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fCross.v3f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) nounwind readnone

declare <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32.v3i32(<4 x float>, <3 x i32>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

!gla.uniforms = !{!0, !2, !3, !4, !5, !6, !7}
!gla.outputs = !{!8}

!0 = metadata !{metadata !"uv4", i32 12, <4 x float>* @uv4_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"ui", i32 12, i32* @ui_typeProxy, metadata !1}
!3 = metadata !{metadata !"uf", i32 12, float* @uf_typeProxy, metadata !1}
!4 = metadata !{metadata !"ub41", i32 12, <4 x i1>* @ub41_typeProxy, metadata !1}
!5 = metadata !{metadata !"ub42", i32 12, <4 x i1>* @ub42_typeProxy, metadata !1}
!6 = metadata !{metadata !"uiv4", i32 12, <4 x i32>* @uiv4_typeProxy, metadata !1}
!7 = metadata !{metadata !"ub", i32 12, i1* @ub_typeProxy, metadata !1}
!8 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 130
// LunarGOO output (r722)
uniform vec4 uv4;
uniform int ui;
uniform float uf;
uniform bvec4 ub41;
uniform bvec4 ub42;
uniform ivec4 uiv4;
uniform bool ub;
const vec4 const22 = vec4(0.0174533);
const vec4 const24 = vec4(57.2958);
const float const151 = 2.0;
const float const155 = 1.0;
const int const159i_1 = 1;
const int const161i_2 = 2;
const int const163i_0 = 0;
const int const166i_66 = 66;
const int const169i_17 = 17;

void main()
{
    vec4 temp21 = uv4 * const22;
    vec4 temp23 = temp21 * const24;
    vec4 temp25 = temp21 + temp23;
    int temp26 = ui * ui;
    vec4 temp27 = sin(temp25);
    vec4 temp28 = temp27 + temp25;
    vec4 temp29 = cos(temp28);
    vec4 temp30 = temp29 + temp28;
    vec4 temp31 = tan(temp30);
    vec4 temp32 = temp31 + temp30;
    vec4 temp33 = asin(temp32);
    vec4 temp34 = temp33 + temp32;
    vec4 temp35 = acos(temp34);
    vec4 temp36 = temp35 + temp34;
    vec4 temp37 = atan(temp36);
    vec4 temp38 = temp37 + temp36;
    vec4 temp39 = sinh(temp38);
    vec4 temp40 = temp39 + temp38;
    vec4 temp41 = cosh(temp40);
    vec4 temp42 = temp41 + temp40;
    vec4 temp43 = tanh(temp42);
    vec4 temp44 = temp43 + temp42;
    vec4 temp45 = asinh(temp44);
    vec4 temp46 = temp45 + temp44;
    vec4 temp47 = acosh(temp46);
    vec4 temp48 = temp47 + temp46;
    vec4 temp49 = atanh(temp48);
    vec4 temp50 = temp49 + temp48;
    vec4 temp51 = pow(temp50, temp50);
    vec4 temp52 = temp51 + temp50;
    vec4 temp53 = exp(temp52);
    vec4 temp54 = temp53 + temp52;
    vec4 temp55 = log(temp54);
    vec4 temp56 = temp55 + temp54;
    vec4 temp57 = exp2(temp56);
    vec4 temp58 = temp57 + temp56;
    vec4 temp59 = log2(temp58);
    vec4 temp60 = temp59 + temp58;
    vec4 temp61 = sqrt(temp60);
    vec4 temp62 = temp61 + temp60;
    vec4 temp63 = inversesqrt(temp62);
    vec4 temp64 = temp63 + temp62;
    vec4 temp65 = abs(temp64);
    vec4 temp66 = temp65 + temp64;
    vec4 temp67 = sign(temp66);
    vec4 temp68 = temp67 + temp66;
    vec4 temp69 = floor(temp68);
    vec4 temp70 = temp69 + temp68;
    vec4 temp71 = ceil(temp70);
    vec4 temp72 = temp71 + temp70;
    vec4 temp73 = fract(temp72);
    vec4 temp74 = temp73 + temp72;
    vec4 temp75 = mod(temp74, temp74);
    vec4 temp76 = temp75 + temp74;
    vec4 temp77 = temp76.xxxx;
    vec4 temp78 = mod(temp76, temp77);
    vec4 temp79 = temp78 + temp76;
    vec4 temp80 = min(temp79, uv4);
    vec4 temp81 = temp80 + temp79;
    vec4 temp82 = max(temp81, uv4);
    vec4 temp83 = temp82 + temp81;
    vec4 temp84 = clamp(temp83, uv4, uv4);
    vec4 temp85 = temp84 + temp83;
    vec4 temp86 = mix(temp85, temp85, temp85);
    vec4 temp87 = temp86 + temp85;
    vec4 temp88 = step(temp87, temp87);
    vec4 temp89 = temp88 + temp87;
    vec4 temp90 = smoothstep(temp89, temp89, temp89);
    vec4 temp91 = temp90 + temp89;
    vec4 temp92 = normalize(temp91);
    vec4 temp93 = temp92 + temp91;
    vec4 temp94 = faceforward(temp93, temp93, temp93);
    vec4 temp95 = temp94 + temp93;
    vec4 temp96 = reflect(temp95, temp95);
    vec4 temp97 = temp96 + temp95;
    vec4 temp98 = refract(temp97, temp97, uf);
    vec4 temp99 = temp97 + temp98;
    vec4 temp100 = dFdx(temp99);
    vec4 temp101 = temp99 + temp100;
    vec4 temp102 = dFdy(temp101);
    vec4 temp103 = temp101 + temp102;
    vec4 temp104 = fwidth(temp103);
    vec4 temp105 = temp103 + temp104;
    vec3 temp106 = vec3(temp105);
    bvec4 temp107 = lessThan(temp105, uv4);
    bool temp108 = any(temp107);
    bvec4 temp109 = lessThanEqual(temp105, uv4);
    bool temp110 = any(temp109);
    bool temp111 = temp108 && temp110;
    bvec4 temp112 = greaterThan(temp105, uv4);
    bool temp113 = any(temp112);
    bool temp114 = temp111 && temp113;
    bvec4 temp115 = greaterThanEqual(temp105, uv4);
    bool temp116 = any(temp115);
    bool temp117 = temp114 && temp116;
    bvec4 temp118 = equal(ub41, ub42);
    bool temp119 = any(temp118);
    bool temp120 = temp117 && temp119;
    bvec4 temp121 = notEqual(ub41, ub42);
    bool temp122 = any(temp121);
    bool temp123 = temp120 && temp122;
    bool temp124 = any(ub41);
    bool temp125 = temp123 && temp124;
    bool temp126 = all(ub41);
    bool temp127 = temp125 && temp126;
    bvec4 temp128 = not(ub41);
    bool temp129 = any(temp128);
    bool temp130 = temp127 && temp129;
    int temp131 = temp26 + ui;
    int temp132 = temp131 * temp26;
    int temp133 = temp132 - ui;
    int temp134 = temp133 / temp26;
    int temp135 = temp134 % ui;
    float temp136 = uf + uf;
    float temp137 = uf * temp136;
    float temp138 = temp137 - uf;
    float temp139 = temp138 / uf;
    float temp140 = length(temp105);
    float temp141 = temp139 + temp140;
    float temp142 = dot(temp105, temp105);
    float temp143 = temp141 + temp142;
    float temp144 = uf * temp143;
    float temp145 = temp143 + temp144;
    vec3 temp146 = cross(temp106, temp106);
    float temp147 = temp146.x + temp145;
    bool temp148 = temp147 == uf;
    bool temp149 = temp147 != uf;
    bool temp150 = temp147 != const151;
    bool temp152 = temp149 && temp150;
    bool temp153 = temp148 || temp152;
    float temp154 = temp147 + const155;
    float select = temp153 ? temp154 : temp147;
    vec4 temp157 = vec4(select);
    int temp158 = temp135 + const159i_1;
    bool temp160 = temp135 == const161i_2;
    int id0 = temp160 ? const163i_0 : temp158;
    int temp164 = ui & id0;
    int temp165 = temp164 | const166i_66;
    int temp167 = temp165 ^ ui;
    int temp168 = temp167 % const169i_17;
    int temp170 = temp168 >> const161i_2;
    int temp171 = temp170 << ui;
    int temp172 = ~(temp171);
    float temp173 = float(temp172);
    vec4 temp174 = vec4(temp173);
    vec4 temp175 = temp157 + temp174;
    vec4 ternary74 = temp105 + temp175;
    vec4 select78 = temp130 ? temp105 : ternary74;
    gl_FragColor = select78;
    
}

#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 130
// LunarGOO output (r722)
uniform vec4 uv4;
uniform int ui;
uniform float uf;
uniform bvec4 ub41;
uniform bvec4 ub42;
uniform ivec4 uiv4;
uniform bool ub;
const vec4 const22 = vec4(0.0174533);
const vec4 const24 = vec4(57.2958);
const float const151 = 2.0;
const float const155 = 1.0;
const int const159i_2 = 2;
const int const161i_1 = 1;
const int const163i_0 = 0;
const int const166i_66 = 66;
const int const169i_17 = 17;

void main()
{
    vec4 temp211 = uv4 * const22;
    vec4 temp232 = temp211 * const24;
    vec4 temp253 = temp211 + temp232;
    int temp264 = ui * ui;
    vec4 temp275 = sin(temp253);
    vec4 temp286 = temp275 + temp253;
    vec4 temp297 = cos(temp286);
    vec4 temp308 = temp297 + temp286;
    vec4 temp319 = tan(temp308);
    vec4 temp3210 = temp319 + temp308;
    vec4 temp3311 = asin(temp3210);
    vec4 temp3412 = temp3311 + temp3210;
    vec4 temp3513 = acos(temp3412);
    vec4 temp3614 = temp3513 + temp3412;
    vec4 temp3715 = atan(temp3614);
    vec4 temp3816 = temp3715 + temp3614;
    vec4 temp3917 = sinh(temp3816);
    vec4 temp4018 = temp3917 + temp3816;
    vec4 temp4119 = cosh(temp4018);
    vec4 temp4220 = temp4119 + temp4018;
    vec4 temp4321 = tanh(temp4220);
    vec4 temp4422 = temp4321 + temp4220;
    vec4 temp4523 = asinh(temp4422);
    vec4 temp4624 = temp4523 + temp4422;
    vec4 temp4725 = acosh(temp4624);
    vec4 temp4826 = temp4725 + temp4624;
    vec4 temp4927 = atanh(temp4826);
    vec4 temp5028 = temp4927 + temp4826;
    vec4 temp5129 = pow(temp5028, temp5028);
    vec4 temp5230 = temp5129 + temp5028;
    vec4 temp5331 = exp(temp5230);
    vec4 temp5432 = temp5331 + temp5230;
    vec4 temp5533 = log(temp5432);
    vec4 temp5634 = temp5533 + temp5432;
    vec4 temp5735 = exp2(temp5634);
    vec4 temp5836 = temp5735 + temp5634;
    vec4 temp5937 = log2(temp5836);
    vec4 temp6038 = temp5937 + temp5836;
    vec4 temp6139 = sqrt(temp6038);
    vec4 temp6240 = temp6139 + temp6038;
    vec4 temp6341 = inversesqrt(temp6240);
    vec4 temp6442 = temp6341 + temp6240;
    vec4 temp6543 = abs(temp6442);
    vec4 temp6644 = temp6543 + temp6442;
    vec4 temp6745 = sign(temp6644);
    vec4 temp6846 = temp6745 + temp6644;
    vec4 temp6947 = floor(temp6846);
    vec4 temp7048 = temp6947 + temp6846;
    vec4 temp7149 = ceil(temp7048);
    vec4 temp7250 = temp7149 + temp7048;
    vec4 temp7351 = fract(temp7250);
    vec4 temp7452 = temp7351 + temp7250;
    vec4 temp7553 = mod(temp7452, temp7452);
    vec4 temp7654 = temp7553 + temp7452;
    vec4 temp77 = temp7654.xxxx;
    vec4 temp7856 = mod(temp7654, temp77);
    vec4 temp7957 = temp7856 + temp7654;
    vec4 temp8058 = min(temp7957, uv4);
    vec4 temp8159 = temp8058 + temp7957;
    vec4 temp8260 = max(temp8159, uv4);
    vec4 temp8361 = temp8260 + temp8159;
    vec4 temp8462 = clamp(temp8361, uv4, uv4);
    vec4 temp8563 = temp8462 + temp8361;
    vec4 temp8664 = mix(temp8563, temp8563, temp8563);
    vec4 temp8765 = temp8664 + temp8563;
    vec4 temp8866 = step(temp8765, temp8765);
    vec4 temp8967 = temp8866 + temp8765;
    vec4 temp9068 = smoothstep(temp8967, temp8967, temp8967);
    vec4 temp9169 = temp9068 + temp8967;
    vec4 temp9270 = normalize(temp9169);
    vec4 temp9371 = temp9270 + temp9169;
    vec4 temp9472 = faceforward(temp9371, temp9371, temp9371);
    vec4 temp9573 = temp9472 + temp9371;
    vec4 temp9674 = reflect(temp9573, temp9573);
    vec4 temp9775 = temp9674 + temp9573;
    vec4 temp9876 = refract(temp9775, temp9775, uf);
    vec4 temp9977 = temp9775 + temp9876;
    vec4 temp10078 = dFdx(temp9977);
    vec4 temp10179 = temp9977 + temp10078;
    vec4 temp10280 = dFdy(temp10179);
    vec4 temp10381 = temp10179 + temp10280;
    vec4 temp10482 = fwidth(temp10381);
    vec4 temp10583 = temp10381 + temp10482;
    vec3 temp106 = vec3(temp10583);
    bvec4 temp10785 = lessThan(temp10583, uv4);
    bool temp10886 = any(temp10785);
    bvec4 temp10987 = lessThanEqual(temp10583, uv4);
    bool temp11088 = any(temp10987);
    bool temp11189 = temp10886 && temp11088;
    bvec4 temp11290 = greaterThan(temp10583, uv4);
    bool temp11391 = any(temp11290);
    bool temp11492 = temp11189 && temp11391;
    bvec4 temp11593 = greaterThanEqual(temp10583, uv4);
    bool temp11694 = any(temp11593);
    bool temp11795 = temp11492 && temp11694;
    bvec4 temp11896 = equal(ub41, ub42);
    bool temp11997 = any(temp11896);
    bool temp12098 = temp11795 && temp11997;
    bvec4 temp12199 = notEqual(ub41, ub42);
    bool temp122100 = any(temp12199);
    bool temp123101 = temp12098 && temp122100;
    bool temp124102 = any(ub41);
    bool temp125103 = temp123101 && temp124102;
    bool temp126104 = all(ub41);
    bool temp127105 = temp125103 && temp126104;
    bvec4 temp128106 = not(ub41);
    bool temp129107 = any(temp128106);
    bool temp130108 = temp127105 && temp129107;
    int temp131109 = temp264 + ui;
    int temp132110 = temp131109 * temp264;
    int temp133111 = temp132110 - ui;
    int temp134112 = temp133111 / temp264;
    int temp135113 = temp134112 % ui;
    float temp136114 = uf + uf;
    float temp137115 = uf * temp136114;
    float temp138116 = temp137115 - uf;
    float temp139117 = temp138116 / uf;
    float temp140118 = length(temp10583);
    float temp141119 = temp139117 + temp140118;
    float temp142120 = dot(temp10583, temp10583);
    float temp143121 = temp141119 + temp142120;
    float temp144122 = uf * temp143121;
    float temp145123 = temp143121 + temp144122;
    vec3 temp146124 = cross(temp106, temp106);
    float temp147125 = temp146124.x + temp145123;
    bool temp148126 = temp147125 == uf;
    bool temp149127 = temp147125 != uf;
    bool temp150128 = temp147125 != const151;
    bool temp152129 = temp149127 && temp150128;
    bool temp153130 = temp148126 || temp152129;
    float temp154131 = temp147125 + const155;
    float select = temp153130 ? temp154131 : temp147125;
    vec4 temp157 = vec4(select);
    bool temp160138 = temp135113 == const159i_2;
    int temp158137 = temp135113 + const161i_1;
    int ternary139d0 = temp160138 ? const163i_0 : temp158137;
    int temp164145 = ui & ternary139d0;
    int temp165146 = temp164145 | const166i_66;
    int temp167147 = temp165146 ^ ui;
    int temp168148 = temp167147 % const169i_17;
    int temp170149 = temp168148 >> const159i_2;
    int temp171150 = temp170149 << ui;
    int temp172151 = ~(temp171150);
    float temp173152 = float(temp172151);
    vec4 temp174 = vec4(temp173152);
    vec4 temp175155 = temp174 + temp157;
    vec4 ternary74156 = temp10583 + temp175155;
    vec4 select165 = temp130108 ? temp10583 : ternary74156;
    gl_FragColor = select165;
    
}

