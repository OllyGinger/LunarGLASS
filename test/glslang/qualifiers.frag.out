
Top IR:
; ModuleID = 'Top'

@outVi_shadow = internal global <4 x float> zeroinitializer
@inVc_shadow = internal global <4 x float> zeroinitializer
@inVs_shadow = internal global <4 x float> zeroinitializer
@inVf_shadow = internal global <4 x float> zeroinitializer
@inVn_shadow = internal global <4 x float> zeroinitializer
@inVcn_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %inVc = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1025, i32 -1, i32 513), !gla.input !2
  store <4 x float> %inVc, <4 x float>* @inVc_shadow
  %0 = load <4 x float>* @inVc_shadow
  %inVs = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !4
  store <4 x float> %inVs, <4 x float>* @inVs_shadow
  %1 = load <4 x float>* @inVs_shadow
  %2 = fadd <4 x float> %0, %1
  %inVf = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1027, i32 -1), !gla.input !6
  store <4 x float> %inVf, <4 x float>* @inVf_shadow
  %3 = load <4 x float>* @inVf_shadow
  %4 = fadd <4 x float> %2, %3
  %inVn = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1028, i32 -1, i32 2), !gla.input !8
  store <4 x float> %inVn, <4 x float>* @inVn_shadow
  %5 = load <4 x float>* @inVn_shadow
  %6 = fadd <4 x float> %4, %5
  %inVcn = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1029, i32 -1, i32 514), !gla.input !10
  store <4 x float> %inVcn, <4 x float>* @inVcn_shadow
  %7 = load <4 x float>* @inVcn_shadow
  %outVi_shadow = fadd <4 x float> %6, %7
  store <4 x float> %outVi_shadow, <4 x float>* @outVi_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %8 = load <4 x float>* @outVi_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %8), !gla.output !0
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.outputs = !{!0}
!gla.invariant = !{!0}
!gla.inputs = !{!2, !4, !6, !8, !10}

!0 = metadata !{metadata !"outVi", i32 7, <4 x float>* @outVi_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"inVc", i32 1, <4 x float>* @inVc_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null}
!4 = metadata !{metadata !"inVs", i32 1, <4 x float>* @inVs_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1026, null}
!6 = metadata !{metadata !"inVf", i32 1, <4 x float>* @inVf_shadow_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1027, null}
!8 = metadata !{metadata !"inVn", i32 1, <4 x float>* @inVn_shadow_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1028, null}
!10 = metadata !{metadata !"inVcn", i32 1, <4 x float>* @inVcn_shadow_typeProxy, metadata !11}
!11 = metadata !{i32 0, i32 0, i32 1029, null}


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  %inVs = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1026, i32 -1, i32 1), !gla.input !4
  %inVc = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1025, i32 -1, i32 513), !gla.input !2
  %inVf = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1027, i32 -1), !gla.input !6
  %0 = fadd <4 x float> %inVs, %inVc
  %inVn = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1028, i32 -1, i32 2), !gla.input !8
  %1 = fadd <4 x float> %0, %inVf
  %inVcn = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1029, i32 -1, i32 514), !gla.input !10
  %2 = fadd <4 x float> %1, %inVn
  %outVi_shadow = fadd <4 x float> %2, %inVcn
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %outVi_shadow), !gla.output !0
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.outputs = !{!0}
!gla.invariant = !{!0}
!gla.inputs = !{!2, !4, !6, !8, !10}

!0 = metadata !{metadata !"outVi", i32 7, <4 x float>* @outVi_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"inVc", i32 1, <4 x float>* @inVc_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null}
!4 = metadata !{metadata !"inVs", i32 1, <4 x float>* @inVs_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1026, null}
!6 = metadata !{metadata !"inVf", i32 1, <4 x float>* @inVf_shadow_typeProxy, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 1027, null}
!8 = metadata !{metadata !"inVn", i32 1, <4 x float>* @inVn_shadow_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1028, null}
!10 = metadata !{metadata !"inVcn", i32 1, <4 x float>* @inVcn_shadow_typeProxy, metadata !11}
!11 = metadata !{i32 0, i32 0, i32 1029, null}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 430 core
// LunarGOO output (r722)
in vec4 inVs;
centroid in vec4 inVc;
flat in vec4 inVf;
noperspective in vec4 inVn;
centroid noperspective in vec4 inVcn;
out vec4 outVi;

void main()
{
    vec4 temp21 = inVs + inVc;
    vec4 temp22 = temp21 + inVf;
    vec4 temp23 = temp22 + inVn;
    vec4 outVi_shadow = temp23 + inVcn;
    outVi = outVi_shadow;
    
}

#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 430 core
// LunarGOO output (r722)
centroid in vec4 inVc;
in vec4 inVs;
flat in vec4 inVf;
noperspective in vec4 inVn;
centroid noperspective in vec4 inVcn;
out vec4 outVi;

void main()
{
    vec4 temp211 = inVc + inVs;
    vec4 temp222 = temp211 + inVf;
    vec4 temp233 = temp222 + inVn;
    vec4 outVi_shadow4 = temp233 + inVcn;
    outVi = outVi_shadow4;
    
}

