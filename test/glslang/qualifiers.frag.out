
Top IR:
; ModuleID = 'Top'

@outVi_shadow = internal global <4 x float> zeroinitializer
@inVc_shadow = internal global <4 x float> zeroinitializer
@inVs_shadow = internal global <4 x float> zeroinitializer
@inVf_shadow = internal global <4 x float> zeroinitializer
@inVn_shadow = internal global <4 x float> zeroinitializer
@inVcn_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %inVc__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 513)
  store <4 x float> %inVc__, <4 x float>* @inVc_shadow
  %0 = load <4 x float>* @inVc_shadow
  %inVs__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %inVs__, <4 x float>* @inVs_shadow
  %1 = load <4 x float>* @inVs_shadow
  %2 = fadd <4 x float> %0, %1
  %inVf__ = call <4 x float> @llvm.gla.fReadData.v4f32(i32 2, i32 -1)
  store <4 x float> %inVf__, <4 x float>* @inVf_shadow
  %3 = load <4 x float>* @inVf_shadow
  %4 = fadd <4 x float> %2, %3
  %inVn__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 3, i32 -1, i32 2)
  store <4 x float> %inVn__, <4 x float>* @inVn_shadow
  %5 = load <4 x float>* @inVn_shadow
  %6 = fadd <4 x float> %4, %5
  %inVcn__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 4, i32 -1, i32 514)
  store <4 x float> %inVcn__, <4 x float>* @inVcn_shadow
  %7 = load <4 x float>* @inVcn_shadow
  %outVi_shadow = fadd <4 x float> %6, %7
  store <4 x float> %outVi_shadow, <4 x float>* @outVi_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %8 = load <4 x float>* @outVi_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %8)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  %inVs__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %inVc__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 513)
  %inVf__ = call <4 x float> @llvm.gla.fReadData.v4f32(i32 2, i32 -1)
  %0 = fadd <4 x float> %inVs__, %inVc__
  %inVn__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 3, i32 -1, i32 2)
  %1 = fadd <4 x float> %0, %inVf__
  %inVcn__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 4, i32 -1, i32 514)
  %2 = fadd <4 x float> %1, %inVn__
  %outVi_shadow = fadd <4 x float> %2, %inVcn__
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %outVi_shadow)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 430 core
out vec4 outVi;
in vec4 inVs;
centroid in vec4 inVc;
flat in vec4 inVf;
noperspective in vec4 inVn;
centroid noperspective in vec4 inVcn;

void main()
{
    vec4 temp21 = inVs + inVc;
    vec4 temp22 = temp21 + inVf;
    vec4 temp23 = temp22 + inVn;
    vec4 outVi_shadow = temp23 + inVcn;
    outVi = outVi_shadow;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 430 core
out vec4 outVi;
centroid in vec4 inVc;
in vec4 inVs;
flat in vec4 inVf;
noperspective in vec4 inVn;
centroid noperspective in vec4 inVcn;

void main()
{
    vec4 temp211 = inVc + inVs;
    vec4 temp222 = temp211 + inVf;
    vec4 temp233 = temp222 + inVn;
    vec4 outVi_shadow4 = temp233 + inVcn;
    outVi = outVi_shadow4;
    
}
