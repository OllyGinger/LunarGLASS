
Top IR:
; ModuleID = 'Top'

%s2 = type { i32, float, %s1 }
%s1 = type { i32, float }

@u_shadow = internal global <4 x float> zeroinitializer
@w_shadow = internal global <4 x float> zeroinitializer
@foo2a = external addrspace(2) constant %s2
@foo2b = external addrspace(2) constant %s2
@sampler = external addrspace(1) constant i32
@coord_shadow = internal global <2 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %v = alloca <4 x float>
  %constructed12 = alloca [3 x %s1]
  %constructed11 = alloca %s1
  %constructed8 = alloca %s1
  %b = alloca [3 x %s1]
  %constructed5 = alloca [3 x %s1]
  %constructed4 = alloca %s1
  %constructed = alloca %s1
  %a = alloca [3 x %s1]
  %u = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  store <4 x float> %u, <4 x float>* @u_shadow
  %0 = load <4 x float>* @u_shadow
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fptosi float %1 to i32
  %u1 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  store <4 x float> %u1, <4 x float>* @u_shadow
  %3 = load <4 x float>* @u_shadow
  %4 = extractelement <4 x float> %3, i32 1
  %5 = getelementptr %s1* %constructed, i32 0, i32 0
  store i32 %2, i32* %5
  %6 = getelementptr %s1* %constructed, i32 0, i32 1
  store float %4, float* %6
  %7 = load %s1* %constructed
  %u2 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  store <4 x float> %u2, <4 x float>* @u_shadow
  %8 = load <4 x float>* @u_shadow
  %9 = extractelement <4 x float> %8, i32 2
  %10 = fptosi float %9 to i32
  %u3 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  store <4 x float> %u3, <4 x float>* @u_shadow
  %11 = load <4 x float>* @u_shadow
  %12 = extractelement <4 x float> %11, i32 3
  %13 = getelementptr %s1* %constructed4, i32 0, i32 0
  store i32 %10, i32* %13
  %14 = getelementptr %s1* %constructed4, i32 0, i32 1
  store float %12, float* %14
  %15 = load %s1* %constructed4
  %16 = getelementptr [3 x %s1]* %constructed5, i32 0, i32 0
  store %s1 %7, %s1* %16
  %17 = getelementptr [3 x %s1]* %constructed5, i32 0, i32 1
  store %s1 %15, %s1* %17
  %18 = getelementptr [3 x %s1]* %constructed5, i32 0, i32 2
  store %s1 { i32 14, float 1.400000e+01 }, %s1* %18
  %a6 = load [3 x %s1]* %constructed5
  store [3 x %s1] %a6, [3 x %s1]* %a
  %w = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1025, i32 -1, i32 1), !input !2
  store <4 x float> %w, <4 x float>* @w_shadow
  %19 = load <4 x float>* @w_shadow
  %20 = extractelement <4 x float> %19, i32 0
  %21 = fptosi float %20 to i32
  %w7 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1025, i32 -1, i32 1), !input !2
  store <4 x float> %w7, <4 x float>* @w_shadow
  %22 = load <4 x float>* @w_shadow
  %23 = extractelement <4 x float> %22, i32 1
  %24 = getelementptr %s1* %constructed8, i32 0, i32 0
  store i32 %21, i32* %24
  %25 = getelementptr %s1* %constructed8, i32 0, i32 1
  store float %23, float* %25
  %26 = load %s1* %constructed8
  %w9 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1025, i32 -1, i32 1), !input !2
  store <4 x float> %w9, <4 x float>* @w_shadow
  %27 = load <4 x float>* @w_shadow
  %28 = extractelement <4 x float> %27, i32 2
  %29 = fptosi float %28 to i32
  %w10 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1025, i32 -1, i32 1), !input !2
  store <4 x float> %w10, <4 x float>* @w_shadow
  %30 = load <4 x float>* @w_shadow
  %31 = extractelement <4 x float> %30, i32 3
  %32 = getelementptr %s1* %constructed11, i32 0, i32 0
  store i32 %29, i32* %32
  %33 = getelementptr %s1* %constructed11, i32 0, i32 1
  store float %31, float* %33
  %34 = load %s1* %constructed11
  %35 = getelementptr [3 x %s1]* %constructed12, i32 0, i32 0
  store %s1 { i32 17, float 1.700000e+01 }, %s1* %35
  %36 = getelementptr [3 x %s1]* %constructed12, i32 0, i32 1
  store %s1 %26, %s1* %36
  %37 = getelementptr [3 x %s1]* %constructed12, i32 0, i32 2
  store %s1 %34, %s1* %37
  %b13 = load [3 x %s1]* %constructed12
  store [3 x %s1] %b13, [3 x %s1]* %b
  %38 = load %s2 addrspace(2)* @foo2a, !uniform !6
  %39 = load %s2 addrspace(2)* @foo2b, !uniform !8
  %element1 = extractvalue %s2 %38, 0
  %element2 = extractvalue %s2 %39, 0
  %40 = icmp eq i32 %element1, %element2
  %element114 = extractvalue %s2 %38, 1
  %element215 = extractvalue %s2 %39, 1
  %41 = fcmp oeq float %element114, %element215
  %42 = and i1 %40, %41
  %element116 = extractvalue %s2 %38, 2
  %element217 = extractvalue %s2 %39, 2
  %element118 = extractvalue %s1 %element116, 0
  %element219 = extractvalue %s1 %element217, 0
  %43 = icmp eq i32 %element118, %element219
  %element120 = extractvalue %s1 %element116, 1
  %element221 = extractvalue %s1 %element217, 1
  %44 = fcmp oeq float %element120, %element221
  %45 = and i1 %43, %44
  %46 = and i1 %42, %45
  br i1 %46, label %then, label %else

then:                                             ; preds = %entry
  %47 = load i32 addrspace(1)* @sampler, !uniform !9
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1026, i32 -1, i32 1), !input !4
  store <2 x float> %coord, <2 x float>* @coord_shadow
  %48 = load <2 x float>* @coord_shadow
  %v22 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %47, i32 0, <2 x float> %48)
  store <4 x float> %v22, <4 x float>* %v
  br label %ifmerge

else:                                             ; preds = %entry
  %49 = load i32 addrspace(1)* @sampler, !uniform !9
  %coord23 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1026, i32 -1, i32 1), !input !4
  store <2 x float> %coord23, <2 x float>* @coord_shadow
  %50 = load <2 x float>* @coord_shadow
  %51 = fmul <2 x float> <float 2.000000e+00, float 2.000000e+00>, %50
  %v24 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %49, i32 0, <2 x float> %51)
  store <4 x float> %v24, <4 x float>* %v
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %u25 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  store <4 x float> %u25, <4 x float>* @u_shadow
  %52 = load <4 x float>* @u_shadow
  %53 = load <4 x float>* %v
  %54 = fcmp oeq <4 x float> %52, %53
  %55 = call i1 @llvm.gla.all.v4i1(<4 x i1> %54)
  br i1 %55, label %then26, label %ifmerge28

then26:                                           ; preds = %ifmerge
  %56 = load <4 x float>* %v
  %v27 = fmul <4 x float> %56, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  store <4 x float> %v27, <4 x float>* %v
  br label %ifmerge28

ifmerge28:                                        ; preds = %ifmerge, %then26
  %u29 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  store <4 x float> %u29, <4 x float>* @u_shadow
  %57 = load <4 x float>* @u_shadow
  %58 = load <4 x float>* %v
  %59 = fcmp one <4 x float> %57, %58
  %60 = call i1 @llvm.gla.any.v4i1(<4 x i1> %59)
  br i1 %60, label %then30, label %ifmerge32

then30:                                           ; preds = %ifmerge28
  %61 = load <4 x float>* %v
  %v31 = fmul <4 x float> %61, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  store <4 x float> %v31, <4 x float>* %v
  br label %ifmerge32

ifmerge32:                                        ; preds = %ifmerge28, %then30
  %coord33 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1026, i32 -1, i32 1), !input !4
  store <2 x float> %coord33, <2 x float>* @coord_shadow
  %62 = load <2 x float>* @coord_shadow
  %63 = load <4 x float>* %v
  %64 = extractelement <4 x float> %63, i32 1
  %65 = insertelement <2 x float> undef, float %64, i32 0
  %66 = extractelement <4 x float> %63, i32 3
  %67 = insertelement <2 x float> %65, float %66, i32 1
  %68 = fcmp oeq <2 x float> %62, %67
  %69 = call i1 @llvm.gla.all.v2i1(<2 x i1> %68)
  br i1 %69, label %then34, label %ifmerge36

then34:                                           ; preds = %ifmerge32
  %70 = load <4 x float>* %v
  %v35 = fmul <4 x float> %70, <float 5.000000e+00, float 5.000000e+00, float 5.000000e+00, float 5.000000e+00>
  store <4 x float> %v35, <4 x float>* %v
  br label %ifmerge36

ifmerge36:                                        ; preds = %ifmerge32, %then34
  %71 = load [3 x %s1]* %a
  %72 = load [3 x %s1]* %b
  %element137 = extractvalue [3 x %s1] %71, 0
  %element238 = extractvalue [3 x %s1] %72, 0
  %element139 = extractvalue %s1 %element137, 0
  %element240 = extractvalue %s1 %element238, 0
  %73 = icmp eq i32 %element139, %element240
  %element141 = extractvalue %s1 %element137, 1
  %element242 = extractvalue %s1 %element238, 1
  %74 = fcmp oeq float %element141, %element242
  %75 = and i1 %73, %74
  %element143 = extractvalue [3 x %s1] %71, 1
  %element244 = extractvalue [3 x %s1] %72, 1
  %element145 = extractvalue %s1 %element143, 0
  %element246 = extractvalue %s1 %element244, 0
  %76 = icmp eq i32 %element145, %element246
  %element147 = extractvalue %s1 %element143, 1
  %element248 = extractvalue %s1 %element244, 1
  %77 = fcmp oeq float %element147, %element248
  %78 = and i1 %76, %77
  %79 = and i1 %75, %78
  %element149 = extractvalue [3 x %s1] %71, 2
  %element250 = extractvalue [3 x %s1] %72, 2
  %element151 = extractvalue %s1 %element149, 0
  %element252 = extractvalue %s1 %element250, 0
  %80 = icmp eq i32 %element151, %element252
  %element153 = extractvalue %s1 %element149, 1
  %element254 = extractvalue %s1 %element250, 1
  %81 = fcmp oeq float %element153, %element254
  %82 = and i1 %80, %81
  %83 = and i1 %79, %82
  br i1 %83, label %then55, label %ifmerge57

then55:                                           ; preds = %ifmerge36
  %84 = load <4 x float>* %v
  %v56 = fmul <4 x float> %84, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  store <4 x float> %v56, <4 x float>* %v
  br label %ifmerge57

ifmerge57:                                        ; preds = %ifmerge36, %then55
  %85 = load [3 x %s1]* %a
  %86 = load [3 x %s1]* %b
  %element158 = extractvalue [3 x %s1] %85, 0
  %element259 = extractvalue [3 x %s1] %86, 0
  %element160 = extractvalue %s1 %element158, 0
  %element261 = extractvalue %s1 %element259, 0
  %87 = icmp ne i32 %element160, %element261
  %element162 = extractvalue %s1 %element158, 1
  %element263 = extractvalue %s1 %element259, 1
  %88 = fcmp one float %element162, %element263
  %89 = or i1 %87, %88
  %element164 = extractvalue [3 x %s1] %85, 1
  %element265 = extractvalue [3 x %s1] %86, 1
  %element166 = extractvalue %s1 %element164, 0
  %element267 = extractvalue %s1 %element265, 0
  %90 = icmp ne i32 %element166, %element267
  %element168 = extractvalue %s1 %element164, 1
  %element269 = extractvalue %s1 %element265, 1
  %91 = fcmp one float %element168, %element269
  %92 = or i1 %90, %91
  %93 = or i1 %89, %92
  %element170 = extractvalue [3 x %s1] %85, 2
  %element271 = extractvalue [3 x %s1] %86, 2
  %element172 = extractvalue %s1 %element170, 0
  %element273 = extractvalue %s1 %element271, 0
  %94 = icmp ne i32 %element172, %element273
  %element174 = extractvalue %s1 %element170, 1
  %element275 = extractvalue %s1 %element271, 1
  %95 = fcmp one float %element174, %element275
  %96 = or i1 %94, %95
  %97 = or i1 %93, %96
  br i1 %97, label %then76, label %ifmerge78

then76:                                           ; preds = %ifmerge57
  %98 = load <4 x float>* %v
  %v77 = fmul <4 x float> %98, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  store <4 x float> %v77, <4 x float>* %v
  br label %ifmerge78

ifmerge78:                                        ; preds = %ifmerge57, %then76
  %FragColor_shadow = load <4 x float>* %v
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge78
  %99 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1027, i32 -1, <4 x float> %99), !output !12
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v2i1(<2 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!inputs = !{!0, !2, !4}
!defaultUniforms = !{!6, !8, !9, !9}
!outputs = !{!12}

!0 = metadata !{metadata !"u", i32 1, <4 x float>* @u_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"w", i32 1, <4 x float>* @w_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null}
!4 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1026, null}
!6 = metadata !{metadata !"foo2a", i32 12, %s2 addrspace(2)* @foo2a, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 0, null}
!8 = metadata !{metadata !"foo2b", i32 12, %s2 addrspace(2)* @foo2b, metadata !7}
!9 = metadata !{metadata !"sampler", i32 12, i32 addrspace(1)* @sampler, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 0, metadata !11}
!11 = metadata !{i32 0, i32 addrspace(1)* @sampler, i32 1, i1 false, i1 false, i32 0}
!12 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !13}
!13 = metadata !{i32 0, i32 0, i32 1027, null}


Bottom IR:
; ModuleID = 'Top'

%s2 = type { i32, float, %s1 }
%s1 = type { i32, float }

@foo2a = external addrspace(2) constant %s2
@foo2b = external addrspace(2) constant %s2
@sampler = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %u = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  %0 = extractelement <4 x float> %u, i32 0
  %1 = fptosi float %0 to i32
  %2 = extractelement <4 x float> %u, i32 1
  %3 = extractelement <4 x float> %u, i32 2
  %4 = fptosi float %3 to i32
  %5 = extractelement <4 x float> %u, i32 3
  %w = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1025, i32 -1, i32 1), !input !2
  %6 = extractelement <4 x float> %w, i32 0
  %7 = fptosi float %6 to i32
  %8 = extractelement <4 x float> %w, i32 1
  %9 = extractelement <4 x float> %w, i32 2
  %10 = fptosi float %9 to i32
  %11 = extractelement <4 x float> %w, i32 3
  %12 = load %s2 addrspace(2)* @foo2a, align 4, !uniform !6
  %13 = load %s2 addrspace(2)* @foo2b, align 4, !uniform !8
  %element1 = extractvalue %s2 %12, 0
  %element2 = extractvalue %s2 %13, 0
  %14 = icmp eq i32 %element1, %element2
  %element114 = extractvalue %s2 %12, 1
  %element215 = extractvalue %s2 %13, 1
  %15 = fcmp oeq float %element114, %element215
  %16 = and i1 %14, %15
  %element116 = extractvalue %s2 %12, 2
  %element217 = extractvalue %s2 %13, 2
  %element118 = extractvalue %s1 %element116, 0
  %element219 = extractvalue %s1 %element217, 0
  %17 = icmp eq i32 %element118, %element219
  %element120 = extractvalue %s1 %element116, 1
  %element221 = extractvalue %s1 %element217, 1
  %18 = fcmp oeq float %element120, %element221
  %19 = and i1 %17, %18
  %20 = and i1 %16, %19
  %21 = load i32 addrspace(1)* @sampler, align 4, !uniform !9
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1026, i32 -1, i32 1)
  br i1 %20, label %then, label %else

then:                                             ; preds = %entry
  %v22 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %21, i32 0, <2 x float> %coord)
  br label %ifmerge

else:                                             ; preds = %entry
  %22 = fmul <2 x float> %coord, <float 2.000000e+00, float 2.000000e+00>
  %v24 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %21, i32 0, <2 x float> %22)
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %v.0 = phi <4 x float> [ %v22, %then ], [ %v24, %else ]
  %23 = fcmp oeq <4 x float> %u, %v.0
  %24 = call i1 @llvm.gla.all.v4i1(<4 x i1> %23)
  %v27 = fmul <4 x float> %v.0, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %select139 = select i1 %24, <4 x float> %v27, <4 x float> %v.0
  %25 = fcmp one <4 x float> %u, %select139
  %26 = call i1 @llvm.gla.any.v4i1(<4 x i1> %25)
  %v31 = fmul <4 x float> %select139, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %select = select i1 %26, <4 x float> %v31, <4 x float> %select139
  %27 = call <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float> %select, <2 x i32> <i32 1, i32 3>)
  %28 = fcmp oeq <2 x float> %coord, %27
  %29 = call i1 @llvm.gla.all.v2i1(<2 x i1> %28)
  %v35 = fmul <4 x float> %select, <float 5.000000e+00, float 5.000000e+00, float 5.000000e+00, float 5.000000e+00>
  %select141 = select i1 %29, <4 x float> %v35, <4 x float> %select
  %30 = icmp eq i32 %1, 17
  %31 = fcmp oeq float %2, 1.700000e+01
  %32 = and i1 %30, %31
  %33 = icmp eq i32 %4, %7
  %34 = fcmp oeq float %5, %8
  %35 = and i1 %33, %34
  %36 = and i1 %32, %35
  %37 = icmp eq i32 %10, 14
  %38 = fcmp oeq float %11, 1.400000e+01
  %39 = and i1 %37, %38
  %40 = and i1 %36, %39
  %v56 = fmul <4 x float> %select141, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %select138 = select i1 %40, <4 x float> %v56, <4 x float> %select141
  %41 = icmp ne i32 %1, 17
  %42 = fcmp one float %2, 1.700000e+01
  %43 = or i1 %41, %42
  %44 = icmp ne i32 %4, %7
  %45 = fcmp one float %5, %8
  %46 = or i1 %44, %45
  %47 = or i1 %43, %46
  %48 = icmp ne i32 %10, 14
  %49 = fcmp one float %11, 1.400000e+01
  %50 = or i1 %48, %49
  %51 = or i1 %47, %50
  %v77 = fmul <4 x float> %select138, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %select140 = select i1 %51, <4 x float> %v77, <4 x float> %select138
  call void @llvm.gla.fWriteData.v4f32(i32 1027, i32 -1, <4 x float> %select140), !output !12
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare i1 @llvm.gla.all.v2i1(<2 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <2 x float> @llvm.gla.fSwizzle.v2f32.v4f32.v2i32(<4 x float>, <2 x i32>) nounwind readnone

!inputs = !{!0, !2, !4}
!defaultUniforms = !{!6, !8, !9, !9}
!outputs = !{!12}

!0 = metadata !{metadata !"u", i32 1, <4 x float>* @u_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"w", i32 1, <4 x float>* @w_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025, null}
!4 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1026, null}
!6 = metadata !{metadata !"foo2a", i32 12, %s2 addrspace(2)* @foo2a, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 0, null}
!8 = metadata !{metadata !"foo2b", i32 12, %s2 addrspace(2)* @foo2b, metadata !7}
!9 = metadata !{metadata !"sampler", i32 12, i32 addrspace(1)* @sampler, metadata !10}
!10 = metadata !{i32 5, i32 0, i32 0, metadata !11}
!11 = metadata !{i32 0, i32 addrspace(1)* @sampler, i32 1, i1 false, i1 false, i32 0}
!12 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !13}
!13 = metadata !{i32 0, i32 0, i32 1027, null}

***Unsupported functionality: couldn't get metadata for input instruction
#### BEGIN COMPILER 0 INFO LOG ####
WARNING: 0:4: varying deprecated in version 130; may be removed in future release
WARNING: 0:6: varying deprecated in version 130; may be removed in future release
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
struct s1 {
    int member0;
    float member1;
};

struct s2 {
    int member0;
    float member1;
    s1 member2;
};

uniform s2 foo2a;
uniform s2 foo2b;
uniform sampler2D sampler;
in vec4 u;
in vec4 w;
in vec2 coord;
const vec2 const45 = vec2(2.0);
const vec4 const50 = vec4(3.0);
const vec4 const55 = vec4(4.0);
const vec4 const61 = vec4(5.0);
const int const64i_17 = 17;
const float const66f_17 = 17.0;
const int const73i_14 = 14;
const float const75f_14 = 14.0;
const vec4 const79 = vec4(6.0);
const vec4 const93 = vec4(7.0);

void main()
{
    vec4 vd0;
    int temp22 = int(u.x);
    int temp23 = int(u.z);
    int temp24 = int(w.x);
    int temp25 = int(w.z);
    int element1 = foo2a.member0;
    int element2 = foo2b.member0;
    bool temp28 = element1 == element2;
    float element114 = foo2a.member1;
    float element215 = foo2b.member1;
    bool temp31 = element114 == element215;
    bool temp32 = temp28 && temp31;
    s1 element116 = foo2a.member2;
    s1 element217 = foo2b.member2;
    int element118 = element116.member0;
    int element219 = element217.member0;
    bool temp37 = element118 == element219;
    float element120 = element116.member1;
    float element221 = element217.member1;
    bool temp40 = element120 == element221;
    bool temp41 = temp37 && temp40;
    bool temp42 = temp32 && temp41;
    if (temp42) {
        vec4 temp43 = texture(sampler, coord);
        vd0 = temp43;
    }
    else {
        vec2 temp44 = coord * const45;
        vec4 temp46 = texture(sampler, temp44);
        vd0 = temp46;
    }
    
    bvec4 temp47 = equal(u, vd0);
    bool temp48 = all(temp47);
    vec4 temp49 = vd0 * const50;
    vec4 select139 = temp48 ? temp49 : vd0;
    bvec4 temp52 = notEqual(u, select139);
    bool temp53 = any(temp52);
    vec4 temp54 = select139 * const55;
    vec4 select = temp53 ? temp54 : select139;
    vec2 temp57 = select.yw;
    bvec2 temp58 = equal(coord, temp57);
    bool temp59 = all(temp58);
    vec4 temp60 = select * const61;
    vec4 select141 = temp59 ? temp60 : select;
    bool temp63 = temp22 == const64i_17;
    bool temp65 = u.y == const66f_17;
    bool temp67 = temp63 && temp65;
    bool temp68 = temp23 == temp24;
    bool temp69 = u.w == w.y;
    bool temp70 = temp68 && temp69;
    bool temp71 = temp67 && temp70;
    bool temp72 = temp25 == const73i_14;
    bool temp74 = w.w == const75f_14;
    bool temp76 = temp72 && temp74;
    bool temp77 = temp71 && temp76;
    vec4 temp78 = select141 * const79;
    vec4 select138 = temp77 ? temp78 : select141;
    bool temp81 = temp22 != const64i_17;
    bool temp82 = u.y != const66f_17;
    bool temp83 = temp81 || temp82;
    bool temp84 = temp23 != temp24;
    bool temp85 = u.w != w.y;
    bool temp86 = temp84 || temp85;
    bool temp87 = temp83 || temp86;
    bool temp88 = temp25 != const73i_14;
    bool temp89 = w.w != const75f_14;
    bool temp90 = temp88 || temp89;
    bool temp91 = temp87 || temp90;
    vec4 temp92 = select138 * const93;
    vec4 select140 = temp91 ? temp92 : select138;
    gl_FragColor = select140;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
struct s1 {
    int member0;
    float member1;
};

struct s2 {
    int member0;
    float member1;
    s1 member2;
};

uniform s2 foo2a;
uniform s2 foo2b;
uniform sampler2D sampler;
in vec4 u;
in vec4 w;
in vec2 coord;
const vec2 const45 = vec2(2.0);
const vec4 const50 = vec4(3.0);
const vec4 const55 = vec4(4.0);
const vec4 const61 = vec4(5.0);
const int const64i_17 = 17;
const float const66f_17 = 17.0;
const int const73i_14 = 14;
const float const75f_14 = 14.0;
const vec4 const79 = vec4(6.0);
const vec4 const93 = vec4(7.0);

void main()
{
    vec4 vd0d0;
    int temp221 = int(u.x);
    int temp233 = int(u.z);
    int temp244 = int(w.x);
    int temp256 = int(w.z);
    int element17 = foo2a.member0;
    int element28 = foo2b.member0;
    bool temp289 = element17 == element28;
    float element11410 = foo2a.member1;
    float element21511 = foo2b.member1;
    bool temp3112 = element11410 == element21511;
    bool temp3213 = temp289 && temp3112;
    s1 element11614 = foo2a.member2;
    int element11614110 = element11614.member0;
    float element11614111 = element11614.member1;
    s1 element21715 = foo2b.member2;
    int element21715112 = element21715.member0;
    float element21715113 = element21715.member1;
    bool temp3718 = element11614110 == element21715112;
    bool temp4021 = element11614111 == element21715113;
    bool temp4122 = temp3718 && temp4021;
    bool temp4223 = temp3213 && temp4122;
    if (temp4223) {
        vec4 temp4324 = texture(sampler, coord);
        vd0d0 = temp4324;
    }
    else {
        vec2 temp4427 = coord * const45;
        vec4 temp4628 = texture(sampler, temp4427);
        vd0d0 = temp4628;
    }
    
    bvec4 temp4731 = equal(u, vd0d0);
    bool temp4832 = all(temp4731);
    vec4 temp4933 = vd0d0 * const50;
    vec4 select114 = temp4832 ? temp4933 : vd0d0;
    bvec4 temp5241 = notEqual(u, select114);
    bool temp5342 = any(temp5241);
    vec4 temp5443 = select114 * const55;
    vec4 select117 = temp5342 ? temp5443 : select114;
    vec2 temp57 = select117.yw;
    bvec2 temp5853 = equal(coord, temp57);
    bool temp5954 = all(temp5853);
    vec4 temp6055 = select117 * const61;
    vec4 select116 = temp5954 ? temp6055 : select117;
    bool temp6363 = temp221 == const64i_17;
    bool temp6565 = u.y == const66f_17;
    bool temp6766 = temp6363 && temp6565;
    bool temp6867 = temp233 == temp244;
    bool temp6970 = u.w == w.y;
    bool temp7071 = temp6867 && temp6970;
    bool temp7172 = temp6766 && temp7071;
    bool temp7273 = temp256 == const73i_14;
    bool temp7475 = w.w == const75f_14;
    bool temp7676 = temp7273 && temp7475;
    bool temp7777 = temp7172 && temp7676;
    vec4 temp7878 = select116 * const79;
    vec4 select115 = temp7777 ? temp7878 : select116;
    bool temp8186 = temp221 != const64i_17;
    bool temp8288 = u.y != const66f_17;
    bool temp8389 = temp8186 || temp8288;
    bool temp8490 = temp233 != temp244;
    bool temp8593 = u.w != w.y;
    bool temp8694 = temp8490 || temp8593;
    bool temp8795 = temp8389 || temp8694;
    bool temp8896 = temp256 != const73i_14;
    bool temp8998 = w.w != const75f_14;
    bool temp9099 = temp8896 || temp8998;
    bool temp91100 = temp8795 || temp9099;
    vec4 temp92101 = select115 * const93;
    vec4 select = temp91100 ? temp92101 : select115;
    gl_FragColor = select;
    
}
