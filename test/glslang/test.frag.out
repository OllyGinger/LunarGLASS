
Top IR:
; ModuleID = 'Top'

@"sampler2D texSampler2D" = external addrspace(1) constant i32
@t_shadow = internal global <2 x float> zeroinitializer
@scale = external addrspace(2) constant <2 x float>
@"sampler3D texSampler3D" = external addrspace(1) constant i32
@coords_shadow = internal global <3 x float> zeroinitializer
@gl_FragColor = internal global <4 x float> zeroinitializer
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %w = alloca <4 x float>
  %v = alloca <4 x float>
  %blendscale = alloca float
  store float 0x3FFC9FBE80000000, float* %blendscale
  %0 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  store <2 x float> %t, <2 x float>* @t_shadow
  %1 = load <2 x float>* @t_shadow
  %2 = load <2 x float> addrspace(2)* @scale
  %3 = fadd <2 x float> %1, %2
  %4 = load <2 x float> addrspace(2)* @scale
  %5 = fdiv <2 x float> %3, %4
  %6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %5)
  %7 = extractelement <4 x float> %6, i32 3
  %8 = insertelement <4 x float> undef, float %7, i32 0
  %9 = extractelement <4 x float> %6, i32 2
  %10 = insertelement <4 x float> %8, float %9, i32 1
  %11 = extractelement <4 x float> %6, i32 1
  %12 = insertelement <4 x float> %10, float %11, i32 2
  %13 = extractelement <4 x float> %6, i32 0
  %v1 = insertelement <4 x float> %12, float %13, i32 3
  store <4 x float> %v1, <4 x float>* %v
  %14 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %coords = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1, i32 -1, i32 1)
  store <3 x float> %coords, <3 x float>* @coords_shadow
  %15 = load <3 x float>* @coords_shadow
  %16 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %14, i32 0, <3 x float> %15)
  %17 = load <4 x float>* %v
  %w2 = fadd <4 x float> %16, %17
  store <4 x float> %w2, <4 x float>* %w
  %18 = load <4 x float>* %w
  %19 = load <4 x float> addrspace(2)* @u
  %20 = load float addrspace(2)* @blend
  %21 = load float* %blendscale
  %22 = fmul float %20, %21
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %18, <4 x float> %19, float %22)
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %23 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %23)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@"sampler2D texSampler2D" = external addrspace(1) constant i32
@scale = external addrspace(2) constant <2 x float>
@"sampler3D texSampler3D" = external addrspace(1) constant i32
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %0 = load <2 x float> addrspace(2)* @scale, align 8
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %1 = fadd <2 x float> %t, %0
  %2 = fdiv <2 x float> %1, %0
  %3 = load i32 addrspace(1)* @"sampler2D texSampler2D", align 4
  %coords = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1, i32 -1, i32 1)
  %4 = load i32 addrspace(1)* @"sampler3D texSampler3D", align 4
  %5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %3, i32 0, <2 x float> %2)
  %6 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %5, <4 x i32> <i32 3, i32 2, i32 1, i32 0>)
  %7 = load float addrspace(2)* @blend, align 4
  %8 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %4, i32 0, <3 x float> %coords)
  %9 = fmul float %7, 0x3FFC9FBE80000000
  %10 = load <4 x float> addrspace(2)* @u, align 16
  %w2 = fadd <4 x float> %8, %6
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %w2, <4 x float> %10, float %9)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) nounwind readnone
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r471) output
#version 130
uniform sampler2D texSampler2D;
uniform vec2 scale;
uniform sampler3D texSampler3D;
uniform vec4 u;
uniform float blend;
in vec2 t;
in vec3 coords;
const float const27_2f = 1.789;

void main()
{
    vec2 temp21 = t + scale;
    vec2 temp22 = temp21 / scale;
    vec4 temp23 = texture2D(texSampler2D, temp22);
    vec4 temp24 = temp23.wzyx;
    vec4 temp25 = texture2D(texSampler3D, coords);
    float temp26 = blend * const27_2f;
    vec4 temp28 = temp25 + temp24;
    vec4 gla_copyout_gl_FragColor = mix(temp28, u, temp26);
    gl_FragColor = gla_copyout_gl_FragColor;
    
}
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
ERROR: Not all shaders have valid object code.
#### END LINKER INFO LOG ####
