
Top IR:
; ModuleID = 'Top'

@"sampler2D texSampler2D" = external addrspace(1) constant i32
@t_shadow = internal global <2 x float> zeroinitializer
@scale = external addrspace(2) constant <2 x float>
@"sampler3D texSampler3D" = external addrspace(1) constant i32
@coords_shadow = internal global <3 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %w = alloca <4 x float>
  %v = alloca <4 x float>
  %blendscale = alloca float
  store float 0x3FFC9FBE80000000, float* %blendscale
  %0 = load i32 addrspace(1)* @"sampler2D texSampler2D", !sampler !0
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1024, i32 -1, i32 1), !input !2
  store <2 x float> %t, <2 x float>* @t_shadow
  %1 = load <2 x float>* @t_shadow
  %2 = load <2 x float> addrspace(2)* @scale, !uniform !6
  %3 = fadd <2 x float> %1, %2
  %4 = load <2 x float> addrspace(2)* @scale, !uniform !6
  %5 = fdiv <2 x float> %3, %4
  %6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %5)
  %7 = extractelement <4 x float> %6, i32 3
  %8 = insertelement <4 x float> undef, float %7, i32 0
  %9 = extractelement <4 x float> %6, i32 2
  %10 = insertelement <4 x float> %8, float %9, i32 1
  %11 = extractelement <4 x float> %6, i32 1
  %12 = insertelement <4 x float> %10, float %11, i32 2
  %13 = extractelement <4 x float> %6, i32 0
  %v1 = insertelement <4 x float> %12, float %13, i32 3
  store <4 x float> %v1, <4 x float>* %v
  %14 = load i32 addrspace(1)* @"sampler3D texSampler3D", !sampler !1
  %coords = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !input !4
  store <3 x float> %coords, <3 x float>* @coords_shadow
  %15 = load <3 x float>* @coords_shadow
  %16 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %14, i32 0, <3 x float> %15)
  %17 = load <4 x float>* %v
  %w2 = fadd <4 x float> %16, %17
  store <4 x float> %w2, <4 x float>* %w
  %18 = load <4 x float>* %w
  %19 = load <4 x float> addrspace(2)* @u, !uniform !8
  %20 = load float addrspace(2)* @blend, !uniform !9
  %21 = load float* %blendscale
  %22 = fmul float %20, %21
  %FragColor_shadow = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %18, <4 x float> %19, float %22)
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %23 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1026, i32 -1, <4 x float> %23), !output !10
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!samplers = !{!0, !1}
!inputs = !{!2, !4}
!defaultUniforms = !{!6, !6, !8, !9}
!outputs = !{!10}

!0 = metadata !{metadata !"texSampler2D", i32 0, i32 addrspace(1)* @"sampler2D texSampler2D", i32 1, i1 false, i1 false}
!1 = metadata !{metadata !"texSampler3D", i32 0, i32 addrspace(1)* @"sampler3D texSampler3D", i32 2, i1 false, i1 false}
!2 = metadata !{metadata !"t", i32 7, <2 x float>* @t_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1024}
!4 = metadata !{metadata !"coords", i32 7, <3 x float>* @coords_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1025}
!6 = metadata !{metadata !"scale", i32 12, <2 x float> addrspace(2)* @scale, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 0}
!8 = metadata !{metadata !"u", i32 12, <4 x float> addrspace(2)* @u, metadata !7}
!9 = metadata !{metadata !"blend", i32 12, float addrspace(2)* @blend, metadata !7}
!10 = metadata !{metadata !"gl_FragColor", i32 1, <4 x float>* @FragColor_shadow_typeProxy, metadata !11}
!11 = metadata !{i32 0, i32 0, i32 1026}


Bottom IR:
; ModuleID = 'Top'

@"sampler2D texSampler2D" = external addrspace(1) constant i32
@scale = external addrspace(2) constant <2 x float>
@"sampler3D texSampler3D" = external addrspace(1) constant i32
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %0 = load <2 x float> addrspace(2)* @scale, align 8, !uniform !6
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1024, i32 -1, i32 1), !input !2
  %1 = fadd <2 x float> %0, %t
  %2 = fdiv <2 x float> %1, %0
  %3 = load i32 addrspace(1)* @"sampler2D texSampler2D", align 4, !sampler !0
  %coords = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !input !4
  %4 = load i32 addrspace(1)* @"sampler3D texSampler3D", align 4, !sampler !1
  %5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %3, i32 0, <2 x float> %2)
  %6 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %5, <4 x i32> <i32 3, i32 2, i32 1, i32 0>)
  %7 = load float addrspace(2)* @blend, align 4, !uniform !9
  %8 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %4, i32 0, <3 x float> %coords)
  %9 = fmul float %7, 0x3FFC9FBE80000000
  %10 = load <4 x float> addrspace(2)* @u, align 16, !uniform !8
  %w2 = fadd <4 x float> %6, %8
  %FragColor_shadow = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %w2, <4 x float> %10, float %9)
  call void @llvm.gla.fWriteData.v4f32(i32 1026, i32 -1, <4 x float> %FragColor_shadow), !output !10
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) nounwind readnone

!samplers = !{!0, !1}
!inputs = !{!2, !4}
!defaultUniforms = !{!6, !6, !8, !9}
!outputs = !{!10}

!0 = metadata !{metadata !"texSampler2D", i32 0, i32 addrspace(1)* @"sampler2D texSampler2D", i32 1, i1 false, i1 false}
!1 = metadata !{metadata !"texSampler3D", i32 0, i32 addrspace(1)* @"sampler3D texSampler3D", i32 2, i1 false, i1 false}
!2 = metadata !{metadata !"t", i32 7, <2 x float>* @t_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1024}
!4 = metadata !{metadata !"coords", i32 7, <3 x float>* @coords_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1025}
!6 = metadata !{metadata !"scale", i32 12, <2 x float> addrspace(2)* @scale, metadata !7}
!7 = metadata !{i32 0, i32 0, i32 0}
!8 = metadata !{metadata !"u", i32 12, <4 x float> addrspace(2)* @u, metadata !7}
!9 = metadata !{metadata !"blend", i32 12, float addrspace(2)* @blend, metadata !7}
!10 = metadata !{metadata !"gl_FragColor", i32 1, <4 x float>* @FragColor_shadow_typeProxy, metadata !11}
!11 = metadata !{i32 0, i32 0, i32 1026}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 110
uniform sampler2D texSampler2D;
uniform vec2 scale;
uniform sampler3D texSampler3D;
uniform vec4 u;
uniform float blend;
varying vec2 t;
varying vec3 coords;
const float const27f_2 = 1.789;

void main()
{
    vec2 temp21 = scale + t;
    vec2 temp22 = temp21 / scale;
    vec4 temp23 = texture2D(texSampler2D, temp22);
    vec4 temp24 = temp23.wzyx;
    vec4 temp25 = texture3D(texSampler3D, coords);
    float temp26 = blend * const27f_2;
    vec4 temp28 = temp24 + temp25;
    vec4 FragColor_shadow = mix(temp28, u, temp26);
    gl_FragColor = FragColor_shadow;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 110
uniform vec2 scale;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform float blend;
uniform vec4 u;
varying vec2 t;
varying vec3 coords;
const float const28f_2 = 1.789;

void main()
{
    vec2 temp211 = scale + t;
    vec2 temp222 = temp211 / scale;
    vec4 temp233 = texture2D(texSampler2D, temp222);
    vec4 temp24 = temp233.wzyx;
    vec4 temp255 = texture3D(texSampler3D, coords);
    vec4 temp287 = temp24 + temp255;
    float temp266 = blend * const28f_2;
    vec4 FragColor_shadow8 = mix(temp287, u, temp266);
    gl_FragColor = FragColor_shadow8;
    
}
