
Top IR:
; ModuleID = 'Top'

%s = type { i32, [12 x [4 x <3 x float>]] }

@us = external addrspace(2) constant %s
@i = external addrspace(2) constant i32
@am = external addrspace(2) constant [8 x [4 x <3 x float>]]
@FragColor_shadow = internal global <4 x float> zeroinitializer
@v_shadow = internal global <3 x float> zeroinitializer
@m = external addrspace(2) constant [4 x <3 x float>]

define fastcc void @main() {
entry:
  %ls = alloca %s
  %0 = load i32 addrspace(2)* @i, !gla.uniform !8
  %1 = getelementptr %s addrspace(2)* @us, i32 0, i32 1, i32 %0
  %2 = load [4 x <3 x float>] addrspace(2)* %1, !gla.uniform !1
  %3 = load [4 x <3 x float>] addrspace(2)* getelementptr inbounds ([8 x [4 x <3 x float>]] addrspace(2)* @am, i32 0, i32 4), !gla.uniform !9
  %4 = alloca [4 x <3 x float>]
  %5 = load [4 x <3 x float>]* %4
  %leftColumn = extractvalue [4 x <3 x float>] %2, 0
  %rightColumn = extractvalue [4 x <3 x float>] %3, 0
  %column = fadd <3 x float> %leftColumn, %rightColumn
  %6 = insertvalue [4 x <3 x float>] %5, <3 x float> %column, 0
  %leftColumn1 = extractvalue [4 x <3 x float>] %2, 1
  %rightColumn2 = extractvalue [4 x <3 x float>] %3, 1
  %column3 = fadd <3 x float> %leftColumn1, %rightColumn2
  %7 = insertvalue [4 x <3 x float>] %6, <3 x float> %column3, 1
  %leftColumn4 = extractvalue [4 x <3 x float>] %2, 2
  %rightColumn5 = extractvalue [4 x <3 x float>] %3, 2
  %column6 = fadd <3 x float> %leftColumn4, %rightColumn5
  %8 = insertvalue [4 x <3 x float>] %7, <3 x float> %column6, 2
  %leftColumn7 = extractvalue [4 x <3 x float>] %2, 3
  %rightColumn8 = extractvalue [4 x <3 x float>] %3, 3
  %column9 = fadd <3 x float> %leftColumn7, %rightColumn8
  %9 = insertvalue [4 x <3 x float>] %8, <3 x float> %column9, 3
  %10 = getelementptr %s* %ls, i32 0, i32 1, i32 3
  store [4 x <3 x float>] %9, [4 x <3 x float>]* %10
  %v = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !13
  store <3 x float> %v, <3 x float>* @v_shadow
  %11 = load <3 x float>* @v_shadow
  %12 = getelementptr %s* %ls, i32 0, i32 1, i32 3
  %13 = load [4 x <3 x float>]* %12
  %14 = alloca <4 x float>
  %15 = load <4 x float>* %14
  %column10 = extractvalue [4 x <3 x float>] %13, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %11, <3 x float> %column10)
  %16 = insertelement <4 x float> %15, float %dotres, i32 0
  %column11 = extractvalue [4 x <3 x float>] %13, 1
  %dotres12 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %11, <3 x float> %column11)
  %17 = insertelement <4 x float> %16, float %dotres12, i32 1
  %column13 = extractvalue [4 x <3 x float>] %13, 2
  %dotres14 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %11, <3 x float> %column13)
  %18 = insertelement <4 x float> %17, float %dotres14, i32 2
  %column15 = extractvalue [4 x <3 x float>] %13, 3
  %dotres16 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %11, <3 x float> %column15)
  %FragColor_shadow = insertelement <4 x float> %18, float %dotres16, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %19 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %19), !gla.output !11
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !8, !9, !10}
!gla.outputs = !{!11}
!gla.inputs = !{!13}
!gla.noStaticUse = !{!10}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"us", i32 12, %s* @us_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 4, i32 0, i32 1024, null}
!3 = metadata !{metadata !"s", metadata !2, metadata !"count", metadata !4, metadata !"sm", metadata !6}
!4 = metadata !{metadata !"", metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null}
!6 = metadata !{metadata !"", metadata !7}
!7 = metadata !{i32 3, i32 0, i32 1024, null}
!8 = metadata !{metadata !"i", i32 12, i32* @i_typeProxy, metadata !5}
!9 = metadata !{metadata !"am", i32 12, [8 x [4 x <3 x float>]]* @am_typeProxy, metadata !7}
!10 = metadata !{metadata !"m", i32 12, [4 x <3 x float>]* @m_typeProxy, metadata !7}
!11 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!13 = metadata !{metadata !"v", i32 1, <3 x float>* @v_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}


Bottom IR:
; ModuleID = 'Top'

%s = type { i32, [12 x [4 x <3 x float>]] }

@us = external addrspace(2) constant %s
@i = external addrspace(2) constant i32
@am = external addrspace(2) constant [8 x [4 x <3 x float>]]

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(2)* @i, align 4, !gla.uniform !8
  %1 = getelementptr %s addrspace(2)* @us, i32 0, i32 1, i32 %0
  %2 = load [4 x <3 x float>] addrspace(2)* %1, align 16, !gla.uniform !1
  %gla_constGEP = getelementptr [8 x [4 x <3 x float>]] addrspace(2)* @am, i32 0, i32 4
  %3 = load [4 x <3 x float>] addrspace(2)* %gla_constGEP, align 16, !gla.uniform !9
  %v = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1025, i32 -1, i32 1), !gla.input !13
  %rightColumn = extractvalue [4 x <3 x float>] %3, 0
  %leftColumn = extractvalue [4 x <3 x float>] %2, 0
  %rightColumn2 = extractvalue [4 x <3 x float>] %3, 1
  %leftColumn1 = extractvalue [4 x <3 x float>] %2, 1
  %column = fadd <3 x float> %leftColumn, %rightColumn
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %v, <3 x float> %column)
  %rightColumn5 = extractvalue [4 x <3 x float>] %3, 2
  %leftColumn4 = extractvalue [4 x <3 x float>] %2, 2
  %column3 = fadd <3 x float> %leftColumn1, %rightColumn2
  %dotres12 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %v, <3 x float> %column3)
  %rightColumn8 = extractvalue [4 x <3 x float>] %3, 3
  %leftColumn7 = extractvalue [4 x <3 x float>] %2, 3
  %column6 = fadd <3 x float> %leftColumn4, %rightColumn5
  %dotres14 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %v, <3 x float> %column6)
  %column9 = fadd <3 x float> %leftColumn7, %rightColumn8
  %dotres16 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %v, <3 x float> %column9)
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotres, i32 0, float %dotres12, i32 0, float %dotres14, i32 0, float %dotres16, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %4), !gla.output !11
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !8, !9, !10}
!gla.outputs = !{!11}
!gla.inputs = !{!13}
!gla.noStaticUse = !{!10}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"us", i32 12, %s* @us_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 4, i32 0, i32 1024, null}
!3 = metadata !{metadata !"s", metadata !2, metadata !"count", metadata !4, metadata !"sm", metadata !6}
!4 = metadata !{metadata !"", metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1024, null}
!6 = metadata !{metadata !"", metadata !7}
!7 = metadata !{i32 3, i32 0, i32 1024, null}
!8 = metadata !{metadata !"i", i32 12, i32* @i_typeProxy, metadata !5}
!9 = metadata !{metadata !"am", i32 12, [8 x [4 x <3 x float>]]* @am_typeProxy, metadata !7}
!10 = metadata !{metadata !"m", i32 12, [4 x <3 x float>]* @m_typeProxy, metadata !7}
!11 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!13 = metadata !{metadata !"v", i32 1, <3 x float>* @v_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 120
// LunarGOO output (r722)
struct s {
    int count;
    mat4x3 sm[12];
};

uniform s us;
uniform int i;
uniform mat4x3 am[8];
uniform mat4x3 m;
varying vec3 v;

void main()
{
    vec3 rightColumn = am[4][0];
    vec3 leftColumn = us.sm[i][0];
    vec3 rightColumn2 = am[4][1];
    vec3 leftColumn1 = us.sm[i][1];
    vec3 column = leftColumn + rightColumn;
    float dotres = dot(v, column);
    vec3 rightColumn5 = am[4][2];
    vec3 leftColumn4 = us.sm[i][2];
    vec3 column3 = leftColumn1 + rightColumn2;
    float dotres12 = dot(v, column3);
    vec3 rightColumn8 = am[4][3];
    vec3 leftColumn7 = us.sm[i][3];
    vec3 column6 = leftColumn4 + rightColumn5;
    float dotres14 = dot(v, column6);
    vec3 column9 = leftColumn7 + rightColumn8;
    float dotres16 = dot(v, column9);
    vec4 temp37 = vec4(dotres, dotres12, dotres14, dotres16);
    gl_FragColor = temp37;
    
}

!14 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 120
// LunarGOO output (r722)
struct s {
    int count;
    mat4x3 sm[12];
};

uniform mat4x3 am[8];
uniform s us;
uniform int i;
uniform mat4x3 m;
varying vec3 v;

void main()
{
    vec3 column5 = us.sm[i][0] + am[4][0];
    vec3 column39 = us.sm[i][1] + am[4][1];
    float dotres6 = dot(v, column5);
    vec3 column614 = us.sm[i][2] + am[4][2];
    float dotres1211 = dot(v, column39);
    vec3 column917 = us.sm[i][3] + am[4][3];
    float dotres1416 = dot(v, column614);
    float dotres1619 = dot(v, column917);
    vec4 temp29 = vec4(dotres6, dotres1211, dotres1416, dotres1619);
    gl_FragColor = temp29;
    
}

