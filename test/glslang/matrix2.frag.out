
Top IR:
; ModuleID = 'Top'

@v_shadow = internal global <4 x float> zeroinitializer
@u_shadow = internal global <4 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer
@Color_shadow = internal global <3 x float> zeroinitializer
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %m44 = alloca [4 x <4 x float>]
  %constructed61 = alloca <4 x float>
  %constructed = alloca [4 x <4 x float>]
  %m34 = alloca [4 x <4 x float>]
  %v__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__, <4 x float>* @v_shadow
  %0 = load <4 x float>* @v_shadow
  %1 = extractelement <4 x float> %0, i32 0
  %u__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__, <4 x float>* @u_shadow
  %2 = load <4 x float>* @u_shadow
  %3 = extractelement <4 x float> %2, i32 0
  %4 = fmul float %1, %3
  %v__1 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__1, <4 x float>* @v_shadow
  %5 = load <4 x float>* @v_shadow
  %6 = extractelement <4 x float> %5, i32 0
  %u__2 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__2, <4 x float>* @u_shadow
  %7 = load <4 x float>* @u_shadow
  %8 = extractelement <4 x float> %7, i32 1
  %9 = fmul float %6, %8
  %v__3 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__3, <4 x float>* @v_shadow
  %10 = load <4 x float>* @v_shadow
  %11 = extractelement <4 x float> %10, i32 0
  %u__4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__4, <4 x float>* @u_shadow
  %12 = load <4 x float>* @u_shadow
  %13 = extractelement <4 x float> %12, i32 2
  %14 = fmul float %11, %13
  %v__5 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__5, <4 x float>* @v_shadow
  %15 = load <4 x float>* @v_shadow
  %16 = extractelement <4 x float> %15, i32 0
  %u__6 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__6, <4 x float>* @u_shadow
  %17 = load <4 x float>* @u_shadow
  %18 = extractelement <4 x float> %17, i32 3
  %19 = fmul float %16, %18
  %v__7 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__7, <4 x float>* @v_shadow
  %20 = load <4 x float>* @v_shadow
  %21 = extractelement <4 x float> %20, i32 1
  %u__8 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__8, <4 x float>* @u_shadow
  %22 = load <4 x float>* @u_shadow
  %23 = extractelement <4 x float> %22, i32 0
  %24 = fmul float %21, %23
  %v__9 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__9, <4 x float>* @v_shadow
  %25 = load <4 x float>* @v_shadow
  %26 = extractelement <4 x float> %25, i32 1
  %u__10 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__10, <4 x float>* @u_shadow
  %27 = load <4 x float>* @u_shadow
  %28 = extractelement <4 x float> %27, i32 1
  %29 = fmul float %26, %28
  %v__11 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__11, <4 x float>* @v_shadow
  %30 = load <4 x float>* @v_shadow
  %31 = extractelement <4 x float> %30, i32 1
  %u__12 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__12, <4 x float>* @u_shadow
  %32 = load <4 x float>* @u_shadow
  %33 = extractelement <4 x float> %32, i32 2
  %34 = fmul float %31, %33
  %v__13 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__13, <4 x float>* @v_shadow
  %35 = load <4 x float>* @v_shadow
  %36 = extractelement <4 x float> %35, i32 1
  %u__14 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__14, <4 x float>* @u_shadow
  %37 = load <4 x float>* @u_shadow
  %38 = extractelement <4 x float> %37, i32 3
  %39 = fmul float %36, %38
  %v__15 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__15, <4 x float>* @v_shadow
  %40 = load <4 x float>* @v_shadow
  %41 = extractelement <4 x float> %40, i32 2
  %u__16 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__16, <4 x float>* @u_shadow
  %42 = load <4 x float>* @u_shadow
  %43 = extractelement <4 x float> %42, i32 0
  %44 = fmul float %41, %43
  %v__17 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__17, <4 x float>* @v_shadow
  %45 = load <4 x float>* @v_shadow
  %46 = extractelement <4 x float> %45, i32 2
  %u__18 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__18, <4 x float>* @u_shadow
  %47 = load <4 x float>* @u_shadow
  %48 = extractelement <4 x float> %47, i32 1
  %49 = fmul float %46, %48
  %v__19 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__19, <4 x float>* @v_shadow
  %50 = load <4 x float>* @v_shadow
  %51 = extractelement <4 x float> %50, i32 2
  %u__20 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__20, <4 x float>* @u_shadow
  %52 = load <4 x float>* @u_shadow
  %53 = extractelement <4 x float> %52, i32 2
  %54 = fmul float %51, %53
  %v__21 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__21, <4 x float>* @v_shadow
  %55 = load <4 x float>* @v_shadow
  %56 = extractelement <4 x float> %55, i32 2
  %u__22 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__22, <4 x float>* @u_shadow
  %57 = load <4 x float>* @u_shadow
  %58 = extractelement <4 x float> %57, i32 3
  %59 = fmul float %56, %58
  %v__23 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__23, <4 x float>* @v_shadow
  %60 = load <4 x float>* @v_shadow
  %61 = extractelement <4 x float> %60, i32 3
  %u__24 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__24, <4 x float>* @u_shadow
  %62 = load <4 x float>* @u_shadow
  %63 = extractelement <4 x float> %62, i32 0
  %64 = fmul float %61, %63
  %v__25 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__25, <4 x float>* @v_shadow
  %65 = load <4 x float>* @v_shadow
  %66 = extractelement <4 x float> %65, i32 3
  %u__26 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__26, <4 x float>* @u_shadow
  %67 = load <4 x float>* @u_shadow
  %68 = extractelement <4 x float> %67, i32 1
  %69 = fmul float %66, %68
  %v__27 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__27, <4 x float>* @v_shadow
  %70 = load <4 x float>* @v_shadow
  %71 = extractelement <4 x float> %70, i32 3
  %u__28 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__28, <4 x float>* @u_shadow
  %72 = load <4 x float>* @u_shadow
  %73 = extractelement <4 x float> %72, i32 2
  %74 = fmul float %71, %73
  %v__29 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__29, <4 x float>* @v_shadow
  %75 = load <4 x float>* @v_shadow
  %76 = extractelement <4 x float> %75, i32 3
  %u__30 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__30, <4 x float>* @u_shadow
  %77 = load <4 x float>* @u_shadow
  %78 = extractelement <4 x float> %77, i32 3
  %79 = fmul float %76, %78
  %80 = load [4 x <4 x float>]* %constructed
  %__column = extractvalue [4 x <4 x float>] %80, 0
  %__column31 = insertelement <4 x float> %__column, float %4, i32 0
  %__column32 = insertelement <4 x float> %__column31, float %9, i32 1
  %__column33 = insertelement <4 x float> %__column32, float %14, i32 2
  %__column34 = insertelement <4 x float> %__column33, float %19, i32 3
  %__matrix = insertvalue [4 x <4 x float>] %80, <4 x float> %__column34, 0
  %__column35 = extractvalue [4 x <4 x float>] %80, 1
  %__column36 = insertelement <4 x float> %__column35, float %24, i32 0
  %__column37 = insertelement <4 x float> %__column36, float %29, i32 1
  %__column38 = insertelement <4 x float> %__column37, float %34, i32 2
  %__column39 = insertelement <4 x float> %__column38, float %39, i32 3
  %__matrix40 = insertvalue [4 x <4 x float>] %__matrix, <4 x float> %__column39, 1
  %__column41 = extractvalue [4 x <4 x float>] %80, 2
  %__column42 = insertelement <4 x float> %__column41, float %44, i32 0
  %__column43 = insertelement <4 x float> %__column42, float %49, i32 1
  %__column44 = insertelement <4 x float> %__column43, float %54, i32 2
  %__column45 = insertelement <4 x float> %__column44, float %59, i32 3
  %__matrix46 = insertvalue [4 x <4 x float>] %__matrix40, <4 x float> %__column45, 2
  %__column47 = extractvalue [4 x <4 x float>] %80, 3
  %__column48 = insertelement <4 x float> %__column47, float %64, i32 0
  %__column49 = insertelement <4 x float> %__column48, float %69, i32 1
  %__column50 = insertelement <4 x float> %__column49, float %74, i32 2
  %__column51 = insertelement <4 x float> %__column50, float %79, i32 3
  %__matrix52 = insertvalue [4 x <4 x float>] %__matrix46, <4 x float> %__column51, 3
  store [4 x <4 x float>] %__matrix52, [4 x <4 x float>]* %m34
  %81 = load [4 x <4 x float>]* %m34
  %82 = alloca [4 x <4 x float>]
  %83 = load [4 x <4 x float>]* %82
  %__leftColumn = extractvalue [4 x <4 x float>] %81, 0
  %__column53 = fadd <4 x float> %__leftColumn, <float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %84 = insertvalue [4 x <4 x float>] %83, <4 x float> %__column53, 0
  %__leftColumn54 = extractvalue [4 x <4 x float>] %81, 1
  %__column55 = fadd <4 x float> %__leftColumn54, <float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00>
  %85 = insertvalue [4 x <4 x float>] %84, <4 x float> %__column55, 1
  %__leftColumn56 = extractvalue [4 x <4 x float>] %81, 2
  %__column57 = fadd <4 x float> %__leftColumn56, <float 0.000000e+00, float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00>
  %86 = insertvalue [4 x <4 x float>] %85, <4 x float> %__column57, 2
  %__leftColumn58 = extractvalue [4 x <4 x float>] %81, 3
  %__column59 = fadd <4 x float> %__leftColumn58, <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x4011333340000000>
  %m3460 = insertvalue [4 x <4 x float>] %86, <4 x float> %__column59, 3
  store [4 x <4 x float>] %m3460, [4 x <4 x float>]* %m34
  %Color__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 2, i32 -1, i32 1)
  store <3 x float> %Color__, <3 x float>* @Color_shadow
  %87 = load <3 x float>* @Color_shadow
  %88 = load <4 x float>* %constructed61
  %89 = extractelement <3 x float> %87, i32 0
  %90 = insertelement <4 x float> %88, float %89, i32 0
  %91 = extractelement <3 x float> %87, i32 1
  %92 = insertelement <4 x float> %90, float %91, i32 1
  %93 = extractelement <3 x float> %87, i32 2
  %94 = insertelement <4 x float> %92, float %93, i32 2
  %FragColor_shadow = insertelement <4 x float> %94, float 1.000000e+00, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  %95 = load [4 x <4 x float>] addrspace(2)* @um43
  %96 = load <4 x float>* @FragColor_shadow
  %97 = alloca <4 x float>
  %98 = load <4 x float>* %97
  %__column62 = extractvalue [4 x <4 x float>] %95, 0
  %__dot = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %96, <4 x float> %__column62)
  %99 = insertelement <4 x float> %98, float %__dot, i32 0
  %__column63 = extractvalue [4 x <4 x float>] %95, 1
  %__dot64 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %96, <4 x float> %__column63)
  %100 = insertelement <4 x float> %99, float %__dot64, i32 1
  %__column65 = extractvalue [4 x <4 x float>] %95, 2
  %__dot66 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %96, <4 x float> %__column65)
  %101 = insertelement <4 x float> %100, float %__dot66, i32 2
  %__column67 = extractvalue [4 x <4 x float>] %95, 3
  %__dot68 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %96, <4 x float> %__column67)
  %FragColor_shadow69 = insertelement <4 x float> %101, float %__dot68, i32 3
  store <4 x float> %FragColor_shadow69, <4 x float>* @FragColor_shadow
  %v__70 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__70, <4 x float>* @v_shadow
  %102 = load <4 x float>* @v_shadow
  %103 = extractelement <4 x float> %102, i32 0
  %104 = load [4 x <4 x float>]* %m34
  %105 = alloca [4 x <4 x float>]
  %106 = load [4 x <4 x float>]* %105
  %__column71 = extractvalue [4 x <4 x float>] %104, 0
  %__row = extractelement <4 x float> %__column71, i32 0
  %107 = fmul float %103, %__row
  %108 = insertelement <4 x float> %__column71, float %107, i32 0
  %__row72 = extractelement <4 x float> %108, i32 1
  %109 = fmul float %103, %__row72
  %110 = insertelement <4 x float> %108, float %109, i32 1
  %__row73 = extractelement <4 x float> %110, i32 2
  %111 = fmul float %103, %__row73
  %112 = insertelement <4 x float> %110, float %111, i32 2
  %__row74 = extractelement <4 x float> %112, i32 3
  %113 = fmul float %103, %__row74
  %114 = insertelement <4 x float> %112, float %113, i32 3
  %115 = insertvalue [4 x <4 x float>] %106, <4 x float> %114, 0
  %__column75 = extractvalue [4 x <4 x float>] %104, 1
  %__row76 = extractelement <4 x float> %__column75, i32 0
  %116 = fmul float %103, %__row76
  %117 = insertelement <4 x float> %__column75, float %116, i32 0
  %__row77 = extractelement <4 x float> %117, i32 1
  %118 = fmul float %103, %__row77
  %119 = insertelement <4 x float> %117, float %118, i32 1
  %__row78 = extractelement <4 x float> %119, i32 2
  %120 = fmul float %103, %__row78
  %121 = insertelement <4 x float> %119, float %120, i32 2
  %__row79 = extractelement <4 x float> %121, i32 3
  %122 = fmul float %103, %__row79
  %123 = insertelement <4 x float> %121, float %122, i32 3
  %124 = insertvalue [4 x <4 x float>] %115, <4 x float> %123, 1
  %__column80 = extractvalue [4 x <4 x float>] %104, 2
  %__row81 = extractelement <4 x float> %__column80, i32 0
  %125 = fmul float %103, %__row81
  %126 = insertelement <4 x float> %__column80, float %125, i32 0
  %__row82 = extractelement <4 x float> %126, i32 1
  %127 = fmul float %103, %__row82
  %128 = insertelement <4 x float> %126, float %127, i32 1
  %__row83 = extractelement <4 x float> %128, i32 2
  %129 = fmul float %103, %__row83
  %130 = insertelement <4 x float> %128, float %129, i32 2
  %__row84 = extractelement <4 x float> %130, i32 3
  %131 = fmul float %103, %__row84
  %132 = insertelement <4 x float> %130, float %131, i32 3
  %133 = insertvalue [4 x <4 x float>] %124, <4 x float> %132, 2
  %__column85 = extractvalue [4 x <4 x float>] %104, 3
  %__row86 = extractelement <4 x float> %__column85, i32 0
  %134 = fmul float %103, %__row86
  %135 = insertelement <4 x float> %__column85, float %134, i32 0
  %__row87 = extractelement <4 x float> %135, i32 1
  %136 = fmul float %103, %__row87
  %137 = insertelement <4 x float> %135, float %136, i32 1
  %__row88 = extractelement <4 x float> %137, i32 2
  %138 = fmul float %103, %__row88
  %139 = insertelement <4 x float> %137, float %138, i32 2
  %__row89 = extractelement <4 x float> %139, i32 3
  %140 = fmul float %103, %__row89
  %141 = insertelement <4 x float> %139, float %140, i32 3
  %m3490 = insertvalue [4 x <4 x float>] %133, <4 x float> %141, 3
  store [4 x <4 x float>] %m3490, [4 x <4 x float>]* %m34
  store [4 x <4 x float>] [<4 x float> <float 0x4012CCCCC0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float> <float 0.000000e+00, float 0x4012CCCCC0000000, float 0.000000e+00, float 0.000000e+00>, <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0x4012CCCCC0000000, float 0.000000e+00>, <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x4012CCCCC0000000>], [4 x <4 x float>]* %m44
  %142 = load [4 x <4 x float>] addrspace(2)* @um43
  %143 = load [4 x <4 x float>]* %m44
  %144 = alloca [4 x <4 x float>]
  %__resultMatrix = load [4 x <4 x float>]* %144
  %145 = alloca <4 x float>
  %__tempColumn = load <4 x float>* %145
  %__rightColumn = extractvalue [4 x <4 x float>] %142, 0
  %__leftColumn91 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp = extractelement <4 x float> %__leftColumn91, i32 0
  %__rightComp = extractelement <4 x float> %__rightColumn, i32 0
  %__product = fmul float %__leftComp, %__rightComp
  %__leftColumn92 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp93 = extractelement <4 x float> %__leftColumn92, i32 0
  %__rightComp94 = extractelement <4 x float> %__rightColumn, i32 1
  %__product95 = fmul float %__leftComp93, %__rightComp94
  %__dotProduct = fadd float %__product, %__product95
  %__leftColumn96 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp97 = extractelement <4 x float> %__leftColumn96, i32 0
  %__rightComp98 = extractelement <4 x float> %__rightColumn, i32 2
  %__product99 = fmul float %__leftComp97, %__rightComp98
  %__dotProduct100 = fadd float %__dotProduct, %__product99
  %__leftColumn101 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp102 = extractelement <4 x float> %__leftColumn101, i32 0
  %__rightComp103 = extractelement <4 x float> %__rightColumn, i32 3
  %__product104 = fmul float %__leftComp102, %__rightComp103
  %__dotProduct105 = fadd float %__dotProduct100, %__product104
  %__column106 = insertelement <4 x float> %__tempColumn, float %__dotProduct105, i32 0
  %__leftColumn107 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp108 = extractelement <4 x float> %__leftColumn107, i32 1
  %__rightComp109 = extractelement <4 x float> %__rightColumn, i32 0
  %__product110 = fmul float %__leftComp108, %__rightComp109
  %__leftColumn111 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp112 = extractelement <4 x float> %__leftColumn111, i32 1
  %__rightComp113 = extractelement <4 x float> %__rightColumn, i32 1
  %__product114 = fmul float %__leftComp112, %__rightComp113
  %__dotProduct115 = fadd float %__product110, %__product114
  %__leftColumn116 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp117 = extractelement <4 x float> %__leftColumn116, i32 1
  %__rightComp118 = extractelement <4 x float> %__rightColumn, i32 2
  %__product119 = fmul float %__leftComp117, %__rightComp118
  %__dotProduct120 = fadd float %__dotProduct115, %__product119
  %__leftColumn121 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp122 = extractelement <4 x float> %__leftColumn121, i32 1
  %__rightComp123 = extractelement <4 x float> %__rightColumn, i32 3
  %__product124 = fmul float %__leftComp122, %__rightComp123
  %__dotProduct125 = fadd float %__dotProduct120, %__product124
  %__column126 = insertelement <4 x float> %__column106, float %__dotProduct125, i32 1
  %__leftColumn127 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp128 = extractelement <4 x float> %__leftColumn127, i32 2
  %__rightComp129 = extractelement <4 x float> %__rightColumn, i32 0
  %__product130 = fmul float %__leftComp128, %__rightComp129
  %__leftColumn131 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp132 = extractelement <4 x float> %__leftColumn131, i32 2
  %__rightComp133 = extractelement <4 x float> %__rightColumn, i32 1
  %__product134 = fmul float %__leftComp132, %__rightComp133
  %__dotProduct135 = fadd float %__product130, %__product134
  %__leftColumn136 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp137 = extractelement <4 x float> %__leftColumn136, i32 2
  %__rightComp138 = extractelement <4 x float> %__rightColumn, i32 2
  %__product139 = fmul float %__leftComp137, %__rightComp138
  %__dotProduct140 = fadd float %__dotProduct135, %__product139
  %__leftColumn141 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp142 = extractelement <4 x float> %__leftColumn141, i32 2
  %__rightComp143 = extractelement <4 x float> %__rightColumn, i32 3
  %__product144 = fmul float %__leftComp142, %__rightComp143
  %__dotProduct145 = fadd float %__dotProduct140, %__product144
  %__column146 = insertelement <4 x float> %__column126, float %__dotProduct145, i32 2
  %__leftColumn147 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp148 = extractelement <4 x float> %__leftColumn147, i32 3
  %__rightComp149 = extractelement <4 x float> %__rightColumn, i32 0
  %__product150 = fmul float %__leftComp148, %__rightComp149
  %__leftColumn151 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp152 = extractelement <4 x float> %__leftColumn151, i32 3
  %__rightComp153 = extractelement <4 x float> %__rightColumn, i32 1
  %__product154 = fmul float %__leftComp152, %__rightComp153
  %__dotProduct155 = fadd float %__product150, %__product154
  %__leftColumn156 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp157 = extractelement <4 x float> %__leftColumn156, i32 3
  %__rightComp158 = extractelement <4 x float> %__rightColumn, i32 2
  %__product159 = fmul float %__leftComp157, %__rightComp158
  %__dotProduct160 = fadd float %__dotProduct155, %__product159
  %__leftColumn161 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp162 = extractelement <4 x float> %__leftColumn161, i32 3
  %__rightComp163 = extractelement <4 x float> %__rightColumn, i32 3
  %__product164 = fmul float %__leftComp162, %__rightComp163
  %__dotProduct165 = fadd float %__dotProduct160, %__product164
  %__column166 = insertelement <4 x float> %__column146, float %__dotProduct165, i32 3
  %__resultMatrix167 = insertvalue [4 x <4 x float>] %__resultMatrix, <4 x float> %__column166, 0
  %__rightColumn168 = extractvalue [4 x <4 x float>] %142, 1
  %__leftColumn169 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp170 = extractelement <4 x float> %__leftColumn169, i32 0
  %__rightComp171 = extractelement <4 x float> %__rightColumn168, i32 0
  %__product172 = fmul float %__leftComp170, %__rightComp171
  %__leftColumn173 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp174 = extractelement <4 x float> %__leftColumn173, i32 0
  %__rightComp175 = extractelement <4 x float> %__rightColumn168, i32 1
  %__product176 = fmul float %__leftComp174, %__rightComp175
  %__dotProduct177 = fadd float %__product172, %__product176
  %__leftColumn178 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp179 = extractelement <4 x float> %__leftColumn178, i32 0
  %__rightComp180 = extractelement <4 x float> %__rightColumn168, i32 2
  %__product181 = fmul float %__leftComp179, %__rightComp180
  %__dotProduct182 = fadd float %__dotProduct177, %__product181
  %__leftColumn183 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp184 = extractelement <4 x float> %__leftColumn183, i32 0
  %__rightComp185 = extractelement <4 x float> %__rightColumn168, i32 3
  %__product186 = fmul float %__leftComp184, %__rightComp185
  %__dotProduct187 = fadd float %__dotProduct182, %__product186
  %__column188 = insertelement <4 x float> %__column166, float %__dotProduct187, i32 0
  %__leftColumn189 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp190 = extractelement <4 x float> %__leftColumn189, i32 1
  %__rightComp191 = extractelement <4 x float> %__rightColumn168, i32 0
  %__product192 = fmul float %__leftComp190, %__rightComp191
  %__leftColumn193 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp194 = extractelement <4 x float> %__leftColumn193, i32 1
  %__rightComp195 = extractelement <4 x float> %__rightColumn168, i32 1
  %__product196 = fmul float %__leftComp194, %__rightComp195
  %__dotProduct197 = fadd float %__product192, %__product196
  %__leftColumn198 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp199 = extractelement <4 x float> %__leftColumn198, i32 1
  %__rightComp200 = extractelement <4 x float> %__rightColumn168, i32 2
  %__product201 = fmul float %__leftComp199, %__rightComp200
  %__dotProduct202 = fadd float %__dotProduct197, %__product201
  %__leftColumn203 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp204 = extractelement <4 x float> %__leftColumn203, i32 1
  %__rightComp205 = extractelement <4 x float> %__rightColumn168, i32 3
  %__product206 = fmul float %__leftComp204, %__rightComp205
  %__dotProduct207 = fadd float %__dotProduct202, %__product206
  %__column208 = insertelement <4 x float> %__column188, float %__dotProduct207, i32 1
  %__leftColumn209 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp210 = extractelement <4 x float> %__leftColumn209, i32 2
  %__rightComp211 = extractelement <4 x float> %__rightColumn168, i32 0
  %__product212 = fmul float %__leftComp210, %__rightComp211
  %__leftColumn213 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp214 = extractelement <4 x float> %__leftColumn213, i32 2
  %__rightComp215 = extractelement <4 x float> %__rightColumn168, i32 1
  %__product216 = fmul float %__leftComp214, %__rightComp215
  %__dotProduct217 = fadd float %__product212, %__product216
  %__leftColumn218 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp219 = extractelement <4 x float> %__leftColumn218, i32 2
  %__rightComp220 = extractelement <4 x float> %__rightColumn168, i32 2
  %__product221 = fmul float %__leftComp219, %__rightComp220
  %__dotProduct222 = fadd float %__dotProduct217, %__product221
  %__leftColumn223 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp224 = extractelement <4 x float> %__leftColumn223, i32 2
  %__rightComp225 = extractelement <4 x float> %__rightColumn168, i32 3
  %__product226 = fmul float %__leftComp224, %__rightComp225
  %__dotProduct227 = fadd float %__dotProduct222, %__product226
  %__column228 = insertelement <4 x float> %__column208, float %__dotProduct227, i32 2
  %__leftColumn229 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp230 = extractelement <4 x float> %__leftColumn229, i32 3
  %__rightComp231 = extractelement <4 x float> %__rightColumn168, i32 0
  %__product232 = fmul float %__leftComp230, %__rightComp231
  %__leftColumn233 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp234 = extractelement <4 x float> %__leftColumn233, i32 3
  %__rightComp235 = extractelement <4 x float> %__rightColumn168, i32 1
  %__product236 = fmul float %__leftComp234, %__rightComp235
  %__dotProduct237 = fadd float %__product232, %__product236
  %__leftColumn238 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp239 = extractelement <4 x float> %__leftColumn238, i32 3
  %__rightComp240 = extractelement <4 x float> %__rightColumn168, i32 2
  %__product241 = fmul float %__leftComp239, %__rightComp240
  %__dotProduct242 = fadd float %__dotProduct237, %__product241
  %__leftColumn243 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp244 = extractelement <4 x float> %__leftColumn243, i32 3
  %__rightComp245 = extractelement <4 x float> %__rightColumn168, i32 3
  %__product246 = fmul float %__leftComp244, %__rightComp245
  %__dotProduct247 = fadd float %__dotProduct242, %__product246
  %__column248 = insertelement <4 x float> %__column228, float %__dotProduct247, i32 3
  %__resultMatrix249 = insertvalue [4 x <4 x float>] %__resultMatrix167, <4 x float> %__column248, 1
  %__rightColumn250 = extractvalue [4 x <4 x float>] %142, 2
  %__leftColumn251 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp252 = extractelement <4 x float> %__leftColumn251, i32 0
  %__rightComp253 = extractelement <4 x float> %__rightColumn250, i32 0
  %__product254 = fmul float %__leftComp252, %__rightComp253
  %__leftColumn255 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp256 = extractelement <4 x float> %__leftColumn255, i32 0
  %__rightComp257 = extractelement <4 x float> %__rightColumn250, i32 1
  %__product258 = fmul float %__leftComp256, %__rightComp257
  %__dotProduct259 = fadd float %__product254, %__product258
  %__leftColumn260 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp261 = extractelement <4 x float> %__leftColumn260, i32 0
  %__rightComp262 = extractelement <4 x float> %__rightColumn250, i32 2
  %__product263 = fmul float %__leftComp261, %__rightComp262
  %__dotProduct264 = fadd float %__dotProduct259, %__product263
  %__leftColumn265 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp266 = extractelement <4 x float> %__leftColumn265, i32 0
  %__rightComp267 = extractelement <4 x float> %__rightColumn250, i32 3
  %__product268 = fmul float %__leftComp266, %__rightComp267
  %__dotProduct269 = fadd float %__dotProduct264, %__product268
  %__column270 = insertelement <4 x float> %__column248, float %__dotProduct269, i32 0
  %__leftColumn271 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp272 = extractelement <4 x float> %__leftColumn271, i32 1
  %__rightComp273 = extractelement <4 x float> %__rightColumn250, i32 0
  %__product274 = fmul float %__leftComp272, %__rightComp273
  %__leftColumn275 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp276 = extractelement <4 x float> %__leftColumn275, i32 1
  %__rightComp277 = extractelement <4 x float> %__rightColumn250, i32 1
  %__product278 = fmul float %__leftComp276, %__rightComp277
  %__dotProduct279 = fadd float %__product274, %__product278
  %__leftColumn280 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp281 = extractelement <4 x float> %__leftColumn280, i32 1
  %__rightComp282 = extractelement <4 x float> %__rightColumn250, i32 2
  %__product283 = fmul float %__leftComp281, %__rightComp282
  %__dotProduct284 = fadd float %__dotProduct279, %__product283
  %__leftColumn285 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp286 = extractelement <4 x float> %__leftColumn285, i32 1
  %__rightComp287 = extractelement <4 x float> %__rightColumn250, i32 3
  %__product288 = fmul float %__leftComp286, %__rightComp287
  %__dotProduct289 = fadd float %__dotProduct284, %__product288
  %__column290 = insertelement <4 x float> %__column270, float %__dotProduct289, i32 1
  %__leftColumn291 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp292 = extractelement <4 x float> %__leftColumn291, i32 2
  %__rightComp293 = extractelement <4 x float> %__rightColumn250, i32 0
  %__product294 = fmul float %__leftComp292, %__rightComp293
  %__leftColumn295 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp296 = extractelement <4 x float> %__leftColumn295, i32 2
  %__rightComp297 = extractelement <4 x float> %__rightColumn250, i32 1
  %__product298 = fmul float %__leftComp296, %__rightComp297
  %__dotProduct299 = fadd float %__product294, %__product298
  %__leftColumn300 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp301 = extractelement <4 x float> %__leftColumn300, i32 2
  %__rightComp302 = extractelement <4 x float> %__rightColumn250, i32 2
  %__product303 = fmul float %__leftComp301, %__rightComp302
  %__dotProduct304 = fadd float %__dotProduct299, %__product303
  %__leftColumn305 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp306 = extractelement <4 x float> %__leftColumn305, i32 2
  %__rightComp307 = extractelement <4 x float> %__rightColumn250, i32 3
  %__product308 = fmul float %__leftComp306, %__rightComp307
  %__dotProduct309 = fadd float %__dotProduct304, %__product308
  %__column310 = insertelement <4 x float> %__column290, float %__dotProduct309, i32 2
  %__leftColumn311 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp312 = extractelement <4 x float> %__leftColumn311, i32 3
  %__rightComp313 = extractelement <4 x float> %__rightColumn250, i32 0
  %__product314 = fmul float %__leftComp312, %__rightComp313
  %__leftColumn315 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp316 = extractelement <4 x float> %__leftColumn315, i32 3
  %__rightComp317 = extractelement <4 x float> %__rightColumn250, i32 1
  %__product318 = fmul float %__leftComp316, %__rightComp317
  %__dotProduct319 = fadd float %__product314, %__product318
  %__leftColumn320 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp321 = extractelement <4 x float> %__leftColumn320, i32 3
  %__rightComp322 = extractelement <4 x float> %__rightColumn250, i32 2
  %__product323 = fmul float %__leftComp321, %__rightComp322
  %__dotProduct324 = fadd float %__dotProduct319, %__product323
  %__leftColumn325 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp326 = extractelement <4 x float> %__leftColumn325, i32 3
  %__rightComp327 = extractelement <4 x float> %__rightColumn250, i32 3
  %__product328 = fmul float %__leftComp326, %__rightComp327
  %__dotProduct329 = fadd float %__dotProduct324, %__product328
  %__column330 = insertelement <4 x float> %__column310, float %__dotProduct329, i32 3
  %__resultMatrix331 = insertvalue [4 x <4 x float>] %__resultMatrix249, <4 x float> %__column330, 2
  %__rightColumn332 = extractvalue [4 x <4 x float>] %142, 3
  %__leftColumn333 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp334 = extractelement <4 x float> %__leftColumn333, i32 0
  %__rightComp335 = extractelement <4 x float> %__rightColumn332, i32 0
  %__product336 = fmul float %__leftComp334, %__rightComp335
  %__leftColumn337 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp338 = extractelement <4 x float> %__leftColumn337, i32 0
  %__rightComp339 = extractelement <4 x float> %__rightColumn332, i32 1
  %__product340 = fmul float %__leftComp338, %__rightComp339
  %__dotProduct341 = fadd float %__product336, %__product340
  %__leftColumn342 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp343 = extractelement <4 x float> %__leftColumn342, i32 0
  %__rightComp344 = extractelement <4 x float> %__rightColumn332, i32 2
  %__product345 = fmul float %__leftComp343, %__rightComp344
  %__dotProduct346 = fadd float %__dotProduct341, %__product345
  %__leftColumn347 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp348 = extractelement <4 x float> %__leftColumn347, i32 0
  %__rightComp349 = extractelement <4 x float> %__rightColumn332, i32 3
  %__product350 = fmul float %__leftComp348, %__rightComp349
  %__dotProduct351 = fadd float %__dotProduct346, %__product350
  %__column352 = insertelement <4 x float> %__column330, float %__dotProduct351, i32 0
  %__leftColumn353 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp354 = extractelement <4 x float> %__leftColumn353, i32 1
  %__rightComp355 = extractelement <4 x float> %__rightColumn332, i32 0
  %__product356 = fmul float %__leftComp354, %__rightComp355
  %__leftColumn357 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp358 = extractelement <4 x float> %__leftColumn357, i32 1
  %__rightComp359 = extractelement <4 x float> %__rightColumn332, i32 1
  %__product360 = fmul float %__leftComp358, %__rightComp359
  %__dotProduct361 = fadd float %__product356, %__product360
  %__leftColumn362 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp363 = extractelement <4 x float> %__leftColumn362, i32 1
  %__rightComp364 = extractelement <4 x float> %__rightColumn332, i32 2
  %__product365 = fmul float %__leftComp363, %__rightComp364
  %__dotProduct366 = fadd float %__dotProduct361, %__product365
  %__leftColumn367 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp368 = extractelement <4 x float> %__leftColumn367, i32 1
  %__rightComp369 = extractelement <4 x float> %__rightColumn332, i32 3
  %__product370 = fmul float %__leftComp368, %__rightComp369
  %__dotProduct371 = fadd float %__dotProduct366, %__product370
  %__column372 = insertelement <4 x float> %__column352, float %__dotProduct371, i32 1
  %__leftColumn373 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp374 = extractelement <4 x float> %__leftColumn373, i32 2
  %__rightComp375 = extractelement <4 x float> %__rightColumn332, i32 0
  %__product376 = fmul float %__leftComp374, %__rightComp375
  %__leftColumn377 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp378 = extractelement <4 x float> %__leftColumn377, i32 2
  %__rightComp379 = extractelement <4 x float> %__rightColumn332, i32 1
  %__product380 = fmul float %__leftComp378, %__rightComp379
  %__dotProduct381 = fadd float %__product376, %__product380
  %__leftColumn382 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp383 = extractelement <4 x float> %__leftColumn382, i32 2
  %__rightComp384 = extractelement <4 x float> %__rightColumn332, i32 2
  %__product385 = fmul float %__leftComp383, %__rightComp384
  %__dotProduct386 = fadd float %__dotProduct381, %__product385
  %__leftColumn387 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp388 = extractelement <4 x float> %__leftColumn387, i32 2
  %__rightComp389 = extractelement <4 x float> %__rightColumn332, i32 3
  %__product390 = fmul float %__leftComp388, %__rightComp389
  %__dotProduct391 = fadd float %__dotProduct386, %__product390
  %__column392 = insertelement <4 x float> %__column372, float %__dotProduct391, i32 2
  %__leftColumn393 = extractvalue [4 x <4 x float>] %143, 0
  %__leftComp394 = extractelement <4 x float> %__leftColumn393, i32 3
  %__rightComp395 = extractelement <4 x float> %__rightColumn332, i32 0
  %__product396 = fmul float %__leftComp394, %__rightComp395
  %__leftColumn397 = extractvalue [4 x <4 x float>] %143, 1
  %__leftComp398 = extractelement <4 x float> %__leftColumn397, i32 3
  %__rightComp399 = extractelement <4 x float> %__rightColumn332, i32 1
  %__product400 = fmul float %__leftComp398, %__rightComp399
  %__dotProduct401 = fadd float %__product396, %__product400
  %__leftColumn402 = extractvalue [4 x <4 x float>] %143, 2
  %__leftComp403 = extractelement <4 x float> %__leftColumn402, i32 3
  %__rightComp404 = extractelement <4 x float> %__rightColumn332, i32 2
  %__product405 = fmul float %__leftComp403, %__rightComp404
  %__dotProduct406 = fadd float %__dotProduct401, %__product405
  %__leftColumn407 = extractvalue [4 x <4 x float>] %143, 3
  %__leftComp408 = extractelement <4 x float> %__leftColumn407, i32 3
  %__rightComp409 = extractelement <4 x float> %__rightColumn332, i32 3
  %__product410 = fmul float %__leftComp408, %__rightComp409
  %__dotProduct411 = fadd float %__dotProduct406, %__product410
  %__column412 = insertelement <4 x float> %__column392, float %__dotProduct411, i32 3
  %__resultMatrix413 = insertvalue [4 x <4 x float>] %__resultMatrix331, <4 x float> %__column412, 3
  store [4 x <4 x float>] %__resultMatrix413, [4 x <4 x float>]* %m44
  %146 = load [4 x <4 x float>]* %m44
  %147 = alloca [4 x <4 x float>]
  %148 = load [4 x <4 x float>]* %147
  %__column414 = extractvalue [4 x <4 x float>] %146, 0
  %__row415 = extractelement <4 x float> %__column414, i32 0
  %149 = fsub float 0.000000e+00, %__row415
  %150 = insertelement <4 x float> %__column414, float %149, i32 0
  %__row416 = extractelement <4 x float> %150, i32 1
  %151 = fsub float 0.000000e+00, %__row416
  %152 = insertelement <4 x float> %150, float %151, i32 1
  %__row417 = extractelement <4 x float> %152, i32 2
  %153 = fsub float 0.000000e+00, %__row417
  %154 = insertelement <4 x float> %152, float %153, i32 2
  %__row418 = extractelement <4 x float> %154, i32 3
  %155 = fsub float 0.000000e+00, %__row418
  %156 = insertelement <4 x float> %154, float %155, i32 3
  %157 = insertvalue [4 x <4 x float>] %148, <4 x float> %156, 0
  %__column419 = extractvalue [4 x <4 x float>] %146, 1
  %__row420 = extractelement <4 x float> %__column419, i32 0
  %158 = fsub float 0.000000e+00, %__row420
  %159 = insertelement <4 x float> %__column419, float %158, i32 0
  %__row421 = extractelement <4 x float> %159, i32 1
  %160 = fsub float 0.000000e+00, %__row421
  %161 = insertelement <4 x float> %159, float %160, i32 1
  %__row422 = extractelement <4 x float> %161, i32 2
  %162 = fsub float 0.000000e+00, %__row422
  %163 = insertelement <4 x float> %161, float %162, i32 2
  %__row423 = extractelement <4 x float> %163, i32 3
  %164 = fsub float 0.000000e+00, %__row423
  %165 = insertelement <4 x float> %163, float %164, i32 3
  %166 = insertvalue [4 x <4 x float>] %157, <4 x float> %165, 1
  %__column424 = extractvalue [4 x <4 x float>] %146, 2
  %__row425 = extractelement <4 x float> %__column424, i32 0
  %167 = fsub float 0.000000e+00, %__row425
  %168 = insertelement <4 x float> %__column424, float %167, i32 0
  %__row426 = extractelement <4 x float> %168, i32 1
  %169 = fsub float 0.000000e+00, %__row426
  %170 = insertelement <4 x float> %168, float %169, i32 1
  %__row427 = extractelement <4 x float> %170, i32 2
  %171 = fsub float 0.000000e+00, %__row427
  %172 = insertelement <4 x float> %170, float %171, i32 2
  %__row428 = extractelement <4 x float> %172, i32 3
  %173 = fsub float 0.000000e+00, %__row428
  %174 = insertelement <4 x float> %172, float %173, i32 3
  %175 = insertvalue [4 x <4 x float>] %166, <4 x float> %174, 2
  %__column429 = extractvalue [4 x <4 x float>] %146, 3
  %__row430 = extractelement <4 x float> %__column429, i32 0
  %176 = fsub float 0.000000e+00, %__row430
  %177 = insertelement <4 x float> %__column429, float %176, i32 0
  %__row431 = extractelement <4 x float> %177, i32 1
  %178 = fsub float 0.000000e+00, %__row431
  %179 = insertelement <4 x float> %177, float %178, i32 1
  %__row432 = extractelement <4 x float> %179, i32 2
  %180 = fsub float 0.000000e+00, %__row432
  %181 = insertelement <4 x float> %179, float %180, i32 2
  %__row433 = extractelement <4 x float> %181, i32 3
  %182 = fsub float 0.000000e+00, %__row433
  %183 = insertelement <4 x float> %181, float %182, i32 3
  %184 = insertvalue [4 x <4 x float>] %175, <4 x float> %183, 3
  %u__434 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %u__434, <4 x float>* @u_shadow
  %185 = load <4 x float>* @u_shadow
  %186 = alloca <4 x float>
  %187 = load <4 x float>* %186
  %__component = extractelement <4 x float> %185, i32 0
  %__component435 = extractelement <4 x float> %185, i32 1
  %__component436 = extractelement <4 x float> %185, i32 2
  %__component437 = extractelement <4 x float> %185, i32 3
  %__column438 = extractvalue [4 x <4 x float>] %184, 0
  %__element = extractelement <4 x float> %__column438, i32 0
  %__product439 = fmul float %__element, %__component
  %__column440 = extractvalue [4 x <4 x float>] %184, 1
  %__element441 = extractelement <4 x float> %__column440, i32 0
  %__product442 = fmul float %__element441, %__component435
  %__dotProduct443 = fadd float %__product439, %__product442
  %__column444 = extractvalue [4 x <4 x float>] %184, 2
  %__element445 = extractelement <4 x float> %__column444, i32 0
  %__product446 = fmul float %__element445, %__component436
  %__dotProduct447 = fadd float %__dotProduct443, %__product446
  %__column448 = extractvalue [4 x <4 x float>] %184, 3
  %__element449 = extractelement <4 x float> %__column448, i32 0
  %__product450 = fmul float %__element449, %__component437
  %__dotProduct451 = fadd float %__dotProduct447, %__product450
  %188 = insertelement <4 x float> %187, float %__dotProduct451, i32 0
  %__column452 = extractvalue [4 x <4 x float>] %184, 0
  %__element453 = extractelement <4 x float> %__column452, i32 1
  %__product454 = fmul float %__element453, %__component
  %__column455 = extractvalue [4 x <4 x float>] %184, 1
  %__element456 = extractelement <4 x float> %__column455, i32 1
  %__product457 = fmul float %__element456, %__component435
  %__dotProduct458 = fadd float %__product454, %__product457
  %__column459 = extractvalue [4 x <4 x float>] %184, 2
  %__element460 = extractelement <4 x float> %__column459, i32 1
  %__product461 = fmul float %__element460, %__component436
  %__dotProduct462 = fadd float %__dotProduct458, %__product461
  %__column463 = extractvalue [4 x <4 x float>] %184, 3
  %__element464 = extractelement <4 x float> %__column463, i32 1
  %__product465 = fmul float %__element464, %__component437
  %__dotProduct466 = fadd float %__dotProduct462, %__product465
  %189 = insertelement <4 x float> %188, float %__dotProduct466, i32 1
  %__column467 = extractvalue [4 x <4 x float>] %184, 0
  %__element468 = extractelement <4 x float> %__column467, i32 2
  %__product469 = fmul float %__element468, %__component
  %__column470 = extractvalue [4 x <4 x float>] %184, 1
  %__element471 = extractelement <4 x float> %__column470, i32 2
  %__product472 = fmul float %__element471, %__component435
  %__dotProduct473 = fadd float %__product469, %__product472
  %__column474 = extractvalue [4 x <4 x float>] %184, 2
  %__element475 = extractelement <4 x float> %__column474, i32 2
  %__product476 = fmul float %__element475, %__component436
  %__dotProduct477 = fadd float %__dotProduct473, %__product476
  %__column478 = extractvalue [4 x <4 x float>] %184, 3
  %__element479 = extractelement <4 x float> %__column478, i32 2
  %__product480 = fmul float %__element479, %__component437
  %__dotProduct481 = fadd float %__dotProduct477, %__product480
  %190 = insertelement <4 x float> %189, float %__dotProduct481, i32 2
  %__column482 = extractvalue [4 x <4 x float>] %184, 0
  %__element483 = extractelement <4 x float> %__column482, i32 3
  %__product484 = fmul float %__element483, %__component
  %__column485 = extractvalue [4 x <4 x float>] %184, 1
  %__element486 = extractelement <4 x float> %__column485, i32 3
  %__product487 = fmul float %__element486, %__component435
  %__dotProduct488 = fadd float %__product484, %__product487
  %__column489 = extractvalue [4 x <4 x float>] %184, 2
  %__element490 = extractelement <4 x float> %__column489, i32 3
  %__product491 = fmul float %__element490, %__component436
  %__dotProduct492 = fadd float %__dotProduct488, %__product491
  %__column493 = extractvalue [4 x <4 x float>] %184, 3
  %__element494 = extractelement <4 x float> %__column493, i32 3
  %__product495 = fmul float %__element494, %__component437
  %__dotProduct496 = fadd float %__dotProduct492, %__product495
  %191 = insertelement <4 x float> %190, float %__dotProduct496, i32 3
  %192 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow497 = fadd <4 x float> %192, %191
  store <4 x float> %FragColor_shadow497, <4 x float>* @FragColor_shadow
  %193 = load [4 x <4 x float>]* %m44
  %194 = load [4 x <4 x float>]* %m44
  %195 = alloca [4 x <4 x float>]
  %196 = load [4 x <4 x float>]* %195
  %__leftColumn498 = extractvalue [4 x <4 x float>] %193, 0
  %__rightColumn499 = extractvalue [4 x <4 x float>] %194, 0
  %__column500 = fmul <4 x float> %__leftColumn498, %__rightColumn499
  %197 = insertvalue [4 x <4 x float>] %196, <4 x float> %__column500, 0
  %__leftColumn501 = extractvalue [4 x <4 x float>] %193, 1
  %__rightColumn502 = extractvalue [4 x <4 x float>] %194, 1
  %__column503 = fmul <4 x float> %__leftColumn501, %__rightColumn502
  %198 = insertvalue [4 x <4 x float>] %197, <4 x float> %__column503, 1
  %__leftColumn504 = extractvalue [4 x <4 x float>] %193, 2
  %__rightColumn505 = extractvalue [4 x <4 x float>] %194, 2
  %__column506 = fmul <4 x float> %__leftColumn504, %__rightColumn505
  %199 = insertvalue [4 x <4 x float>] %198, <4 x float> %__column506, 2
  %__leftColumn507 = extractvalue [4 x <4 x float>] %193, 3
  %__rightColumn508 = extractvalue [4 x <4 x float>] %194, 3
  %__column509 = fmul <4 x float> %__leftColumn507, %__rightColumn508
  %200 = insertvalue [4 x <4 x float>] %199, <4 x float> %__column509, 3
  %201 = load <4 x float>* @FragColor_shadow
  %202 = alloca <4 x float>
  %203 = load <4 x float>* %202
  %__column510 = extractvalue [4 x <4 x float>] %200, 0
  %__dot511 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %201, <4 x float> %__column510)
  %204 = insertelement <4 x float> %203, float %__dot511, i32 0
  %__column512 = extractvalue [4 x <4 x float>] %200, 1
  %__dot513 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %201, <4 x float> %__column512)
  %205 = insertelement <4 x float> %204, float %__dot513, i32 1
  %__column514 = extractvalue [4 x <4 x float>] %200, 2
  %__dot515 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %201, <4 x float> %__column514)
  %206 = insertelement <4 x float> %205, float %__dot515, i32 2
  %__column516 = extractvalue [4 x <4 x float>] %200, 3
  %__dot517 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %201, <4 x float> %__column516)
  %FragColor_shadow518 = insertelement <4 x float> %206, float %__dot517, i32 3
  store <4 x float> %FragColor_shadow518, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %207 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %207)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %Color__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 2, i32 -1, i32 1)
  %0 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float> undef, i32 15, <3 x float> %Color__, i32 0, <3 x float> %Color__, i32 1, <3 x float> %Color__, i32 2, float 1.000000e+00, i32 0)
  %1 = load [4 x <4 x float>] addrspace(2)* @um43, align 16
  %__column62 = extractvalue [4 x <4 x float>] %1, 0
  %__dot = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %__column62)
  %__column63 = extractvalue [4 x <4 x float>] %1, 1
  %__dot64 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %__column63)
  %__column65 = extractvalue [4 x <4 x float>] %1, 2
  %__dot66 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %__column65)
  %__column67 = extractvalue [4 x <4 x float>] %1, 3
  %__dot68 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %__column67)
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot, i32 0, float %__dot64, i32 0, float %__dot66, i32 0, float %__dot68, i32 0)
  %__rightComp = extractelement <4 x float> %__column62, i32 0
  %__product = fmul float %__rightComp, 0x4012CCCCC0000000
  %__rightComp113 = extractelement <4 x float> %__column62, i32 1
  %__product114 = fmul float %__rightComp113, 0x4012CCCCC0000000
  %__rightComp138 = extractelement <4 x float> %__column62, i32 2
  %__product139 = fmul float %__rightComp138, 0x4012CCCCC0000000
  %__rightComp163 = extractelement <4 x float> %__column62, i32 3
  %__product164 = fmul float %__rightComp163, 0x4012CCCCC0000000
  %3 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__product, i32 0, float %__product114, i32 0, float %__product139, i32 0, float %__product164, i32 0)
  %__rightComp171 = extractelement <4 x float> %__column63, i32 0
  %__product172 = fmul float %__rightComp171, 0x4012CCCCC0000000
  %__rightComp195 = extractelement <4 x float> %__column63, i32 1
  %__product196 = fmul float %__rightComp195, 0x4012CCCCC0000000
  %__rightComp220 = extractelement <4 x float> %__column63, i32 2
  %__product221 = fmul float %__rightComp220, 0x4012CCCCC0000000
  %__rightComp245 = extractelement <4 x float> %__column63, i32 3
  %__product246 = fmul float %__rightComp245, 0x4012CCCCC0000000
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__product172, i32 0, float %__product196, i32 0, float %__product221, i32 0, float %__product246, i32 0)
  %__rightComp253 = extractelement <4 x float> %__column65, i32 0
  %__product254 = fmul float %__rightComp253, 0x4012CCCCC0000000
  %__rightComp277 = extractelement <4 x float> %__column65, i32 1
  %__product278 = fmul float %__rightComp277, 0x4012CCCCC0000000
  %__rightComp302 = extractelement <4 x float> %__column65, i32 2
  %__product303 = fmul float %__rightComp302, 0x4012CCCCC0000000
  %__rightComp327 = extractelement <4 x float> %__column65, i32 3
  %__product328 = fmul float %__rightComp327, 0x4012CCCCC0000000
  %5 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__product254, i32 0, float %__product278, i32 0, float %__product303, i32 0, float %__product328, i32 0)
  %__rightComp335 = extractelement <4 x float> %__column67, i32 0
  %__product336 = fmul float %__rightComp335, 0x4012CCCCC0000000
  %__rightComp359 = extractelement <4 x float> %__column67, i32 1
  %__product360 = fmul float %__rightComp359, 0x4012CCCCC0000000
  %__rightComp384 = extractelement <4 x float> %__column67, i32 2
  %__product385 = fmul float %__rightComp384, 0x4012CCCCC0000000
  %__rightComp409 = extractelement <4 x float> %__column67, i32 3
  %__product410 = fmul float %__rightComp409, 0x4012CCCCC0000000
  %6 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__product336, i32 0, float %__product360, i32 0, float %__product385, i32 0, float %__product410, i32 0)
  %7 = fsub float 0.000000e+00, %__product
  %8 = fsub float 0.000000e+00, %__product114
  %9 = fsub float 0.000000e+00, %__product139
  %10 = fsub float 0.000000e+00, %__product164
  %11 = fsub float 0.000000e+00, %__product172
  %12 = fsub float 0.000000e+00, %__product196
  %13 = fsub float 0.000000e+00, %__product221
  %14 = fsub float 0.000000e+00, %__product246
  %15 = fsub float 0.000000e+00, %__product254
  %16 = fsub float 0.000000e+00, %__product278
  %17 = fsub float 0.000000e+00, %__product303
  %18 = fsub float 0.000000e+00, %__product328
  %19 = fsub float 0.000000e+00, %__product336
  %20 = fsub float 0.000000e+00, %__product360
  %21 = fsub float 0.000000e+00, %__product385
  %22 = fsub float 0.000000e+00, %__product410
  %u__434 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %__component = extractelement <4 x float> %u__434, i32 0
  %__component435 = extractelement <4 x float> %u__434, i32 1
  %__component436 = extractelement <4 x float> %u__434, i32 2
  %__component437 = extractelement <4 x float> %u__434, i32 3
  %__product439 = fmul float %7, %__component
  %__product442 = fmul float %11, %__component435
  %__dotProduct443 = fadd float %__product439, %__product442
  %__product446 = fmul float %15, %__component436
  %__dotProduct447 = fadd float %__product446, %__dotProduct443
  %__product450 = fmul float %19, %__component437
  %__dotProduct451 = fadd float %__product450, %__dotProduct447
  %__product454 = fmul float %8, %__component
  %__product457 = fmul float %12, %__component435
  %__dotProduct458 = fadd float %__product454, %__product457
  %__product461 = fmul float %16, %__component436
  %__dotProduct462 = fadd float %__product461, %__dotProduct458
  %__product465 = fmul float %20, %__component437
  %__dotProduct466 = fadd float %__product465, %__dotProduct462
  %__product469 = fmul float %9, %__component
  %__product472 = fmul float %13, %__component435
  %__dotProduct473 = fadd float %__product469, %__product472
  %__product476 = fmul float %17, %__component436
  %__dotProduct477 = fadd float %__product476, %__dotProduct473
  %__product480 = fmul float %21, %__component437
  %__dotProduct481 = fadd float %__product480, %__dotProduct477
  %__product484 = fmul float %10, %__component
  %__product487 = fmul float %14, %__component435
  %__dotProduct488 = fadd float %__product484, %__product487
  %__product491 = fmul float %18, %__component436
  %__dotProduct492 = fadd float %__product491, %__dotProduct488
  %__product495 = fmul float %22, %__component437
  %__dotProduct496 = fadd float %__product495, %__dotProduct492
  %23 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct451, i32 0, float %__dotProduct466, i32 0, float %__dotProduct481, i32 0, float %__dotProduct496, i32 0)
  %FragColor_shadow497 = fadd <4 x float> %2, %23
  %__column500 = fmul <4 x float> %3, %3
  %__dot511 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow497, <4 x float> %__column500)
  %__column503 = fmul <4 x float> %4, %4
  %__dot513 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow497, <4 x float> %__column503)
  %__column506 = fmul <4 x float> %5, %5
  %__dot515 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow497, <4 x float> %__column506)
  %__column509 = fmul <4 x float> %6, %6
  %__dot517 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow497, <4 x float> %__column509)
  %24 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot511, i32 0, float %__dot513, i32 0, float %__dot515, i32 0, float %__dot517, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %24)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, float, i32) nounwind readnone
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform vec4[4] um43;
in vec3 Color;
const float const22_1f = 1.0;
const float const33_5f = 4.7;
const float const54_0f = 0.0;
in vec4 u;

void main()
{
    vec4 temp21 = vec4(Color.x, Color.y, Color.z, const22_1f);
    vec4 __column62 = um43[0];
    float __dot = dot(temp21, __column62);
    vec4 __column63 = um43[1];
    float __dot64 = dot(temp21, __column63);
    vec4 __column65 = um43[2];
    float __dot66 = dot(temp21, __column65);
    vec4 __column67 = um43[3];
    float __dot68 = dot(temp21, __column67);
    vec4 temp31 = vec4(__dot, __dot64, __dot66, __dot68);
    float __product = __column62.x * const33_5f;
    float __product114 = __column62.y * const33_5f;
    float __product139 = __column62.z * const33_5f;
    float __product164 = __column62.w * const33_5f;
    vec4 temp37 = vec4(__product, __product114, __product139, __product164);
    float __product172 = __column63.x * const33_5f;
    float __product196 = __column63.y * const33_5f;
    float __product221 = __column63.z * const33_5f;
    float __product246 = __column63.w * const33_5f;
    vec4 temp42 = vec4(__product172, __product196, __product221, __product246);
    float __product254 = __column65.x * const33_5f;
    float __product278 = __column65.y * const33_5f;
    float __product303 = __column65.z * const33_5f;
    float __product328 = __column65.w * const33_5f;
    vec4 temp47 = vec4(__product254, __product278, __product303, __product328);
    float __product336 = __column67.x * const33_5f;
    float __product360 = __column67.y * const33_5f;
    float __product385 = __column67.z * const33_5f;
    float __product410 = __column67.w * const33_5f;
    vec4 temp52 = vec4(__product336, __product360, __product385, __product410);
    float temp53 = const54_0f - __product;
    float temp55 = const54_0f - __product114;
    float temp56 = const54_0f - __product139;
    float temp57 = const54_0f - __product164;
    float temp58 = const54_0f - __product172;
    float temp59 = const54_0f - __product196;
    float temp60 = const54_0f - __product221;
    float temp61 = const54_0f - __product246;
    float temp62 = const54_0f - __product254;
    float temp63 = const54_0f - __product278;
    float temp64 = const54_0f - __product303;
    float temp65 = const54_0f - __product328;
    float temp66 = const54_0f - __product336;
    float temp67 = const54_0f - __product360;
    float temp68 = const54_0f - __product385;
    float temp69 = const54_0f - __product410;
    float __product439 = temp53 * u.x;
    float __product442 = temp58 * u.y;
    float __dotProduct443 = __product439 + __product442;
    float __product446 = temp62 * u.z;
    float __dotProduct447 = __product446 + __dotProduct443;
    float __product450 = temp66 * u.w;
    float __dotProduct451 = __product450 + __dotProduct447;
    float __product454 = temp55 * u.x;
    float __product457 = temp59 * u.y;
    float __dotProduct458 = __product454 + __product457;
    float __product461 = temp63 * u.z;
    float __dotProduct462 = __product461 + __dotProduct458;
    float __product465 = temp67 * u.w;
    float __dotProduct466 = __product465 + __dotProduct462;
    float __product469 = temp56 * u.x;
    float __product472 = temp60 * u.y;
    float __dotProduct473 = __product469 + __product472;
    float __product476 = temp64 * u.z;
    float __dotProduct477 = __product476 + __dotProduct473;
    float __product480 = temp68 * u.w;
    float __dotProduct481 = __product480 + __dotProduct477;
    float __product484 = temp57 * u.x;
    float __product487 = temp61 * u.y;
    float __dotProduct488 = __product484 + __product487;
    float __product491 = temp65 * u.z;
    float __dotProduct492 = __product491 + __dotProduct488;
    float __product495 = temp69 * u.w;
    float __dotProduct496 = __product495 + __dotProduct492;
    vec4 temp98 = vec4(__dotProduct451, __dotProduct466, __dotProduct481, __dotProduct496);
    vec4 FragColor_shadow497 = temp31 + temp98;
    vec4 __column500 = temp37 * temp37;
    float __dot511 = dot(FragColor_shadow497, __column500);
    vec4 __column503 = temp42 * temp42;
    float __dot513 = dot(FragColor_shadow497, __column503);
    vec4 __column506 = temp47 * temp47;
    float __dot515 = dot(FragColor_shadow497, __column506);
    vec4 __column509 = temp52 * temp52;
    float __dot517 = dot(FragColor_shadow497, __column509);
    vec4 temp108 = vec4(__dot511, __dot513, __dot515, __dot517);
    gl_FragColor = temp108;
    
}
WARNING: 0:96: Two consecutive underscores are reserved for future use.
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform vec4[4] um43;
in vec3 Color;
const float const22_1f = 1.0;
const float const33_5f = 4.7;
const float const54_0f = 0.0;
in vec4 u;

void main()
{
    vec4 temp21 = vec4(Color.x, Color.y, Color.z, const22_1f);
    vec4 __column624 = um43[0];
    float __dot5 = dot(temp21, __column624);
    vec4 __column636 = um43[1];
    float __dot647 = dot(temp21, __column636);
    vec4 __column658 = um43[2];
    float __dot669 = dot(temp21, __column658);
    vec4 __column6710 = um43[3];
    float __dot6811 = dot(temp21, __column6710);
    vec4 temp31 = vec4(__dot5, __dot647, __dot669, __dot6811);
    float __product14 = __column624.x * const33_5f;
    float __product11415 = __column624.y * const33_5f;
    float __product13916 = __column624.z * const33_5f;
    float __product16417 = __column624.w * const33_5f;
    vec4 temp37 = vec4(__product14, __product11415, __product13916, __product16417);
    float __product17220 = __column636.x * const33_5f;
    float __product19621 = __column636.y * const33_5f;
    float __product22122 = __column636.z * const33_5f;
    float __product24623 = __column636.w * const33_5f;
    vec4 temp42 = vec4(__product17220, __product19621, __product22122, __product24623);
    float __product25426 = __column658.x * const33_5f;
    float __product27827 = __column658.y * const33_5f;
    float __product30328 = __column658.z * const33_5f;
    float __product32829 = __column658.w * const33_5f;
    vec4 temp47 = vec4(__product25426, __product27827, __product30328, __product32829);
    float __product33632 = __column6710.x * const33_5f;
    float __product36033 = __column6710.y * const33_5f;
    float __product38534 = __column6710.z * const33_5f;
    float __product41035 = __column6710.w * const33_5f;
    vec4 temp52 = vec4(__product33632, __product36033, __product38534, __product41035);
    float temp5338 = const54_0f - __product14;
    float temp5539 = const54_0f - __product11415;
    float temp5640 = const54_0f - __product13916;
    float temp5741 = const54_0f - __product16417;
    float temp5842 = const54_0f - __product17220;
    float temp5943 = const54_0f - __product19621;
    float temp6044 = const54_0f - __product22122;
    float temp6145 = const54_0f - __product24623;
    float temp6246 = const54_0f - __product25426;
    float temp6347 = const54_0f - __product27827;
    float temp6448 = const54_0f - __product30328;
    float temp6549 = const54_0f - __product32829;
    float temp6650 = const54_0f - __product33632;
    float temp6751 = const54_0f - __product36033;
    float temp6852 = const54_0f - __product38534;
    float temp6953 = const54_0f - __product41035;
    float __product43954 = temp5338 * u.x;
    float __product44256 = temp5842 * u.y;
    float __dotProduct44357 = __product43954 + __product44256;
    float __product44659 = temp6246 * u.z;
    float __dotProduct44760 = __product44659 + __dotProduct44357;
    float __product45062 = temp6650 * u.w;
    float __dotProduct45163 = __product45062 + __dotProduct44760;
    float __product45465 = temp5539 * u.x;
    float __product45767 = temp5943 * u.y;
    float __dotProduct45868 = __product45465 + __product45767;
    float __product46170 = temp6347 * u.z;
    float __dotProduct46271 = __product46170 + __dotProduct45868;
    float __product46573 = temp6751 * u.w;
    float __dotProduct46674 = __product46573 + __dotProduct46271;
    float __product46976 = temp5640 * u.x;
    float __product47278 = temp6044 * u.y;
    float __dotProduct47379 = __product46976 + __product47278;
    float __product47681 = temp6448 * u.z;
    float __dotProduct47782 = __product47681 + __dotProduct47379;
    float __product48084 = temp6852 * u.w;
    float __dotProduct48185 = __product48084 + __dotProduct47782;
    float __product48487 = temp5741 * u.x;
    float __product48789 = temp6145 * u.y;
    float __dotProduct48890 = __product48487 + __product48789;
    float __product49192 = temp6549 * u.z;
    float __dotProduct49293 = __product49192 + __dotProduct48890;
    float __product49595 = temp6953 * u.w;
    float __dotProduct49696 = __product49595 + __dotProduct49293;
    vec4 temp98 = vec4(__dotProduct45163, __dotProduct46674, __dotProduct48185, __dotProduct49696);
    vec4 FragColor_shadow49799 = temp31 + temp98;
    vec4 __column500100 = temp37 * temp37;
    vec4 __column503102 = temp42 * temp42;
    float __dot511101 = dot(FragColor_shadow49799, __column500100);
    vec4 __column506104 = temp47 * temp47;
    float __dot513103 = dot(FragColor_shadow49799, __column503102);
    vec4 __column509106 = temp52 * temp52;
    float __dot515105 = dot(FragColor_shadow49799, __column506104);
    float __dot517107 = dot(FragColor_shadow49799, __column509106);
    vec4 temp108 = vec4(__dot511101, __dot513103, __dot515105, __dot517107);
    gl_FragColor = temp108;
    
}
