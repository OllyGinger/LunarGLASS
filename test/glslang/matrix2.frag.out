
Top IR:
; ModuleID = 'Top'

@v_shadow = internal global <4 x float> zeroinitializer
@u_shadow = internal global <3 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer
@Color_shadow = internal global <3 x float> zeroinitializer
@un34 = external addrspace(2) constant [3 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <3 x float>]
@um4 = external addrspace(2) constant [4 x <4 x float>]
@um2 = external addrspace(2) constant [2 x <2 x float>]
@um3 = external addrspace(2) constant [3 x <3 x float>]

define fastcc void @main() {
entry:
  %inv4 = alloca [4 x <4 x float>]
  %constructed578 = alloca <4 x float>
  %inv3 = alloca [3 x <3 x float>]
  %constructed549 = alloca <4 x float>
  %inv = alloca [2 x <2 x float>]
  %constructed533 = alloca <4 x float>
  %constructed511 = alloca <4 x float>
  %constructed67 = alloca [4 x <4 x float>]
  %m44 = alloca [4 x <4 x float>]
  %constructed49 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %m34 = alloca [3 x <4 x float>]
  %v__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__, <4 x float>* @v_shadow
  %0 = load <4 x float>* @v_shadow
  %u__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1, i32 -1, i32 1)
  store <3 x float> %u__, <3 x float>* @u_shadow
  %1 = load <3 x float>* @u_shadow
  %2 = alloca [3 x <4 x float>]
  %3 = load [3 x <4 x float>]* %2
  %4 = alloca <4 x float>
  %5 = load <4 x float>* %4
  %__rightComp = extractelement <3 x float> %1, i32 0
  %__leftComp = extractelement <4 x float> %0, i32 0
  %__element = fmul float %__leftComp, %__rightComp
  %__column = insertelement <4 x float> %5, float %__element, i32 0
  %__leftComp1 = extractelement <4 x float> %0, i32 1
  %__element2 = fmul float %__leftComp1, %__rightComp
  %__column3 = insertelement <4 x float> %__column, float %__element2, i32 1
  %__leftComp4 = extractelement <4 x float> %0, i32 2
  %__element5 = fmul float %__leftComp4, %__rightComp
  %__column6 = insertelement <4 x float> %__column3, float %__element5, i32 2
  %__leftComp7 = extractelement <4 x float> %0, i32 3
  %__element8 = fmul float %__leftComp7, %__rightComp
  %__column9 = insertelement <4 x float> %__column6, float %__element8, i32 3
  %__matrix = insertvalue [3 x <4 x float>] %3, <4 x float> %__column9, 0
  %__rightComp10 = extractelement <3 x float> %1, i32 1
  %__leftComp11 = extractelement <4 x float> %0, i32 0
  %__element12 = fmul float %__leftComp11, %__rightComp10
  %__column13 = insertelement <4 x float> %__column9, float %__element12, i32 0
  %__leftComp14 = extractelement <4 x float> %0, i32 1
  %__element15 = fmul float %__leftComp14, %__rightComp10
  %__column16 = insertelement <4 x float> %__column13, float %__element15, i32 1
  %__leftComp17 = extractelement <4 x float> %0, i32 2
  %__element18 = fmul float %__leftComp17, %__rightComp10
  %__column19 = insertelement <4 x float> %__column16, float %__element18, i32 2
  %__leftComp20 = extractelement <4 x float> %0, i32 3
  %__element21 = fmul float %__leftComp20, %__rightComp10
  %__column22 = insertelement <4 x float> %__column19, float %__element21, i32 3
  %__matrix23 = insertvalue [3 x <4 x float>] %__matrix, <4 x float> %__column22, 1
  %__rightComp24 = extractelement <3 x float> %1, i32 2
  %__leftComp25 = extractelement <4 x float> %0, i32 0
  %__element26 = fmul float %__leftComp25, %__rightComp24
  %__column27 = insertelement <4 x float> %__column22, float %__element26, i32 0
  %__leftComp28 = extractelement <4 x float> %0, i32 1
  %__element29 = fmul float %__leftComp28, %__rightComp24
  %__column30 = insertelement <4 x float> %__column27, float %__element29, i32 1
  %__leftComp31 = extractelement <4 x float> %0, i32 2
  %__element32 = fmul float %__leftComp31, %__rightComp24
  %__column33 = insertelement <4 x float> %__column30, float %__element32, i32 2
  %__leftComp34 = extractelement <4 x float> %0, i32 3
  %__element35 = fmul float %__leftComp34, %__rightComp24
  %__column36 = insertelement <4 x float> %__column33, float %__element35, i32 3
  %__matrix37 = insertvalue [3 x <4 x float>] %__matrix23, <4 x float> %__column36, 2
  store [3 x <4 x float>] %__matrix37, [3 x <4 x float>]* %m34
  %6 = load [3 x <4 x float>]* %m34
  %7 = alloca [3 x <4 x float>]
  %8 = load [3 x <4 x float>]* %7
  %__leftColumn = extractvalue [3 x <4 x float>] %6, 0
  %__column38 = fadd <4 x float> %__leftColumn, <float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %9 = insertvalue [3 x <4 x float>] %8, <4 x float> %__column38, 0
  %__leftColumn39 = extractvalue [3 x <4 x float>] %6, 1
  %__column40 = fadd <4 x float> %__leftColumn39, <float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00>
  %10 = insertvalue [3 x <4 x float>] %9, <4 x float> %__column40, 1
  %__leftColumn41 = extractvalue [3 x <4 x float>] %6, 2
  %__column42 = fadd <4 x float> %__leftColumn41, <float 0.000000e+00, float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00>
  %m3443 = insertvalue [3 x <4 x float>] %10, <4 x float> %__column42, 2
  store [3 x <4 x float>] %m3443, [3 x <4 x float>]* %m34
  %Color__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 2, i32 -1, i32 1)
  store <3 x float> %Color__, <3 x float>* @Color_shadow
  %11 = load <3 x float>* @Color_shadow
  %12 = load <4 x float>* %constructed
  %13 = extractelement <3 x float> %11, i32 0
  %14 = insertelement <4 x float> %12, float %13, i32 0
  %15 = extractelement <3 x float> %11, i32 1
  %16 = insertelement <4 x float> %14, float %15, i32 1
  %17 = extractelement <3 x float> %11, i32 2
  %18 = insertelement <4 x float> %16, float %17, i32 2
  %FragColor_shadow = insertelement <4 x float> %18, float 1.000000e+00, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  %19 = load <4 x float>* @FragColor_shadow
  %20 = load [3 x <4 x float>]* %m34
  %21 = alloca <3 x float>
  %22 = load <3 x float>* %21
  %__column44 = extractvalue [3 x <4 x float>] %20, 0
  %__dot = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %19, <4 x float> %__column44)
  %23 = insertelement <3 x float> %22, float %__dot, i32 0
  %__column45 = extractvalue [3 x <4 x float>] %20, 1
  %__dot46 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %19, <4 x float> %__column45)
  %24 = insertelement <3 x float> %23, float %__dot46, i32 1
  %__column47 = extractvalue [3 x <4 x float>] %20, 2
  %__dot48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %19, <4 x float> %__column47)
  %25 = insertelement <3 x float> %24, float %__dot48, i32 2
  %26 = load <4 x float>* %constructed49
  %27 = extractelement <3 x float> %25, i32 0
  %28 = insertelement <4 x float> %26, float %27, i32 0
  %29 = extractelement <3 x float> %25, i32 1
  %30 = insertelement <4 x float> %28, float %29, i32 1
  %31 = extractelement <3 x float> %25, i32 2
  %32 = insertelement <4 x float> %30, float %31, i32 2
  %33 = insertelement <4 x float> %32, float 1.000000e+00, i32 3
  %34 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow50 = fmul <4 x float> %34, %33
  store <4 x float> %FragColor_shadow50, <4 x float>* @FragColor_shadow
  %v__51 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__51, <4 x float>* @v_shadow
  %35 = load <4 x float>* @v_shadow
  %36 = extractelement <4 x float> %35, i32 0
  %37 = load [3 x <4 x float>]* %m34
  %38 = alloca [3 x <4 x float>]
  %39 = load [3 x <4 x float>]* %38
  %__column52 = extractvalue [3 x <4 x float>] %37, 0
  %__row = extractelement <4 x float> %__column52, i32 0
  %40 = fmul float %36, %__row
  %41 = insertelement <4 x float> %__column52, float %40, i32 0
  %__row53 = extractelement <4 x float> %41, i32 1
  %42 = fmul float %36, %__row53
  %43 = insertelement <4 x float> %41, float %42, i32 1
  %__row54 = extractelement <4 x float> %43, i32 2
  %44 = fmul float %36, %__row54
  %45 = insertelement <4 x float> %43, float %44, i32 2
  %__row55 = extractelement <4 x float> %45, i32 3
  %46 = fmul float %36, %__row55
  %47 = insertelement <4 x float> %45, float %46, i32 3
  %48 = insertvalue [3 x <4 x float>] %39, <4 x float> %47, 0
  %__column56 = extractvalue [3 x <4 x float>] %37, 1
  %__row57 = extractelement <4 x float> %__column56, i32 0
  %49 = fmul float %36, %__row57
  %50 = insertelement <4 x float> %__column56, float %49, i32 0
  %__row58 = extractelement <4 x float> %50, i32 1
  %51 = fmul float %36, %__row58
  %52 = insertelement <4 x float> %50, float %51, i32 1
  %__row59 = extractelement <4 x float> %52, i32 2
  %53 = fmul float %36, %__row59
  %54 = insertelement <4 x float> %52, float %53, i32 2
  %__row60 = extractelement <4 x float> %54, i32 3
  %55 = fmul float %36, %__row60
  %56 = insertelement <4 x float> %54, float %55, i32 3
  %57 = insertvalue [3 x <4 x float>] %48, <4 x float> %56, 1
  %__column61 = extractvalue [3 x <4 x float>] %37, 2
  %__row62 = extractelement <4 x float> %__column61, i32 0
  %58 = fmul float %36, %__row62
  %59 = insertelement <4 x float> %__column61, float %58, i32 0
  %__row63 = extractelement <4 x float> %59, i32 1
  %60 = fmul float %36, %__row63
  %61 = insertelement <4 x float> %59, float %60, i32 1
  %__row64 = extractelement <4 x float> %61, i32 2
  %62 = fmul float %36, %__row64
  %63 = insertelement <4 x float> %61, float %62, i32 2
  %__row65 = extractelement <4 x float> %63, i32 3
  %64 = fmul float %36, %__row65
  %65 = insertelement <4 x float> %63, float %64, i32 3
  %m3466 = insertvalue [3 x <4 x float>] %57, <4 x float> %65, 2
  store [3 x <4 x float>] %m3466, [3 x <4 x float>]* %m34
  %66 = load [3 x <4 x float>] addrspace(2)* @un34
  %67 = load [4 x <4 x float>]* %constructed67
  %__column68 = extractvalue [3 x <4 x float>] %66, 0
  %__element69 = extractelement <4 x float> %__column68, i32 0
  %__element70 = extractelement <4 x float> %__column68, i32 1
  %__element71 = extractelement <4 x float> %__column68, i32 2
  %__element72 = extractelement <4 x float> %__column68, i32 3
  %__column73 = extractvalue [3 x <4 x float>] %66, 1
  %__element74 = extractelement <4 x float> %__column73, i32 0
  %__element75 = extractelement <4 x float> %__column73, i32 1
  %__element76 = extractelement <4 x float> %__column73, i32 2
  %__element77 = extractelement <4 x float> %__column73, i32 3
  %__column78 = extractvalue [3 x <4 x float>] %66, 2
  %__element79 = extractelement <4 x float> %__column78, i32 0
  %__element80 = extractelement <4 x float> %__column78, i32 1
  %__element81 = extractelement <4 x float> %__column78, i32 2
  %__element82 = extractelement <4 x float> %__column78, i32 3
  %__column83 = extractvalue [4 x <4 x float>] %67, 0
  %__column84 = insertelement <4 x float> %__column83, float %__element69, i32 0
  %__column85 = insertelement <4 x float> %__column84, float %__element70, i32 1
  %__column86 = insertelement <4 x float> %__column85, float %__element71, i32 2
  %__column87 = insertelement <4 x float> %__column86, float %__element72, i32 3
  %__matrix88 = insertvalue [4 x <4 x float>] %67, <4 x float> %__column87, 0
  %__column89 = extractvalue [4 x <4 x float>] %67, 1
  %__column90 = insertelement <4 x float> %__column89, float %__element74, i32 0
  %__column91 = insertelement <4 x float> %__column90, float %__element75, i32 1
  %__column92 = insertelement <4 x float> %__column91, float %__element76, i32 2
  %__column93 = insertelement <4 x float> %__column92, float %__element77, i32 3
  %__matrix94 = insertvalue [4 x <4 x float>] %__matrix88, <4 x float> %__column93, 1
  %__column95 = extractvalue [4 x <4 x float>] %67, 2
  %__column96 = insertelement <4 x float> %__column95, float %__element79, i32 0
  %__column97 = insertelement <4 x float> %__column96, float %__element80, i32 1
  %__column98 = insertelement <4 x float> %__column97, float %__element81, i32 2
  %__column99 = insertelement <4 x float> %__column98, float %__element82, i32 3
  %__matrix100 = insertvalue [4 x <4 x float>] %__matrix94, <4 x float> %__column99, 2
  %__column101 = extractvalue [4 x <4 x float>] %67, 3
  %__column102 = insertelement <4 x float> %__column101, float 0.000000e+00, i32 0
  %__column103 = insertelement <4 x float> %__column102, float 0.000000e+00, i32 1
  %__column104 = insertelement <4 x float> %__column103, float 0.000000e+00, i32 2
  %__column105 = insertelement <4 x float> %__column104, float 1.000000e+00, i32 3
  %__matrix106 = insertvalue [4 x <4 x float>] %__matrix100, <4 x float> %__column105, 3
  store [4 x <4 x float>] %__matrix106, [4 x <4 x float>]* %m44
  %68 = load [3 x <4 x float>]* %m34
  %69 = load [4 x <3 x float>] addrspace(2)* @um43
  %70 = alloca [4 x <4 x float>]
  %__resultMatrix = load [4 x <4 x float>]* %70
  %71 = alloca <4 x float>
  %__tempColumn = load <4 x float>* %71
  %__rightColumn = extractvalue [4 x <3 x float>] %69, 0
  %__leftColumn107 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp108 = extractelement <4 x float> %__leftColumn107, i32 0
  %__rightComp109 = extractelement <3 x float> %__rightColumn, i32 0
  %__product = fmul float %__leftComp108, %__rightComp109
  %__leftColumn110 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp111 = extractelement <4 x float> %__leftColumn110, i32 0
  %__rightComp112 = extractelement <3 x float> %__rightColumn, i32 1
  %__product113 = fmul float %__leftComp111, %__rightComp112
  %__dotProduct = fadd float %__product, %__product113
  %__leftColumn114 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp115 = extractelement <4 x float> %__leftColumn114, i32 0
  %__rightComp116 = extractelement <3 x float> %__rightColumn, i32 2
  %__product117 = fmul float %__leftComp115, %__rightComp116
  %__dotProduct118 = fadd float %__dotProduct, %__product117
  %__column119 = insertelement <4 x float> %__tempColumn, float %__dotProduct118, i32 0
  %__leftColumn120 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp121 = extractelement <4 x float> %__leftColumn120, i32 1
  %__rightComp122 = extractelement <3 x float> %__rightColumn, i32 0
  %__product123 = fmul float %__leftComp121, %__rightComp122
  %__leftColumn124 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp125 = extractelement <4 x float> %__leftColumn124, i32 1
  %__rightComp126 = extractelement <3 x float> %__rightColumn, i32 1
  %__product127 = fmul float %__leftComp125, %__rightComp126
  %__dotProduct128 = fadd float %__product123, %__product127
  %__leftColumn129 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp130 = extractelement <4 x float> %__leftColumn129, i32 1
  %__rightComp131 = extractelement <3 x float> %__rightColumn, i32 2
  %__product132 = fmul float %__leftComp130, %__rightComp131
  %__dotProduct133 = fadd float %__dotProduct128, %__product132
  %__column134 = insertelement <4 x float> %__column119, float %__dotProduct133, i32 1
  %__leftColumn135 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp136 = extractelement <4 x float> %__leftColumn135, i32 2
  %__rightComp137 = extractelement <3 x float> %__rightColumn, i32 0
  %__product138 = fmul float %__leftComp136, %__rightComp137
  %__leftColumn139 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp140 = extractelement <4 x float> %__leftColumn139, i32 2
  %__rightComp141 = extractelement <3 x float> %__rightColumn, i32 1
  %__product142 = fmul float %__leftComp140, %__rightComp141
  %__dotProduct143 = fadd float %__product138, %__product142
  %__leftColumn144 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp145 = extractelement <4 x float> %__leftColumn144, i32 2
  %__rightComp146 = extractelement <3 x float> %__rightColumn, i32 2
  %__product147 = fmul float %__leftComp145, %__rightComp146
  %__dotProduct148 = fadd float %__dotProduct143, %__product147
  %__column149 = insertelement <4 x float> %__column134, float %__dotProduct148, i32 2
  %__leftColumn150 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp151 = extractelement <4 x float> %__leftColumn150, i32 3
  %__rightComp152 = extractelement <3 x float> %__rightColumn, i32 0
  %__product153 = fmul float %__leftComp151, %__rightComp152
  %__leftColumn154 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp155 = extractelement <4 x float> %__leftColumn154, i32 3
  %__rightComp156 = extractelement <3 x float> %__rightColumn, i32 1
  %__product157 = fmul float %__leftComp155, %__rightComp156
  %__dotProduct158 = fadd float %__product153, %__product157
  %__leftColumn159 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp160 = extractelement <4 x float> %__leftColumn159, i32 3
  %__rightComp161 = extractelement <3 x float> %__rightColumn, i32 2
  %__product162 = fmul float %__leftComp160, %__rightComp161
  %__dotProduct163 = fadd float %__dotProduct158, %__product162
  %__column164 = insertelement <4 x float> %__column149, float %__dotProduct163, i32 3
  %__resultMatrix165 = insertvalue [4 x <4 x float>] %__resultMatrix, <4 x float> %__column164, 0
  %__rightColumn166 = extractvalue [4 x <3 x float>] %69, 1
  %__leftColumn167 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp168 = extractelement <4 x float> %__leftColumn167, i32 0
  %__rightComp169 = extractelement <3 x float> %__rightColumn166, i32 0
  %__product170 = fmul float %__leftComp168, %__rightComp169
  %__leftColumn171 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp172 = extractelement <4 x float> %__leftColumn171, i32 0
  %__rightComp173 = extractelement <3 x float> %__rightColumn166, i32 1
  %__product174 = fmul float %__leftComp172, %__rightComp173
  %__dotProduct175 = fadd float %__product170, %__product174
  %__leftColumn176 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp177 = extractelement <4 x float> %__leftColumn176, i32 0
  %__rightComp178 = extractelement <3 x float> %__rightColumn166, i32 2
  %__product179 = fmul float %__leftComp177, %__rightComp178
  %__dotProduct180 = fadd float %__dotProduct175, %__product179
  %__column181 = insertelement <4 x float> %__column164, float %__dotProduct180, i32 0
  %__leftColumn182 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp183 = extractelement <4 x float> %__leftColumn182, i32 1
  %__rightComp184 = extractelement <3 x float> %__rightColumn166, i32 0
  %__product185 = fmul float %__leftComp183, %__rightComp184
  %__leftColumn186 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp187 = extractelement <4 x float> %__leftColumn186, i32 1
  %__rightComp188 = extractelement <3 x float> %__rightColumn166, i32 1
  %__product189 = fmul float %__leftComp187, %__rightComp188
  %__dotProduct190 = fadd float %__product185, %__product189
  %__leftColumn191 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp192 = extractelement <4 x float> %__leftColumn191, i32 1
  %__rightComp193 = extractelement <3 x float> %__rightColumn166, i32 2
  %__product194 = fmul float %__leftComp192, %__rightComp193
  %__dotProduct195 = fadd float %__dotProduct190, %__product194
  %__column196 = insertelement <4 x float> %__column181, float %__dotProduct195, i32 1
  %__leftColumn197 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp198 = extractelement <4 x float> %__leftColumn197, i32 2
  %__rightComp199 = extractelement <3 x float> %__rightColumn166, i32 0
  %__product200 = fmul float %__leftComp198, %__rightComp199
  %__leftColumn201 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp202 = extractelement <4 x float> %__leftColumn201, i32 2
  %__rightComp203 = extractelement <3 x float> %__rightColumn166, i32 1
  %__product204 = fmul float %__leftComp202, %__rightComp203
  %__dotProduct205 = fadd float %__product200, %__product204
  %__leftColumn206 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp207 = extractelement <4 x float> %__leftColumn206, i32 2
  %__rightComp208 = extractelement <3 x float> %__rightColumn166, i32 2
  %__product209 = fmul float %__leftComp207, %__rightComp208
  %__dotProduct210 = fadd float %__dotProduct205, %__product209
  %__column211 = insertelement <4 x float> %__column196, float %__dotProduct210, i32 2
  %__leftColumn212 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp213 = extractelement <4 x float> %__leftColumn212, i32 3
  %__rightComp214 = extractelement <3 x float> %__rightColumn166, i32 0
  %__product215 = fmul float %__leftComp213, %__rightComp214
  %__leftColumn216 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp217 = extractelement <4 x float> %__leftColumn216, i32 3
  %__rightComp218 = extractelement <3 x float> %__rightColumn166, i32 1
  %__product219 = fmul float %__leftComp217, %__rightComp218
  %__dotProduct220 = fadd float %__product215, %__product219
  %__leftColumn221 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp222 = extractelement <4 x float> %__leftColumn221, i32 3
  %__rightComp223 = extractelement <3 x float> %__rightColumn166, i32 2
  %__product224 = fmul float %__leftComp222, %__rightComp223
  %__dotProduct225 = fadd float %__dotProduct220, %__product224
  %__column226 = insertelement <4 x float> %__column211, float %__dotProduct225, i32 3
  %__resultMatrix227 = insertvalue [4 x <4 x float>] %__resultMatrix165, <4 x float> %__column226, 1
  %__rightColumn228 = extractvalue [4 x <3 x float>] %69, 2
  %__leftColumn229 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp230 = extractelement <4 x float> %__leftColumn229, i32 0
  %__rightComp231 = extractelement <3 x float> %__rightColumn228, i32 0
  %__product232 = fmul float %__leftComp230, %__rightComp231
  %__leftColumn233 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp234 = extractelement <4 x float> %__leftColumn233, i32 0
  %__rightComp235 = extractelement <3 x float> %__rightColumn228, i32 1
  %__product236 = fmul float %__leftComp234, %__rightComp235
  %__dotProduct237 = fadd float %__product232, %__product236
  %__leftColumn238 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp239 = extractelement <4 x float> %__leftColumn238, i32 0
  %__rightComp240 = extractelement <3 x float> %__rightColumn228, i32 2
  %__product241 = fmul float %__leftComp239, %__rightComp240
  %__dotProduct242 = fadd float %__dotProduct237, %__product241
  %__column243 = insertelement <4 x float> %__column226, float %__dotProduct242, i32 0
  %__leftColumn244 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp245 = extractelement <4 x float> %__leftColumn244, i32 1
  %__rightComp246 = extractelement <3 x float> %__rightColumn228, i32 0
  %__product247 = fmul float %__leftComp245, %__rightComp246
  %__leftColumn248 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp249 = extractelement <4 x float> %__leftColumn248, i32 1
  %__rightComp250 = extractelement <3 x float> %__rightColumn228, i32 1
  %__product251 = fmul float %__leftComp249, %__rightComp250
  %__dotProduct252 = fadd float %__product247, %__product251
  %__leftColumn253 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp254 = extractelement <4 x float> %__leftColumn253, i32 1
  %__rightComp255 = extractelement <3 x float> %__rightColumn228, i32 2
  %__product256 = fmul float %__leftComp254, %__rightComp255
  %__dotProduct257 = fadd float %__dotProduct252, %__product256
  %__column258 = insertelement <4 x float> %__column243, float %__dotProduct257, i32 1
  %__leftColumn259 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp260 = extractelement <4 x float> %__leftColumn259, i32 2
  %__rightComp261 = extractelement <3 x float> %__rightColumn228, i32 0
  %__product262 = fmul float %__leftComp260, %__rightComp261
  %__leftColumn263 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp264 = extractelement <4 x float> %__leftColumn263, i32 2
  %__rightComp265 = extractelement <3 x float> %__rightColumn228, i32 1
  %__product266 = fmul float %__leftComp264, %__rightComp265
  %__dotProduct267 = fadd float %__product262, %__product266
  %__leftColumn268 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp269 = extractelement <4 x float> %__leftColumn268, i32 2
  %__rightComp270 = extractelement <3 x float> %__rightColumn228, i32 2
  %__product271 = fmul float %__leftComp269, %__rightComp270
  %__dotProduct272 = fadd float %__dotProduct267, %__product271
  %__column273 = insertelement <4 x float> %__column258, float %__dotProduct272, i32 2
  %__leftColumn274 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp275 = extractelement <4 x float> %__leftColumn274, i32 3
  %__rightComp276 = extractelement <3 x float> %__rightColumn228, i32 0
  %__product277 = fmul float %__leftComp275, %__rightComp276
  %__leftColumn278 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp279 = extractelement <4 x float> %__leftColumn278, i32 3
  %__rightComp280 = extractelement <3 x float> %__rightColumn228, i32 1
  %__product281 = fmul float %__leftComp279, %__rightComp280
  %__dotProduct282 = fadd float %__product277, %__product281
  %__leftColumn283 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp284 = extractelement <4 x float> %__leftColumn283, i32 3
  %__rightComp285 = extractelement <3 x float> %__rightColumn228, i32 2
  %__product286 = fmul float %__leftComp284, %__rightComp285
  %__dotProduct287 = fadd float %__dotProduct282, %__product286
  %__column288 = insertelement <4 x float> %__column273, float %__dotProduct287, i32 3
  %__resultMatrix289 = insertvalue [4 x <4 x float>] %__resultMatrix227, <4 x float> %__column288, 2
  %__rightColumn290 = extractvalue [4 x <3 x float>] %69, 3
  %__leftColumn291 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp292 = extractelement <4 x float> %__leftColumn291, i32 0
  %__rightComp293 = extractelement <3 x float> %__rightColumn290, i32 0
  %__product294 = fmul float %__leftComp292, %__rightComp293
  %__leftColumn295 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp296 = extractelement <4 x float> %__leftColumn295, i32 0
  %__rightComp297 = extractelement <3 x float> %__rightColumn290, i32 1
  %__product298 = fmul float %__leftComp296, %__rightComp297
  %__dotProduct299 = fadd float %__product294, %__product298
  %__leftColumn300 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp301 = extractelement <4 x float> %__leftColumn300, i32 0
  %__rightComp302 = extractelement <3 x float> %__rightColumn290, i32 2
  %__product303 = fmul float %__leftComp301, %__rightComp302
  %__dotProduct304 = fadd float %__dotProduct299, %__product303
  %__column305 = insertelement <4 x float> %__column288, float %__dotProduct304, i32 0
  %__leftColumn306 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp307 = extractelement <4 x float> %__leftColumn306, i32 1
  %__rightComp308 = extractelement <3 x float> %__rightColumn290, i32 0
  %__product309 = fmul float %__leftComp307, %__rightComp308
  %__leftColumn310 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp311 = extractelement <4 x float> %__leftColumn310, i32 1
  %__rightComp312 = extractelement <3 x float> %__rightColumn290, i32 1
  %__product313 = fmul float %__leftComp311, %__rightComp312
  %__dotProduct314 = fadd float %__product309, %__product313
  %__leftColumn315 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp316 = extractelement <4 x float> %__leftColumn315, i32 1
  %__rightComp317 = extractelement <3 x float> %__rightColumn290, i32 2
  %__product318 = fmul float %__leftComp316, %__rightComp317
  %__dotProduct319 = fadd float %__dotProduct314, %__product318
  %__column320 = insertelement <4 x float> %__column305, float %__dotProduct319, i32 1
  %__leftColumn321 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp322 = extractelement <4 x float> %__leftColumn321, i32 2
  %__rightComp323 = extractelement <3 x float> %__rightColumn290, i32 0
  %__product324 = fmul float %__leftComp322, %__rightComp323
  %__leftColumn325 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp326 = extractelement <4 x float> %__leftColumn325, i32 2
  %__rightComp327 = extractelement <3 x float> %__rightColumn290, i32 1
  %__product328 = fmul float %__leftComp326, %__rightComp327
  %__dotProduct329 = fadd float %__product324, %__product328
  %__leftColumn330 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp331 = extractelement <4 x float> %__leftColumn330, i32 2
  %__rightComp332 = extractelement <3 x float> %__rightColumn290, i32 2
  %__product333 = fmul float %__leftComp331, %__rightComp332
  %__dotProduct334 = fadd float %__dotProduct329, %__product333
  %__column335 = insertelement <4 x float> %__column320, float %__dotProduct334, i32 2
  %__leftColumn336 = extractvalue [3 x <4 x float>] %68, 0
  %__leftComp337 = extractelement <4 x float> %__leftColumn336, i32 3
  %__rightComp338 = extractelement <3 x float> %__rightColumn290, i32 0
  %__product339 = fmul float %__leftComp337, %__rightComp338
  %__leftColumn340 = extractvalue [3 x <4 x float>] %68, 1
  %__leftComp341 = extractelement <4 x float> %__leftColumn340, i32 3
  %__rightComp342 = extractelement <3 x float> %__rightColumn290, i32 1
  %__product343 = fmul float %__leftComp341, %__rightComp342
  %__dotProduct344 = fadd float %__product339, %__product343
  %__leftColumn345 = extractvalue [3 x <4 x float>] %68, 2
  %__leftComp346 = extractelement <4 x float> %__leftColumn345, i32 3
  %__rightComp347 = extractelement <3 x float> %__rightColumn290, i32 2
  %__product348 = fmul float %__leftComp346, %__rightComp347
  %__dotProduct349 = fadd float %__dotProduct344, %__product348
  %__column350 = insertelement <4 x float> %__column335, float %__dotProduct349, i32 3
  %__resultMatrix351 = insertvalue [4 x <4 x float>] %__resultMatrix289, <4 x float> %__column350, 3
  %72 = load [4 x <4 x float>]* %m44
  %73 = alloca [4 x <4 x float>]
  %74 = load [4 x <4 x float>]* %73
  %__leftColumn352 = extractvalue [4 x <4 x float>] %72, 0
  %__rightColumn353 = extractvalue [4 x <4 x float>] %__resultMatrix351, 0
  %__column354 = fadd <4 x float> %__leftColumn352, %__rightColumn353
  %75 = insertvalue [4 x <4 x float>] %74, <4 x float> %__column354, 0
  %__leftColumn355 = extractvalue [4 x <4 x float>] %72, 1
  %__rightColumn356 = extractvalue [4 x <4 x float>] %__resultMatrix351, 1
  %__column357 = fadd <4 x float> %__leftColumn355, %__rightColumn356
  %76 = insertvalue [4 x <4 x float>] %75, <4 x float> %__column357, 1
  %__leftColumn358 = extractvalue [4 x <4 x float>] %72, 2
  %__rightColumn359 = extractvalue [4 x <4 x float>] %__resultMatrix351, 2
  %__column360 = fadd <4 x float> %__leftColumn358, %__rightColumn359
  %77 = insertvalue [4 x <4 x float>] %76, <4 x float> %__column360, 2
  %__leftColumn361 = extractvalue [4 x <4 x float>] %72, 3
  %__rightColumn362 = extractvalue [4 x <4 x float>] %__resultMatrix351, 3
  %__column363 = fadd <4 x float> %__leftColumn361, %__rightColumn362
  %m44364 = insertvalue [4 x <4 x float>] %77, <4 x float> %__column363, 3
  store [4 x <4 x float>] %m44364, [4 x <4 x float>]* %m44
  %78 = load [4 x <4 x float>]* %m44
  %79 = alloca [4 x <4 x float>]
  %80 = load [4 x <4 x float>]* %79
  %__column365 = extractvalue [4 x <4 x float>] %78, 0
  %__row366 = extractelement <4 x float> %__column365, i32 0
  %81 = fsub float 0.000000e+00, %__row366
  %82 = insertelement <4 x float> %__column365, float %81, i32 0
  %__row367 = extractelement <4 x float> %82, i32 1
  %83 = fsub float 0.000000e+00, %__row367
  %84 = insertelement <4 x float> %82, float %83, i32 1
  %__row368 = extractelement <4 x float> %84, i32 2
  %85 = fsub float 0.000000e+00, %__row368
  %86 = insertelement <4 x float> %84, float %85, i32 2
  %__row369 = extractelement <4 x float> %86, i32 3
  %87 = fsub float 0.000000e+00, %__row369
  %88 = insertelement <4 x float> %86, float %87, i32 3
  %89 = insertvalue [4 x <4 x float>] %80, <4 x float> %88, 0
  %__column370 = extractvalue [4 x <4 x float>] %78, 1
  %__row371 = extractelement <4 x float> %__column370, i32 0
  %90 = fsub float 0.000000e+00, %__row371
  %91 = insertelement <4 x float> %__column370, float %90, i32 0
  %__row372 = extractelement <4 x float> %91, i32 1
  %92 = fsub float 0.000000e+00, %__row372
  %93 = insertelement <4 x float> %91, float %92, i32 1
  %__row373 = extractelement <4 x float> %93, i32 2
  %94 = fsub float 0.000000e+00, %__row373
  %95 = insertelement <4 x float> %93, float %94, i32 2
  %__row374 = extractelement <4 x float> %95, i32 3
  %96 = fsub float 0.000000e+00, %__row374
  %97 = insertelement <4 x float> %95, float %96, i32 3
  %98 = insertvalue [4 x <4 x float>] %89, <4 x float> %97, 1
  %__column375 = extractvalue [4 x <4 x float>] %78, 2
  %__row376 = extractelement <4 x float> %__column375, i32 0
  %99 = fsub float 0.000000e+00, %__row376
  %100 = insertelement <4 x float> %__column375, float %99, i32 0
  %__row377 = extractelement <4 x float> %100, i32 1
  %101 = fsub float 0.000000e+00, %__row377
  %102 = insertelement <4 x float> %100, float %101, i32 1
  %__row378 = extractelement <4 x float> %102, i32 2
  %103 = fsub float 0.000000e+00, %__row378
  %104 = insertelement <4 x float> %102, float %103, i32 2
  %__row379 = extractelement <4 x float> %104, i32 3
  %105 = fsub float 0.000000e+00, %__row379
  %106 = insertelement <4 x float> %104, float %105, i32 3
  %107 = insertvalue [4 x <4 x float>] %98, <4 x float> %106, 2
  %__column380 = extractvalue [4 x <4 x float>] %78, 3
  %__row381 = extractelement <4 x float> %__column380, i32 0
  %108 = fsub float 0.000000e+00, %__row381
  %109 = insertelement <4 x float> %__column380, float %108, i32 0
  %__row382 = extractelement <4 x float> %109, i32 1
  %110 = fsub float 0.000000e+00, %__row382
  %111 = insertelement <4 x float> %109, float %110, i32 1
  %__row383 = extractelement <4 x float> %111, i32 2
  %112 = fsub float 0.000000e+00, %__row383
  %113 = insertelement <4 x float> %111, float %112, i32 2
  %__row384 = extractelement <4 x float> %113, i32 3
  %114 = fsub float 0.000000e+00, %__row384
  %115 = insertelement <4 x float> %113, float %114, i32 3
  %116 = insertvalue [4 x <4 x float>] %107, <4 x float> %115, 3
  %v__385 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %v__385, <4 x float>* @v_shadow
  %117 = load <4 x float>* @v_shadow
  %118 = alloca <4 x float>
  %119 = load <4 x float>* %118
  %__component = extractelement <4 x float> %117, i32 0
  %__component386 = extractelement <4 x float> %117, i32 1
  %__component387 = extractelement <4 x float> %117, i32 2
  %__component388 = extractelement <4 x float> %117, i32 3
  %__column389 = extractvalue [4 x <4 x float>] %116, 0
  %__element390 = extractelement <4 x float> %__column389, i32 0
  %__product391 = fmul float %__element390, %__component
  %__column392 = extractvalue [4 x <4 x float>] %116, 1
  %__element393 = extractelement <4 x float> %__column392, i32 0
  %__product394 = fmul float %__element393, %__component386
  %__dotProduct395 = fadd float %__product391, %__product394
  %__column396 = extractvalue [4 x <4 x float>] %116, 2
  %__element397 = extractelement <4 x float> %__column396, i32 0
  %__product398 = fmul float %__element397, %__component387
  %__dotProduct399 = fadd float %__dotProduct395, %__product398
  %__column400 = extractvalue [4 x <4 x float>] %116, 3
  %__element401 = extractelement <4 x float> %__column400, i32 0
  %__product402 = fmul float %__element401, %__component388
  %__dotProduct403 = fadd float %__dotProduct399, %__product402
  %120 = insertelement <4 x float> %119, float %__dotProduct403, i32 0
  %__column404 = extractvalue [4 x <4 x float>] %116, 0
  %__element405 = extractelement <4 x float> %__column404, i32 1
  %__product406 = fmul float %__element405, %__component
  %__column407 = extractvalue [4 x <4 x float>] %116, 1
  %__element408 = extractelement <4 x float> %__column407, i32 1
  %__product409 = fmul float %__element408, %__component386
  %__dotProduct410 = fadd float %__product406, %__product409
  %__column411 = extractvalue [4 x <4 x float>] %116, 2
  %__element412 = extractelement <4 x float> %__column411, i32 1
  %__product413 = fmul float %__element412, %__component387
  %__dotProduct414 = fadd float %__dotProduct410, %__product413
  %__column415 = extractvalue [4 x <4 x float>] %116, 3
  %__element416 = extractelement <4 x float> %__column415, i32 1
  %__product417 = fmul float %__element416, %__component388
  %__dotProduct418 = fadd float %__dotProduct414, %__product417
  %121 = insertelement <4 x float> %120, float %__dotProduct418, i32 1
  %__column419 = extractvalue [4 x <4 x float>] %116, 0
  %__element420 = extractelement <4 x float> %__column419, i32 2
  %__product421 = fmul float %__element420, %__component
  %__column422 = extractvalue [4 x <4 x float>] %116, 1
  %__element423 = extractelement <4 x float> %__column422, i32 2
  %__product424 = fmul float %__element423, %__component386
  %__dotProduct425 = fadd float %__product421, %__product424
  %__column426 = extractvalue [4 x <4 x float>] %116, 2
  %__element427 = extractelement <4 x float> %__column426, i32 2
  %__product428 = fmul float %__element427, %__component387
  %__dotProduct429 = fadd float %__dotProduct425, %__product428
  %__column430 = extractvalue [4 x <4 x float>] %116, 3
  %__element431 = extractelement <4 x float> %__column430, i32 2
  %__product432 = fmul float %__element431, %__component388
  %__dotProduct433 = fadd float %__dotProduct429, %__product432
  %122 = insertelement <4 x float> %121, float %__dotProduct433, i32 2
  %__column434 = extractvalue [4 x <4 x float>] %116, 0
  %__element435 = extractelement <4 x float> %__column434, i32 3
  %__product436 = fmul float %__element435, %__component
  %__column437 = extractvalue [4 x <4 x float>] %116, 1
  %__element438 = extractelement <4 x float> %__column437, i32 3
  %__product439 = fmul float %__element438, %__component386
  %__dotProduct440 = fadd float %__product436, %__product439
  %__column441 = extractvalue [4 x <4 x float>] %116, 2
  %__element442 = extractelement <4 x float> %__column441, i32 3
  %__product443 = fmul float %__element442, %__component387
  %__dotProduct444 = fadd float %__dotProduct440, %__product443
  %__column445 = extractvalue [4 x <4 x float>] %116, 3
  %__element446 = extractelement <4 x float> %__column445, i32 3
  %__product447 = fmul float %__element446, %__component388
  %__dotProduct448 = fadd float %__dotProduct444, %__product447
  %123 = insertelement <4 x float> %122, float %__dotProduct448, i32 3
  %124 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow449 = fadd <4 x float> %124, %123
  store <4 x float> %FragColor_shadow449, <4 x float>* @FragColor_shadow
  %125 = load [4 x <4 x float>]* %m44
  %126 = load [4 x <4 x float>]* %m44
  %127 = alloca [4 x <4 x float>]
  %128 = load [4 x <4 x float>]* %127
  %__leftColumn450 = extractvalue [4 x <4 x float>] %125, 0
  %__rightColumn451 = extractvalue [4 x <4 x float>] %126, 0
  %__column452 = fmul <4 x float> %__leftColumn450, %__rightColumn451
  %129 = insertvalue [4 x <4 x float>] %128, <4 x float> %__column452, 0
  %__leftColumn453 = extractvalue [4 x <4 x float>] %125, 1
  %__rightColumn454 = extractvalue [4 x <4 x float>] %126, 1
  %__column455 = fmul <4 x float> %__leftColumn453, %__rightColumn454
  %130 = insertvalue [4 x <4 x float>] %129, <4 x float> %__column455, 1
  %__leftColumn456 = extractvalue [4 x <4 x float>] %125, 2
  %__rightColumn457 = extractvalue [4 x <4 x float>] %126, 2
  %__column458 = fmul <4 x float> %__leftColumn456, %__rightColumn457
  %131 = insertvalue [4 x <4 x float>] %130, <4 x float> %__column458, 2
  %__leftColumn459 = extractvalue [4 x <4 x float>] %125, 3
  %__rightColumn460 = extractvalue [4 x <4 x float>] %126, 3
  %__column461 = fmul <4 x float> %__leftColumn459, %__rightColumn460
  %132 = insertvalue [4 x <4 x float>] %131, <4 x float> %__column461, 3
  %133 = load <4 x float>* @FragColor_shadow
  %134 = alloca <4 x float>
  %135 = load <4 x float>* %134
  %__column462 = extractvalue [4 x <4 x float>] %132, 0
  %__dot463 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %133, <4 x float> %__column462)
  %136 = insertelement <4 x float> %135, float %__dot463, i32 0
  %__column464 = extractvalue [4 x <4 x float>] %132, 1
  %__dot465 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %133, <4 x float> %__column464)
  %137 = insertelement <4 x float> %136, float %__dot465, i32 1
  %__column466 = extractvalue [4 x <4 x float>] %132, 2
  %__dot467 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %133, <4 x float> %__column466)
  %138 = insertelement <4 x float> %137, float %__dot467, i32 2
  %__column468 = extractvalue [4 x <4 x float>] %132, 3
  %__dot469 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %133, <4 x float> %__column468)
  %FragColor_shadow470 = insertelement <4 x float> %138, float %__dot469, i32 3
  store <4 x float> %FragColor_shadow470, <4 x float>* @FragColor_shadow
  %139 = load [4 x <3 x float>] addrspace(2)* @um43
  %__column471 = extractvalue [4 x <3 x float>] %139, 0
  %__element472 = extractelement <3 x float> %__column471, i32 0
  %__element473 = extractelement <3 x float> %__column471, i32 1
  %__element474 = extractelement <3 x float> %__column471, i32 2
  %__column475 = extractvalue [4 x <3 x float>] %139, 1
  %__element476 = extractelement <3 x float> %__column475, i32 0
  %__element477 = extractelement <3 x float> %__column475, i32 1
  %__element478 = extractelement <3 x float> %__column475, i32 2
  %__column479 = extractvalue [4 x <3 x float>] %139, 2
  %__element480 = extractelement <3 x float> %__column479, i32 0
  %__element481 = extractelement <3 x float> %__column479, i32 1
  %__element482 = extractelement <3 x float> %__column479, i32 2
  %__column483 = extractvalue [4 x <3 x float>] %139, 3
  %__element484 = extractelement <3 x float> %__column483, i32 0
  %__element485 = extractelement <3 x float> %__column483, i32 1
  %__element486 = extractelement <3 x float> %__column483, i32 2
  %140 = alloca [3 x <4 x float>]
  %141 = load [3 x <4 x float>]* %140
  %__column487 = extractvalue [3 x <4 x float>] %141, 0
  %__column488 = insertelement <4 x float> %__column487, float %__element472, i32 0
  %__column489 = insertelement <4 x float> %__column488, float %__element476, i32 1
  %__column490 = insertelement <4 x float> %__column489, float %__element480, i32 2
  %__column491 = insertelement <4 x float> %__column490, float %__element484, i32 3
  %__matrix492 = insertvalue [3 x <4 x float>] %141, <4 x float> %__column491, 0
  %__column493 = extractvalue [3 x <4 x float>] %__matrix492, 1
  %__column494 = insertelement <4 x float> %__column493, float %__element473, i32 0
  %__column495 = insertelement <4 x float> %__column494, float %__element477, i32 1
  %__column496 = insertelement <4 x float> %__column495, float %__element481, i32 2
  %__column497 = insertelement <4 x float> %__column496, float %__element485, i32 3
  %__matrix498 = insertvalue [3 x <4 x float>] %__matrix492, <4 x float> %__column497, 1
  %__column499 = extractvalue [3 x <4 x float>] %__matrix498, 2
  %__column500 = insertelement <4 x float> %__column499, float %__element474, i32 0
  %__column501 = insertelement <4 x float> %__column500, float %__element478, i32 1
  %__column502 = insertelement <4 x float> %__column501, float %__element482, i32 2
  %__column503 = insertelement <4 x float> %__column502, float %__element486, i32 3
  %__matrix504 = insertvalue [3 x <4 x float>] %__matrix498, <4 x float> %__column503, 2
  store [3 x <4 x float>] %__matrix504, [3 x <4 x float>]* %m34
  %142 = load <4 x float>* @FragColor_shadow
  %143 = load [3 x <4 x float>]* %m34
  %144 = alloca <3 x float>
  %145 = load <3 x float>* %144
  %__column505 = extractvalue [3 x <4 x float>] %143, 0
  %__dot506 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %__column505)
  %146 = insertelement <3 x float> %145, float %__dot506, i32 0
  %__column507 = extractvalue [3 x <4 x float>] %143, 1
  %__dot508 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %__column507)
  %147 = insertelement <3 x float> %146, float %__dot508, i32 1
  %__column509 = extractvalue [3 x <4 x float>] %143, 2
  %__dot510 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %142, <4 x float> %__column509)
  %148 = insertelement <3 x float> %147, float %__dot510, i32 2
  %149 = load <4 x float>* %constructed511
  %150 = extractelement <3 x float> %148, i32 0
  %151 = insertelement <4 x float> %149, float %150, i32 0
  %152 = extractelement <3 x float> %148, i32 1
  %153 = insertelement <4 x float> %151, float %152, i32 1
  %154 = extractelement <3 x float> %148, i32 2
  %155 = insertelement <4 x float> %153, float %154, i32 2
  %156 = insertelement <4 x float> %155, float 1.000000e+00, i32 3
  %157 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow512 = fmul <4 x float> %157, %156
  store <4 x float> %FragColor_shadow512, <4 x float>* @FragColor_shadow
  %158 = load [4 x <4 x float>] addrspace(2)* @um4
  %__column513 = extractvalue [4 x <4 x float>] %158, 0
  %__element514 = extractelement <4 x float> %__column513, i32 0
  %__element515 = extractelement <4 x float> %__column513, i32 1
  %__element516 = extractelement <4 x float> %__column513, i32 2
  %__element517 = extractelement <4 x float> %__column513, i32 3
  %__column518 = extractvalue [4 x <4 x float>] %158, 1
  %__element519 = extractelement <4 x float> %__column518, i32 0
  %__element520 = extractelement <4 x float> %__column518, i32 1
  %__element521 = extractelement <4 x float> %__column518, i32 2
  %__element522 = extractelement <4 x float> %__column518, i32 3
  %__column523 = extractvalue [4 x <4 x float>] %158, 2
  %__element524 = extractelement <4 x float> %__column523, i32 0
  %__element525 = extractelement <4 x float> %__column523, i32 1
  %__element526 = extractelement <4 x float> %__column523, i32 2
  %__element527 = extractelement <4 x float> %__column523, i32 3
  %__column528 = extractvalue [4 x <4 x float>] %158, 3
  %__element529 = extractelement <4 x float> %__column528, i32 0
  %__element530 = extractelement <4 x float> %__column528, i32 1
  %__element531 = extractelement <4 x float> %__column528, i32 2
  %__element532 = extractelement <4 x float> %__column528, i32 3
  %159 = fmul float %__element526, %__element532
  %160 = fmul float %__element531, %__element527
  %161 = fsub float %159, %160
  %162 = fmul float %__element520, %161
  %163 = fmul float %__element521, %__element532
  %164 = fmul float %__element531, %__element522
  %165 = fsub float %163, %164
  %166 = fmul float %__element525, %165
  %167 = fsub float %162, %166
  %168 = fmul float %__element521, %__element527
  %169 = fmul float %__element526, %__element522
  %170 = fsub float %168, %169
  %171 = fmul float %__element530, %170
  %172 = fadd float %167, %171
  %173 = fmul float %__element514, %172
  %174 = fmul float %__element526, %__element532
  %175 = fmul float %__element531, %__element527
  %176 = fsub float %174, %175
  %177 = fmul float %__element515, %176
  %178 = fmul float %__element516, %__element532
  %179 = fmul float %__element531, %__element517
  %180 = fsub float %178, %179
  %181 = fmul float %__element525, %180
  %182 = fsub float %177, %181
  %183 = fmul float %__element516, %__element527
  %184 = fmul float %__element526, %__element517
  %185 = fsub float %183, %184
  %186 = fmul float %__element530, %185
  %187 = fadd float %182, %186
  %188 = fmul float %__element519, %187
  %189 = fsub float %173, %188
  %190 = fmul float %__element521, %__element532
  %191 = fmul float %__element531, %__element522
  %192 = fsub float %190, %191
  %193 = fmul float %__element515, %192
  %194 = fmul float %__element516, %__element532
  %195 = fmul float %__element531, %__element517
  %196 = fsub float %194, %195
  %197 = fmul float %__element520, %196
  %198 = fsub float %193, %197
  %199 = fmul float %__element516, %__element522
  %200 = fmul float %__element521, %__element517
  %201 = fsub float %199, %200
  %202 = fmul float %__element530, %201
  %203 = fadd float %198, %202
  %204 = fmul float %__element524, %203
  %205 = fadd float %189, %204
  %206 = fmul float %__element521, %__element527
  %207 = fmul float %__element526, %__element522
  %208 = fsub float %206, %207
  %209 = fmul float %__element515, %208
  %210 = fmul float %__element516, %__element527
  %211 = fmul float %__element526, %__element517
  %212 = fsub float %210, %211
  %213 = fmul float %__element520, %212
  %214 = fsub float %209, %213
  %215 = fmul float %__element516, %__element522
  %216 = fmul float %__element521, %__element517
  %217 = fsub float %215, %216
  %218 = fmul float %__element525, %217
  %219 = fadd float %214, %218
  %220 = fmul float %__element529, %219
  %221 = fsub float %205, %220
  %222 = load <4 x float>* %constructed533
  %223 = insertelement <4 x float> undef, float %221, i32 0
  %224 = insertelement <4 x float> %223, float %221, i32 1
  %225 = insertelement <4 x float> %224, float %221, i32 2
  %226 = insertelement <4 x float> %225, float %221, i32 3
  %227 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow534 = fmul <4 x float> %227, %226
  store <4 x float> %FragColor_shadow534, <4 x float>* @FragColor_shadow
  %228 = load [2 x <2 x float>] addrspace(2)* @um2
  %__column535 = extractvalue [2 x <2 x float>] %228, 0
  %__element536 = extractelement <2 x float> %__column535, i32 0
  %__element537 = extractelement <2 x float> %__column535, i32 1
  %__column538 = extractvalue [2 x <2 x float>] %228, 1
  %__element539 = extractelement <2 x float> %__column538, i32 0
  %__element540 = extractelement <2 x float> %__column538, i32 1
  %229 = fsub float -0.000000e+00, %__element537
  %230 = fsub float -0.000000e+00, %__element539
  %231 = fmul float %__element536, %__element540
  %232 = fmul float %__element539, %__element537
  %233 = fsub float %231, %232
  %234 = fdiv float %__element540, %233
  %235 = fdiv float %230, %233
  %236 = fdiv float %229, %233
  %237 = fdiv float %__element536, %233
  %238 = alloca [2 x <2 x float>]
  %239 = load [2 x <2 x float>]* %238
  %__column541 = extractvalue [2 x <2 x float>] %239, 0
  %__column542 = insertelement <2 x float> %__column541, float %234, i32 0
  %__column543 = insertelement <2 x float> %__column542, float %236, i32 1
  %__matrix544 = insertvalue [2 x <2 x float>] %239, <2 x float> %__column543, 0
  %__column545 = extractvalue [2 x <2 x float>] %__matrix544, 1
  %__column546 = insertelement <2 x float> %__column545, float %235, i32 0
  %__column547 = insertelement <2 x float> %__column546, float %237, i32 1
  %__matrix548 = insertvalue [2 x <2 x float>] %__matrix544, <2 x float> %__column547, 1
  store [2 x <2 x float>] %__matrix548, [2 x <2 x float>]* %inv
  %240 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 0
  %241 = load <2 x float>* %240
  %242 = extractelement <2 x float> %241, i32 0
  %243 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 1
  %244 = load <2 x float>* %243
  %245 = extractelement <2 x float> %244, i32 0
  %246 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 0
  %247 = load <2 x float>* %246
  %248 = extractelement <2 x float> %247, i32 1
  %249 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 1
  %250 = load <2 x float>* %249
  %251 = extractelement <2 x float> %250, i32 1
  %252 = load <4 x float>* %constructed549
  %253 = insertelement <4 x float> %252, float %242, i32 0
  %254 = insertelement <4 x float> %253, float %245, i32 1
  %255 = insertelement <4 x float> %254, float %248, i32 2
  %256 = insertelement <4 x float> %255, float %251, i32 3
  %257 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow550 = fmul <4 x float> %257, %256
  store <4 x float> %FragColor_shadow550, <4 x float>* @FragColor_shadow
  %258 = load [3 x <3 x float>] addrspace(2)* @um3
  %__column551 = extractvalue [3 x <3 x float>] %258, 0
  %__element552 = extractelement <3 x float> %__column551, i32 0
  %__element553 = extractelement <3 x float> %__column551, i32 1
  %__element554 = extractelement <3 x float> %__column551, i32 2
  %__column555 = extractvalue [3 x <3 x float>] %258, 1
  %__element556 = extractelement <3 x float> %__column555, i32 0
  %__element557 = extractelement <3 x float> %__column555, i32 1
  %__element558 = extractelement <3 x float> %__column555, i32 2
  %__column559 = extractvalue [3 x <3 x float>] %258, 2
  %__element560 = extractelement <3 x float> %__column559, i32 0
  %__element561 = extractelement <3 x float> %__column559, i32 1
  %__element562 = extractelement <3 x float> %__column559, i32 2
  %259 = fmul float %__element557, %__element562
  %260 = fmul float %__element561, %__element558
  %261 = fsub float %259, %260
  %262 = fmul float %__element553, %__element562
  %263 = fmul float %__element561, %__element554
  %264 = fsub float %262, %263
  %265 = fsub float -0.000000e+00, %264
  %266 = fmul float %__element553, %__element558
  %267 = fmul float %__element557, %__element554
  %268 = fsub float %266, %267
  %269 = fmul float %__element556, %__element562
  %270 = fmul float %__element560, %__element558
  %271 = fsub float %269, %270
  %272 = fsub float -0.000000e+00, %271
  %273 = fmul float %__element552, %__element562
  %274 = fmul float %__element560, %__element554
  %275 = fsub float %273, %274
  %276 = fmul float %__element552, %__element558
  %277 = fmul float %__element556, %__element554
  %278 = fsub float %276, %277
  %279 = fsub float -0.000000e+00, %278
  %280 = fmul float %__element556, %__element561
  %281 = fmul float %__element560, %__element557
  %282 = fsub float %280, %281
  %283 = fmul float %__element552, %__element561
  %284 = fmul float %__element560, %__element553
  %285 = fsub float %283, %284
  %286 = fsub float -0.000000e+00, %285
  %287 = fmul float %__element552, %__element557
  %288 = fmul float %__element556, %__element553
  %289 = fsub float %287, %288
  %290 = fmul float %__element557, %__element562
  %291 = fmul float %__element561, %__element558
  %292 = fsub float %290, %291
  %293 = fmul float %__element552, %292
  %294 = fmul float %__element553, %__element562
  %295 = fmul float %__element561, %__element554
  %296 = fsub float %294, %295
  %297 = fmul float %__element556, %296
  %298 = fsub float %293, %297
  %299 = fmul float %__element553, %__element558
  %300 = fmul float %__element557, %__element554
  %301 = fsub float %299, %300
  %302 = fmul float %__element560, %301
  %303 = fadd float %298, %302
  %304 = fdiv float %261, %303
  %305 = fdiv float %272, %303
  %306 = fdiv float %282, %303
  %307 = fdiv float %265, %303
  %308 = fdiv float %275, %303
  %309 = fdiv float %286, %303
  %310 = fdiv float %268, %303
  %311 = fdiv float %279, %303
  %312 = fdiv float %289, %303
  %313 = alloca [3 x <3 x float>]
  %314 = load [3 x <3 x float>]* %313
  %__column563 = extractvalue [3 x <3 x float>] %314, 0
  %__column564 = insertelement <3 x float> %__column563, float %304, i32 0
  %__column565 = insertelement <3 x float> %__column564, float %307, i32 1
  %__column566 = insertelement <3 x float> %__column565, float %310, i32 2
  %__matrix567 = insertvalue [3 x <3 x float>] %314, <3 x float> %__column566, 0
  %__column568 = extractvalue [3 x <3 x float>] %__matrix567, 1
  %__column569 = insertelement <3 x float> %__column568, float %305, i32 0
  %__column570 = insertelement <3 x float> %__column569, float %308, i32 1
  %__column571 = insertelement <3 x float> %__column570, float %311, i32 2
  %__matrix572 = insertvalue [3 x <3 x float>] %__matrix567, <3 x float> %__column571, 1
  %__column573 = extractvalue [3 x <3 x float>] %__matrix572, 2
  %__column574 = insertelement <3 x float> %__column573, float %306, i32 0
  %__column575 = insertelement <3 x float> %__column574, float %309, i32 1
  %__column576 = insertelement <3 x float> %__column575, float %312, i32 2
  %__matrix577 = insertvalue [3 x <3 x float>] %__matrix572, <3 x float> %__column576, 2
  store [3 x <3 x float>] %__matrix577, [3 x <3 x float>]* %inv3
  %315 = getelementptr [3 x <3 x float>]* %inv3, i32 0, i32 2
  %316 = load <3 x float>* %315
  %317 = extractelement <3 x float> %316, i32 1
  %318 = load <4 x float>* %constructed578
  %319 = insertelement <4 x float> undef, float %317, i32 0
  %320 = insertelement <4 x float> %319, float %317, i32 1
  %321 = insertelement <4 x float> %320, float %317, i32 2
  %322 = insertelement <4 x float> %321, float %317, i32 3
  %323 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow579 = fmul <4 x float> %323, %322
  store <4 x float> %FragColor_shadow579, <4 x float>* @FragColor_shadow
  %324 = load [4 x <4 x float>] addrspace(2)* @um4
  %__column580 = extractvalue [4 x <4 x float>] %324, 0
  %__element581 = extractelement <4 x float> %__column580, i32 0
  %__element582 = extractelement <4 x float> %__column580, i32 1
  %__element583 = extractelement <4 x float> %__column580, i32 2
  %__element584 = extractelement <4 x float> %__column580, i32 3
  %__column585 = extractvalue [4 x <4 x float>] %324, 1
  %__element586 = extractelement <4 x float> %__column585, i32 0
  %__element587 = extractelement <4 x float> %__column585, i32 1
  %__element588 = extractelement <4 x float> %__column585, i32 2
  %__element589 = extractelement <4 x float> %__column585, i32 3
  %__column590 = extractvalue [4 x <4 x float>] %324, 2
  %__element591 = extractelement <4 x float> %__column590, i32 0
  %__element592 = extractelement <4 x float> %__column590, i32 1
  %__element593 = extractelement <4 x float> %__column590, i32 2
  %__element594 = extractelement <4 x float> %__column590, i32 3
  %__column595 = extractvalue [4 x <4 x float>] %324, 3
  %__element596 = extractelement <4 x float> %__column595, i32 0
  %__element597 = extractelement <4 x float> %__column595, i32 1
  %__element598 = extractelement <4 x float> %__column595, i32 2
  %__element599 = extractelement <4 x float> %__column595, i32 3
  %325 = fmul float %__element593, %__element599
  %326 = fmul float %__element598, %__element594
  %327 = fsub float %325, %326
  %328 = fmul float %__element587, %327
  %329 = fmul float %__element588, %__element599
  %330 = fmul float %__element598, %__element589
  %331 = fsub float %329, %330
  %332 = fmul float %__element592, %331
  %333 = fsub float %328, %332
  %334 = fmul float %__element588, %__element594
  %335 = fmul float %__element593, %__element589
  %336 = fsub float %334, %335
  %337 = fmul float %__element597, %336
  %338 = fadd float %333, %337
  %339 = fmul float %__element593, %__element599
  %340 = fmul float %__element598, %__element594
  %341 = fsub float %339, %340
  %342 = fmul float %__element582, %341
  %343 = fmul float %__element583, %__element599
  %344 = fmul float %__element598, %__element584
  %345 = fsub float %343, %344
  %346 = fmul float %__element592, %345
  %347 = fsub float %342, %346
  %348 = fmul float %__element583, %__element594
  %349 = fmul float %__element593, %__element584
  %350 = fsub float %348, %349
  %351 = fmul float %__element597, %350
  %352 = fadd float %347, %351
  %353 = fsub float -0.000000e+00, %352
  %354 = fmul float %__element588, %__element599
  %355 = fmul float %__element598, %__element589
  %356 = fsub float %354, %355
  %357 = fmul float %__element582, %356
  %358 = fmul float %__element583, %__element599
  %359 = fmul float %__element598, %__element584
  %360 = fsub float %358, %359
  %361 = fmul float %__element587, %360
  %362 = fsub float %357, %361
  %363 = fmul float %__element583, %__element589
  %364 = fmul float %__element588, %__element584
  %365 = fsub float %363, %364
  %366 = fmul float %__element597, %365
  %367 = fadd float %362, %366
  %368 = fmul float %__element588, %__element594
  %369 = fmul float %__element593, %__element589
  %370 = fsub float %368, %369
  %371 = fmul float %__element582, %370
  %372 = fmul float %__element583, %__element594
  %373 = fmul float %__element593, %__element584
  %374 = fsub float %372, %373
  %375 = fmul float %__element587, %374
  %376 = fsub float %371, %375
  %377 = fmul float %__element583, %__element589
  %378 = fmul float %__element588, %__element584
  %379 = fsub float %377, %378
  %380 = fmul float %__element592, %379
  %381 = fadd float %376, %380
  %382 = fsub float -0.000000e+00, %381
  %383 = fmul float %__element593, %__element599
  %384 = fmul float %__element598, %__element594
  %385 = fsub float %383, %384
  %386 = fmul float %__element586, %385
  %387 = fmul float %__element588, %__element599
  %388 = fmul float %__element598, %__element589
  %389 = fsub float %387, %388
  %390 = fmul float %__element591, %389
  %391 = fsub float %386, %390
  %392 = fmul float %__element588, %__element594
  %393 = fmul float %__element593, %__element589
  %394 = fsub float %392, %393
  %395 = fmul float %__element596, %394
  %396 = fadd float %391, %395
  %397 = fsub float -0.000000e+00, %396
  %398 = fmul float %__element593, %__element599
  %399 = fmul float %__element598, %__element594
  %400 = fsub float %398, %399
  %401 = fmul float %__element581, %400
  %402 = fmul float %__element583, %__element599
  %403 = fmul float %__element598, %__element584
  %404 = fsub float %402, %403
  %405 = fmul float %__element591, %404
  %406 = fsub float %401, %405
  %407 = fmul float %__element583, %__element594
  %408 = fmul float %__element593, %__element584
  %409 = fsub float %407, %408
  %410 = fmul float %__element596, %409
  %411 = fadd float %406, %410
  %412 = fmul float %__element588, %__element599
  %413 = fmul float %__element598, %__element589
  %414 = fsub float %412, %413
  %415 = fmul float %__element581, %414
  %416 = fmul float %__element583, %__element599
  %417 = fmul float %__element598, %__element584
  %418 = fsub float %416, %417
  %419 = fmul float %__element586, %418
  %420 = fsub float %415, %419
  %421 = fmul float %__element583, %__element589
  %422 = fmul float %__element588, %__element584
  %423 = fsub float %421, %422
  %424 = fmul float %__element596, %423
  %425 = fadd float %420, %424
  %426 = fsub float -0.000000e+00, %425
  %427 = fmul float %__element588, %__element594
  %428 = fmul float %__element593, %__element589
  %429 = fsub float %427, %428
  %430 = fmul float %__element581, %429
  %431 = fmul float %__element583, %__element594
  %432 = fmul float %__element593, %__element584
  %433 = fsub float %431, %432
  %434 = fmul float %__element586, %433
  %435 = fsub float %430, %434
  %436 = fmul float %__element583, %__element589
  %437 = fmul float %__element588, %__element584
  %438 = fsub float %436, %437
  %439 = fmul float %__element591, %438
  %440 = fadd float %435, %439
  %441 = fmul float %__element592, %__element599
  %442 = fmul float %__element597, %__element594
  %443 = fsub float %441, %442
  %444 = fmul float %__element586, %443
  %445 = fmul float %__element587, %__element599
  %446 = fmul float %__element597, %__element589
  %447 = fsub float %445, %446
  %448 = fmul float %__element591, %447
  %449 = fsub float %444, %448
  %450 = fmul float %__element587, %__element594
  %451 = fmul float %__element592, %__element589
  %452 = fsub float %450, %451
  %453 = fmul float %__element596, %452
  %454 = fadd float %449, %453
  %455 = fmul float %__element592, %__element599
  %456 = fmul float %__element597, %__element594
  %457 = fsub float %455, %456
  %458 = fmul float %__element581, %457
  %459 = fmul float %__element582, %__element599
  %460 = fmul float %__element597, %__element584
  %461 = fsub float %459, %460
  %462 = fmul float %__element591, %461
  %463 = fsub float %458, %462
  %464 = fmul float %__element582, %__element594
  %465 = fmul float %__element592, %__element584
  %466 = fsub float %464, %465
  %467 = fmul float %__element596, %466
  %468 = fadd float %463, %467
  %469 = fsub float -0.000000e+00, %468
  %470 = fmul float %__element587, %__element599
  %471 = fmul float %__element597, %__element589
  %472 = fsub float %470, %471
  %473 = fmul float %__element581, %472
  %474 = fmul float %__element582, %__element599
  %475 = fmul float %__element597, %__element584
  %476 = fsub float %474, %475
  %477 = fmul float %__element586, %476
  %478 = fsub float %473, %477
  %479 = fmul float %__element582, %__element589
  %480 = fmul float %__element587, %__element584
  %481 = fsub float %479, %480
  %482 = fmul float %__element596, %481
  %483 = fadd float %478, %482
  %484 = fmul float %__element587, %__element594
  %485 = fmul float %__element592, %__element589
  %486 = fsub float %484, %485
  %487 = fmul float %__element581, %486
  %488 = fmul float %__element582, %__element594
  %489 = fmul float %__element592, %__element584
  %490 = fsub float %488, %489
  %491 = fmul float %__element586, %490
  %492 = fsub float %487, %491
  %493 = fmul float %__element582, %__element589
  %494 = fmul float %__element587, %__element584
  %495 = fsub float %493, %494
  %496 = fmul float %__element591, %495
  %497 = fadd float %492, %496
  %498 = fsub float -0.000000e+00, %497
  %499 = fmul float %__element592, %__element598
  %500 = fmul float %__element597, %__element593
  %501 = fsub float %499, %500
  %502 = fmul float %__element586, %501
  %503 = fmul float %__element587, %__element598
  %504 = fmul float %__element597, %__element588
  %505 = fsub float %503, %504
  %506 = fmul float %__element591, %505
  %507 = fsub float %502, %506
  %508 = fmul float %__element587, %__element593
  %509 = fmul float %__element592, %__element588
  %510 = fsub float %508, %509
  %511 = fmul float %__element596, %510
  %512 = fadd float %507, %511
  %513 = fsub float -0.000000e+00, %512
  %514 = fmul float %__element592, %__element598
  %515 = fmul float %__element597, %__element593
  %516 = fsub float %514, %515
  %517 = fmul float %__element581, %516
  %518 = fmul float %__element582, %__element598
  %519 = fmul float %__element597, %__element583
  %520 = fsub float %518, %519
  %521 = fmul float %__element591, %520
  %522 = fsub float %517, %521
  %523 = fmul float %__element582, %__element593
  %524 = fmul float %__element592, %__element583
  %525 = fsub float %523, %524
  %526 = fmul float %__element596, %525
  %527 = fadd float %522, %526
  %528 = fmul float %__element587, %__element598
  %529 = fmul float %__element597, %__element588
  %530 = fsub float %528, %529
  %531 = fmul float %__element581, %530
  %532 = fmul float %__element582, %__element598
  %533 = fmul float %__element597, %__element583
  %534 = fsub float %532, %533
  %535 = fmul float %__element586, %534
  %536 = fsub float %531, %535
  %537 = fmul float %__element582, %__element588
  %538 = fmul float %__element587, %__element583
  %539 = fsub float %537, %538
  %540 = fmul float %__element596, %539
  %541 = fadd float %536, %540
  %542 = fsub float -0.000000e+00, %541
  %543 = fmul float %__element587, %__element593
  %544 = fmul float %__element592, %__element588
  %545 = fsub float %543, %544
  %546 = fmul float %__element581, %545
  %547 = fmul float %__element582, %__element593
  %548 = fmul float %__element592, %__element583
  %549 = fsub float %547, %548
  %550 = fmul float %__element586, %549
  %551 = fsub float %546, %550
  %552 = fmul float %__element582, %__element588
  %553 = fmul float %__element587, %__element583
  %554 = fsub float %552, %553
  %555 = fmul float %__element591, %554
  %556 = fadd float %551, %555
  %557 = fmul float %__element593, %__element599
  %558 = fmul float %__element598, %__element594
  %559 = fsub float %557, %558
  %560 = fmul float %__element587, %559
  %561 = fmul float %__element588, %__element599
  %562 = fmul float %__element598, %__element589
  %563 = fsub float %561, %562
  %564 = fmul float %__element592, %563
  %565 = fsub float %560, %564
  %566 = fmul float %__element588, %__element594
  %567 = fmul float %__element593, %__element589
  %568 = fsub float %566, %567
  %569 = fmul float %__element597, %568
  %570 = fadd float %565, %569
  %571 = fmul float %__element581, %570
  %572 = fmul float %__element593, %__element599
  %573 = fmul float %__element598, %__element594
  %574 = fsub float %572, %573
  %575 = fmul float %__element582, %574
  %576 = fmul float %__element583, %__element599
  %577 = fmul float %__element598, %__element584
  %578 = fsub float %576, %577
  %579 = fmul float %__element592, %578
  %580 = fsub float %575, %579
  %581 = fmul float %__element583, %__element594
  %582 = fmul float %__element593, %__element584
  %583 = fsub float %581, %582
  %584 = fmul float %__element597, %583
  %585 = fadd float %580, %584
  %586 = fmul float %__element586, %585
  %587 = fsub float %571, %586
  %588 = fmul float %__element588, %__element599
  %589 = fmul float %__element598, %__element589
  %590 = fsub float %588, %589
  %591 = fmul float %__element582, %590
  %592 = fmul float %__element583, %__element599
  %593 = fmul float %__element598, %__element584
  %594 = fsub float %592, %593
  %595 = fmul float %__element587, %594
  %596 = fsub float %591, %595
  %597 = fmul float %__element583, %__element589
  %598 = fmul float %__element588, %__element584
  %599 = fsub float %597, %598
  %600 = fmul float %__element597, %599
  %601 = fadd float %596, %600
  %602 = fmul float %__element591, %601
  %603 = fadd float %587, %602
  %604 = fmul float %__element588, %__element594
  %605 = fmul float %__element593, %__element589
  %606 = fsub float %604, %605
  %607 = fmul float %__element582, %606
  %608 = fmul float %__element583, %__element594
  %609 = fmul float %__element593, %__element584
  %610 = fsub float %608, %609
  %611 = fmul float %__element587, %610
  %612 = fsub float %607, %611
  %613 = fmul float %__element583, %__element589
  %614 = fmul float %__element588, %__element584
  %615 = fsub float %613, %614
  %616 = fmul float %__element592, %615
  %617 = fadd float %612, %616
  %618 = fmul float %__element596, %617
  %619 = fsub float %603, %618
  %620 = fdiv float %338, %619
  %621 = fdiv float %397, %619
  %622 = fdiv float %454, %619
  %623 = fdiv float %513, %619
  %624 = fdiv float %353, %619
  %625 = fdiv float %411, %619
  %626 = fdiv float %469, %619
  %627 = fdiv float %527, %619
  %628 = fdiv float %367, %619
  %629 = fdiv float %426, %619
  %630 = fdiv float %483, %619
  %631 = fdiv float %542, %619
  %632 = fdiv float %382, %619
  %633 = fdiv float %440, %619
  %634 = fdiv float %498, %619
  %635 = fdiv float %556, %619
  %636 = alloca [4 x <4 x float>]
  %637 = load [4 x <4 x float>]* %636
  %__column600 = extractvalue [4 x <4 x float>] %637, 0
  %__column601 = insertelement <4 x float> %__column600, float %620, i32 0
  %__column602 = insertelement <4 x float> %__column601, float %624, i32 1
  %__column603 = insertelement <4 x float> %__column602, float %628, i32 2
  %__column604 = insertelement <4 x float> %__column603, float %632, i32 3
  %__matrix605 = insertvalue [4 x <4 x float>] %637, <4 x float> %__column604, 0
  %__column606 = extractvalue [4 x <4 x float>] %__matrix605, 1
  %__column607 = insertelement <4 x float> %__column606, float %621, i32 0
  %__column608 = insertelement <4 x float> %__column607, float %625, i32 1
  %__column609 = insertelement <4 x float> %__column608, float %629, i32 2
  %__column610 = insertelement <4 x float> %__column609, float %633, i32 3
  %__matrix611 = insertvalue [4 x <4 x float>] %__matrix605, <4 x float> %__column610, 1
  %__column612 = extractvalue [4 x <4 x float>] %__matrix611, 2
  %__column613 = insertelement <4 x float> %__column612, float %622, i32 0
  %__column614 = insertelement <4 x float> %__column613, float %626, i32 1
  %__column615 = insertelement <4 x float> %__column614, float %630, i32 2
  %__column616 = insertelement <4 x float> %__column615, float %634, i32 3
  %__matrix617 = insertvalue [4 x <4 x float>] %__matrix611, <4 x float> %__column616, 2
  %__column618 = extractvalue [4 x <4 x float>] %__matrix617, 3
  %__column619 = insertelement <4 x float> %__column618, float %623, i32 0
  %__column620 = insertelement <4 x float> %__column619, float %627, i32 1
  %__column621 = insertelement <4 x float> %__column620, float %631, i32 2
  %__column622 = insertelement <4 x float> %__column621, float %635, i32 3
  %__matrix623 = insertvalue [4 x <4 x float>] %__matrix617, <4 x float> %__column622, 3
  store [4 x <4 x float>] %__matrix623, [4 x <4 x float>]* %inv4
  %638 = load [4 x <4 x float>]* %inv4
  %639 = load <4 x float>* @FragColor_shadow
  %640 = alloca <4 x float>
  %641 = load <4 x float>* %640
  %__column624 = extractvalue [4 x <4 x float>] %638, 0
  %__dot625 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %639, <4 x float> %__column624)
  %642 = insertelement <4 x float> %641, float %__dot625, i32 0
  %__column626 = extractvalue [4 x <4 x float>] %638, 1
  %__dot627 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %639, <4 x float> %__column626)
  %643 = insertelement <4 x float> %642, float %__dot627, i32 1
  %__column628 = extractvalue [4 x <4 x float>] %638, 2
  %__dot629 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %639, <4 x float> %__column628)
  %644 = insertelement <4 x float> %643, float %__dot629, i32 2
  %__column630 = extractvalue [4 x <4 x float>] %638, 3
  %__dot631 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %639, <4 x float> %__column630)
  %FragColor_shadow632 = insertelement <4 x float> %644, float %__dot631, i32 3
  store <4 x float> %FragColor_shadow632, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %645 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %645)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@un34 = external addrspace(2) constant [3 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <3 x float>]
@um4 = external addrspace(2) constant [4 x <4 x float>]
@um2 = external addrspace(2) constant [2 x <2 x float>]
@um3 = external addrspace(2) constant [3 x <3 x float>]

define fastcc void @main() {
entry:
  %v__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %u__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1, i32 -1, i32 1)
  %__rightComp = extractelement <3 x float> %u__, i32 0
  %__leftComp = extractelement <4 x float> %v__, i32 0
  %__element = fmul float %__leftComp, %__rightComp
  %__leftComp1 = extractelement <4 x float> %v__, i32 1
  %__element2 = fmul float %__leftComp1, %__rightComp
  %__leftComp4 = extractelement <4 x float> %v__, i32 2
  %__element5 = fmul float %__leftComp4, %__rightComp
  %__leftComp7 = extractelement <4 x float> %v__, i32 3
  %__element8 = fmul float %__leftComp7, %__rightComp
  %0 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__element, i32 0, float %__element2, i32 0, float %__element5, i32 0, float %__element8, i32 0)
  %__rightComp10 = extractelement <3 x float> %u__, i32 1
  %__element12 = fmul float %__leftComp, %__rightComp10
  %__element15 = fmul float %__leftComp1, %__rightComp10
  %__element18 = fmul float %__leftComp4, %__rightComp10
  %__element21 = fmul float %__leftComp7, %__rightComp10
  %1 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__element12, i32 0, float %__element15, i32 0, float %__element18, i32 0, float %__element21, i32 0)
  %__rightComp24 = extractelement <3 x float> %u__, i32 2
  %__element26 = fmul float %__leftComp, %__rightComp24
  %__element29 = fmul float %__leftComp1, %__rightComp24
  %__element32 = fmul float %__leftComp4, %__rightComp24
  %__element35 = fmul float %__leftComp7, %__rightComp24
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__element26, i32 0, float %__element29, i32 0, float %__element32, i32 0, float %__element35, i32 0)
  %__column38 = fadd <4 x float> %0, <float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %__column40 = fadd <4 x float> %1, <float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00>
  %__column42 = fadd <4 x float> %2, <float 0.000000e+00, float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00>
  %Color__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 2, i32 -1, i32 1)
  %3 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float> undef, i32 15, <3 x float> %Color__, i32 0, <3 x float> %Color__, i32 1, <3 x float> %Color__, i32 2, float 1.000000e+00, i32 0)
  %__dot = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %3, <4 x float> %__column38)
  %__dot46 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %3, <4 x float> %__column40)
  %__dot48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %3, <4 x float> %__column42)
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot, i32 0, float %__dot46, i32 0, float %__dot48, i32 0, float 1.000000e+00, i32 0)
  %FragColor_shadow50 = fmul <4 x float> %3, %4
  %__row = extractelement <4 x float> %__column38, i32 0
  %5 = fmul float %__leftComp, %__row
  %__row53 = extractelement <4 x float> %__column38, i32 1
  %6 = fmul float %__leftComp, %__row53
  %__row54 = extractelement <4 x float> %__column38, i32 2
  %7 = fmul float %__leftComp, %__row54
  %__row55 = extractelement <4 x float> %__column38, i32 3
  %8 = fmul float %__leftComp, %__row55
  %__row57 = extractelement <4 x float> %__column40, i32 0
  %9 = fmul float %__leftComp, %__row57
  %__row58 = extractelement <4 x float> %__column40, i32 1
  %10 = fmul float %__leftComp, %__row58
  %__row59 = extractelement <4 x float> %__column40, i32 2
  %11 = fmul float %__leftComp, %__row59
  %__row60 = extractelement <4 x float> %__column40, i32 3
  %12 = fmul float %__leftComp, %__row60
  %__row62 = extractelement <4 x float> %__column42, i32 0
  %13 = fmul float %__leftComp, %__row62
  %__row63 = extractelement <4 x float> %__column42, i32 1
  %14 = fmul float %__leftComp, %__row63
  %__row64 = extractelement <4 x float> %__column42, i32 2
  %15 = fmul float %__leftComp, %__row64
  %__row65 = extractelement <4 x float> %__column42, i32 3
  %16 = fmul float %__leftComp, %__row65
  %17 = load [3 x <4 x float>] addrspace(2)* @un34, align 16
  %__column68 = extractvalue [3 x <4 x float>] %17, 0
  %__column73 = extractvalue [3 x <4 x float>] %17, 1
  %__column78 = extractvalue [3 x <4 x float>] %17, 2
  %18 = load [4 x <3 x float>] addrspace(2)* @um43, align 16
  %__rightColumn = extractvalue [4 x <3 x float>] %18, 0
  %__rightComp109 = extractelement <3 x float> %__rightColumn, i32 0
  %__product = fmul float %__rightComp109, %5
  %__rightComp112 = extractelement <3 x float> %__rightColumn, i32 1
  %__product113 = fmul float %__rightComp112, %9
  %__dotProduct = fadd float %__product, %__product113
  %__rightComp116 = extractelement <3 x float> %__rightColumn, i32 2
  %__product117 = fmul float %__rightComp116, %13
  %__dotProduct118 = fadd float %__product117, %__dotProduct
  %__product123 = fmul float %__rightComp109, %6
  %__product127 = fmul float %__rightComp112, %10
  %__dotProduct128 = fadd float %__product123, %__product127
  %__product132 = fmul float %__rightComp116, %14
  %__dotProduct133 = fadd float %__product132, %__dotProduct128
  %__product138 = fmul float %__rightComp109, %7
  %__product142 = fmul float %__rightComp112, %11
  %__dotProduct143 = fadd float %__product138, %__product142
  %__product147 = fmul float %__rightComp116, %15
  %__dotProduct148 = fadd float %__product147, %__dotProduct143
  %__product153 = fmul float %__rightComp109, %8
  %__product157 = fmul float %__rightComp112, %12
  %__dotProduct158 = fadd float %__product153, %__product157
  %__product162 = fmul float %__rightComp116, %16
  %__dotProduct163 = fadd float %__product162, %__dotProduct158
  %19 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct118, i32 0, float %__dotProduct133, i32 0, float %__dotProduct148, i32 0, float %__dotProduct163, i32 0)
  %__rightColumn166 = extractvalue [4 x <3 x float>] %18, 1
  %__rightComp169 = extractelement <3 x float> %__rightColumn166, i32 0
  %__product170 = fmul float %__rightComp169, %5
  %__rightComp173 = extractelement <3 x float> %__rightColumn166, i32 1
  %__product174 = fmul float %__rightComp173, %9
  %__dotProduct175 = fadd float %__product170, %__product174
  %__rightComp178 = extractelement <3 x float> %__rightColumn166, i32 2
  %__product179 = fmul float %__rightComp178, %13
  %__dotProduct180 = fadd float %__product179, %__dotProduct175
  %__product185 = fmul float %__rightComp169, %6
  %__product189 = fmul float %__rightComp173, %10
  %__dotProduct190 = fadd float %__product185, %__product189
  %__product194 = fmul float %__rightComp178, %14
  %__dotProduct195 = fadd float %__product194, %__dotProduct190
  %__product200 = fmul float %__rightComp169, %7
  %__product204 = fmul float %__rightComp173, %11
  %__dotProduct205 = fadd float %__product200, %__product204
  %__product209 = fmul float %__rightComp178, %15
  %__dotProduct210 = fadd float %__product209, %__dotProduct205
  %__product215 = fmul float %__rightComp169, %8
  %__product219 = fmul float %__rightComp173, %12
  %__dotProduct220 = fadd float %__product215, %__product219
  %__product224 = fmul float %__rightComp178, %16
  %__dotProduct225 = fadd float %__product224, %__dotProduct220
  %20 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct180, i32 0, float %__dotProduct195, i32 0, float %__dotProduct210, i32 0, float %__dotProduct225, i32 0)
  %__rightColumn228 = extractvalue [4 x <3 x float>] %18, 2
  %__rightComp231 = extractelement <3 x float> %__rightColumn228, i32 0
  %__product232 = fmul float %__rightComp231, %5
  %__rightComp235 = extractelement <3 x float> %__rightColumn228, i32 1
  %__product236 = fmul float %__rightComp235, %9
  %__dotProduct237 = fadd float %__product232, %__product236
  %__rightComp240 = extractelement <3 x float> %__rightColumn228, i32 2
  %__product241 = fmul float %__rightComp240, %13
  %__dotProduct242 = fadd float %__product241, %__dotProduct237
  %__product247 = fmul float %__rightComp231, %6
  %__product251 = fmul float %__rightComp235, %10
  %__dotProduct252 = fadd float %__product247, %__product251
  %__product256 = fmul float %__rightComp240, %14
  %__dotProduct257 = fadd float %__product256, %__dotProduct252
  %__product262 = fmul float %__rightComp231, %7
  %__product266 = fmul float %__rightComp235, %11
  %__dotProduct267 = fadd float %__product262, %__product266
  %__product271 = fmul float %__rightComp240, %15
  %__dotProduct272 = fadd float %__product271, %__dotProduct267
  %__product277 = fmul float %__rightComp231, %8
  %__product281 = fmul float %__rightComp235, %12
  %__dotProduct282 = fadd float %__product277, %__product281
  %__product286 = fmul float %__rightComp240, %16
  %__dotProduct287 = fadd float %__product286, %__dotProduct282
  %21 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct242, i32 0, float %__dotProduct257, i32 0, float %__dotProduct272, i32 0, float %__dotProduct287, i32 0)
  %__rightColumn290 = extractvalue [4 x <3 x float>] %18, 3
  %__rightComp293 = extractelement <3 x float> %__rightColumn290, i32 0
  %__product294 = fmul float %__rightComp293, %5
  %__rightComp297 = extractelement <3 x float> %__rightColumn290, i32 1
  %__product298 = fmul float %__rightComp297, %9
  %__dotProduct299 = fadd float %__product294, %__product298
  %__rightComp302 = extractelement <3 x float> %__rightColumn290, i32 2
  %__product303 = fmul float %__rightComp302, %13
  %__dotProduct304 = fadd float %__product303, %__dotProduct299
  %__product309 = fmul float %__rightComp293, %6
  %__product313 = fmul float %__rightComp297, %10
  %__dotProduct314 = fadd float %__product309, %__product313
  %__product318 = fmul float %__rightComp302, %14
  %__dotProduct319 = fadd float %__product318, %__dotProduct314
  %__product324 = fmul float %__rightComp293, %7
  %__product328 = fmul float %__rightComp297, %11
  %__dotProduct329 = fadd float %__product324, %__product328
  %__product333 = fmul float %__rightComp302, %15
  %__dotProduct334 = fadd float %__product333, %__dotProduct329
  %__product339 = fmul float %__rightComp293, %8
  %__product343 = fmul float %__rightComp297, %12
  %__dotProduct344 = fadd float %__product339, %__product343
  %__product348 = fmul float %__rightComp302, %16
  %__dotProduct349 = fadd float %__product348, %__dotProduct344
  %22 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct304, i32 0, float %__dotProduct319, i32 0, float %__dotProduct334, i32 0, float %__dotProduct349, i32 0)
  %__column354 = fadd <4 x float> %__column68, %19
  %__column357 = fadd <4 x float> %__column73, %20
  %__column360 = fadd <4 x float> %__column78, %21
  %__column363 = fadd <4 x float> %22, <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>
  %__row366 = extractelement <4 x float> %__column354, i32 0
  %23 = fsub float 0.000000e+00, %__row366
  %__row367 = extractelement <4 x float> %__column354, i32 1
  %24 = fsub float 0.000000e+00, %__row367
  %__row368 = extractelement <4 x float> %__column354, i32 2
  %25 = fsub float 0.000000e+00, %__row368
  %__row369 = extractelement <4 x float> %__column354, i32 3
  %26 = fsub float 0.000000e+00, %__row369
  %__row371 = extractelement <4 x float> %__column357, i32 0
  %27 = fsub float 0.000000e+00, %__row371
  %__row372 = extractelement <4 x float> %__column357, i32 1
  %28 = fsub float 0.000000e+00, %__row372
  %__row373 = extractelement <4 x float> %__column357, i32 2
  %29 = fsub float 0.000000e+00, %__row373
  %__row374 = extractelement <4 x float> %__column357, i32 3
  %30 = fsub float 0.000000e+00, %__row374
  %__row376 = extractelement <4 x float> %__column360, i32 0
  %31 = fsub float 0.000000e+00, %__row376
  %__row377 = extractelement <4 x float> %__column360, i32 1
  %32 = fsub float 0.000000e+00, %__row377
  %__row378 = extractelement <4 x float> %__column360, i32 2
  %33 = fsub float 0.000000e+00, %__row378
  %__row379 = extractelement <4 x float> %__column360, i32 3
  %34 = fsub float 0.000000e+00, %__row379
  %__row381 = extractelement <4 x float> %__column363, i32 0
  %35 = fsub float 0.000000e+00, %__row381
  %__row382 = extractelement <4 x float> %__column363, i32 1
  %36 = fsub float 0.000000e+00, %__row382
  %__row383 = extractelement <4 x float> %__column363, i32 2
  %37 = fsub float 0.000000e+00, %__row383
  %__row384 = extractelement <4 x float> %__column363, i32 3
  %38 = fsub float 0.000000e+00, %__row384
  %__product391 = fmul float %__leftComp, %23
  %__product394 = fmul float %__leftComp1, %27
  %__dotProduct395 = fadd float %__product391, %__product394
  %__product398 = fmul float %__leftComp4, %31
  %__dotProduct399 = fadd float %__product398, %__dotProduct395
  %__product402 = fmul float %__leftComp7, %35
  %__dotProduct403 = fadd float %__product402, %__dotProduct399
  %__product406 = fmul float %__leftComp, %24
  %__product409 = fmul float %__leftComp1, %28
  %__dotProduct410 = fadd float %__product406, %__product409
  %__product413 = fmul float %__leftComp4, %32
  %__dotProduct414 = fadd float %__product413, %__dotProduct410
  %__product417 = fmul float %__leftComp7, %36
  %__dotProduct418 = fadd float %__product417, %__dotProduct414
  %__product421 = fmul float %__leftComp, %25
  %__product424 = fmul float %__leftComp1, %29
  %__dotProduct425 = fadd float %__product421, %__product424
  %__product428 = fmul float %__leftComp4, %33
  %__dotProduct429 = fadd float %__product428, %__dotProduct425
  %__product432 = fmul float %__leftComp7, %37
  %__dotProduct433 = fadd float %__product432, %__dotProduct429
  %__product436 = fmul float %__leftComp, %26
  %__product439 = fmul float %__leftComp1, %30
  %__dotProduct440 = fadd float %__product436, %__product439
  %__product443 = fmul float %__leftComp4, %34
  %__dotProduct444 = fadd float %__product443, %__dotProduct440
  %__product447 = fmul float %__leftComp7, %38
  %__dotProduct448 = fadd float %__product447, %__dotProduct444
  %39 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct403, i32 0, float %__dotProduct418, i32 0, float %__dotProduct433, i32 0, float %__dotProduct448, i32 0)
  %FragColor_shadow449 = fadd <4 x float> %FragColor_shadow50, %39
  %__column452 = fmul <4 x float> %__column354, %__column354
  %__column455 = fmul <4 x float> %__column357, %__column357
  %__column458 = fmul <4 x float> %__column360, %__column360
  %__column461 = fmul <4 x float> %__column363, %__column363
  %__dot463 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %__column452)
  %__dot465 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %__column455)
  %__dot467 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %__column458)
  %__dot469 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow449, <4 x float> %__column461)
  %40 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot463, i32 0, float %__dot465, i32 0, float %__dot467, i32 0, float %__dot469, i32 0)
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float> undef, i32 15, <3 x float> %__rightColumn, i32 0, <3 x float> %__rightColumn166, i32 0, <3 x float> %__rightColumn228, i32 0, <3 x float> %__rightColumn290, i32 0)
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float> undef, i32 15, <3 x float> %__rightColumn, i32 1, <3 x float> %__rightColumn166, i32 1, <3 x float> %__rightColumn228, i32 1, <3 x float> %__rightColumn290, i32 1)
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float> undef, i32 15, <3 x float> %__rightColumn, i32 2, <3 x float> %__rightColumn166, i32 2, <3 x float> %__rightColumn228, i32 2, <3 x float> %__rightColumn290, i32 2)
  %__dot506 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %40, <4 x float> %41)
  %__dot508 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %40, <4 x float> %42)
  %__dot510 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %40, <4 x float> %43)
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot506, i32 0, float %__dot508, i32 0, float %__dot510, i32 0, float 1.000000e+00, i32 0)
  %FragColor_shadow512 = fmul <4 x float> %40, %44
  %45 = load [4 x <4 x float>] addrspace(2)* @um4, align 16
  %__column513 = extractvalue [4 x <4 x float>] %45, 0
  %__element514 = extractelement <4 x float> %__column513, i32 0
  %__element515 = extractelement <4 x float> %__column513, i32 1
  %__element516 = extractelement <4 x float> %__column513, i32 2
  %__element517 = extractelement <4 x float> %__column513, i32 3
  %__column518 = extractvalue [4 x <4 x float>] %45, 1
  %__element519 = extractelement <4 x float> %__column518, i32 0
  %__element520 = extractelement <4 x float> %__column518, i32 1
  %__element521 = extractelement <4 x float> %__column518, i32 2
  %__element522 = extractelement <4 x float> %__column518, i32 3
  %__column523 = extractvalue [4 x <4 x float>] %45, 2
  %__element524 = extractelement <4 x float> %__column523, i32 0
  %__element525 = extractelement <4 x float> %__column523, i32 1
  %__element526 = extractelement <4 x float> %__column523, i32 2
  %__element527 = extractelement <4 x float> %__column523, i32 3
  %__column528 = extractvalue [4 x <4 x float>] %45, 3
  %__element529 = extractelement <4 x float> %__column528, i32 0
  %__element530 = extractelement <4 x float> %__column528, i32 1
  %__element531 = extractelement <4 x float> %__column528, i32 2
  %__element532 = extractelement <4 x float> %__column528, i32 3
  %46 = fmul float %__element526, %__element532
  %47 = fmul float %__element531, %__element527
  %48 = fsub float %46, %47
  %49 = fmul float %__element520, %48
  %50 = fmul float %__element521, %__element532
  %51 = fmul float %__element531, %__element522
  %52 = fsub float %50, %51
  %53 = fmul float %__element525, %52
  %54 = fsub float %49, %53
  %55 = fmul float %__element521, %__element527
  %56 = fmul float %__element526, %__element522
  %57 = fsub float %55, %56
  %58 = fmul float %__element530, %57
  %59 = fadd float %58, %54
  %60 = fmul float %__element514, %59
  %61 = fmul float %__element515, %48
  %62 = fmul float %__element516, %__element532
  %63 = fmul float %__element531, %__element517
  %64 = fsub float %62, %63
  %65 = fmul float %__element525, %64
  %66 = fsub float %61, %65
  %67 = fmul float %__element516, %__element527
  %68 = fmul float %__element526, %__element517
  %69 = fsub float %67, %68
  %70 = fmul float %__element530, %69
  %71 = fadd float %70, %66
  %72 = fmul float %__element519, %71
  %73 = fsub float %60, %72
  %74 = fmul float %__element515, %52
  %75 = fmul float %__element520, %64
  %76 = fsub float %74, %75
  %77 = fmul float %__element516, %__element522
  %78 = fmul float %__element521, %__element517
  %79 = fsub float %77, %78
  %80 = fmul float %__element530, %79
  %81 = fadd float %80, %76
  %82 = fmul float %__element524, %81
  %83 = fadd float %82, %73
  %84 = fmul float %__element515, %57
  %85 = fmul float %__element520, %69
  %86 = fsub float %84, %85
  %87 = fmul float %__element525, %79
  %88 = fadd float %87, %86
  %89 = fmul float %__element529, %88
  %90 = fsub float %83, %89
  %91 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %90, <4 x i32> zeroinitializer)
  %FragColor_shadow534 = fmul <4 x float> %FragColor_shadow512, %91
  %92 = load [2 x <2 x float>] addrspace(2)* @um2, align 8
  %__column535 = extractvalue [2 x <2 x float>] %92, 0
  %__element536 = extractelement <2 x float> %__column535, i32 0
  %__element537 = extractelement <2 x float> %__column535, i32 1
  %__column538 = extractvalue [2 x <2 x float>] %92, 1
  %__element539 = extractelement <2 x float> %__column538, i32 0
  %__element540 = extractelement <2 x float> %__column538, i32 1
  %93 = fsub float -0.000000e+00, %__element537
  %94 = fsub float -0.000000e+00, %__element539
  %95 = fmul float %__element536, %__element540
  %96 = fmul float %__element539, %__element537
  %97 = fsub float %95, %96
  %98 = fdiv float %__element540, %97
  %99 = fdiv float %94, %97
  %100 = fdiv float %93, %97
  %101 = fdiv float %__element536, %97
  %102 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %98, i32 0, float %99, i32 0, float %100, i32 0, float %101, i32 0)
  %FragColor_shadow550 = fmul <4 x float> %102, %FragColor_shadow534
  %103 = load [3 x <3 x float>] addrspace(2)* @um3, align 16
  %__column551 = extractvalue [3 x <3 x float>] %103, 0
  %__element552 = extractelement <3 x float> %__column551, i32 0
  %__element553 = extractelement <3 x float> %__column551, i32 1
  %__element554 = extractelement <3 x float> %__column551, i32 2
  %__column555 = extractvalue [3 x <3 x float>] %103, 1
  %__element556 = extractelement <3 x float> %__column555, i32 0
  %__element557 = extractelement <3 x float> %__column555, i32 1
  %__element558 = extractelement <3 x float> %__column555, i32 2
  %__column559 = extractvalue [3 x <3 x float>] %103, 2
  %__element560 = extractelement <3 x float> %__column559, i32 0
  %__element561 = extractelement <3 x float> %__column559, i32 1
  %__element562 = extractelement <3 x float> %__column559, i32 2
  %104 = fmul float %__element552, %__element561
  %105 = fmul float %__element560, %__element553
  %106 = fsub float %104, %105
  %107 = fsub float -0.000000e+00, %106
  %108 = fmul float %__element557, %__element562
  %109 = fmul float %__element561, %__element558
  %110 = fsub float %108, %109
  %111 = fmul float %__element552, %110
  %112 = fmul float %__element553, %__element562
  %113 = fmul float %__element561, %__element554
  %114 = fsub float %112, %113
  %115 = fmul float %__element556, %114
  %116 = fsub float %111, %115
  %117 = fmul float %__element553, %__element558
  %118 = fmul float %__element557, %__element554
  %119 = fsub float %117, %118
  %120 = fmul float %__element560, %119
  %121 = fadd float %120, %116
  %122 = fdiv float %107, %121
  %123 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %122, <4 x i32> zeroinitializer)
  %FragColor_shadow579 = fmul <4 x float> %123, %FragColor_shadow550
  %124 = fmul float %__element530, %__element521
  %125 = fmul float %__element520, %__element531
  %126 = fmul float %__element530, %__element526
  %127 = fmul float %__element525, %__element531
  %128 = fmul float %__element530, %__element517
  %129 = fmul float %__element515, %__element532
  %130 = fmul float %__element530, %__element527
  %131 = fmul float %__element525, %__element532
  %132 = fmul float %__element530, %__element522
  %133 = fmul float %__element520, %__element532
  %134 = fmul float %__element524, %52
  %135 = fmul float %__element519, %48
  %136 = fmul float %__element525, %__element521
  %137 = fmul float %__element520, %__element526
  %138 = fsub float %125, %124
  %139 = fsub float %127, %126
  %140 = fmul float %__element525, %__element517
  %141 = fmul float %__element515, %__element527
  %142 = fsub float %129, %128
  %143 = fsub float %131, %130
  %144 = fmul float %__element525, %__element522
  %145 = fmul float %__element520, %__element527
  %146 = fsub float %133, %132
  %147 = fmul float %__element529, %57
  %148 = fsub float %135, %134
  %149 = fmul float %__element530, %__element516
  %150 = fmul float %__element515, %__element531
  %151 = fsub float %137, %136
  %152 = fmul float %__element524, %138
  %153 = fmul float %__element519, %139
  %154 = fsub float %141, %140
  %155 = fmul float %__element524, %142
  %156 = fmul float %__element514, %143
  %157 = fsub float %145, %144
  %158 = fmul float %__element524, %146
  %159 = fmul float %__element519, %143
  %160 = fmul float %__element519, %64
  %161 = fmul float %__element514, %52
  %162 = fmul float %__element524, %64
  %163 = fmul float %__element514, %48
  %164 = fadd float %147, %148
  %165 = fdiv float %59, %90
  %166 = fmul float %__element520, %__element516
  %167 = fmul float %__element515, %__element521
  %168 = fsub float %150, %149
  %169 = fmul float %__element525, %__element516
  %170 = fmul float %__element515, %__element526
  %171 = fmul float %__element529, %151
  %172 = fsub float %153, %152
  %173 = fmul float %__element520, %__element517
  %174 = fmul float %__element515, %__element522
  %175 = fmul float %__element529, %154
  %176 = fsub float %156, %155
  %177 = fmul float %__element529, %157
  %178 = fsub float %159, %158
  %179 = fmul float %__element529, %79
  %180 = fsub float %161, %160
  %181 = fmul float %__element529, %69
  %182 = fsub float %163, %162
  %183 = fsub float -0.000000e+00, %164
  %184 = fsub float -0.000000e+00, %71
  %185 = fdiv float %184, %90
  %186 = fdiv float %183, %90
  %187 = fsub float %167, %166
  %188 = fmul float %__element519, %168
  %189 = fmul float %__element514, %138
  %190 = fsub float %170, %169
  %191 = fmul float %__element524, %168
  %192 = fmul float %__element514, %139
  %193 = fadd float %171, %172
  %194 = fsub float %174, %173
  %195 = fmul float %__element519, %154
  %196 = fmul float %__element514, %157
  %197 = fmul float %__element519, %142
  %198 = fmul float %__element514, %146
  %199 = fadd float %175, %176
  %200 = fadd float %177, %178
  %201 = fmul float %__element519, %69
  %202 = fmul float %__element514, %57
  %203 = fadd float %179, %180
  %204 = fadd float %181, %182
  %205 = fdiv float %81, %90
  %206 = fdiv float %204, %90
  %207 = fdiv float %200, %90
  %208 = fmul float %__element529, %187
  %209 = fsub float %189, %188
  %210 = fmul float %__element529, %190
  %211 = fsub float %192, %191
  %212 = fsub float -0.000000e+00, %193
  %213 = fmul float %__element524, %194
  %214 = fsub float %196, %195
  %215 = fmul float %__element529, %194
  %216 = fsub float %198, %197
  %217 = fsub float -0.000000e+00, %199
  %218 = fmul float %__element524, %79
  %219 = fsub float %202, %201
  %220 = fsub float -0.000000e+00, %203
  %221 = fsub float -0.000000e+00, %88
  %222 = fdiv float %221, %90
  %223 = fdiv float %220, %90
  %224 = fdiv float %217, %90
  %225 = fdiv float %212, %90
  %226 = fmul float %__element519, %190
  %227 = fmul float %__element514, %151
  %228 = fadd float %208, %209
  %229 = fadd float %210, %211
  %230 = fadd float %213, %214
  %231 = fadd float %215, %216
  %232 = fadd float %218, %219
  %233 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %165, i32 0, float %185, i32 0, float %205, i32 0, float %222, i32 0)
  %234 = fdiv float %232, %90
  %235 = fdiv float %231, %90
  %236 = fdiv float %229, %90
  %237 = fmul float %__element524, %187
  %238 = fsub float %227, %226
  %239 = fsub float -0.000000e+00, %228
  %240 = fsub float -0.000000e+00, %230
  %__dot625 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %233)
  %241 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %186, i32 0, float %206, i32 0, float %223, i32 0, float %234, i32 0)
  %242 = fdiv float %240, %90
  %243 = fdiv float %239, %90
  %244 = fadd float %237, %238
  %__dot627 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %241)
  %245 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %207, i32 0, float %224, i32 0, float %235, i32 0, float %242, i32 0)
  %246 = fdiv float %244, %90
  %__dot629 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %245)
  %247 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %225, i32 0, float %236, i32 0, float %243, i32 0, float %246, i32 0)
  %__dot631 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %FragColor_shadow579, <4 x float> %247)
  %248 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot625, i32 0, float %__dot627, i32 0, float %__dot629, i32 0, float %__dot631, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %248)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.v3f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform vec4[3] un34;
uniform vec3[4] um43;
uniform vec4[4] um4;
uniform vec2[2] um2;
uniform vec3[3] um3;
out vec4 FragColor;
in vec4 v;
in vec3 u;
const vec4 const37 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 const39 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 const41 = vec4(0.0, 0.0, 4.3, 0.0);
in vec3 Color;
const float const43_1f = 1.0;
const vec4 const156 = vec4(0.0, 0.0, 0.0, 1.0);
const float const158_0f = 0.0;
const float const275__0f = 0.0;

void main()
{
    float __element = v.x * u.x;
    float __element2 = v.y * u.x;
    float __element5 = v.z * u.x;
    float __element8 = v.w * u.x;
    vec4 temp25 = vec4(__element, __element2, __element5, __element8);
    float __element12 = v.x * u.y;
    float __element15 = v.y * u.y;
    float __element18 = v.z * u.y;
    float __element21 = v.w * u.y;
    vec4 temp30 = vec4(__element12, __element15, __element18, __element21);
    float __element26 = v.x * u.z;
    float __element29 = v.y * u.z;
    float __element32 = v.z * u.z;
    float __element35 = v.w * u.z;
    vec4 temp35 = vec4(__element26, __element29, __element32, __element35);
    vec4 __column38 = temp25 + const37;
    vec4 __column40 = temp30 + const39;
    vec4 __column42 = temp35 + const41;
    vec4 temp42 = vec4(Color.x, Color.y, Color.z, const43_1f);
    float __dot = dot(temp42, __column38);
    float __dot46 = dot(temp42, __column40);
    float __dot48 = dot(temp42, __column42);
    vec4 temp47 = vec4(__dot, __dot46, __dot48, const43_1f);
    vec4 FragColor_shadow50 = temp42 * temp47;
    float temp49 = v.x * __column38.x;
    float temp50 = v.x * __column38.y;
    float temp51 = v.x * __column38.z;
    float temp52 = v.x * __column38.w;
    float temp53 = v.x * __column40.x;
    float temp54 = v.x * __column40.y;
    float temp55 = v.x * __column40.z;
    float temp56 = v.x * __column40.w;
    float temp57 = v.x * __column42.x;
    float temp58 = v.x * __column42.y;
    float temp59 = v.x * __column42.z;
    float temp60 = v.x * __column42.w;
    vec4 __column68 = un34[0];
    vec4 __column73 = un34[1];
    vec4 __column78 = un34[2];
    vec3 __rightColumn = um43[0];
    float __product = __rightColumn.x * temp49;
    float __product113 = __rightColumn.y * temp53;
    float __dotProduct = __product + __product113;
    float __product117 = __rightColumn.z * temp57;
    float __dotProduct118 = __product117 + __dotProduct;
    float __product123 = __rightColumn.x * temp50;
    float __product127 = __rightColumn.y * temp54;
    float __dotProduct128 = __product123 + __product127;
    float __product132 = __rightColumn.z * temp58;
    float __dotProduct133 = __product132 + __dotProduct128;
    float __product138 = __rightColumn.x * temp51;
    float __product142 = __rightColumn.y * temp55;
    float __dotProduct143 = __product138 + __product142;
    float __product147 = __rightColumn.z * temp59;
    float __dotProduct148 = __product147 + __dotProduct143;
    float __product153 = __rightColumn.x * temp52;
    float __product157 = __rightColumn.y * temp56;
    float __dotProduct158 = __product153 + __product157;
    float __product162 = __rightColumn.z * temp60;
    float __dotProduct163 = __product162 + __dotProduct158;
    vec4 temp85 = vec4(__dotProduct118, __dotProduct133, __dotProduct148, __dotProduct163);
    vec3 __rightColumn166 = um43[1];
    float __product170 = __rightColumn166.x * temp49;
    float __product174 = __rightColumn166.y * temp53;
    float __dotProduct175 = __product170 + __product174;
    float __product179 = __rightColumn166.z * temp57;
    float __dotProduct180 = __product179 + __dotProduct175;
    float __product185 = __rightColumn166.x * temp50;
    float __product189 = __rightColumn166.y * temp54;
    float __dotProduct190 = __product185 + __product189;
    float __product194 = __rightColumn166.z * temp58;
    float __dotProduct195 = __product194 + __dotProduct190;
    float __product200 = __rightColumn166.x * temp51;
    float __product204 = __rightColumn166.y * temp55;
    float __dotProduct205 = __product200 + __product204;
    float __product209 = __rightColumn166.z * temp59;
    float __dotProduct210 = __product209 + __dotProduct205;
    float __product215 = __rightColumn166.x * temp52;
    float __product219 = __rightColumn166.y * temp56;
    float __dotProduct220 = __product215 + __product219;
    float __product224 = __rightColumn166.z * temp60;
    float __dotProduct225 = __product224 + __dotProduct220;
    vec4 temp107 = vec4(__dotProduct180, __dotProduct195, __dotProduct210, __dotProduct225);
    vec3 __rightColumn228 = um43[2];
    float __product232 = __rightColumn228.x * temp49;
    float __product236 = __rightColumn228.y * temp53;
    float __dotProduct237 = __product232 + __product236;
    float __product241 = __rightColumn228.z * temp57;
    float __dotProduct242 = __product241 + __dotProduct237;
    float __product247 = __rightColumn228.x * temp50;
    float __product251 = __rightColumn228.y * temp54;
    float __dotProduct252 = __product247 + __product251;
    float __product256 = __rightColumn228.z * temp58;
    float __dotProduct257 = __product256 + __dotProduct252;
    float __product262 = __rightColumn228.x * temp51;
    float __product266 = __rightColumn228.y * temp55;
    float __dotProduct267 = __product262 + __product266;
    float __product271 = __rightColumn228.z * temp59;
    float __dotProduct272 = __product271 + __dotProduct267;
    float __product277 = __rightColumn228.x * temp52;
    float __product281 = __rightColumn228.y * temp56;
    float __dotProduct282 = __product277 + __product281;
    float __product286 = __rightColumn228.z * temp60;
    float __dotProduct287 = __product286 + __dotProduct282;
    vec4 temp129 = vec4(__dotProduct242, __dotProduct257, __dotProduct272, __dotProduct287);
    vec3 __rightColumn290 = um43[3];
    float __product294 = __rightColumn290.x * temp49;
    float __product298 = __rightColumn290.y * temp53;
    float __dotProduct299 = __product294 + __product298;
    float __product303 = __rightColumn290.z * temp57;
    float __dotProduct304 = __product303 + __dotProduct299;
    float __product309 = __rightColumn290.x * temp50;
    float __product313 = __rightColumn290.y * temp54;
    float __dotProduct314 = __product309 + __product313;
    float __product318 = __rightColumn290.z * temp58;
    float __dotProduct319 = __product318 + __dotProduct314;
    float __product324 = __rightColumn290.x * temp51;
    float __product328 = __rightColumn290.y * temp55;
    float __dotProduct329 = __product324 + __product328;
    float __product333 = __rightColumn290.z * temp59;
    float __dotProduct334 = __product333 + __dotProduct329;
    float __product339 = __rightColumn290.x * temp52;
    float __product343 = __rightColumn290.y * temp56;
    float __dotProduct344 = __product339 + __product343;
    float __product348 = __rightColumn290.z * temp60;
    float __dotProduct349 = __product348 + __dotProduct344;
    vec4 temp151 = vec4(__dotProduct304, __dotProduct319, __dotProduct334, __dotProduct349);
    vec4 __column354 = __column68 + temp85;
    vec4 __column357 = __column73 + temp107;
    vec4 __column360 = __column78 + temp129;
    vec4 __column363 = temp151 + const156;
    float temp157 = const158_0f - __column354.x;
    float temp159 = const158_0f - __column354.y;
    float temp160 = const158_0f - __column354.z;
    float temp161 = const158_0f - __column354.w;
    float temp162 = const158_0f - __column357.x;
    float temp163 = const158_0f - __column357.y;
    float temp164 = const158_0f - __column357.z;
    float temp165 = const158_0f - __column357.w;
    float temp166 = const158_0f - __column360.x;
    float temp167 = const158_0f - __column360.y;
    float temp168 = const158_0f - __column360.z;
    float temp169 = const158_0f - __column360.w;
    float temp170 = const158_0f - __column363.x;
    float temp171 = const158_0f - __column363.y;
    float temp172 = const158_0f - __column363.z;
    float temp173 = const158_0f - __column363.w;
    float __product391 = v.x * temp157;
    float __product394 = v.y * temp162;
    float __dotProduct395 = __product391 + __product394;
    float __product398 = v.z * temp166;
    float __dotProduct399 = __product398 + __dotProduct395;
    float __product402 = v.w * temp170;
    float __dotProduct403 = __product402 + __dotProduct399;
    float __product406 = v.x * temp159;
    float __product409 = v.y * temp163;
    float __dotProduct410 = __product406 + __product409;
    float __product413 = v.z * temp167;
    float __dotProduct414 = __product413 + __dotProduct410;
    float __product417 = v.w * temp171;
    float __dotProduct418 = __product417 + __dotProduct414;
    float __product421 = v.x * temp160;
    float __product424 = v.y * temp164;
    float __dotProduct425 = __product421 + __product424;
    float __product428 = v.z * temp168;
    float __dotProduct429 = __product428 + __dotProduct425;
    float __product432 = v.w * temp172;
    float __dotProduct433 = __product432 + __dotProduct429;
    float __product436 = v.x * temp161;
    float __product439 = v.y * temp165;
    float __dotProduct440 = __product436 + __product439;
    float __product443 = v.z * temp169;
    float __dotProduct444 = __product443 + __dotProduct440;
    float __product447 = v.w * temp173;
    float __dotProduct448 = __product447 + __dotProduct444;
    vec4 temp202 = vec4(__dotProduct403, __dotProduct418, __dotProduct433, __dotProduct448);
    vec4 FragColor_shadow449 = FragColor_shadow50 + temp202;
    vec4 __column452 = __column354 * __column354;
    vec4 __column455 = __column357 * __column357;
    vec4 __column458 = __column360 * __column360;
    vec4 __column461 = __column363 * __column363;
    float __dot463 = dot(FragColor_shadow449, __column452);
    float __dot465 = dot(FragColor_shadow449, __column455);
    float __dot467 = dot(FragColor_shadow449, __column458);
    float __dot469 = dot(FragColor_shadow449, __column461);
    vec4 temp212 = vec4(__dot463, __dot465, __dot467, __dot469);
    vec4 temp213 = vec4(__rightColumn.x, __rightColumn166.x, __rightColumn228.x, __rightColumn290.x);
    vec4 temp214 = vec4(__rightColumn.y, __rightColumn166.y, __rightColumn228.y, __rightColumn290.y);
    vec4 temp215 = vec4(__rightColumn.z, __rightColumn166.z, __rightColumn228.z, __rightColumn290.z);
    float __dot506 = dot(temp212, temp213);
    float __dot508 = dot(temp212, temp214);
    float __dot510 = dot(temp212, temp215);
    vec4 temp219 = vec4(__dot506, __dot508, __dot510, const43_1f);
    vec4 FragColor_shadow512 = temp212 * temp219;
    vec4 __column513 = um4[0];
    vec4 __column518 = um4[1];
    vec4 __column523 = um4[2];
    vec4 __column528 = um4[3];
    float temp225 = __column523.z * __column528.w;
    float temp226 = __column528.z * __column523.w;
    float temp227 = temp225 - temp226;
    float temp228 = __column518.y * temp227;
    float temp229 = __column518.z * __column528.w;
    float temp230 = __column528.z * __column518.w;
    float temp231 = temp229 - temp230;
    float temp232 = __column523.y * temp231;
    float temp233 = temp228 - temp232;
    float temp234 = __column518.z * __column523.w;
    float temp235 = __column523.z * __column518.w;
    float temp236 = temp234 - temp235;
    float temp237 = __column528.y * temp236;
    float temp238 = temp237 + temp233;
    float temp239 = __column513.x * temp238;
    float temp240 = __column513.y * temp227;
    float temp241 = __column513.z * __column528.w;
    float temp242 = __column528.z * __column513.w;
    float temp243 = temp241 - temp242;
    float temp244 = __column523.y * temp243;
    float temp245 = temp240 - temp244;
    float temp246 = __column513.z * __column523.w;
    float temp247 = __column523.z * __column513.w;
    float temp248 = temp246 - temp247;
    float temp249 = __column528.y * temp248;
    float temp250 = temp249 + temp245;
    float temp251 = __column518.x * temp250;
    float temp252 = temp239 - temp251;
    float temp253 = __column513.y * temp231;
    float temp254 = __column518.y * temp243;
    float temp255 = temp253 - temp254;
    float temp256 = __column513.z * __column518.w;
    float temp257 = __column518.z * __column513.w;
    float temp258 = temp256 - temp257;
    float temp259 = __column528.y * temp258;
    float temp260 = temp259 + temp255;
    float temp261 = __column523.x * temp260;
    float temp262 = temp261 + temp252;
    float temp263 = __column513.y * temp236;
    float temp264 = __column518.y * temp248;
    float temp265 = temp263 - temp264;
    float temp266 = __column523.y * temp258;
    float temp267 = temp266 + temp265;
    float temp268 = __column528.x * temp267;
    float temp269 = temp262 - temp268;
    vec4 temp270 = vec4(temp269);
    vec4 FragColor_shadow534 = FragColor_shadow512 * temp270;
    vec2 __column535 = um2[0];
    vec2 __column538 = um2[1];
    float temp274 = const275__0f - __column535.y;
    float temp276 = const275__0f - __column538.x;
    float temp277 = __column535.x * __column538.y;
    float temp278 = __column538.x * __column535.y;
    float temp279 = temp277 - temp278;
    float temp280 = __column538.y / temp279;
    float temp281 = temp276 / temp279;
    float temp282 = temp274 / temp279;
    float temp283 = __column535.x / temp279;
    vec4 temp284 = vec4(temp280, temp281, temp282, temp283);
    vec4 FragColor_shadow550 = temp284 * FragColor_shadow534;
    vec3 __column551 = um3[0];
    vec3 __column555 = um3[1];
    vec3 __column559 = um3[2];
    float temp289 = __column551.x * __column559.y;
    float temp290 = __column559.x * __column551.y;
    float temp291 = temp289 - temp290;
    float temp292 = const275__0f - temp291;
    float temp293 = __column555.y * __column559.z;
    float temp294 = __column559.y * __column555.z;
    float temp295 = temp293 - temp294;
    float temp296 = __column551.x * temp295;
    float temp297 = __column551.y * __column559.z;
    float temp298 = __column559.y * __column551.z;
    float temp299 = temp297 - temp298;
    float temp300 = __column555.x * temp299;
    float temp301 = temp296 - temp300;
    float temp302 = __column551.y * __column555.z;
    float temp303 = __column555.y * __column551.z;
    float temp304 = temp302 - temp303;
    float temp305 = __column559.x * temp304;
    float temp306 = temp305 + temp301;
    float temp307 = temp292 / temp306;
    vec4 temp308 = vec4(temp307);
    vec4 FragColor_shadow579 = temp308 * FragColor_shadow550;
    float temp310 = __column528.y * __column518.z;
    float temp311 = __column518.y * __column528.z;
    float temp312 = __column528.y * __column523.z;
    float temp313 = __column523.y * __column528.z;
    float temp314 = __column528.y * __column513.w;
    float temp315 = __column513.y * __column528.w;
    float temp316 = __column528.y * __column523.w;
    float temp317 = __column523.y * __column528.w;
    float temp318 = __column528.y * __column518.w;
    float temp319 = __column518.y * __column528.w;
    float temp320 = __column523.x * temp231;
    float temp321 = __column518.x * temp227;
    float temp322 = __column523.y * __column518.z;
    float temp323 = __column518.y * __column523.z;
    float temp324 = temp311 - temp310;
    float temp325 = temp313 - temp312;
    float temp326 = __column523.y * __column513.w;
    float temp327 = __column513.y * __column523.w;
    float temp328 = temp315 - temp314;
    float temp329 = temp317 - temp316;
    float temp330 = __column523.y * __column518.w;
    float temp331 = __column518.y * __column523.w;
    float temp332 = temp319 - temp318;
    float temp333 = __column528.x * temp236;
    float temp334 = temp321 - temp320;
    float temp335 = __column528.y * __column513.z;
    float temp336 = __column513.y * __column528.z;
    float temp337 = temp323 - temp322;
    float temp338 = __column523.x * temp324;
    float temp339 = __column518.x * temp325;
    float temp340 = temp327 - temp326;
    float temp341 = __column523.x * temp328;
    float temp342 = __column513.x * temp329;
    float temp343 = temp331 - temp330;
    float temp344 = __column523.x * temp332;
    float temp345 = __column518.x * temp329;
    float temp346 = __column518.x * temp243;
    float temp347 = __column513.x * temp231;
    float temp348 = __column523.x * temp243;
    float temp349 = __column513.x * temp227;
    float temp350 = temp333 + temp334;
    float temp351 = temp238 / temp269;
    float temp352 = __column518.y * __column513.z;
    float temp353 = __column513.y * __column518.z;
    float temp354 = temp336 - temp335;
    float temp355 = __column523.y * __column513.z;
    float temp356 = __column513.y * __column523.z;
    float temp357 = __column528.x * temp337;
    float temp358 = temp339 - temp338;
    float temp359 = __column518.y * __column513.w;
    float temp360 = __column513.y * __column518.w;
    float temp361 = __column528.x * temp340;
    float temp362 = temp342 - temp341;
    float temp363 = __column528.x * temp343;
    float temp364 = temp345 - temp344;
    float temp365 = __column528.x * temp258;
    float temp366 = temp347 - temp346;
    float temp367 = __column528.x * temp248;
    float temp368 = temp349 - temp348;
    float temp369 = const275__0f - temp350;
    float temp370 = const275__0f - temp250;
    float temp371 = temp370 / temp269;
    float temp372 = temp369 / temp269;
    float temp373 = temp353 - temp352;
    float temp374 = __column518.x * temp354;
    float temp375 = __column513.x * temp324;
    float temp376 = temp356 - temp355;
    float temp377 = __column523.x * temp354;
    float temp378 = __column513.x * temp325;
    float temp379 = temp357 + temp358;
    float temp380 = temp360 - temp359;
    float temp381 = __column518.x * temp340;
    float temp382 = __column513.x * temp343;
    float temp383 = __column518.x * temp328;
    float temp384 = __column513.x * temp332;
    float temp385 = temp361 + temp362;
    float temp386 = temp363 + temp364;
    float temp387 = __column518.x * temp248;
    float temp388 = __column513.x * temp236;
    float temp389 = temp365 + temp366;
    float temp390 = temp367 + temp368;
    float temp391 = temp260 / temp269;
    float temp392 = temp390 / temp269;
    float temp393 = temp386 / temp269;
    float temp394 = __column528.x * temp373;
    float temp395 = temp375 - temp374;
    float temp396 = __column528.x * temp376;
    float temp397 = temp378 - temp377;
    float temp398 = const275__0f - temp379;
    float temp399 = __column523.x * temp380;
    float temp400 = temp382 - temp381;
    float temp401 = __column528.x * temp380;
    float temp402 = temp384 - temp383;
    float temp403 = const275__0f - temp385;
    float temp404 = __column523.x * temp258;
    float temp405 = temp388 - temp387;
    float temp406 = const275__0f - temp389;
    float temp407 = const275__0f - temp267;
    float temp408 = temp407 / temp269;
    float temp409 = temp406 / temp269;
    float temp410 = temp403 / temp269;
    float temp411 = temp398 / temp269;
    float temp412 = __column518.x * temp376;
    float temp413 = __column513.x * temp337;
    float temp414 = temp394 + temp395;
    float temp415 = temp396 + temp397;
    float temp416 = temp399 + temp400;
    float temp417 = temp401 + temp402;
    float temp418 = temp404 + temp405;
    vec4 temp419 = vec4(temp351, temp371, temp391, temp408);
    float temp420 = temp418 / temp269;
    float temp421 = temp417 / temp269;
    float temp422 = temp415 / temp269;
    float temp423 = __column523.x * temp373;
    float temp424 = temp413 - temp412;
    float temp425 = const275__0f - temp414;
    float temp426 = const275__0f - temp416;
    float __dot625 = dot(FragColor_shadow579, temp419);
    vec4 temp428 = vec4(temp372, temp392, temp409, temp420);
    float temp429 = temp426 / temp269;
    float temp430 = temp425 / temp269;
    float temp431 = temp423 + temp424;
    float __dot627 = dot(FragColor_shadow579, temp428);
    vec4 temp433 = vec4(temp393, temp410, temp421, temp429);
    float temp434 = temp431 / temp269;
    float __dot629 = dot(FragColor_shadow579, temp433);
    vec4 temp436 = vec4(temp411, temp422, temp430, temp434);
    float __dot631 = dot(FragColor_shadow579, temp436);
    vec4 temp438 = vec4(__dot625, __dot627, __dot629, __dot631);
    FragColor = temp438;
    
}
WARNING: 0:432: Two consecutive underscores are reserved for future use.
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform vec4[3] un34;
uniform vec3[4] um43;
uniform vec4[4] um4;
uniform vec2[2] um2;
uniform vec3[3] um3;
out vec4 FragColor;
in vec4 v;
in vec3 u;
const vec4 const37 = vec4(4.3, 0.0, 0.0, 0.0);
const vec4 const39 = vec4(0.0, 4.3, 0.0, 0.0);
const vec4 const41 = vec4(0.0, 0.0, 4.3, 0.0);
in vec3 Color;
const float const43_1f = 1.0;
const vec4 const156 = vec4(0.0, 0.0, 0.0, 1.0);
const float const158_0f = 0.0;

void main()
{
    float __element1 = v.x * u.x;
    float __element24 = v.y * u.x;
    float __element57 = v.z * u.x;
    float __element810 = v.w * u.x;
    vec4 temp25 = vec4(__element1, __element24, __element57, __element810);
    float __element1214 = v.x * u.y;
    float __element1517 = v.y * u.y;
    float __element1820 = v.z * u.y;
    float __element2123 = v.w * u.y;
    vec4 temp30 = vec4(__element1214, __element1517, __element1820, __element2123);
    float __element2628 = v.x * u.z;
    float __element2931 = v.y * u.z;
    float __element3234 = v.z * u.z;
    float __element3537 = v.w * u.z;
    vec4 temp35 = vec4(__element2628, __element2931, __element3234, __element3537);
    vec4 __column3840 = temp25 + const37;
    vec4 __column4041 = temp30 + const39;
    vec4 __column4242 = temp35 + const41;
    vec4 temp42 = vec4(Color.x, Color.y, Color.z, const43_1f);
    float __dot47 = dot(temp42, __column3840);
    float __dot4648 = dot(temp42, __column4041);
    float __dot4849 = dot(temp42, __column4242);
    vec4 temp47 = vec4(__dot47, __dot4648, __dot4849, const43_1f);
    vec4 FragColor_shadow5052 = temp42 * temp47;
    float temp4954 = v.x * __column3840.x;
    float temp5056 = v.x * __column3840.y;
    float temp5158 = v.x * __column3840.z;
    float temp5260 = v.x * __column3840.w;
    float temp5362 = v.x * __column4041.x;
    float temp5464 = v.x * __column4041.y;
    float temp5566 = v.x * __column4041.z;
    float temp5668 = v.x * __column4041.w;
    float temp5770 = v.x * __column4242.x;
    float temp5872 = v.x * __column4242.y;
    float temp5974 = v.x * __column4242.z;
    float temp6076 = v.x * __column4242.w;
    vec4 __column6877 = un34[0];
    vec4 __column7378 = un34[1];
    vec4 __column7879 = un34[2];
    vec3 __rightColumn80 = um43[0];
    float __product81 = __rightColumn80.x * temp4954;
    float __product11382 = __rightColumn80.y * temp5362;
    float __dotProduct83 = __product81 + __product11382;
    float __product11784 = __rightColumn80.z * temp5770;
    float __dotProduct11885 = __product11784 + __dotProduct83;
    float __product12386 = __rightColumn80.x * temp5056;
    float __product12787 = __rightColumn80.y * temp5464;
    float __dotProduct12888 = __product12386 + __product12787;
    float __product13289 = __rightColumn80.z * temp5872;
    float __dotProduct13390 = __product13289 + __dotProduct12888;
    float __product13891 = __rightColumn80.x * temp5158;
    float __product14292 = __rightColumn80.y * temp5566;
    float __dotProduct14393 = __product13891 + __product14292;
    float __product14794 = __rightColumn80.z * temp5974;
    float __dotProduct14895 = __product14794 + __dotProduct14393;
    float __product15396 = __rightColumn80.x * temp5260;
    float __product15797 = __rightColumn80.y * temp5668;
    float __dotProduct15898 = __product15396 + __product15797;
    float __product16299 = __rightColumn80.z * temp6076;
    float __dotProduct163100 = __product16299 + __dotProduct15898;
    vec4 temp85 = vec4(__dotProduct11885, __dotProduct13390, __dotProduct14895, __dotProduct163100);
    vec3 __rightColumn166103 = um43[1];
    float __product170104 = temp4954 * __rightColumn166103.x;
    float __product174105 = temp5362 * __rightColumn166103.y;
    float __dotProduct175106 = __product170104 + __product174105;
    float __product179107 = temp5770 * __rightColumn166103.z;
    float __dotProduct180108 = __product179107 + __dotProduct175106;
    float __product185109 = temp5056 * __rightColumn166103.x;
    float __product189110 = temp5464 * __rightColumn166103.y;
    float __dotProduct190111 = __product185109 + __product189110;
    float __product194112 = temp5872 * __rightColumn166103.z;
    float __dotProduct195113 = __product194112 + __dotProduct190111;
    float __product200114 = temp5158 * __rightColumn166103.x;
    float __product204115 = temp5566 * __rightColumn166103.y;
    float __dotProduct205116 = __product200114 + __product204115;
    float __product209117 = temp5974 * __rightColumn166103.z;
    float __dotProduct210118 = __product209117 + __dotProduct205116;
    float __product215119 = temp5260 * __rightColumn166103.x;
    float __product219120 = temp5668 * __rightColumn166103.y;
    float __dotProduct220121 = __product215119 + __product219120;
    float __product224122 = temp6076 * __rightColumn166103.z;
    float __dotProduct225123 = __product224122 + __dotProduct220121;
    vec4 temp107 = vec4(__dotProduct180108, __dotProduct195113, __dotProduct210118, __dotProduct225123);
    vec3 __rightColumn228126 = um43[2];
    float __product232127 = temp4954 * __rightColumn228126.x;
    float __product236128 = temp5362 * __rightColumn228126.y;
    float __dotProduct237129 = __product232127 + __product236128;
    float __product241130 = temp5770 * __rightColumn228126.z;
    float __dotProduct242131 = __product241130 + __dotProduct237129;
    float __product247132 = temp5056 * __rightColumn228126.x;
    float __product251133 = temp5464 * __rightColumn228126.y;
    float __dotProduct252134 = __product247132 + __product251133;
    float __product256135 = temp5872 * __rightColumn228126.z;
    float __dotProduct257136 = __product256135 + __dotProduct252134;
    float __product262137 = temp5158 * __rightColumn228126.x;
    float __product266138 = temp5566 * __rightColumn228126.y;
    float __dotProduct267139 = __product262137 + __product266138;
    float __product271140 = temp5974 * __rightColumn228126.z;
    float __dotProduct272141 = __product271140 + __dotProduct267139;
    float __product277142 = temp5260 * __rightColumn228126.x;
    float __product281143 = temp5668 * __rightColumn228126.y;
    float __dotProduct282144 = __product277142 + __product281143;
    float __product286145 = temp6076 * __rightColumn228126.z;
    float __dotProduct287146 = __product286145 + __dotProduct282144;
    vec4 temp129 = vec4(__dotProduct242131, __dotProduct257136, __dotProduct272141, __dotProduct287146);
    vec3 __rightColumn290149 = um43[3];
    float __product294150 = temp4954 * __rightColumn290149.x;
    float __product298151 = temp5362 * __rightColumn290149.y;
    float __dotProduct299152 = __product294150 + __product298151;
    float __product303153 = temp5770 * __rightColumn290149.z;
    float __dotProduct304154 = __product303153 + __dotProduct299152;
    float __product309155 = temp5056 * __rightColumn290149.x;
    float __product313156 = temp5464 * __rightColumn290149.y;
    float __dotProduct314157 = __product309155 + __product313156;
    float __product318158 = temp5872 * __rightColumn290149.z;
    float __dotProduct319159 = __product318158 + __dotProduct314157;
    float __product324160 = temp5158 * __rightColumn290149.x;
    float __product328161 = temp5566 * __rightColumn290149.y;
    float __dotProduct329162 = __product324160 + __product328161;
    float __product333163 = temp5974 * __rightColumn290149.z;
    float __dotProduct334164 = __product333163 + __dotProduct329162;
    float __product339165 = temp5260 * __rightColumn290149.x;
    float __product343166 = temp5668 * __rightColumn290149.y;
    float __dotProduct344167 = __product339165 + __product343166;
    float __product348168 = temp6076 * __rightColumn290149.z;
    float __dotProduct349169 = __product348168 + __dotProduct344167;
    vec4 temp151 = vec4(__dotProduct304154, __dotProduct319159, __dotProduct334164, __dotProduct349169);
    vec4 __column354172 = __column6877 + temp85;
    vec4 __column357173 = __column7378 + temp107;
    vec4 __column360174 = __column7879 + temp129;
    vec4 __column363175 = temp151 + const156;
    float temp157176 = const158_0f - __column354172.x;
    float temp159177 = const158_0f - __column354172.y;
    float temp160178 = const158_0f - __column354172.z;
    float temp161179 = const158_0f - __column354172.w;
    float temp162180 = const158_0f - __column357173.x;
    float temp163181 = const158_0f - __column357173.y;
    float temp164182 = const158_0f - __column357173.z;
    float temp165183 = const158_0f - __column357173.w;
    float temp166184 = const158_0f - __column360174.x;
    float temp167185 = const158_0f - __column360174.y;
    float temp168186 = const158_0f - __column360174.z;
    float temp169187 = const158_0f - __column360174.w;
    float temp170188 = const158_0f - __column363175.x;
    float temp171189 = const158_0f - __column363175.y;
    float temp172190 = const158_0f - __column363175.z;
    float temp173191 = const158_0f - __column363175.w;
    float __product391193 = v.x * temp157176;
    float __product394195 = v.y * temp162180;
    float __dotProduct395196 = __product391193 + __product394195;
    float __product398198 = v.z * temp166184;
    float __dotProduct399199 = __product398198 + __dotProduct395196;
    float __product402201 = v.w * temp170188;
    float __dotProduct403202 = __product402201 + __dotProduct399199;
    float __product406204 = v.x * temp159177;
    float __product409206 = v.y * temp163181;
    float __dotProduct410207 = __product406204 + __product409206;
    float __product413209 = v.z * temp167185;
    float __dotProduct414210 = __product413209 + __dotProduct410207;
    float __product417212 = v.w * temp171189;
    float __dotProduct418213 = __product417212 + __dotProduct414210;
    float __product421215 = v.x * temp160178;
    float __product424217 = v.y * temp164182;
    float __dotProduct425218 = __product421215 + __product424217;
    float __product428220 = v.z * temp168186;
    float __dotProduct429221 = __product428220 + __dotProduct425218;
    float __product432223 = v.w * temp172190;
    float __dotProduct433224 = __product432223 + __dotProduct429221;
    float __product436226 = v.x * temp161179;
    float __product439228 = v.y * temp165183;
    float __dotProduct440229 = __product436226 + __product439228;
    float __product443231 = v.z * temp169187;
    float __dotProduct444232 = __product443231 + __dotProduct440229;
    float __product447234 = v.w * temp173191;
    float __dotProduct448235 = __product447234 + __dotProduct444232;
    vec4 temp202 = vec4(__dotProduct403202, __dotProduct418213, __dotProduct433224, __dotProduct448235);
    vec4 FragColor_shadow449238 = FragColor_shadow5052 + temp202;
    vec4 __column452239 = __column354172 * __column354172;
    vec4 __column455240 = __column357173 * __column357173;
    vec4 __column458241 = __column360174 * __column360174;
    vec4 __column461242 = __column363175 * __column363175;
    float __dot463243 = dot(FragColor_shadow449238, __column452239);
    float __dot465244 = dot(FragColor_shadow449238, __column455240);
    float __dot467245 = dot(FragColor_shadow449238, __column458241);
    float __dot469246 = dot(FragColor_shadow449238, __column461242);
    vec4 temp212 = vec4(__dot463243, __dot465244, __dot467245, __dot469246);
    vec4 temp213 = vec4(__rightColumn80.x, __rightColumn166103.x, __rightColumn228126.x, __rightColumn290149.x);
    vec4 temp214 = vec4(__rightColumn80.y, __rightColumn166103.y, __rightColumn228126.y, __rightColumn290149.y);
    vec4 temp215 = vec4(__rightColumn80.z, __rightColumn166103.z, __rightColumn228126.z, __rightColumn290149.z);
    float __dot506255 = dot(temp212, temp213);
    float __dot508256 = dot(temp212, temp214);
    float __dot510257 = dot(temp212, temp215);
    vec4 temp219 = vec4(__dot506255, __dot508256, __dot510257, const43_1f);
    vec4 FragColor_shadow512260 = temp212 * temp219;
    vec4 __column513261 = um4[0];
    vec4 __column518262 = um4[1];
    vec4 __column523263 = um4[2];
    vec4 __column528264 = um4[3];
    float temp225265 = __column523263.z * __column528264.w;
    float temp226266 = __column523263.w * __column528264.z;
    float temp227267 = temp225265 - temp226266;
    float temp228268 = __column518262.y * temp227267;
    float temp229269 = __column518262.z * __column528264.w;
    float temp230270 = __column518262.w * __column528264.z;
    float temp231271 = temp229269 - temp230270;
    float temp232272 = __column523263.y * temp231271;
    float temp233273 = temp228268 - temp232272;
    float temp234274 = __column518262.z * __column523263.w;
    float temp235275 = __column518262.w * __column523263.z;
    float temp236276 = temp234274 - temp235275;
    float temp237277 = __column528264.y * temp236276;
    float temp238278 = temp237277 + temp233273;
    float temp239279 = __column513261.x * temp238278;
    float temp240280 = __column513261.y * temp227267;
    float temp241281 = __column513261.z * __column528264.w;
    float temp242282 = __column513261.w * __column528264.z;
    float temp243283 = temp241281 - temp242282;
    float temp244284 = __column523263.y * temp243283;
    float temp245285 = temp240280 - temp244284;
    float temp246286 = __column513261.z * __column523263.w;
    float temp247287 = __column513261.w * __column523263.z;
    float temp248288 = temp246286 - temp247287;
    float temp249289 = __column528264.y * temp248288;
    float temp250290 = temp249289 + temp245285;
    float temp251291 = __column518262.x * temp250290;
    float temp252292 = temp239279 - temp251291;
    float temp253293 = __column513261.y * temp231271;
    float temp254294 = __column518262.y * temp243283;
    float temp255295 = temp253293 - temp254294;
    float temp256296 = __column513261.z * __column518262.w;
    float temp257297 = __column513261.w * __column518262.z;
    float temp258298 = temp256296 - temp257297;
    float temp259299 = __column528264.y * temp258298;
    float temp260300 = temp259299 + temp255295;
    float temp261301 = __column523263.x * temp260300;
    float temp262302 = temp261301 + temp252292;
    float temp263303 = __column513261.y * temp236276;
    float temp264304 = __column518262.y * temp248288;
    float temp265305 = temp263303 - temp264304;
    float temp266306 = __column523263.y * temp258298;
    float temp267307 = temp266306 + temp265305;
    float temp268308 = __column528264.x * temp267307;
    float temp269309 = temp262302 - temp268308;
    vec4 temp270 = vec4(temp269309);
    vec4 FragColor_shadow534312 = FragColor_shadow512260 * temp270;
    vec2 __column535313 = um2[0];
    vec2 __column538314 = um2[1];
    float temp274315 = const158_0f - __column535313.y;
    float temp276316 = const158_0f - __column538314.x;
    float temp277317 = __column535313.x * __column538314.y;
    float temp278318 = __column535313.y * __column538314.x;
    float temp279319 = temp277317 - temp278318;
    float temp280320 = __column538314.y / temp279319;
    float temp281321 = temp276316 / temp279319;
    float temp282322 = temp274315 / temp279319;
    float temp283323 = __column535313.x / temp279319;
    vec4 temp283 = vec4(temp280320, temp281321, temp282322, temp283323);
    vec4 FragColor_shadow550326 = temp283 * FragColor_shadow534312;
    vec3 __column551327 = um3[0];
    vec3 __column555328 = um3[1];
    vec3 __column559329 = um3[2];
    float temp289330 = __column551327.x * __column559329.y;
    float temp290331 = __column551327.y * __column559329.x;
    float temp291332 = temp289330 - temp290331;
    float temp292333 = const158_0f - temp291332;
    float temp293334 = __column555328.y * __column559329.z;
    float temp294335 = __column555328.z * __column559329.y;
    float temp295336 = temp293334 - temp294335;
    float temp296337 = __column551327.x * temp295336;
    float temp297338 = __column551327.y * __column559329.z;
    float temp298339 = __column551327.z * __column559329.y;
    float temp299340 = temp297338 - temp298339;
    float temp300341 = __column555328.x * temp299340;
    float temp301342 = temp296337 - temp300341;
    float temp302343 = __column551327.y * __column555328.z;
    float temp303344 = __column551327.z * __column555328.y;
    float temp304345 = temp302343 - temp303344;
    float temp305346 = __column559329.x * temp304345;
    float temp306347 = temp305346 + temp301342;
    float temp307348 = temp292333 / temp306347;
    vec4 temp307 = vec4(temp307348);
    vec4 FragColor_shadow579351 = temp307 * FragColor_shadow550326;
    float temp310352 = __column518262.z * __column528264.y;
    float temp311353 = __column518262.y * __column528264.z;
    float temp312354 = __column523263.z * __column528264.y;
    float temp313355 = __column523263.y * __column528264.z;
    float temp314356 = __column513261.w * __column528264.y;
    float temp315357 = __column513261.y * __column528264.w;
    float temp316358 = __column523263.w * __column528264.y;
    float temp317359 = __column523263.y * __column528264.w;
    float temp318360 = __column518262.w * __column528264.y;
    float temp319361 = __column518262.y * __column528264.w;
    float temp322364 = __column518262.z * __column523263.y;
    float temp323365 = __column518262.y * __column523263.z;
    float temp324366 = temp311353 - temp310352;
    float temp325367 = temp313355 - temp312354;
    float temp326368 = __column513261.w * __column523263.y;
    float temp327369 = __column513261.y * __column523263.w;
    float temp328370 = temp315357 - temp314356;
    float temp329371 = temp317359 - temp316358;
    float temp330372 = __column518262.w * __column523263.y;
    float temp331373 = __column518262.y * __column523263.w;
    float temp332374 = temp319361 - temp318360;
    float temp335377 = __column513261.z * __column528264.y;
    float temp336378 = __column513261.y * __column528264.z;
    float temp337379 = temp323365 - temp322364;
    float temp340382 = temp327369 - temp326368;
    float temp343385 = temp331373 - temp330372;
    float temp352394 = __column513261.z * __column518262.y;
    float temp353395 = __column513261.y * __column518262.z;
    float temp354396 = temp336378 - temp335377;
    float temp355397 = __column513261.z * __column523263.y;
    float temp356398 = __column513261.y * __column523263.z;
    float temp359401 = __column513261.w * __column518262.y;
    float temp360402 = __column513261.y * __column518262.w;
    float temp373415 = temp353395 - temp352394;
    float temp376418 = temp356398 - temp355397;
    float temp380422 = temp360402 - temp359401;
    float temp321363 = __column518262.x * temp227267;
    float temp320362 = __column523263.x * temp231271;
    float temp334376 = temp321363 - temp320362;
    float temp333375 = __column528264.x * temp236276;
    float temp350392 = temp333375 + temp334376;
    float temp349391 = __column513261.x * temp227267;
    float temp348390 = __column523263.x * temp243283;
    float temp347389 = __column513261.x * temp231271;
    float temp346388 = __column518262.x * temp243283;
    float temp345387 = __column518262.x * temp329371;
    float temp344386 = __column523263.x * temp332374;
    float temp342384 = __column513261.x * temp329371;
    float temp341383 = __column523263.x * temp328370;
    float temp339381 = __column518262.x * temp325367;
    float temp338380 = __column523263.x * temp324366;
    float temp370412 = const158_0f - temp250290;
    float temp369411 = const158_0f - temp350392;
    float temp368410 = temp349391 - temp348390;
    float temp367409 = __column528264.x * temp248288;
    float temp366408 = temp347389 - temp346388;
    float temp365407 = __column528264.x * temp258298;
    float temp364406 = temp345387 - temp344386;
    float temp363405 = __column528264.x * temp343385;
    float temp362404 = temp342384 - temp341383;
    float temp361403 = __column528264.x * temp340382;
    float temp358400 = temp339381 - temp338380;
    float temp357399 = __column528264.x * temp337379;
    float temp351393 = temp238278 / temp269309;
    float temp390432 = temp367409 + temp368410;
    float temp389431 = temp365407 + temp366408;
    float temp388430 = __column513261.x * temp236276;
    float temp387429 = __column518262.x * temp248288;
    float temp386428 = temp363405 + temp364406;
    float temp385427 = temp361403 + temp362404;
    float temp384426 = __column513261.x * temp332374;
    float temp383425 = __column518262.x * temp328370;
    float temp382424 = __column513261.x * temp343385;
    float temp381423 = __column518262.x * temp340382;
    float temp379421 = temp357399 + temp358400;
    float temp378420 = __column513261.x * temp325367;
    float temp377419 = __column523263.x * temp354396;
    float temp375417 = __column513261.x * temp324366;
    float temp374416 = __column518262.x * temp354396;
    float temp372414 = temp369411 / temp269309;
    float temp371413 = temp370412 / temp269309;
    float temp407449 = const158_0f - temp267307;
    float temp406448 = const158_0f - temp389431;
    float temp405447 = temp388430 - temp387429;
    float temp404446 = __column523263.x * temp258298;
    float temp403445 = const158_0f - temp385427;
    float temp402444 = temp384426 - temp383425;
    float temp401443 = __column528264.x * temp380422;
    float temp400442 = temp382424 - temp381423;
    float temp399441 = __column523263.x * temp380422;
    float temp398440 = const158_0f - temp379421;
    float temp397439 = temp378420 - temp377419;
    float temp396438 = __column528264.x * temp376418;
    float temp395437 = temp375417 - temp374416;
    float temp394436 = __column528264.x * temp373415;
    float temp393435 = temp386428 / temp269309;
    float temp392434 = temp390432 / temp269309;
    float temp391433 = temp260300 / temp269309;
    float temp418460 = temp404446 + temp405447;
    float temp417459 = temp401443 + temp402444;
    float temp416458 = temp399441 + temp400442;
    float temp415457 = temp396438 + temp397439;
    float temp414456 = temp394436 + temp395437;
    float temp413455 = __column513261.x * temp337379;
    float temp412454 = __column518262.x * temp376418;
    float temp411453 = temp398440 / temp269309;
    float temp410452 = temp403445 / temp269309;
    float temp409451 = temp406448 / temp269309;
    float temp408450 = temp407449 / temp269309;
    float temp426469 = const158_0f - temp416458;
    float temp425468 = const158_0f - temp414456;
    float temp424467 = temp413455 - temp412454;
    float temp423466 = __column523263.x * temp373415;
    float temp422465 = temp415457 / temp269309;
    float temp421464 = temp417459 / temp269309;
    float temp420463 = temp418460 / temp269309;
    vec4 temp425 = vec4(temp351393, temp371413, temp391433, temp408450);
    float temp431475 = temp423466 + temp424467;
    float temp430474 = temp425468 / temp269309;
    float temp429473 = temp426469 / temp269309;
    vec4 temp429 = vec4(temp372414, temp392434, temp409451, temp420463);
    float __dot625470 = dot(FragColor_shadow579351, temp425);
    float temp434479 = temp431475 / temp269309;
    vec4 temp432 = vec4(temp393435, temp410452, temp421464, temp429473);
    float __dot627476 = dot(FragColor_shadow579351, temp429);
    vec4 temp434 = vec4(temp411453, temp422465, temp430474, temp434479);
    float __dot629480 = dot(FragColor_shadow579351, temp432);
    float __dot631483 = dot(FragColor_shadow579351, temp434);
    vec4 temp437 = vec4(__dot625470, __dot627476, __dot629480, __dot631483);
    FragColor = temp437;
    
}
