
Top IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, [4 x float], [5 x <4 x float>] }
%lunarStruct2 = type { [5 x i32], float, [7 x %lunarStruct1] }

@foo2 = external addrspace(2) constant [5 x %lunarStruct2]
@gl_FragColor = internal global <4 x float> zeroinitializer
@"sampler2D sampler" = external addrspace(1) constant i32
@coord_shadow = internal global <2 x float> zeroinitializer

define fastcc void @main() {
entry:
  %scale = alloca float
  store float 0.000000e+00, float* %scale
  %0 = load i32 addrspace(2)* getelementptr inbounds ([5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 0, i32 4)
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load <4 x float> addrspace(2)* getelementptr inbounds ([5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 2, i32 2, i32 2, i32 3)
  %scale1 = extractelement <4 x float> %2, i32 0
  store float %scale1, float* %scale
  br label %ifmerge

else:                                             ; preds = %entry
  %scale2 = load float addrspace(2)* getelementptr inbounds ([5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 2, i32 2, i32 1, i32 3)
  store float %scale2, float* %scale
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %3 = load float* %scale
  %4 = load i32 addrspace(1)* @"sampler2D sampler"
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  store <2 x float> %coord, <2 x float>* @coord_shadow
  %5 = load <2 x float>* @coord_shadow
  %6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %4, i32 0, <2 x float> %5)
  %7 = insertelement <4 x float> undef, float %3, i32 0
  %8 = insertelement <4 x float> %7, float %3, i32 1
  %9 = insertelement <4 x float> %8, float %3, i32 2
  %10 = insertelement <4 x float> %9, float %3, i32 3
  %gl_FragColor = fmul <4 x float> %10, %6
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %11 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %11)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

%lunarStruct1 = type { i32, [4 x float], [5 x <4 x float>] }
%lunarStruct2 = type { [5 x i32], float, [7 x %lunarStruct1] }

@foo2 = external addrspace(2) constant [5 x %lunarStruct2]
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 0, i32 4
  %0 = load i32 addrspace(2)* %gla_constGEP, align 16
  %1 = icmp sgt i32 %0, 0
  %gla_constGEP4 = getelementptr [5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 2, i32 2, i32 2, i32 3
  %2 = load <4 x float> addrspace(2)* %gla_constGEP4, align 16
  %scale1 = extractelement <4 x float> %2, i32 0
  %gla_constGEP5 = getelementptr [5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 3, i32 2, i32 2, i32 1, i32 3
  %scale2 = load float addrspace(2)* %gla_constGEP5, align 4
  %select = select i1 %1, float %scale1, float %scale2
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %select, <4 x i32> zeroinitializer)
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %4 = load i32 addrspace(1)* @"sampler2D sampler", align 4
  %5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %4, i32 0, <2 x float> %coord)
  %gl_FragColor = fmul <4 x float> %3, %5
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

// LunarGOO(r471) output
#version 130
struct lunarStruct1 {
    int member0;
    float[4] member1;
    vec4[5] member2;
};

struct lunarStruct2 {
    int[5] member0;
    float member1;
    lunarStruct1[7] member2;
};

uniform lunarStruct2[5] foo2;
uniform sampler2D sampler;
const int const23_0 = 0;
in vec2 coord;

void main()
{
    int temp21 = foo2[3].member0[4];
    bool temp22 = temp21 > const23_0;
    vec4 temp24 = foo2[3].member2[2].member2[3];
    float scale2 = foo2[3].member2[2].member1[3];
    float select = temp22 ? temp24.x : scale2;
    vec4 temp27 = vec4(select);
    vec4 temp28 = texture2D(sampler, coord);
    vec4 gla_copyout_gl_FragColor = temp27 * temp28;
    gl_FragColor = gla_copyout_gl_FragColor;
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
