
Top IR:
; ModuleID = 'Top'

@"sampler1D texSampler1D" = external addrspace(1) constant i32
@"sampler2D texSampler2D" = external addrspace(1) constant i32
@"sampler3D texSampler3D" = external addrspace(1) constant i32
@"samplerCube texSamplerCube" = external addrspace(1) constant i32
@gl_FragColor = internal global <4 x float> zeroinitializer
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %offset = alloca <2 x i32>
  %gradY = alloca <2 x float>
  %gradX = alloca <2 x float>
  %iLod = alloca i32
  %iCoords2D = alloca <2 x i32>
  %color = alloca <4 x float>
  %coords4D = alloca <4 x float>
  %coords3D = alloca <3 x float>
  %coords1D = alloca float
  %proj = alloca float
  %lod = alloca float
  %bias = alloca float
  %blendscale = alloca float
  store float 0x3FFC9FBE80000000, float* %blendscale
  store float 2.000000e+00, float* %bias
  store float 3.000000e+00, float* %lod
  store float 2.000000e+00, float* %proj
  store float 0x3FFC9FBE80000000, float* %coords1D
  store <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>, <3 x float>* %coords3D
  store <4 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000, float 2.000000e+00>, <4 x float>* %coords4D
  store <4 x float> zeroinitializer, <4 x float>* %color
  %0 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %1 = load float* %coords1D
  %2 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 2, i32 %0, i32 0, float %1)
  %3 = load <4 x float>* %color
  %color1 = fadd <4 x float> %3, %2
  store <4 x float> %color1, <4 x float>* %color
  %4 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %5 = load float* %coords1D
  %6 = load float* %bias
  %7 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 2, i32 %4, i32 0, float %5)
  %8 = load <4 x float>* %color
  %color2 = fadd <4 x float> %8, %7
  store <4 x float> %color2, <4 x float>* %color
  %9 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %coords2D = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %10 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %9, i32 1, <2 x float> %coords2D)
  %11 = load <4 x float>* %color
  %color3 = fadd <4 x float> %11, %10
  store <4 x float> %color3, <4 x float>* %color
  %12 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %13 = load <4 x float>* %coords4D
  %14 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 2, i32 %12, i32 1, <4 x float> %13)
  %15 = load <4 x float>* %color
  %color4 = fadd <4 x float> %15, %14
  store <4 x float> %color4, <4 x float>* %color
  %16 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %coords2D5 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %17 = load float* %bias
  %18 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %16, i32 1, <2 x float> %coords2D5)
  %19 = load <4 x float>* %color
  %color6 = fadd <4 x float> %19, %18
  store <4 x float> %color6, <4 x float>* %color
  %20 = load i32 addrspace(1)* @"sampler1D texSampler1D"
  %21 = load <4 x float>* %coords4D
  %22 = load float* %bias
  %23 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 2, i32 %20, i32 1, <4 x float> %21)
  %24 = load <4 x float>* %color
  %color7 = fadd <4 x float> %24, %23
  store <4 x float> %color7, <4 x float>* %color
  %25 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %coords2D8 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %26 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %25, i32 0, <2 x float> %coords2D8)
  %27 = load <4 x float>* %color
  %color9 = fadd <4 x float> %27, %26
  store <4 x float> %color9, <4 x float>* %color
  %28 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %coords2D10 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %29 = load float* %bias
  %30 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %28, i32 0, <2 x float> %coords2D10)
  %31 = load <4 x float>* %color
  %color11 = fadd <4 x float> %31, %30
  store <4 x float> %color11, <4 x float>* %color
  %32 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %33 = load <3 x float>* %coords3D
  %34 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %32, i32 1, <3 x float> %33)
  %35 = load <4 x float>* %color
  %color12 = fadd <4 x float> %35, %34
  store <4 x float> %color12, <4 x float>* %color
  %36 = load i32 addrspace(1)* @"sampler2D texSampler2D"
  %37 = load <4 x float>* %coords4D
  %38 = load float* %bias
  %39 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 2, i32 %36, i32 1, <4 x float> %37)
  %40 = load <4 x float>* %color
  %color13 = fadd <4 x float> %40, %39
  store <4 x float> %color13, <4 x float>* %color
  %41 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %42 = load <3 x float>* %coords3D
  %43 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %41, i32 0, <3 x float> %42)
  %44 = load <4 x float>* %color
  %color14 = fadd <4 x float> %44, %43
  store <4 x float> %color14, <4 x float>* %color
  %45 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %46 = load <3 x float>* %coords3D
  %47 = load float* %bias
  %48 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %45, i32 0, <3 x float> %46)
  %49 = load <4 x float>* %color
  %color15 = fadd <4 x float> %49, %48
  store <4 x float> %color15, <4 x float>* %color
  %50 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %51 = load <4 x float>* %coords4D
  %52 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 2, i32 %50, i32 1, <4 x float> %51)
  %53 = load <4 x float>* %color
  %color16 = fadd <4 x float> %53, %52
  store <4 x float> %color16, <4 x float>* %color
  %54 = load i32 addrspace(1)* @"sampler3D texSampler3D"
  %55 = load <4 x float>* %coords4D
  %56 = load float* %bias
  %57 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 2, i32 %54, i32 1, <4 x float> %55)
  %58 = load <4 x float>* %color
  %color17 = fadd <4 x float> %58, %57
  store <4 x float> %color17, <4 x float>* %color
  %59 = load i32 addrspace(1)* @"samplerCube texSamplerCube"
  %60 = load <3 x float>* %coords3D
  %61 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %59, i32 0, <3 x float> %60)
  %62 = load <4 x float>* %color
  %color18 = fadd <4 x float> %62, %61
  store <4 x float> %color18, <4 x float>* %color
  %63 = load i32 addrspace(1)* @"samplerCube texSamplerCube"
  %64 = load <3 x float>* %coords3D
  %65 = load float* %bias
  %66 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %63, i32 0, <3 x float> %64)
  %67 = load <4 x float>* %color
  %color19 = fadd <4 x float> %67, %66
  store <4 x float> %color19, <4 x float>* %color
  store <2 x i32> <i32 0, i32 5>, <2 x i32>* %iCoords2D
  store i32 1, i32* %iLod
  %coords2D20 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %gradX21 = call <2 x float> @llvm.gla.fDFdx.v2f32.v2f32(<2 x float> %coords2D20)
  store <2 x float> %gradX21, <2 x float>* %gradX
  %coords2D22 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %gradY23 = call <2 x float> @llvm.gla.fDFdy.v2f32.v2f32(<2 x float> %coords2D22)
  store <2 x float> %gradY23, <2 x float>* %gradY
  store <2 x i32> <i32 3, i32 -7>, <2 x i32>* %offset
  %68 = load <4 x float>* %color
  %69 = load <4 x float> addrspace(2)* @u
  %70 = load float addrspace(2)* @blend
  %71 = load float* %blendscale
  %72 = fmul float %70, %71
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %68, <4 x float> %69, float %72)
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %73 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %73)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32, i32, i32, float) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <2 x float> @llvm.gla.fDFdx.v2f32.v2f32(<2 x float>) nounwind readnone

declare <2 x float> @llvm.gla.fDFdy.v2f32.v2f32(<2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@"sampler1D texSampler1D" = external addrspace(1) constant i32
@"sampler2D texSampler2D" = external addrspace(1) constant i32
@"sampler3D texSampler3D" = external addrspace(1) constant i32
@"samplerCube texSamplerCube" = external addrspace(1) constant i32
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @"sampler1D texSampler1D", align 4
  %1 = load i32 addrspace(1)* @"sampler2D texSampler2D", align 4
  %2 = load i32 addrspace(1)* @"sampler3D texSampler3D", align 4
  %3 = load i32 addrspace(1)* @"samplerCube texSamplerCube", align 4
  %coords2D = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %4 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 2, i32 %0, i32 0, float 0x3FFC9FBE80000000)
  %5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 1, <2 x float> %coords2D)
  %color2 = fadd <4 x float> %4, %4
  %6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 2, i32 %0, i32 1, <4 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000, float 2.000000e+00>)
  %color3 = fadd <4 x float> %color2, %5
  %color4 = fadd <4 x float> %color3, %6
  %color6 = fadd <4 x float> %color4, %5
  %7 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %1, i32 0, <2 x float> %coords2D)
  %color7 = fadd <4 x float> %color6, %6
  %color9 = fadd <4 x float> %color7, %7
  %8 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %1, i32 1, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>)
  %color11 = fadd <4 x float> %color9, %7
  %9 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 2, i32 %1, i32 1, <4 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000, float 2.000000e+00>)
  %color12 = fadd <4 x float> %color11, %8
  %10 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %2, i32 0, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>)
  %color13 = fadd <4 x float> %color12, %9
  %color14 = fadd <4 x float> %color13, %10
  %11 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 2, i32 %2, i32 1, <4 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000, float 2.000000e+00>)
  %color15 = fadd <4 x float> %color14, %10
  %color16 = fadd <4 x float> %color15, %11
  %12 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %3, i32 0, <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>)
  %color17 = fadd <4 x float> %color16, %11
  %13 = load float addrspace(2)* @blend, align 4
  %color18 = fadd <4 x float> %color17, %12
  %14 = fmul float %13, 0x3FFC9FBE80000000
  %15 = load <4 x float> addrspace(2)* @u, align 16
  %color19 = fadd <4 x float> %color18, %12
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %color19, <4 x float> %15, float %14)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32, i32, i32, float) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

// LunarGOO(r471) output
#version 130
uniform sampler1D texSampler1D;
uniform sampler2D texSampler2D;
uniform sampler3D texSampler3D;
uniform samplerCube texSamplerCube;
uniform vec4 u;
uniform float blend;
in vec2 coords2D;
const float const22_2f = 1.789;
const vec4 const26 = vec4(1.789, 2.718, 3.453, 2.0);
const vec3 const34 = vec3(1.789, 2.718, 3.453);

void main()
{
    vec4 temp21 = texture2D(texSampler1D, const22_2f);
    vec4 temp23 = texture2DProj(texSampler1D, coords2D);
    vec4 color2 = temp21 + temp21;
    vec4 temp25 = texture2DProj(texSampler1D, const26);
    vec4 color3 = color2 + temp23;
    vec4 color4 = color3 + temp25;
    vec4 color6 = color4 + temp23;
    vec4 temp30 = texture2D(texSampler2D, coords2D);
    vec4 color7 = color6 + temp25;
    vec4 color9 = color7 + temp30;
    vec4 temp33 = texture2DProj(texSampler2D, const34);
    vec4 color11 = color9 + temp30;
    vec4 temp36 = texture2DProj(texSampler2D, const26);
    vec4 color12 = color11 + temp33;
    vec4 temp38 = texture2D(texSampler3D, const34);
    vec4 color13 = color12 + temp36;
    vec4 color14 = color13 + temp38;
    vec4 temp41 = texture2DProj(texSampler3D, const26);
    vec4 color15 = color14 + temp38;
    vec4 color16 = color15 + temp41;
    vec4 temp44 = texture2D(texSamplerCube, const34);
    vec4 color17 = color16 + temp41;
    vec4 color18 = color17 + temp44;
    float temp47 = blend * const22_2f;
    vec4 color19 = color18 + temp44;
    vec4 gla_copyout_gl_FragColor = mix(color19, u, temp47);
    gl_FragColor = gla_copyout_gl_FragColor;
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
