
***Unsupported functionality: glslang qualifier

***Unsupported functionality: glslang qualifier

***Unsupported functionality: glslang qualifier

***Unsupported functionality: glslang qualifier

***Unsupported functionality: glslang qualifier

***Unsupported functionality: glslang qualifier

***Unsupported functionality: glslang qualifier

***Unsupported functionality: glslang qualifier

Top IR:
; ModuleID = 'Top'

@u_b = external addrspace(2) constant i1
@u_b2 = external addrspace(2) constant <2 x i1>
@u_b3 = external addrspace(2) constant <3 x i1>
@u_b4 = external addrspace(2) constant <4 x i1>
@u_i = external addrspace(2) constant i32
@u_i2 = external addrspace(2) constant <2 x i32>
@u_i3 = external addrspace(2) constant <3 x i32>
@u_i4 = external addrspace(2) constant <4 x i32>
@u_f = external addrspace(2) constant float
@i_f_shadow = internal global float 0.000000e+00
@u_f2 = external addrspace(2) constant <2 x float>
@i_f2_shadow = internal global <2 x float> zeroinitializer
@u_f3 = external addrspace(2) constant <3 x float>
@i_f3_shadow = internal global <3 x float> zeroinitializer
@u_f4 = external addrspace(2) constant <4 x float>
@i_f4_shadow = internal global <4 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed15 = alloca <4 x float>
  %ternary = alloca <4 x float>
  %f4 = alloca <4 x float>
  %f3 = alloca <3 x float>
  %f2 = alloca <2 x float>
  %f = alloca float
  %i_i4 = alloca <4 x i32>
  %i4 = alloca <4 x i32>
  %i_i3 = alloca <3 x i32>
  %i3 = alloca <3 x i32>
  %i_i2 = alloca <2 x i32>
  %i2 = alloca <2 x i32>
  %i_i = alloca i32
  %i = alloca i32
  %constructed5 = alloca <4 x i1>
  %i_b4 = alloca <4 x i1>
  %b4 = alloca <4 x i1>
  %constructed3 = alloca <3 x i1>
  %i_b3 = alloca <3 x i1>
  %b3 = alloca <3 x i1>
  %constructed = alloca <2 x i1>
  %i_b2 = alloca <2 x i1>
  %b2 = alloca <2 x i1>
  %i_b = alloca i1
  %b = alloca i1
  %0 = load i1 addrspace(2)* @u_b
  %1 = load i1* %i_b
  %b1 = and i1 %0, %1
  store i1 %b1, i1* %b
  %2 = load <2 x i1> addrspace(2)* @u_b2
  %3 = extractelement <2 x i1> %2, i32 0
  %4 = load <2 x i1>* %i_b2
  %5 = extractelement <2 x i1> %4, i32 0
  %6 = and i1 %3, %5
  %7 = load <2 x i1> addrspace(2)* @u_b2
  %8 = extractelement <2 x i1> %7, i32 1
  %9 = and i1 %6, %8
  %10 = load <2 x i1>* %i_b2
  %11 = extractelement <2 x i1> %10, i32 1
  %12 = and i1 %9, %11
  %13 = load <2 x i1>* %constructed
  %14 = insertelement <2 x i1> undef, i1 %12, i32 0
  %b22 = insertelement <2 x i1> %14, i1 %12, i32 1
  store <2 x i1> %b22, <2 x i1>* %b2
  %15 = load <3 x i1> addrspace(2)* @u_b3
  %16 = extractelement <3 x i1> %15, i32 0
  %17 = load <3 x i1>* %i_b3
  %18 = extractelement <3 x i1> %17, i32 0
  %19 = and i1 %16, %18
  %20 = load <3 x i1> addrspace(2)* @u_b3
  %21 = extractelement <3 x i1> %20, i32 1
  %22 = and i1 %19, %21
  %23 = load <3 x i1>* %i_b3
  %24 = extractelement <3 x i1> %23, i32 1
  %25 = and i1 %22, %24
  %26 = load <3 x i1> addrspace(2)* @u_b3
  %27 = extractelement <3 x i1> %26, i32 2
  %28 = and i1 %25, %27
  %29 = load <3 x i1>* %i_b3
  %30 = extractelement <3 x i1> %29, i32 2
  %31 = and i1 %28, %30
  %32 = load <3 x i1>* %constructed3
  %33 = insertelement <3 x i1> undef, i1 %31, i32 0
  %34 = insertelement <3 x i1> %33, i1 %31, i32 1
  %b34 = insertelement <3 x i1> %34, i1 %31, i32 2
  store <3 x i1> %b34, <3 x i1>* %b3
  %35 = load <4 x i1> addrspace(2)* @u_b4
  %36 = extractelement <4 x i1> %35, i32 0
  %37 = load <4 x i1>* %i_b4
  %38 = extractelement <4 x i1> %37, i32 0
  %39 = and i1 %36, %38
  %40 = load <4 x i1> addrspace(2)* @u_b4
  %41 = extractelement <4 x i1> %40, i32 1
  %42 = and i1 %39, %41
  %43 = load <4 x i1>* %i_b4
  %44 = extractelement <4 x i1> %43, i32 1
  %45 = and i1 %42, %44
  %46 = load <4 x i1> addrspace(2)* @u_b4
  %47 = extractelement <4 x i1> %46, i32 2
  %48 = and i1 %45, %47
  %49 = load <4 x i1>* %i_b4
  %50 = extractelement <4 x i1> %49, i32 2
  %51 = and i1 %48, %50
  %52 = load <4 x i1> addrspace(2)* @u_b4
  %53 = extractelement <4 x i1> %52, i32 3
  %54 = and i1 %51, %53
  %55 = load <4 x i1>* %i_b4
  %56 = extractelement <4 x i1> %55, i32 3
  %57 = and i1 %54, %56
  %58 = load <4 x i1>* %constructed5
  %59 = insertelement <4 x i1> undef, i1 %57, i32 0
  %60 = insertelement <4 x i1> %59, i1 %57, i32 1
  %61 = insertelement <4 x i1> %60, i1 %57, i32 2
  %b46 = insertelement <4 x i1> %61, i1 %57, i32 3
  store <4 x i1> %b46, <4 x i1>* %b4
  %62 = load i32 addrspace(2)* @u_i
  %63 = load i32* %i_i
  %i7 = add i32 %62, %63
  store i32 %i7, i32* %i
  %64 = load <2 x i32> addrspace(2)* @u_i2
  %65 = load <2 x i32>* %i_i2
  %i28 = add <2 x i32> %64, %65
  store <2 x i32> %i28, <2 x i32>* %i2
  %66 = load <3 x i32> addrspace(2)* @u_i3
  %67 = load <3 x i32>* %i_i3
  %i39 = add <3 x i32> %66, %67
  store <3 x i32> %i39, <3 x i32>* %i3
  %68 = load <4 x i32> addrspace(2)* @u_i4
  %69 = load <4 x i32>* %i_i4
  %i410 = add <4 x i32> %68, %69
  store <4 x i32> %i410, <4 x i32>* %i4
  %70 = load float addrspace(2)* @u_f
  %i_f__ = call float @llvm.gla.fReadInterpolant.f32(i32 0, i32 -1, i32 1)
  store float %i_f__, float* @i_f_shadow
  %71 = load float* @i_f_shadow
  %f11 = fadd float %70, %71
  store float %f11, float* %f
  %72 = load <2 x float> addrspace(2)* @u_f2
  %i_f2__ = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1, i32 -1, i32 1)
  store <2 x float> %i_f2__, <2 x float>* @i_f2_shadow
  %73 = load <2 x float>* @i_f2_shadow
  %f212 = fadd <2 x float> %72, %73
  store <2 x float> %f212, <2 x float>* %f2
  %74 = load <3 x float> addrspace(2)* @u_f3
  %i_f3__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 2, i32 -1, i32 1)
  store <3 x float> %i_f3__, <3 x float>* @i_f3_shadow
  %75 = load <3 x float>* @i_f3_shadow
  %f313 = fadd <3 x float> %74, %75
  store <3 x float> %f313, <3 x float>* %f3
  %76 = load <4 x float> addrspace(2)* @u_f4
  %i_f4__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 3, i32 -1, i32 1)
  store <4 x float> %i_f4__, <4 x float>* @i_f4_shadow
  %77 = load <4 x float>* @i_f4_shadow
  %f414 = fadd <4 x float> %76, %77
  store <4 x float> %f414, <4 x float>* %f4
  %78 = load i1* %b
  %79 = load <2 x i1>* %b2
  %80 = extractelement <2 x i1> %79, i32 0
  %81 = or i1 %78, %80
  %82 = load <2 x i1>* %b2
  %83 = extractelement <2 x i1> %82, i32 1
  %84 = or i1 %81, %83
  %85 = load <3 x i1>* %b3
  %86 = extractelement <3 x i1> %85, i32 0
  %87 = or i1 %84, %86
  %88 = load <3 x i1>* %b3
  %89 = extractelement <3 x i1> %88, i32 1
  %90 = or i1 %87, %89
  %91 = load <3 x i1>* %b3
  %92 = extractelement <3 x i1> %91, i32 2
  %93 = or i1 %90, %92
  %94 = load <4 x i1>* %b4
  %95 = extractelement <4 x i1> %94, i32 0
  %96 = or i1 %93, %95
  %97 = load <4 x i1>* %b4
  %98 = extractelement <4 x i1> %97, i32 1
  %99 = or i1 %96, %98
  %100 = load <4 x i1>* %b4
  %101 = extractelement <4 x i1> %100, i32 2
  %102 = or i1 %99, %101
  %103 = load <4 x i1>* %b4
  %104 = extractelement <4 x i1> %103, i32 3
  %105 = or i1 %102, %104
  br i1 %105, label %then, label %else

then:                                             ; preds = %entry
  %106 = load i32* %i
  %107 = load <2 x i32>* %i2
  %108 = extractelement <2 x i32> %107, i32 0
  %109 = add i32 %106, %108
  %110 = load <2 x i32>* %i2
  %111 = extractelement <2 x i32> %110, i32 1
  %112 = add i32 %109, %111
  %113 = load <3 x i32>* %i3
  %114 = extractelement <3 x i32> %113, i32 0
  %115 = add i32 %112, %114
  %116 = load <3 x i32>* %i3
  %117 = extractelement <3 x i32> %116, i32 1
  %118 = add i32 %115, %117
  %119 = load <3 x i32>* %i3
  %120 = extractelement <3 x i32> %119, i32 2
  %121 = add i32 %118, %120
  %122 = load <4 x i32>* %i4
  %123 = extractelement <4 x i32> %122, i32 0
  %124 = add i32 %121, %123
  %125 = load <4 x i32>* %i4
  %126 = extractelement <4 x i32> %125, i32 1
  %127 = add i32 %124, %126
  %128 = load <4 x i32>* %i4
  %129 = extractelement <4 x i32> %128, i32 2
  %130 = add i32 %127, %129
  %131 = load <4 x i32>* %i4
  %132 = extractelement <4 x i32> %131, i32 3
  %133 = add i32 %130, %132
  %134 = sitofp i32 %133 to float
  %135 = load float* %f
  %136 = fadd float %134, %135
  %137 = load <2 x float>* %f2
  %138 = extractelement <2 x float> %137, i32 0
  %139 = fadd float %136, %138
  %140 = load <2 x float>* %f2
  %141 = extractelement <2 x float> %140, i32 1
  %142 = fadd float %139, %141
  %143 = load <3 x float>* %f3
  %144 = extractelement <3 x float> %143, i32 0
  %145 = fadd float %142, %144
  %146 = load <3 x float>* %f3
  %147 = extractelement <3 x float> %146, i32 1
  %148 = fadd float %145, %147
  %149 = load <3 x float>* %f3
  %150 = extractelement <3 x float> %149, i32 2
  %151 = fadd float %148, %150
  %152 = load <4 x float>* %f4
  %153 = extractelement <4 x float> %152, i32 0
  %154 = fadd float %151, %153
  %155 = load <4 x float>* %f4
  %156 = extractelement <4 x float> %155, i32 1
  %157 = fadd float %154, %156
  %158 = load <4 x float>* %f4
  %159 = extractelement <4 x float> %158, i32 2
  %160 = fadd float %157, %159
  %161 = load <4 x float>* %f4
  %162 = extractelement <4 x float> %161, i32 3
  %163 = fadd float %160, %162
  %164 = load <4 x float>* %constructed15
  %165 = insertelement <4 x float> undef, float %163, i32 0
  %166 = insertelement <4 x float> %165, float %163, i32 1
  %167 = insertelement <4 x float> %166, float %163, i32 2
  %ternary16 = insertelement <4 x float> %167, float %163, i32 3
  store <4 x float> %ternary16, <4 x float>* %ternary
  br label %ifmerge

else:                                             ; preds = %entry
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %ternary
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %FragColor_shadow = load <4 x float>* %ternary
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %168 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %168)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
const vec4 const21 = vec4(1.0);

void main()
{
    gl_FragColor = const21;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
const vec4 const21 = vec4(1.0);

void main()
{
    gl_FragColor = const21;
    
}
