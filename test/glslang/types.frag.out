
Top IR:
; ModuleID = 'Top'

@u_b = external addrspace(2) constant i1
@i_b = external addrspace(2) constant i1
@u_b2 = external addrspace(2) constant <2 x i1>
@i_b2 = external addrspace(2) constant <2 x i1>
@u_b3 = external addrspace(2) constant <3 x i1>
@i_b3 = external addrspace(2) constant <3 x i1>
@u_b4 = external addrspace(2) constant <4 x i1>
@i_b4 = external addrspace(2) constant <4 x i1>
@u_i = external addrspace(2) constant i32
@i_i_shadow = internal global i32 0
@u_i2 = external addrspace(2) constant <2 x i32>
@i_i2_shadow = internal global <2 x i32> zeroinitializer
@u_i3 = external addrspace(2) constant <3 x i32>
@i_i3_shadow = internal global <3 x i32> zeroinitializer
@u_i4 = external addrspace(2) constant <4 x i32>
@i_i4_shadow = internal global <4 x i32> zeroinitializer
@u_f = external addrspace(2) constant float
@i_f_shadow = internal global float 0.000000e+00
@u_f2 = external addrspace(2) constant <2 x float>
@i_f2_shadow = internal global <2 x float> zeroinitializer
@u_f3 = external addrspace(2) constant <3 x float>
@i_f3_shadow = internal global <3 x float> zeroinitializer
@u_f4 = external addrspace(2) constant <4 x float>
@i_f4_shadow = internal global <4 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed15 = alloca <4 x float>
  %ternary = alloca <4 x float>
  %f4 = alloca <4 x float>
  %f3 = alloca <3 x float>
  %f2 = alloca <2 x float>
  %f = alloca float
  %i4 = alloca <4 x i32>
  %i3 = alloca <3 x i32>
  %i2 = alloca <2 x i32>
  %i = alloca i32
  %constructed5 = alloca <4 x i1>
  %b4 = alloca <4 x i1>
  %constructed3 = alloca <3 x i1>
  %b3 = alloca <3 x i1>
  %constructed = alloca <2 x i1>
  %b2 = alloca <2 x i1>
  %b = alloca i1
  %0 = load i1 addrspace(2)* @u_b, !gla.uniform !0
  %1 = load i1 addrspace(2)* @i_b, !gla.uniform !2
  %b1 = and i1 %0, %1
  store i1 %b1, i1* %b
  %2 = load <2 x i1> addrspace(2)* @u_b2, !gla.uniform !3
  %3 = extractelement <2 x i1> %2, i32 0
  %4 = load <2 x i1> addrspace(2)* @i_b2, !gla.uniform !4
  %5 = extractelement <2 x i1> %4, i32 0
  %6 = and i1 %3, %5
  %7 = load <2 x i1> addrspace(2)* @u_b2, !gla.uniform !3
  %8 = extractelement <2 x i1> %7, i32 1
  %9 = and i1 %6, %8
  %10 = load <2 x i1> addrspace(2)* @i_b2, !gla.uniform !4
  %11 = extractelement <2 x i1> %10, i32 1
  %12 = and i1 %9, %11
  %13 = load <2 x i1>* %constructed
  %14 = insertelement <2 x i1> undef, i1 %12, i32 0
  %b22 = insertelement <2 x i1> %14, i1 %12, i32 1
  store <2 x i1> %b22, <2 x i1>* %b2
  %15 = load <3 x i1> addrspace(2)* @u_b3, !gla.uniform !5
  %16 = extractelement <3 x i1> %15, i32 0
  %17 = load <3 x i1> addrspace(2)* @i_b3, !gla.uniform !6
  %18 = extractelement <3 x i1> %17, i32 0
  %19 = and i1 %16, %18
  %20 = load <3 x i1> addrspace(2)* @u_b3, !gla.uniform !5
  %21 = extractelement <3 x i1> %20, i32 1
  %22 = and i1 %19, %21
  %23 = load <3 x i1> addrspace(2)* @i_b3, !gla.uniform !6
  %24 = extractelement <3 x i1> %23, i32 1
  %25 = and i1 %22, %24
  %26 = load <3 x i1> addrspace(2)* @u_b3, !gla.uniform !5
  %27 = extractelement <3 x i1> %26, i32 2
  %28 = and i1 %25, %27
  %29 = load <3 x i1> addrspace(2)* @i_b3, !gla.uniform !6
  %30 = extractelement <3 x i1> %29, i32 2
  %31 = and i1 %28, %30
  %32 = load <3 x i1>* %constructed3
  %33 = insertelement <3 x i1> undef, i1 %31, i32 0
  %34 = insertelement <3 x i1> %33, i1 %31, i32 1
  %b34 = insertelement <3 x i1> %34, i1 %31, i32 2
  store <3 x i1> %b34, <3 x i1>* %b3
  %35 = load <4 x i1> addrspace(2)* @u_b4, !gla.uniform !7
  %36 = extractelement <4 x i1> %35, i32 0
  %37 = load <4 x i1> addrspace(2)* @i_b4, !gla.uniform !8
  %38 = extractelement <4 x i1> %37, i32 0
  %39 = and i1 %36, %38
  %40 = load <4 x i1> addrspace(2)* @u_b4, !gla.uniform !7
  %41 = extractelement <4 x i1> %40, i32 1
  %42 = and i1 %39, %41
  %43 = load <4 x i1> addrspace(2)* @i_b4, !gla.uniform !8
  %44 = extractelement <4 x i1> %43, i32 1
  %45 = and i1 %42, %44
  %46 = load <4 x i1> addrspace(2)* @u_b4, !gla.uniform !7
  %47 = extractelement <4 x i1> %46, i32 2
  %48 = and i1 %45, %47
  %49 = load <4 x i1> addrspace(2)* @i_b4, !gla.uniform !8
  %50 = extractelement <4 x i1> %49, i32 2
  %51 = and i1 %48, %50
  %52 = load <4 x i1> addrspace(2)* @u_b4, !gla.uniform !7
  %53 = extractelement <4 x i1> %52, i32 3
  %54 = and i1 %51, %53
  %55 = load <4 x i1> addrspace(2)* @i_b4, !gla.uniform !8
  %56 = extractelement <4 x i1> %55, i32 3
  %57 = and i1 %54, %56
  %58 = load <4 x i1>* %constructed5
  %59 = insertelement <4 x i1> undef, i1 %57, i32 0
  %60 = insertelement <4 x i1> %59, i1 %57, i32 1
  %61 = insertelement <4 x i1> %60, i1 %57, i32 2
  %b46 = insertelement <4 x i1> %61, i1 %57, i32 3
  store <4 x i1> %b46, <4 x i1>* %b4
  %62 = load i32 addrspace(2)* @u_i, !gla.uniform !9
  %i_i = call i32 @llvm.gla.readData.i32(i32 1024, i32 -1), !gla.input !17
  store i32 %i_i, i32* @i_i_shadow
  %63 = load i32* @i_i_shadow
  %i7 = add i32 %62, %63
  store i32 %i7, i32* %i
  %64 = load <2 x i32> addrspace(2)* @u_i2, !gla.uniform !10
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 1025, i32 -1), !gla.input !19
  store <2 x i32> %i_i2, <2 x i32>* @i_i2_shadow
  %65 = load <2 x i32>* @i_i2_shadow
  %i28 = add <2 x i32> %64, %65
  store <2 x i32> %i28, <2 x i32>* %i2
  %66 = load <3 x i32> addrspace(2)* @u_i3, !gla.uniform !11
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 1026, i32 -1), !gla.input !21
  store <3 x i32> %i_i3, <3 x i32>* @i_i3_shadow
  %67 = load <3 x i32>* @i_i3_shadow
  %i39 = add <3 x i32> %66, %67
  store <3 x i32> %i39, <3 x i32>* %i3
  %68 = load <4 x i32> addrspace(2)* @u_i4, !gla.uniform !12
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 1027, i32 -1), !gla.input !23
  store <4 x i32> %i_i4, <4 x i32>* @i_i4_shadow
  %69 = load <4 x i32>* @i_i4_shadow
  %i410 = add <4 x i32> %68, %69
  store <4 x i32> %i410, <4 x i32>* %i4
  %70 = load float addrspace(2)* @u_f, !gla.uniform !13
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 1028, i32 -1, i32 1), !gla.input !25
  store float %i_f, float* @i_f_shadow
  %71 = load float* @i_f_shadow
  %f11 = fadd float %70, %71
  store float %f11, float* %f
  %72 = load <2 x float> addrspace(2)* @u_f2, !gla.uniform !14
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1029, i32 -1, i32 1), !gla.input !27
  store <2 x float> %i_f2, <2 x float>* @i_f2_shadow
  %73 = load <2 x float>* @i_f2_shadow
  %f212 = fadd <2 x float> %72, %73
  store <2 x float> %f212, <2 x float>* %f2
  %74 = load <3 x float> addrspace(2)* @u_f3, !gla.uniform !15
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1030, i32 -1, i32 1), !gla.input !29
  store <3 x float> %i_f3, <3 x float>* @i_f3_shadow
  %75 = load <3 x float>* @i_f3_shadow
  %f313 = fadd <3 x float> %74, %75
  store <3 x float> %f313, <3 x float>* %f3
  %76 = load <4 x float> addrspace(2)* @u_f4, !gla.uniform !16
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1031, i32 -1, i32 1), !gla.input !31
  store <4 x float> %i_f4, <4 x float>* @i_f4_shadow
  %77 = load <4 x float>* @i_f4_shadow
  %f414 = fadd <4 x float> %76, %77
  store <4 x float> %f414, <4 x float>* %f4
  %78 = load i1* %b
  %79 = load <2 x i1>* %b2
  %80 = extractelement <2 x i1> %79, i32 0
  %81 = or i1 %78, %80
  %82 = load <2 x i1>* %b2
  %83 = extractelement <2 x i1> %82, i32 1
  %84 = or i1 %81, %83
  %85 = load <3 x i1>* %b3
  %86 = extractelement <3 x i1> %85, i32 0
  %87 = or i1 %84, %86
  %88 = load <3 x i1>* %b3
  %89 = extractelement <3 x i1> %88, i32 1
  %90 = or i1 %87, %89
  %91 = load <3 x i1>* %b3
  %92 = extractelement <3 x i1> %91, i32 2
  %93 = or i1 %90, %92
  %94 = load <4 x i1>* %b4
  %95 = extractelement <4 x i1> %94, i32 0
  %96 = or i1 %93, %95
  %97 = load <4 x i1>* %b4
  %98 = extractelement <4 x i1> %97, i32 1
  %99 = or i1 %96, %98
  %100 = load <4 x i1>* %b4
  %101 = extractelement <4 x i1> %100, i32 2
  %102 = or i1 %99, %101
  %103 = load <4 x i1>* %b4
  %104 = extractelement <4 x i1> %103, i32 3
  %105 = or i1 %102, %104
  br i1 %105, label %then, label %else

then:                                             ; preds = %entry
  %106 = load i32* %i
  %107 = load <2 x i32>* %i2
  %108 = extractelement <2 x i32> %107, i32 0
  %109 = add i32 %106, %108
  %110 = load <2 x i32>* %i2
  %111 = extractelement <2 x i32> %110, i32 1
  %112 = add i32 %109, %111
  %113 = load <3 x i32>* %i3
  %114 = extractelement <3 x i32> %113, i32 0
  %115 = add i32 %112, %114
  %116 = load <3 x i32>* %i3
  %117 = extractelement <3 x i32> %116, i32 1
  %118 = add i32 %115, %117
  %119 = load <3 x i32>* %i3
  %120 = extractelement <3 x i32> %119, i32 2
  %121 = add i32 %118, %120
  %122 = load <4 x i32>* %i4
  %123 = extractelement <4 x i32> %122, i32 0
  %124 = add i32 %121, %123
  %125 = load <4 x i32>* %i4
  %126 = extractelement <4 x i32> %125, i32 1
  %127 = add i32 %124, %126
  %128 = load <4 x i32>* %i4
  %129 = extractelement <4 x i32> %128, i32 2
  %130 = add i32 %127, %129
  %131 = load <4 x i32>* %i4
  %132 = extractelement <4 x i32> %131, i32 3
  %133 = add i32 %130, %132
  %134 = sitofp i32 %133 to float
  %135 = load float* %f
  %136 = fadd float %134, %135
  %137 = load <2 x float>* %f2
  %138 = extractelement <2 x float> %137, i32 0
  %139 = fadd float %136, %138
  %140 = load <2 x float>* %f2
  %141 = extractelement <2 x float> %140, i32 1
  %142 = fadd float %139, %141
  %143 = load <3 x float>* %f3
  %144 = extractelement <3 x float> %143, i32 0
  %145 = fadd float %142, %144
  %146 = load <3 x float>* %f3
  %147 = extractelement <3 x float> %146, i32 1
  %148 = fadd float %145, %147
  %149 = load <3 x float>* %f3
  %150 = extractelement <3 x float> %149, i32 2
  %151 = fadd float %148, %150
  %152 = load <4 x float>* %f4
  %153 = extractelement <4 x float> %152, i32 0
  %154 = fadd float %151, %153
  %155 = load <4 x float>* %f4
  %156 = extractelement <4 x float> %155, i32 1
  %157 = fadd float %154, %156
  %158 = load <4 x float>* %f4
  %159 = extractelement <4 x float> %158, i32 2
  %160 = fadd float %157, %159
  %161 = load <4 x float>* %f4
  %162 = extractelement <4 x float> %161, i32 3
  %163 = fadd float %160, %162
  %164 = load <4 x float>* %constructed15
  %165 = insertelement <4 x float> undef, float %163, i32 0
  %166 = insertelement <4 x float> %165, float %163, i32 1
  %167 = insertelement <4 x float> %166, float %163, i32 2
  %ternary16 = insertelement <4 x float> %167, float %163, i32 3
  store <4 x float> %ternary16, <4 x float>* %ternary
  br label %ifmerge

else:                                             ; preds = %entry
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %ternary
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %FragColor_shadow = load <4 x float>* %ternary
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %168 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1032, i32 -1, <4 x float> %168), !gla.output !33
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare i32 @llvm.gla.readData.i32(i32, i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32, i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32, i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32, i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.uniforms = !{!0, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16}
!gla.inputs = !{!17, !19, !21, !23, !25, !27, !29, !31}
!gla.outputs = !{!33}

!0 = metadata !{metadata !"u_b", i32 12, i1* @u_b_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"i_b", i32 12, i1* @i_b_typeProxy, metadata !1}
!3 = metadata !{metadata !"u_b2", i32 12, <2 x i1>* @u_b2_typeProxy, metadata !1}
!4 = metadata !{metadata !"i_b2", i32 12, <2 x i1>* @i_b2_typeProxy, metadata !1}
!5 = metadata !{metadata !"u_b3", i32 12, <3 x i1>* @u_b3_typeProxy, metadata !1}
!6 = metadata !{metadata !"i_b3", i32 12, <3 x i1>* @i_b3_typeProxy, metadata !1}
!7 = metadata !{metadata !"u_b4", i32 12, <4 x i1>* @u_b4_typeProxy, metadata !1}
!8 = metadata !{metadata !"i_b4", i32 12, <4 x i1>* @i_b4_typeProxy, metadata !1}
!9 = metadata !{metadata !"u_i", i32 12, i32* @u_i_typeProxy, metadata !1}
!10 = metadata !{metadata !"u_i2", i32 12, <2 x i32>* @u_i2_typeProxy, metadata !1}
!11 = metadata !{metadata !"u_i3", i32 12, <3 x i32>* @u_i3_typeProxy, metadata !1}
!12 = metadata !{metadata !"u_i4", i32 12, <4 x i32>* @u_i4_typeProxy, metadata !1}
!13 = metadata !{metadata !"u_f", i32 12, float* @u_f_typeProxy, metadata !1}
!14 = metadata !{metadata !"u_f2", i32 12, <2 x float>* @u_f2_typeProxy, metadata !1}
!15 = metadata !{metadata !"u_f3", i32 12, <3 x float>* @u_f3_typeProxy, metadata !1}
!16 = metadata !{metadata !"u_f4", i32 12, <4 x float>* @u_f4_typeProxy, metadata !1}
!17 = metadata !{metadata !"i_i", i32 1, i32* @i_i_shadow_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!19 = metadata !{metadata !"i_i2", i32 1, <2 x i32>* @i_i2_shadow_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!21 = metadata !{metadata !"i_i3", i32 1, <3 x i32>* @i_i3_shadow_typeProxy, metadata !22}
!22 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!23 = metadata !{metadata !"i_i4", i32 1, <4 x i32>* @i_i4_shadow_typeProxy, metadata !24}
!24 = metadata !{i32 0, i32 0, i32 1027, null, i32 0}
!25 = metadata !{metadata !"i_f", i32 1, float* @i_f_shadow_typeProxy, metadata !26}
!26 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!27 = metadata !{metadata !"i_f2", i32 1, <2 x float>* @i_f2_shadow_typeProxy, metadata !28}
!28 = metadata !{i32 0, i32 0, i32 1029, null, i32 1}
!29 = metadata !{metadata !"i_f3", i32 1, <3 x float>* @i_f3_shadow_typeProxy, metadata !30}
!30 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!31 = metadata !{metadata !"i_f4", i32 1, <4 x float>* @i_f4_shadow_typeProxy, metadata !32}
!32 = metadata !{i32 0, i32 0, i32 1031, null, i32 1}
!33 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !34}
!34 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}


Bottom IR:
; ModuleID = 'Top'

@u_b = external addrspace(2) constant i1
@i_b = external addrspace(2) constant i1
@u_b2 = external addrspace(2) constant <2 x i1>
@i_b2 = external addrspace(2) constant <2 x i1>
@u_b3 = external addrspace(2) constant <3 x i1>
@i_b3 = external addrspace(2) constant <3 x i1>
@u_b4 = external addrspace(2) constant <4 x i1>
@i_b4 = external addrspace(2) constant <4 x i1>
@u_i = external addrspace(2) constant i32
@u_i2 = external addrspace(2) constant <2 x i32>
@u_i3 = external addrspace(2) constant <3 x i32>
@u_i4 = external addrspace(2) constant <4 x i32>
@u_f = external addrspace(2) constant float
@u_f2 = external addrspace(2) constant <2 x float>
@u_f3 = external addrspace(2) constant <3 x float>
@u_f4 = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %0 = load i1 addrspace(2)* @u_b, align 1, !gla.uniform !0
  %1 = load i1 addrspace(2)* @i_b, align 1, !gla.uniform !2
  %b1 = and i1 %0, %1
  %2 = load <2 x i1> addrspace(2)* @u_b2, align 2, !gla.uniform !3
  %3 = extractelement <2 x i1> %2, i32 0
  %4 = load <2 x i1> addrspace(2)* @i_b2, align 2, !gla.uniform !4
  %5 = extractelement <2 x i1> %4, i32 0
  %6 = and i1 %3, %5
  %7 = extractelement <2 x i1> %2, i32 1
  %8 = and i1 %6, %7
  %9 = extractelement <2 x i1> %4, i32 1
  %10 = and i1 %8, %9
  %11 = load <3 x i1> addrspace(2)* @u_b3, align 4, !gla.uniform !5
  %12 = extractelement <3 x i1> %11, i32 0
  %13 = load <3 x i1> addrspace(2)* @i_b3, align 4, !gla.uniform !6
  %14 = extractelement <3 x i1> %13, i32 0
  %15 = and i1 %12, %14
  %16 = extractelement <3 x i1> %11, i32 1
  %17 = and i1 %15, %16
  %18 = extractelement <3 x i1> %13, i32 1
  %19 = and i1 %17, %18
  %20 = extractelement <3 x i1> %11, i32 2
  %21 = and i1 %19, %20
  %22 = extractelement <3 x i1> %13, i32 2
  %23 = and i1 %21, %22
  %24 = load <4 x i1> addrspace(2)* @u_b4, align 4, !gla.uniform !7
  %25 = extractelement <4 x i1> %24, i32 0
  %26 = load <4 x i1> addrspace(2)* @i_b4, align 4, !gla.uniform !8
  %27 = extractelement <4 x i1> %26, i32 0
  %28 = and i1 %25, %27
  %29 = extractelement <4 x i1> %24, i32 1
  %30 = and i1 %28, %29
  %31 = extractelement <4 x i1> %26, i32 1
  %32 = and i1 %30, %31
  %33 = extractelement <4 x i1> %24, i32 2
  %34 = and i1 %32, %33
  %35 = extractelement <4 x i1> %26, i32 2
  %36 = and i1 %34, %35
  %37 = extractelement <4 x i1> %24, i32 3
  %38 = and i1 %36, %37
  %39 = extractelement <4 x i1> %26, i32 3
  %40 = and i1 %38, %39
  %41 = load <2 x i32> addrspace(2)* @u_i2, align 8, !gla.uniform !10
  %i_i2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 1025, i32 -1), !gla.input !19
  %i28 = add <2 x i32> %41, %i_i2
  %42 = load <3 x i32> addrspace(2)* @u_i3, align 16, !gla.uniform !11
  %i_i3 = call <3 x i32> @llvm.gla.readData.v3i32(i32 1026, i32 -1), !gla.input !21
  %i39 = add <3 x i32> %42, %i_i3
  %43 = load <4 x i32> addrspace(2)* @u_i4, align 16, !gla.uniform !12
  %i_i4 = call <4 x i32> @llvm.gla.readData.v4i32(i32 1027, i32 -1), !gla.input !23
  %i410 = add <4 x i32> %43, %i_i4
  %44 = load <2 x float> addrspace(2)* @u_f2, align 8, !gla.uniform !14
  %i_f2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1029, i32 -1, i32 1), !gla.input !27
  %f212 = fadd <2 x float> %44, %i_f2
  %45 = load <3 x float> addrspace(2)* @u_f3, align 16, !gla.uniform !15
  %i_f3 = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 1030, i32 -1, i32 1), !gla.input !29
  %f313 = fadd <3 x float> %45, %i_f3
  %46 = load <4 x float> addrspace(2)* @u_f4, align 16, !gla.uniform !16
  %i_f4 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1031, i32 -1, i32 1), !gla.input !31
  %f414 = fadd <4 x float> %46, %i_f4
  %47 = or i1 %b1, %10
  %48 = or i1 %47, %23
  %49 = or i1 %48, %40
  br i1 %49, label %then, label %else

then:                                             ; preds = %entry
  %i_f = call float @llvm.gla.fReadInterpolant.f32(i32 1028, i32 -1, i32 1), !gla.input !25
  %50 = load float addrspace(2)* @u_f, align 4, !gla.uniform !13
  %i_i = call i32 @llvm.gla.readData.i32(i32 1024, i32 -1), !gla.input !17
  %51 = load i32 addrspace(2)* @u_i, align 4, !gla.uniform !9
  %f11 = fadd float %i_f, %50
  %52 = extractelement <2 x i32> %i28, i32 0
  %53 = extractelement <2 x i32> %i28, i32 1
  %54 = extractelement <3 x i32> %i39, i32 0
  %55 = extractelement <3 x i32> %i39, i32 1
  %56 = extractelement <3 x i32> %i39, i32 2
  %57 = extractelement <4 x i32> %i410, i32 0
  %58 = extractelement <4 x i32> %i410, i32 1
  %59 = extractelement <4 x i32> %i410, i32 2
  %60 = extractelement <4 x i32> %i410, i32 3
  %i7 = add i32 %53, %52
  %61 = add i32 %i7, %54
  %62 = add i32 %61, %55
  %63 = add i32 %62, %56
  %64 = add i32 %63, %57
  %65 = add i32 %64, %58
  %66 = add i32 %65, %59
  %67 = add i32 %66, %60
  %68 = add i32 %67, %i_i
  %69 = add i32 %68, %51
  %70 = sitofp i32 %69 to float
  %71 = fadd float %f11, %70
  %72 = extractelement <2 x float> %f212, i32 0
  %73 = fadd float %72, %71
  %74 = extractelement <2 x float> %f212, i32 1
  %75 = fadd float %74, %73
  %76 = extractelement <3 x float> %f313, i32 0
  %77 = fadd float %76, %75
  %78 = extractelement <3 x float> %f313, i32 1
  %79 = fadd float %78, %77
  %80 = extractelement <3 x float> %f313, i32 2
  %81 = fadd float %80, %79
  %82 = extractelement <4 x float> %f414, i32 0
  %83 = fadd float %82, %81
  %84 = extractelement <4 x float> %f414, i32 1
  %85 = fadd float %84, %83
  %86 = extractelement <4 x float> %f414, i32 2
  %87 = fadd float %86, %85
  %88 = extractelement <4 x float> %f414, i32 3
  %89 = fadd float %88, %87
  %90 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %89, <4 x i32> zeroinitializer)
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %ternary.0 = phi <4 x float> [ %90, %then ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %else ]
  call void @llvm.gla.fWriteData.v4f32(i32 1032, i32 -1, <4 x float> %ternary.0), !gla.output !33
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare i32 @llvm.gla.readData.i32(i32, i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32, i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32, i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32, i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

!gla.uniforms = !{!0, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16}
!gla.inputs = !{!17, !19, !21, !23, !25, !27, !29, !31}
!gla.outputs = !{!33}

!0 = metadata !{metadata !"u_b", i32 12, i1* @u_b_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"i_b", i32 12, i1* @i_b_typeProxy, metadata !1}
!3 = metadata !{metadata !"u_b2", i32 12, <2 x i1>* @u_b2_typeProxy, metadata !1}
!4 = metadata !{metadata !"i_b2", i32 12, <2 x i1>* @i_b2_typeProxy, metadata !1}
!5 = metadata !{metadata !"u_b3", i32 12, <3 x i1>* @u_b3_typeProxy, metadata !1}
!6 = metadata !{metadata !"i_b3", i32 12, <3 x i1>* @i_b3_typeProxy, metadata !1}
!7 = metadata !{metadata !"u_b4", i32 12, <4 x i1>* @u_b4_typeProxy, metadata !1}
!8 = metadata !{metadata !"i_b4", i32 12, <4 x i1>* @i_b4_typeProxy, metadata !1}
!9 = metadata !{metadata !"u_i", i32 12, i32* @u_i_typeProxy, metadata !1}
!10 = metadata !{metadata !"u_i2", i32 12, <2 x i32>* @u_i2_typeProxy, metadata !1}
!11 = metadata !{metadata !"u_i3", i32 12, <3 x i32>* @u_i3_typeProxy, metadata !1}
!12 = metadata !{metadata !"u_i4", i32 12, <4 x i32>* @u_i4_typeProxy, metadata !1}
!13 = metadata !{metadata !"u_f", i32 12, float* @u_f_typeProxy, metadata !1}
!14 = metadata !{metadata !"u_f2", i32 12, <2 x float>* @u_f2_typeProxy, metadata !1}
!15 = metadata !{metadata !"u_f3", i32 12, <3 x float>* @u_f3_typeProxy, metadata !1}
!16 = metadata !{metadata !"u_f4", i32 12, <4 x float>* @u_f4_typeProxy, metadata !1}
!17 = metadata !{metadata !"i_i", i32 1, i32* @i_i_shadow_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!19 = metadata !{metadata !"i_i2", i32 1, <2 x i32>* @i_i2_shadow_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
!21 = metadata !{metadata !"i_i3", i32 1, <3 x i32>* @i_i3_shadow_typeProxy, metadata !22}
!22 = metadata !{i32 0, i32 0, i32 1026, null, i32 0}
!23 = metadata !{metadata !"i_i4", i32 1, <4 x i32>* @i_i4_shadow_typeProxy, metadata !24}
!24 = metadata !{i32 0, i32 0, i32 1027, null, i32 0}
!25 = metadata !{metadata !"i_f", i32 1, float* @i_f_shadow_typeProxy, metadata !26}
!26 = metadata !{i32 0, i32 0, i32 1028, null, i32 1}
!27 = metadata !{metadata !"i_f2", i32 1, <2 x float>* @i_f2_shadow_typeProxy, metadata !28}
!28 = metadata !{i32 0, i32 0, i32 1029, null, i32 1}
!29 = metadata !{metadata !"i_f3", i32 1, <3 x float>* @i_f3_shadow_typeProxy, metadata !30}
!30 = metadata !{i32 0, i32 0, i32 1030, null, i32 1}
!31 = metadata !{metadata !"i_f4", i32 1, <4 x float>* @i_f4_shadow_typeProxy, metadata !32}
!32 = metadata !{i32 0, i32 0, i32 1031, null, i32 1}
!33 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !34}
!34 = metadata !{i32 0, i32 0, i32 1032, null, i32 0}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 130
// LunarGOO output (r722)
uniform bool u_b;
uniform bool i_b;
uniform bvec2 u_b2;
uniform bvec2 i_b2;
uniform bvec3 u_b3;
uniform bvec3 i_b3;
uniform bvec4 u_b4;
uniform bvec4 i_b4;
uniform int u_i;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform float u_f;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
flat in ivec2 i_i2;
flat in ivec3 i_i3;
flat in ivec4 i_i4;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
in float i_f;
flat in int i_i;
const vec4 const70 = vec4(1.0);

void main()
{
    vec4 ternaryd0;
    bool temp22 = u_b && i_b;
    bool temp23 = u_b2.x && i_b2.x;
    bool temp24 = temp23 && u_b2.y;
    bool temp25 = temp24 && i_b2.y;
    bool temp26 = u_b3.x && i_b3.x;
    bool temp27 = temp26 && u_b3.y;
    bool temp28 = temp27 && i_b3.y;
    bool temp29 = temp28 && u_b3.z;
    bool temp30 = temp29 && i_b3.z;
    bool temp31 = u_b4.x && i_b4.x;
    bool temp32 = temp31 && u_b4.y;
    bool temp33 = temp32 && i_b4.y;
    bool temp34 = temp33 && u_b4.z;
    bool temp35 = temp34 && i_b4.z;
    bool temp36 = temp35 && u_b4.w;
    bool temp37 = temp36 && i_b4.w;
    ivec2 temp38 = u_i2 + i_i2;
    ivec3 temp39 = u_i3 + i_i3;
    ivec4 temp40 = u_i4 + i_i4;
    vec2 temp41 = u_f2 + i_f2;
    vec3 temp42 = u_f3 + i_f3;
    vec4 temp43 = u_f4 + i_f4;
    bool temp44 = temp22 || temp25;
    bool temp45 = temp44 || temp30;
    bool temp46 = temp45 || temp37;
    if (temp46) {
        float temp47 = i_f + u_f;
        int temp48 = temp38.y + temp38.x;
        int temp49 = temp48 + temp39.x;
        int temp50 = temp49 + temp39.y;
        int temp51 = temp50 + temp39.z;
        int temp52 = temp51 + temp40.x;
        int temp53 = temp52 + temp40.y;
        int temp54 = temp53 + temp40.z;
        int temp55 = temp54 + temp40.w;
        int temp56 = temp55 + i_i;
        int temp57 = temp56 + u_i;
        float temp58 = float(temp57);
        float temp59 = temp47 + temp58;
        float temp60 = temp41.x + temp59;
        float temp61 = temp41.y + temp60;
        float temp62 = temp42.x + temp61;
        float temp63 = temp42.y + temp62;
        float temp64 = temp42.z + temp63;
        float temp65 = temp43.x + temp64;
        float temp66 = temp43.y + temp65;
        float temp67 = temp43.z + temp66;
        float temp68 = temp43.w + temp67;
        vec4 temp69 = vec4(temp68);
        ternaryd0 = temp69;
    }
    else {
        ternaryd0 = const70;
    }
    
    gl_FragColor = ternaryd0;
    
}

#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 130
// LunarGOO output (r722)
uniform bool u_b;
uniform bool i_b;
uniform bvec2 u_b2;
uniform bvec2 i_b2;
uniform bvec3 u_b3;
uniform bvec3 i_b3;
uniform bvec4 u_b4;
uniform bvec4 i_b4;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
uniform float u_f;
uniform int u_i;
flat in ivec2 i_i2;
flat in ivec3 i_i3;
flat in ivec4 i_i4;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
in float i_f;
flat in int i_i;
const vec4 const70 = vec4(1.0);

void main()
{
    vec4 ternaryd0d0;
    bool temp221 = u_b && i_b;
    bool temp232 = u_b2.x && i_b2.x;
    bool temp243 = temp232 && u_b2.y;
    bool temp254 = temp243 && i_b2.y;
    bool temp265 = u_b3.x && i_b3.x;
    bool temp276 = temp265 && u_b3.y;
    bool temp287 = temp276 && i_b3.y;
    bool temp298 = temp287 && u_b3.z;
    bool temp309 = temp298 && i_b3.z;
    bool temp3110 = u_b4.x && i_b4.x;
    bool temp3211 = temp3110 && u_b4.y;
    bool temp3312 = temp3211 && i_b4.y;
    bool temp3413 = temp3312 && u_b4.z;
    bool temp3514 = temp3413 && i_b4.z;
    bool temp3615 = temp3514 && u_b4.w;
    bool temp3716 = temp3615 && i_b4.w;
    ivec2 temp3817 = u_i2 + i_i2;
    ivec3 temp3918 = u_i3 + i_i3;
    ivec4 temp4019 = u_i4 + i_i4;
    vec2 temp4120 = u_f2 + i_f2;
    vec3 temp4221 = u_f3 + i_f3;
    vec4 temp4322 = u_f4 + i_f4;
    bool temp4423 = temp221 || temp254;
    bool temp4524 = temp4423 || temp309;
    bool temp4625 = temp4524 || temp3716;
    if (temp4625) {
        float temp4726 = i_f + u_f;
        int temp4827 = temp3817.y + temp3817.x;
        int temp4928 = temp4827 + temp3918.x;
        int temp5029 = temp4928 + temp3918.y;
        int temp5130 = temp5029 + temp3918.z;
        int temp5231 = temp5130 + temp4019.x;
        int temp5332 = temp5231 + temp4019.y;
        int temp5433 = temp5332 + temp4019.z;
        int temp5534 = temp5433 + temp4019.w;
        int temp5635 = temp5534 + i_i;
        int temp5736 = temp5635 + u_i;
        float temp5837 = float(temp5736);
        float temp5938 = temp4726 + temp5837;
        float temp6039 = temp4120.x + temp5938;
        float temp6140 = temp4120.y + temp6039;
        float temp6241 = temp4221.x + temp6140;
        float temp6342 = temp4221.y + temp6241;
        float temp6443 = temp4221.z + temp6342;
        float temp6544 = temp4322.x + temp6443;
        float temp6645 = temp4322.y + temp6544;
        float temp6746 = temp4322.z + temp6645;
        float temp6847 = temp4322.w + temp6746;
        vec4 temp69 = vec4(temp6847);
        ternaryd0d0 = temp69;
    }
    else {
        ternaryd0d0 = const70;
    }
    
    gl_FragColor = ternaryd0d0;
    
}

