
Top IR:
; ModuleID = 'Top'

@u_b = external addrspace(2) constant i1
@i_b_shadow = internal global i1 false
@u_b2 = external addrspace(2) constant <2 x i1>
@i_b2_shadow = internal global <2 x i1> zeroinitializer
@u_b3 = external addrspace(2) constant <3 x i1>
@i_b3_shadow = internal global <3 x i1> zeroinitializer
@u_b4 = external addrspace(2) constant <4 x i1>
@i_b4_shadow = internal global <4 x i1> zeroinitializer
@u_i = external addrspace(2) constant i32
@i_i_shadow = internal global i32 0
@u_i2 = external addrspace(2) constant <2 x i32>
@i_i2_shadow = internal global <2 x i32> zeroinitializer
@u_i3 = external addrspace(2) constant <3 x i32>
@i_i3_shadow = internal global <3 x i32> zeroinitializer
@u_i4 = external addrspace(2) constant <4 x i32>
@i_i4_shadow = internal global <4 x i32> zeroinitializer
@u_f = external addrspace(2) constant float
@i_f_shadow = internal global float 0.000000e+00
@u_f2 = external addrspace(2) constant <2 x float>
@i_f2_shadow = internal global <2 x float> zeroinitializer
@u_f3 = external addrspace(2) constant <3 x float>
@i_f3_shadow = internal global <3 x float> zeroinitializer
@u_f4 = external addrspace(2) constant <4 x float>
@i_f4_shadow = internal global <4 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed21 = alloca <4 x float>
  %ternary = alloca <4 x float>
  %f4 = alloca <4 x float>
  %f3 = alloca <3 x float>
  %f2 = alloca <2 x float>
  %f = alloca float
  %i4 = alloca <4 x i32>
  %i3 = alloca <3 x i32>
  %i2 = alloca <2 x i32>
  %i = alloca i32
  %constructed11 = alloca <4 x i1>
  %b4 = alloca <4 x i1>
  %constructed6 = alloca <3 x i1>
  %b3 = alloca <3 x i1>
  %constructed = alloca <2 x i1>
  %b2 = alloca <2 x i1>
  %b = alloca i1
  %0 = load i1 addrspace(2)* @u_b
  %i_b__ = call i1 @llvm.gla.readData.i1(i32 0, i32 -1)
  store i1 %i_b__, i1* @i_b_shadow
  %1 = load i1* @i_b_shadow
  %b1 = and i1 %0, %1
  store i1 %b1, i1* %b
  %2 = load <2 x i1> addrspace(2)* @u_b2
  %3 = extractelement <2 x i1> %2, i32 0
  %i_b2__ = call <2 x i1> @llvm.gla.readData.v2i1(i32 1, i32 -1)
  store <2 x i1> %i_b2__, <2 x i1>* @i_b2_shadow
  %4 = load <2 x i1>* @i_b2_shadow
  %5 = extractelement <2 x i1> %4, i32 0
  %6 = and i1 %3, %5
  %7 = load <2 x i1> addrspace(2)* @u_b2
  %8 = extractelement <2 x i1> %7, i32 1
  %9 = and i1 %6, %8
  %i_b2__2 = call <2 x i1> @llvm.gla.readData.v2i1(i32 1, i32 -1)
  store <2 x i1> %i_b2__2, <2 x i1>* @i_b2_shadow
  %10 = load <2 x i1>* @i_b2_shadow
  %11 = extractelement <2 x i1> %10, i32 1
  %12 = and i1 %9, %11
  %13 = load <2 x i1>* %constructed
  %14 = insertelement <2 x i1> undef, i1 %12, i32 0
  %b23 = insertelement <2 x i1> %14, i1 %12, i32 1
  store <2 x i1> %b23, <2 x i1>* %b2
  %15 = load <3 x i1> addrspace(2)* @u_b3
  %16 = extractelement <3 x i1> %15, i32 0
  %i_b3__ = call <3 x i1> @llvm.gla.readData.v3i1(i32 2, i32 -1)
  store <3 x i1> %i_b3__, <3 x i1>* @i_b3_shadow
  %17 = load <3 x i1>* @i_b3_shadow
  %18 = extractelement <3 x i1> %17, i32 0
  %19 = and i1 %16, %18
  %20 = load <3 x i1> addrspace(2)* @u_b3
  %21 = extractelement <3 x i1> %20, i32 1
  %22 = and i1 %19, %21
  %i_b3__4 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2, i32 -1)
  store <3 x i1> %i_b3__4, <3 x i1>* @i_b3_shadow
  %23 = load <3 x i1>* @i_b3_shadow
  %24 = extractelement <3 x i1> %23, i32 1
  %25 = and i1 %22, %24
  %26 = load <3 x i1> addrspace(2)* @u_b3
  %27 = extractelement <3 x i1> %26, i32 2
  %28 = and i1 %25, %27
  %i_b3__5 = call <3 x i1> @llvm.gla.readData.v3i1(i32 2, i32 -1)
  store <3 x i1> %i_b3__5, <3 x i1>* @i_b3_shadow
  %29 = load <3 x i1>* @i_b3_shadow
  %30 = extractelement <3 x i1> %29, i32 2
  %31 = and i1 %28, %30
  %32 = load <3 x i1>* %constructed6
  %33 = insertelement <3 x i1> undef, i1 %31, i32 0
  %34 = insertelement <3 x i1> %33, i1 %31, i32 1
  %b37 = insertelement <3 x i1> %34, i1 %31, i32 2
  store <3 x i1> %b37, <3 x i1>* %b3
  %35 = load <4 x i1> addrspace(2)* @u_b4
  %36 = extractelement <4 x i1> %35, i32 0
  %i_b4__ = call <4 x i1> @llvm.gla.readData.v4i1(i32 3, i32 -1)
  store <4 x i1> %i_b4__, <4 x i1>* @i_b4_shadow
  %37 = load <4 x i1>* @i_b4_shadow
  %38 = extractelement <4 x i1> %37, i32 0
  %39 = and i1 %36, %38
  %40 = load <4 x i1> addrspace(2)* @u_b4
  %41 = extractelement <4 x i1> %40, i32 1
  %42 = and i1 %39, %41
  %i_b4__8 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3, i32 -1)
  store <4 x i1> %i_b4__8, <4 x i1>* @i_b4_shadow
  %43 = load <4 x i1>* @i_b4_shadow
  %44 = extractelement <4 x i1> %43, i32 1
  %45 = and i1 %42, %44
  %46 = load <4 x i1> addrspace(2)* @u_b4
  %47 = extractelement <4 x i1> %46, i32 2
  %48 = and i1 %45, %47
  %i_b4__9 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3, i32 -1)
  store <4 x i1> %i_b4__9, <4 x i1>* @i_b4_shadow
  %49 = load <4 x i1>* @i_b4_shadow
  %50 = extractelement <4 x i1> %49, i32 2
  %51 = and i1 %48, %50
  %52 = load <4 x i1> addrspace(2)* @u_b4
  %53 = extractelement <4 x i1> %52, i32 3
  %54 = and i1 %51, %53
  %i_b4__10 = call <4 x i1> @llvm.gla.readData.v4i1(i32 3, i32 -1)
  store <4 x i1> %i_b4__10, <4 x i1>* @i_b4_shadow
  %55 = load <4 x i1>* @i_b4_shadow
  %56 = extractelement <4 x i1> %55, i32 3
  %57 = and i1 %54, %56
  %58 = load <4 x i1>* %constructed11
  %59 = insertelement <4 x i1> undef, i1 %57, i32 0
  %60 = insertelement <4 x i1> %59, i1 %57, i32 1
  %61 = insertelement <4 x i1> %60, i1 %57, i32 2
  %b412 = insertelement <4 x i1> %61, i1 %57, i32 3
  store <4 x i1> %b412, <4 x i1>* %b4
  %62 = load i32 addrspace(2)* @u_i
  %i_i__ = call i32 @llvm.gla.readData.i32(i32 4, i32 -1)
  store i32 %i_i__, i32* @i_i_shadow
  %63 = load i32* @i_i_shadow
  %i13 = add i32 %62, %63
  store i32 %i13, i32* %i
  %64 = load <2 x i32> addrspace(2)* @u_i2
  %i_i2__ = call <2 x i32> @llvm.gla.readData.v2i32(i32 5, i32 -1)
  store <2 x i32> %i_i2__, <2 x i32>* @i_i2_shadow
  %65 = load <2 x i32>* @i_i2_shadow
  %i214 = add <2 x i32> %64, %65
  store <2 x i32> %i214, <2 x i32>* %i2
  %66 = load <3 x i32> addrspace(2)* @u_i3
  %i_i3__ = call <3 x i32> @llvm.gla.readData.v3i32(i32 6, i32 -1)
  store <3 x i32> %i_i3__, <3 x i32>* @i_i3_shadow
  %67 = load <3 x i32>* @i_i3_shadow
  %i315 = add <3 x i32> %66, %67
  store <3 x i32> %i315, <3 x i32>* %i3
  %68 = load <4 x i32> addrspace(2)* @u_i4
  %i_i4__ = call <4 x i32> @llvm.gla.readData.v4i32(i32 7, i32 -1)
  store <4 x i32> %i_i4__, <4 x i32>* @i_i4_shadow
  %69 = load <4 x i32>* @i_i4_shadow
  %i416 = add <4 x i32> %68, %69
  store <4 x i32> %i416, <4 x i32>* %i4
  %70 = load float addrspace(2)* @u_f
  %i_f__ = call float @llvm.gla.fReadInterpolant.f32(i32 8, i32 -1, i32 1)
  store float %i_f__, float* @i_f_shadow
  %71 = load float* @i_f_shadow
  %f17 = fadd float %70, %71
  store float %f17, float* %f
  %72 = load <2 x float> addrspace(2)* @u_f2
  %i_f2__ = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 9, i32 -1, i32 1)
  store <2 x float> %i_f2__, <2 x float>* @i_f2_shadow
  %73 = load <2 x float>* @i_f2_shadow
  %f218 = fadd <2 x float> %72, %73
  store <2 x float> %f218, <2 x float>* %f2
  %74 = load <3 x float> addrspace(2)* @u_f3
  %i_f3__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 10, i32 -1, i32 1)
  store <3 x float> %i_f3__, <3 x float>* @i_f3_shadow
  %75 = load <3 x float>* @i_f3_shadow
  %f319 = fadd <3 x float> %74, %75
  store <3 x float> %f319, <3 x float>* %f3
  %76 = load <4 x float> addrspace(2)* @u_f4
  %i_f4__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 11, i32 -1, i32 1)
  store <4 x float> %i_f4__, <4 x float>* @i_f4_shadow
  %77 = load <4 x float>* @i_f4_shadow
  %f420 = fadd <4 x float> %76, %77
  store <4 x float> %f420, <4 x float>* %f4
  %78 = load i1* %b
  %79 = load <2 x i1>* %b2
  %80 = extractelement <2 x i1> %79, i32 0
  %81 = or i1 %78, %80
  %82 = load <2 x i1>* %b2
  %83 = extractelement <2 x i1> %82, i32 1
  %84 = or i1 %81, %83
  %85 = load <3 x i1>* %b3
  %86 = extractelement <3 x i1> %85, i32 0
  %87 = or i1 %84, %86
  %88 = load <3 x i1>* %b3
  %89 = extractelement <3 x i1> %88, i32 1
  %90 = or i1 %87, %89
  %91 = load <3 x i1>* %b3
  %92 = extractelement <3 x i1> %91, i32 2
  %93 = or i1 %90, %92
  %94 = load <4 x i1>* %b4
  %95 = extractelement <4 x i1> %94, i32 0
  %96 = or i1 %93, %95
  %97 = load <4 x i1>* %b4
  %98 = extractelement <4 x i1> %97, i32 1
  %99 = or i1 %96, %98
  %100 = load <4 x i1>* %b4
  %101 = extractelement <4 x i1> %100, i32 2
  %102 = or i1 %99, %101
  %103 = load <4 x i1>* %b4
  %104 = extractelement <4 x i1> %103, i32 3
  %105 = or i1 %102, %104
  br i1 %105, label %then, label %else

then:                                             ; preds = %entry
  %106 = load i32* %i
  %107 = load <2 x i32>* %i2
  %108 = extractelement <2 x i32> %107, i32 0
  %109 = add i32 %106, %108
  %110 = load <2 x i32>* %i2
  %111 = extractelement <2 x i32> %110, i32 1
  %112 = add i32 %109, %111
  %113 = load <3 x i32>* %i3
  %114 = extractelement <3 x i32> %113, i32 0
  %115 = add i32 %112, %114
  %116 = load <3 x i32>* %i3
  %117 = extractelement <3 x i32> %116, i32 1
  %118 = add i32 %115, %117
  %119 = load <3 x i32>* %i3
  %120 = extractelement <3 x i32> %119, i32 2
  %121 = add i32 %118, %120
  %122 = load <4 x i32>* %i4
  %123 = extractelement <4 x i32> %122, i32 0
  %124 = add i32 %121, %123
  %125 = load <4 x i32>* %i4
  %126 = extractelement <4 x i32> %125, i32 1
  %127 = add i32 %124, %126
  %128 = load <4 x i32>* %i4
  %129 = extractelement <4 x i32> %128, i32 2
  %130 = add i32 %127, %129
  %131 = load <4 x i32>* %i4
  %132 = extractelement <4 x i32> %131, i32 3
  %133 = add i32 %130, %132
  %134 = sitofp i32 %133 to float
  %135 = load float* %f
  %136 = fadd float %134, %135
  %137 = load <2 x float>* %f2
  %138 = extractelement <2 x float> %137, i32 0
  %139 = fadd float %136, %138
  %140 = load <2 x float>* %f2
  %141 = extractelement <2 x float> %140, i32 1
  %142 = fadd float %139, %141
  %143 = load <3 x float>* %f3
  %144 = extractelement <3 x float> %143, i32 0
  %145 = fadd float %142, %144
  %146 = load <3 x float>* %f3
  %147 = extractelement <3 x float> %146, i32 1
  %148 = fadd float %145, %147
  %149 = load <3 x float>* %f3
  %150 = extractelement <3 x float> %149, i32 2
  %151 = fadd float %148, %150
  %152 = load <4 x float>* %f4
  %153 = extractelement <4 x float> %152, i32 0
  %154 = fadd float %151, %153
  %155 = load <4 x float>* %f4
  %156 = extractelement <4 x float> %155, i32 1
  %157 = fadd float %154, %156
  %158 = load <4 x float>* %f4
  %159 = extractelement <4 x float> %158, i32 2
  %160 = fadd float %157, %159
  %161 = load <4 x float>* %f4
  %162 = extractelement <4 x float> %161, i32 3
  %163 = fadd float %160, %162
  %164 = load <4 x float>* %constructed21
  %165 = insertelement <4 x float> undef, float %163, i32 0
  %166 = insertelement <4 x float> %165, float %163, i32 1
  %167 = insertelement <4 x float> %166, float %163, i32 2
  %ternary22 = insertelement <4 x float> %167, float %163, i32 3
  store <4 x float> %ternary22, <4 x float>* %ternary
  br label %ifmerge

else:                                             ; preds = %entry
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %ternary
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %FragColor_shadow = load <4 x float>* %ternary
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %168 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %168)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare i1 @llvm.gla.readData.i1(i32, i32) nounwind readonly

declare <2 x i1> @llvm.gla.readData.v2i1(i32, i32) nounwind readonly

declare <3 x i1> @llvm.gla.readData.v3i1(i32, i32) nounwind readonly

declare <4 x i1> @llvm.gla.readData.v4i1(i32, i32) nounwind readonly

declare i32 @llvm.gla.readData.i32(i32, i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32, i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32, i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32, i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@u_b = external addrspace(2) constant i1
@u_b2 = external addrspace(2) constant <2 x i1>
@u_b3 = external addrspace(2) constant <3 x i1>
@u_b4 = external addrspace(2) constant <4 x i1>
@u_i = external addrspace(2) constant i32
@u_i2 = external addrspace(2) constant <2 x i32>
@u_i3 = external addrspace(2) constant <3 x i32>
@u_i4 = external addrspace(2) constant <4 x i32>
@u_f = external addrspace(2) constant float
@u_f2 = external addrspace(2) constant <2 x float>
@u_f3 = external addrspace(2) constant <3 x float>
@u_f4 = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %0 = load i1 addrspace(2)* @u_b, align 1
  %i_b__ = call i1 @llvm.gla.readData.i1(i32 0, i32 -1)
  %b1 = and i1 %0, %i_b__
  %1 = load <2 x i1> addrspace(2)* @u_b2, align 2
  %2 = extractelement <2 x i1> %1, i32 0
  %i_b2__ = call <2 x i1> @llvm.gla.readData.v2i1(i32 1, i32 -1)
  %3 = extractelement <2 x i1> %i_b2__, i32 0
  %4 = and i1 %2, %3
  %5 = extractelement <2 x i1> %1, i32 1
  %6 = and i1 %4, %5
  %7 = extractelement <2 x i1> %i_b2__, i32 1
  %8 = and i1 %6, %7
  %9 = load <3 x i1> addrspace(2)* @u_b3, align 4
  %10 = extractelement <3 x i1> %9, i32 0
  %i_b3__ = call <3 x i1> @llvm.gla.readData.v3i1(i32 2, i32 -1)
  %11 = extractelement <3 x i1> %i_b3__, i32 0
  %12 = and i1 %10, %11
  %13 = extractelement <3 x i1> %9, i32 1
  %14 = and i1 %12, %13
  %15 = extractelement <3 x i1> %i_b3__, i32 1
  %16 = and i1 %14, %15
  %17 = extractelement <3 x i1> %9, i32 2
  %18 = and i1 %16, %17
  %19 = extractelement <3 x i1> %i_b3__, i32 2
  %20 = and i1 %18, %19
  %21 = load <4 x i1> addrspace(2)* @u_b4, align 4
  %22 = extractelement <4 x i1> %21, i32 0
  %i_b4__ = call <4 x i1> @llvm.gla.readData.v4i1(i32 3, i32 -1)
  %23 = extractelement <4 x i1> %i_b4__, i32 0
  %24 = and i1 %22, %23
  %25 = extractelement <4 x i1> %21, i32 1
  %26 = and i1 %24, %25
  %27 = extractelement <4 x i1> %i_b4__, i32 1
  %28 = and i1 %26, %27
  %29 = extractelement <4 x i1> %21, i32 2
  %30 = and i1 %28, %29
  %31 = extractelement <4 x i1> %i_b4__, i32 2
  %32 = and i1 %30, %31
  %33 = extractelement <4 x i1> %21, i32 3
  %34 = and i1 %32, %33
  %35 = extractelement <4 x i1> %i_b4__, i32 3
  %36 = and i1 %34, %35
  %37 = load <2 x i32> addrspace(2)* @u_i2, align 8
  %i_i2__ = call <2 x i32> @llvm.gla.readData.v2i32(i32 5, i32 -1)
  %i214 = add <2 x i32> %37, %i_i2__
  %38 = load <3 x i32> addrspace(2)* @u_i3, align 16
  %i_i3__ = call <3 x i32> @llvm.gla.readData.v3i32(i32 6, i32 -1)
  %i315 = add <3 x i32> %38, %i_i3__
  %39 = load <4 x i32> addrspace(2)* @u_i4, align 16
  %i_i4__ = call <4 x i32> @llvm.gla.readData.v4i32(i32 7, i32 -1)
  %i416 = add <4 x i32> %39, %i_i4__
  %40 = load <2 x float> addrspace(2)* @u_f2, align 8
  %i_f2__ = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 9, i32 -1, i32 1)
  %f218 = fadd <2 x float> %40, %i_f2__
  %41 = load <3 x float> addrspace(2)* @u_f3, align 16
  %i_f3__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 10, i32 -1, i32 1)
  %f319 = fadd <3 x float> %41, %i_f3__
  %42 = load <4 x float> addrspace(2)* @u_f4, align 16
  %i_f4__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 11, i32 -1, i32 1)
  %f420 = fadd <4 x float> %42, %i_f4__
  %43 = or i1 %b1, %8
  %44 = or i1 %43, %20
  %45 = or i1 %44, %36
  br i1 %45, label %then, label %else

then:                                             ; preds = %entry
  %i_f__ = call float @llvm.gla.fReadInterpolant.f32(i32 8, i32 -1, i32 1)
  %46 = load float addrspace(2)* @u_f, align 4
  %i_i__ = call i32 @llvm.gla.readData.i32(i32 4, i32 -1)
  %47 = load i32 addrspace(2)* @u_i, align 4
  %f17 = fadd float %i_f__, %46
  %48 = extractelement <2 x i32> %i214, i32 0
  %49 = extractelement <2 x i32> %i214, i32 1
  %50 = extractelement <3 x i32> %i315, i32 0
  %51 = extractelement <3 x i32> %i315, i32 1
  %52 = extractelement <3 x i32> %i315, i32 2
  %53 = extractelement <4 x i32> %i416, i32 0
  %54 = extractelement <4 x i32> %i416, i32 1
  %55 = extractelement <4 x i32> %i416, i32 2
  %56 = extractelement <4 x i32> %i416, i32 3
  %i13 = add i32 %49, %48
  %57 = add i32 %i13, %50
  %58 = add i32 %57, %51
  %59 = add i32 %58, %52
  %60 = add i32 %59, %53
  %61 = add i32 %60, %54
  %62 = add i32 %61, %55
  %63 = add i32 %62, %56
  %64 = add i32 %63, %i_i__
  %65 = add i32 %64, %47
  %66 = sitofp i32 %65 to float
  %67 = fadd float %f17, %66
  %68 = extractelement <2 x float> %f218, i32 0
  %69 = fadd float %68, %67
  %70 = extractelement <2 x float> %f218, i32 1
  %71 = fadd float %70, %69
  %72 = extractelement <3 x float> %f319, i32 0
  %73 = fadd float %72, %71
  %74 = extractelement <3 x float> %f319, i32 1
  %75 = fadd float %74, %73
  %76 = extractelement <3 x float> %f319, i32 2
  %77 = fadd float %76, %75
  %78 = extractelement <4 x float> %f420, i32 0
  %79 = fadd float %78, %77
  %80 = extractelement <4 x float> %f420, i32 1
  %81 = fadd float %80, %79
  %82 = extractelement <4 x float> %f420, i32 2
  %83 = fadd float %82, %81
  %84 = extractelement <4 x float> %f420, i32 3
  %85 = fadd float %84, %83
  %86 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %85, <4 x i32> zeroinitializer)
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %ternary.0 = phi <4 x float> [ %86, %then ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %else ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %ternary.0)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare i1 @llvm.gla.readData.i1(i32, i32) nounwind readonly

declare <2 x i1> @llvm.gla.readData.v2i1(i32, i32) nounwind readonly

declare <3 x i1> @llvm.gla.readData.v3i1(i32, i32) nounwind readonly

declare <4 x i1> @llvm.gla.readData.v4i1(i32, i32) nounwind readonly

declare i32 @llvm.gla.readData.i32(i32, i32) nounwind readonly

declare <2 x i32> @llvm.gla.readData.v2i32(i32, i32) nounwind readonly

declare <3 x i32> @llvm.gla.readData.v3i32(i32, i32) nounwind readonly

declare <4 x i32> @llvm.gla.readData.v4i32(i32, i32) nounwind readonly

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform bool u_b;
uniform bvec2 u_b2;
uniform bvec3 u_b3;
uniform bvec4 u_b4;
uniform int u_i;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform float u_f;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
flat in bool i_b;
flat in bvec2 i_b2;
flat in bvec3 i_b3;
flat in bvec4 i_b4;
flat in ivec2 i_i2;
flat in ivec3 i_i3;
flat in ivec4 i_i4;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
in float i_f;
flat in int i_i;
const vec4 const70 = vec4(1.0);

void main()
{
    vec4 ternaryd0;
    bool temp22 = u_b && i_b;
    bool temp23 = u_b2.x && i_b2.x;
    bool temp24 = temp23 && u_b2.y;
    bool temp25 = temp24 && i_b2.y;
    bool temp26 = u_b3.x && i_b3.x;
    bool temp27 = temp26 && u_b3.y;
    bool temp28 = temp27 && i_b3.y;
    bool temp29 = temp28 && u_b3.z;
    bool temp30 = temp29 && i_b3.z;
    bool temp31 = u_b4.x && i_b4.x;
    bool temp32 = temp31 && u_b4.y;
    bool temp33 = temp32 && i_b4.y;
    bool temp34 = temp33 && u_b4.z;
    bool temp35 = temp34 && i_b4.z;
    bool temp36 = temp35 && u_b4.w;
    bool temp37 = temp36 && i_b4.w;
    ivec2 temp38 = u_i2 + i_i2;
    ivec3 temp39 = u_i3 + i_i3;
    ivec4 temp40 = u_i4 + i_i4;
    vec2 temp41 = u_f2 + i_f2;
    vec3 temp42 = u_f3 + i_f3;
    vec4 temp43 = u_f4 + i_f4;
    bool temp44 = temp22 || temp25;
    bool temp45 = temp44 || temp30;
    bool temp46 = temp45 || temp37;
    if (temp46) {
        float temp47 = i_f + u_f;
        int temp48 = temp38.y + temp38.x;
        int temp49 = temp48 + temp39.x;
        int temp50 = temp49 + temp39.y;
        int temp51 = temp50 + temp39.z;
        int temp52 = temp51 + temp40.x;
        int temp53 = temp52 + temp40.y;
        int temp54 = temp53 + temp40.z;
        int temp55 = temp54 + temp40.w;
        int temp56 = temp55 + i_i;
        int temp57 = temp56 + u_i;
        float temp58 = float(temp57);
        float temp59 = temp47 + temp58;
        float temp60 = temp41.x + temp59;
        float temp61 = temp41.y + temp60;
        float temp62 = temp42.x + temp61;
        float temp63 = temp42.y + temp62;
        float temp64 = temp42.z + temp63;
        float temp65 = temp43.x + temp64;
        float temp66 = temp43.y + temp65;
        float temp67 = temp43.z + temp66;
        float temp68 = temp43.w + temp67;
        vec4 temp69 = vec4(temp68);
        ternaryd0 = temp69;
    }
    else {
        ternaryd0 = const70;
    }
    
    gl_FragColor = ternaryd0;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform bool u_b;
uniform bvec2 u_b2;
uniform bvec3 u_b3;
uniform bvec4 u_b4;
uniform ivec2 u_i2;
uniform ivec3 u_i3;
uniform ivec4 u_i4;
uniform vec2 u_f2;
uniform vec3 u_f3;
uniform vec4 u_f4;
uniform float u_f;
uniform int u_i;
flat in bool i_b;
flat in bvec2 i_b2;
flat in bvec3 i_b3;
flat in bvec4 i_b4;
flat in ivec2 i_i2;
flat in ivec3 i_i3;
flat in ivec4 i_i4;
in vec2 i_f2;
in vec3 i_f3;
in vec4 i_f4;
in float i_f;
flat in int i_i;
const vec4 const70 = vec4(1.0);

void main()
{
    vec4 ternaryd0d0;
    bool temp221 = u_b && i_b;
    bool temp232 = u_b2.x && i_b2.x;
    bool temp243 = temp232 && u_b2.y;
    bool temp255 = temp243 && i_b2.y;
    bool temp266 = u_b3.x && i_b3.x;
    bool temp277 = temp266 && u_b3.y;
    bool temp289 = temp277 && i_b3.y;
    bool temp2910 = temp289 && u_b3.z;
    bool temp3012 = temp2910 && i_b3.z;
    bool temp3113 = u_b4.x && i_b4.x;
    bool temp3214 = temp3113 && u_b4.y;
    bool temp3316 = temp3214 && i_b4.y;
    bool temp3417 = temp3316 && u_b4.z;
    bool temp3519 = temp3417 && i_b4.z;
    bool temp3620 = temp3519 && u_b4.w;
    bool temp3722 = temp3620 && i_b4.w;
    ivec2 temp3823 = u_i2 + i_i2;
    ivec3 temp3924 = u_i3 + i_i3;
    ivec4 temp4025 = u_i4 + i_i4;
    vec2 temp4126 = u_f2 + i_f2;
    vec3 temp4227 = u_f3 + i_f3;
    vec4 temp4328 = u_f4 + i_f4;
    bool temp4429 = temp221 || temp255;
    bool temp4530 = temp4429 || temp3012;
    bool temp4631 = temp4530 || temp3722;
    if (temp4631) {
        float temp4732 = i_f + u_f;
        int temp4833 = temp3823.y + temp3823.x;
        int temp4934 = temp4833 + temp3924.x;
        int temp5035 = temp4934 + temp3924.y;
        int temp5136 = temp5035 + temp3924.z;
        int temp5237 = temp5136 + temp4025.x;
        int temp5338 = temp5237 + temp4025.y;
        int temp5439 = temp5338 + temp4025.z;
        int temp5540 = temp5439 + temp4025.w;
        int temp5641 = temp5540 + i_i;
        int temp5742 = temp5641 + u_i;
        float temp5843 = float(temp5742);
        float temp5944 = temp4732 + temp5843;
        float temp6045 = temp4126.x + temp5944;
        float temp6146 = temp4126.y + temp6045;
        float temp6247 = temp4227.x + temp6146;
        float temp6348 = temp4227.y + temp6247;
        float temp6449 = temp4227.z + temp6348;
        float temp6550 = temp4328.x + temp6449;
        float temp6651 = temp4328.y + temp6550;
        float temp6752 = temp4328.z + temp6651;
        float temp6853 = temp4328.w + temp6752;
        vec4 temp69 = vec4(temp6853);
        ternaryd0d0 = temp69;
    }
    else {
        ternaryd0d0 = const70;
    }
    
    gl_FragColor = ternaryd0d0;
    
}
