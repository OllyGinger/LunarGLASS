
Top IR:
; ModuleID = 'Top'

%str = type { i32, [3 x <2 x float>], i1 }

@v1 = internal global <4 x float> zeroinitializer
@v2 = internal global <4 x float> zeroinitializer
@v3 = internal global <4 x float> zeroinitializer
@v4 = internal global <4 x float> zeroinitializer
@"sampler2D sampler" = external addrspace(1) constant i32
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed70 = alloca <4 x float>
  %indexable68 = alloca %str
  %t = alloca %str
  %ternary = alloca <4 x float>
  %i = alloca float
  %h = alloca float
  %indexable = alloca [4 x <4 x float>]
  %g = alloca float
  %f = alloca float
  %mm = alloca [4 x <4 x float>]
  %constructed = alloca [4 x <4 x float>]
  %m = alloca [4 x <4 x float>]
  store <4 x float> <float 2.000000e+00, float 3.000000e+00, float 5.000000e+00, float 7.000000e+00>, <4 x float>* @v1
  store <4 x float> <float 1.100000e+01, float 1.300000e+01, float 1.700000e+01, float 1.900000e+01>, <4 x float>* @v2
  store <4 x float> <float 2.300000e+01, float 2.900000e+01, float 3.100000e+01, float 3.700000e+01>, <4 x float>* @v3
  store <4 x float> <float 4.100000e+01, float 4.300000e+01, float 4.700000e+01, float 5.300000e+01>, <4 x float>* @v4
  %0 = load <4 x float>* @v1
  %1 = load <4 x float>* @v2
  %2 = load <4 x float>* @v3
  %3 = load <4 x float>* @v4
  %4 = load [4 x <4 x float>]* %constructed
  %__element = extractelement <4 x float> %0, i32 0
  %__element1 = extractelement <4 x float> %0, i32 1
  %__element2 = extractelement <4 x float> %0, i32 2
  %__element3 = extractelement <4 x float> %0, i32 3
  %__element4 = extractelement <4 x float> %1, i32 0
  %__element5 = extractelement <4 x float> %1, i32 1
  %__element6 = extractelement <4 x float> %1, i32 2
  %__element7 = extractelement <4 x float> %1, i32 3
  %__element8 = extractelement <4 x float> %2, i32 0
  %__element9 = extractelement <4 x float> %2, i32 1
  %__element10 = extractelement <4 x float> %2, i32 2
  %__element11 = extractelement <4 x float> %2, i32 3
  %__element12 = extractelement <4 x float> %3, i32 0
  %__element13 = extractelement <4 x float> %3, i32 1
  %__element14 = extractelement <4 x float> %3, i32 2
  %__element15 = extractelement <4 x float> %3, i32 3
  %__column = extractvalue [4 x <4 x float>] %4, 0
  %__column16 = insertelement <4 x float> %__column, float %__element, i32 0
  %__column17 = insertelement <4 x float> %__column16, float %__element1, i32 1
  %__column18 = insertelement <4 x float> %__column17, float %__element2, i32 2
  %__column19 = insertelement <4 x float> %__column18, float %__element3, i32 3
  %__matrix = insertvalue [4 x <4 x float>] %4, <4 x float> %__column19, 0
  %__column20 = extractvalue [4 x <4 x float>] %4, 1
  %__column21 = insertelement <4 x float> %__column20, float %__element4, i32 0
  %__column22 = insertelement <4 x float> %__column21, float %__element5, i32 1
  %__column23 = insertelement <4 x float> %__column22, float %__element6, i32 2
  %__column24 = insertelement <4 x float> %__column23, float %__element7, i32 3
  %__matrix25 = insertvalue [4 x <4 x float>] %__matrix, <4 x float> %__column24, 1
  %__column26 = extractvalue [4 x <4 x float>] %4, 2
  %__column27 = insertelement <4 x float> %__column26, float %__element8, i32 0
  %__column28 = insertelement <4 x float> %__column27, float %__element9, i32 1
  %__column29 = insertelement <4 x float> %__column28, float %__element10, i32 2
  %__column30 = insertelement <4 x float> %__column29, float %__element11, i32 3
  %__matrix31 = insertvalue [4 x <4 x float>] %__matrix25, <4 x float> %__column30, 2
  %__column32 = extractvalue [4 x <4 x float>] %4, 3
  %__column33 = insertelement <4 x float> %__column32, float %__element12, i32 0
  %__column34 = insertelement <4 x float> %__column33, float %__element13, i32 1
  %__column35 = insertelement <4 x float> %__column34, float %__element14, i32 2
  %__column36 = insertelement <4 x float> %__column35, float %__element15, i32 3
  %__matrix37 = insertvalue [4 x <4 x float>] %__matrix31, <4 x float> %__column36, 3
  store [4 x <4 x float>] %__matrix37, [4 x <4 x float>]* %m
  %5 = load [4 x <4 x float>]* %m
  %6 = load [4 x <4 x float>]* %m
  %7 = alloca [4 x <4 x float>]
  %8 = load [4 x <4 x float>]* %7
  %__leftColumn = extractvalue [4 x <4 x float>] %5, 0
  %__rightColumn = extractvalue [4 x <4 x float>] %6, 0
  %__column38 = fmul <4 x float> %__leftColumn, %__rightColumn
  %9 = insertvalue [4 x <4 x float>] %8, <4 x float> %__column38, 0
  %__leftColumn39 = extractvalue [4 x <4 x float>] %5, 1
  %__rightColumn40 = extractvalue [4 x <4 x float>] %6, 1
  %__column41 = fmul <4 x float> %__leftColumn39, %__rightColumn40
  %10 = insertvalue [4 x <4 x float>] %9, <4 x float> %__column41, 1
  %__leftColumn42 = extractvalue [4 x <4 x float>] %5, 2
  %__rightColumn43 = extractvalue [4 x <4 x float>] %6, 2
  %__column44 = fmul <4 x float> %__leftColumn42, %__rightColumn43
  %11 = insertvalue [4 x <4 x float>] %10, <4 x float> %__column44, 2
  %__leftColumn45 = extractvalue [4 x <4 x float>] %5, 3
  %__rightColumn46 = extractvalue [4 x <4 x float>] %6, 3
  %__column47 = fmul <4 x float> %__leftColumn45, %__rightColumn46
  %mm48 = insertvalue [4 x <4 x float>] %11, <4 x float> %__column47, 3
  store [4 x <4 x float>] %mm48, [4 x <4 x float>]* %mm
  %12 = getelementptr [4 x <4 x float>]* %mm, i32 0, i32 1
  %13 = load <4 x float>* %12
  %f49 = extractelement <4 x float> %13, i32 3
  store float %f49, float* %f
  %14 = load [4 x <4 x float>]* %m
  %15 = load [4 x <4 x float>]* %m
  %16 = alloca [4 x <4 x float>]
  %17 = load [4 x <4 x float>]* %16
  %__leftColumn50 = extractvalue [4 x <4 x float>] %14, 0
  %__rightColumn51 = extractvalue [4 x <4 x float>] %15, 0
  %__column52 = fmul <4 x float> %__leftColumn50, %__rightColumn51
  %18 = insertvalue [4 x <4 x float>] %17, <4 x float> %__column52, 0
  %__leftColumn53 = extractvalue [4 x <4 x float>] %14, 1
  %__rightColumn54 = extractvalue [4 x <4 x float>] %15, 1
  %__column55 = fmul <4 x float> %__leftColumn53, %__rightColumn54
  %19 = insertvalue [4 x <4 x float>] %18, <4 x float> %__column55, 1
  %__leftColumn56 = extractvalue [4 x <4 x float>] %14, 2
  %__rightColumn57 = extractvalue [4 x <4 x float>] %15, 2
  %__column58 = fmul <4 x float> %__leftColumn56, %__rightColumn57
  %20 = insertvalue [4 x <4 x float>] %19, <4 x float> %__column58, 2
  %__leftColumn59 = extractvalue [4 x <4 x float>] %14, 3
  %__rightColumn60 = extractvalue [4 x <4 x float>] %15, 3
  %__column61 = fmul <4 x float> %__leftColumn59, %__rightColumn60
  %indexable62 = insertvalue [4 x <4 x float>] %20, <4 x float> %__column61, 3
  store [4 x <4 x float>] %indexable62, [4 x <4 x float>]* %indexable
  %21 = getelementptr [4 x <4 x float>]* %indexable, i32 0, i32 2
  %22 = load <4 x float>* %21
  %g63 = extractelement <4 x float> %22, i32 1
  store float %g63, float* %g
  store float 5.000000e+00, float* %h
  %23 = load i32 addrspace(1)* @"sampler2D sampler"
  %24 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %23, i32 0, <2 x float> <float 5.000000e-01, float 5.000000e-01>)
  %i64 = extractelement <4 x float> %24, i32 1
  store float %i64, float* %i
  %25 = load float* %i
  %26 = fcmp ogt float %25, 0x3FB99999A0000000
  br i1 %26, label %then, label %else

then:                                             ; preds = %entry
  %ternary65 = load <4 x float>* @v1
  store <4 x float> %ternary65, <4 x float>* %ternary
  br label %ifmerge

else:                                             ; preds = %entry
  %ternary66 = load <4 x float>* @v2
  store <4 x float> %ternary66, <4 x float>* %ternary
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %27 = load <4 x float>* %ternary
  %28 = extractelement <4 x float> %27, i32 3
  %29 = load float* %i
  %i67 = fadd float %29, %28
  store float %i67, float* %i
  store %str { i32 1, [3 x <2 x float>] [<2 x float> <float 2.000000e+00, float 3.000000e+00>, <2 x float> <float 4.000000e+00, float 5.000000e+00>, <2 x float> <float 6.000000e+00, float 7.000000e+00>], i1 true }, %str* %t
  store %str { i32 1, [3 x <2 x float>] [<2 x float> <float 2.000000e+00, float 3.000000e+00>, <2 x float> <float 4.000000e+00, float 5.000000e+00>, <2 x float> <float 6.000000e+00, float 7.000000e+00>], i1 true }, %str* %indexable68
  %30 = getelementptr %str* %indexable68, i32 0, i32 1, i32 2
  %31 = load <2 x float>* %30
  %32 = extractelement <2 x float> %31, i32 1
  %33 = load float* %i
  %i69 = fadd float %33, %32
  store float %i69, float* %i
  %34 = load float* %f
  %35 = load float* %g
  %36 = load float* %h
  %37 = load float* %i
  %38 = load <4 x float>* %constructed70
  %39 = insertelement <4 x float> %38, float %34, i32 0
  %40 = insertelement <4 x float> %39, float %35, i32 1
  %41 = insertelement <4 x float> %40, float %36, i32 2
  %FragColor_shadow = insertelement <4 x float> %41, float %37, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %42 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %42)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@"sampler2D sampler" = external addrspace(1) constant i32
@gla_globalAgg = internal global <4 x float> <float undef, float undef, float undef, float 7.000000e+00>
@gla_globalAgg1 = internal global <4 x float> <float undef, float undef, float undef, float 1.900000e+01>

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(1)* @"sampler2D sampler", align 4
  %1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> <float 5.000000e-01, float 5.000000e-01>)
  %i64 = extractelement <4 x float> %1, i32 1
  %2 = fcmp ogt float %i64, 0x3FB99999A0000000
  %aggregate = load <4 x float>* @gla_globalAgg
  %aggregate80 = load <4 x float>* @gla_globalAgg1
  %. = select i1 %2, <4 x float> %aggregate, <4 x float> %aggregate80
  %3 = extractelement <4 x float> %., i32 3
  %i67 = fadd float %i64, %3
  %i69 = fadd float %i67, 7.000000e+00
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 3.610000e+02, float 8.410000e+02, float 5.000000e+00, float undef>, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %i69, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %4)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform sampler2D sampler;
vec4 gla_globalAgg;
const float const21_7f = 7.0;
vec4 gla_globalAgg1;
const float const22_19f = 19.0;
const vec2 const24 = vec2(0.5);
const float const26_0f = 0.1;
const vec4 const31 = vec4(361.0, 841.0, 5.0, 0.0);

void main()
{
    gla_globalAgg.w = const21_7f;
    gla_globalAgg1.w = const22_19f;
    
    vec4 temp23 = texture2D(sampler, const24);
    bool temp25 = temp23.y > const26_0f;
    vec4 temp27 = temp25 ? gla_globalAgg : gla_globalAgg1;
    float temp28 = temp23.y + temp27.w;
    float temp29 = temp28 + const21_7f;
    vec4 temp30 = const31;
    temp30.w = temp29;
    gl_FragColor = temp30;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform sampler2D sampler;
vec4 gla_globalAgg;
const float const21_7f = 7.0;
vec4 gla_globalAgg1;
const float const22_19f = 19.0;
const vec2 const24 = vec2(0.5);
const float const26_0f = 0.1;
const vec4 const31 = vec4(361.0, 841.0, 5.0, 0.0);

void main()
{
    gla_globalAgg.w = const21_7f;
    gla_globalAgg1.w = const22_19f;
    
    vec4 temp231 = texture2D(sampler, const24);
    bool temp252 = temp231.y > const26_0f;
    vec4 temp27 = temp252 ? gla_globalAgg : gla_globalAgg1;
    float temp286 = temp231.y + temp27.w;
    float temp297 = temp286 + const21_7f;
    vec4 temp30 = const31;
    temp30.w = temp297;
    gl_FragColor = temp30;
    
}
