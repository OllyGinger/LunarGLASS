
Top IR:
; ModuleID = 'Top'

%Transform = type { [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], i32 }
%T3 = type { [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>] }
%T2 = type { i1, [4 x <4 x float>] }
%S = type { <3 x float>, float }

@pos_shadow = internal global <4 x float> zeroinitializer
@p_shadow = internal global <4 x float> zeroinitializer
@tblock = external addrspace(2) constant %Transform
@__anon__1 = external addrspace(2) constant %T3
@__anon__0 = external addrspace(2) constant %T2
@color_shadow = internal global <3 x float> zeroinitializer
@c_shadow = internal global <3 x float> zeroinitializer
@iout_shadow = internal global i32 0
@uiuin = external addrspace(2) constant i32
@aiv2_shadow = internal global <2 x i32> zeroinitializer
@s_shadow = internal global %S zeroinitializer

define fastcc void @main() {
entry:
  %p = call <4 x float> @llvm.gla.fReadData.v4f32(i32 3, i32 -1), !gla.input !11, !gla.precision !33
  store <4 x float> %p, <4 x float>* @p_shadow
  %0 = load <4 x float>* @p_shadow
  %1 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%Transform addrspace(2)* @tblock, i32 0, i32 0), !gla.uniform !17
  %2 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%Transform addrspace(2)* @tblock, i32 0, i32 1), !gla.uniform !17
  %3 = alloca [4 x <4 x float>]
  %4 = load [4 x <4 x float>]* %3
  %leftColumn = extractvalue [4 x <4 x float>] %1, 0, !gla.precision !33
  %rightColumn = extractvalue [4 x <4 x float>] %2, 0, !gla.precision !33
  %column = fadd <4 x float> %leftColumn, %rightColumn, !gla.precision !33
  %5 = insertvalue [4 x <4 x float>] %4, <4 x float> %column, 0, !gla.precision !33
  %leftColumn1 = extractvalue [4 x <4 x float>] %1, 1, !gla.precision !33
  %rightColumn2 = extractvalue [4 x <4 x float>] %2, 1, !gla.precision !33
  %column3 = fadd <4 x float> %leftColumn1, %rightColumn2, !gla.precision !33
  %6 = insertvalue [4 x <4 x float>] %5, <4 x float> %column3, 1, !gla.precision !33
  %leftColumn4 = extractvalue [4 x <4 x float>] %1, 2, !gla.precision !33
  %rightColumn5 = extractvalue [4 x <4 x float>] %2, 2, !gla.precision !33
  %column6 = fadd <4 x float> %leftColumn4, %rightColumn5, !gla.precision !33
  %7 = insertvalue [4 x <4 x float>] %6, <4 x float> %column6, 2, !gla.precision !33
  %leftColumn7 = extractvalue [4 x <4 x float>] %1, 3, !gla.precision !33
  %rightColumn8 = extractvalue [4 x <4 x float>] %2, 3, !gla.precision !33
  %column9 = fadd <4 x float> %leftColumn7, %rightColumn8, !gla.precision !33
  %8 = insertvalue [4 x <4 x float>] %7, <4 x float> %column9, 3, !gla.precision !33
  %9 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%T3 addrspace(2)* @__anon__1, i32 0, i32 1), !gla.uniform !26
  %10 = alloca [4 x <4 x float>]
  %11 = load [4 x <4 x float>]* %10
  %leftColumn10 = extractvalue [4 x <4 x float>] %8, 0, !gla.precision !33
  %rightColumn11 = extractvalue [4 x <4 x float>] %9, 0, !gla.precision !33
  %column12 = fadd <4 x float> %leftColumn10, %rightColumn11, !gla.precision !33
  %12 = insertvalue [4 x <4 x float>] %11, <4 x float> %column12, 0, !gla.precision !33
  %leftColumn13 = extractvalue [4 x <4 x float>] %8, 1, !gla.precision !33
  %rightColumn14 = extractvalue [4 x <4 x float>] %9, 1, !gla.precision !33
  %column15 = fadd <4 x float> %leftColumn13, %rightColumn14, !gla.precision !33
  %13 = insertvalue [4 x <4 x float>] %12, <4 x float> %column15, 1, !gla.precision !33
  %leftColumn16 = extractvalue [4 x <4 x float>] %8, 2, !gla.precision !33
  %rightColumn17 = extractvalue [4 x <4 x float>] %9, 2, !gla.precision !33
  %column18 = fadd <4 x float> %leftColumn16, %rightColumn17, !gla.precision !33
  %14 = insertvalue [4 x <4 x float>] %13, <4 x float> %column18, 2, !gla.precision !33
  %leftColumn19 = extractvalue [4 x <4 x float>] %8, 3, !gla.precision !33
  %rightColumn20 = extractvalue [4 x <4 x float>] %9, 3, !gla.precision !33
  %column21 = fadd <4 x float> %leftColumn19, %rightColumn20, !gla.precision !33
  %15 = insertvalue [4 x <4 x float>] %14, <4 x float> %column21, 3, !gla.precision !33
  %16 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%T3 addrspace(2)* @__anon__1, i32 0, i32 0), !gla.uniform !26
  %17 = alloca [4 x <4 x float>]
  %18 = load [4 x <4 x float>]* %17
  %leftColumn22 = extractvalue [4 x <4 x float>] %15, 0, !gla.precision !33
  %rightColumn23 = extractvalue [4 x <4 x float>] %16, 0, !gla.precision !33
  %column24 = fadd <4 x float> %leftColumn22, %rightColumn23, !gla.precision !33
  %19 = insertvalue [4 x <4 x float>] %18, <4 x float> %column24, 0, !gla.precision !33
  %leftColumn25 = extractvalue [4 x <4 x float>] %15, 1, !gla.precision !33
  %rightColumn26 = extractvalue [4 x <4 x float>] %16, 1, !gla.precision !33
  %column27 = fadd <4 x float> %leftColumn25, %rightColumn26, !gla.precision !33
  %20 = insertvalue [4 x <4 x float>] %19, <4 x float> %column27, 1, !gla.precision !33
  %leftColumn28 = extractvalue [4 x <4 x float>] %15, 2, !gla.precision !33
  %rightColumn29 = extractvalue [4 x <4 x float>] %16, 2, !gla.precision !33
  %column30 = fadd <4 x float> %leftColumn28, %rightColumn29, !gla.precision !33
  %21 = insertvalue [4 x <4 x float>] %20, <4 x float> %column30, 2, !gla.precision !33
  %leftColumn31 = extractvalue [4 x <4 x float>] %15, 3, !gla.precision !33
  %rightColumn32 = extractvalue [4 x <4 x float>] %16, 3, !gla.precision !33
  %column33 = fadd <4 x float> %leftColumn31, %rightColumn32, !gla.precision !33
  %22 = insertvalue [4 x <4 x float>] %21, <4 x float> %column33, 3, !gla.precision !33
  %23 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%T2 addrspace(2)* @__anon__0, i32 0, i32 1), !gla.uniform !29
  %24 = alloca [4 x <4 x float>]
  %25 = load [4 x <4 x float>]* %24
  %leftColumn34 = extractvalue [4 x <4 x float>] %22, 0, !gla.precision !33
  %rightColumn35 = extractvalue [4 x <4 x float>] %23, 0, !gla.precision !33
  %column36 = fadd <4 x float> %leftColumn34, %rightColumn35, !gla.precision !33
  %26 = insertvalue [4 x <4 x float>] %25, <4 x float> %column36, 0, !gla.precision !33
  %leftColumn37 = extractvalue [4 x <4 x float>] %22, 1, !gla.precision !33
  %rightColumn38 = extractvalue [4 x <4 x float>] %23, 1, !gla.precision !33
  %column39 = fadd <4 x float> %leftColumn37, %rightColumn38, !gla.precision !33
  %27 = insertvalue [4 x <4 x float>] %26, <4 x float> %column39, 1, !gla.precision !33
  %leftColumn40 = extractvalue [4 x <4 x float>] %22, 2, !gla.precision !33
  %rightColumn41 = extractvalue [4 x <4 x float>] %23, 2, !gla.precision !33
  %column42 = fadd <4 x float> %leftColumn40, %rightColumn41, !gla.precision !33
  %28 = insertvalue [4 x <4 x float>] %27, <4 x float> %column42, 2, !gla.precision !33
  %leftColumn43 = extractvalue [4 x <4 x float>] %22, 3, !gla.precision !33
  %rightColumn44 = extractvalue [4 x <4 x float>] %23, 3, !gla.precision !33
  %column45 = fadd <4 x float> %leftColumn43, %rightColumn44, !gla.precision !33
  %29 = insertvalue [4 x <4 x float>] %28, <4 x float> %column45, 3, !gla.precision !33
  %30 = alloca <4 x float>
  %31 = load <4 x float>* %30
  %column46 = extractvalue [4 x <4 x float>] %29, 0, !gla.precision !33
  %dot = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %column46), !gla.precision !33
  %32 = insertelement <4 x float> %31, float %dot, i32 0, !gla.precision !33
  %column47 = extractvalue [4 x <4 x float>] %29, 1, !gla.precision !33
  %dot48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %column47), !gla.precision !33
  %33 = insertelement <4 x float> %32, float %dot48, i32 1, !gla.precision !33
  %column49 = extractvalue [4 x <4 x float>] %29, 2, !gla.precision !33
  %dot50 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %column49), !gla.precision !33
  %34 = insertelement <4 x float> %33, float %dot50, i32 2, !gla.precision !33
  %column51 = extractvalue [4 x <4 x float>] %29, 3, !gla.precision !33
  %dot52 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %column51), !gla.precision !33
  %pos_shadow = insertelement <4 x float> %34, float %dot52, i32 3, !gla.precision !33
  store <4 x float> %pos_shadow, <4 x float>* @pos_shadow
  %c = call <3 x float> @llvm.gla.fReadData.v3f32(i32 7, i32 -1), !gla.input !13, !gla.precision !33
  store <3 x float> %c, <3 x float>* @c_shadow
  %35 = load <3 x float>* @c_shadow
  %36 = load [3 x <3 x float>] addrspace(2)* getelementptr inbounds (%Transform addrspace(2)* @tblock, i32 0, i32 2), !gla.uniform !17
  %37 = alloca <3 x float>
  %38 = load <3 x float>* %37
  %column53 = extractvalue [3 x <3 x float>] %36, 0, !gla.precision !33
  %dot54 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %35, <3 x float> %column53), !gla.precision !33
  %39 = insertelement <3 x float> %38, float %dot54, i32 0, !gla.precision !33
  %column55 = extractvalue [3 x <3 x float>] %36, 1, !gla.precision !33
  %dot56 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %35, <3 x float> %column55), !gla.precision !33
  %40 = insertelement <3 x float> %39, float %dot56, i32 1, !gla.precision !33
  %column57 = extractvalue [3 x <3 x float>] %36, 2, !gla.precision !33
  %dot58 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %35, <3 x float> %column57), !gla.precision !33
  %color_shadow = insertelement <3 x float> %40, float %dot58, i32 2, !gla.precision !33
  store <3 x float> %color_shadow, <3 x float>* @color_shadow
  %41 = load i32 addrspace(2)* getelementptr inbounds (%Transform addrspace(2)* @tblock, i32 0, i32 3), !gla.uniform !17
  %42 = load i32 addrspace(2)* @uiuin, !gla.uniform !31
  %43 = add i32 %41, %42, !gla.precision !33
  %aiv2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 9, i32 -1), !gla.input !15, !gla.precision !33
  store <2 x i32> %aiv2, <2 x i32>* @aiv2_shadow
  %44 = load <2 x i32>* @aiv2_shadow
  %45 = extractelement <2 x i32> %44, i32 1, !gla.precision !33
  %iout_shadow = add i32 %43, %45, !gla.precision !33
  store i32 %iout_shadow, i32* @iout_shadow
  %c59 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 7, i32 -1), !gla.input !13, !gla.precision !33
  store <3 x float> %c59, <3 x float>* @c_shadow
  %46 = load <3 x float>* @c_shadow
  store <3 x float> %46, <3 x float>* getelementptr inbounds (%S* @s_shadow, i32 0, i32 0)
  %p60 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 3, i32 -1), !gla.input !11, !gla.precision !33
  store <4 x float> %p60, <4 x float>* @p_shadow
  %47 = load <4 x float>* @p_shadow
  %48 = extractelement <4 x float> %47, i32 0, !gla.precision !33
  store float %48, float* getelementptr inbounds (%S* @s_shadow, i32 0, i32 1)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %49 = load <4 x float>* @pos_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %49), !gla.output !0
  %50 = load <3 x float>* @color_shadow
  call void @llvm.gla.fWriteData.v3f32(i32 1025, i32 -1, <3 x float> %50), !gla.output !2
  %51 = load i32* @iout_shadow
  call void @llvm.gla.writeData.i32(i32 1026, i32 -1, i32 %51), !gla.output !4
  %52 = load <3 x float>* getelementptr inbounds (%S* @s_shadow, i32 0, i32 0)
  call void @llvm.gla.fWriteData.v3f32(i32 1027, i32 -1, <3 x float> %52), !gla.output !6
  %53 = load float* getelementptr inbounds (%S* @s_shadow, i32 0, i32 1)
  call void @llvm.gla.fWriteData.f32(i32 1028, i32 -1, float %53), !gla.output !6
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) nounwind readonly

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare <2 x i32> @llvm.gla.readData.v2i32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare void @llvm.gla.fWriteData.v3f32(i32, i32, <3 x float>) nounwind

declare void @llvm.gla.writeData.i32(i32, i32, i32) nounwind

declare void @llvm.gla.fWriteData.f32(i32, i32, float) nounwind

!gla.outputs = !{!0, !2, !4, !6}
!gla.inputs = !{!11, !13, !15}
!gla.uniforms = !{!17, !26, !29, !31}

!0 = metadata !{metadata !"pos", i32 7, <4 x float>* @pos_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 3, i32 1024, null}
!2 = metadata !{metadata !"color", i32 7, <3 x float>* @color_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 3, i32 1025, null}
!4 = metadata !{metadata !"iout", i32 7, i32* @iout_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 3, i32 1026, null}
!6 = metadata !{metadata !"s", i32 7, %S* @s_shadow_typeProxy, metadata !7, metadata !8}
!7 = metadata !{i32 4, i32 0, i32 1027, null}
!8 = metadata !{metadata !"S", metadata !9, metadata !"c", metadata !10, metadata !"f", metadata !10}
!9 = metadata !{i32 4, i32 0, i32 1024, null}
!10 = metadata !{metadata !"", metadata !1}
!11 = metadata !{metadata !"p", i32 1, <4 x float>* @p_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 3, i32 3, null}
!13 = metadata !{metadata !"c", i32 1, <3 x float>* @c_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 3, i32 7, null}
!15 = metadata !{metadata !"aiv2", i32 1, <2 x i32>* @aiv2_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 3, i32 9, null}
!17 = metadata !{metadata !"tblock", i32 13, %Transform addrspace(2)* @tblock, metadata !18, metadata !19}
!18 = metadata !{i32 7, i32 0, i32 1024, null}
!19 = metadata !{metadata !"Transform", metadata !18, metadata !"M1", metadata !20, metadata !"M2", metadata !22, metadata !"N1", metadata !20, metadata !"iuin", metadata !24}
!20 = metadata !{metadata !"", metadata !21}
!21 = metadata !{i32 2, i32 0, i32 1024, null}
!22 = metadata !{metadata !"", metadata !23}
!23 = metadata !{i32 3, i32 0, i32 1024, null}
!24 = metadata !{metadata !"", metadata !25}
!25 = metadata !{i32 0, i32 0, i32 1024, null}
!26 = metadata !{metadata !"", i32 13, %T3 addrspace(2)* @__anon__1, metadata !27, metadata !28}
!27 = metadata !{i32 6, i32 0, i32 1024, null}
!28 = metadata !{metadata !"T3", metadata !27, metadata !"M3", metadata !22, metadata !"M4", metadata !20, metadata !"N2", metadata !22}
!29 = metadata !{metadata !"", i32 13, %T2 addrspace(2)* @__anon__0, metadata !27, metadata !30}
!30 = metadata !{metadata !"T2", metadata !27, metadata !"b", metadata !24, metadata !"t2m", metadata !20}
!31 = metadata !{metadata !"uiuin", i32 12, i32* @uiuin_typeProxy, metadata !32}
!32 = metadata !{i32 1, i32 3, i32 1024, null}
!33 = metadata !{i32 3}


Bottom IR:
; ModuleID = 'Top'

%Transform = type { [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], i32 }
%T3 = type { [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>] }
%T2 = type { i1, [4 x <4 x float>] }
%S = type { <3 x float>, float }

@tblock = external addrspace(2) constant %Transform
@__anon__1 = external addrspace(2) constant %T3
@__anon__0 = external addrspace(2) constant %T2
@uiuin = external addrspace(2) constant i32
@s_shadow = internal unnamed_addr global %S zeroinitializer

define fastcc void @main() {
entry:
  %p = call <4 x float> @llvm.gla.fReadData.v4f32(i32 3, i32 -1), !gla.input !11, !gla.precision !33
  %gla_constGEP = getelementptr %Transform addrspace(2)* @tblock, i32 0, i32 0
  %0 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP, align 16, !gla.uniform !17
  %gla_constGEP64 = getelementptr %Transform addrspace(2)* @tblock, i32 0, i32 1
  %1 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP64, align 16, !gla.uniform !17
  %gla_constGEP65 = getelementptr %T3 addrspace(2)* @__anon__1, i32 0, i32 1
  %2 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP65, align 16, !gla.uniform !26
  %gla_constGEP66 = getelementptr %T3 addrspace(2)* @__anon__1, i32 0, i32 0
  %3 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP66, align 16, !gla.uniform !26
  %gla_constGEP67 = getelementptr %T2 addrspace(2)* @__anon__0, i32 0, i32 1
  %4 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP67, align 16, !gla.uniform !29
  %c = call <3 x float> @llvm.gla.fReadData.v3f32(i32 7, i32 -1), !gla.input !13, !gla.precision !33
  %gla_constGEP68 = getelementptr %Transform addrspace(2)* @tblock, i32 0, i32 2
  %5 = load [3 x <3 x float>] addrspace(2)* %gla_constGEP68, align 16, !gla.uniform !17
  %gla_constGEP69 = getelementptr %Transform addrspace(2)* @tblock, i32 0, i32 3
  %6 = load i32 addrspace(2)* %gla_constGEP69, align 16, !gla.uniform !17
  %7 = load i32 addrspace(2)* @uiuin, align 4, !gla.uniform !31
  %aiv2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 9, i32 -1), !gla.input !15, !gla.precision !33
  %gla_constGEP70 = getelementptr %S* @s_shadow, i32 0, i32 0
  store <3 x float> %c, <3 x float>* %gla_constGEP70, align 16
  %p60 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 3, i32 -1), !gla.input !11, !gla.precision !33
  %8 = extractelement <4 x float> %p60, i32 0, !gla.precision !33
  %gla_constGEP71 = getelementptr %S* @s_shadow, i32 0, i32 1
  store float %8, float* %gla_constGEP71, align 16
  %rightColumn = extractvalue [4 x <4 x float>] %1, 0, !gla.precision !33
  %leftColumn = extractvalue [4 x <4 x float>] %0, 0, !gla.precision !33
  %rightColumn11 = extractvalue [4 x <4 x float>] %2, 0, !gla.precision !33
  %rightColumn2 = extractvalue [4 x <4 x float>] %1, 1, !gla.precision !33
  %leftColumn1 = extractvalue [4 x <4 x float>] %0, 1, !gla.precision !33
  %column = fadd <4 x float> %leftColumn, %rightColumn, !gla.precision !33
  %rightColumn23 = extractvalue [4 x <4 x float>] %3, 0, !gla.precision !33
  %rightColumn14 = extractvalue [4 x <4 x float>] %2, 1, !gla.precision !33
  %column12 = fadd <4 x float> %column, %rightColumn11, !gla.precision !33
  %rightColumn5 = extractvalue [4 x <4 x float>] %1, 2, !gla.precision !33
  %leftColumn4 = extractvalue [4 x <4 x float>] %0, 2, !gla.precision !33
  %column3 = fadd <4 x float> %leftColumn1, %rightColumn2, !gla.precision !33
  %rightColumn35 = extractvalue [4 x <4 x float>] %4, 0, !gla.precision !33
  %rightColumn26 = extractvalue [4 x <4 x float>] %3, 1, !gla.precision !33
  %column24 = fadd <4 x float> %column12, %rightColumn23, !gla.precision !33
  %rightColumn17 = extractvalue [4 x <4 x float>] %2, 2, !gla.precision !33
  %column15 = fadd <4 x float> %column3, %rightColumn14, !gla.precision !33
  %rightColumn8 = extractvalue [4 x <4 x float>] %1, 3, !gla.precision !33
  %leftColumn7 = extractvalue [4 x <4 x float>] %0, 3, !gla.precision !33
  %column6 = fadd <4 x float> %leftColumn4, %rightColumn5, !gla.precision !33
  %rightColumn38 = extractvalue [4 x <4 x float>] %4, 1, !gla.precision !33
  %column36 = fadd <4 x float> %column24, %rightColumn35, !gla.precision !33
  %rightColumn29 = extractvalue [4 x <4 x float>] %3, 2, !gla.precision !33
  %column27 = fadd <4 x float> %column15, %rightColumn26, !gla.precision !33
  %rightColumn20 = extractvalue [4 x <4 x float>] %2, 3, !gla.precision !33
  %column18 = fadd <4 x float> %column6, %rightColumn17, !gla.precision !33
  %column9 = fadd <4 x float> %leftColumn7, %rightColumn8, !gla.precision !33
  %column53 = extractvalue [3 x <3 x float>] %5, 0, !gla.precision !33
  %dot = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %p, <4 x float> %column36), !gla.precision !33
  %rightColumn41 = extractvalue [4 x <4 x float>] %4, 2, !gla.precision !33
  %column39 = fadd <4 x float> %column27, %rightColumn38, !gla.precision !33
  %rightColumn32 = extractvalue [4 x <4 x float>] %3, 3, !gla.precision !33
  %column30 = fadd <4 x float> %column18, %rightColumn29, !gla.precision !33
  %column21 = fadd <4 x float> %column9, %rightColumn20, !gla.precision !33
  %column55 = extractvalue [3 x <3 x float>] %5, 1, !gla.precision !33
  %dot54 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %c, <3 x float> %column53), !gla.precision !33
  %dot48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %p, <4 x float> %column39), !gla.precision !33
  %rightColumn44 = extractvalue [4 x <4 x float>] %4, 3, !gla.precision !33
  %column42 = fadd <4 x float> %column30, %rightColumn41, !gla.precision !33
  %column33 = fadd <4 x float> %column21, %rightColumn32, !gla.precision !33
  %column57 = extractvalue [3 x <3 x float>] %5, 2, !gla.precision !33
  %dot56 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %c, <3 x float> %column55), !gla.precision !33
  %dot50 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %p, <4 x float> %column42), !gla.precision !33
  %column45 = fadd <4 x float> %column33, %rightColumn44, !gla.precision !33
  %9 = extractelement <2 x i32> %aiv2, i32 1, !gla.precision !33
  %10 = add i32 %7, %6, !gla.precision !33
  %dot58 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %c, <3 x float> %column57), !gla.precision !33
  %dot52 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %p, <4 x float> %column45), !gla.precision !33
  %iout_shadow = add i32 %10, %9, !gla.precision !33
  %11 = call <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.f32.f32.f32.f32(<3 x float> undef, i32 7, float %dot54, i32 0, float %dot56, i32 0, float %dot58, i32 0, float undef, i32 undef)
  %12 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dot, i32 0, float %dot48, i32 0, float %dot50, i32 0, float %dot52, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %12), !gla.output !0
  call void @llvm.gla.fWriteData.v3f32(i32 1025, i32 -1, <3 x float> %11), !gla.output !2
  call void @llvm.gla.writeData.i32(i32 1026, i32 -1, i32 %iout_shadow), !gla.output !4
  %gla_constGEP72 = getelementptr %S* @s_shadow, i32 0, i32 0
  %13 = load <3 x float>* %gla_constGEP72, align 16
  call void @llvm.gla.fWriteData.v3f32(i32 1027, i32 -1, <3 x float> %13), !gla.output !6
  %gla_constGEP73 = getelementptr %S* @s_shadow, i32 0, i32 1
  %14 = load float* %gla_constGEP73, align 16
  call void @llvm.gla.fWriteData.f32(i32 1028, i32 -1, float %14), !gla.output !6
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) nounwind readonly

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare <2 x i32> @llvm.gla.readData.v2i32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare void @llvm.gla.fWriteData.v3f32(i32, i32, <3 x float>) nounwind

declare void @llvm.gla.writeData.i32(i32, i32, i32) nounwind

declare void @llvm.gla.fWriteData.f32(i32, i32, float) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.f32.f32.f32.f32(<3 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

!gla.outputs = !{!0, !2, !4, !6}
!gla.inputs = !{!11, !13, !15}
!gla.uniforms = !{!17, !26, !29, !31}

!0 = metadata !{metadata !"pos", i32 7, <4 x float>* @pos_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 3, i32 1024, null}
!2 = metadata !{metadata !"color", i32 7, <3 x float>* @color_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 3, i32 1025, null}
!4 = metadata !{metadata !"iout", i32 7, i32* @iout_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 3, i32 1026, null}
!6 = metadata !{metadata !"s", i32 7, %S* @s_shadow_typeProxy, metadata !7, metadata !8}
!7 = metadata !{i32 4, i32 0, i32 1027, null}
!8 = metadata !{metadata !"S", metadata !9, metadata !"c", metadata !10, metadata !"f", metadata !10}
!9 = metadata !{i32 4, i32 0, i32 1024, null}
!10 = metadata !{metadata !"", metadata !1}
!11 = metadata !{metadata !"p", i32 1, <4 x float>* @p_shadow_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 3, i32 3, null}
!13 = metadata !{metadata !"c", i32 1, <3 x float>* @c_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 3, i32 7, null}
!15 = metadata !{metadata !"aiv2", i32 1, <2 x i32>* @aiv2_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 3, i32 9, null}
!17 = metadata !{metadata !"tblock", i32 13, %Transform addrspace(2)* @tblock, metadata !18, metadata !19}
!18 = metadata !{i32 7, i32 0, i32 1024, null}
!19 = metadata !{metadata !"Transform", metadata !18, metadata !"M1", metadata !20, metadata !"M2", metadata !22, metadata !"N1", metadata !20, metadata !"iuin", metadata !24}
!20 = metadata !{metadata !"", metadata !21}
!21 = metadata !{i32 2, i32 0, i32 1024, null}
!22 = metadata !{metadata !"", metadata !23}
!23 = metadata !{i32 3, i32 0, i32 1024, null}
!24 = metadata !{metadata !"", metadata !25}
!25 = metadata !{i32 0, i32 0, i32 1024, null}
!26 = metadata !{metadata !"", i32 13, %T3 addrspace(2)* @__anon__1, metadata !27, metadata !28}
!27 = metadata !{i32 6, i32 0, i32 1024, null}
!28 = metadata !{metadata !"T3", metadata !27, metadata !"M3", metadata !22, metadata !"M4", metadata !20, metadata !"N2", metadata !22}
!29 = metadata !{metadata !"", i32 13, %T2 addrspace(2)* @__anon__0, metadata !27, metadata !30}
!30 = metadata !{metadata !"T2", metadata !27, metadata !"b", metadata !24, metadata !"t2m", metadata !20}
!31 = metadata !{metadata !"uiuin", i32 12, i32* @uiuin_typeProxy, metadata !32}
!32 = metadata !{i32 1, i32 3, i32 1024, null}
!33 = metadata !{i32 3}

***Unsupported functionality: missing metadata on load

***Unsupported functionality: missing metadata on load
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 300 es
// LunarGOO output (r722)
struct S {
    vec3 member0;
    float member1;
};

S s_shadow;
uniform layout(std140) Transform {
    layout(row_major) mat4 M1;
    mat4 M2;
    layout(row_major) mat3 N1;
    int iuin;
} tblock;
uniform T3 {
    mat4 M3;
    layout(row_major) mat4 M4;
    mat3 N2;
} ;
uniform T2 {
    bool b;
    layout(row_major) mat4 t2m;
} ;
uniform highp uint uiuin;
in layout(location=3) highp vec4 p;
in layout(location=7) highp vec3 c;
in layout(location=9) highp ivec2 aiv2;
out highp vec4 pos;
out highp vec3 color;
out highp int iout;
out S s;

void main()
{
    vec4[4] temp21 = tblock.M1;
    vec4[4] temp22 = tblock.M2;
    vec4[4] temp23 = M4;
    vec4[4] temp24 = M3;
    vec4[4] temp25 = t2m;
    vec3[3] temp26 = tblock.N1;
    int temp27 = tblock.iuin;
    s_shadow.member0 = c;
    s_shadow.member1 = p.x;
    highp vec4 rightColumn = temp22[0];
    highp vec4 leftColumn = temp21[0];
    highp vec4 rightColumn11 = temp23[0];
    highp vec4 rightColumn2 = temp22[1];
    highp vec4 leftColumn1 = temp21[1];
    highp vec4 column = leftColumn + rightColumn;
    highp vec4 rightColumn23 = temp24[0];
    highp vec4 rightColumn14 = temp23[1];
    highp vec4 column12 = column + rightColumn11;
    highp vec4 rightColumn5 = temp22[2];
    highp vec4 leftColumn4 = temp21[2];
    highp vec4 column3 = leftColumn1 + rightColumn2;
    highp vec4 rightColumn35 = temp25[0];
    highp vec4 rightColumn26 = temp24[1];
    highp vec4 column24 = column12 + rightColumn23;
    highp vec4 rightColumn17 = temp23[2];
    highp vec4 column15 = column3 + rightColumn14;
    highp vec4 rightColumn8 = temp22[3];
    highp vec4 leftColumn7 = temp21[3];
    highp vec4 column6 = leftColumn4 + rightColumn5;
    highp vec4 rightColumn38 = temp25[1];
    highp vec4 column36 = column24 + rightColumn35;
    highp vec4 rightColumn29 = temp24[2];
    highp vec4 column27 = column15 + rightColumn26;
    highp vec4 rightColumn20 = temp23[3];
    highp vec4 column18 = column6 + rightColumn17;
    highp vec4 column9 = leftColumn7 + rightColumn8;
    highp vec3 column53 = temp26[0];
    highp float dot = dot(p, column36);
    highp vec4 rightColumn41 = temp25[2];
    highp vec4 column39 = column27 + rightColumn38;
    highp vec4 rightColumn32 = temp24[3];
    highp vec4 column30 = column18 + rightColumn29;
    highp vec4 column21 = column9 + rightColumn20;
    highp vec3 column55 = temp26[1];
    highp float dot54 = dot(c, column53);
    highp float dot48 = dot(p, column39);
    highp vec4 rightColumn44 = temp25[3];
    highp vec4 column42 = column30 + rightColumn41;
    highp vec4 column33 = column21 + rightColumn32;
    highp vec3 column57 = temp26[2];
    highp float dot56 = dot(c, column55);
    highp float dot50 = dot(p, column42);
    highp vec4 column45 = column33 + rightColumn44;
    highp int temp72 = uiuin + temp27;
    highp float dot58 = dot(c, column57);
    highp float dot52 = dot(p, column45);
    highp int iout_shadow = temp72 + aiv2.y;
    vec3 temp76;
    temp76.xyz = vec3(dot54, dot56, dot58);
    vec4 temp77 = vec4(dot, dot48, dot50, dot52);
    pos = temp77;
    color = temp76;
    iout = iout_shadow;
    vec3 temp78 = s_shadow.member0;
    s.c = temp78;
    float temp79 = s_shadow.member1;
    s.f = temp79;
    
}

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
ERROR: Not all shaders have valid object code.
#### END LINKER INFO LOG ####
