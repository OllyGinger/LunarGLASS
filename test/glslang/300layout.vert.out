
Top IR:
; ModuleID = 'Top'

%Transform = type { [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], i32 }
%T3 = type { [4 x <4 x float>], [4 x <4 x float>], [2 x <3 x float>], [4 x <3 x i32>] }
%T2 = type { i1, [4 x <4 x float>] }
%S = type { <3 x float>, float }

@pos_shadow = internal global <4 x float> zeroinitializer
@p_shadow = internal global <4 x float> zeroinitializer
@tblock = external addrspace(2) constant %Transform
@__anon__1 = external addrspace(2) constant %T3
@__anon__0 = external addrspace(2) constant %T2
@color_shadow = internal global <3 x float> zeroinitializer
@c_shadow = internal global <3 x float> zeroinitializer
@iout_shadow = internal global i32 0
@uiuin = external addrspace(2) constant i32
@aiv2_shadow = internal global <2 x i32> zeroinitializer
@s_shadow = internal global %S zeroinitializer
@VertexID_shadow = internal global i32 0
@InstanceID_shadow = internal global i32 0

define fastcc void @main() {
entry:
  %p = call <4 x float> @llvm.gla.fReadData.v4f32(i32 3, i32 -1), !gla.input !13, !gla.precision !40
  store <4 x float> %p, <4 x float>* @p_shadow
  %0 = load <4 x float>* @p_shadow
  %1 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%Transform addrspace(2)* @tblock, i32 0, i32 0), !gla.uniform !23
  %2 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%Transform addrspace(2)* @tblock, i32 0, i32 1), !gla.uniform !23
  %3 = alloca [4 x <4 x float>]
  %4 = load [4 x <4 x float>]* %3
  %leftColumn = extractvalue [4 x <4 x float>] %1, 0, !gla.precision !40
  %rightColumn = extractvalue [4 x <4 x float>] %2, 0, !gla.precision !40
  %column = fadd <4 x float> %leftColumn, %rightColumn, !gla.precision !40
  %5 = insertvalue [4 x <4 x float>] %4, <4 x float> %column, 0, !gla.precision !40
  %leftColumn1 = extractvalue [4 x <4 x float>] %1, 1, !gla.precision !40
  %rightColumn2 = extractvalue [4 x <4 x float>] %2, 1, !gla.precision !40
  %column3 = fadd <4 x float> %leftColumn1, %rightColumn2, !gla.precision !40
  %6 = insertvalue [4 x <4 x float>] %5, <4 x float> %column3, 1, !gla.precision !40
  %leftColumn4 = extractvalue [4 x <4 x float>] %1, 2, !gla.precision !40
  %rightColumn5 = extractvalue [4 x <4 x float>] %2, 2, !gla.precision !40
  %column6 = fadd <4 x float> %leftColumn4, %rightColumn5, !gla.precision !40
  %7 = insertvalue [4 x <4 x float>] %6, <4 x float> %column6, 2, !gla.precision !40
  %leftColumn7 = extractvalue [4 x <4 x float>] %1, 3, !gla.precision !40
  %rightColumn8 = extractvalue [4 x <4 x float>] %2, 3, !gla.precision !40
  %column9 = fadd <4 x float> %leftColumn7, %rightColumn8, !gla.precision !40
  %8 = insertvalue [4 x <4 x float>] %7, <4 x float> %column9, 3, !gla.precision !40
  %9 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%T3 addrspace(2)* @__anon__1, i32 0, i32 1), !gla.uniform !30
  %10 = alloca [4 x <4 x float>]
  %11 = load [4 x <4 x float>]* %10
  %leftColumn10 = extractvalue [4 x <4 x float>] %8, 0, !gla.precision !40
  %rightColumn11 = extractvalue [4 x <4 x float>] %9, 0, !gla.precision !40
  %column12 = fadd <4 x float> %leftColumn10, %rightColumn11, !gla.precision !40
  %12 = insertvalue [4 x <4 x float>] %11, <4 x float> %column12, 0, !gla.precision !40
  %leftColumn13 = extractvalue [4 x <4 x float>] %8, 1, !gla.precision !40
  %rightColumn14 = extractvalue [4 x <4 x float>] %9, 1, !gla.precision !40
  %column15 = fadd <4 x float> %leftColumn13, %rightColumn14, !gla.precision !40
  %13 = insertvalue [4 x <4 x float>] %12, <4 x float> %column15, 1, !gla.precision !40
  %leftColumn16 = extractvalue [4 x <4 x float>] %8, 2, !gla.precision !40
  %rightColumn17 = extractvalue [4 x <4 x float>] %9, 2, !gla.precision !40
  %column18 = fadd <4 x float> %leftColumn16, %rightColumn17, !gla.precision !40
  %14 = insertvalue [4 x <4 x float>] %13, <4 x float> %column18, 2, !gla.precision !40
  %leftColumn19 = extractvalue [4 x <4 x float>] %8, 3, !gla.precision !40
  %rightColumn20 = extractvalue [4 x <4 x float>] %9, 3, !gla.precision !40
  %column21 = fadd <4 x float> %leftColumn19, %rightColumn20, !gla.precision !40
  %15 = insertvalue [4 x <4 x float>] %14, <4 x float> %column21, 3, !gla.precision !40
  %16 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%T3 addrspace(2)* @__anon__1, i32 0, i32 0), !gla.uniform !30
  %17 = alloca [4 x <4 x float>]
  %18 = load [4 x <4 x float>]* %17
  %leftColumn22 = extractvalue [4 x <4 x float>] %15, 0, !gla.precision !40
  %rightColumn23 = extractvalue [4 x <4 x float>] %16, 0, !gla.precision !40
  %column24 = fadd <4 x float> %leftColumn22, %rightColumn23, !gla.precision !40
  %19 = insertvalue [4 x <4 x float>] %18, <4 x float> %column24, 0, !gla.precision !40
  %leftColumn25 = extractvalue [4 x <4 x float>] %15, 1, !gla.precision !40
  %rightColumn26 = extractvalue [4 x <4 x float>] %16, 1, !gla.precision !40
  %column27 = fadd <4 x float> %leftColumn25, %rightColumn26, !gla.precision !40
  %20 = insertvalue [4 x <4 x float>] %19, <4 x float> %column27, 1, !gla.precision !40
  %leftColumn28 = extractvalue [4 x <4 x float>] %15, 2, !gla.precision !40
  %rightColumn29 = extractvalue [4 x <4 x float>] %16, 2, !gla.precision !40
  %column30 = fadd <4 x float> %leftColumn28, %rightColumn29, !gla.precision !40
  %21 = insertvalue [4 x <4 x float>] %20, <4 x float> %column30, 2, !gla.precision !40
  %leftColumn31 = extractvalue [4 x <4 x float>] %15, 3, !gla.precision !40
  %rightColumn32 = extractvalue [4 x <4 x float>] %16, 3, !gla.precision !40
  %column33 = fadd <4 x float> %leftColumn31, %rightColumn32, !gla.precision !40
  %22 = insertvalue [4 x <4 x float>] %21, <4 x float> %column33, 3, !gla.precision !40
  %23 = load [4 x <4 x float>] addrspace(2)* getelementptr inbounds (%T2 addrspace(2)* @__anon__0, i32 0, i32 1), !gla.uniform !35
  %24 = alloca [4 x <4 x float>]
  %25 = load [4 x <4 x float>]* %24
  %leftColumn34 = extractvalue [4 x <4 x float>] %22, 0, !gla.precision !40
  %rightColumn35 = extractvalue [4 x <4 x float>] %23, 0, !gla.precision !40
  %column36 = fadd <4 x float> %leftColumn34, %rightColumn35, !gla.precision !40
  %26 = insertvalue [4 x <4 x float>] %25, <4 x float> %column36, 0, !gla.precision !40
  %leftColumn37 = extractvalue [4 x <4 x float>] %22, 1, !gla.precision !40
  %rightColumn38 = extractvalue [4 x <4 x float>] %23, 1, !gla.precision !40
  %column39 = fadd <4 x float> %leftColumn37, %rightColumn38, !gla.precision !40
  %27 = insertvalue [4 x <4 x float>] %26, <4 x float> %column39, 1, !gla.precision !40
  %leftColumn40 = extractvalue [4 x <4 x float>] %22, 2, !gla.precision !40
  %rightColumn41 = extractvalue [4 x <4 x float>] %23, 2, !gla.precision !40
  %column42 = fadd <4 x float> %leftColumn40, %rightColumn41, !gla.precision !40
  %28 = insertvalue [4 x <4 x float>] %27, <4 x float> %column42, 2, !gla.precision !40
  %leftColumn43 = extractvalue [4 x <4 x float>] %22, 3, !gla.precision !40
  %rightColumn44 = extractvalue [4 x <4 x float>] %23, 3, !gla.precision !40
  %column45 = fadd <4 x float> %leftColumn43, %rightColumn44, !gla.precision !40
  %29 = insertvalue [4 x <4 x float>] %28, <4 x float> %column45, 3, !gla.precision !40
  %30 = alloca <4 x float>
  %31 = load <4 x float>* %30
  %column46 = extractvalue [4 x <4 x float>] %29, 0, !gla.precision !40
  %dot = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %column46), !gla.precision !40
  %32 = insertelement <4 x float> %31, float %dot, i32 0, !gla.precision !40
  %column47 = extractvalue [4 x <4 x float>] %29, 1, !gla.precision !40
  %dot48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %column47), !gla.precision !40
  %33 = insertelement <4 x float> %32, float %dot48, i32 1, !gla.precision !40
  %column49 = extractvalue [4 x <4 x float>] %29, 2, !gla.precision !40
  %dot50 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %column49), !gla.precision !40
  %34 = insertelement <4 x float> %33, float %dot50, i32 2, !gla.precision !40
  %column51 = extractvalue [4 x <4 x float>] %29, 3, !gla.precision !40
  %dot52 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %0, <4 x float> %column51), !gla.precision !40
  %pos_shadow = insertelement <4 x float> %34, float %dot52, i32 3, !gla.precision !40
  store <4 x float> %pos_shadow, <4 x float>* @pos_shadow
  %c = call <3 x float> @llvm.gla.fReadData.v3f32(i32 7, i32 -1), !gla.input !15, !gla.precision !40
  store <3 x float> %c, <3 x float>* @c_shadow
  %35 = load <3 x float>* @c_shadow
  %36 = load [3 x <3 x float>] addrspace(2)* getelementptr inbounds (%Transform addrspace(2)* @tblock, i32 0, i32 2), !gla.uniform !23
  %37 = alloca <3 x float>
  %38 = load <3 x float>* %37
  %column53 = extractvalue [3 x <3 x float>] %36, 0, !gla.precision !40
  %dot54 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %35, <3 x float> %column53), !gla.precision !40
  %39 = insertelement <3 x float> %38, float %dot54, i32 0, !gla.precision !40
  %column55 = extractvalue [3 x <3 x float>] %36, 1, !gla.precision !40
  %dot56 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %35, <3 x float> %column55), !gla.precision !40
  %40 = insertelement <3 x float> %39, float %dot56, i32 1, !gla.precision !40
  %column57 = extractvalue [3 x <3 x float>] %36, 2, !gla.precision !40
  %dot58 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %35, <3 x float> %column57), !gla.precision !40
  %color_shadow = insertelement <3 x float> %40, float %dot58, i32 2, !gla.precision !40
  store <3 x float> %color_shadow, <3 x float>* @color_shadow
  %41 = load i32 addrspace(2)* getelementptr inbounds (%Transform addrspace(2)* @tblock, i32 0, i32 3), !gla.uniform !23
  %42 = load i32 addrspace(2)* @uiuin, !gla.uniform !39
  %43 = add i32 %41, %42, !gla.precision !40
  %aiv2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 9, i32 -1), !gla.input !17, !gla.precision !40
  store <2 x i32> %aiv2, <2 x i32>* @aiv2_shadow
  %44 = load <2 x i32>* @aiv2_shadow
  %45 = extractelement <2 x i32> %44, i32 1, !gla.precision !40
  %iout_shadow = add i32 %43, %45, !gla.precision !40
  store i32 %iout_shadow, i32* @iout_shadow
  %c59 = call <3 x float> @llvm.gla.fReadData.v3f32(i32 7, i32 -1), !gla.input !15, !gla.precision !40
  store <3 x float> %c59, <3 x float>* @c_shadow
  %46 = load <3 x float>* @c_shadow
  store <3 x float> %46, <3 x float>* getelementptr inbounds (%S* @s_shadow, i32 0, i32 0)
  %p60 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 3, i32 -1), !gla.input !13, !gla.precision !40
  store <4 x float> %p60, <4 x float>* @p_shadow
  %47 = load <4 x float>* @p_shadow
  %48 = extractelement <4 x float> %47, i32 0, !gla.precision !40
  store float %48, float* getelementptr inbounds (%S* @s_shadow, i32 0, i32 1)
  %49 = load <3 x float> addrspace(2)* getelementptr inbounds (%T3 addrspace(2)* @__anon__1, i32 0, i32 2, i32 1), !gla.uniform !30
  %50 = fcmp one <3 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = call i1 @llvm.gla.any.v3i1(<3 x i1> %50)
  %52 = load <3 x i32> addrspace(2)* getelementptr inbounds (%T3 addrspace(2)* @__anon__1, i32 0, i32 3, i32 2), !gla.uniform !30
  %53 = icmp ne <3 x i32> %52, <i32 5, i32 5, i32 5>
  %54 = call i1 @llvm.gla.any.v3i1(<3 x i1> %53)
  %55 = or i1 %51, %54
  br i1 %55, label %then, label %ifmerge

then:                                             ; preds = %entry
  %56 = load <3 x float>* getelementptr inbounds (%S* @s_shadow, i32 0, i32 0)
  %57 = fadd <3 x float> %56, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !gla.precision !40
  store <3 x float> %57, <3 x float>* getelementptr inbounds (%S* @s_shadow, i32 0, i32 0)
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %then
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %58 = load <4 x float>* @pos_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %58), !gla.output !1
  %59 = load <3 x float>* @color_shadow
  call void @llvm.gla.fWriteData.v3f32(i32 1025, i32 -1, <3 x float> %59), !gla.output !3
  %60 = load i32* @iout_shadow
  call void @llvm.gla.writeData.i32(i32 1026, i32 -1, i32 %60), !gla.output !5
  %61 = load <3 x float>* getelementptr inbounds (%S* @s_shadow, i32 0, i32 0)
  call void @llvm.gla.fWriteData.v3f32(i32 1027, i32 -1, <3 x float> %61), !gla.output !7
  %62 = load float* getelementptr inbounds (%S* @s_shadow, i32 0, i32 1)
  call void @llvm.gla.fWriteData.f32(i32 1028, i32 -1, float %62), !gla.output !7
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) nounwind readonly

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare <2 x i32> @llvm.gla.readData.v2i32(i32, i32) nounwind readonly

declare i1 @llvm.gla.any.v3i1(<3 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare void @llvm.gla.fWriteData.v3f32(i32, i32, <3 x float>) nounwind

declare void @llvm.gla.writeData.i32(i32, i32, i32) nounwind

declare void @llvm.gla.fWriteData.f32(i32, i32, float) nounwind

!gla.entrypoint = !{!0}
!gla.outputs = !{!1, !3, !5, !7}
!gla.inputs = !{!13, !15, !17, !19, !21}
!gla.uniforms = !{!23, !30, !35, !39}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"pos", i32 7, <4 x float>* @pos_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 3, i32 1024, null, i32 1}
!3 = metadata !{metadata !"color", i32 7, <3 x float>* @color_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 3, i32 1025, null, i32 1}
!5 = metadata !{metadata !"iout", i32 7, i32* @iout_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 3, i32 1026, null, i32 0}
!7 = metadata !{metadata !"s", i32 7, %S* @s_shadow_typeProxy, metadata !8, metadata !9}
!8 = metadata !{i32 4, i32 0, i32 1027, null, i32 1}
!9 = metadata !{metadata !"S", metadata !10, metadata !"c", metadata !11, metadata !"f", metadata !11}
!10 = metadata !{i32 4, i32 0, i32 1024, null}
!11 = metadata !{metadata !"", metadata !12}
!12 = metadata !{i32 0, i32 3, i32 1024, null}
!13 = metadata !{metadata !"p", i32 1, <4 x float>* @p_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 3, i32 3, null, i32 0}
!15 = metadata !{metadata !"c", i32 1, <3 x float>* @c_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 3, i32 7, null, i32 0}
!17 = metadata !{metadata !"aiv2", i32 1, <2 x i32>* @aiv2_shadow_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 3, i32 9, null, i32 0}
!19 = metadata !{metadata !"gl_VertexID", i32 2, i32* @VertexID_shadow_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 3, i32 1028, null, i32 0}
!21 = metadata !{metadata !"gl_InstanceID", i32 3, i32* @InstanceID_shadow_typeProxy, metadata !22}
!22 = metadata !{i32 0, i32 3, i32 1029, null, i32 0}
!23 = metadata !{metadata !"tblock", i32 13, %Transform* @tblock_typeProxy, metadata !24, metadata !25}
!24 = metadata !{i32 7, i32 0, i32 1024, null}
!25 = metadata !{metadata !"Transform", metadata !24, metadata !"M1", metadata !26, metadata !"M2", metadata !28, metadata !"N1", metadata !26, metadata !"iuin", metadata !11}
!26 = metadata !{metadata !"", metadata !27}
!27 = metadata !{i32 2, i32 3, i32 1024, null}
!28 = metadata !{metadata !"", metadata !29}
!29 = metadata !{i32 3, i32 3, i32 1024, null}
!30 = metadata !{metadata !"", i32 13, %T3* @__anon__1_typeProxy, metadata !31, metadata !32}
!31 = metadata !{i32 6, i32 0, i32 1024, null}
!32 = metadata !{metadata !"T3", metadata !31, metadata !"M3", metadata !28, metadata !"M4", metadata !26, metadata !"N2", metadata !28, metadata !"uv3a", metadata !33}
!33 = metadata !{metadata !"", metadata !34}
!34 = metadata !{i32 1, i32 3, i32 1024, null}
!35 = metadata !{metadata !"", i32 13, %T2* @__anon__0_typeProxy, metadata !31, metadata !36}
!36 = metadata !{metadata !"T2", metadata !31, metadata !"b", metadata !37, metadata !"t2m", metadata !26}
!37 = metadata !{metadata !"", metadata !38}
!38 = metadata !{i32 0, i32 0, i32 1024, null}
!39 = metadata !{metadata !"uiuin", i32 12, i32* @uiuin_typeProxy, metadata !34}
!40 = metadata !{i32 3}


Bottom IR:
; ModuleID = 'Top'

%Transform = type { [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], i32 }
%T3 = type { [4 x <4 x float>], [4 x <4 x float>], [2 x <3 x float>], [4 x <3 x i32>] }
%T2 = type { i1, [4 x <4 x float>] }
%S = type { <3 x float>, float }

@tblock = external addrspace(2) constant %Transform
@__anon__1 = external addrspace(2) constant %T3
@__anon__0 = external addrspace(2) constant %T2
@uiuin = external addrspace(2) constant i32
@s_shadow = internal unnamed_addr global %S zeroinitializer

define fastcc void @main() {
entry:
  %p = call <4 x float> @llvm.gla.fReadData.v4f32(i32 3, i32 -1), !gla.input !13, !gla.precision !40
  %gla_constGEP = getelementptr %Transform addrspace(2)* @tblock, i32 0, i32 0
  %0 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP, align 16, !gla.uniform !23
  %gla_constGEP64 = getelementptr %Transform addrspace(2)* @tblock, i32 0, i32 1
  %1 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP64, align 16, !gla.uniform !23
  %leftColumn = extractvalue [4 x <4 x float>] %0, 0, !gla.precision !40
  %rightColumn = extractvalue [4 x <4 x float>] %1, 0, !gla.precision !40
  %column = fadd <4 x float> %leftColumn, %rightColumn, !gla.precision !40
  %leftColumn1 = extractvalue [4 x <4 x float>] %0, 1, !gla.precision !40
  %rightColumn2 = extractvalue [4 x <4 x float>] %1, 1, !gla.precision !40
  %column3 = fadd <4 x float> %leftColumn1, %rightColumn2, !gla.precision !40
  %leftColumn4 = extractvalue [4 x <4 x float>] %0, 2, !gla.precision !40
  %rightColumn5 = extractvalue [4 x <4 x float>] %1, 2, !gla.precision !40
  %column6 = fadd <4 x float> %leftColumn4, %rightColumn5, !gla.precision !40
  %leftColumn7 = extractvalue [4 x <4 x float>] %0, 3, !gla.precision !40
  %rightColumn8 = extractvalue [4 x <4 x float>] %1, 3, !gla.precision !40
  %column9 = fadd <4 x float> %leftColumn7, %rightColumn8, !gla.precision !40
  %gla_constGEP65 = getelementptr %T3 addrspace(2)* @__anon__1, i32 0, i32 1
  %2 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP65, align 16, !gla.uniform !30
  %rightColumn11 = extractvalue [4 x <4 x float>] %2, 0, !gla.precision !40
  %column12 = fadd <4 x float> %column, %rightColumn11, !gla.precision !40
  %rightColumn14 = extractvalue [4 x <4 x float>] %2, 1, !gla.precision !40
  %column15 = fadd <4 x float> %column3, %rightColumn14, !gla.precision !40
  %rightColumn17 = extractvalue [4 x <4 x float>] %2, 2, !gla.precision !40
  %column18 = fadd <4 x float> %column6, %rightColumn17, !gla.precision !40
  %rightColumn20 = extractvalue [4 x <4 x float>] %2, 3, !gla.precision !40
  %column21 = fadd <4 x float> %column9, %rightColumn20, !gla.precision !40
  %gla_constGEP66 = getelementptr %T3 addrspace(2)* @__anon__1, i32 0, i32 0
  %3 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP66, align 16, !gla.uniform !30
  %rightColumn23 = extractvalue [4 x <4 x float>] %3, 0, !gla.precision !40
  %column24 = fadd <4 x float> %column12, %rightColumn23, !gla.precision !40
  %rightColumn26 = extractvalue [4 x <4 x float>] %3, 1, !gla.precision !40
  %column27 = fadd <4 x float> %column15, %rightColumn26, !gla.precision !40
  %rightColumn29 = extractvalue [4 x <4 x float>] %3, 2, !gla.precision !40
  %column30 = fadd <4 x float> %column18, %rightColumn29, !gla.precision !40
  %rightColumn32 = extractvalue [4 x <4 x float>] %3, 3, !gla.precision !40
  %column33 = fadd <4 x float> %column21, %rightColumn32, !gla.precision !40
  %gla_constGEP67 = getelementptr %T2 addrspace(2)* @__anon__0, i32 0, i32 1
  %4 = load [4 x <4 x float>] addrspace(2)* %gla_constGEP67, align 16, !gla.uniform !35
  %rightColumn35 = extractvalue [4 x <4 x float>] %4, 0, !gla.precision !40
  %column36 = fadd <4 x float> %column24, %rightColumn35, !gla.precision !40
  %rightColumn38 = extractvalue [4 x <4 x float>] %4, 1, !gla.precision !40
  %column39 = fadd <4 x float> %column27, %rightColumn38, !gla.precision !40
  %rightColumn41 = extractvalue [4 x <4 x float>] %4, 2, !gla.precision !40
  %column42 = fadd <4 x float> %column30, %rightColumn41, !gla.precision !40
  %rightColumn44 = extractvalue [4 x <4 x float>] %4, 3, !gla.precision !40
  %column45 = fadd <4 x float> %column33, %rightColumn44, !gla.precision !40
  %dot = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %p, <4 x float> %column36), !gla.precision !40
  %dot48 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %p, <4 x float> %column39), !gla.precision !40
  %dot50 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %p, <4 x float> %column42), !gla.precision !40
  %dot52 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %p, <4 x float> %column45), !gla.precision !40
  %5 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dot, i32 0, float %dot48, i32 0, float %dot50, i32 0, float %dot52, i32 0)
  %c = call <3 x float> @llvm.gla.fReadData.v3f32(i32 7, i32 -1), !gla.input !15, !gla.precision !40
  %gla_constGEP68 = getelementptr %Transform addrspace(2)* @tblock, i32 0, i32 2
  %6 = load [3 x <3 x float>] addrspace(2)* %gla_constGEP68, align 16, !gla.uniform !23
  %column53 = extractvalue [3 x <3 x float>] %6, 0, !gla.precision !40
  %dot54 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %c, <3 x float> %column53), !gla.precision !40
  %column55 = extractvalue [3 x <3 x float>] %6, 1, !gla.precision !40
  %dot56 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %c, <3 x float> %column55), !gla.precision !40
  %column57 = extractvalue [3 x <3 x float>] %6, 2, !gla.precision !40
  %dot58 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %c, <3 x float> %column57), !gla.precision !40
  %7 = call <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.f32.f32.f32.f32(<3 x float> undef, i32 7, float %dot54, i32 0, float %dot56, i32 0, float %dot58, i32 0, float undef, i32 undef)
  %gla_constGEP69 = getelementptr %Transform addrspace(2)* @tblock, i32 0, i32 3
  %8 = load i32 addrspace(2)* %gla_constGEP69, align 16, !gla.uniform !23
  %9 = load i32 addrspace(2)* @uiuin, align 4, !gla.uniform !39
  %10 = add i32 %9, %8, !gla.precision !40
  %aiv2 = call <2 x i32> @llvm.gla.readData.v2i32(i32 9, i32 -1), !gla.input !17, !gla.precision !40
  %11 = extractelement <2 x i32> %aiv2, i32 1, !gla.precision !40
  %iout_shadow = add i32 %10, %11, !gla.precision !40
  %gla_constGEP70 = getelementptr %S* @s_shadow, i32 0, i32 0
  store <3 x float> %c, <3 x float>* %gla_constGEP70, align 16
  %p60 = call <4 x float> @llvm.gla.fReadData.v4f32(i32 3, i32 -1), !gla.input !13, !gla.precision !40
  %12 = extractelement <4 x float> %p60, i32 0, !gla.precision !40
  %gla_constGEP71 = getelementptr %S* @s_shadow, i32 0, i32 1
  store float %12, float* %gla_constGEP71, align 16
  %gla_constGEP72 = getelementptr %T3 addrspace(2)* @__anon__1, i32 0, i32 2, i32 1
  %13 = load <3 x float> addrspace(2)* %gla_constGEP72, align 16, !gla.uniform !30
  %14 = fcmp one <3 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %15 = call i1 @llvm.gla.any.v3i1(<3 x i1> %14)
  %gla_constGEP73 = getelementptr %T3 addrspace(2)* @__anon__1, i32 0, i32 3, i32 2
  %16 = load <3 x i32> addrspace(2)* %gla_constGEP73, align 16, !gla.uniform !30
  %17 = icmp ne <3 x i32> %16, <i32 5, i32 5, i32 5>
  %18 = call i1 @llvm.gla.any.v3i1(<3 x i1> %17)
  %19 = or i1 %15, %18
  br i1 %19, label %then, label %ifmerge

then:                                             ; preds = %entry
  %20 = fadd <3 x float> %c, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !gla.precision !40
  %gla_constGEP74 = getelementptr %S* @s_shadow, i32 0, i32 0
  store <3 x float> %20, <3 x float>* %gla_constGEP74, align 16
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %then
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %5), !gla.output !1
  call void @llvm.gla.fWriteData.v3f32(i32 1025, i32 -1, <3 x float> %7), !gla.output !3
  call void @llvm.gla.writeData.i32(i32 1026, i32 -1, i32 %iout_shadow), !gla.output !5
  %gla_constGEP75 = getelementptr %S* @s_shadow, i32 0, i32 0
  %21 = load <3 x float>* %gla_constGEP75, align 16
  call void @llvm.gla.fWriteData.v3f32(i32 1027, i32 -1, <3 x float> %21), !gla.output !7
  %gla_constGEP76 = getelementptr %S* @s_shadow, i32 0, i32 1
  %22 = load float* %gla_constGEP76, align 16
  call void @llvm.gla.fWriteData.f32(i32 1028, i32 -1, float %22), !gla.output !7
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) nounwind readonly

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare <2 x i32> @llvm.gla.readData.v2i32(i32, i32) nounwind readonly

declare i1 @llvm.gla.any.v3i1(<3 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare void @llvm.gla.fWriteData.v3f32(i32, i32, <3 x float>) nounwind

declare void @llvm.gla.writeData.i32(i32, i32, i32) nounwind

declare void @llvm.gla.fWriteData.f32(i32, i32, float) nounwind

declare <3 x float> @llvm.gla.fMultiInsert.v3f32.v3f32.f32.f32.f32.f32(<3 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

!gla.entrypoint = !{!0}
!gla.outputs = !{!1, !3, !5, !7}
!gla.inputs = !{!13, !15, !17, !19, !21}
!gla.uniforms = !{!23, !30, !35, !39}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"pos", i32 7, <4 x float>* @pos_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 3, i32 1024, null, i32 1}
!3 = metadata !{metadata !"color", i32 7, <3 x float>* @color_shadow_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 3, i32 1025, null, i32 1}
!5 = metadata !{metadata !"iout", i32 7, i32* @iout_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 3, i32 1026, null, i32 0}
!7 = metadata !{metadata !"s", i32 7, %S* @s_shadow_typeProxy, metadata !8, metadata !9}
!8 = metadata !{i32 4, i32 0, i32 1027, null, i32 1}
!9 = metadata !{metadata !"S", metadata !10, metadata !"c", metadata !11, metadata !"f", metadata !11}
!10 = metadata !{i32 4, i32 0, i32 1024, null}
!11 = metadata !{metadata !"", metadata !12}
!12 = metadata !{i32 0, i32 3, i32 1024, null}
!13 = metadata !{metadata !"p", i32 1, <4 x float>* @p_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 3, i32 3, null, i32 0}
!15 = metadata !{metadata !"c", i32 1, <3 x float>* @c_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 3, i32 7, null, i32 0}
!17 = metadata !{metadata !"aiv2", i32 1, <2 x i32>* @aiv2_shadow_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 3, i32 9, null, i32 0}
!19 = metadata !{metadata !"gl_VertexID", i32 2, i32* @VertexID_shadow_typeProxy, metadata !20}
!20 = metadata !{i32 0, i32 3, i32 1028, null, i32 0}
!21 = metadata !{metadata !"gl_InstanceID", i32 3, i32* @InstanceID_shadow_typeProxy, metadata !22}
!22 = metadata !{i32 0, i32 3, i32 1029, null, i32 0}
!23 = metadata !{metadata !"tblock", i32 13, %Transform* @tblock_typeProxy, metadata !24, metadata !25}
!24 = metadata !{i32 7, i32 0, i32 1024, null}
!25 = metadata !{metadata !"Transform", metadata !24, metadata !"M1", metadata !26, metadata !"M2", metadata !28, metadata !"N1", metadata !26, metadata !"iuin", metadata !11}
!26 = metadata !{metadata !"", metadata !27}
!27 = metadata !{i32 2, i32 3, i32 1024, null}
!28 = metadata !{metadata !"", metadata !29}
!29 = metadata !{i32 3, i32 3, i32 1024, null}
!30 = metadata !{metadata !"", i32 13, %T3* @__anon__1_typeProxy, metadata !31, metadata !32}
!31 = metadata !{i32 6, i32 0, i32 1024, null}
!32 = metadata !{metadata !"T3", metadata !31, metadata !"M3", metadata !28, metadata !"M4", metadata !26, metadata !"N2", metadata !28, metadata !"uv3a", metadata !33}
!33 = metadata !{metadata !"", metadata !34}
!34 = metadata !{i32 1, i32 3, i32 1024, null}
!35 = metadata !{metadata !"", i32 13, %T2* @__anon__0_typeProxy, metadata !31, metadata !36}
!36 = metadata !{metadata !"T2", metadata !31, metadata !"b", metadata !37, metadata !"t2m", metadata !26}
!37 = metadata !{metadata !"", metadata !38}
!38 = metadata !{i32 0, i32 0, i32 1024, null}
!39 = metadata !{metadata !"uiuin", i32 12, i32* @uiuin_typeProxy, metadata !34}
!40 = metadata !{i32 3}

***Unsupported functionality: missing metadata on load 0 s_shadow

***Unsupported functionality: missing metadata on load 0 s_shadow
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 300 es
// LunarGOO output (r722)
struct S {
    highp vec3 c;
    highp float f;
};

layout(std140) uniform Transform {
    layout(row_major) highp mat4 M1;
    highp mat4 M2;
    layout(row_major) highp mat3 N1;
    highp int iuin;
} tblock;
uniform T3 {
    highp mat4 M3;
    layout(row_major) highp mat4 M4;
    highp mat2x3 N2;
    highp uvec3 uv3a[4];
} ;
uniform T2 {
    bool b;
    layout(row_major) highp mat4 t2m;
} ;
uniform highp uint uiuin;
layout(location=3) in highp vec4 p;
layout(location=7) in highp vec3 c;
layout(location=9) in highp ivec2 aiv2;
out highp vec4 pos;
out highp vec3 color;
flat out highp int iout;
out S s;
S s_shadow;
const highp vec3 const72 = vec3(1.0);
const highp ivec3 const75 = ivec3(5);

void main()
{
    highp vec4 leftColumn = tblock.M1[0];
    highp vec4 rightColumn = tblock.M2[0];
    highp vec4 column = leftColumn + rightColumn;
    highp vec4 leftColumn1 = tblock.M1[1];
    highp vec4 rightColumn2 = tblock.M2[1];
    highp vec4 column3 = leftColumn1 + rightColumn2;
    highp vec4 leftColumn4 = tblock.M1[2];
    highp vec4 rightColumn5 = tblock.M2[2];
    highp vec4 column6 = leftColumn4 + rightColumn5;
    highp vec4 leftColumn7 = tblock.M1[3];
    highp vec4 rightColumn8 = tblock.M2[3];
    highp vec4 column9 = leftColumn7 + rightColumn8;
    highp vec4 rightColumn11 = M4[0];
    highp vec4 column12 = column + rightColumn11;
    highp vec4 rightColumn14 = M4[1];
    highp vec4 column15 = column3 + rightColumn14;
    highp vec4 rightColumn17 = M4[2];
    highp vec4 column18 = column6 + rightColumn17;
    highp vec4 rightColumn20 = M4[3];
    highp vec4 column21 = column9 + rightColumn20;
    highp vec4 rightColumn23 = M3[0];
    highp vec4 column24 = column12 + rightColumn23;
    highp vec4 rightColumn26 = M3[1];
    highp vec4 column27 = column15 + rightColumn26;
    highp vec4 rightColumn29 = M3[2];
    highp vec4 column30 = column18 + rightColumn29;
    highp vec4 rightColumn32 = M3[3];
    highp vec4 column33 = column21 + rightColumn32;
    highp vec4 rightColumn35 = t2m[0];
    highp vec4 column36 = column24 + rightColumn35;
    highp vec4 rightColumn38 = t2m[1];
    highp vec4 column39 = column27 + rightColumn38;
    highp vec4 rightColumn41 = t2m[2];
    highp vec4 column42 = column30 + rightColumn41;
    highp vec4 rightColumn44 = t2m[3];
    highp vec4 column45 = column33 + rightColumn44;
    highp float dot = dot(p, column36);
    highp float dot48 = dot(p, column39);
    highp float dot50 = dot(p, column42);
    highp float dot52 = dot(p, column45);
    vec4 temp61 = vec4(dot, dot48, dot50, dot52);
    highp vec3 column53 = tblock.N1[0];
    highp float dot54 = dot(c, column53);
    highp vec3 column55 = tblock.N1[1];
    highp float dot56 = dot(c, column55);
    highp vec3 column57 = tblock.N1[2];
    highp float dot58 = dot(c, column57);
    vec3 temp68;
    temp68.xyz = vec3(dot54, dot56, dot58);
    highp int temp69 = int(uiuin) + tblock.iuin;
    highp int iout_shadow = temp69 + aiv2.y;
    s_shadow.c = c;
    s_shadow.f = p.x;
    bvec3 temp71 = notEqual(N2[1], const72);
    bool temp73 = any(temp71);
    bvec3 temp74 = notEqual(ivec3(uv3a[2]), const75);
    bool temp76 = any(temp74);
    bool temp77 = temp73 || temp76;
    if (temp77) {
        highp vec3 temp78 = c + const72;
        s_shadow.c = temp78;
    }
    
    pos = temp61;
    color = temp68;
    iout = iout_shadow;
    s.c = s_shadow.c;
    s.f = s_shadow.f;
    
}

#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 300 es
// LunarGOO output (r722)
struct S {
    highp vec3 c;
    highp float f;
};

layout(std140) uniform Transform {
    layout(row_major) highp mat4 M1;
    highp mat4 M2;
    layout(row_major) highp mat3 N1;
    highp int iuin;
} tblock;
uniform T3 {
    highp mat4 M3;
    layout(row_major) highp mat4 M4;
    highp mat2x3 N2;
    highp uvec3 uv3a[4];
} ;
uniform T2 {
    bool b;
    layout(row_major) highp mat4 t2m;
} ;
uniform highp uint uiuin;
layout(location=3) in highp vec4 p;
layout(location=7) in highp vec3 c;
layout(location=9) in highp ivec2 aiv2;
out highp vec4 pos;
out highp vec3 color;
flat out highp int iout;
out S s;
S s_shadow1;
const highp vec3 const50 = vec3(1.0);
const highp ivec3 const53 = ivec3(5);

void main()
{
    vec3 temp21;
    highp vec4 column3 = tblock.M1[0] + tblock.M2[0];
    highp vec4 column389 = tblock.M1[1] + tblock.M2[1];
    highp vec4 column612 = tblock.M1[2] + tblock.M2[2];
    highp vec4 column915 = tblock.M1[3] + tblock.M2[3];
    highp vec4 column1217 = column3 + M4[0];
    highp vec4 column1519 = column389 + M4[1];
    highp vec4 column1821 = column612 + M4[2];
    highp vec4 column2123 = column915 + M4[3];
    highp vec4 column2425 = column1217 + M3[0];
    highp vec4 column2728 = column1519 + M3[1];
    highp vec4 column3030 = column1821 + M3[2];
    highp vec4 column3332 = column2123 + M3[3];
    highp vec4 column3634 = column2425 + t2m[0];
    highp vec4 column3936 = column2728 + t2m[1];
    highp vec4 column4238 = column3030 + t2m[2];
    highp vec4 column4540 = column3332 + t2m[3];
    highp float dot41 = dot(p, column3634);
    highp float dot4843 = dot(p, column3936);
    highp float dot5045 = dot(p, column4238);
    highp float dot5247 = dot(p, column4540);
    vec4 temp42 = vec4(dot41, dot4843, dot5045, dot5247);
    highp float dot5450 = dot(c, tblock.N1[0]);
    highp float dot5653 = dot(c, tblock.N1[1]);
    highp float dot5856 = dot(c, tblock.N1[2]);
    vec3 temp46;
    temp46.xyz = vec3(dot5450, dot5653, dot5856);
    highp int temp6959 = tblock.iuin + int(uiuin);
    highp int iout_shadow60 = temp6959 + aiv2.y;
    bvec3 temp7163 = notEqual(N2[1], const50);
    bool temp7364 = any(temp7163);
    bvec3 temp7465 = notEqual(ivec3(uv3a[2]), const53);
    bool temp7666 = any(temp7465);
    bool temp7767 = temp7364 || temp7666;
    temp21 = c;
    if (temp7767) {
        highp vec3 temp7869 = c + const50;
        temp21 = temp7869;
    }
    
    s_shadow1.c = temp21;
    s_shadow1.f = p.x;
    pos = temp42;
    color = temp46;
    iout = iout_shadow60;
    s.c = s_shadow1.c;
    s.f = s_shadow1.f;
    
}

