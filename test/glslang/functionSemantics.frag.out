
Top IR:
; ModuleID = 'Top'

%s = type { <4 x i32> }

@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed = alloca <4 x float>
  %e = alloca i32
  %param5 = alloca i32
  %param4 = alloca i32
  %param3 = alloca i32
  %param2 = alloca i32
  %param1 = alloca i32
  %param = alloca i32
  %color = alloca i32
  %f = alloca %s
  %t = alloca i32
  store i32 2, i32* %t
  %0 = getelementptr %s* %f, i32 0, i32 0
  %1 = load <4 x i32>* %0
  %2 = insertelement <4 x i32> %1, i32 32, i32 1
  store <4 x i32> %2, <4 x i32>* %0
  store i32 1, i32* %param
  store i32 2, i32* %param1
  %3 = load i32* %t
  %4 = load i32* %t
  %param26 = add i32 %3, %4
  store i32 %param26, i32* %param2
  store i32 8, i32* %param3
  %5 = getelementptr %s* %f, i32 0, i32 0
  %6 = load <4 x i32>* %5
  %param57 = extractelement <4 x i32> %6, i32 1
  store i32 %param57, i32* %param5
  %color9 = call i32 @"foo(i1;i1;i1;i1;i1;i1;"(i32* %param, i32* %param1, i32* %param2, i32* %param3, i32* %param4, i32* %param5)
  %e8 = load i32* %param4
  store i32 %e8, i32* %e
  %7 = load i32* %param5
  %8 = getelementptr %s* %f, i32 0, i32 0
  %9 = load <4 x i32>* %8
  %10 = insertelement <4 x i32> %9, i32 %7, i32 1
  store <4 x i32> %10, <4 x i32>* %8
  store i32 %color9, i32* %color
  %11 = load i32* %e
  %12 = getelementptr %s* %f, i32 0, i32 0
  %13 = load <4 x i32>* %12
  %14 = extractelement <4 x i32> %13, i32 1
  %15 = add i32 %11, %14
  %16 = mul i32 128, %15
  %17 = load i32* %color
  %color10 = add i32 %17, %16
  store i32 %color10, i32* %color
  %18 = load i32* %color
  %19 = sitofp i32 %18 to float
  %20 = load <4 x float>* %constructed
  %21 = insertelement <4 x float> undef, float %19, i32 0
  %22 = insertelement <4 x float> %21, float %19, i32 1
  %23 = insertelement <4 x float> %22, float %19, i32 2
  %FragColor_shadow = insertelement <4 x float> %23, float %19, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %24 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %24)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

define internal fastcc i32 @"foo(i1;i1;i1;i1;i1;i1;"(i32*, i32*, i32*, i32*, i32*, i32*) alwaysinline {
entry:
  %sum = alloca i32
  %6 = load i32* %0
  %7 = load i32* %1
  %8 = add i32 %6, %7
  %9 = load i32* %2
  %10 = add i32 %8, %9
  %11 = load i32* %3
  %12 = add i32 %10, %11
  %13 = load i32* %5
  %sum1 = add i32 %12, %13
  store i32 %sum1, i32* %sum
  %14 = load i32* %0
  %15 = mul i32 %14, 64
  store i32 %15, i32* %0
  %16 = load i32* %2
  %17 = mul i32 %16, 64
  store i32 %17, i32* %2
  store i32 1024, i32* %4
  %18 = load i32* %5
  %19 = mul i32 %18, 64
  store i32 %19, i32* %5
  %20 = load i32* %0
  %21 = load i32* %1
  %22 = mul i32 64, %21
  %23 = add i32 %20, %22
  %24 = load i32* %2
  %25 = add i32 %23, %24
  %26 = load i32* %3
  %27 = mul i32 64, %26
  %28 = add i32 %25, %27
  %29 = load i32* %4
  %30 = add i32 %28, %29
  %31 = load i32* %5
  %32 = add i32 %30, %31
  %33 = load i32* %sum
  %sum2 = add i32 %33, %32
  store i32 %sum2, i32* %sum
  %34 = load i32* %sum
  ret i32 %34

post-return:                                      ; No predecessors!
  unreachable
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> <float 3.972950e+05, float 3.972950e+05, float 3.972950e+05, float 3.972950e+05>)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 100
const vec4 const21 = vec4(397295.0);

void main()
{
    gl_FragColor = const21;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 100
const vec4 const21 = vec4(397295.0);

void main()
{
    gl_FragColor = const21;
    
}
