
Top IR:
; ModuleID = 'Top'

@otherColor = external addrspace(2) constant <4 x float>
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color2 = alloca <4 x float>
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  %color21 = load <4 x float> addrspace(2)* @otherColor
  store <4 x float> %color21, <4 x float>* %color2
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 -1, i32 1)
  %0 = load float addrspace(2)* @d
  %1 = fcmp ogt float %c, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load <4 x float> addrspace(2)* @bigColor
  %3 = load <4 x float>* %color
  %color3 = fadd <4 x float> %3, %2
  store <4 x float> %color3, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %entry
  %4 = load <4 x float> addrspace(2)* @smallColor
  %5 = load <4 x float>* %color
  %color4 = fadd <4 x float> %5, %4
  store <4 x float> %color4, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %6 = load <4 x float>* %color
  %7 = extractelement <4 x float> %6, i32 2
  %8 = load float addrspace(2)* @minimum
  %9 = fcmp olt float %7, %8
  br i1 %9, label %then5, label %ifmerge6

then5:                                            ; preds = %ifmerge
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge6

ifmerge6:                                         ; preds = %ifmerge, %post-return
  %10 = load <4 x float>* %color
  %11 = extractelement <4 x float> %10, i32 2
  %12 = fadd float %11, 1.000000e+00
  %13 = load <4 x float>* %color
  %color7 = insertelement <4 x float> %13, float %12, i32 2
  store <4 x float> %color7, <4 x float>* %color
  %14 = load <4 x float>* %color
  %15 = extractelement <4 x float> %14, i32 2
  %16 = load float addrspace(2)* @threshhold
  %17 = fcmp ogt float %15, %16
  br i1 %17, label %then8, label %ifmerge9

then8:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge6, %post-discard
  %18 = load <4 x float>* %color
  %color10 = fadd <4 x float> %18, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color10, <4 x float>* %color
  %19 = load <4 x float>* %color
  %20 = extractelement <4 x float> %19, i32 3
  %21 = load float addrspace(2)* @threshhold2
  %22 = fcmp ogt float %20, %21
  br i1 %22, label %then11, label %else26

then11:                                           ; preds = %ifmerge9
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 2
  %25 = load float addrspace(2)* @threshhold2
  %26 = fcmp ogt float %24, %25
  br i1 %26, label %then12, label %else14

then12:                                           ; preds = %then11
  br label %stage-epilogue

post-return13:                                    ; No predecessors!
  br label %ifmerge25

else14:                                           ; preds = %then11
  %27 = load i1 addrspace(2)* @b
  br i1 %27, label %then15, label %else17

then15:                                           ; preds = %else14
  %28 = load <4 x float>* %color
  %29 = extractelement <4 x float> %28, i32 2
  %30 = fadd float %29, 1.000000e+00
  %31 = load <4 x float>* %color
  %color16 = insertelement <4 x float> %31, float %30, i32 2
  store <4 x float> %color16, <4 x float>* %color
  br label %ifmerge24

else17:                                           ; preds = %else14
  %32 = load <4 x float>* %color
  %33 = extractelement <4 x float> %32, i32 0
  %34 = load float addrspace(2)* @minimum
  %35 = fcmp olt float %33, %34
  br i1 %35, label %then18, label %else20

then18:                                           ; preds = %else17
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard19:                                   ; No predecessors!
  br label %ifmerge23

else20:                                           ; preds = %else17
  %36 = load <4 x float>* %color
  %color22 = fadd <4 x float> %36, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color22, <4 x float>* %color
  br label %ifmerge23

ifmerge23:                                        ; preds = %else20, %post-discard19
  br label %ifmerge24

ifmerge24:                                        ; preds = %ifmerge23, %then15
  br label %ifmerge25

ifmerge25:                                        ; preds = %ifmerge24, %post-return13
  br label %ifmerge32

else26:                                           ; preds = %ifmerge9
  %37 = load i1 addrspace(2)* @b
  br i1 %37, label %then27, label %else29

then27:                                           ; preds = %else26
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard28:                                   ; No predecessors!
  br label %ifmerge31

else29:                                           ; preds = %else26
  br label %stage-epilogue

post-return30:                                    ; No predecessors!
  br label %ifmerge31

ifmerge31:                                        ; preds = %post-return30, %post-discard28
  br label %ifmerge32

ifmerge32:                                        ; preds = %ifmerge31, %ifmerge25
  %38 = load <4 x float>* %color
  %39 = load <4 x float>* %color2
  %gl_FragColor = fmul <4 x float> %38, %39
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge32, %else29, %then12, %then5
  %40 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %40)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then27, %then18, %then8
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@otherColor = external addrspace(2) constant <4 x float>
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %color21 = load <4 x float> addrspace(2)* @otherColor, align 16
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 -1, i32 1)
  %0 = load float addrspace(2)* @d, align 4
  %1 = fcmp ogt float %c, %0
  %bigColor.val = load <4 x float> addrspace(2)* @bigColor, align 16
  %smallColor.val = load <4 x float> addrspace(2)* @smallColor, align 16
  %.pn = select i1 %1, <4 x float> %bigColor.val, <4 x float> %smallColor.val
  %color.0 = fadd <4 x float> %BaseColor, %.pn
  %2 = extractelement <4 x float> %color.0, i32 2
  %3 = load float addrspace(2)* @minimum, align 4
  %4 = fcmp olt float %2, %3
  br i1 %4, label %then5, label %ifmerge6

then5:                                            ; preds = %entry
  br label %stage-epilogue

ifmerge6:                                         ; preds = %entry
  %5 = fadd float %2, 1.000000e+00
  %6 = load float addrspace(2)* @threshhold, align 4
  %7 = fcmp ogt float %5, %6
  br i1 %7, label %then8, label %ifmerge9

then8:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge9:                                         ; preds = %ifmerge6
  %8 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.0, i32 4, float undef, i32 undef, float undef, i32 undef, float %5, i32 0, float undef, i32 undef)
  %color10 = fadd <4 x float> %8, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9 = extractelement <4 x float> %color10, i32 3
  %10 = load float addrspace(2)* @threshhold2, align 4
  %11 = fcmp ogt float %9, %10
  br i1 %11, label %then11, label %else26

then11:                                           ; preds = %ifmerge9
  %12 = extractelement <4 x float> %color10, i32 2
  %13 = fcmp ogt float %12, %10
  br i1 %13, label %then12, label %else14

then12:                                           ; preds = %then11
  br label %stage-epilogue

else14:                                           ; preds = %then11
  %14 = load i1 addrspace(2)* @b, align 1
  br i1 %14, label %then15, label %else17

then15:                                           ; preds = %else14
  %15 = fadd float %12, 1.000000e+00
  %16 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color10, i32 4, float undef, i32 undef, float undef, i32 undef, float %15, i32 0, float undef, i32 undef)
  br label %ifmerge24

else17:                                           ; preds = %else14
  %17 = extractelement <4 x float> %color10, i32 0
  %18 = fcmp olt float %17, %3
  br i1 %18, label %then18, label %else20

then18:                                           ; preds = %else17
  call void @llvm.gla.discard()
  br label %stage-exit

else20:                                           ; preds = %else17
  %color22 = fadd <4 x float> %color10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %ifmerge24

ifmerge24:                                        ; preds = %else20, %then15
  %color.1 = phi <4 x float> [ %16, %then15 ], [ %color22, %else20 ]
  %gl_FragColor = fmul <4 x float> %color.1, %color21
  br label %stage-epilogue

else26:                                           ; preds = %ifmerge9
  %19 = load i1 addrspace(2)* @b, align 1
  br i1 %19, label %then27, label %else29

then27:                                           ; preds = %else26
  call void @llvm.gla.discard()
  br label %stage-exit

else29:                                           ; preds = %else26
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge24, %else29, %then12, %then5
  %gl_FragColor33.0 = phi <4 x float> [ zeroinitializer, %then5 ], [ zeroinitializer, %then12 ], [ %gl_FragColor, %ifmerge24 ], [ zeroinitializer, %else29 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor33.0)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then27, %then18, %then8
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

// LunarGOO(r471) output
#version 130
uniform vec4 otherColor;
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform float minimum;
uniform float threshhold;
uniform float threshhold2;
uniform bool b;
in vec4 BaseColor;
in float c;
const vec4 const27 = vec4(0.0);
const float const29_1f = 1.0;
const vec4 const33 = vec4(1.0);

void main()
{
    vec4 color_1;
    vec4 gla_copyout_gl_FragColor33_0;
    bool temp23 = c > d;
    vec4 _pn = temp23 ? bigColor : smallColor;
    vec4 color_0 = BaseColor + _pn;
    bool temp26 = color_0.z < minimum;
    if (temp26) {
        gla_copyout_gl_FragColor33_0 = const27;
        gl_FragColor = gla_copyout_gl_FragColor33_0;
        return;
    }
    else {
        float temp28 = color_0.z + const29_1f;
        bool temp30 = temp28 > threshhold;
        if (temp30) {
            discard;
        }
        
        vec4 temp31 = color_0;
        temp31.z = temp28;
        vec4 color10 = temp31 + const33;
        bool temp34 = color10.w > threshhold2;
        if (temp34) {
            bool temp35 = color10.z > threshhold2;
            if (temp35) {
                gla_copyout_gl_FragColor33_0 = const27;
                gl_FragColor = gla_copyout_gl_FragColor33_0;
                return;
            }
            else {
                if (b) {
                    float temp36 = color10.z + const29_1f;
                    vec4 temp37 = color10;
                    temp37.z = temp36;
                    color_1 = temp37;
                }
                else {
                    bool temp38 = color10.x < minimum;
                    if (temp38) {
                        discard;
                    }
                    else {
                        vec4 color22 = color10 + const33;
                        color_1 = color22;
                    }
                    
                }
                
                vec4 gla_copyout_gl_FragColor = color_1 * otherColor;
                gla_copyout_gl_FragColor33_0 = gla_copyout_gl_FragColor;
                gl_FragColor = gla_copyout_gl_FragColor33_0;
                return;
            }
            
        }
        else {
            if (b) {
                discard;
            }
            else {
                gla_copyout_gl_FragColor33_0 = const27;
                gl_FragColor = gla_copyout_gl_FragColor33_0;
                
            }
            
        }
        
    }
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
