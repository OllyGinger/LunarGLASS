
Top IR:
; ModuleID = 'Top'

@BaseColor_shadow = internal global <4 x float> zeroinitializer
@otherColor = external addrspace(2) constant <4 x float>
@c_shadow = internal global float 0.000000e+00
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color2 = alloca <4 x float>
  %color = alloca <4 x float>
  %BaseColor__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  store <4 x float> %BaseColor__, <4 x float>* @BaseColor_shadow
  %color1 = load <4 x float>* @BaseColor_shadow
  store <4 x float> %color1, <4 x float>* %color
  %color22 = load <4 x float> addrspace(2)* @otherColor, !uniform !4
  store <4 x float> %color22, <4 x float>* %color2
  %c__ = call float @llvm.gla.fReadInterpolant.f32(i32 1025, i32 -1, i32 1), !input !2
  store float %c__, float* @c_shadow
  %0 = load float* @c_shadow
  %1 = load float addrspace(2)* @d, !uniform !6
  %2 = fcmp ogt float %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load <4 x float> addrspace(2)* @bigColor, !uniform !7
  %4 = load <4 x float>* %color
  %color3 = fadd <4 x float> %4, %3
  store <4 x float> %color3, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %entry
  %5 = load <4 x float> addrspace(2)* @smallColor, !uniform !8
  %6 = load <4 x float>* %color
  %color4 = fadd <4 x float> %6, %5
  store <4 x float> %color4, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %7 = load <4 x float>* %color
  %8 = extractelement <4 x float> %7, i32 2
  %9 = load float addrspace(2)* @minimum, !uniform !9
  %10 = fcmp olt float %8, %9
  br i1 %10, label %then5, label %ifmerge6

then5:                                            ; preds = %ifmerge
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge6

ifmerge6:                                         ; preds = %ifmerge, %post-return
  %11 = load <4 x float>* %color
  %12 = extractelement <4 x float> %11, i32 2
  %13 = fadd float %12, 1.000000e+00
  %14 = load <4 x float>* %color
  %color7 = insertelement <4 x float> %14, float %13, i32 2
  store <4 x float> %color7, <4 x float>* %color
  %15 = load <4 x float>* %color
  %16 = extractelement <4 x float> %15, i32 2
  %17 = load float addrspace(2)* @threshhold, !uniform !10
  %18 = fcmp ogt float %16, %17
  br i1 %18, label %then8, label %ifmerge9

then8:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge6, %post-discard
  %19 = load <4 x float>* %color
  %color10 = fadd <4 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color10, <4 x float>* %color
  %20 = load <4 x float>* %color
  %21 = extractelement <4 x float> %20, i32 3
  %22 = load float addrspace(2)* @threshhold2, !uniform !11
  %23 = fcmp ogt float %21, %22
  br i1 %23, label %then11, label %else25

then11:                                           ; preds = %ifmerge9
  %24 = load <4 x float>* %color
  %25 = extractelement <4 x float> %24, i32 2
  %26 = load float addrspace(2)* @threshhold2, !uniform !11
  %27 = fcmp ogt float %25, %26
  br i1 %27, label %then12, label %else14

then12:                                           ; preds = %then11
  br label %stage-epilogue

post-return13:                                    ; No predecessors!
  br label %ifmerge24

else14:                                           ; preds = %then11
  %28 = load i1 addrspace(2)* @b, !uniform !12
  br i1 %28, label %then15, label %else17

then15:                                           ; preds = %else14
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fadd float %30, 1.000000e+00
  %32 = load <4 x float>* %color
  %color16 = insertelement <4 x float> %32, float %31, i32 2
  store <4 x float> %color16, <4 x float>* %color
  br label %ifmerge23

else17:                                           ; preds = %else14
  %33 = load <4 x float>* %color
  %34 = extractelement <4 x float> %33, i32 0
  %35 = load float addrspace(2)* @minimum, !uniform !9
  %36 = fcmp olt float %34, %35
  br i1 %36, label %then18, label %else20

then18:                                           ; preds = %else17
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard19:                                   ; No predecessors!
  br label %ifmerge22

else20:                                           ; preds = %else17
  %37 = load <4 x float>* %color
  %color21 = fadd <4 x float> %37, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color21, <4 x float>* %color
  br label %ifmerge22

ifmerge22:                                        ; preds = %else20, %post-discard19
  br label %ifmerge23

ifmerge23:                                        ; preds = %ifmerge22, %then15
  br label %ifmerge24

ifmerge24:                                        ; preds = %ifmerge23, %post-return13
  br label %ifmerge31

else25:                                           ; preds = %ifmerge9
  %38 = load i1 addrspace(2)* @b, !uniform !12
  br i1 %38, label %then26, label %else28

then26:                                           ; preds = %else25
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard27:                                   ; No predecessors!
  br label %ifmerge30

else28:                                           ; preds = %else25
  br label %stage-epilogue

post-return29:                                    ; No predecessors!
  br label %ifmerge30

ifmerge30:                                        ; preds = %post-return29, %post-discard27
  br label %ifmerge31

ifmerge31:                                        ; preds = %ifmerge30, %ifmerge24
  %39 = load <4 x float>* %color
  %40 = load <4 x float>* %color2
  %FragColor_shadow = fmul <4 x float> %39, %40, !precision !15
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge31, %else28, %then12, %then5
  %41 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %41), !output !13
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then26, %then18, %then8
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!inputs = !{!0, !2}
!defaultUniforms = !{!4, !6, !7, !8, !9, !10, !11, !11, !12, !9, !12}
!outputs = !{!13}

!0 = metadata !{metadata !"BaseColor", i32 7, <4 x float>* @BaseColor_shadow, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024}
!2 = metadata !{metadata !"c", i32 7, float* @c_shadow, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025}
!4 = metadata !{metadata !"otherColor", i32 12, <4 x float> addrspace(2)* @otherColor, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 0}
!6 = metadata !{metadata !"d", i32 12, float addrspace(2)* @d, metadata !5}
!7 = metadata !{metadata !"bigColor", i32 12, <4 x float> addrspace(2)* @bigColor, metadata !5}
!8 = metadata !{metadata !"smallColor", i32 12, <4 x float> addrspace(2)* @smallColor, metadata !5}
!9 = metadata !{metadata !"minimum", i32 12, float addrspace(2)* @minimum, metadata !5}
!10 = metadata !{metadata !"threshhold", i32 12, float addrspace(2)* @threshhold, metadata !5}
!11 = metadata !{metadata !"threshhold2", i32 12, float addrspace(2)* @threshhold2, metadata !5}
!12 = metadata !{metadata !"b", i32 12, i1 addrspace(2)* @b, metadata !5}
!13 = metadata !{metadata !"gl_FragColor", i32 1, <4 x float>* @FragColor_shadow, metadata !14}
!14 = metadata !{i32 0, i32 2, i32 0}
!15 = metadata !{i32 2}


Bottom IR:
; ModuleID = 'Top'

@otherColor = external addrspace(2) constant <4 x float>
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1

define fastcc void @main() {
entry:
  %BaseColor__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !input !0
  %color22 = load <4 x float> addrspace(2)* @otherColor, align 16, !uniform !4
  %c__ = call float @llvm.gla.fReadInterpolant.f32(i32 1025, i32 -1, i32 1), !input !2
  %0 = load float addrspace(2)* @d, align 4, !uniform !6
  %1 = fcmp ogt float %c__, %0
  %bigColor.val = load <4 x float> addrspace(2)* @bigColor, align 16
  %smallColor.val = load <4 x float> addrspace(2)* @smallColor, align 16
  %.pn = select i1 %1, <4 x float> %bigColor.val, <4 x float> %smallColor.val
  %color.0 = fadd <4 x float> %BaseColor__, %.pn
  %2 = extractelement <4 x float> %color.0, i32 2
  %3 = load float addrspace(2)* @minimum, align 4, !uniform !9
  %4 = fcmp olt float %2, %3
  br i1 %4, label %then5, label %ifmerge6

then5:                                            ; preds = %entry
  br label %stage-epilogue

ifmerge6:                                         ; preds = %entry
  %5 = fadd float %2, 1.000000e+00
  %6 = load float addrspace(2)* @threshhold, align 4, !uniform !10
  %7 = fcmp ogt float %5, %6
  br i1 %7, label %then8, label %ifmerge9

then8:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge9:                                         ; preds = %ifmerge6
  %8 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.0, i32 4, float undef, i32 undef, float undef, i32 undef, float %5, i32 0, float undef, i32 undef)
  %color10 = fadd <4 x float> %8, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9 = extractelement <4 x float> %color10, i32 3
  %10 = load float addrspace(2)* @threshhold2, align 4, !uniform !11
  %11 = fcmp ogt float %9, %10
  br i1 %11, label %then11, label %else25

then11:                                           ; preds = %ifmerge9
  %12 = extractelement <4 x float> %color10, i32 2
  %13 = fcmp ogt float %12, %10
  br i1 %13, label %then12, label %else14

then12:                                           ; preds = %then11
  br label %stage-epilogue

else14:                                           ; preds = %then11
  %14 = load i1 addrspace(2)* @b, align 1, !uniform !12
  br i1 %14, label %then15, label %else17

then15:                                           ; preds = %else14
  %15 = fadd float %12, 1.000000e+00
  %16 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color10, i32 4, float undef, i32 undef, float undef, i32 undef, float %15, i32 0, float undef, i32 undef)
  br label %ifmerge23

else17:                                           ; preds = %else14
  %17 = extractelement <4 x float> %color10, i32 0
  %18 = fcmp olt float %17, %3
  br i1 %18, label %then18, label %else20

then18:                                           ; preds = %else17
  call void @llvm.gla.discard()
  br label %stage-exit

else20:                                           ; preds = %else17
  %color21 = fadd <4 x float> %color10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %ifmerge23

ifmerge23:                                        ; preds = %else20, %then15
  %color.1 = phi <4 x float> [ %16, %then15 ], [ %color21, %else20 ]
  %FragColor_shadow = fmul <4 x float> %color22, %color.1, !precision !15
  br label %stage-epilogue

else25:                                           ; preds = %ifmerge9
  %19 = load i1 addrspace(2)* @b, align 1, !uniform !12
  br i1 %19, label %then26, label %else28

then26:                                           ; preds = %else25
  call void @llvm.gla.discard()
  br label %stage-exit

else28:                                           ; preds = %else25
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge23, %else28, %then12, %then5
  %FragColor_shadow32.0 = phi <4 x float> [ zeroinitializer, %then5 ], [ zeroinitializer, %then12 ], [ %FragColor_shadow, %ifmerge23 ], [ zeroinitializer, %else28 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %FragColor_shadow32.0), !output !13
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then26, %then18, %then8
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

!inputs = !{!0, !2}
!defaultUniforms = !{!4, !6, !7, !8, !9, !10, !11, !11, !12, !9, !12}
!outputs = !{!13}

!0 = metadata !{metadata !"BaseColor", i32 7, null, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024}
!2 = metadata !{metadata !"c", i32 7, null, metadata !3}
!3 = metadata !{i32 0, i32 0, i32 1025}
!4 = metadata !{metadata !"otherColor", i32 12, <4 x float> addrspace(2)* @otherColor, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 0}
!6 = metadata !{metadata !"d", i32 12, float addrspace(2)* @d, metadata !5}
!7 = metadata !{metadata !"bigColor", i32 12, <4 x float> addrspace(2)* @bigColor, metadata !5}
!8 = metadata !{metadata !"smallColor", i32 12, <4 x float> addrspace(2)* @smallColor, metadata !5}
!9 = metadata !{metadata !"minimum", i32 12, float addrspace(2)* @minimum, metadata !5}
!10 = metadata !{metadata !"threshhold", i32 12, float addrspace(2)* @threshhold, metadata !5}
!11 = metadata !{metadata !"threshhold2", i32 12, float addrspace(2)* @threshhold2, metadata !5}
!12 = metadata !{metadata !"b", i32 12, i1 addrspace(2)* @b, metadata !5}
!13 = metadata !{metadata !"gl_FragColor", i32 1, null, metadata !14}
!14 = metadata !{i32 0, i32 2, i32 0}
!15 = metadata !{i32 2}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 100
uniform vec4 otherColor;
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform float minimum;
uniform float threshhold;
uniform float threshhold2;
uniform bool b;
varying vec4 BaseColor;
varying float c;
const vec4 const27 = vec4(0.0);
const float const29f_1 = 1.0;
const vec4 const33 = vec4(1.0);

void main()
{
    vec4 colord1;
    vec4 FragColor_shadow32d0;
    bool temp23 = c > d;
    vec4 dpn = temp23 ? bigColor : smallColor;
    vec4 colord0 = BaseColor + dpn;
    bool temp26 = colord0.z < minimum;
    if (temp26) {
        FragColor_shadow32d0 = const27;
        gl_FragColor = FragColor_shadow32d0;
        return;
    }
    else {
        float temp28 = colord0.z + const29f_1;
        bool temp30 = temp28 > threshhold;
        if (temp30) {
            discard;
        }
        
        vec4 temp31 = colord0;
        temp31.z = temp28;
        vec4 color10 = temp31 + const33;
        bool temp34 = color10.w > threshhold2;
        if (temp34) {
            bool temp35 = color10.z > threshhold2;
            if (temp35) {
                FragColor_shadow32d0 = const27;
                gl_FragColor = FragColor_shadow32d0;
                return;
            }
            else {
                if (b) {
                    float temp36 = color10.z + const29f_1;
                    vec4 temp37 = color10;
                    temp37.z = temp36;
                    colord1 = temp37;
                }
                else {
                    bool temp38 = color10.x < minimum;
                    if (temp38) {
                        discard;
                    }
                    else {
                        vec4 color21 = color10 + const33;
                        colord1 = color21;
                    }
                    
                }
                
                mediump vec4 FragColor_shadow = otherColor * colord1;
                FragColor_shadow32d0 = FragColor_shadow;
                gl_FragColor = FragColor_shadow32d0;
                return;
            }
            
        }
        else {
            if (b) {
                discard;
            }
            else {
                FragColor_shadow32d0 = const27;
                gl_FragColor = FragColor_shadow32d0;
                
            }
            
        }
        
    }
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 100
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform float minimum;
uniform float threshhold;
uniform float threshhold2;
uniform bool b;
uniform vec4 otherColor;
varying float c;
varying vec4 BaseColor;
const vec4 const27 = vec4(0.0);
const float const29f_1 = 1.0;
const vec4 const33 = vec4(1.0);

void main()
{
    vec4 colord1d0;
    vec4 FragColor_shadow51d0;
    bool temp231 = c > d;
    vec4 ternaryd0 = temp231 ? bigColor : smallColor;
    vec4 colord05 = ternaryd0 + BaseColor;
    bool temp266 = colord05.z < minimum;
    if (temp266) {
        FragColor_shadow51d0 = const27;
        gl_FragColor = FragColor_shadow51d0;
        return;
    }
    else {
        float temp289 = colord05.z + const29f_1;
        bool temp3010 = temp289 > threshhold;
        if (temp3010) {
            discard;
        }
        
        vec4 temp31 = colord05;
        temp31.z = temp289;
        vec4 color1015 = temp31 + const33;
        bool temp3416 = color1015.w > threshhold2;
        if (temp3416) {
            bool temp3518 = color1015.z > threshhold2;
            if (temp3518) {
                FragColor_shadow51d0 = const27;
                gl_FragColor = FragColor_shadow51d0;
                return;
            }
            else {
                if (b) {
                    float temp3624 = color1015.z + const29f_1;
                    vec4 temp37 = color1015;
                    temp37.z = temp3624;
                    colord1d0 = temp37;
                }
                else {
                    bool temp3829 = color1015.x < minimum;
                    if (temp3829) {
                        discard;
                    }
                    else {
                        vec4 color2133 = color1015 + const33;
                        colord1d0 = color2133;
                    }
                    
                }
                
                mediump vec4 FragColor_shadow3738 = colord1d0 * otherColor;
                FragColor_shadow51d0 = FragColor_shadow3738;
                gl_FragColor = FragColor_shadow51d0;
                return;
            }
            
        }
        else {
            if (b) {
                discard;
            }
            else {
                FragColor_shadow51d0 = const27;
                gl_FragColor = FragColor_shadow51d0;
                
            }
            
        }
        
    }
    
}
