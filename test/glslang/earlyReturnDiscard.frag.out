
***Unsupported functionality: ++/--

***Unsupported functionality: ++/--

***Unsupported functionality: ++/--

***Unsupported functionality: ++/--

Top IR:
; ModuleID = 'Top'

@otherColor = external addrspace(2) constant <4 x float>
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color2 = alloca <4 x float>
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  %color21 = load <4 x float> addrspace(2)* @otherColor
  store <4 x float> %color21, <4 x float>* %color2
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 -1, i32 1)
  %0 = load float addrspace(2)* @d
  %1 = fcmp ogt float %c, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load <4 x float> addrspace(2)* @bigColor
  %3 = load <4 x float>* %color
  %color3 = fadd <4 x float> %3, %2
  store <4 x float> %color3, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %entry
  %4 = load <4 x float> addrspace(2)* @smallColor
  %5 = load <4 x float>* %color
  %color4 = fadd <4 x float> %5, %4
  store <4 x float> %color4, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %6 = load <4 x float>* %color
  %7 = extractelement <4 x float> %6, i32 2
  %8 = load float addrspace(2)* @minimum
  %9 = fcmp olt float %7, %8
  br i1 %9, label %then5, label %ifmerge6

then5:                                            ; preds = %ifmerge
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge6

ifmerge6:                                         ; preds = %ifmerge, %post-return
  %10 = load <4 x float>* %color
  %11 = extractelement <4 x float> %10, i32 2
  %12 = load <4 x float>* %color
  %13 = extractelement <4 x float> %12, i32 2
  %14 = load float addrspace(2)* @threshhold
  %15 = fcmp ogt float %13, %14
  br i1 %15, label %then7, label %ifmerge8

then7:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge8

ifmerge8:                                         ; preds = %ifmerge6, %post-discard
  %16 = load <4 x float>* %color
  %17 = load <4 x float>* %color
  %18 = extractelement <4 x float> %17, i32 3
  %19 = load float addrspace(2)* @threshhold2
  %20 = fcmp ogt float %18, %19
  br i1 %20, label %then9, label %else21

then9:                                            ; preds = %ifmerge8
  %21 = load <4 x float>* %color
  %22 = extractelement <4 x float> %21, i32 2
  %23 = load float addrspace(2)* @threshhold2
  %24 = fcmp ogt float %22, %23
  br i1 %24, label %then10, label %else12

then10:                                           ; preds = %then9
  br label %stage-epilogue

post-return11:                                    ; No predecessors!
  br label %ifmerge20

else12:                                           ; preds = %then9
  %25 = load i1 addrspace(2)* @b
  br i1 %25, label %then13, label %else14

then13:                                           ; preds = %else12
  %26 = load <4 x float>* %color
  %27 = extractelement <4 x float> %26, i32 2
  br label %ifmerge19

else14:                                           ; preds = %else12
  %28 = load <4 x float>* %color
  %29 = extractelement <4 x float> %28, i32 0
  %30 = load float addrspace(2)* @minimum
  %31 = fcmp olt float %29, %30
  br i1 %31, label %then15, label %else17

then15:                                           ; preds = %else14
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard16:                                   ; No predecessors!
  br label %ifmerge18

else17:                                           ; preds = %else14
  %32 = load <4 x float>* %color
  br label %ifmerge18

ifmerge18:                                        ; preds = %else17, %post-discard16
  br label %ifmerge19

ifmerge19:                                        ; preds = %ifmerge18, %then13
  br label %ifmerge20

ifmerge20:                                        ; preds = %ifmerge19, %post-return11
  br label %ifmerge27

else21:                                           ; preds = %ifmerge8
  %33 = load i1 addrspace(2)* @b
  br i1 %33, label %then22, label %else24

then22:                                           ; preds = %else21
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard23:                                   ; No predecessors!
  br label %ifmerge26

else24:                                           ; preds = %else21
  br label %stage-epilogue

post-return25:                                    ; No predecessors!
  br label %ifmerge26

ifmerge26:                                        ; preds = %post-return25, %post-discard23
  br label %ifmerge27

ifmerge27:                                        ; preds = %ifmerge26, %ifmerge20
  %34 = load <4 x float>* %color
  %35 = load <4 x float>* %color2
  %gl_FragColor = fmul <4 x float> %34, %35
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge27, %else24, %then10, %then5
  %36 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %36)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then22, %then15, %then7
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@otherColor = external addrspace(2) constant <4 x float>
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %color21 = load <4 x float> addrspace(2)* @otherColor, align 16
  %c = call float @llvm.gla.fReadInterpolant.f32(i32 1, i32 -1, i32 1)
  %0 = load float addrspace(2)* @d, align 4
  %1 = fcmp ogt float %c, %0
  %bigColor.val = load <4 x float> addrspace(2)* @bigColor, align 16
  %smallColor.val = load <4 x float> addrspace(2)* @smallColor, align 16
  %.pn = select i1 %1, <4 x float> %bigColor.val, <4 x float> %smallColor.val
  %color.0 = fadd <4 x float> %BaseColor, %.pn
  %2 = extractelement <4 x float> %color.0, i32 2
  %3 = load float addrspace(2)* @minimum, align 4
  %4 = fcmp olt float %2, %3
  br i1 %4, label %then5, label %ifmerge6

then5:                                            ; preds = %entry
  br label %stage-epilogue

ifmerge6:                                         ; preds = %entry
  %5 = load float addrspace(2)* @threshhold, align 4
  %6 = fcmp ogt float %2, %5
  br i1 %6, label %then7, label %ifmerge8

then7:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge8:                                         ; preds = %ifmerge6
  %7 = extractelement <4 x float> %color.0, i32 3
  %8 = load float addrspace(2)* @threshhold2, align 4
  %9 = fcmp ogt float %7, %8
  br i1 %9, label %then9, label %else21

then9:                                            ; preds = %ifmerge8
  %10 = fcmp ogt float %2, %8
  br i1 %10, label %then10, label %else12

then10:                                           ; preds = %then9
  br label %stage-epilogue

else12:                                           ; preds = %then9
  %11 = load i1 addrspace(2)* @b, align 1
  br i1 %11, label %then13, label %else14

then13:                                           ; preds = %else12
  br label %ifmerge19

else14:                                           ; preds = %else12
  %12 = extractelement <4 x float> %color.0, i32 0
  %13 = fcmp olt float %12, %3
  br i1 %13, label %then15, label %else17

then15:                                           ; preds = %else14
  call void @llvm.gla.discard()
  br label %stage-exit

else17:                                           ; preds = %else14
  br label %ifmerge19

ifmerge19:                                        ; preds = %else17, %then13
  %gl_FragColor = fmul <4 x float> %color.0, %color21
  br label %stage-epilogue

else21:                                           ; preds = %ifmerge8
  %14 = load i1 addrspace(2)* @b, align 1
  br i1 %14, label %then22, label %else24

then22:                                           ; preds = %else21
  call void @llvm.gla.discard()
  br label %stage-exit

else24:                                           ; preds = %else21
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge19, %else24, %then10, %then5
  %gl_FragColor28.0 = phi <4 x float> [ zeroinitializer, %then5 ], [ zeroinitializer, %then10 ], [ %gl_FragColor, %ifmerge19 ], [ zeroinitializer, %else24 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor28.0)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then22, %then15, %then7
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

// LunarGOO(r471) output
#version 130
uniform vec4 otherColor;
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform float minimum;
uniform float threshhold;
uniform float threshhold2;
uniform bool b;
in vec4 BaseColor;
in float c;
const vec4 const26 = vec4(0.0);

void main()
{
    vec4 gla_copyout_gl_FragColor28_0;
    bool temp22 = c > d;
    vec4 _pn = temp22 ? bigColor : smallColor;
    vec4 color_0 = BaseColor + _pn;
    bool temp25 = color_0.z < minimum;
    if (temp25) {
        gla_copyout_gl_FragColor28_0 = const26;
        gl_FragColor = gla_copyout_gl_FragColor28_0;
        return;
    }
    else {
        bool temp27 = color_0.z > threshhold;
        if (temp27) {
            discard;
        }
        
        bool temp28 = color_0.w > threshhold2;
        if (temp28) {
            bool temp29 = color_0.z > threshhold2;
            if (temp29) {
                gla_copyout_gl_FragColor28_0 = const26;
                gl_FragColor = gla_copyout_gl_FragColor28_0;
                return;
            }
            else {
                if (b) {
                }
                else {
                    bool temp30 = color_0.x < minimum;
                    if (temp30) {
                        discard;
                    }
                    else {
                    }
                    
                }
                
                vec4 gla_copyout_gl_FragColor = color_0 * otherColor;
                gla_copyout_gl_FragColor28_0 = gla_copyout_gl_FragColor;
                gl_FragColor = gla_copyout_gl_FragColor28_0;
                return;
            }
            
        }
        else {
            if (b) {
                discard;
            }
            else {
                gla_copyout_gl_FragColor28_0 = const26;
                gl_FragColor = gla_copyout_gl_FragColor28_0;
                
            }
            
        }
        
    }
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
