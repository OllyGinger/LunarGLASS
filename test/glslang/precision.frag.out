
Top IR:
; ModuleID = 'Top'

@highfin_shadow = internal global <4 x float> zeroinitializer
@uniform_medium = external addrspace(2) constant i32
@uniform_high = external addrspace(2) constant i32
@uniform_low = external addrspace(2) constant i32
@lowfin_shadow = internal global float 0.000000e+00
@mediumfin_shadow = internal global float 0.000000e+00
@mediumfout_shadow = internal global <4 x float> zeroinitializer
@ub2 = external addrspace(2) constant <2 x i1>

define fastcc void @main() {
entry:
  %param = alloca <2 x i1>
  %constructed12 = alloca <4 x float>
  %constructed10 = alloca <2 x i32>
  %constructed9 = alloca <2 x i32>
  %constructed8 = alloca <2 x i32>
  %constructed7 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %local_highp = alloca <4 x float>
  %global_highp = alloca float
  %d = alloca float
  %arg2 = alloca float
  %arg1 = alloca float
  %sum = alloca i32
  %0 = load i32 addrspace(2)* @uniform_medium, !gla.uniform !7
  %1 = load i32 addrspace(2)* @uniform_high, !gla.uniform !9
  %sum1 = add i32 %0, %1, !gla.precision !17
  store i32 %sum1, i32* %sum
  %2 = load i32 addrspace(2)* @uniform_high, !gla.uniform !9
  %3 = load i32* %sum
  %sum2 = add i32 %3, %2, !gla.precision !17
  store i32 %sum2, i32* %sum
  %4 = load i32 addrspace(2)* @uniform_low, !gla.uniform !11
  %5 = load i32* %sum
  %sum3 = add i32 %5, %4, !gla.precision !18
  store i32 %sum3, i32* %sum
  store float 0x40099999A0000000, float* %arg1
  store float 0x412F3F4860000000, float* %arg2
  %lowfin = call float @llvm.gla.fReadInterpolant.f32(i32 1025, i32 -1, i32 1), !gla.input !2, !gla.precision !18
  store float %lowfin, float* @lowfin_shadow
  %6 = load float* @lowfin_shadow
  %mediumfin = call float @llvm.gla.fReadInterpolant.f32(i32 1026, i32 -1, i32 1), !gla.input !4, !gla.precision !19
  store float %mediumfin, float* @mediumfin_shadow
  %7 = load float* @mediumfin_shadow
  %d4 = call float @llvm.gla.fDistance.f32.f32.f32(float %6, float %7), !gla.precision !19
  store float %d4, float* %d
  %highfin = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !0, !gla.precision !17
  store <4 x float> %highfin, <4 x float>* @highfin_shadow
  %8 = load <4 x float>* @highfin_shadow
  %global_highp5 = call float @llvm.gla.fLength.f32.v4f32(<4 x float> %8), !gla.precision !17
  store float %global_highp5, float* %global_highp
  %9 = load float* %global_highp
  %10 = load <4 x float>* %constructed
  %11 = insertelement <4 x float> undef, float %9, i32 0, !gla.precision !17
  %12 = insertelement <4 x float> %11, float %9, i32 1, !gla.precision !17
  %13 = insertelement <4 x float> %12, float %9, i32 2, !gla.precision !17
  %local_highp6 = insertelement <4 x float> %13, float %9, i32 3, !gla.precision !17
  store <4 x float> %local_highp6, <4 x float>* %local_highp
  %14 = load float* %d
  %15 = call float @llvm.gla.fSin.f32.f32(float %14), !gla.precision !18
  %16 = load <4 x float>* %constructed7
  %17 = insertelement <4 x float> undef, float %15, i32 0, !gla.precision !19
  %18 = insertelement <4 x float> %17, float %15, i32 1, !gla.precision !19
  %19 = insertelement <4 x float> %18, float %15, i32 2, !gla.precision !19
  %20 = insertelement <4 x float> %19, float %15, i32 3, !gla.precision !19
  %21 = load float* %arg2
  %22 = insertelement <4 x float> undef, float %21, i32 0, !gla.precision !19
  %23 = insertelement <4 x float> %22, float %21, i32 1, !gla.precision !19
  %24 = insertelement <4 x float> %23, float %21, i32 2, !gla.precision !19
  %25 = insertelement <4 x float> %24, float %21, i32 3, !gla.precision !19
  %26 = fadd <4 x float> %20, %25, !gla.precision !19
  %27 = load <4 x float>* %local_highp
  %mediumfout_shadow = fadd <4 x float> %26, %27, !gla.precision !17
  store <4 x float> %mediumfout_shadow, <4 x float>* @mediumfout_shadow
  %28 = load i32 addrspace(2)* @uniform_low, !gla.uniform !11
  %29 = load <2 x i32>* %constructed8
  %30 = insertelement <2 x i32> undef, i32 %28, i32 0, !gla.precision !18
  %31 = insertelement <2 x i32> %30, i32 %28, i32 1, !gla.precision !18
  %32 = load i32 addrspace(2)* @uniform_high, !gla.uniform !9
  %33 = load <2 x i32>* %constructed9
  %34 = insertelement <2 x i32> undef, i32 %32, i32 0, !gla.precision !18
  %35 = insertelement <2 x i32> %34, i32 %32, i32 1, !gla.precision !18
  %36 = mul <2 x i32> %31, %35, !gla.precision !18
  %37 = load i32 addrspace(2)* @uniform_high, !gla.uniform !9
  %38 = load <2 x i32>* %constructed10
  %39 = insertelement <2 x i32> undef, i32 %37, i32 0, !gla.precision !18
  %40 = insertelement <2 x i32> %39, i32 %37, i32 1, !gla.precision !18
  %41 = add <2 x i32> %36, %40, !gla.precision !18
  %42 = extractelement <2 x i32> %41, i32 0, !gla.precision !18
  %43 = add i32 4, %42, !gla.precision !18
  %44 = load i32* %sum
  %sum11 = add i32 %44, %43, !gla.precision !18
  store i32 %sum11, i32* %sum
  %45 = load i32* %sum
  %46 = sitofp i32 %45 to float, !gla.precision !19
  %47 = load <4 x float>* %constructed12
  %48 = insertelement <4 x float> undef, float %46, i32 0, !gla.precision !19
  %49 = insertelement <4 x float> %48, float %46, i32 1, !gla.precision !19
  %50 = insertelement <4 x float> %49, float %46, i32 2, !gla.precision !19
  %51 = insertelement <4 x float> %50, float %46, i32 3, !gla.precision !19
  %52 = load <4 x float>* @mediumfout_shadow
  %mediumfout_shadow13 = fadd <4 x float> %52, %51, !gla.precision !19
  store <4 x float> %mediumfout_shadow13, <4 x float>* @mediumfout_shadow
  %param14 = load <2 x i1> addrspace(2)* @ub2, !gla.uniform !13
  store <2 x i1> %param14, <2 x i1>* %param
  %53 = call i1 @"boolfun(vb2;"(<2 x i1>* %param)
  br i1 %53, label %then, label %ifmerge

then:                                             ; preds = %entry
  %54 = load <4 x float>* @mediumfout_shadow
  %mediumfout_shadow15 = fadd <4 x float> %54, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !gla.precision !19
  store <4 x float> %mediumfout_shadow15, <4 x float>* @mediumfout_shadow
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %then
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %55 = load <4 x float>* @mediumfout_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1027, i32 -1, <4 x float> %55), !gla.output !15
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

define internal fastcc <2 x float> @"foo(vf3;"(<3 x float>*) alwaysinline {
entry:
  %highfin = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !0, !gla.precision !17
  store <4 x float> %highfin, <4 x float>* @highfin_shadow
  %1 = load <4 x float>* @highfin_shadow
  %2 = extractelement <4 x float> %1, i32 0, !gla.precision !17
  %3 = insertelement <2 x float> undef, float %2, i32 0, !gla.precision !17
  %4 = extractelement <4 x float> %1, i32 1, !gla.precision !17
  %5 = insertelement <2 x float> %3, float %4, i32 1, !gla.precision !17
  ret <2 x float> %5

post-return:                                      ; No predecessors!
  unreachable
}

define internal fastcc i1 @"boolfun(vb2;"(<2 x i1>*) alwaysinline {
entry:
  %1 = load <2 x i1>* %0
  %2 = icmp eq <2 x i1> %1, <i1 false, i1 true>
  %3 = call i1 @llvm.gla.all.v2i1(<2 x i1> %2)
  ret i1 %3

post-return:                                      ; No predecessors!
  unreachable
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare i1 @llvm.gla.all.v2i1(<2 x i1>) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDistance.f32.f32.f32(float, float) nounwind readnone

declare float @llvm.gla.fLength.f32.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fSin.f32.f32(float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.inputs = !{!0, !2, !4}
!gla.entrypoint = !{!6}
!gla.uniforms = !{!7, !9, !11, !13}
!gla.outputs = !{!15}

!0 = metadata !{metadata !"highfin", i32 1, <4 x float>* @highfin_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 3, i32 1024, null, i32 1}
!2 = metadata !{metadata !"lowfin", i32 1, float* @lowfin_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 1, i32 1025, null, i32 1}
!4 = metadata !{metadata !"mediumfin", i32 1, float* @mediumfin_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1026, null, i32 1}
!6 = metadata !{metadata !"main", i32 15}
!7 = metadata !{metadata !"uniform_medium", i32 12, i32* @uniform_medium_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 2, i32 1024, null}
!9 = metadata !{metadata !"uniform_high", i32 12, i32* @uniform_high_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 3, i32 1024, null}
!11 = metadata !{metadata !"uniform_low", i32 12, i32* @uniform_low_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 1, i32 1024, null}
!13 = metadata !{metadata !"ub2", i32 12, <2 x i1>* @ub2_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1024, null}
!15 = metadata !{metadata !"mediumfout", i32 7, <4 x float>* @mediumfout_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 2, i32 1027, null, i32 0}
!17 = metadata !{i32 3}
!18 = metadata !{i32 1}
!19 = metadata !{i32 2}


Bottom IR:
; ModuleID = 'Top'

@uniform_medium = external addrspace(2) constant i32
@uniform_high = external addrspace(2) constant i32
@uniform_low = external addrspace(2) constant i32
@ub2 = external addrspace(2) constant <2 x i1>

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(2)* @uniform_medium, align 4, !gla.uniform !7
  %1 = load i32 addrspace(2)* @uniform_high, align 4, !gla.uniform !9
  %2 = load i32 addrspace(2)* @uniform_low, align 4, !gla.uniform !11
  %lowfin = call float @llvm.gla.fReadInterpolant.f32(i32 1025, i32 -1, i32 1), !gla.input !2, !gla.precision !17
  %mediumfin = call float @llvm.gla.fReadInterpolant.f32(i32 1026, i32 -1, i32 1), !gla.input !4, !gla.precision !18
  %d4 = call float @llvm.gla.fDistance.f32.f32.f32(float %lowfin, float %mediumfin), !gla.precision !18
  %highfin = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !0, !gla.precision !19
  %global_highp5 = call float @llvm.gla.fLength.f32.v4f32(<4 x float> %highfin), !gla.precision !19
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %global_highp5, <4 x i32> zeroinitializer)
  %4 = call float @llvm.gla.fSin.f32.f32(float %d4), !gla.precision !17
  %5 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %4, <4 x i32> zeroinitializer)
  %6 = fadd <4 x float> %5, <float 0x412F3F4860000000, float 0x412F3F4860000000, float 0x412F3F4860000000, float 0x412F3F4860000000>, !gla.precision !18
  %mediumfout_shadow = fadd <4 x float> %3, %6, !gla.precision !19
  %.lhs = mul i32 %2, %1
  %factor = mul i32 %1, 3
  %sum1 = add i32 %0, 4, !gla.precision !19
  %sum2 = add i32 %sum1, %2, !gla.precision !19
  %sum3 = add i32 %sum2, %.lhs, !gla.precision !17
  %sum11 = add i32 %sum3, %factor, !gla.precision !17
  %7 = sitofp i32 %sum11 to float, !gla.precision !18
  %8 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %7, <4 x i32> zeroinitializer)
  %mediumfout_shadow13 = fadd <4 x float> %8, %mediumfout_shadow, !gla.precision !18
  %param14 = load <2 x i1> addrspace(2)* @ub2, align 2, !gla.uniform !13
  %9 = icmp eq <2 x i1> %param14, <i1 false, i1 true>
  %10 = call i1 @llvm.gla.all.v2i1(<2 x i1> %9)
  %mediumfout_shadow15 = fadd <4 x float> %mediumfout_shadow13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !gla.precision !18
  %select = select i1 %10, <4 x float> %mediumfout_shadow15, <4 x float> %mediumfout_shadow13
  call void @llvm.gla.fWriteData.v4f32(i32 1027, i32 -1, <4 x float> %select), !gla.output !15
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare i1 @llvm.gla.all.v2i1(<2 x i1>) nounwind readnone

declare float @llvm.gla.fReadInterpolant.f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDistance.f32.f32.f32(float, float) nounwind readnone

declare float @llvm.gla.fLength.f32.v4f32(<4 x float>) nounwind readnone

declare float @llvm.gla.fSin.f32.f32(float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

!gla.inputs = !{!0, !2, !4}
!gla.entrypoint = !{!6}
!gla.uniforms = !{!7, !9, !11, !13}
!gla.outputs = !{!15}

!0 = metadata !{metadata !"highfin", i32 1, <4 x float>* @highfin_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 3, i32 1024, null, i32 1}
!2 = metadata !{metadata !"lowfin", i32 1, float* @lowfin_shadow_typeProxy, metadata !3}
!3 = metadata !{i32 0, i32 1, i32 1025, null, i32 1}
!4 = metadata !{metadata !"mediumfin", i32 1, float* @mediumfin_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1026, null, i32 1}
!6 = metadata !{metadata !"main", i32 15}
!7 = metadata !{metadata !"uniform_medium", i32 12, i32* @uniform_medium_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 2, i32 1024, null}
!9 = metadata !{metadata !"uniform_high", i32 12, i32* @uniform_high_typeProxy, metadata !10}
!10 = metadata !{i32 0, i32 3, i32 1024, null}
!11 = metadata !{metadata !"uniform_low", i32 12, i32* @uniform_low_typeProxy, metadata !12}
!12 = metadata !{i32 0, i32 1, i32 1024, null}
!13 = metadata !{metadata !"ub2", i32 12, <2 x i1>* @ub2_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1024, null}
!15 = metadata !{metadata !"mediumfout", i32 7, <4 x float>* @mediumfout_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 2, i32 1027, null, i32 0}
!17 = metadata !{i32 1}
!18 = metadata !{i32 2}
!19 = metadata !{i32 3}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 300 es
// LunarGOO output (r722)
precision mediump float; // this will be almost entirely overridden by individual declarations

uniform mediump int uniform_medium;
uniform highp int uniform_high;
uniform lowp int uniform_low;
uniform bvec2 ub2;
in highp vec4 highfin;
in lowp float lowfin;
in mediump float mediumfin;
out mediump vec4 mediumfout;
const highp vec4 const27 = vec4(1.02391e+06);
const highp int const31i_3 = 3;
const highp int const33i_4 = 4;
const bvec2 const41 = bvec2(false, true);
const highp vec4 const44 = vec4(1.0);

void main()
{
    mediump float temp21 = distance(lowfin, mediumfin);
    highp float global_highp5 = length(highfin);
    vec4 temp23 = vec4(global_highp5);
    lowp float temp24 = sin(temp21);
    vec4 temp25 = vec4(temp24);
    mediump vec4 temp26 = temp25 + const27;
    highp vec4 mediumfout_shadow = temp23 + temp26;
    int dlhs = uniform_low * uniform_high;
    int factor = uniform_high * const31i_3;
    highp int sum1 = uniform_medium + const33i_4;
    highp int sum2 = sum1 + uniform_low;
    lowp int sum3 = sum2 + dlhs;
    lowp int sum11 = sum3 + factor;
    mediump float temp37 = float(sum11);
    vec4 temp38 = vec4(temp37);
    mediump vec4 mediumfout_shadow13 = temp38 + mediumfout_shadow;
    bvec2 temp40 = equal(ub2, const41);
    bool temp42 = all(temp40);
    mediump vec4 mediumfout_shadow15 = mediumfout_shadow13 + const44;
    vec4 select = temp42 ? mediumfout_shadow15 : mediumfout_shadow13;
    mediumfout = select;
    
}

!19 = metadata !{i32 3}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 300 es
// LunarGOO output (r722)
precision mediump float; // this will be almost entirely overridden by individual declarations

uniform lowp int uniform_low;
uniform highp int uniform_high;
uniform mediump int uniform_medium;
uniform bvec2 ub2;
in lowp float lowfin;
in mediump float mediumfin;
in highp vec4 highfin;
out mediump vec4 mediumfout;
const highp vec4 const27 = vec4(1023910.0);
const highp int const30i_3 = 3;
const highp int const33i_4 = 4;
const bvec2 const40 = bvec2(false, true);
const highp vec4 const43 = vec4(1.0);

void main()
{
    mediump float temp211 = distance(lowfin, mediumfin);
    highp float global_highp52 = length(highfin);
    vec4 temp23 = vec4(global_highp52);
    mediump float temp244 = sin(temp211);
    vec4 temp25 = vec4(temp244);
    highp vec4 temp267 = temp25 + const27;
    mediump vec4 mediumfout_shadow8 = temp23 + temp267;
    int tmp = uniform_low + const30i_3;
    int tmp27 = tmp * uniform_high;
    highp int sum212 = uniform_low + const33i_4;
    highp int sum313 = sum212 + uniform_medium;
    mediump int sum1114 = sum313 + tmp27;
    mediump float temp3715 = float(sum1114);
    vec4 temp37 = vec4(temp3715);
    highp vec4 mediumfout_shadow1318 = mediumfout_shadow8 + temp37;
    bvec2 temp4019 = equal(ub2, const40);
    bool temp4220 = all(temp4019);
    highp vec4 mediumfout_shadow1521 = mediumfout_shadow1318 + const43;
    vec4 select = temp4220 ? mediumfout_shadow1521 : mediumfout_shadow1318;
    mediumfout = select;
    
}

