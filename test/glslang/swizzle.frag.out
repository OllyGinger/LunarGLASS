
Top IR:
; ModuleID = 'Top'

@u = external addrspace(2) constant <4 x float>
@t_shadow = internal global <2 x float> zeroinitializer
@p = external addrspace(2) constant i1
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %w_undef = alloca <4 x float>
  %w_flow = alloca <4 x float>
  %w2 = alloca <4 x float>
  %w_reorder = alloca <4 x float>
  %w_dep = alloca <4 x float>
  %w = alloca <4 x float>
  %blendscale = alloca float
  store float 0x3FFC9FBE80000000, float* %blendscale
  %w1 = load <4 x float> addrspace(2)* @u
  store <4 x float> %w1, <4 x float>* %w
  %w_dep2 = load <4 x float> addrspace(2)* @u
  store <4 x float> %w_dep2, <4 x float>* %w_dep
  %w_reorder3 = load <4 x float> addrspace(2)* @u
  store <4 x float> %w_reorder3, <4 x float>* %w_reorder
  %w24 = load <4 x float> addrspace(2)* @u
  store <4 x float> %w24, <4 x float>* %w2
  %w_flow5 = load <4 x float> addrspace(2)* @u
  store <4 x float> %w_flow5, <4 x float>* %w_flow
  %0 = load float* %blendscale
  %1 = load <4 x float>* %w_reorder
  %w_reorder6 = insertelement <4 x float> %1, float %0, i32 2
  store <4 x float> %w_reorder6, <4 x float>* %w_reorder
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  store <2 x float> %t, <2 x float>* @t_shadow
  %2 = load <2 x float>* @t_shadow
  %3 = load <4 x float>* %w
  %4 = extractelement <2 x float> %2, i32 0
  %5 = insertelement <4 x float> %3, float %4, i32 3
  %6 = extractelement <2 x float> %2, i32 1
  %w7 = insertelement <4 x float> %5, float %6, i32 1
  store <4 x float> %w7, <4 x float>* %w
  %7 = load float* %blendscale
  %8 = load <4 x float>* %w_reorder
  %w_reorder8 = insertelement <4 x float> %8, float %7, i32 0
  store <4 x float> %w_reorder8, <4 x float>* %w_reorder
  %9 = load <4 x float> addrspace(2)* @u
  %10 = extractelement <4 x float> %9, i32 2
  %11 = insertelement <4 x float> undef, float %10, i32 0
  %12 = extractelement <4 x float> %9, i32 3
  %13 = insertelement <4 x float> %11, float %12, i32 1
  %14 = extractelement <4 x float> %9, i32 0
  %15 = insertelement <4 x float> %13, float %14, i32 2
  %16 = extractelement <4 x float> %9, i32 1
  %w29 = insertelement <4 x float> %15, float %16, i32 3
  store <4 x float> %w29, <4 x float>* %w2
  %17 = load float* %blendscale
  %18 = load <4 x float>* %w_reorder
  %w_reorder10 = insertelement <4 x float> %18, float %17, i32 1
  store <4 x float> %w_reorder10, <4 x float>* %w_reorder
  %19 = load <4 x float>* %w2
  %20 = extractelement <4 x float> %19, i32 0
  %21 = insertelement <2 x float> undef, float %20, i32 0
  %22 = extractelement <4 x float> %19, i32 2
  %23 = insertelement <2 x float> %21, float %22, i32 1
  %24 = load <4 x float>* %w_dep
  %25 = extractelement <2 x float> %23, i32 0
  %26 = insertelement <4 x float> %24, float %25, i32 0
  %27 = extractelement <2 x float> %23, i32 1
  %w_dep11 = insertelement <4 x float> %26, float %27, i32 1
  store <4 x float> %w_dep11, <4 x float>* %w_dep
  %t12 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  store <2 x float> %t12, <2 x float>* @t_shadow
  %28 = load <2 x float>* @t_shadow
  %29 = load <4 x float>* %w_dep
  %30 = extractelement <2 x float> %28, i32 0
  %31 = insertelement <4 x float> %29, float %30, i32 2
  %32 = extractelement <2 x float> %28, i32 1
  %w_dep13 = insertelement <4 x float> %31, float %32, i32 3
  store <4 x float> %w_dep13, <4 x float>* %w_dep
  %33 = load <4 x float> addrspace(2)* @u
  %34 = extractelement <4 x float> %33, i32 2
  %35 = insertelement <2 x float> undef, float %34, i32 0
  %36 = extractelement <4 x float> %33, i32 3
  %37 = insertelement <2 x float> %35, float %36, i32 1
  %38 = load <4 x float>* %w_undef
  %39 = extractelement <2 x float> %37, i32 0
  %40 = insertelement <4 x float> %38, float %39, i32 0
  %41 = extractelement <2 x float> %37, i32 1
  %w_undef14 = insertelement <4 x float> %40, float %41, i32 1
  store <4 x float> %w_undef14, <4 x float>* %w_undef
  %42 = load i1 addrspace(2)* @p
  br i1 %42, label %then, label %else

then:                                             ; preds = %entry
  %t15 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  store <2 x float> %t15, <2 x float>* @t_shadow
  %43 = load <2 x float>* @t_shadow
  %44 = extractelement <2 x float> %43, i32 0
  %45 = load <4 x float>* %w_flow
  %w_flow16 = insertelement <4 x float> %45, float %44, i32 0
  store <4 x float> %w_flow16, <4 x float>* %w_flow
  br label %ifmerge

else:                                             ; preds = %entry
  %t17 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  store <2 x float> %t17, <2 x float>* @t_shadow
  %46 = load <2 x float>* @t_shadow
  %47 = extractelement <2 x float> %46, i32 1
  %48 = load <4 x float>* %w_flow
  %w_flow18 = insertelement <4 x float> %48, float %47, i32 0
  store <4 x float> %w_flow18, <4 x float>* %w_flow
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %49 = load <4 x float>* %w_reorder
  %50 = load <4 x float>* %w_undef
  %51 = load <4 x float>* %w
  %52 = load <4 x float>* %w2
  %53 = fmul <4 x float> %51, %52
  %54 = load <4 x float>* %w_dep
  %55 = fmul <4 x float> %53, %54
  %56 = load <4 x float>* %w_flow
  %57 = fmul <4 x float> %55, %56
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %49, <4 x float> %50, <4 x float> %57)
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %58 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %58)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@u = external addrspace(2) constant <4 x float>
@p = external addrspace(2) constant i1

define fastcc void @main() {
entry:
  %w1 = load <4 x float> addrspace(2)* @u, align 16
  %0 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %w1, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>)
  %1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %w1, <4 x i32> <i32 2, i32 3, i32 0, i32 1>)
  %t = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v2f32.f32.v2f32(<4 x float> %w1, i32 10, float undef, i32 undef, <2 x float> %t, i32 1, float undef, i32 undef, <2 x float> %t, i32 0)
  %3 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %w1, i32 7, float 0x3FFC9FBE80000000, i32 0, float 0x3FFC9FBE80000000, i32 0, float 0x3FFC9FBE80000000, i32 0, float undef, i32 undef)
  %4 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v4f32.v4f32.v2f32.v2f32(<4 x float> undef, i32 15, <4 x float> %w1, i32 2, <4 x float> %w1, i32 0, <2 x float> %t, i32 0, <2 x float> %t, i32 1)
  %5 = load i1 addrspace(2)* @p, align 1
  %6 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.f32.f32.f32(<4 x float> %w1, i32 1, <2 x float> %t, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %7 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.f32.f32.f32(<4 x float> %w1, i32 1, <2 x float> %t, i32 1, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select = select i1 %5, <4 x float> %6, <4 x float> %7
  %8 = fmul <4 x float> %2, %1
  %9 = fmul <4 x float> %8, %4
  %10 = fmul <4 x float> %9, %select
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float> %3, <4 x float> %0, <4 x float> %10)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.v4f32(<4 x float>, <4 x float>, <4 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v2f32.f32.f32.f32(<4 x float>, i32, <2 x float>, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v4f32.v4f32.v2f32.v2f32(<4 x float>, i32, <4 x float>, i32, <4 x float>, i32, <2 x float>, i32, <2 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.v2f32.f32.v2f32(<4 x float>, i32, float, i32, <2 x float>, i32, float, i32, <2 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) nounwind readnone
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r471) output
#version 130
uniform vec4 u;
uniform bool p;
in vec2 t;
const float const25_2f = 1.789;

void main()
{
    vec4 temp21;
    temp21.xy = u.zw;
    vec4 temp22 = u.zwxy;
    vec4 temp23 = u;
    temp23.yw = t.yx;
    vec4 temp24 = u;
    temp24.xyz = vec3(const25_2f, const25_2f, const25_2f);
    vec4 temp26 = vec4(u.z, u.x, t.x, t.y);
    vec4 temp27 = u;
    temp27.x = t.x;
    vec4 temp28 = u;
    temp28.x = t.y;
    vec4 select = p ? temp27 : temp28;
    vec4 temp30 = temp23 * temp22;
    vec4 temp31 = temp30 * temp26;
    vec4 temp32 = temp31 * select;
    vec4 gla_copyout_gl_FragColor = mix(temp24, temp21, temp32);
    gl_FragColor = gla_copyout_gl_FragColor;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r471) output
#version 130
uniform vec4 u;
uniform bool p;
in vec2 t;
const float const25_2f = 1.789;

void main()
{
    vec4 temp21 = u.zwxy;
    vec4 temp22;
    temp22.xy = u.zw;
    vec4 temp23 = u;
    temp23.yw = t.yx;
    vec4 temp24 = u;
    temp24.xyz = vec3(const25_2f, const25_2f, const25_2f);
    vec4 temp26 = vec4(u.z, u.x, t.x, t.y);
    vec4 temp27 = u;
    temp27.x = t.x;
    vec4 temp28 = u;
    temp28.x = t.y;
    vec4 select = p ? temp27 : temp28;
    vec4 temp3019 = temp23 * temp21;
    vec4 temp3120 = temp3019 * temp26;
    vec4 temp3221 = temp3120 * select;
    vec4 gla_copyout_gl_FragColor22 = mix(temp24, temp22, temp3221);
    gl_FragColor = gla_copyout_gl_FragColor22;
    
}
