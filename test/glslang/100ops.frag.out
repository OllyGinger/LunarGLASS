
Top IR:
; ModuleID = 'Top'

@low = external addrspace(2) constant i32
@high = external addrspace(2) constant i32
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed = alloca <4 x float>
  %z = alloca i32
  store i32 3, i32* %z
  %0 = load i32 addrspace(2)* @low, !gla.uniform !1
  %1 = mul i32 2, %0, !gla.precision !6
  %2 = add i32 %1, 1, !gla.precision !6
  %3 = load i32 addrspace(2)* @high, !gla.uniform !3
  %4 = icmp slt i32 %2, %3
  br i1 %4, label %then, label %ifmerge

then:                                             ; preds = %entry
  %5 = load i32* %z
  %z1 = add i32 %5, 1, !gla.precision !6
  store i32 %z1, i32* %z
  br label %ifmerge

ifmerge:                                          ; preds = %entry, %then
  %6 = load i32* %z
  %7 = sitofp i32 %6 to float, !gla.precision !6
  %8 = load <4 x float>* %constructed
  %9 = insertelement <4 x float> undef, float %7, i32 0, !gla.precision !6
  %10 = insertelement <4 x float> %9, float %7, i32 1, !gla.precision !6
  %11 = insertelement <4 x float> %10, float %7, i32 2, !gla.precision !6
  %FragColor_shadow = insertelement <4 x float> %11, float %7, i32 3, !gla.precision !6
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %12 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %12), !gla.output !4
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3}
!gla.outputs = !{!4}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"low", i32 12, i32* @low_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null}
!3 = metadata !{metadata !"high", i32 12, i32* @high_typeProxy, metadata !2}
!4 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1024, null, i32 0}
!6 = metadata !{i32 2}


Bottom IR:
; ModuleID = 'Top'

@low = external addrspace(2) constant i32
@high = external addrspace(2) constant i32

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(2)* @low, align 4, !gla.uniform !1
  %1 = shl i32 %0, 1
  %2 = or i32 %1, 1
  %3 = load i32 addrspace(2)* @high, align 4, !gla.uniform !3
  %4 = icmp slt i32 %2, %3
  %. = select i1 %4, float 4.000000e+00, float 3.000000e+00
  %5 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %., <4 x i32> zeroinitializer)
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %5), !gla.output !4
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3}
!gla.outputs = !{!4}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"low", i32 12, i32* @low_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null}
!3 = metadata !{metadata !"high", i32 12, i32* @high_typeProxy, metadata !2}
!4 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1024, null, i32 0}

***Unsupported functionality: bit-wise OR in version 100
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 100
// LunarGOO output (r722)
precision mediump float; // this will be almost entirely overridden by individual declarations

uniform mediump int low;
uniform mediump int high;
const highp int const23i_1 = 1;
const highp float const26 = 4.0;
const highp float const27 = 3.0;

void main()
{
    int temp21 = low * 2;
    int temp22 = temp21 + const23i_1;
    bool temp24 = temp22 < high;
    float temp25 = temp24 ? const26 : const27;
    vec4 temp28 = vec4(temp25);
    gl_FragColor = temp28;
    
}

#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 100
// LunarGOO output (r722)
precision mediump float; // this will be almost entirely overridden by individual declarations

uniform mediump int low;
uniform mediump int high;
const highp int const23i_1 = 1;
const highp float const26 = 4.0;
const highp float const27 = 3.0;

void main()
{
    int temp211 = low * 2;
    int temp2227 = temp211 + const23i_1;
    bool temp243 = temp2227 < high;
    float temp25 = temp243 ? const26 : const27;
    vec4 temp28 = vec4(temp25);
    gl_FragColor = temp28;
    
}

