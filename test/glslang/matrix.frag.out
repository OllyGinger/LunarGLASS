
Top IR:
; ModuleID = 'Top'

@FragColor_shadow = internal global <4 x float> zeroinitializer
@un34 = external addrspace(2) constant [4 x <4 x float>]
@Color_shadow = internal global <3 x float> zeroinitializer
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@v_shadow = internal global <4 x float> zeroinitializer
@u_shadow = internal global <4 x float> zeroinitializer
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %constructed206 = alloca [4 x <4 x float>]
  %constructed159 = alloca [4 x <4 x float>]
  %constructed132 = alloca [4 x <4 x float>]
  %m34 = alloca [4 x <4 x float>]
  %constructed5 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %0 = load <4 x float> addrspace(2)* getelementptr inbounds ([4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1)
  %1 = load <4 x float>* %constructed
  %2 = extractelement <4 x float> %0, i32 0
  %3 = insertelement <4 x float> %1, float %2, i32 0
  %4 = extractelement <4 x float> %0, i32 1
  %5 = insertelement <4 x float> %3, float %4, i32 1
  %6 = extractelement <4 x float> %0, i32 2
  %7 = insertelement <4 x float> %5, float %6, i32 2
  %8 = extractelement <4 x float> %0, i32 3
  %FragColor_shadow = insertelement <4 x float> %7, float %8, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  %Color__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 -1, i32 1)
  store <3 x float> %Color__, <3 x float>* @Color_shadow
  %9 = load <3 x float>* @Color_shadow
  %__matrix = load [3 x <3 x float>] addrspace(2)* @colorTransform
  %10 = alloca <3 x float>
  %11 = load <3 x float>* %10
  %__column = extractvalue [3 x <3 x float>] %__matrix, 0
  %__dot = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %9, <3 x float> %__column)
  %12 = insertelement <3 x float> %11, float %__dot, i32 0
  %__column1 = extractvalue [3 x <3 x float>] %__matrix, 1
  %__dot2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %9, <3 x float> %__column1)
  %13 = insertelement <3 x float> %12, float %__dot2, i32 1
  %__column3 = extractvalue [3 x <3 x float>] %__matrix, 2
  %__dot4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %9, <3 x float> %__column3)
  %14 = insertelement <3 x float> %13, float %__dot4, i32 2
  %15 = load <4 x float>* %constructed5
  %16 = extractelement <3 x float> %14, i32 0
  %17 = insertelement <4 x float> %15, float %16, i32 0
  %18 = extractelement <3 x float> %14, i32 1
  %19 = insertelement <4 x float> %17, float %18, i32 1
  %20 = extractelement <3 x float> %14, i32 2
  %21 = insertelement <4 x float> %19, float %20, i32 2
  %22 = insertelement <4 x float> %21, float 1.000000e+00, i32 3
  %23 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow6 = fadd <4 x float> %23, %22
  store <4 x float> %FragColor_shadow6, <4 x float>* @FragColor_shadow
  %__matrix7 = load [4 x <4 x float>] addrspace(2)* @m
  %__matrix8 = load [4 x <4 x float>] addrspace(2)* @n
  %element1 = extractvalue [4 x <4 x float>] %__matrix7, 0
  %element2 = extractvalue [4 x <4 x float>] %__matrix8, 0
  %24 = fcmp one <4 x float> %element1, %element2
  %25 = call i1 @llvm.gla.any.v4i1(<4 x i1> %24)
  %element19 = extractvalue [4 x <4 x float>] %__matrix7, 1
  %element210 = extractvalue [4 x <4 x float>] %__matrix8, 1
  %26 = fcmp one <4 x float> %element19, %element210
  %27 = call i1 @llvm.gla.any.v4i1(<4 x i1> %26)
  %28 = or i1 %25, %27
  %element111 = extractvalue [4 x <4 x float>] %__matrix7, 2
  %element212 = extractvalue [4 x <4 x float>] %__matrix8, 2
  %29 = fcmp one <4 x float> %element111, %element212
  %30 = call i1 @llvm.gla.any.v4i1(<4 x i1> %29)
  %31 = or i1 %28, %30
  %element113 = extractvalue [4 x <4 x float>] %__matrix7, 3
  %element214 = extractvalue [4 x <4 x float>] %__matrix8, 3
  %32 = fcmp one <4 x float> %element113, %element214
  %33 = call i1 @llvm.gla.any.v4i1(<4 x i1> %32)
  %34 = or i1 %31, %33
  br i1 %34, label %then, label %else

then:                                             ; preds = %entry
  %v__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__, <4 x float>* @v_shadow
  %35 = load <4 x float>* @v_shadow
  %36 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow15 = fadd <4 x float> %36, %35
  store <4 x float> %FragColor_shadow15, <4 x float>* @FragColor_shadow
  br label %ifmerge

else:                                             ; preds = %entry
  %__matrix16 = load [4 x <4 x float>] addrspace(2)* @m
  %v__17 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__17, <4 x float>* @v_shadow
  %37 = load <4 x float>* @v_shadow
  %38 = alloca <4 x float>
  %39 = load <4 x float>* %38
  %__component = extractelement <4 x float> %37, i32 0
  %__component18 = extractelement <4 x float> %37, i32 1
  %__component19 = extractelement <4 x float> %37, i32 2
  %__component20 = extractelement <4 x float> %37, i32 3
  %__column21 = extractvalue [4 x <4 x float>] %__matrix16, 0
  %__element = extractelement <4 x float> %__column21, i32 0
  %__product = fmul float %__element, %__component
  %__column22 = extractvalue [4 x <4 x float>] %__matrix16, 1
  %__element23 = extractelement <4 x float> %__column22, i32 0
  %__product24 = fmul float %__element23, %__component18
  %__dotProduct = fadd float %__product, %__product24
  %__column25 = extractvalue [4 x <4 x float>] %__matrix16, 2
  %__element26 = extractelement <4 x float> %__column25, i32 0
  %__product27 = fmul float %__element26, %__component19
  %__dotProduct28 = fadd float %__dotProduct, %__product27
  %__column29 = extractvalue [4 x <4 x float>] %__matrix16, 3
  %__element30 = extractelement <4 x float> %__column29, i32 0
  %__product31 = fmul float %__element30, %__component20
  %__dotProduct32 = fadd float %__dotProduct28, %__product31
  %40 = insertelement <4 x float> %39, float %__dotProduct32, i32 0
  %__column33 = extractvalue [4 x <4 x float>] %__matrix16, 0
  %__element34 = extractelement <4 x float> %__column33, i32 1
  %__product35 = fmul float %__element34, %__component
  %__column36 = extractvalue [4 x <4 x float>] %__matrix16, 1
  %__element37 = extractelement <4 x float> %__column36, i32 1
  %__product38 = fmul float %__element37, %__component18
  %__dotProduct39 = fadd float %__product35, %__product38
  %__column40 = extractvalue [4 x <4 x float>] %__matrix16, 2
  %__element41 = extractelement <4 x float> %__column40, i32 1
  %__product42 = fmul float %__element41, %__component19
  %__dotProduct43 = fadd float %__dotProduct39, %__product42
  %__column44 = extractvalue [4 x <4 x float>] %__matrix16, 3
  %__element45 = extractelement <4 x float> %__column44, i32 1
  %__product46 = fmul float %__element45, %__component20
  %__dotProduct47 = fadd float %__dotProduct43, %__product46
  %41 = insertelement <4 x float> %40, float %__dotProduct47, i32 1
  %__column48 = extractvalue [4 x <4 x float>] %__matrix16, 0
  %__element49 = extractelement <4 x float> %__column48, i32 2
  %__product50 = fmul float %__element49, %__component
  %__column51 = extractvalue [4 x <4 x float>] %__matrix16, 1
  %__element52 = extractelement <4 x float> %__column51, i32 2
  %__product53 = fmul float %__element52, %__component18
  %__dotProduct54 = fadd float %__product50, %__product53
  %__column55 = extractvalue [4 x <4 x float>] %__matrix16, 2
  %__element56 = extractelement <4 x float> %__column55, i32 2
  %__product57 = fmul float %__element56, %__component19
  %__dotProduct58 = fadd float %__dotProduct54, %__product57
  %__column59 = extractvalue [4 x <4 x float>] %__matrix16, 3
  %__element60 = extractelement <4 x float> %__column59, i32 2
  %__product61 = fmul float %__element60, %__component20
  %__dotProduct62 = fadd float %__dotProduct58, %__product61
  %42 = insertelement <4 x float> %41, float %__dotProduct62, i32 2
  %__column63 = extractvalue [4 x <4 x float>] %__matrix16, 0
  %__element64 = extractelement <4 x float> %__column63, i32 3
  %__product65 = fmul float %__element64, %__component
  %__column66 = extractvalue [4 x <4 x float>] %__matrix16, 1
  %__element67 = extractelement <4 x float> %__column66, i32 3
  %__product68 = fmul float %__element67, %__component18
  %__dotProduct69 = fadd float %__product65, %__product68
  %__column70 = extractvalue [4 x <4 x float>] %__matrix16, 2
  %__element71 = extractelement <4 x float> %__column70, i32 3
  %__product72 = fmul float %__element71, %__component19
  %__dotProduct73 = fadd float %__dotProduct69, %__product72
  %__column74 = extractvalue [4 x <4 x float>] %__matrix16, 3
  %__element75 = extractelement <4 x float> %__column74, i32 3
  %__product76 = fmul float %__element75, %__component20
  %__dotProduct77 = fadd float %__dotProduct73, %__product76
  %43 = insertelement <4 x float> %42, float %__dotProduct77, i32 3
  %44 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow78 = fadd <4 x float> %44, %43
  store <4 x float> %FragColor_shadow78, <4 x float>* @FragColor_shadow
  %v__79 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__79, <4 x float>* @v_shadow
  %45 = load <4 x float>* @v_shadow
  %__matrix80 = load [4 x <4 x float>] addrspace(2)* @m
  %__matrix81 = load [4 x <4 x float>] addrspace(2)* @n
  %46 = alloca [4 x <4 x float>]
  %47 = load [4 x <4 x float>]* %46
  %__leftColumn = extractvalue [4 x <4 x float>] %__matrix80, 0
  %__rightColumn = extractvalue [4 x <4 x float>] %__matrix81, 0
  %__column82 = fsub <4 x float> %__leftColumn, %__rightColumn
  %48 = insertvalue [4 x <4 x float>] %47, <4 x float> %__column82, 0
  %__leftColumn83 = extractvalue [4 x <4 x float>] %__matrix80, 1
  %__rightColumn84 = extractvalue [4 x <4 x float>] %__matrix81, 1
  %__column85 = fsub <4 x float> %__leftColumn83, %__rightColumn84
  %49 = insertvalue [4 x <4 x float>] %48, <4 x float> %__column85, 1
  %__leftColumn86 = extractvalue [4 x <4 x float>] %__matrix80, 2
  %__rightColumn87 = extractvalue [4 x <4 x float>] %__matrix81, 2
  %__column88 = fsub <4 x float> %__leftColumn86, %__rightColumn87
  %50 = insertvalue [4 x <4 x float>] %49, <4 x float> %__column88, 2
  %__leftColumn89 = extractvalue [4 x <4 x float>] %__matrix80, 3
  %__rightColumn90 = extractvalue [4 x <4 x float>] %__matrix81, 3
  %__column91 = fsub <4 x float> %__leftColumn89, %__rightColumn90
  %51 = insertvalue [4 x <4 x float>] %50, <4 x float> %__column91, 3
  %52 = alloca <4 x float>
  %53 = load <4 x float>* %52
  %__column92 = extractvalue [4 x <4 x float>] %51, 0
  %__dot93 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %45, <4 x float> %__column92)
  %54 = insertelement <4 x float> %53, float %__dot93, i32 0
  %__column94 = extractvalue [4 x <4 x float>] %51, 1
  %__dot95 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %45, <4 x float> %__column94)
  %55 = insertelement <4 x float> %54, float %__dot95, i32 1
  %__column96 = extractvalue [4 x <4 x float>] %51, 2
  %__dot97 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %45, <4 x float> %__column96)
  %56 = insertelement <4 x float> %55, float %__dot97, i32 2
  %__column98 = extractvalue [4 x <4 x float>] %51, 3
  %__dot99 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %45, <4 x float> %__column98)
  %57 = insertelement <4 x float> %56, float %__dot99, i32 3
  %58 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow100 = fadd <4 x float> %58, %57
  store <4 x float> %FragColor_shadow100, <4 x float>* @FragColor_shadow
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %v__101 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__101, <4 x float>* @v_shadow
  %59 = load <4 x float>* @v_shadow
  %60 = extractelement <4 x float> %59, i32 0
  %u__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__, <4 x float>* @u_shadow
  %61 = load <4 x float>* @u_shadow
  %62 = extractelement <4 x float> %61, i32 0
  %63 = fmul float %60, %62
  %v__102 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__102, <4 x float>* @v_shadow
  %64 = load <4 x float>* @v_shadow
  %65 = extractelement <4 x float> %64, i32 0
  %u__103 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__103, <4 x float>* @u_shadow
  %66 = load <4 x float>* @u_shadow
  %67 = extractelement <4 x float> %66, i32 1
  %68 = fmul float %65, %67
  %v__104 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__104, <4 x float>* @v_shadow
  %69 = load <4 x float>* @v_shadow
  %70 = extractelement <4 x float> %69, i32 0
  %u__105 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__105, <4 x float>* @u_shadow
  %71 = load <4 x float>* @u_shadow
  %72 = extractelement <4 x float> %71, i32 2
  %73 = fmul float %70, %72
  %v__106 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__106, <4 x float>* @v_shadow
  %74 = load <4 x float>* @v_shadow
  %75 = extractelement <4 x float> %74, i32 0
  %u__107 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__107, <4 x float>* @u_shadow
  %76 = load <4 x float>* @u_shadow
  %77 = extractelement <4 x float> %76, i32 3
  %78 = fmul float %75, %77
  %v__108 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__108, <4 x float>* @v_shadow
  %79 = load <4 x float>* @v_shadow
  %80 = extractelement <4 x float> %79, i32 1
  %u__109 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__109, <4 x float>* @u_shadow
  %81 = load <4 x float>* @u_shadow
  %82 = extractelement <4 x float> %81, i32 0
  %83 = fmul float %80, %82
  %v__110 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__110, <4 x float>* @v_shadow
  %84 = load <4 x float>* @v_shadow
  %85 = extractelement <4 x float> %84, i32 1
  %u__111 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__111, <4 x float>* @u_shadow
  %86 = load <4 x float>* @u_shadow
  %87 = extractelement <4 x float> %86, i32 1
  %88 = fmul float %85, %87
  %v__112 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__112, <4 x float>* @v_shadow
  %89 = load <4 x float>* @v_shadow
  %90 = extractelement <4 x float> %89, i32 1
  %u__113 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__113, <4 x float>* @u_shadow
  %91 = load <4 x float>* @u_shadow
  %92 = extractelement <4 x float> %91, i32 2
  %93 = fmul float %90, %92
  %v__114 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__114, <4 x float>* @v_shadow
  %94 = load <4 x float>* @v_shadow
  %95 = extractelement <4 x float> %94, i32 1
  %u__115 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__115, <4 x float>* @u_shadow
  %96 = load <4 x float>* @u_shadow
  %97 = extractelement <4 x float> %96, i32 3
  %98 = fmul float %95, %97
  %v__116 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__116, <4 x float>* @v_shadow
  %99 = load <4 x float>* @v_shadow
  %100 = extractelement <4 x float> %99, i32 2
  %u__117 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__117, <4 x float>* @u_shadow
  %101 = load <4 x float>* @u_shadow
  %102 = extractelement <4 x float> %101, i32 0
  %103 = fmul float %100, %102
  %v__118 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__118, <4 x float>* @v_shadow
  %104 = load <4 x float>* @v_shadow
  %105 = extractelement <4 x float> %104, i32 2
  %u__119 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__119, <4 x float>* @u_shadow
  %106 = load <4 x float>* @u_shadow
  %107 = extractelement <4 x float> %106, i32 1
  %108 = fmul float %105, %107
  %v__120 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__120, <4 x float>* @v_shadow
  %109 = load <4 x float>* @v_shadow
  %110 = extractelement <4 x float> %109, i32 2
  %u__121 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__121, <4 x float>* @u_shadow
  %111 = load <4 x float>* @u_shadow
  %112 = extractelement <4 x float> %111, i32 2
  %113 = fmul float %110, %112
  %v__122 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__122, <4 x float>* @v_shadow
  %114 = load <4 x float>* @v_shadow
  %115 = extractelement <4 x float> %114, i32 2
  %u__123 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__123, <4 x float>* @u_shadow
  %116 = load <4 x float>* @u_shadow
  %117 = extractelement <4 x float> %116, i32 3
  %118 = fmul float %115, %117
  %v__124 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__124, <4 x float>* @v_shadow
  %119 = load <4 x float>* @v_shadow
  %120 = extractelement <4 x float> %119, i32 3
  %u__125 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__125, <4 x float>* @u_shadow
  %121 = load <4 x float>* @u_shadow
  %122 = extractelement <4 x float> %121, i32 0
  %123 = fmul float %120, %122
  %v__126 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__126, <4 x float>* @v_shadow
  %124 = load <4 x float>* @v_shadow
  %125 = extractelement <4 x float> %124, i32 3
  %u__127 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__127, <4 x float>* @u_shadow
  %126 = load <4 x float>* @u_shadow
  %127 = extractelement <4 x float> %126, i32 1
  %128 = fmul float %125, %127
  %v__128 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__128, <4 x float>* @v_shadow
  %129 = load <4 x float>* @v_shadow
  %130 = extractelement <4 x float> %129, i32 3
  %u__129 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__129, <4 x float>* @u_shadow
  %131 = load <4 x float>* @u_shadow
  %132 = extractelement <4 x float> %131, i32 2
  %133 = fmul float %130, %132
  %v__130 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__130, <4 x float>* @v_shadow
  %134 = load <4 x float>* @v_shadow
  %135 = extractelement <4 x float> %134, i32 3
  %u__131 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__131, <4 x float>* @u_shadow
  %136 = load <4 x float>* @u_shadow
  %137 = extractelement <4 x float> %136, i32 3
  %138 = fmul float %135, %137
  %__matrix133 = load [4 x <4 x float>]* %constructed132
  %__column134 = extractvalue [4 x <4 x float>] %__matrix133, 0
  %__column135 = insertelement <4 x float> %__column134, float %63, i32 0
  %__column136 = insertelement <4 x float> %__column135, float %68, i32 1
  %__column137 = insertelement <4 x float> %__column136, float %73, i32 2
  %__column138 = insertelement <4 x float> %__column137, float %78, i32 3
  %__matrix139 = insertvalue [4 x <4 x float>] %__matrix133, <4 x float> %__column138, 0
  %__column140 = extractvalue [4 x <4 x float>] %__matrix133, 1
  %__column141 = insertelement <4 x float> %__column140, float %83, i32 0
  %__column142 = insertelement <4 x float> %__column141, float %88, i32 1
  %__column143 = insertelement <4 x float> %__column142, float %93, i32 2
  %__column144 = insertelement <4 x float> %__column143, float %98, i32 3
  %__matrix145 = insertvalue [4 x <4 x float>] %__matrix139, <4 x float> %__column144, 1
  %__column146 = extractvalue [4 x <4 x float>] %__matrix133, 2
  %__column147 = insertelement <4 x float> %__column146, float %103, i32 0
  %__column148 = insertelement <4 x float> %__column147, float %108, i32 1
  %__column149 = insertelement <4 x float> %__column148, float %113, i32 2
  %__column150 = insertelement <4 x float> %__column149, float %118, i32 3
  %__matrix151 = insertvalue [4 x <4 x float>] %__matrix145, <4 x float> %__column150, 2
  %__column152 = extractvalue [4 x <4 x float>] %__matrix133, 3
  %__column153 = insertelement <4 x float> %__column152, float %123, i32 0
  %__column154 = insertelement <4 x float> %__column153, float %128, i32 1
  %__column155 = insertelement <4 x float> %__column154, float %133, i32 2
  %__column156 = insertelement <4 x float> %__column155, float %138, i32 3
  %__matrix157 = insertvalue [4 x <4 x float>] %__matrix151, <4 x float> %__column156, 3
  store [4 x <4 x float>] %__matrix157, [4 x <4 x float>]* %m34
  %v__158 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__158, <4 x float>* @v_shadow
  %139 = load <4 x float>* @v_shadow
  %140 = extractelement <4 x float> %139, i32 0
  %__matrix160 = load [4 x <4 x float>]* %constructed159
  %__column161 = extractvalue [4 x <4 x float>] %__matrix160, 0
  %__column162 = insertelement <4 x float> %__column161, float %140, i32 0
  %__column163 = insertelement <4 x float> %__column162, float 0.000000e+00, i32 1
  %__column164 = insertelement <4 x float> %__column163, float 0.000000e+00, i32 2
  %__column165 = insertelement <4 x float> %__column164, float 0.000000e+00, i32 3
  %__matrix166 = insertvalue [4 x <4 x float>] %__matrix160, <4 x float> %__column165, 0
  %__column167 = extractvalue [4 x <4 x float>] %__matrix160, 1
  %__column168 = insertelement <4 x float> %__column167, float 0.000000e+00, i32 0
  %__column169 = insertelement <4 x float> %__column168, float %140, i32 1
  %__column170 = insertelement <4 x float> %__column169, float 0.000000e+00, i32 2
  %__column171 = insertelement <4 x float> %__column170, float 0.000000e+00, i32 3
  %__matrix172 = insertvalue [4 x <4 x float>] %__matrix166, <4 x float> %__column171, 1
  %__column173 = extractvalue [4 x <4 x float>] %__matrix160, 2
  %__column174 = insertelement <4 x float> %__column173, float 0.000000e+00, i32 0
  %__column175 = insertelement <4 x float> %__column174, float 0.000000e+00, i32 1
  %__column176 = insertelement <4 x float> %__column175, float %140, i32 2
  %__column177 = insertelement <4 x float> %__column176, float 0.000000e+00, i32 3
  %__matrix178 = insertvalue [4 x <4 x float>] %__matrix172, <4 x float> %__column177, 2
  %__column179 = extractvalue [4 x <4 x float>] %__matrix160, 3
  %__column180 = insertelement <4 x float> %__column179, float 0.000000e+00, i32 0
  %__column181 = insertelement <4 x float> %__column180, float 0.000000e+00, i32 1
  %__column182 = insertelement <4 x float> %__column181, float 0.000000e+00, i32 2
  %__column183 = insertelement <4 x float> %__column182, float %140, i32 3
  %__matrix184 = insertvalue [4 x <4 x float>] %__matrix178, <4 x float> %__column183, 3
  %__matrix185 = load [4 x <4 x float>]* %m34
  %141 = alloca [4 x <4 x float>]
  %142 = load [4 x <4 x float>]* %141
  %__leftColumn186 = extractvalue [4 x <4 x float>] %__matrix185, 0
  %__rightColumn187 = extractvalue [4 x <4 x float>] %__matrix184, 0
  %__column188 = fadd <4 x float> %__leftColumn186, %__rightColumn187
  %143 = insertvalue [4 x <4 x float>] %142, <4 x float> %__column188, 0
  %__leftColumn189 = extractvalue [4 x <4 x float>] %__matrix185, 1
  %__rightColumn190 = extractvalue [4 x <4 x float>] %__matrix184, 1
  %__column191 = fadd <4 x float> %__leftColumn189, %__rightColumn190
  %144 = insertvalue [4 x <4 x float>] %143, <4 x float> %__column191, 1
  %__leftColumn192 = extractvalue [4 x <4 x float>] %__matrix185, 2
  %__rightColumn193 = extractvalue [4 x <4 x float>] %__matrix184, 2
  %__column194 = fadd <4 x float> %__leftColumn192, %__rightColumn193
  %145 = insertvalue [4 x <4 x float>] %144, <4 x float> %__column194, 2
  %__leftColumn195 = extractvalue [4 x <4 x float>] %__matrix185, 3
  %__rightColumn196 = extractvalue [4 x <4 x float>] %__matrix184, 3
  %__column197 = fadd <4 x float> %__leftColumn195, %__rightColumn196
  %m34198 = insertvalue [4 x <4 x float>] %145, <4 x float> %__column197, 3
  store [4 x <4 x float>] %m34198, [4 x <4 x float>]* %m34
  %u__199 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__199, <4 x float>* @u_shadow
  %146 = load <4 x float>* @u_shadow
  %u__200 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__200, <4 x float>* @u_shadow
  %147 = load <4 x float>* @u_shadow
  %148 = extractelement <4 x float> %147, i32 0
  %u__201 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__201, <4 x float>* @u_shadow
  %149 = load <4 x float>* @u_shadow
  %u__202 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__202, <4 x float>* @u_shadow
  %150 = load <4 x float>* @u_shadow
  %151 = extractelement <4 x float> %150, i32 0
  %u__203 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__203, <4 x float>* @u_shadow
  %152 = load <4 x float>* @u_shadow
  %u__204 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__204, <4 x float>* @u_shadow
  %153 = load <4 x float>* @u_shadow
  %154 = extractelement <4 x float> %153, i32 0
  %u__205 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__205, <4 x float>* @u_shadow
  %155 = load <4 x float>* @u_shadow
  %156 = extractelement <4 x float> %155, i32 0
  %__matrix207 = load [4 x <4 x float>]* %constructed206
  %__element208 = extractelement <4 x float> %146, i32 0
  %__element209 = extractelement <4 x float> %146, i32 1
  %__element210 = extractelement <4 x float> %146, i32 2
  %__element211 = extractelement <4 x float> %146, i32 3
  %__element212 = extractelement <4 x float> %149, i32 0
  %__element213 = extractelement <4 x float> %149, i32 1
  %__element214 = extractelement <4 x float> %149, i32 2
  %__element215 = extractelement <4 x float> %149, i32 3
  %__element216 = extractelement <4 x float> %152, i32 0
  %__element217 = extractelement <4 x float> %152, i32 1
  %__element218 = extractelement <4 x float> %152, i32 2
  %__element219 = extractelement <4 x float> %152, i32 3
  %__column220 = extractvalue [4 x <4 x float>] %__matrix207, 0
  %__column221 = insertelement <4 x float> %__column220, float %__element208, i32 0
  %__column222 = insertelement <4 x float> %__column221, float %__element209, i32 1
  %__column223 = insertelement <4 x float> %__column222, float %__element210, i32 2
  %__column224 = insertelement <4 x float> %__column223, float %__element211, i32 3
  %__matrix225 = insertvalue [4 x <4 x float>] %__matrix207, <4 x float> %__column224, 0
  %__column226 = extractvalue [4 x <4 x float>] %__matrix207, 1
  %__column227 = insertelement <4 x float> %__column226, float %148, i32 0
  %__column228 = insertelement <4 x float> %__column227, float %__element212, i32 1
  %__column229 = insertelement <4 x float> %__column228, float %__element213, i32 2
  %__column230 = insertelement <4 x float> %__column229, float %__element214, i32 3
  %__matrix231 = insertvalue [4 x <4 x float>] %__matrix225, <4 x float> %__column230, 1
  %__column232 = extractvalue [4 x <4 x float>] %__matrix207, 2
  %__column233 = insertelement <4 x float> %__column232, float %__element215, i32 0
  %__column234 = insertelement <4 x float> %__column233, float %151, i32 1
  %__column235 = insertelement <4 x float> %__column234, float %__element216, i32 2
  %__column236 = insertelement <4 x float> %__column235, float %__element217, i32 3
  %__matrix237 = insertvalue [4 x <4 x float>] %__matrix231, <4 x float> %__column236, 2
  %__column238 = extractvalue [4 x <4 x float>] %__matrix207, 3
  %__column239 = insertelement <4 x float> %__column238, float %__element218, i32 0
  %__column240 = insertelement <4 x float> %__column239, float %__element219, i32 1
  %__column241 = insertelement <4 x float> %__column240, float %154, i32 2
  %__column242 = insertelement <4 x float> %__column241, float %156, i32 3
  %__matrix243 = insertvalue [4 x <4 x float>] %__matrix237, <4 x float> %__column242, 3
  %__matrix244 = load [4 x <4 x float>]* %m34
  %157 = alloca [4 x <4 x float>]
  %158 = load [4 x <4 x float>]* %157
  %__leftColumn245 = extractvalue [4 x <4 x float>] %__matrix244, 0
  %__rightColumn246 = extractvalue [4 x <4 x float>] %__matrix243, 0
  %__column247 = fadd <4 x float> %__leftColumn245, %__rightColumn246
  %159 = insertvalue [4 x <4 x float>] %158, <4 x float> %__column247, 0
  %__leftColumn248 = extractvalue [4 x <4 x float>] %__matrix244, 1
  %__rightColumn249 = extractvalue [4 x <4 x float>] %__matrix243, 1
  %__column250 = fadd <4 x float> %__leftColumn248, %__rightColumn249
  %160 = insertvalue [4 x <4 x float>] %159, <4 x float> %__column250, 1
  %__leftColumn251 = extractvalue [4 x <4 x float>] %__matrix244, 2
  %__rightColumn252 = extractvalue [4 x <4 x float>] %__matrix243, 2
  %__column253 = fadd <4 x float> %__leftColumn251, %__rightColumn252
  %161 = insertvalue [4 x <4 x float>] %160, <4 x float> %__column253, 2
  %__leftColumn254 = extractvalue [4 x <4 x float>] %__matrix244, 3
  %__rightColumn255 = extractvalue [4 x <4 x float>] %__matrix243, 3
  %__column256 = fadd <4 x float> %__leftColumn254, %__rightColumn255
  %m34257 = insertvalue [4 x <4 x float>] %161, <4 x float> %__column256, 3
  store [4 x <4 x float>] %m34257, [4 x <4 x float>]* %m34
  %__matrix258 = load [4 x <4 x float>]* %m34
  %__matrix259 = load [4 x <4 x float>] addrspace(2)* @un34
  %element1260 = extractvalue [4 x <4 x float>] %__matrix258, 0
  %element2261 = extractvalue [4 x <4 x float>] %__matrix259, 0
  %162 = fcmp oeq <4 x float> %element1260, %element2261
  %163 = call i1 @llvm.gla.all.v4i1(<4 x i1> %162)
  %element1262 = extractvalue [4 x <4 x float>] %__matrix258, 1
  %element2263 = extractvalue [4 x <4 x float>] %__matrix259, 1
  %164 = fcmp oeq <4 x float> %element1262, %element2263
  %165 = call i1 @llvm.gla.all.v4i1(<4 x i1> %164)
  %166 = and i1 %163, %165
  %element1264 = extractvalue [4 x <4 x float>] %__matrix258, 2
  %element2265 = extractvalue [4 x <4 x float>] %__matrix259, 2
  %167 = fcmp oeq <4 x float> %element1264, %element2265
  %168 = call i1 @llvm.gla.all.v4i1(<4 x i1> %167)
  %169 = and i1 %166, %168
  %element1266 = extractvalue [4 x <4 x float>] %__matrix258, 3
  %element2267 = extractvalue [4 x <4 x float>] %__matrix259, 3
  %170 = fcmp oeq <4 x float> %element1266, %element2267
  %171 = call i1 @llvm.gla.all.v4i1(<4 x i1> %170)
  %172 = and i1 %169, %171
  br i1 %172, label %then268, label %else336

then268:                                          ; preds = %ifmerge
  %__matrix269 = load [4 x <4 x float>]* %m34
  %u__270 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__270, <4 x float>* @u_shadow
  %173 = load <4 x float>* @u_shadow
  %174 = alloca <4 x float>
  %175 = load <4 x float>* %174
  %__component271 = extractelement <4 x float> %173, i32 0
  %__component272 = extractelement <4 x float> %173, i32 1
  %__component273 = extractelement <4 x float> %173, i32 2
  %__component274 = extractelement <4 x float> %173, i32 3
  %__column275 = extractvalue [4 x <4 x float>] %__matrix269, 0
  %__element276 = extractelement <4 x float> %__column275, i32 0
  %__product277 = fmul float %__element276, %__component271
  %__column278 = extractvalue [4 x <4 x float>] %__matrix269, 1
  %__element279 = extractelement <4 x float> %__column278, i32 0
  %__product280 = fmul float %__element279, %__component272
  %__dotProduct281 = fadd float %__product277, %__product280
  %__column282 = extractvalue [4 x <4 x float>] %__matrix269, 2
  %__element283 = extractelement <4 x float> %__column282, i32 0
  %__product284 = fmul float %__element283, %__component273
  %__dotProduct285 = fadd float %__dotProduct281, %__product284
  %__column286 = extractvalue [4 x <4 x float>] %__matrix269, 3
  %__element287 = extractelement <4 x float> %__column286, i32 0
  %__product288 = fmul float %__element287, %__component274
  %__dotProduct289 = fadd float %__dotProduct285, %__product288
  %176 = insertelement <4 x float> %175, float %__dotProduct289, i32 0
  %__column290 = extractvalue [4 x <4 x float>] %__matrix269, 0
  %__element291 = extractelement <4 x float> %__column290, i32 1
  %__product292 = fmul float %__element291, %__component271
  %__column293 = extractvalue [4 x <4 x float>] %__matrix269, 1
  %__element294 = extractelement <4 x float> %__column293, i32 1
  %__product295 = fmul float %__element294, %__component272
  %__dotProduct296 = fadd float %__product292, %__product295
  %__column297 = extractvalue [4 x <4 x float>] %__matrix269, 2
  %__element298 = extractelement <4 x float> %__column297, i32 1
  %__product299 = fmul float %__element298, %__component273
  %__dotProduct300 = fadd float %__dotProduct296, %__product299
  %__column301 = extractvalue [4 x <4 x float>] %__matrix269, 3
  %__element302 = extractelement <4 x float> %__column301, i32 1
  %__product303 = fmul float %__element302, %__component274
  %__dotProduct304 = fadd float %__dotProduct300, %__product303
  %177 = insertelement <4 x float> %176, float %__dotProduct304, i32 1
  %__column305 = extractvalue [4 x <4 x float>] %__matrix269, 0
  %__element306 = extractelement <4 x float> %__column305, i32 2
  %__product307 = fmul float %__element306, %__component271
  %__column308 = extractvalue [4 x <4 x float>] %__matrix269, 1
  %__element309 = extractelement <4 x float> %__column308, i32 2
  %__product310 = fmul float %__element309, %__component272
  %__dotProduct311 = fadd float %__product307, %__product310
  %__column312 = extractvalue [4 x <4 x float>] %__matrix269, 2
  %__element313 = extractelement <4 x float> %__column312, i32 2
  %__product314 = fmul float %__element313, %__component273
  %__dotProduct315 = fadd float %__dotProduct311, %__product314
  %__column316 = extractvalue [4 x <4 x float>] %__matrix269, 3
  %__element317 = extractelement <4 x float> %__column316, i32 2
  %__product318 = fmul float %__element317, %__component274
  %__dotProduct319 = fadd float %__dotProduct315, %__product318
  %178 = insertelement <4 x float> %177, float %__dotProduct319, i32 2
  %__column320 = extractvalue [4 x <4 x float>] %__matrix269, 0
  %__element321 = extractelement <4 x float> %__column320, i32 3
  %__product322 = fmul float %__element321, %__component271
  %__column323 = extractvalue [4 x <4 x float>] %__matrix269, 1
  %__element324 = extractelement <4 x float> %__column323, i32 3
  %__product325 = fmul float %__element324, %__component272
  %__dotProduct326 = fadd float %__product322, %__product325
  %__column327 = extractvalue [4 x <4 x float>] %__matrix269, 2
  %__element328 = extractelement <4 x float> %__column327, i32 3
  %__product329 = fmul float %__element328, %__component273
  %__dotProduct330 = fadd float %__dotProduct326, %__product329
  %__column331 = extractvalue [4 x <4 x float>] %__matrix269, 3
  %__element332 = extractelement <4 x float> %__column331, i32 3
  %__product333 = fmul float %__element332, %__component274
  %__dotProduct334 = fadd float %__dotProduct330, %__product333
  %179 = insertelement <4 x float> %178, float %__dotProduct334, i32 3
  %180 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow335 = fadd <4 x float> %180, %179
  store <4 x float> %FragColor_shadow335, <4 x float>* @FragColor_shadow
  br label %ifmerge731

else336:                                          ; preds = %ifmerge
  %__matrix337 = load [4 x <4 x float>] addrspace(2)* @un34
  %__matrix338 = load [4 x <4 x float>] addrspace(2)* @um43
  %181 = alloca [4 x <4 x float>]
  %__resultMatrix = load [4 x <4 x float>]* %181
  %182 = alloca <4 x float>
  %__tempColumn = load <4 x float>* %182
  %__rightColumn339 = extractvalue [4 x <4 x float>] %__matrix338, 0
  %__leftColumn340 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp = extractelement <4 x float> %__leftColumn340, i32 0
  %__rightComp = extractelement <4 x float> %__rightColumn339, i32 0
  %__product341 = fmul float %__leftComp, %__rightComp
  %__leftColumn342 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp343 = extractelement <4 x float> %__leftColumn342, i32 0
  %__rightComp344 = extractelement <4 x float> %__rightColumn339, i32 1
  %__product345 = fmul float %__leftComp343, %__rightComp344
  %__dotProduct346 = fadd float %__product341, %__product345
  %__leftColumn347 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp348 = extractelement <4 x float> %__leftColumn347, i32 0
  %__rightComp349 = extractelement <4 x float> %__rightColumn339, i32 2
  %__product350 = fmul float %__leftComp348, %__rightComp349
  %__dotProduct351 = fadd float %__dotProduct346, %__product350
  %__leftColumn352 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp353 = extractelement <4 x float> %__leftColumn352, i32 0
  %__rightComp354 = extractelement <4 x float> %__rightColumn339, i32 3
  %__product355 = fmul float %__leftComp353, %__rightComp354
  %__dotProduct356 = fadd float %__dotProduct351, %__product355
  %__column357 = insertelement <4 x float> %__tempColumn, float %__dotProduct356, i32 0
  %__leftColumn358 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp359 = extractelement <4 x float> %__leftColumn358, i32 1
  %__rightComp360 = extractelement <4 x float> %__rightColumn339, i32 0
  %__product361 = fmul float %__leftComp359, %__rightComp360
  %__leftColumn362 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp363 = extractelement <4 x float> %__leftColumn362, i32 1
  %__rightComp364 = extractelement <4 x float> %__rightColumn339, i32 1
  %__product365 = fmul float %__leftComp363, %__rightComp364
  %__dotProduct366 = fadd float %__product361, %__product365
  %__leftColumn367 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp368 = extractelement <4 x float> %__leftColumn367, i32 1
  %__rightComp369 = extractelement <4 x float> %__rightColumn339, i32 2
  %__product370 = fmul float %__leftComp368, %__rightComp369
  %__dotProduct371 = fadd float %__dotProduct366, %__product370
  %__leftColumn372 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp373 = extractelement <4 x float> %__leftColumn372, i32 1
  %__rightComp374 = extractelement <4 x float> %__rightColumn339, i32 3
  %__product375 = fmul float %__leftComp373, %__rightComp374
  %__dotProduct376 = fadd float %__dotProduct371, %__product375
  %__column377 = insertelement <4 x float> %__column357, float %__dotProduct376, i32 1
  %__leftColumn378 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp379 = extractelement <4 x float> %__leftColumn378, i32 2
  %__rightComp380 = extractelement <4 x float> %__rightColumn339, i32 0
  %__product381 = fmul float %__leftComp379, %__rightComp380
  %__leftColumn382 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp383 = extractelement <4 x float> %__leftColumn382, i32 2
  %__rightComp384 = extractelement <4 x float> %__rightColumn339, i32 1
  %__product385 = fmul float %__leftComp383, %__rightComp384
  %__dotProduct386 = fadd float %__product381, %__product385
  %__leftColumn387 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp388 = extractelement <4 x float> %__leftColumn387, i32 2
  %__rightComp389 = extractelement <4 x float> %__rightColumn339, i32 2
  %__product390 = fmul float %__leftComp388, %__rightComp389
  %__dotProduct391 = fadd float %__dotProduct386, %__product390
  %__leftColumn392 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp393 = extractelement <4 x float> %__leftColumn392, i32 2
  %__rightComp394 = extractelement <4 x float> %__rightColumn339, i32 3
  %__product395 = fmul float %__leftComp393, %__rightComp394
  %__dotProduct396 = fadd float %__dotProduct391, %__product395
  %__column397 = insertelement <4 x float> %__column377, float %__dotProduct396, i32 2
  %__leftColumn398 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp399 = extractelement <4 x float> %__leftColumn398, i32 3
  %__rightComp400 = extractelement <4 x float> %__rightColumn339, i32 0
  %__product401 = fmul float %__leftComp399, %__rightComp400
  %__leftColumn402 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp403 = extractelement <4 x float> %__leftColumn402, i32 3
  %__rightComp404 = extractelement <4 x float> %__rightColumn339, i32 1
  %__product405 = fmul float %__leftComp403, %__rightComp404
  %__dotProduct406 = fadd float %__product401, %__product405
  %__leftColumn407 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp408 = extractelement <4 x float> %__leftColumn407, i32 3
  %__rightComp409 = extractelement <4 x float> %__rightColumn339, i32 2
  %__product410 = fmul float %__leftComp408, %__rightComp409
  %__dotProduct411 = fadd float %__dotProduct406, %__product410
  %__leftColumn412 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp413 = extractelement <4 x float> %__leftColumn412, i32 3
  %__rightComp414 = extractelement <4 x float> %__rightColumn339, i32 3
  %__product415 = fmul float %__leftComp413, %__rightComp414
  %__dotProduct416 = fadd float %__dotProduct411, %__product415
  %__column417 = insertelement <4 x float> %__column397, float %__dotProduct416, i32 3
  %__resultMatrix418 = insertvalue [4 x <4 x float>] %__resultMatrix, <4 x float> %__column417, 0
  %__rightColumn419 = extractvalue [4 x <4 x float>] %__matrix338, 1
  %__leftColumn420 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp421 = extractelement <4 x float> %__leftColumn420, i32 0
  %__rightComp422 = extractelement <4 x float> %__rightColumn419, i32 0
  %__product423 = fmul float %__leftComp421, %__rightComp422
  %__leftColumn424 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp425 = extractelement <4 x float> %__leftColumn424, i32 0
  %__rightComp426 = extractelement <4 x float> %__rightColumn419, i32 1
  %__product427 = fmul float %__leftComp425, %__rightComp426
  %__dotProduct428 = fadd float %__product423, %__product427
  %__leftColumn429 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp430 = extractelement <4 x float> %__leftColumn429, i32 0
  %__rightComp431 = extractelement <4 x float> %__rightColumn419, i32 2
  %__product432 = fmul float %__leftComp430, %__rightComp431
  %__dotProduct433 = fadd float %__dotProduct428, %__product432
  %__leftColumn434 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp435 = extractelement <4 x float> %__leftColumn434, i32 0
  %__rightComp436 = extractelement <4 x float> %__rightColumn419, i32 3
  %__product437 = fmul float %__leftComp435, %__rightComp436
  %__dotProduct438 = fadd float %__dotProduct433, %__product437
  %__column439 = insertelement <4 x float> %__column417, float %__dotProduct438, i32 0
  %__leftColumn440 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp441 = extractelement <4 x float> %__leftColumn440, i32 1
  %__rightComp442 = extractelement <4 x float> %__rightColumn419, i32 0
  %__product443 = fmul float %__leftComp441, %__rightComp442
  %__leftColumn444 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp445 = extractelement <4 x float> %__leftColumn444, i32 1
  %__rightComp446 = extractelement <4 x float> %__rightColumn419, i32 1
  %__product447 = fmul float %__leftComp445, %__rightComp446
  %__dotProduct448 = fadd float %__product443, %__product447
  %__leftColumn449 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp450 = extractelement <4 x float> %__leftColumn449, i32 1
  %__rightComp451 = extractelement <4 x float> %__rightColumn419, i32 2
  %__product452 = fmul float %__leftComp450, %__rightComp451
  %__dotProduct453 = fadd float %__dotProduct448, %__product452
  %__leftColumn454 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp455 = extractelement <4 x float> %__leftColumn454, i32 1
  %__rightComp456 = extractelement <4 x float> %__rightColumn419, i32 3
  %__product457 = fmul float %__leftComp455, %__rightComp456
  %__dotProduct458 = fadd float %__dotProduct453, %__product457
  %__column459 = insertelement <4 x float> %__column439, float %__dotProduct458, i32 1
  %__leftColumn460 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp461 = extractelement <4 x float> %__leftColumn460, i32 2
  %__rightComp462 = extractelement <4 x float> %__rightColumn419, i32 0
  %__product463 = fmul float %__leftComp461, %__rightComp462
  %__leftColumn464 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp465 = extractelement <4 x float> %__leftColumn464, i32 2
  %__rightComp466 = extractelement <4 x float> %__rightColumn419, i32 1
  %__product467 = fmul float %__leftComp465, %__rightComp466
  %__dotProduct468 = fadd float %__product463, %__product467
  %__leftColumn469 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp470 = extractelement <4 x float> %__leftColumn469, i32 2
  %__rightComp471 = extractelement <4 x float> %__rightColumn419, i32 2
  %__product472 = fmul float %__leftComp470, %__rightComp471
  %__dotProduct473 = fadd float %__dotProduct468, %__product472
  %__leftColumn474 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp475 = extractelement <4 x float> %__leftColumn474, i32 2
  %__rightComp476 = extractelement <4 x float> %__rightColumn419, i32 3
  %__product477 = fmul float %__leftComp475, %__rightComp476
  %__dotProduct478 = fadd float %__dotProduct473, %__product477
  %__column479 = insertelement <4 x float> %__column459, float %__dotProduct478, i32 2
  %__leftColumn480 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp481 = extractelement <4 x float> %__leftColumn480, i32 3
  %__rightComp482 = extractelement <4 x float> %__rightColumn419, i32 0
  %__product483 = fmul float %__leftComp481, %__rightComp482
  %__leftColumn484 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp485 = extractelement <4 x float> %__leftColumn484, i32 3
  %__rightComp486 = extractelement <4 x float> %__rightColumn419, i32 1
  %__product487 = fmul float %__leftComp485, %__rightComp486
  %__dotProduct488 = fadd float %__product483, %__product487
  %__leftColumn489 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp490 = extractelement <4 x float> %__leftColumn489, i32 3
  %__rightComp491 = extractelement <4 x float> %__rightColumn419, i32 2
  %__product492 = fmul float %__leftComp490, %__rightComp491
  %__dotProduct493 = fadd float %__dotProduct488, %__product492
  %__leftColumn494 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp495 = extractelement <4 x float> %__leftColumn494, i32 3
  %__rightComp496 = extractelement <4 x float> %__rightColumn419, i32 3
  %__product497 = fmul float %__leftComp495, %__rightComp496
  %__dotProduct498 = fadd float %__dotProduct493, %__product497
  %__column499 = insertelement <4 x float> %__column479, float %__dotProduct498, i32 3
  %__resultMatrix500 = insertvalue [4 x <4 x float>] %__resultMatrix418, <4 x float> %__column499, 1
  %__rightColumn501 = extractvalue [4 x <4 x float>] %__matrix338, 2
  %__leftColumn502 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp503 = extractelement <4 x float> %__leftColumn502, i32 0
  %__rightComp504 = extractelement <4 x float> %__rightColumn501, i32 0
  %__product505 = fmul float %__leftComp503, %__rightComp504
  %__leftColumn506 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp507 = extractelement <4 x float> %__leftColumn506, i32 0
  %__rightComp508 = extractelement <4 x float> %__rightColumn501, i32 1
  %__product509 = fmul float %__leftComp507, %__rightComp508
  %__dotProduct510 = fadd float %__product505, %__product509
  %__leftColumn511 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp512 = extractelement <4 x float> %__leftColumn511, i32 0
  %__rightComp513 = extractelement <4 x float> %__rightColumn501, i32 2
  %__product514 = fmul float %__leftComp512, %__rightComp513
  %__dotProduct515 = fadd float %__dotProduct510, %__product514
  %__leftColumn516 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp517 = extractelement <4 x float> %__leftColumn516, i32 0
  %__rightComp518 = extractelement <4 x float> %__rightColumn501, i32 3
  %__product519 = fmul float %__leftComp517, %__rightComp518
  %__dotProduct520 = fadd float %__dotProduct515, %__product519
  %__column521 = insertelement <4 x float> %__column499, float %__dotProduct520, i32 0
  %__leftColumn522 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp523 = extractelement <4 x float> %__leftColumn522, i32 1
  %__rightComp524 = extractelement <4 x float> %__rightColumn501, i32 0
  %__product525 = fmul float %__leftComp523, %__rightComp524
  %__leftColumn526 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp527 = extractelement <4 x float> %__leftColumn526, i32 1
  %__rightComp528 = extractelement <4 x float> %__rightColumn501, i32 1
  %__product529 = fmul float %__leftComp527, %__rightComp528
  %__dotProduct530 = fadd float %__product525, %__product529
  %__leftColumn531 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp532 = extractelement <4 x float> %__leftColumn531, i32 1
  %__rightComp533 = extractelement <4 x float> %__rightColumn501, i32 2
  %__product534 = fmul float %__leftComp532, %__rightComp533
  %__dotProduct535 = fadd float %__dotProduct530, %__product534
  %__leftColumn536 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp537 = extractelement <4 x float> %__leftColumn536, i32 1
  %__rightComp538 = extractelement <4 x float> %__rightColumn501, i32 3
  %__product539 = fmul float %__leftComp537, %__rightComp538
  %__dotProduct540 = fadd float %__dotProduct535, %__product539
  %__column541 = insertelement <4 x float> %__column521, float %__dotProduct540, i32 1
  %__leftColumn542 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp543 = extractelement <4 x float> %__leftColumn542, i32 2
  %__rightComp544 = extractelement <4 x float> %__rightColumn501, i32 0
  %__product545 = fmul float %__leftComp543, %__rightComp544
  %__leftColumn546 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp547 = extractelement <4 x float> %__leftColumn546, i32 2
  %__rightComp548 = extractelement <4 x float> %__rightColumn501, i32 1
  %__product549 = fmul float %__leftComp547, %__rightComp548
  %__dotProduct550 = fadd float %__product545, %__product549
  %__leftColumn551 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp552 = extractelement <4 x float> %__leftColumn551, i32 2
  %__rightComp553 = extractelement <4 x float> %__rightColumn501, i32 2
  %__product554 = fmul float %__leftComp552, %__rightComp553
  %__dotProduct555 = fadd float %__dotProduct550, %__product554
  %__leftColumn556 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp557 = extractelement <4 x float> %__leftColumn556, i32 2
  %__rightComp558 = extractelement <4 x float> %__rightColumn501, i32 3
  %__product559 = fmul float %__leftComp557, %__rightComp558
  %__dotProduct560 = fadd float %__dotProduct555, %__product559
  %__column561 = insertelement <4 x float> %__column541, float %__dotProduct560, i32 2
  %__leftColumn562 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp563 = extractelement <4 x float> %__leftColumn562, i32 3
  %__rightComp564 = extractelement <4 x float> %__rightColumn501, i32 0
  %__product565 = fmul float %__leftComp563, %__rightComp564
  %__leftColumn566 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp567 = extractelement <4 x float> %__leftColumn566, i32 3
  %__rightComp568 = extractelement <4 x float> %__rightColumn501, i32 1
  %__product569 = fmul float %__leftComp567, %__rightComp568
  %__dotProduct570 = fadd float %__product565, %__product569
  %__leftColumn571 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp572 = extractelement <4 x float> %__leftColumn571, i32 3
  %__rightComp573 = extractelement <4 x float> %__rightColumn501, i32 2
  %__product574 = fmul float %__leftComp572, %__rightComp573
  %__dotProduct575 = fadd float %__dotProduct570, %__product574
  %__leftColumn576 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp577 = extractelement <4 x float> %__leftColumn576, i32 3
  %__rightComp578 = extractelement <4 x float> %__rightColumn501, i32 3
  %__product579 = fmul float %__leftComp577, %__rightComp578
  %__dotProduct580 = fadd float %__dotProduct575, %__product579
  %__column581 = insertelement <4 x float> %__column561, float %__dotProduct580, i32 3
  %__resultMatrix582 = insertvalue [4 x <4 x float>] %__resultMatrix500, <4 x float> %__column581, 2
  %__rightColumn583 = extractvalue [4 x <4 x float>] %__matrix338, 3
  %__leftColumn584 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp585 = extractelement <4 x float> %__leftColumn584, i32 0
  %__rightComp586 = extractelement <4 x float> %__rightColumn583, i32 0
  %__product587 = fmul float %__leftComp585, %__rightComp586
  %__leftColumn588 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp589 = extractelement <4 x float> %__leftColumn588, i32 0
  %__rightComp590 = extractelement <4 x float> %__rightColumn583, i32 1
  %__product591 = fmul float %__leftComp589, %__rightComp590
  %__dotProduct592 = fadd float %__product587, %__product591
  %__leftColumn593 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp594 = extractelement <4 x float> %__leftColumn593, i32 0
  %__rightComp595 = extractelement <4 x float> %__rightColumn583, i32 2
  %__product596 = fmul float %__leftComp594, %__rightComp595
  %__dotProduct597 = fadd float %__dotProduct592, %__product596
  %__leftColumn598 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp599 = extractelement <4 x float> %__leftColumn598, i32 0
  %__rightComp600 = extractelement <4 x float> %__rightColumn583, i32 3
  %__product601 = fmul float %__leftComp599, %__rightComp600
  %__dotProduct602 = fadd float %__dotProduct597, %__product601
  %__column603 = insertelement <4 x float> %__column581, float %__dotProduct602, i32 0
  %__leftColumn604 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp605 = extractelement <4 x float> %__leftColumn604, i32 1
  %__rightComp606 = extractelement <4 x float> %__rightColumn583, i32 0
  %__product607 = fmul float %__leftComp605, %__rightComp606
  %__leftColumn608 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp609 = extractelement <4 x float> %__leftColumn608, i32 1
  %__rightComp610 = extractelement <4 x float> %__rightColumn583, i32 1
  %__product611 = fmul float %__leftComp609, %__rightComp610
  %__dotProduct612 = fadd float %__product607, %__product611
  %__leftColumn613 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp614 = extractelement <4 x float> %__leftColumn613, i32 1
  %__rightComp615 = extractelement <4 x float> %__rightColumn583, i32 2
  %__product616 = fmul float %__leftComp614, %__rightComp615
  %__dotProduct617 = fadd float %__dotProduct612, %__product616
  %__leftColumn618 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp619 = extractelement <4 x float> %__leftColumn618, i32 1
  %__rightComp620 = extractelement <4 x float> %__rightColumn583, i32 3
  %__product621 = fmul float %__leftComp619, %__rightComp620
  %__dotProduct622 = fadd float %__dotProduct617, %__product621
  %__column623 = insertelement <4 x float> %__column603, float %__dotProduct622, i32 1
  %__leftColumn624 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp625 = extractelement <4 x float> %__leftColumn624, i32 2
  %__rightComp626 = extractelement <4 x float> %__rightColumn583, i32 0
  %__product627 = fmul float %__leftComp625, %__rightComp626
  %__leftColumn628 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp629 = extractelement <4 x float> %__leftColumn628, i32 2
  %__rightComp630 = extractelement <4 x float> %__rightColumn583, i32 1
  %__product631 = fmul float %__leftComp629, %__rightComp630
  %__dotProduct632 = fadd float %__product627, %__product631
  %__leftColumn633 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp634 = extractelement <4 x float> %__leftColumn633, i32 2
  %__rightComp635 = extractelement <4 x float> %__rightColumn583, i32 2
  %__product636 = fmul float %__leftComp634, %__rightComp635
  %__dotProduct637 = fadd float %__dotProduct632, %__product636
  %__leftColumn638 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp639 = extractelement <4 x float> %__leftColumn638, i32 2
  %__rightComp640 = extractelement <4 x float> %__rightColumn583, i32 3
  %__product641 = fmul float %__leftComp639, %__rightComp640
  %__dotProduct642 = fadd float %__dotProduct637, %__product641
  %__column643 = insertelement <4 x float> %__column623, float %__dotProduct642, i32 2
  %__leftColumn644 = extractvalue [4 x <4 x float>] %__matrix337, 0
  %__leftComp645 = extractelement <4 x float> %__leftColumn644, i32 3
  %__rightComp646 = extractelement <4 x float> %__rightColumn583, i32 0
  %__product647 = fmul float %__leftComp645, %__rightComp646
  %__leftColumn648 = extractvalue [4 x <4 x float>] %__matrix337, 1
  %__leftComp649 = extractelement <4 x float> %__leftColumn648, i32 3
  %__rightComp650 = extractelement <4 x float> %__rightColumn583, i32 1
  %__product651 = fmul float %__leftComp649, %__rightComp650
  %__dotProduct652 = fadd float %__product647, %__product651
  %__leftColumn653 = extractvalue [4 x <4 x float>] %__matrix337, 2
  %__leftComp654 = extractelement <4 x float> %__leftColumn653, i32 3
  %__rightComp655 = extractelement <4 x float> %__rightColumn583, i32 2
  %__product656 = fmul float %__leftComp654, %__rightComp655
  %__dotProduct657 = fadd float %__dotProduct652, %__product656
  %__leftColumn658 = extractvalue [4 x <4 x float>] %__matrix337, 3
  %__leftComp659 = extractelement <4 x float> %__leftColumn658, i32 3
  %__rightComp660 = extractelement <4 x float> %__rightColumn583, i32 3
  %__product661 = fmul float %__leftComp659, %__rightComp660
  %__dotProduct662 = fadd float %__dotProduct657, %__product661
  %__column663 = insertelement <4 x float> %__column643, float %__dotProduct662, i32 3
  %__resultMatrix664 = insertvalue [4 x <4 x float>] %__resultMatrix582, <4 x float> %__column663, 3
  %v__665 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__665, <4 x float>* @v_shadow
  %183 = load <4 x float>* @v_shadow
  %184 = alloca <4 x float>
  %185 = load <4 x float>* %184
  %__component666 = extractelement <4 x float> %183, i32 0
  %__component667 = extractelement <4 x float> %183, i32 1
  %__component668 = extractelement <4 x float> %183, i32 2
  %__component669 = extractelement <4 x float> %183, i32 3
  %__column670 = extractvalue [4 x <4 x float>] %__resultMatrix664, 0
  %__element671 = extractelement <4 x float> %__column670, i32 0
  %__product672 = fmul float %__element671, %__component666
  %__column673 = extractvalue [4 x <4 x float>] %__resultMatrix664, 1
  %__element674 = extractelement <4 x float> %__column673, i32 0
  %__product675 = fmul float %__element674, %__component667
  %__dotProduct676 = fadd float %__product672, %__product675
  %__column677 = extractvalue [4 x <4 x float>] %__resultMatrix664, 2
  %__element678 = extractelement <4 x float> %__column677, i32 0
  %__product679 = fmul float %__element678, %__component668
  %__dotProduct680 = fadd float %__dotProduct676, %__product679
  %__column681 = extractvalue [4 x <4 x float>] %__resultMatrix664, 3
  %__element682 = extractelement <4 x float> %__column681, i32 0
  %__product683 = fmul float %__element682, %__component669
  %__dotProduct684 = fadd float %__dotProduct680, %__product683
  %186 = insertelement <4 x float> %185, float %__dotProduct684, i32 0
  %__column685 = extractvalue [4 x <4 x float>] %__resultMatrix664, 0
  %__element686 = extractelement <4 x float> %__column685, i32 1
  %__product687 = fmul float %__element686, %__component666
  %__column688 = extractvalue [4 x <4 x float>] %__resultMatrix664, 1
  %__element689 = extractelement <4 x float> %__column688, i32 1
  %__product690 = fmul float %__element689, %__component667
  %__dotProduct691 = fadd float %__product687, %__product690
  %__column692 = extractvalue [4 x <4 x float>] %__resultMatrix664, 2
  %__element693 = extractelement <4 x float> %__column692, i32 1
  %__product694 = fmul float %__element693, %__component668
  %__dotProduct695 = fadd float %__dotProduct691, %__product694
  %__column696 = extractvalue [4 x <4 x float>] %__resultMatrix664, 3
  %__element697 = extractelement <4 x float> %__column696, i32 1
  %__product698 = fmul float %__element697, %__component669
  %__dotProduct699 = fadd float %__dotProduct695, %__product698
  %187 = insertelement <4 x float> %186, float %__dotProduct699, i32 1
  %__column700 = extractvalue [4 x <4 x float>] %__resultMatrix664, 0
  %__element701 = extractelement <4 x float> %__column700, i32 2
  %__product702 = fmul float %__element701, %__component666
  %__column703 = extractvalue [4 x <4 x float>] %__resultMatrix664, 1
  %__element704 = extractelement <4 x float> %__column703, i32 2
  %__product705 = fmul float %__element704, %__component667
  %__dotProduct706 = fadd float %__product702, %__product705
  %__column707 = extractvalue [4 x <4 x float>] %__resultMatrix664, 2
  %__element708 = extractelement <4 x float> %__column707, i32 2
  %__product709 = fmul float %__element708, %__component668
  %__dotProduct710 = fadd float %__dotProduct706, %__product709
  %__column711 = extractvalue [4 x <4 x float>] %__resultMatrix664, 3
  %__element712 = extractelement <4 x float> %__column711, i32 2
  %__product713 = fmul float %__element712, %__component669
  %__dotProduct714 = fadd float %__dotProduct710, %__product713
  %188 = insertelement <4 x float> %187, float %__dotProduct714, i32 2
  %__column715 = extractvalue [4 x <4 x float>] %__resultMatrix664, 0
  %__element716 = extractelement <4 x float> %__column715, i32 3
  %__product717 = fmul float %__element716, %__component666
  %__column718 = extractvalue [4 x <4 x float>] %__resultMatrix664, 1
  %__element719 = extractelement <4 x float> %__column718, i32 3
  %__product720 = fmul float %__element719, %__component667
  %__dotProduct721 = fadd float %__product717, %__product720
  %__column722 = extractvalue [4 x <4 x float>] %__resultMatrix664, 2
  %__element723 = extractelement <4 x float> %__column722, i32 3
  %__product724 = fmul float %__element723, %__component668
  %__dotProduct725 = fadd float %__dotProduct721, %__product724
  %__column726 = extractvalue [4 x <4 x float>] %__resultMatrix664, 3
  %__element727 = extractelement <4 x float> %__column726, i32 3
  %__product728 = fmul float %__element727, %__component669
  %__dotProduct729 = fadd float %__dotProduct725, %__product728
  %189 = insertelement <4 x float> %188, float %__dotProduct729, i32 3
  %190 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow730 = fadd <4 x float> %190, %189
  store <4 x float> %FragColor_shadow730, <4 x float>* @FragColor_shadow
  br label %ifmerge731

ifmerge731:                                       ; preds = %else336, %then268
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge731
  %191 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %191)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@un34 = external addrspace(2) constant [4 x <4 x float>]
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1
  %0 = load <4 x float> addrspace(2)* %gla_constGEP, align 16
  %Color__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 -1, i32 1)
  %__matrix = load [3 x <3 x float>] addrspace(2)* @colorTransform, align 16
  %__column = extractvalue [3 x <3 x float>] %__matrix, 0
  %__dot = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color__, <3 x float> %__column)
  %__column1 = extractvalue [3 x <3 x float>] %__matrix, 1
  %__dot2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color__, <3 x float> %__column1)
  %__column3 = extractvalue [3 x <3 x float>] %__matrix, 2
  %__dot4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color__, <3 x float> %__column3)
  %1 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot, i32 0, float %__dot2, i32 0, float %__dot4, i32 0, float 1.000000e+00, i32 0)
  %FragColor_shadow6 = fadd <4 x float> %0, %1
  %__matrix7 = load [4 x <4 x float>] addrspace(2)* @m, align 16
  %__matrix8 = load [4 x <4 x float>] addrspace(2)* @n, align 16
  %element1 = extractvalue [4 x <4 x float>] %__matrix7, 0
  %element2 = extractvalue [4 x <4 x float>] %__matrix8, 0
  %2 = fcmp one <4 x float> %element1, %element2
  %3 = call i1 @llvm.gla.any.v4i1(<4 x i1> %2)
  %element19 = extractvalue [4 x <4 x float>] %__matrix7, 1
  %element210 = extractvalue [4 x <4 x float>] %__matrix8, 1
  %4 = fcmp one <4 x float> %element19, %element210
  %5 = call i1 @llvm.gla.any.v4i1(<4 x i1> %4)
  %6 = or i1 %3, %5
  %element111 = extractvalue [4 x <4 x float>] %__matrix7, 2
  %element212 = extractvalue [4 x <4 x float>] %__matrix8, 2
  %7 = fcmp one <4 x float> %element111, %element212
  %8 = call i1 @llvm.gla.any.v4i1(<4 x i1> %7)
  %9 = or i1 %6, %8
  %element113 = extractvalue [4 x <4 x float>] %__matrix7, 3
  %element214 = extractvalue [4 x <4 x float>] %__matrix8, 3
  %10 = fcmp one <4 x float> %element113, %element214
  %11 = call i1 @llvm.gla.any.v4i1(<4 x i1> %10)
  %12 = or i1 %9, %11
  %v__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  br i1 %12, label %then, label %else

then:                                             ; preds = %entry
  %FragColor_shadow15 = fadd <4 x float> %FragColor_shadow6, %v__
  %.pre = extractelement <4 x float> %v__, i32 0
  %.pre733 = extractelement <4 x float> %v__, i32 1
  %.pre735 = extractelement <4 x float> %v__, i32 2
  %.pre737 = extractelement <4 x float> %v__, i32 3
  br label %ifmerge

else:                                             ; preds = %entry
  %__component = extractelement <4 x float> %v__, i32 0
  %__component18 = extractelement <4 x float> %v__, i32 1
  %__component19 = extractelement <4 x float> %v__, i32 2
  %__component20 = extractelement <4 x float> %v__, i32 3
  %__element = extractelement <4 x float> %element1, i32 0
  %__product = fmul float %__element, %__component
  %__element23 = extractelement <4 x float> %element19, i32 0
  %__product24 = fmul float %__element23, %__component18
  %__dotProduct = fadd float %__product, %__product24
  %__element26 = extractelement <4 x float> %element111, i32 0
  %__product27 = fmul float %__element26, %__component19
  %__dotProduct28 = fadd float %__product27, %__dotProduct
  %__element30 = extractelement <4 x float> %element113, i32 0
  %__product31 = fmul float %__element30, %__component20
  %__dotProduct32 = fadd float %__product31, %__dotProduct28
  %__element34 = extractelement <4 x float> %element1, i32 1
  %__product35 = fmul float %__element34, %__component
  %__element37 = extractelement <4 x float> %element19, i32 1
  %__product38 = fmul float %__element37, %__component18
  %__dotProduct39 = fadd float %__product35, %__product38
  %__element41 = extractelement <4 x float> %element111, i32 1
  %__product42 = fmul float %__element41, %__component19
  %__dotProduct43 = fadd float %__product42, %__dotProduct39
  %__element45 = extractelement <4 x float> %element113, i32 1
  %__product46 = fmul float %__element45, %__component20
  %__dotProduct47 = fadd float %__product46, %__dotProduct43
  %__element49 = extractelement <4 x float> %element1, i32 2
  %__product50 = fmul float %__element49, %__component
  %__element52 = extractelement <4 x float> %element19, i32 2
  %__product53 = fmul float %__element52, %__component18
  %__dotProduct54 = fadd float %__product50, %__product53
  %__element56 = extractelement <4 x float> %element111, i32 2
  %__product57 = fmul float %__element56, %__component19
  %__dotProduct58 = fadd float %__product57, %__dotProduct54
  %__element60 = extractelement <4 x float> %element113, i32 2
  %__product61 = fmul float %__element60, %__component20
  %__dotProduct62 = fadd float %__product61, %__dotProduct58
  %__element64 = extractelement <4 x float> %element1, i32 3
  %__product65 = fmul float %__element64, %__component
  %__element67 = extractelement <4 x float> %element19, i32 3
  %__product68 = fmul float %__element67, %__component18
  %__dotProduct69 = fadd float %__product65, %__product68
  %__element71 = extractelement <4 x float> %element111, i32 3
  %__product72 = fmul float %__element71, %__component19
  %__dotProduct73 = fadd float %__product72, %__dotProduct69
  %__element75 = extractelement <4 x float> %element113, i32 3
  %__product76 = fmul float %__element75, %__component20
  %__dotProduct77 = fadd float %__product76, %__dotProduct73
  %13 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct32, i32 0, float %__dotProduct47, i32 0, float %__dotProduct62, i32 0, float %__dotProduct77, i32 0)
  %FragColor_shadow78 = fadd <4 x float> %FragColor_shadow6, %13
  %__column82 = fsub <4 x float> %element1, %element2
  %__column85 = fsub <4 x float> %element19, %element210
  %__column88 = fsub <4 x float> %element111, %element212
  %__column91 = fsub <4 x float> %element113, %element214
  %__dot93 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v__, <4 x float> %__column82)
  %__dot95 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v__, <4 x float> %__column85)
  %__dot97 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v__, <4 x float> %__column88)
  %__dot99 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v__, <4 x float> %__column91)
  %14 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot93, i32 0, float %__dot95, i32 0, float %__dot97, i32 0, float %__dot99, i32 0)
  %FragColor_shadow100 = fadd <4 x float> %FragColor_shadow78, %14
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %.pre-phi738 = phi float [ %__component20, %else ], [ %.pre737, %then ]
  %.pre-phi736 = phi float [ %__component19, %else ], [ %.pre735, %then ]
  %.pre-phi734 = phi float [ %__component18, %else ], [ %.pre733, %then ]
  %.pre-phi = phi float [ %__component, %else ], [ %.pre, %then ]
  %FragColor_shadow732.0 = phi <4 x float> [ %FragColor_shadow100, %else ], [ %FragColor_shadow15, %then ]
  %u__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %15 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u__, <4 x i32> <i32 2, i32 3, i32 0, i32 0>)
  %16 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u__, <4 x i32> <i32 3, i32 0, i32 0, i32 1>)
  %17 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u__, <4 x i32> <i32 0, i32 0, i32 1, i32 2>)
  %18 = extractelement <4 x float> %u__, i32 0
  %19 = fmul float %.pre-phi, %18
  %20 = extractelement <4 x float> %u__, i32 1
  %21 = fmul float %.pre-phi, %20
  %22 = extractelement <4 x float> %u__, i32 2
  %23 = fmul float %.pre-phi, %22
  %24 = extractelement <4 x float> %u__, i32 3
  %25 = fmul float %.pre-phi, %24
  %26 = fmul float %.pre-phi734, %18
  %27 = fmul float %.pre-phi734, %20
  %28 = fmul float %.pre-phi734, %22
  %29 = fmul float %.pre-phi734, %24
  %30 = fmul float %.pre-phi736, %18
  %31 = fmul float %.pre-phi736, %20
  %32 = fmul float %.pre-phi736, %22
  %33 = fmul float %.pre-phi736, %24
  %34 = fmul float %.pre-phi738, %18
  %35 = fmul float %.pre-phi738, %20
  %36 = fmul float %.pre-phi738, %22
  %37 = fmul float %.pre-phi738, %24
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %19, i32 0, float %21, i32 0, float %23, i32 0, float %25, i32 0)
  %39 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %26, i32 0, float %27, i32 0, float %28, i32 0, float %29, i32 0)
  %40 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %30, i32 0, float %31, i32 0, float %32, i32 0, float %33, i32 0)
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %34, i32 0, float %35, i32 0, float %36, i32 0, float %37, i32 0)
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float undef, float undef, float undef>, i32 14, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, i32 12, float undef, i32 undef, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0)
  %45 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float> undef, i32 15, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, <4 x float> %v__, i32 0)
  %__column188 = fadd <4 x float> %42, %38
  %__column191 = fadd <4 x float> %43, %39
  %__column194 = fadd <4 x float> %44, %40
  %__column197 = fadd <4 x float> %45, %41
  %__column247 = fadd <4 x float> %u__, %__column188
  %__column250 = fadd <4 x float> %17, %__column191
  %__column253 = fadd <4 x float> %16, %__column194
  %__column256 = fadd <4 x float> %15, %__column197
  %__matrix259 = load [4 x <4 x float>] addrspace(2)* @un34, align 16
  %element2261 = extractvalue [4 x <4 x float>] %__matrix259, 0
  %46 = fcmp oeq <4 x float> %__column247, %element2261
  %47 = call i1 @llvm.gla.all.v4i1(<4 x i1> %46)
  %element2263 = extractvalue [4 x <4 x float>] %__matrix259, 1
  %48 = fcmp oeq <4 x float> %__column250, %element2263
  %49 = call i1 @llvm.gla.all.v4i1(<4 x i1> %48)
  %50 = and i1 %47, %49
  %element2265 = extractvalue [4 x <4 x float>] %__matrix259, 2
  %51 = fcmp oeq <4 x float> %__column253, %element2265
  %52 = call i1 @llvm.gla.all.v4i1(<4 x i1> %51)
  %53 = and i1 %50, %52
  %element2267 = extractvalue [4 x <4 x float>] %__matrix259, 3
  %54 = fcmp oeq <4 x float> %__column256, %element2267
  %55 = call i1 @llvm.gla.all.v4i1(<4 x i1> %54)
  %56 = and i1 %53, %55
  br i1 %56, label %then268, label %else336

then268:                                          ; preds = %ifmerge
  %__element276 = extractelement <4 x float> %__column247, i32 0
  %__product277 = fmul float %18, %__element276
  %__element279 = extractelement <4 x float> %__column250, i32 0
  %__product280 = fmul float %20, %__element279
  %__dotProduct281 = fadd float %__product277, %__product280
  %__element283 = extractelement <4 x float> %__column253, i32 0
  %__product284 = fmul float %22, %__element283
  %__dotProduct285 = fadd float %__product284, %__dotProduct281
  %__element287 = extractelement <4 x float> %__column256, i32 0
  %__product288 = fmul float %24, %__element287
  %__dotProduct289 = fadd float %__product288, %__dotProduct285
  %__element291 = extractelement <4 x float> %__column247, i32 1
  %__product292 = fmul float %18, %__element291
  %__element294 = extractelement <4 x float> %__column250, i32 1
  %__product295 = fmul float %20, %__element294
  %__dotProduct296 = fadd float %__product292, %__product295
  %__element298 = extractelement <4 x float> %__column253, i32 1
  %__product299 = fmul float %22, %__element298
  %__dotProduct300 = fadd float %__product299, %__dotProduct296
  %__element302 = extractelement <4 x float> %__column256, i32 1
  %__product303 = fmul float %24, %__element302
  %__dotProduct304 = fadd float %__product303, %__dotProduct300
  %__element306 = extractelement <4 x float> %__column247, i32 2
  %__product307 = fmul float %18, %__element306
  %__element309 = extractelement <4 x float> %__column250, i32 2
  %__product310 = fmul float %20, %__element309
  %__dotProduct311 = fadd float %__product307, %__product310
  %__element313 = extractelement <4 x float> %__column253, i32 2
  %__product314 = fmul float %22, %__element313
  %__dotProduct315 = fadd float %__product314, %__dotProduct311
  %__element317 = extractelement <4 x float> %__column256, i32 2
  %__product318 = fmul float %24, %__element317
  %__dotProduct319 = fadd float %__product318, %__dotProduct315
  %__element321 = extractelement <4 x float> %__column247, i32 3
  %__product322 = fmul float %18, %__element321
  %__element324 = extractelement <4 x float> %__column250, i32 3
  %__product325 = fmul float %20, %__element324
  %__dotProduct326 = fadd float %__product322, %__product325
  %__element328 = extractelement <4 x float> %__column253, i32 3
  %__product329 = fmul float %22, %__element328
  %__dotProduct330 = fadd float %__product329, %__dotProduct326
  %__element332 = extractelement <4 x float> %__column256, i32 3
  %__product333 = fmul float %24, %__element332
  %__dotProduct334 = fadd float %__product333, %__dotProduct330
  %57 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct289, i32 0, float %__dotProduct304, i32 0, float %__dotProduct319, i32 0, float %__dotProduct334, i32 0)
  br label %ifmerge731

else336:                                          ; preds = %ifmerge
  %__matrix338 = load [4 x <4 x float>] addrspace(2)* @um43, align 16
  %__rightColumn339 = extractvalue [4 x <4 x float>] %__matrix338, 0
  %__leftComp = extractelement <4 x float> %element2261, i32 0
  %__rightComp = extractelement <4 x float> %__rightColumn339, i32 0
  %__product341 = fmul float %__leftComp, %__rightComp
  %__leftComp343 = extractelement <4 x float> %element2263, i32 0
  %__rightComp344 = extractelement <4 x float> %__rightColumn339, i32 1
  %__product345 = fmul float %__leftComp343, %__rightComp344
  %__dotProduct346 = fadd float %__product341, %__product345
  %__leftComp348 = extractelement <4 x float> %element2265, i32 0
  %__rightComp349 = extractelement <4 x float> %__rightColumn339, i32 2
  %__product350 = fmul float %__leftComp348, %__rightComp349
  %__dotProduct351 = fadd float %__product350, %__dotProduct346
  %__leftComp353 = extractelement <4 x float> %element2267, i32 0
  %__rightComp354 = extractelement <4 x float> %__rightColumn339, i32 3
  %__product355 = fmul float %__leftComp353, %__rightComp354
  %__dotProduct356 = fadd float %__product355, %__dotProduct351
  %__leftComp359 = extractelement <4 x float> %element2261, i32 1
  %__product361 = fmul float %__leftComp359, %__rightComp
  %__leftComp363 = extractelement <4 x float> %element2263, i32 1
  %__product365 = fmul float %__leftComp363, %__rightComp344
  %__dotProduct366 = fadd float %__product361, %__product365
  %__leftComp368 = extractelement <4 x float> %element2265, i32 1
  %__product370 = fmul float %__leftComp368, %__rightComp349
  %__dotProduct371 = fadd float %__product370, %__dotProduct366
  %__leftComp373 = extractelement <4 x float> %element2267, i32 1
  %__product375 = fmul float %__leftComp373, %__rightComp354
  %__dotProduct376 = fadd float %__product375, %__dotProduct371
  %__leftComp379 = extractelement <4 x float> %element2261, i32 2
  %__product381 = fmul float %__leftComp379, %__rightComp
  %__leftComp383 = extractelement <4 x float> %element2263, i32 2
  %__product385 = fmul float %__leftComp383, %__rightComp344
  %__dotProduct386 = fadd float %__product381, %__product385
  %__leftComp388 = extractelement <4 x float> %element2265, i32 2
  %__product390 = fmul float %__leftComp388, %__rightComp349
  %__dotProduct391 = fadd float %__product390, %__dotProduct386
  %__leftComp393 = extractelement <4 x float> %element2267, i32 2
  %__product395 = fmul float %__leftComp393, %__rightComp354
  %__dotProduct396 = fadd float %__product395, %__dotProduct391
  %__leftComp399 = extractelement <4 x float> %element2261, i32 3
  %__product401 = fmul float %__leftComp399, %__rightComp
  %__leftComp403 = extractelement <4 x float> %element2263, i32 3
  %__product405 = fmul float %__leftComp403, %__rightComp344
  %__dotProduct406 = fadd float %__product401, %__product405
  %__leftComp408 = extractelement <4 x float> %element2265, i32 3
  %__product410 = fmul float %__leftComp408, %__rightComp349
  %__dotProduct411 = fadd float %__product410, %__dotProduct406
  %__leftComp413 = extractelement <4 x float> %element2267, i32 3
  %__product415 = fmul float %__leftComp413, %__rightComp354
  %__dotProduct416 = fadd float %__product415, %__dotProduct411
  %__rightColumn419 = extractvalue [4 x <4 x float>] %__matrix338, 1
  %__rightComp422 = extractelement <4 x float> %__rightColumn419, i32 0
  %__product423 = fmul float %__leftComp, %__rightComp422
  %__rightComp426 = extractelement <4 x float> %__rightColumn419, i32 1
  %__product427 = fmul float %__leftComp343, %__rightComp426
  %__dotProduct428 = fadd float %__product423, %__product427
  %__rightComp431 = extractelement <4 x float> %__rightColumn419, i32 2
  %__product432 = fmul float %__leftComp348, %__rightComp431
  %__dotProduct433 = fadd float %__product432, %__dotProduct428
  %__rightComp436 = extractelement <4 x float> %__rightColumn419, i32 3
  %__product437 = fmul float %__leftComp353, %__rightComp436
  %__dotProduct438 = fadd float %__product437, %__dotProduct433
  %__product443 = fmul float %__leftComp359, %__rightComp422
  %__product447 = fmul float %__leftComp363, %__rightComp426
  %__dotProduct448 = fadd float %__product443, %__product447
  %__product452 = fmul float %__leftComp368, %__rightComp431
  %__dotProduct453 = fadd float %__product452, %__dotProduct448
  %__product457 = fmul float %__leftComp373, %__rightComp436
  %__dotProduct458 = fadd float %__product457, %__dotProduct453
  %__product463 = fmul float %__leftComp379, %__rightComp422
  %__product467 = fmul float %__leftComp383, %__rightComp426
  %__dotProduct468 = fadd float %__product463, %__product467
  %__product472 = fmul float %__leftComp388, %__rightComp431
  %__dotProduct473 = fadd float %__product472, %__dotProduct468
  %__product477 = fmul float %__leftComp393, %__rightComp436
  %__dotProduct478 = fadd float %__product477, %__dotProduct473
  %__product483 = fmul float %__leftComp399, %__rightComp422
  %__product487 = fmul float %__leftComp403, %__rightComp426
  %__dotProduct488 = fadd float %__product483, %__product487
  %__product492 = fmul float %__leftComp408, %__rightComp431
  %__dotProduct493 = fadd float %__product492, %__dotProduct488
  %__product497 = fmul float %__leftComp413, %__rightComp436
  %__dotProduct498 = fadd float %__product497, %__dotProduct493
  %__rightColumn501 = extractvalue [4 x <4 x float>] %__matrix338, 2
  %__rightComp504 = extractelement <4 x float> %__rightColumn501, i32 0
  %__product505 = fmul float %__leftComp, %__rightComp504
  %__rightComp508 = extractelement <4 x float> %__rightColumn501, i32 1
  %__product509 = fmul float %__leftComp343, %__rightComp508
  %__dotProduct510 = fadd float %__product505, %__product509
  %__rightComp513 = extractelement <4 x float> %__rightColumn501, i32 2
  %__product514 = fmul float %__leftComp348, %__rightComp513
  %__dotProduct515 = fadd float %__product514, %__dotProduct510
  %__rightComp518 = extractelement <4 x float> %__rightColumn501, i32 3
  %__product519 = fmul float %__leftComp353, %__rightComp518
  %__dotProduct520 = fadd float %__product519, %__dotProduct515
  %__product525 = fmul float %__leftComp359, %__rightComp504
  %__product529 = fmul float %__leftComp363, %__rightComp508
  %__dotProduct530 = fadd float %__product525, %__product529
  %__product534 = fmul float %__leftComp368, %__rightComp513
  %__dotProduct535 = fadd float %__product534, %__dotProduct530
  %__product539 = fmul float %__leftComp373, %__rightComp518
  %__dotProduct540 = fadd float %__product539, %__dotProduct535
  %__product545 = fmul float %__leftComp379, %__rightComp504
  %__product549 = fmul float %__leftComp383, %__rightComp508
  %__dotProduct550 = fadd float %__product545, %__product549
  %__product554 = fmul float %__leftComp388, %__rightComp513
  %__dotProduct555 = fadd float %__product554, %__dotProduct550
  %__product559 = fmul float %__leftComp393, %__rightComp518
  %__dotProduct560 = fadd float %__product559, %__dotProduct555
  %__product565 = fmul float %__leftComp399, %__rightComp504
  %__product569 = fmul float %__leftComp403, %__rightComp508
  %__dotProduct570 = fadd float %__product565, %__product569
  %__product574 = fmul float %__leftComp408, %__rightComp513
  %__dotProduct575 = fadd float %__product574, %__dotProduct570
  %__product579 = fmul float %__leftComp413, %__rightComp518
  %__dotProduct580 = fadd float %__product579, %__dotProduct575
  %__rightColumn583 = extractvalue [4 x <4 x float>] %__matrix338, 3
  %__rightComp586 = extractelement <4 x float> %__rightColumn583, i32 0
  %__product587 = fmul float %__leftComp, %__rightComp586
  %__rightComp590 = extractelement <4 x float> %__rightColumn583, i32 1
  %__product591 = fmul float %__leftComp343, %__rightComp590
  %__dotProduct592 = fadd float %__product587, %__product591
  %__rightComp595 = extractelement <4 x float> %__rightColumn583, i32 2
  %__product596 = fmul float %__leftComp348, %__rightComp595
  %__dotProduct597 = fadd float %__product596, %__dotProduct592
  %__rightComp600 = extractelement <4 x float> %__rightColumn583, i32 3
  %__product601 = fmul float %__leftComp353, %__rightComp600
  %__dotProduct602 = fadd float %__product601, %__dotProduct597
  %__product607 = fmul float %__leftComp359, %__rightComp586
  %__product611 = fmul float %__leftComp363, %__rightComp590
  %__dotProduct612 = fadd float %__product607, %__product611
  %__product616 = fmul float %__leftComp368, %__rightComp595
  %__dotProduct617 = fadd float %__product616, %__dotProduct612
  %__product621 = fmul float %__leftComp373, %__rightComp600
  %__dotProduct622 = fadd float %__product621, %__dotProduct617
  %__product627 = fmul float %__leftComp379, %__rightComp586
  %__product631 = fmul float %__leftComp383, %__rightComp590
  %__dotProduct632 = fadd float %__product627, %__product631
  %__product636 = fmul float %__leftComp388, %__rightComp595
  %__dotProduct637 = fadd float %__product636, %__dotProduct632
  %__product641 = fmul float %__leftComp393, %__rightComp600
  %__dotProduct642 = fadd float %__product641, %__dotProduct637
  %__product647 = fmul float %__leftComp399, %__rightComp586
  %__product651 = fmul float %__leftComp403, %__rightComp590
  %__dotProduct652 = fadd float %__product647, %__product651
  %__product656 = fmul float %__leftComp408, %__rightComp595
  %__dotProduct657 = fadd float %__product656, %__dotProduct652
  %__product661 = fmul float %__leftComp413, %__rightComp600
  %__dotProduct662 = fadd float %__product661, %__dotProduct657
  %__product672 = fmul float %.pre-phi, %__dotProduct356
  %__product675 = fmul float %.pre-phi734, %__dotProduct438
  %__dotProduct676 = fadd float %__product672, %__product675
  %__product679 = fmul float %.pre-phi736, %__dotProduct520
  %__dotProduct680 = fadd float %__product679, %__dotProduct676
  %__product683 = fmul float %.pre-phi738, %__dotProduct602
  %__dotProduct684 = fadd float %__product683, %__dotProduct680
  %__product687 = fmul float %.pre-phi, %__dotProduct376
  %__product690 = fmul float %.pre-phi734, %__dotProduct458
  %__dotProduct691 = fadd float %__product687, %__product690
  %__product694 = fmul float %.pre-phi736, %__dotProduct540
  %__dotProduct695 = fadd float %__product694, %__dotProduct691
  %__product698 = fmul float %.pre-phi738, %__dotProduct622
  %__dotProduct699 = fadd float %__product698, %__dotProduct695
  %__product702 = fmul float %.pre-phi, %__dotProduct396
  %__product705 = fmul float %.pre-phi734, %__dotProduct478
  %__dotProduct706 = fadd float %__product702, %__product705
  %__product709 = fmul float %.pre-phi736, %__dotProduct560
  %__dotProduct710 = fadd float %__product709, %__dotProduct706
  %__product713 = fmul float %.pre-phi738, %__dotProduct642
  %__dotProduct714 = fadd float %__product713, %__dotProduct710
  %__product717 = fmul float %.pre-phi, %__dotProduct416
  %__product720 = fmul float %.pre-phi734, %__dotProduct498
  %__dotProduct721 = fadd float %__product717, %__product720
  %__product724 = fmul float %.pre-phi736, %__dotProduct580
  %__dotProduct725 = fadd float %__product724, %__dotProduct721
  %__product728 = fmul float %.pre-phi738, %__dotProduct662
  %__dotProduct729 = fadd float %__product728, %__dotProduct725
  %58 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct684, i32 0, float %__dotProduct699, i32 0, float %__dotProduct714, i32 0, float %__dotProduct729, i32 0)
  br label %ifmerge731

ifmerge731:                                       ; preds = %else336, %then268
  %.pn = phi <4 x float> [ %57, %then268 ], [ %58, %else336 ]
  %FragColor_shadow732.1 = fadd <4 x float> %FragColor_shadow732.0, %.pn
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %FragColor_shadow732.1)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge731
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float>, i32, float, i32, float, i32, float, i32, <4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) nounwind readnone
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform vec4[4] un34;
uniform vec3[3] colorTransform;
uniform vec4[4] m;
uniform vec4[4] n;
uniform vec4[4] um43;
in vec3 Color;
const float const35_1f = 1.0;
in vec4 v;
in vec4 u;
const float const121_0f = 0.0;
const vec4 const123 = vec4(0.0, 0.0, 0.0, 0.0);
const vec4 const125 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
    float _pre_phi738;
    float _pre_phi736;
    float _pre_phi734;
    float _pre_phi;
    vec4 FragColor_shadow732_0;
    vec4 _pn;
    vec4 temp27 = un34[1];
    vec3 __column = colorTransform[0];
    float __dot = dot(Color, __column);
    vec3 __column1 = colorTransform[1];
    float __dot2 = dot(Color, __column1);
    vec3 __column3 = colorTransform[2];
    float __dot4 = dot(Color, __column3);
    vec4 temp34 = vec4(__dot, __dot2, __dot4, const35_1f);
    vec4 FragColor_shadow6 = temp27 + temp34;
    vec4 element1 = m[0];
    vec4 element2 = n[0];
    bvec4 temp39 = notEqual(element1, element2);
    bool temp40 = any(temp39);
    vec4 element19 = m[1];
    vec4 element210 = n[1];
    bvec4 temp43 = notEqual(element19, element210);
    bool temp44 = any(temp43);
    bool temp45 = temp40 || temp44;
    vec4 element111 = m[2];
    vec4 element212 = n[2];
    bvec4 temp48 = notEqual(element111, element212);
    bool temp49 = any(temp48);
    bool temp50 = temp45 || temp49;
    vec4 element113 = m[3];
    vec4 element214 = n[3];
    bvec4 temp53 = notEqual(element113, element214);
    bool temp54 = any(temp53);
    bool temp55 = temp50 || temp54;
    if (temp55) {
        vec4 FragColor_shadow15 = FragColor_shadow6 + v;
        _pre_phi738 = v.w;
        _pre_phi736 = v.z;
        _pre_phi734 = v.y;
        _pre_phi = v.x;
        FragColor_shadow732_0 = FragColor_shadow15;
    }
    else {
        float __product = element1.x * v.x;
        float __product24 = element19.x * v.y;
        float __dotProduct = __product + __product24;
        float __product27 = element111.x * v.z;
        float __dotProduct28 = __product27 + __dotProduct;
        float __product31 = element113.x * v.w;
        float __dotProduct32 = __product31 + __dotProduct28;
        float __product35 = element1.y * v.x;
        float __product38 = element19.y * v.y;
        float __dotProduct39 = __product35 + __product38;
        float __product42 = element111.y * v.z;
        float __dotProduct43 = __product42 + __dotProduct39;
        float __product46 = element113.y * v.w;
        float __dotProduct47 = __product46 + __dotProduct43;
        float __product50 = element1.z * v.x;
        float __product53 = element19.z * v.y;
        float __dotProduct54 = __product50 + __product53;
        float __product57 = element111.z * v.z;
        float __dotProduct58 = __product57 + __dotProduct54;
        float __product61 = element113.z * v.w;
        float __dotProduct62 = __product61 + __dotProduct58;
        float __product65 = element1.w * v.x;
        float __product68 = element19.w * v.y;
        float __dotProduct69 = __product65 + __product68;
        float __product72 = element111.w * v.z;
        float __dotProduct73 = __product72 + __dotProduct69;
        float __product76 = element113.w * v.w;
        float __dotProduct77 = __product76 + __dotProduct73;
        vec4 temp85 = vec4(__dotProduct32, __dotProduct47, __dotProduct62, __dotProduct77);
        vec4 FragColor_shadow78 = FragColor_shadow6 + temp85;
        vec4 __column82 = element1 - element2;
        vec4 __column85 = element19 - element210;
        vec4 __column88 = element111 - element212;
        vec4 __column91 = element113 - element214;
        float __dot93 = dot(v, __column82);
        float __dot95 = dot(v, __column85);
        float __dot97 = dot(v, __column88);
        float __dot99 = dot(v, __column91);
        vec4 temp95 = vec4(__dot93, __dot95, __dot97, __dot99);
        vec4 FragColor_shadow100 = FragColor_shadow78 + temp95;
        _pre_phi738 = v.w;
        _pre_phi736 = v.z;
        _pre_phi734 = v.y;
        _pre_phi = v.x;
        FragColor_shadow732_0 = FragColor_shadow100;
    }
    
    vec4 temp97 = u.zwxx;
    vec4 temp98 = u.wxxy;
    vec4 temp99 = u.xxyz;
    float temp100 = _pre_phi * u.x;
    float temp101 = _pre_phi * u.y;
    float temp102 = _pre_phi * u.z;
    float temp103 = _pre_phi * u.w;
    float temp104 = _pre_phi734 * u.x;
    float temp105 = _pre_phi734 * u.y;
    float temp106 = _pre_phi734 * u.z;
    float temp107 = _pre_phi734 * u.w;
    float temp108 = _pre_phi736 * u.x;
    float temp109 = _pre_phi736 * u.y;
    float temp110 = _pre_phi736 * u.z;
    float temp111 = _pre_phi736 * u.w;
    float temp112 = _pre_phi738 * u.x;
    float temp113 = _pre_phi738 * u.y;
    float temp114 = _pre_phi738 * u.z;
    float temp115 = _pre_phi738 * u.w;
    vec4 temp116 = vec4(temp100, temp101, temp102, temp103);
    vec4 temp117 = vec4(temp104, temp105, temp106, temp107);
    vec4 temp118 = vec4(temp108, temp109, temp110, temp111);
    vec4 temp119 = vec4(temp112, temp113, temp114, temp115);
    vec4 temp120 = vec4(_pre_phi, const121_0f, const121_0f, const121_0f);
    vec4 temp122 = const123;
    temp122.yzw = vec3(_pre_phi, const121_0f, const121_0f);
    vec4 temp124 = const125;
    temp124.zw = vec2(_pre_phi, const121_0f);
    vec4 temp126 = vec4(const121_0f, const121_0f, const121_0f, v.x);
    vec4 __column188 = temp120 + temp116;
    vec4 __column191 = temp122 + temp117;
    vec4 __column194 = temp124 + temp118;
    vec4 __column197 = temp126 + temp119;
    vec4 __column247 = u + __column188;
    vec4 __column250 = temp99 + __column191;
    vec4 __column253 = temp98 + __column194;
    vec4 __column256 = temp97 + __column197;
    vec4 element2261 = un34[0];
    bvec4 temp136 = equal(__column247, element2261);
    bool temp137 = all(temp136);
    vec4 element2263 = un34[1];
    bvec4 temp139 = equal(__column250, element2263);
    bool temp140 = all(temp139);
    bool temp141 = temp137 && temp140;
    vec4 element2265 = un34[2];
    bvec4 temp143 = equal(__column253, element2265);
    bool temp144 = all(temp143);
    bool temp145 = temp141 && temp144;
    vec4 element2267 = un34[3];
    bvec4 temp147 = equal(__column256, element2267);
    bool temp148 = all(temp147);
    bool temp149 = temp145 && temp148;
    if (temp149) {
        float __product277 = u.x * __column247.x;
        float __product280 = u.y * __column250.x;
        float __dotProduct281 = __product277 + __product280;
        float __product284 = u.z * __column253.x;
        float __dotProduct285 = __product284 + __dotProduct281;
        float __product288 = u.w * __column256.x;
        float __dotProduct289 = __product288 + __dotProduct285;
        float __product292 = u.x * __column247.y;
        float __product295 = u.y * __column250.y;
        float __dotProduct296 = __product292 + __product295;
        float __product299 = u.z * __column253.y;
        float __dotProduct300 = __product299 + __dotProduct296;
        float __product303 = u.w * __column256.y;
        float __dotProduct304 = __product303 + __dotProduct300;
        float __product307 = u.x * __column247.z;
        float __product310 = u.y * __column250.z;
        float __dotProduct311 = __product307 + __product310;
        float __product314 = u.z * __column253.z;
        float __dotProduct315 = __product314 + __dotProduct311;
        float __product318 = u.w * __column256.z;
        float __dotProduct319 = __product318 + __dotProduct315;
        float __product322 = u.x * __column247.w;
        float __product325 = u.y * __column250.w;
        float __dotProduct326 = __product322 + __product325;
        float __product329 = u.z * __column253.w;
        float __dotProduct330 = __product329 + __dotProduct326;
        float __product333 = u.w * __column256.w;
        float __dotProduct334 = __product333 + __dotProduct330;
        vec4 temp178 = vec4(__dotProduct289, __dotProduct304, __dotProduct319, __dotProduct334);
        _pn = temp178;
    }
    else {
        vec4 __rightColumn339 = um43[0];
        float __product341 = element2261.x * __rightColumn339.x;
        float __product345 = element2263.x * __rightColumn339.y;
        float __dotProduct346 = __product341 + __product345;
        float __product350 = element2265.x * __rightColumn339.z;
        float __dotProduct351 = __product350 + __dotProduct346;
        float __product355 = element2267.x * __rightColumn339.w;
        float __dotProduct356 = __product355 + __dotProduct351;
        float __product361 = element2261.y * __rightColumn339.x;
        float __product365 = element2263.y * __rightColumn339.y;
        float __dotProduct366 = __product361 + __product365;
        float __product370 = element2265.y * __rightColumn339.z;
        float __dotProduct371 = __product370 + __dotProduct366;
        float __product375 = element2267.y * __rightColumn339.w;
        float __dotProduct376 = __product375 + __dotProduct371;
        float __product381 = element2261.z * __rightColumn339.x;
        float __product385 = element2263.z * __rightColumn339.y;
        float __dotProduct386 = __product381 + __product385;
        float __product390 = element2265.z * __rightColumn339.z;
        float __dotProduct391 = __product390 + __dotProduct386;
        float __product395 = element2267.z * __rightColumn339.w;
        float __dotProduct396 = __product395 + __dotProduct391;
        float __product401 = element2261.w * __rightColumn339.x;
        float __product405 = element2263.w * __rightColumn339.y;
        float __dotProduct406 = __product401 + __product405;
        float __product410 = element2265.w * __rightColumn339.z;
        float __dotProduct411 = __product410 + __dotProduct406;
        float __product415 = element2267.w * __rightColumn339.w;
        float __dotProduct416 = __product415 + __dotProduct411;
        vec4 __rightColumn419 = um43[1];
        float __product423 = element2261.x * __rightColumn419.x;
        float __product427 = element2263.x * __rightColumn419.y;
        float __dotProduct428 = __product423 + __product427;
        float __product432 = element2265.x * __rightColumn419.z;
        float __dotProduct433 = __product432 + __dotProduct428;
        float __product437 = element2267.x * __rightColumn419.w;
        float __dotProduct438 = __product437 + __dotProduct433;
        float __product443 = element2261.y * __rightColumn419.x;
        float __product447 = element2263.y * __rightColumn419.y;
        float __dotProduct448 = __product443 + __product447;
        float __product452 = element2265.y * __rightColumn419.z;
        float __dotProduct453 = __product452 + __dotProduct448;
        float __product457 = element2267.y * __rightColumn419.w;
        float __dotProduct458 = __product457 + __dotProduct453;
        float __product463 = element2261.z * __rightColumn419.x;
        float __product467 = element2263.z * __rightColumn419.y;
        float __dotProduct468 = __product463 + __product467;
        float __product472 = element2265.z * __rightColumn419.z;
        float __dotProduct473 = __product472 + __dotProduct468;
        float __product477 = element2267.z * __rightColumn419.w;
        float __dotProduct478 = __product477 + __dotProduct473;
        float __product483 = element2261.w * __rightColumn419.x;
        float __product487 = element2263.w * __rightColumn419.y;
        float __dotProduct488 = __product483 + __product487;
        float __product492 = element2265.w * __rightColumn419.z;
        float __dotProduct493 = __product492 + __dotProduct488;
        float __product497 = element2267.w * __rightColumn419.w;
        float __dotProduct498 = __product497 + __dotProduct493;
        vec4 __rightColumn501 = um43[2];
        float __product505 = element2261.x * __rightColumn501.x;
        float __product509 = element2263.x * __rightColumn501.y;
        float __dotProduct510 = __product505 + __product509;
        float __product514 = element2265.x * __rightColumn501.z;
        float __dotProduct515 = __product514 + __dotProduct510;
        float __product519 = element2267.x * __rightColumn501.w;
        float __dotProduct520 = __product519 + __dotProduct515;
        float __product525 = element2261.y * __rightColumn501.x;
        float __product529 = element2263.y * __rightColumn501.y;
        float __dotProduct530 = __product525 + __product529;
        float __product534 = element2265.y * __rightColumn501.z;
        float __dotProduct535 = __product534 + __dotProduct530;
        float __product539 = element2267.y * __rightColumn501.w;
        float __dotProduct540 = __product539 + __dotProduct535;
        float __product545 = element2261.z * __rightColumn501.x;
        float __product549 = element2263.z * __rightColumn501.y;
        float __dotProduct550 = __product545 + __product549;
        float __product554 = element2265.z * __rightColumn501.z;
        float __dotProduct555 = __product554 + __dotProduct550;
        float __product559 = element2267.z * __rightColumn501.w;
        float __dotProduct560 = __product559 + __dotProduct555;
        float __product565 = element2261.w * __rightColumn501.x;
        float __product569 = element2263.w * __rightColumn501.y;
        float __dotProduct570 = __product565 + __product569;
        float __product574 = element2265.w * __rightColumn501.z;
        float __dotProduct575 = __product574 + __dotProduct570;
        float __product579 = element2267.w * __rightColumn501.w;
        float __dotProduct580 = __product579 + __dotProduct575;
        vec4 __rightColumn583 = um43[3];
        float __product587 = element2261.x * __rightColumn583.x;
        float __product591 = element2263.x * __rightColumn583.y;
        float __dotProduct592 = __product587 + __product591;
        float __product596 = element2265.x * __rightColumn583.z;
        float __dotProduct597 = __product596 + __dotProduct592;
        float __product601 = element2267.x * __rightColumn583.w;
        float __dotProduct602 = __product601 + __dotProduct597;
        float __product607 = element2261.y * __rightColumn583.x;
        float __product611 = element2263.y * __rightColumn583.y;
        float __dotProduct612 = __product607 + __product611;
        float __product616 = element2265.y * __rightColumn583.z;
        float __dotProduct617 = __product616 + __dotProduct612;
        float __product621 = element2267.y * __rightColumn583.w;
        float __dotProduct622 = __product621 + __dotProduct617;
        float __product627 = element2261.z * __rightColumn583.x;
        float __product631 = element2263.z * __rightColumn583.y;
        float __dotProduct632 = __product627 + __product631;
        float __product636 = element2265.z * __rightColumn583.z;
        float __dotProduct637 = __product636 + __dotProduct632;
        float __product641 = element2267.z * __rightColumn583.w;
        float __dotProduct642 = __product641 + __dotProduct637;
        float __product647 = element2261.w * __rightColumn583.x;
        float __product651 = element2263.w * __rightColumn583.y;
        float __dotProduct652 = __product647 + __product651;
        float __product656 = element2265.w * __rightColumn583.z;
        float __dotProduct657 = __product656 + __dotProduct652;
        float __product661 = element2267.w * __rightColumn583.w;
        float __dotProduct662 = __product661 + __dotProduct657;
        float __product672 = _pre_phi * __dotProduct356;
        float __product675 = _pre_phi734 * __dotProduct438;
        float __dotProduct676 = __product672 + __product675;
        float __product679 = _pre_phi736 * __dotProduct520;
        float __dotProduct680 = __product679 + __dotProduct676;
        float __product683 = _pre_phi738 * __dotProduct602;
        float __dotProduct684 = __product683 + __dotProduct680;
        float __product687 = _pre_phi * __dotProduct376;
        float __product690 = _pre_phi734 * __dotProduct458;
        float __dotProduct691 = __product687 + __product690;
        float __product694 = _pre_phi736 * __dotProduct540;
        float __dotProduct695 = __product694 + __dotProduct691;
        float __product698 = _pre_phi738 * __dotProduct622;
        float __dotProduct699 = __product698 + __dotProduct695;
        float __product702 = _pre_phi * __dotProduct396;
        float __product705 = _pre_phi734 * __dotProduct478;
        float __dotProduct706 = __product702 + __product705;
        float __product709 = _pre_phi736 * __dotProduct560;
        float __dotProduct710 = __product709 + __dotProduct706;
        float __product713 = _pre_phi738 * __dotProduct642;
        float __dotProduct714 = __product713 + __dotProduct710;
        float __product717 = _pre_phi * __dotProduct416;
        float __product720 = _pre_phi734 * __dotProduct498;
        float __dotProduct721 = __product717 + __product720;
        float __product724 = _pre_phi736 * __dotProduct580;
        float __dotProduct725 = __product724 + __dotProduct721;
        float __product728 = _pre_phi738 * __dotProduct662;
        float __dotProduct729 = __product728 + __dotProduct725;
        vec4 temp323 = vec4(__dotProduct684, __dotProduct699, __dotProduct714, __dotProduct729);
        _pn = temp323;
    }
    
    vec4 FragColor_shadow732_1 = FragColor_shadow732_0 + _pn;
    gl_FragColor = FragColor_shadow732_1;
    
}
WARNING: 0:337: Two consecutive underscores are reserved for future use.
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform vec4[4] un34;
uniform vec3[3] colorTransform;
uniform vec4[4] m;
uniform vec4[4] n;
uniform vec4[4] um43;
in vec3 Color;
const float const35_1f = 1.0;
in vec4 v;
in vec4 v;
in vec4 u;
const float const121_0f = 0.0;
const vec4 const123 = vec4(0.0, 0.0, 0.0, 0.0);
const vec4 const125 = vec4(0.0, 0.0, 0.0, 0.0);
in vec4 v;

void main()
{
    vec4 FragColor_shadow732_0_0;
    float _pre_phi_0;
    float _pre_phi734_0;
    float _pre_phi736_0;
    float _pre_phi738_0;
    vec4 _pn_0;
    vec4 temp271 = un34[1];
    vec3 __column2 = colorTransform[0];
    float __dot3 = dot(Color, __column2);
    vec3 __column14 = colorTransform[1];
    float __dot26 = dot(Color, __column14);
    vec3 __column37 = colorTransform[2];
    float __dot49 = dot(Color, __column37);
    vec4 temp34 = vec4(__dot3, __dot26, __dot49, const35_1f);
    vec4 FragColor_shadow611 = temp271 + temp34;
    vec4 element112 = m[0];
    vec4 element213 = n[0];
    bvec4 temp3914 = notEqual(element112, element213);
    bool temp4015 = any(temp3914);
    vec4 element1916 = m[1];
    vec4 element21017 = n[1];
    bvec4 temp4318 = notEqual(element1916, element21017);
    bool temp4419 = any(temp4318);
    bool temp4520 = temp4015 || temp4419;
    vec4 element11121 = m[2];
    vec4 element21222 = n[2];
    bvec4 temp4823 = notEqual(element11121, element21222);
    bool temp4924 = any(temp4823);
    bool temp5025 = temp4520 || temp4924;
    vec4 element11326 = m[3];
    vec4 element21427 = n[3];
    bvec4 temp5328 = notEqual(element11326, element21427);
    bool temp5429 = any(temp5328);
    bool temp5530 = temp5025 || temp5429;
    if (temp5530) {
        vec4 FragColor_shadow1531 = FragColor_shadow611 + v;
        FragColor_shadow732_0_0 = FragColor_shadow1531;
        _pre_phi_0 = v.x;
        _pre_phi734_0 = v.y;
        _pre_phi736_0 = v.z;
        _pre_phi738_0 = v.w;
    }
    else {
        float __product42 = element112.x * v.x;
        float __product2444 = element1916.x * v.y;
        float __dotProduct45 = __product42 + __product2444;
        float __product2747 = element11121.x * v.z;
        float __dotProduct2848 = __product2747 + __dotProduct45;
        float __product3150 = element11326.x * v.w;
        float __dotProduct3251 = __product3150 + __dotProduct2848;
        float __product3553 = element112.y * v.x;
        float __product3855 = element1916.y * v.y;
        float __dotProduct3956 = __product3553 + __product3855;
        float __product425759 = element11121.y * v.z;
        float __dotProduct4360 = __product425759 + __dotProduct3956;
        float __product4662 = element11326.y * v.w;
        float __dotProduct4763 = __product4662 + __dotProduct4360;
        float __product5065 = element112.z * v.x;
        float __product5367 = element1916.z * v.y;
        float __dotProduct5468 = __product5065 + __product5367;
        float __product5770 = element11121.z * v.z;
        float __dotProduct5871 = __product5770 + __dotProduct5468;
        float __product6173 = element11326.z * v.w;
        float __dotProduct6274 = __product6173 + __dotProduct5871;
        float __product6576 = element112.w * v.x;
        float __product6878 = element1916.w * v.y;
        float __dotProduct6979 = __product6576 + __product6878;
        float __product7281 = element11121.w * v.z;
        float __dotProduct7382 = __product7281 + __dotProduct6979;
        float __product7684 = element11326.w * v.w;
        float __dotProduct7785 = __product7684 + __dotProduct7382;
        vec4 temp85 = vec4(__dotProduct3251, __dotProduct4763, __dotProduct6274, __dotProduct7785);
        vec4 FragColor_shadow7888 = FragColor_shadow611 + temp85;
        vec4 __column8289 = element112 - element213;
        vec4 __column8590 = element1916 - element21017;
        vec4 __column8891 = element11121 - element21222;
        vec4 __column9192 = element11326 - element21427;
        float __dot9394 = dot(v, __column8289);
        float __dot9596 = dot(v, __column8590);
        float __dot9798 = dot(v, __column8891);
        float __dot99100 = dot(v, __column9192);
        vec4 temp95 = vec4(__dot9394, __dot9596, __dot9798, __dot99100);
        vec4 FragColor_shadow100103 = temp95 + FragColor_shadow7888;
        FragColor_shadow732_0_0 = FragColor_shadow100103;
        _pre_phi_0 = v.x;
        _pre_phi734_0 = v.y;
        _pre_phi736_0 = v.z;
        _pre_phi738_0 = v.w;
    }
    
    vec4 temp97 = u.xxyz;
    vec4 temp98 = u.wxxy;
    vec4 temp99 = u.zwxx;
    float temp100119 = _pre_phi_0 * u.x;
    float temp101121 = _pre_phi_0 * u.y;
    float temp102123 = _pre_phi_0 * u.z;
    float temp103125 = _pre_phi_0 * u.w;
    float temp104127 = _pre_phi734_0 * u.x;
    float temp105129 = _pre_phi734_0 * u.y;
    float temp106131 = _pre_phi734_0 * u.z;
    float temp107133 = _pre_phi734_0 * u.w;
    float temp108135 = _pre_phi736_0 * u.x;
    float temp109137 = _pre_phi736_0 * u.y;
    float temp110139 = _pre_phi736_0 * u.z;
    float temp111141 = _pre_phi736_0 * u.w;
    float temp112143 = _pre_phi738_0 * u.x;
    float temp113145 = _pre_phi738_0 * u.y;
    float temp114147 = _pre_phi738_0 * u.z;
    float temp115149 = _pre_phi738_0 * u.w;
    vec4 temp116 = vec4(temp100119, temp101121, temp102123, temp103125);
    vec4 temp117 = vec4(temp104127, temp105129, temp106131, temp107133);
    vec4 temp118 = vec4(temp108135, temp109137, temp110139, temp111141);
    vec4 temp119 = vec4(temp112143, temp113145, temp114147, temp115149);
    vec4 temp120 = vec4(_pre_phi_0, const121_0f, const121_0f, const121_0f);
    vec4 temp122 = const123;
    temp122.yzw = vec3(_pre_phi_0, const121_0f, const121_0f);
    vec4 temp124 = const125;
    temp124.zw = vec2(_pre_phi_0, const121_0f);
    vec4 temp126 = vec4(const121_0f, const121_0f, const121_0f, v.x);
    vec4 __column188167 = temp120 + temp116;
    vec4 __column191168 = temp122 + temp117;
    vec4 __column194169 = temp124 + temp118;
    vec4 __column197170 = temp126 + temp119;
    vec4 __column247172 = u + __column188167;
    vec4 __column250173 = temp97 + __column191168;
    vec4 __column253174 = temp98 + __column194169;
    vec4 __column256175 = temp99 + __column197170;
    vec4 element2261176 = un34[0];
    bvec4 temp136177 = equal(__column247172, element2261176);
    bool temp137178 = all(temp136177);
    bvec4 temp139180 = equal(__column250173, temp271);
    bool temp140181 = all(temp139180);
    bool temp141182 = temp137178 && temp140181;
    vec4 element2265183 = un34[2];
    bvec4 temp143184 = equal(__column253174, element2265183);
    bool temp144185 = all(temp143184);
    bool temp145186 = temp141182 && temp144185;
    vec4 element2267187 = un34[3];
    bvec4 temp147188 = equal(__column256175, element2267187);
    bool temp148189 = all(temp147188);
    bool temp149190 = temp145186 && temp148189;
    if (temp149190) {
        float __product277193 = u.x * __column247172.x;
        float __product280195 = u.y * __column250173.x;
        float __dotProduct281196 = __product277193 + __product280195;
        float __product284198 = u.z * __column253174.x;
        float __dotProduct285199 = __product284198 + __dotProduct281196;
        float __product288201 = u.w * __column256175.x;
        float __dotProduct289202 = __product288201 + __dotProduct285199;
        float __product292204 = u.x * __column247172.y;
        float __product295206 = u.y * __column250173.y;
        float __dotProduct296207 = __product292204 + __product295206;
        float __product299209 = u.z * __column253174.y;
        float __dotProduct300210 = __product299209 + __dotProduct296207;
        float __product303212 = u.w * __column256175.y;
        float __dotProduct304213 = __product303212 + __dotProduct300210;
        float __product307215 = u.x * __column247172.z;
        float __product310217 = u.y * __column250173.z;
        float __dotProduct311218 = __product307215 + __product310217;
        float __product314220 = u.z * __column253174.z;
        float __dotProduct315221 = __product314220 + __dotProduct311218;
        float __product318223 = u.w * __column256175.z;
        float __dotProduct319224 = __product318223 + __dotProduct315221;
        float __product322226 = u.x * __column247172.w;
        float __product325228 = u.y * __column250173.w;
        float __dotProduct326229 = __product322226 + __product325228;
        float __product329231 = u.z * __column253174.w;
        float __dotProduct330232 = __product329231 + __dotProduct326229;
        float __product333234 = u.w * __column256175.w;
        float __dotProduct334235 = __product333234 + __dotProduct330232;
        vec4 temp177 = vec4(__dotProduct289202, __dotProduct304213, __dotProduct319224, __dotProduct334235);
        _pn_0 = temp177;
    }
    else {
        vec4 __rightColumn339240 = um43[0];
        float __product341241 = element2261176.x * __rightColumn339240.x;
        float __product345242 = temp271.x * __rightColumn339240.y;
        float __dotProduct346243 = __product341241 + __product345242;
        float __product350244 = element2265183.x * __rightColumn339240.z;
        float __dotProduct351245 = __product350244 + __dotProduct346243;
        float __product355246 = element2267187.x * __rightColumn339240.w;
        float __dotProduct356247 = __product355246 + __dotProduct351245;
        float __product361248 = element2261176.y * __rightColumn339240.x;
        float __product365249 = temp271.y * __rightColumn339240.y;
        float __dotProduct366250 = __product361248 + __product365249;
        float __product370251 = element2265183.y * __rightColumn339240.z;
        float __dotProduct371252 = __product370251 + __dotProduct366250;
        float __product375253 = element2267187.y * __rightColumn339240.w;
        float __dotProduct376254 = __product375253 + __dotProduct371252;
        float __product381255 = element2261176.z * __rightColumn339240.x;
        float __product385256 = temp271.z * __rightColumn339240.y;
        float __dotProduct386257 = __product381255 + __product385256;
        float __product390258 = element2265183.z * __rightColumn339240.z;
        float __dotProduct391259 = __product390258 + __dotProduct386257;
        float __product395260 = element2267187.z * __rightColumn339240.w;
        float __dotProduct396261 = __product395260 + __dotProduct391259;
        float __product401262 = element2261176.w * __rightColumn339240.x;
        float __product405263 = temp271.w * __rightColumn339240.y;
        float __dotProduct406264 = __product401262 + __product405263;
        float __product410265 = element2265183.w * __rightColumn339240.z;
        float __dotProduct411266 = __product410265 + __dotProduct406264;
        float __product415267 = element2267187.w * __rightColumn339240.w;
        float __dotProduct416268 = __product415267 + __dotProduct411266;
        vec4 __rightColumn419269 = um43[1];
        float __product423270 = element2261176.x * __rightColumn419269.x;
        float __product427271 = temp271.x * __rightColumn419269.y;
        float __dotProduct428272 = __product423270 + __product427271;
        float __product432273 = element2265183.x * __rightColumn419269.z;
        float __dotProduct433274 = __product432273 + __dotProduct428272;
        float __product437275 = element2267187.x * __rightColumn419269.w;
        float __dotProduct438276 = __product437275 + __dotProduct433274;
        float __product443277 = element2261176.y * __rightColumn419269.x;
        float __product447278 = temp271.y * __rightColumn419269.y;
        float __dotProduct448279 = __product443277 + __product447278;
        float __product452280 = element2265183.y * __rightColumn419269.z;
        float __dotProduct453281 = __product452280 + __dotProduct448279;
        float __product457282 = element2267187.y * __rightColumn419269.w;
        float __dotProduct458283 = __product457282 + __dotProduct453281;
        float __product463284 = element2261176.z * __rightColumn419269.x;
        float __product467285 = temp271.z * __rightColumn419269.y;
        float __dotProduct468286 = __product463284 + __product467285;
        float __product472287 = element2265183.z * __rightColumn419269.z;
        float __dotProduct473288 = __product472287 + __dotProduct468286;
        float __product477289 = element2267187.z * __rightColumn419269.w;
        float __dotProduct478290 = __product477289 + __dotProduct473288;
        float __product483291 = element2261176.w * __rightColumn419269.x;
        float __product487292 = temp271.w * __rightColumn419269.y;
        float __dotProduct488293 = __product483291 + __product487292;
        float __product492294 = element2265183.w * __rightColumn419269.z;
        float __dotProduct493295 = __product492294 + __dotProduct488293;
        float __product497296 = element2267187.w * __rightColumn419269.w;
        float __dotProduct498297 = __product497296 + __dotProduct493295;
        vec4 __rightColumn501298 = um43[2];
        float __product505299 = element2261176.x * __rightColumn501298.x;
        float __product509300 = temp271.x * __rightColumn501298.y;
        float __dotProduct510301 = __product505299 + __product509300;
        float __product514302 = element2265183.x * __rightColumn501298.z;
        float __dotProduct515303 = __product514302 + __dotProduct510301;
        float __product519304 = element2267187.x * __rightColumn501298.w;
        float __dotProduct520305 = __product519304 + __dotProduct515303;
        float __product525306 = element2261176.y * __rightColumn501298.x;
        float __product529307 = temp271.y * __rightColumn501298.y;
        float __dotProduct530308 = __product525306 + __product529307;
        float __product534309 = element2265183.y * __rightColumn501298.z;
        float __dotProduct535310 = __product534309 + __dotProduct530308;
        float __product539311 = element2267187.y * __rightColumn501298.w;
        float __dotProduct540312 = __product539311 + __dotProduct535310;
        float __product545313 = element2261176.z * __rightColumn501298.x;
        float __product549314 = temp271.z * __rightColumn501298.y;
        float __dotProduct550315 = __product545313 + __product549314;
        float __product554316 = element2265183.z * __rightColumn501298.z;
        float __dotProduct555317 = __product554316 + __dotProduct550315;
        float __product559318 = element2267187.z * __rightColumn501298.w;
        float __dotProduct560319 = __product559318 + __dotProduct555317;
        float __product565320 = element2261176.w * __rightColumn501298.x;
        float __product569321 = temp271.w * __rightColumn501298.y;
        float __dotProduct570322 = __product565320 + __product569321;
        float __product574323 = element2265183.w * __rightColumn501298.z;
        float __dotProduct575324 = __product574323 + __dotProduct570322;
        float __product579325 = element2267187.w * __rightColumn501298.w;
        float __dotProduct580326 = __product579325 + __dotProduct575324;
        vec4 __rightColumn583327 = um43[3];
        float __product587328 = element2261176.x * __rightColumn583327.x;
        float __product591329 = temp271.x * __rightColumn583327.y;
        float __dotProduct592330 = __product587328 + __product591329;
        float __product596331 = element2265183.x * __rightColumn583327.z;
        float __dotProduct597332 = __product596331 + __dotProduct592330;
        float __product601333 = element2267187.x * __rightColumn583327.w;
        float __dotProduct602334 = __product601333 + __dotProduct597332;
        float __product607335 = element2261176.y * __rightColumn583327.x;
        float __product611336 = temp271.y * __rightColumn583327.y;
        float __dotProduct612337 = __product607335 + __product611336;
        float __product616338 = element2265183.y * __rightColumn583327.z;
        float __dotProduct617339 = __product616338 + __dotProduct612337;
        float __product621340 = element2267187.y * __rightColumn583327.w;
        float __dotProduct622341 = __product621340 + __dotProduct617339;
        float __product627342 = element2261176.z * __rightColumn583327.x;
        float __product631343 = temp271.z * __rightColumn583327.y;
        float __dotProduct632344 = __product627342 + __product631343;
        float __product636345 = element2265183.z * __rightColumn583327.z;
        float __dotProduct637346 = __product636345 + __dotProduct632344;
        float __product641347 = element2267187.z * __rightColumn583327.w;
        float __dotProduct642348 = __product641347 + __dotProduct637346;
        float __product647349 = element2261176.w * __rightColumn583327.x;
        float __product651350 = temp271.w * __rightColumn583327.y;
        float __dotProduct652351 = __product647349 + __product651350;
        float __product656352 = element2265183.w * __rightColumn583327.z;
        float __dotProduct657353 = __product656352 + __dotProduct652351;
        float __product661354 = element2267187.w * __rightColumn583327.w;
        float __dotProduct662355 = __product661354 + __dotProduct657353;
        float __product672356 = _pre_phi_0 * __dotProduct356247;
        float __product675357 = _pre_phi734_0 * __dotProduct438276;
        float __dotProduct676358 = __product672356 + __product675357;
        float __product679359 = _pre_phi736_0 * __dotProduct520305;
        float __dotProduct680360 = __product679359 + __dotProduct676358;
        float __product683361 = _pre_phi738_0 * __dotProduct602334;
        float __dotProduct684362 = __product683361 + __dotProduct680360;
        float __product687363 = _pre_phi_0 * __dotProduct376254;
        float __product690364 = _pre_phi734_0 * __dotProduct458283;
        float __dotProduct691365 = __product687363 + __product690364;
        float __product694366 = _pre_phi736_0 * __dotProduct540312;
        float __dotProduct695367 = __product694366 + __dotProduct691365;
        float __product698368 = _pre_phi738_0 * __dotProduct622341;
        float __dotProduct699369 = __product698368 + __dotProduct695367;
        float __product702370 = _pre_phi_0 * __dotProduct396261;
        float __product705371 = _pre_phi734_0 * __dotProduct478290;
        float __dotProduct706372 = __product702370 + __product705371;
        float __product709373 = _pre_phi736_0 * __dotProduct560319;
        float __dotProduct710374 = __product709373 + __dotProduct706372;
        float __product713375 = _pre_phi738_0 * __dotProduct642348;
        float __dotProduct714376 = __product713375 + __dotProduct710374;
        float __product717377 = _pre_phi_0 * __dotProduct416268;
        float __product720378 = _pre_phi734_0 * __dotProduct498297;
        float __dotProduct721379 = __product717377 + __product720378;
        float __product724380 = _pre_phi736_0 * __dotProduct580326;
        float __dotProduct725381 = __product724380 + __dotProduct721379;
        float __product728382 = _pre_phi738_0 * __dotProduct662355;
        float __dotProduct729383 = __product728382 + __dotProduct725381;
        vec4 temp322 = vec4(__dotProduct684362, __dotProduct699369, __dotProduct714376, __dotProduct729383);
        _pn_0 = temp322;
    }
    
    vec4 FragColor_shadow732_1388 = FragColor_shadow732_0_0 + _pn_0;
    gl_FragColor = FragColor_shadow732_1388;
    
}
