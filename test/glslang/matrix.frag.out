
Top IR:
; ModuleID = 'Top'

@gl_FragColor = internal global <4 x float> zeroinitializer
@un34 = external addrspace(2) constant [4 x <4 x float>]
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %constructed209 = alloca [4 x <4 x float>]
  %constructed162 = alloca [4 x <4 x float>]
  %constructed135 = alloca [4 x <4 x float>]
  %m34 = alloca [4 x <4 x float>]
  %constructed5 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %0 = load <4 x float> addrspace(2)* getelementptr inbounds ([4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1)
  %1 = load <4 x float>* %constructed
  %2 = extractelement <4 x float> %0, i32 0
  %3 = insertelement <4 x float> %1, float %2, i32 0
  %4 = extractelement <4 x float> %0, i32 1
  %5 = insertelement <4 x float> %3, float %4, i32 1
  %6 = extractelement <4 x float> %0, i32 2
  %7 = insertelement <4 x float> %5, float %6, i32 2
  %8 = extractelement <4 x float> %0, i32 3
  %gl_FragColor = insertelement <4 x float> %7, float %8, i32 3
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 -1, i32 1)
  %__matrix = load [3 x <3 x float>] addrspace(2)* @colorTransform
  %9 = alloca <3 x float>
  %10 = load <3 x float>* %9
  %__column = extractvalue [3 x <3 x float>] %__matrix, 0
  %__dot = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column)
  %11 = insertelement <3 x float> %10, float %__dot, i32 0
  %__column1 = extractvalue [3 x <3 x float>] %__matrix, 1
  %__dot2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column1)
  %12 = insertelement <3 x float> %11, float %__dot2, i32 1
  %__column3 = extractvalue [3 x <3 x float>] %__matrix, 2
  %__dot4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column3)
  %13 = insertelement <3 x float> %12, float %__dot4, i32 2
  %14 = load <4 x float>* %constructed5
  %15 = extractelement <3 x float> %13, i32 0
  %16 = insertelement <4 x float> %14, float %15, i32 0
  %17 = extractelement <3 x float> %13, i32 1
  %18 = insertelement <4 x float> %16, float %17, i32 1
  %19 = extractelement <3 x float> %13, i32 2
  %20 = insertelement <4 x float> %18, float %19, i32 2
  %21 = insertelement <4 x float> %20, float 1.000000e+00, i32 3
  %22 = load <4 x float>* @gl_FragColor
  %gl_FragColor6 = fadd <4 x float> %22, %21
  store <4 x float> %gl_FragColor6, <4 x float>* @gl_FragColor
  %__matrix7 = load [4 x <4 x float>] addrspace(2)* @m
  %__matrix8 = load [4 x <4 x float>] addrspace(2)* @n
  %__Matrix-Compare = alloca i1
  %__Matrix-Compare9 = load i1* %__Matrix-Compare
  %__column10 = extractvalue [4 x <4 x float>] %__matrix7, 0
  %__column11 = extractvalue [4 x <4 x float>] %__matrix8, 0
  %23 = fcmp one <4 x float> %__column10, %__column11
  %24 = call i1 @llvm.gla.any.v4i1(<4 x i1> %23)
  %__column12 = extractvalue [4 x <4 x float>] %__matrix7, 1
  %__column13 = extractvalue [4 x <4 x float>] %__matrix8, 1
  %25 = fcmp one <4 x float> %__column12, %__column13
  %26 = call i1 @llvm.gla.any.v4i1(<4 x i1> %25)
  %27 = or i1 %24, %26
  %__column14 = extractvalue [4 x <4 x float>] %__matrix7, 2
  %__column15 = extractvalue [4 x <4 x float>] %__matrix8, 2
  %28 = fcmp one <4 x float> %__column14, %__column15
  %29 = call i1 @llvm.gla.any.v4i1(<4 x i1> %28)
  %30 = or i1 %27, %29
  %__column16 = extractvalue [4 x <4 x float>] %__matrix7, 3
  %__column17 = extractvalue [4 x <4 x float>] %__matrix8, 3
  %31 = fcmp one <4 x float> %__column16, %__column17
  %32 = call i1 @llvm.gla.any.v4i1(<4 x i1> %31)
  %33 = or i1 %30, %32
  br i1 %33, label %then, label %else

then:                                             ; preds = %entry
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %34 = load <4 x float>* @gl_FragColor
  %gl_FragColor18 = fadd <4 x float> %34, %v
  store <4 x float> %gl_FragColor18, <4 x float>* @gl_FragColor
  br label %ifmerge

else:                                             ; preds = %entry
  %__matrix19 = load [4 x <4 x float>] addrspace(2)* @m
  %v20 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %35 = alloca <4 x float>
  %36 = load <4 x float>* %35
  %__component = extractelement <4 x float> %v20, i32 0
  %__component21 = extractelement <4 x float> %v20, i32 1
  %__component22 = extractelement <4 x float> %v20, i32 2
  %__component23 = extractelement <4 x float> %v20, i32 3
  %__column24 = extractvalue [4 x <4 x float>] %__matrix19, 0
  %__element = extractelement <4 x float> %__column24, i32 0
  %__product = fmul float %__element, %__component
  %__column25 = extractvalue [4 x <4 x float>] %__matrix19, 1
  %__element26 = extractelement <4 x float> %__column25, i32 0
  %__product27 = fmul float %__element26, %__component21
  %__dotProduct = fadd float %__product, %__product27
  %__column28 = extractvalue [4 x <4 x float>] %__matrix19, 2
  %__element29 = extractelement <4 x float> %__column28, i32 0
  %__product30 = fmul float %__element29, %__component22
  %__dotProduct31 = fadd float %__dotProduct, %__product30
  %__column32 = extractvalue [4 x <4 x float>] %__matrix19, 3
  %__element33 = extractelement <4 x float> %__column32, i32 0
  %__product34 = fmul float %__element33, %__component23
  %__dotProduct35 = fadd float %__dotProduct31, %__product34
  %37 = insertelement <4 x float> %36, float %__dotProduct35, i32 0
  %__column36 = extractvalue [4 x <4 x float>] %__matrix19, 0
  %__element37 = extractelement <4 x float> %__column36, i32 1
  %__product38 = fmul float %__element37, %__component
  %__column39 = extractvalue [4 x <4 x float>] %__matrix19, 1
  %__element40 = extractelement <4 x float> %__column39, i32 1
  %__product41 = fmul float %__element40, %__component21
  %__dotProduct42 = fadd float %__product38, %__product41
  %__column43 = extractvalue [4 x <4 x float>] %__matrix19, 2
  %__element44 = extractelement <4 x float> %__column43, i32 1
  %__product45 = fmul float %__element44, %__component22
  %__dotProduct46 = fadd float %__dotProduct42, %__product45
  %__column47 = extractvalue [4 x <4 x float>] %__matrix19, 3
  %__element48 = extractelement <4 x float> %__column47, i32 1
  %__product49 = fmul float %__element48, %__component23
  %__dotProduct50 = fadd float %__dotProduct46, %__product49
  %38 = insertelement <4 x float> %37, float %__dotProduct50, i32 1
  %__column51 = extractvalue [4 x <4 x float>] %__matrix19, 0
  %__element52 = extractelement <4 x float> %__column51, i32 2
  %__product53 = fmul float %__element52, %__component
  %__column54 = extractvalue [4 x <4 x float>] %__matrix19, 1
  %__element55 = extractelement <4 x float> %__column54, i32 2
  %__product56 = fmul float %__element55, %__component21
  %__dotProduct57 = fadd float %__product53, %__product56
  %__column58 = extractvalue [4 x <4 x float>] %__matrix19, 2
  %__element59 = extractelement <4 x float> %__column58, i32 2
  %__product60 = fmul float %__element59, %__component22
  %__dotProduct61 = fadd float %__dotProduct57, %__product60
  %__column62 = extractvalue [4 x <4 x float>] %__matrix19, 3
  %__element63 = extractelement <4 x float> %__column62, i32 2
  %__product64 = fmul float %__element63, %__component23
  %__dotProduct65 = fadd float %__dotProduct61, %__product64
  %39 = insertelement <4 x float> %38, float %__dotProduct65, i32 2
  %__column66 = extractvalue [4 x <4 x float>] %__matrix19, 0
  %__element67 = extractelement <4 x float> %__column66, i32 3
  %__product68 = fmul float %__element67, %__component
  %__column69 = extractvalue [4 x <4 x float>] %__matrix19, 1
  %__element70 = extractelement <4 x float> %__column69, i32 3
  %__product71 = fmul float %__element70, %__component21
  %__dotProduct72 = fadd float %__product68, %__product71
  %__column73 = extractvalue [4 x <4 x float>] %__matrix19, 2
  %__element74 = extractelement <4 x float> %__column73, i32 3
  %__product75 = fmul float %__element74, %__component22
  %__dotProduct76 = fadd float %__dotProduct72, %__product75
  %__column77 = extractvalue [4 x <4 x float>] %__matrix19, 3
  %__element78 = extractelement <4 x float> %__column77, i32 3
  %__product79 = fmul float %__element78, %__component23
  %__dotProduct80 = fadd float %__dotProduct76, %__product79
  %40 = insertelement <4 x float> %39, float %__dotProduct80, i32 3
  %41 = load <4 x float>* @gl_FragColor
  %gl_FragColor81 = fadd <4 x float> %41, %40
  store <4 x float> %gl_FragColor81, <4 x float>* @gl_FragColor
  %v82 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %__matrix83 = load [4 x <4 x float>] addrspace(2)* @m
  %__matrix84 = load [4 x <4 x float>] addrspace(2)* @n
  %42 = alloca [4 x <4 x float>]
  %43 = load [4 x <4 x float>]* %42
  %__leftColumn = extractvalue [4 x <4 x float>] %__matrix83, 0
  %__rightColumn = extractvalue [4 x <4 x float>] %__matrix84, 0
  %__column85 = fsub <4 x float> %__leftColumn, %__rightColumn
  %44 = insertvalue [4 x <4 x float>] %43, <4 x float> %__column85, 0
  %__leftColumn86 = extractvalue [4 x <4 x float>] %__matrix83, 1
  %__rightColumn87 = extractvalue [4 x <4 x float>] %__matrix84, 1
  %__column88 = fsub <4 x float> %__leftColumn86, %__rightColumn87
  %45 = insertvalue [4 x <4 x float>] %44, <4 x float> %__column88, 1
  %__leftColumn89 = extractvalue [4 x <4 x float>] %__matrix83, 2
  %__rightColumn90 = extractvalue [4 x <4 x float>] %__matrix84, 2
  %__column91 = fsub <4 x float> %__leftColumn89, %__rightColumn90
  %46 = insertvalue [4 x <4 x float>] %45, <4 x float> %__column91, 2
  %__leftColumn92 = extractvalue [4 x <4 x float>] %__matrix83, 3
  %__rightColumn93 = extractvalue [4 x <4 x float>] %__matrix84, 3
  %__column94 = fsub <4 x float> %__leftColumn92, %__rightColumn93
  %47 = insertvalue [4 x <4 x float>] %46, <4 x float> %__column94, 3
  %48 = alloca <4 x float>
  %49 = load <4 x float>* %48
  %__column95 = extractvalue [4 x <4 x float>] %47, 0
  %__dot96 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v82, <4 x float> %__column95)
  %50 = insertelement <4 x float> %49, float %__dot96, i32 0
  %__column97 = extractvalue [4 x <4 x float>] %47, 1
  %__dot98 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v82, <4 x float> %__column97)
  %51 = insertelement <4 x float> %50, float %__dot98, i32 1
  %__column99 = extractvalue [4 x <4 x float>] %47, 2
  %__dot100 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v82, <4 x float> %__column99)
  %52 = insertelement <4 x float> %51, float %__dot100, i32 2
  %__column101 = extractvalue [4 x <4 x float>] %47, 3
  %__dot102 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v82, <4 x float> %__column101)
  %53 = insertelement <4 x float> %52, float %__dot102, i32 3
  %54 = load <4 x float>* @gl_FragColor
  %gl_FragColor103 = fadd <4 x float> %54, %53
  store <4 x float> %gl_FragColor103, <4 x float>* @gl_FragColor
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %v104 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %55 = extractelement <4 x float> %v104, i32 0
  %u = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %56 = extractelement <4 x float> %u, i32 0
  %57 = fmul float %55, %56
  %v105 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %58 = extractelement <4 x float> %v105, i32 0
  %u106 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %59 = extractelement <4 x float> %u106, i32 1
  %60 = fmul float %58, %59
  %v107 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %61 = extractelement <4 x float> %v107, i32 0
  %u108 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %62 = extractelement <4 x float> %u108, i32 2
  %63 = fmul float %61, %62
  %v109 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %64 = extractelement <4 x float> %v109, i32 0
  %u110 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %65 = extractelement <4 x float> %u110, i32 3
  %66 = fmul float %64, %65
  %v111 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %67 = extractelement <4 x float> %v111, i32 1
  %u112 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %68 = extractelement <4 x float> %u112, i32 0
  %69 = fmul float %67, %68
  %v113 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %70 = extractelement <4 x float> %v113, i32 1
  %u114 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %71 = extractelement <4 x float> %u114, i32 1
  %72 = fmul float %70, %71
  %v115 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %73 = extractelement <4 x float> %v115, i32 1
  %u116 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %74 = extractelement <4 x float> %u116, i32 2
  %75 = fmul float %73, %74
  %v117 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %76 = extractelement <4 x float> %v117, i32 1
  %u118 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %77 = extractelement <4 x float> %u118, i32 3
  %78 = fmul float %76, %77
  %v119 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %79 = extractelement <4 x float> %v119, i32 2
  %u120 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %80 = extractelement <4 x float> %u120, i32 0
  %81 = fmul float %79, %80
  %v121 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %82 = extractelement <4 x float> %v121, i32 2
  %u122 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %83 = extractelement <4 x float> %u122, i32 1
  %84 = fmul float %82, %83
  %v123 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %85 = extractelement <4 x float> %v123, i32 2
  %u124 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %86 = extractelement <4 x float> %u124, i32 2
  %87 = fmul float %85, %86
  %v125 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %88 = extractelement <4 x float> %v125, i32 2
  %u126 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %89 = extractelement <4 x float> %u126, i32 3
  %90 = fmul float %88, %89
  %v127 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %91 = extractelement <4 x float> %v127, i32 3
  %u128 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %92 = extractelement <4 x float> %u128, i32 0
  %93 = fmul float %91, %92
  %v129 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %94 = extractelement <4 x float> %v129, i32 3
  %u130 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %95 = extractelement <4 x float> %u130, i32 1
  %96 = fmul float %94, %95
  %v131 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %97 = extractelement <4 x float> %v131, i32 3
  %u132 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %98 = extractelement <4 x float> %u132, i32 2
  %99 = fmul float %97, %98
  %v133 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %100 = extractelement <4 x float> %v133, i32 3
  %u134 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %101 = extractelement <4 x float> %u134, i32 3
  %102 = fmul float %100, %101
  %__matrix136 = load [4 x <4 x float>]* %constructed135
  %__column137 = extractvalue [4 x <4 x float>] %__matrix136, 0
  %__column138 = insertelement <4 x float> %__column137, float %57, i32 0
  %__column139 = insertelement <4 x float> %__column138, float %60, i32 1
  %__column140 = insertelement <4 x float> %__column139, float %63, i32 2
  %__column141 = insertelement <4 x float> %__column140, float %66, i32 3
  %__matrix142 = insertvalue [4 x <4 x float>] %__matrix136, <4 x float> %__column141, 0
  %__column143 = extractvalue [4 x <4 x float>] %__matrix136, 1
  %__column144 = insertelement <4 x float> %__column143, float %69, i32 0
  %__column145 = insertelement <4 x float> %__column144, float %72, i32 1
  %__column146 = insertelement <4 x float> %__column145, float %75, i32 2
  %__column147 = insertelement <4 x float> %__column146, float %78, i32 3
  %__matrix148 = insertvalue [4 x <4 x float>] %__matrix142, <4 x float> %__column147, 1
  %__column149 = extractvalue [4 x <4 x float>] %__matrix136, 2
  %__column150 = insertelement <4 x float> %__column149, float %81, i32 0
  %__column151 = insertelement <4 x float> %__column150, float %84, i32 1
  %__column152 = insertelement <4 x float> %__column151, float %87, i32 2
  %__column153 = insertelement <4 x float> %__column152, float %90, i32 3
  %__matrix154 = insertvalue [4 x <4 x float>] %__matrix148, <4 x float> %__column153, 2
  %__column155 = extractvalue [4 x <4 x float>] %__matrix136, 3
  %__column156 = insertelement <4 x float> %__column155, float %93, i32 0
  %__column157 = insertelement <4 x float> %__column156, float %96, i32 1
  %__column158 = insertelement <4 x float> %__column157, float %99, i32 2
  %__column159 = insertelement <4 x float> %__column158, float %102, i32 3
  %__matrix160 = insertvalue [4 x <4 x float>] %__matrix154, <4 x float> %__column159, 3
  store [4 x <4 x float>] %__matrix160, [4 x <4 x float>]* %m34
  %v161 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %103 = extractelement <4 x float> %v161, i32 0
  %__matrix163 = load [4 x <4 x float>]* %constructed162
  %__column164 = extractvalue [4 x <4 x float>] %__matrix163, 0
  %__column165 = insertelement <4 x float> %__column164, float %103, i32 0
  %__column166 = insertelement <4 x float> %__column165, float 0.000000e+00, i32 1
  %__column167 = insertelement <4 x float> %__column166, float 0.000000e+00, i32 2
  %__column168 = insertelement <4 x float> %__column167, float 0.000000e+00, i32 3
  %__matrix169 = insertvalue [4 x <4 x float>] %__matrix163, <4 x float> %__column168, 0
  %__column170 = extractvalue [4 x <4 x float>] %__matrix163, 1
  %__column171 = insertelement <4 x float> %__column170, float 0.000000e+00, i32 0
  %__column172 = insertelement <4 x float> %__column171, float %103, i32 1
  %__column173 = insertelement <4 x float> %__column172, float 0.000000e+00, i32 2
  %__column174 = insertelement <4 x float> %__column173, float 0.000000e+00, i32 3
  %__matrix175 = insertvalue [4 x <4 x float>] %__matrix169, <4 x float> %__column174, 1
  %__column176 = extractvalue [4 x <4 x float>] %__matrix163, 2
  %__column177 = insertelement <4 x float> %__column176, float 0.000000e+00, i32 0
  %__column178 = insertelement <4 x float> %__column177, float 0.000000e+00, i32 1
  %__column179 = insertelement <4 x float> %__column178, float %103, i32 2
  %__column180 = insertelement <4 x float> %__column179, float 0.000000e+00, i32 3
  %__matrix181 = insertvalue [4 x <4 x float>] %__matrix175, <4 x float> %__column180, 2
  %__column182 = extractvalue [4 x <4 x float>] %__matrix163, 3
  %__column183 = insertelement <4 x float> %__column182, float 0.000000e+00, i32 0
  %__column184 = insertelement <4 x float> %__column183, float 0.000000e+00, i32 1
  %__column185 = insertelement <4 x float> %__column184, float 0.000000e+00, i32 2
  %__column186 = insertelement <4 x float> %__column185, float %103, i32 3
  %__matrix187 = insertvalue [4 x <4 x float>] %__matrix181, <4 x float> %__column186, 3
  %__matrix188 = load [4 x <4 x float>]* %m34
  %104 = alloca [4 x <4 x float>]
  %105 = load [4 x <4 x float>]* %104
  %__leftColumn189 = extractvalue [4 x <4 x float>] %__matrix188, 0
  %__rightColumn190 = extractvalue [4 x <4 x float>] %__matrix187, 0
  %__column191 = fadd <4 x float> %__leftColumn189, %__rightColumn190
  %106 = insertvalue [4 x <4 x float>] %105, <4 x float> %__column191, 0
  %__leftColumn192 = extractvalue [4 x <4 x float>] %__matrix188, 1
  %__rightColumn193 = extractvalue [4 x <4 x float>] %__matrix187, 1
  %__column194 = fadd <4 x float> %__leftColumn192, %__rightColumn193
  %107 = insertvalue [4 x <4 x float>] %106, <4 x float> %__column194, 1
  %__leftColumn195 = extractvalue [4 x <4 x float>] %__matrix188, 2
  %__rightColumn196 = extractvalue [4 x <4 x float>] %__matrix187, 2
  %__column197 = fadd <4 x float> %__leftColumn195, %__rightColumn196
  %108 = insertvalue [4 x <4 x float>] %107, <4 x float> %__column197, 2
  %__leftColumn198 = extractvalue [4 x <4 x float>] %__matrix188, 3
  %__rightColumn199 = extractvalue [4 x <4 x float>] %__matrix187, 3
  %__column200 = fadd <4 x float> %__leftColumn198, %__rightColumn199
  %m34201 = insertvalue [4 x <4 x float>] %108, <4 x float> %__column200, 3
  store [4 x <4 x float>] %m34201, [4 x <4 x float>]* %m34
  %u202 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %u203 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %109 = extractelement <4 x float> %u203, i32 0
  %u204 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %u205 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %110 = extractelement <4 x float> %u205, i32 0
  %u206 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %u207 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %111 = extractelement <4 x float> %u207, i32 0
  %u208 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %112 = extractelement <4 x float> %u208, i32 0
  %__matrix210 = load [4 x <4 x float>]* %constructed209
  %__element211 = extractelement <4 x float> %u202, i32 0
  %__element212 = extractelement <4 x float> %u202, i32 1
  %__element213 = extractelement <4 x float> %u202, i32 2
  %__element214 = extractelement <4 x float> %u202, i32 3
  %__element215 = extractelement <4 x float> %u204, i32 0
  %__element216 = extractelement <4 x float> %u204, i32 1
  %__element217 = extractelement <4 x float> %u204, i32 2
  %__element218 = extractelement <4 x float> %u204, i32 3
  %__element219 = extractelement <4 x float> %u206, i32 0
  %__element220 = extractelement <4 x float> %u206, i32 1
  %__element221 = extractelement <4 x float> %u206, i32 2
  %__element222 = extractelement <4 x float> %u206, i32 3
  %__column223 = extractvalue [4 x <4 x float>] %__matrix210, 0
  %__column224 = insertelement <4 x float> %__column223, float %__element211, i32 0
  %__column225 = insertelement <4 x float> %__column224, float %__element212, i32 1
  %__column226 = insertelement <4 x float> %__column225, float %__element213, i32 2
  %__column227 = insertelement <4 x float> %__column226, float %__element214, i32 3
  %__matrix228 = insertvalue [4 x <4 x float>] %__matrix210, <4 x float> %__column227, 0
  %__column229 = extractvalue [4 x <4 x float>] %__matrix210, 1
  %__column230 = insertelement <4 x float> %__column229, float %109, i32 0
  %__column231 = insertelement <4 x float> %__column230, float %__element215, i32 1
  %__column232 = insertelement <4 x float> %__column231, float %__element216, i32 2
  %__column233 = insertelement <4 x float> %__column232, float %__element217, i32 3
  %__matrix234 = insertvalue [4 x <4 x float>] %__matrix228, <4 x float> %__column233, 1
  %__column235 = extractvalue [4 x <4 x float>] %__matrix210, 2
  %__column236 = insertelement <4 x float> %__column235, float %__element218, i32 0
  %__column237 = insertelement <4 x float> %__column236, float %110, i32 1
  %__column238 = insertelement <4 x float> %__column237, float %__element219, i32 2
  %__column239 = insertelement <4 x float> %__column238, float %__element220, i32 3
  %__matrix240 = insertvalue [4 x <4 x float>] %__matrix234, <4 x float> %__column239, 2
  %__column241 = extractvalue [4 x <4 x float>] %__matrix210, 3
  %__column242 = insertelement <4 x float> %__column241, float %__element221, i32 0
  %__column243 = insertelement <4 x float> %__column242, float %__element222, i32 1
  %__column244 = insertelement <4 x float> %__column243, float %111, i32 2
  %__column245 = insertelement <4 x float> %__column244, float %112, i32 3
  %__matrix246 = insertvalue [4 x <4 x float>] %__matrix240, <4 x float> %__column245, 3
  %__matrix247 = load [4 x <4 x float>]* %m34
  %113 = alloca [4 x <4 x float>]
  %114 = load [4 x <4 x float>]* %113
  %__leftColumn248 = extractvalue [4 x <4 x float>] %__matrix247, 0
  %__rightColumn249 = extractvalue [4 x <4 x float>] %__matrix246, 0
  %__column250 = fadd <4 x float> %__leftColumn248, %__rightColumn249
  %115 = insertvalue [4 x <4 x float>] %114, <4 x float> %__column250, 0
  %__leftColumn251 = extractvalue [4 x <4 x float>] %__matrix247, 1
  %__rightColumn252 = extractvalue [4 x <4 x float>] %__matrix246, 1
  %__column253 = fadd <4 x float> %__leftColumn251, %__rightColumn252
  %116 = insertvalue [4 x <4 x float>] %115, <4 x float> %__column253, 1
  %__leftColumn254 = extractvalue [4 x <4 x float>] %__matrix247, 2
  %__rightColumn255 = extractvalue [4 x <4 x float>] %__matrix246, 2
  %__column256 = fadd <4 x float> %__leftColumn254, %__rightColumn255
  %117 = insertvalue [4 x <4 x float>] %116, <4 x float> %__column256, 2
  %__leftColumn257 = extractvalue [4 x <4 x float>] %__matrix247, 3
  %__rightColumn258 = extractvalue [4 x <4 x float>] %__matrix246, 3
  %__column259 = fadd <4 x float> %__leftColumn257, %__rightColumn258
  %m34260 = insertvalue [4 x <4 x float>] %117, <4 x float> %__column259, 3
  store [4 x <4 x float>] %m34260, [4 x <4 x float>]* %m34
  %__matrix261 = load [4 x <4 x float>]* %m34
  %__matrix262 = load [4 x <4 x float>] addrspace(2)* @un34
  %__Matrix-Compare263 = alloca i1
  %__Matrix-Compare264 = load i1* %__Matrix-Compare263
  %__column265 = extractvalue [4 x <4 x float>] %__matrix261, 0
  %__column266 = extractvalue [4 x <4 x float>] %__matrix262, 0
  %118 = fcmp oeq <4 x float> %__column265, %__column266
  %119 = call i1 @llvm.gla.all.v4i1(<4 x i1> %118)
  %__column267 = extractvalue [4 x <4 x float>] %__matrix261, 1
  %__column268 = extractvalue [4 x <4 x float>] %__matrix262, 1
  %120 = fcmp oeq <4 x float> %__column267, %__column268
  %121 = call i1 @llvm.gla.all.v4i1(<4 x i1> %120)
  %122 = and i1 %119, %121
  %__column269 = extractvalue [4 x <4 x float>] %__matrix261, 2
  %__column270 = extractvalue [4 x <4 x float>] %__matrix262, 2
  %123 = fcmp oeq <4 x float> %__column269, %__column270
  %124 = call i1 @llvm.gla.all.v4i1(<4 x i1> %123)
  %125 = and i1 %122, %124
  %__column271 = extractvalue [4 x <4 x float>] %__matrix261, 3
  %__column272 = extractvalue [4 x <4 x float>] %__matrix262, 3
  %126 = fcmp oeq <4 x float> %__column271, %__column272
  %127 = call i1 @llvm.gla.all.v4i1(<4 x i1> %126)
  %128 = and i1 %125, %127
  br i1 %128, label %then273, label %else341

then273:                                          ; preds = %ifmerge
  %__matrix274 = load [4 x <4 x float>]* %m34
  %u275 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %129 = alloca <4 x float>
  %130 = load <4 x float>* %129
  %__component276 = extractelement <4 x float> %u275, i32 0
  %__component277 = extractelement <4 x float> %u275, i32 1
  %__component278 = extractelement <4 x float> %u275, i32 2
  %__component279 = extractelement <4 x float> %u275, i32 3
  %__column280 = extractvalue [4 x <4 x float>] %__matrix274, 0
  %__element281 = extractelement <4 x float> %__column280, i32 0
  %__product282 = fmul float %__element281, %__component276
  %__column283 = extractvalue [4 x <4 x float>] %__matrix274, 1
  %__element284 = extractelement <4 x float> %__column283, i32 0
  %__product285 = fmul float %__element284, %__component277
  %__dotProduct286 = fadd float %__product282, %__product285
  %__column287 = extractvalue [4 x <4 x float>] %__matrix274, 2
  %__element288 = extractelement <4 x float> %__column287, i32 0
  %__product289 = fmul float %__element288, %__component278
  %__dotProduct290 = fadd float %__dotProduct286, %__product289
  %__column291 = extractvalue [4 x <4 x float>] %__matrix274, 3
  %__element292 = extractelement <4 x float> %__column291, i32 0
  %__product293 = fmul float %__element292, %__component279
  %__dotProduct294 = fadd float %__dotProduct290, %__product293
  %131 = insertelement <4 x float> %130, float %__dotProduct294, i32 0
  %__column295 = extractvalue [4 x <4 x float>] %__matrix274, 0
  %__element296 = extractelement <4 x float> %__column295, i32 1
  %__product297 = fmul float %__element296, %__component276
  %__column298 = extractvalue [4 x <4 x float>] %__matrix274, 1
  %__element299 = extractelement <4 x float> %__column298, i32 1
  %__product300 = fmul float %__element299, %__component277
  %__dotProduct301 = fadd float %__product297, %__product300
  %__column302 = extractvalue [4 x <4 x float>] %__matrix274, 2
  %__element303 = extractelement <4 x float> %__column302, i32 1
  %__product304 = fmul float %__element303, %__component278
  %__dotProduct305 = fadd float %__dotProduct301, %__product304
  %__column306 = extractvalue [4 x <4 x float>] %__matrix274, 3
  %__element307 = extractelement <4 x float> %__column306, i32 1
  %__product308 = fmul float %__element307, %__component279
  %__dotProduct309 = fadd float %__dotProduct305, %__product308
  %132 = insertelement <4 x float> %131, float %__dotProduct309, i32 1
  %__column310 = extractvalue [4 x <4 x float>] %__matrix274, 0
  %__element311 = extractelement <4 x float> %__column310, i32 2
  %__product312 = fmul float %__element311, %__component276
  %__column313 = extractvalue [4 x <4 x float>] %__matrix274, 1
  %__element314 = extractelement <4 x float> %__column313, i32 2
  %__product315 = fmul float %__element314, %__component277
  %__dotProduct316 = fadd float %__product312, %__product315
  %__column317 = extractvalue [4 x <4 x float>] %__matrix274, 2
  %__element318 = extractelement <4 x float> %__column317, i32 2
  %__product319 = fmul float %__element318, %__component278
  %__dotProduct320 = fadd float %__dotProduct316, %__product319
  %__column321 = extractvalue [4 x <4 x float>] %__matrix274, 3
  %__element322 = extractelement <4 x float> %__column321, i32 2
  %__product323 = fmul float %__element322, %__component279
  %__dotProduct324 = fadd float %__dotProduct320, %__product323
  %133 = insertelement <4 x float> %132, float %__dotProduct324, i32 2
  %__column325 = extractvalue [4 x <4 x float>] %__matrix274, 0
  %__element326 = extractelement <4 x float> %__column325, i32 3
  %__product327 = fmul float %__element326, %__component276
  %__column328 = extractvalue [4 x <4 x float>] %__matrix274, 1
  %__element329 = extractelement <4 x float> %__column328, i32 3
  %__product330 = fmul float %__element329, %__component277
  %__dotProduct331 = fadd float %__product327, %__product330
  %__column332 = extractvalue [4 x <4 x float>] %__matrix274, 2
  %__element333 = extractelement <4 x float> %__column332, i32 3
  %__product334 = fmul float %__element333, %__component278
  %__dotProduct335 = fadd float %__dotProduct331, %__product334
  %__column336 = extractvalue [4 x <4 x float>] %__matrix274, 3
  %__element337 = extractelement <4 x float> %__column336, i32 3
  %__product338 = fmul float %__element337, %__component279
  %__dotProduct339 = fadd float %__dotProduct335, %__product338
  %134 = insertelement <4 x float> %133, float %__dotProduct339, i32 3
  %135 = load <4 x float>* @gl_FragColor
  %gl_FragColor340 = fadd <4 x float> %135, %134
  store <4 x float> %gl_FragColor340, <4 x float>* @gl_FragColor
  br label %ifmerge736

else341:                                          ; preds = %ifmerge
  %__matrix342 = load [4 x <4 x float>] addrspace(2)* @un34
  %__matrix343 = load [4 x <4 x float>] addrspace(2)* @um43
  %136 = alloca [4 x <4 x float>]
  %__resultMatrix = load [4 x <4 x float>]* %136
  %137 = alloca <4 x float>
  %__tempColumn = load <4 x float>* %137
  %__rightColumn344 = extractvalue [4 x <4 x float>] %__matrix343, 0
  %__leftColumn345 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp = extractelement <4 x float> %__leftColumn345, i32 0
  %__rightComp = extractelement <4 x float> %__rightColumn344, i32 0
  %__product346 = fmul float %__leftComp, %__rightComp
  %__leftColumn347 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp348 = extractelement <4 x float> %__leftColumn347, i32 0
  %__rightComp349 = extractelement <4 x float> %__rightColumn344, i32 1
  %__product350 = fmul float %__leftComp348, %__rightComp349
  %__dotProduct351 = fadd float %__product346, %__product350
  %__leftColumn352 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp353 = extractelement <4 x float> %__leftColumn352, i32 0
  %__rightComp354 = extractelement <4 x float> %__rightColumn344, i32 2
  %__product355 = fmul float %__leftComp353, %__rightComp354
  %__dotProduct356 = fadd float %__dotProduct351, %__product355
  %__leftColumn357 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp358 = extractelement <4 x float> %__leftColumn357, i32 0
  %__rightComp359 = extractelement <4 x float> %__rightColumn344, i32 3
  %__product360 = fmul float %__leftComp358, %__rightComp359
  %__dotProduct361 = fadd float %__dotProduct356, %__product360
  %__column362 = insertelement <4 x float> %__tempColumn, float %__dotProduct361, i32 0
  %__leftColumn363 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp364 = extractelement <4 x float> %__leftColumn363, i32 1
  %__rightComp365 = extractelement <4 x float> %__rightColumn344, i32 0
  %__product366 = fmul float %__leftComp364, %__rightComp365
  %__leftColumn367 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp368 = extractelement <4 x float> %__leftColumn367, i32 1
  %__rightComp369 = extractelement <4 x float> %__rightColumn344, i32 1
  %__product370 = fmul float %__leftComp368, %__rightComp369
  %__dotProduct371 = fadd float %__product366, %__product370
  %__leftColumn372 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp373 = extractelement <4 x float> %__leftColumn372, i32 1
  %__rightComp374 = extractelement <4 x float> %__rightColumn344, i32 2
  %__product375 = fmul float %__leftComp373, %__rightComp374
  %__dotProduct376 = fadd float %__dotProduct371, %__product375
  %__leftColumn377 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp378 = extractelement <4 x float> %__leftColumn377, i32 1
  %__rightComp379 = extractelement <4 x float> %__rightColumn344, i32 3
  %__product380 = fmul float %__leftComp378, %__rightComp379
  %__dotProduct381 = fadd float %__dotProduct376, %__product380
  %__column382 = insertelement <4 x float> %__column362, float %__dotProduct381, i32 1
  %__leftColumn383 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp384 = extractelement <4 x float> %__leftColumn383, i32 2
  %__rightComp385 = extractelement <4 x float> %__rightColumn344, i32 0
  %__product386 = fmul float %__leftComp384, %__rightComp385
  %__leftColumn387 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp388 = extractelement <4 x float> %__leftColumn387, i32 2
  %__rightComp389 = extractelement <4 x float> %__rightColumn344, i32 1
  %__product390 = fmul float %__leftComp388, %__rightComp389
  %__dotProduct391 = fadd float %__product386, %__product390
  %__leftColumn392 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp393 = extractelement <4 x float> %__leftColumn392, i32 2
  %__rightComp394 = extractelement <4 x float> %__rightColumn344, i32 2
  %__product395 = fmul float %__leftComp393, %__rightComp394
  %__dotProduct396 = fadd float %__dotProduct391, %__product395
  %__leftColumn397 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp398 = extractelement <4 x float> %__leftColumn397, i32 2
  %__rightComp399 = extractelement <4 x float> %__rightColumn344, i32 3
  %__product400 = fmul float %__leftComp398, %__rightComp399
  %__dotProduct401 = fadd float %__dotProduct396, %__product400
  %__column402 = insertelement <4 x float> %__column382, float %__dotProduct401, i32 2
  %__leftColumn403 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp404 = extractelement <4 x float> %__leftColumn403, i32 3
  %__rightComp405 = extractelement <4 x float> %__rightColumn344, i32 0
  %__product406 = fmul float %__leftComp404, %__rightComp405
  %__leftColumn407 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp408 = extractelement <4 x float> %__leftColumn407, i32 3
  %__rightComp409 = extractelement <4 x float> %__rightColumn344, i32 1
  %__product410 = fmul float %__leftComp408, %__rightComp409
  %__dotProduct411 = fadd float %__product406, %__product410
  %__leftColumn412 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp413 = extractelement <4 x float> %__leftColumn412, i32 3
  %__rightComp414 = extractelement <4 x float> %__rightColumn344, i32 2
  %__product415 = fmul float %__leftComp413, %__rightComp414
  %__dotProduct416 = fadd float %__dotProduct411, %__product415
  %__leftColumn417 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp418 = extractelement <4 x float> %__leftColumn417, i32 3
  %__rightComp419 = extractelement <4 x float> %__rightColumn344, i32 3
  %__product420 = fmul float %__leftComp418, %__rightComp419
  %__dotProduct421 = fadd float %__dotProduct416, %__product420
  %__column422 = insertelement <4 x float> %__column402, float %__dotProduct421, i32 3
  %__resultMatrix423 = insertvalue [4 x <4 x float>] %__resultMatrix, <4 x float> %__column422, 0
  %__rightColumn424 = extractvalue [4 x <4 x float>] %__matrix343, 1
  %__leftColumn425 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp426 = extractelement <4 x float> %__leftColumn425, i32 0
  %__rightComp427 = extractelement <4 x float> %__rightColumn424, i32 0
  %__product428 = fmul float %__leftComp426, %__rightComp427
  %__leftColumn429 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp430 = extractelement <4 x float> %__leftColumn429, i32 0
  %__rightComp431 = extractelement <4 x float> %__rightColumn424, i32 1
  %__product432 = fmul float %__leftComp430, %__rightComp431
  %__dotProduct433 = fadd float %__product428, %__product432
  %__leftColumn434 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp435 = extractelement <4 x float> %__leftColumn434, i32 0
  %__rightComp436 = extractelement <4 x float> %__rightColumn424, i32 2
  %__product437 = fmul float %__leftComp435, %__rightComp436
  %__dotProduct438 = fadd float %__dotProduct433, %__product437
  %__leftColumn439 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp440 = extractelement <4 x float> %__leftColumn439, i32 0
  %__rightComp441 = extractelement <4 x float> %__rightColumn424, i32 3
  %__product442 = fmul float %__leftComp440, %__rightComp441
  %__dotProduct443 = fadd float %__dotProduct438, %__product442
  %__column444 = insertelement <4 x float> %__column422, float %__dotProduct443, i32 0
  %__leftColumn445 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp446 = extractelement <4 x float> %__leftColumn445, i32 1
  %__rightComp447 = extractelement <4 x float> %__rightColumn424, i32 0
  %__product448 = fmul float %__leftComp446, %__rightComp447
  %__leftColumn449 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp450 = extractelement <4 x float> %__leftColumn449, i32 1
  %__rightComp451 = extractelement <4 x float> %__rightColumn424, i32 1
  %__product452 = fmul float %__leftComp450, %__rightComp451
  %__dotProduct453 = fadd float %__product448, %__product452
  %__leftColumn454 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp455 = extractelement <4 x float> %__leftColumn454, i32 1
  %__rightComp456 = extractelement <4 x float> %__rightColumn424, i32 2
  %__product457 = fmul float %__leftComp455, %__rightComp456
  %__dotProduct458 = fadd float %__dotProduct453, %__product457
  %__leftColumn459 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp460 = extractelement <4 x float> %__leftColumn459, i32 1
  %__rightComp461 = extractelement <4 x float> %__rightColumn424, i32 3
  %__product462 = fmul float %__leftComp460, %__rightComp461
  %__dotProduct463 = fadd float %__dotProduct458, %__product462
  %__column464 = insertelement <4 x float> %__column444, float %__dotProduct463, i32 1
  %__leftColumn465 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp466 = extractelement <4 x float> %__leftColumn465, i32 2
  %__rightComp467 = extractelement <4 x float> %__rightColumn424, i32 0
  %__product468 = fmul float %__leftComp466, %__rightComp467
  %__leftColumn469 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp470 = extractelement <4 x float> %__leftColumn469, i32 2
  %__rightComp471 = extractelement <4 x float> %__rightColumn424, i32 1
  %__product472 = fmul float %__leftComp470, %__rightComp471
  %__dotProduct473 = fadd float %__product468, %__product472
  %__leftColumn474 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp475 = extractelement <4 x float> %__leftColumn474, i32 2
  %__rightComp476 = extractelement <4 x float> %__rightColumn424, i32 2
  %__product477 = fmul float %__leftComp475, %__rightComp476
  %__dotProduct478 = fadd float %__dotProduct473, %__product477
  %__leftColumn479 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp480 = extractelement <4 x float> %__leftColumn479, i32 2
  %__rightComp481 = extractelement <4 x float> %__rightColumn424, i32 3
  %__product482 = fmul float %__leftComp480, %__rightComp481
  %__dotProduct483 = fadd float %__dotProduct478, %__product482
  %__column484 = insertelement <4 x float> %__column464, float %__dotProduct483, i32 2
  %__leftColumn485 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp486 = extractelement <4 x float> %__leftColumn485, i32 3
  %__rightComp487 = extractelement <4 x float> %__rightColumn424, i32 0
  %__product488 = fmul float %__leftComp486, %__rightComp487
  %__leftColumn489 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp490 = extractelement <4 x float> %__leftColumn489, i32 3
  %__rightComp491 = extractelement <4 x float> %__rightColumn424, i32 1
  %__product492 = fmul float %__leftComp490, %__rightComp491
  %__dotProduct493 = fadd float %__product488, %__product492
  %__leftColumn494 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp495 = extractelement <4 x float> %__leftColumn494, i32 3
  %__rightComp496 = extractelement <4 x float> %__rightColumn424, i32 2
  %__product497 = fmul float %__leftComp495, %__rightComp496
  %__dotProduct498 = fadd float %__dotProduct493, %__product497
  %__leftColumn499 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp500 = extractelement <4 x float> %__leftColumn499, i32 3
  %__rightComp501 = extractelement <4 x float> %__rightColumn424, i32 3
  %__product502 = fmul float %__leftComp500, %__rightComp501
  %__dotProduct503 = fadd float %__dotProduct498, %__product502
  %__column504 = insertelement <4 x float> %__column484, float %__dotProduct503, i32 3
  %__resultMatrix505 = insertvalue [4 x <4 x float>] %__resultMatrix423, <4 x float> %__column504, 1
  %__rightColumn506 = extractvalue [4 x <4 x float>] %__matrix343, 2
  %__leftColumn507 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp508 = extractelement <4 x float> %__leftColumn507, i32 0
  %__rightComp509 = extractelement <4 x float> %__rightColumn506, i32 0
  %__product510 = fmul float %__leftComp508, %__rightComp509
  %__leftColumn511 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp512 = extractelement <4 x float> %__leftColumn511, i32 0
  %__rightComp513 = extractelement <4 x float> %__rightColumn506, i32 1
  %__product514 = fmul float %__leftComp512, %__rightComp513
  %__dotProduct515 = fadd float %__product510, %__product514
  %__leftColumn516 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp517 = extractelement <4 x float> %__leftColumn516, i32 0
  %__rightComp518 = extractelement <4 x float> %__rightColumn506, i32 2
  %__product519 = fmul float %__leftComp517, %__rightComp518
  %__dotProduct520 = fadd float %__dotProduct515, %__product519
  %__leftColumn521 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp522 = extractelement <4 x float> %__leftColumn521, i32 0
  %__rightComp523 = extractelement <4 x float> %__rightColumn506, i32 3
  %__product524 = fmul float %__leftComp522, %__rightComp523
  %__dotProduct525 = fadd float %__dotProduct520, %__product524
  %__column526 = insertelement <4 x float> %__column504, float %__dotProduct525, i32 0
  %__leftColumn527 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp528 = extractelement <4 x float> %__leftColumn527, i32 1
  %__rightComp529 = extractelement <4 x float> %__rightColumn506, i32 0
  %__product530 = fmul float %__leftComp528, %__rightComp529
  %__leftColumn531 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp532 = extractelement <4 x float> %__leftColumn531, i32 1
  %__rightComp533 = extractelement <4 x float> %__rightColumn506, i32 1
  %__product534 = fmul float %__leftComp532, %__rightComp533
  %__dotProduct535 = fadd float %__product530, %__product534
  %__leftColumn536 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp537 = extractelement <4 x float> %__leftColumn536, i32 1
  %__rightComp538 = extractelement <4 x float> %__rightColumn506, i32 2
  %__product539 = fmul float %__leftComp537, %__rightComp538
  %__dotProduct540 = fadd float %__dotProduct535, %__product539
  %__leftColumn541 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp542 = extractelement <4 x float> %__leftColumn541, i32 1
  %__rightComp543 = extractelement <4 x float> %__rightColumn506, i32 3
  %__product544 = fmul float %__leftComp542, %__rightComp543
  %__dotProduct545 = fadd float %__dotProduct540, %__product544
  %__column546 = insertelement <4 x float> %__column526, float %__dotProduct545, i32 1
  %__leftColumn547 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp548 = extractelement <4 x float> %__leftColumn547, i32 2
  %__rightComp549 = extractelement <4 x float> %__rightColumn506, i32 0
  %__product550 = fmul float %__leftComp548, %__rightComp549
  %__leftColumn551 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp552 = extractelement <4 x float> %__leftColumn551, i32 2
  %__rightComp553 = extractelement <4 x float> %__rightColumn506, i32 1
  %__product554 = fmul float %__leftComp552, %__rightComp553
  %__dotProduct555 = fadd float %__product550, %__product554
  %__leftColumn556 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp557 = extractelement <4 x float> %__leftColumn556, i32 2
  %__rightComp558 = extractelement <4 x float> %__rightColumn506, i32 2
  %__product559 = fmul float %__leftComp557, %__rightComp558
  %__dotProduct560 = fadd float %__dotProduct555, %__product559
  %__leftColumn561 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp562 = extractelement <4 x float> %__leftColumn561, i32 2
  %__rightComp563 = extractelement <4 x float> %__rightColumn506, i32 3
  %__product564 = fmul float %__leftComp562, %__rightComp563
  %__dotProduct565 = fadd float %__dotProduct560, %__product564
  %__column566 = insertelement <4 x float> %__column546, float %__dotProduct565, i32 2
  %__leftColumn567 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp568 = extractelement <4 x float> %__leftColumn567, i32 3
  %__rightComp569 = extractelement <4 x float> %__rightColumn506, i32 0
  %__product570 = fmul float %__leftComp568, %__rightComp569
  %__leftColumn571 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp572 = extractelement <4 x float> %__leftColumn571, i32 3
  %__rightComp573 = extractelement <4 x float> %__rightColumn506, i32 1
  %__product574 = fmul float %__leftComp572, %__rightComp573
  %__dotProduct575 = fadd float %__product570, %__product574
  %__leftColumn576 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp577 = extractelement <4 x float> %__leftColumn576, i32 3
  %__rightComp578 = extractelement <4 x float> %__rightColumn506, i32 2
  %__product579 = fmul float %__leftComp577, %__rightComp578
  %__dotProduct580 = fadd float %__dotProduct575, %__product579
  %__leftColumn581 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp582 = extractelement <4 x float> %__leftColumn581, i32 3
  %__rightComp583 = extractelement <4 x float> %__rightColumn506, i32 3
  %__product584 = fmul float %__leftComp582, %__rightComp583
  %__dotProduct585 = fadd float %__dotProduct580, %__product584
  %__column586 = insertelement <4 x float> %__column566, float %__dotProduct585, i32 3
  %__resultMatrix587 = insertvalue [4 x <4 x float>] %__resultMatrix505, <4 x float> %__column586, 2
  %__rightColumn588 = extractvalue [4 x <4 x float>] %__matrix343, 3
  %__leftColumn589 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp590 = extractelement <4 x float> %__leftColumn589, i32 0
  %__rightComp591 = extractelement <4 x float> %__rightColumn588, i32 0
  %__product592 = fmul float %__leftComp590, %__rightComp591
  %__leftColumn593 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp594 = extractelement <4 x float> %__leftColumn593, i32 0
  %__rightComp595 = extractelement <4 x float> %__rightColumn588, i32 1
  %__product596 = fmul float %__leftComp594, %__rightComp595
  %__dotProduct597 = fadd float %__product592, %__product596
  %__leftColumn598 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp599 = extractelement <4 x float> %__leftColumn598, i32 0
  %__rightComp600 = extractelement <4 x float> %__rightColumn588, i32 2
  %__product601 = fmul float %__leftComp599, %__rightComp600
  %__dotProduct602 = fadd float %__dotProduct597, %__product601
  %__leftColumn603 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp604 = extractelement <4 x float> %__leftColumn603, i32 0
  %__rightComp605 = extractelement <4 x float> %__rightColumn588, i32 3
  %__product606 = fmul float %__leftComp604, %__rightComp605
  %__dotProduct607 = fadd float %__dotProduct602, %__product606
  %__column608 = insertelement <4 x float> %__column586, float %__dotProduct607, i32 0
  %__leftColumn609 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp610 = extractelement <4 x float> %__leftColumn609, i32 1
  %__rightComp611 = extractelement <4 x float> %__rightColumn588, i32 0
  %__product612 = fmul float %__leftComp610, %__rightComp611
  %__leftColumn613 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp614 = extractelement <4 x float> %__leftColumn613, i32 1
  %__rightComp615 = extractelement <4 x float> %__rightColumn588, i32 1
  %__product616 = fmul float %__leftComp614, %__rightComp615
  %__dotProduct617 = fadd float %__product612, %__product616
  %__leftColumn618 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp619 = extractelement <4 x float> %__leftColumn618, i32 1
  %__rightComp620 = extractelement <4 x float> %__rightColumn588, i32 2
  %__product621 = fmul float %__leftComp619, %__rightComp620
  %__dotProduct622 = fadd float %__dotProduct617, %__product621
  %__leftColumn623 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp624 = extractelement <4 x float> %__leftColumn623, i32 1
  %__rightComp625 = extractelement <4 x float> %__rightColumn588, i32 3
  %__product626 = fmul float %__leftComp624, %__rightComp625
  %__dotProduct627 = fadd float %__dotProduct622, %__product626
  %__column628 = insertelement <4 x float> %__column608, float %__dotProduct627, i32 1
  %__leftColumn629 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp630 = extractelement <4 x float> %__leftColumn629, i32 2
  %__rightComp631 = extractelement <4 x float> %__rightColumn588, i32 0
  %__product632 = fmul float %__leftComp630, %__rightComp631
  %__leftColumn633 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp634 = extractelement <4 x float> %__leftColumn633, i32 2
  %__rightComp635 = extractelement <4 x float> %__rightColumn588, i32 1
  %__product636 = fmul float %__leftComp634, %__rightComp635
  %__dotProduct637 = fadd float %__product632, %__product636
  %__leftColumn638 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp639 = extractelement <4 x float> %__leftColumn638, i32 2
  %__rightComp640 = extractelement <4 x float> %__rightColumn588, i32 2
  %__product641 = fmul float %__leftComp639, %__rightComp640
  %__dotProduct642 = fadd float %__dotProduct637, %__product641
  %__leftColumn643 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp644 = extractelement <4 x float> %__leftColumn643, i32 2
  %__rightComp645 = extractelement <4 x float> %__rightColumn588, i32 3
  %__product646 = fmul float %__leftComp644, %__rightComp645
  %__dotProduct647 = fadd float %__dotProduct642, %__product646
  %__column648 = insertelement <4 x float> %__column628, float %__dotProduct647, i32 2
  %__leftColumn649 = extractvalue [4 x <4 x float>] %__matrix342, 0
  %__leftComp650 = extractelement <4 x float> %__leftColumn649, i32 3
  %__rightComp651 = extractelement <4 x float> %__rightColumn588, i32 0
  %__product652 = fmul float %__leftComp650, %__rightComp651
  %__leftColumn653 = extractvalue [4 x <4 x float>] %__matrix342, 1
  %__leftComp654 = extractelement <4 x float> %__leftColumn653, i32 3
  %__rightComp655 = extractelement <4 x float> %__rightColumn588, i32 1
  %__product656 = fmul float %__leftComp654, %__rightComp655
  %__dotProduct657 = fadd float %__product652, %__product656
  %__leftColumn658 = extractvalue [4 x <4 x float>] %__matrix342, 2
  %__leftComp659 = extractelement <4 x float> %__leftColumn658, i32 3
  %__rightComp660 = extractelement <4 x float> %__rightColumn588, i32 2
  %__product661 = fmul float %__leftComp659, %__rightComp660
  %__dotProduct662 = fadd float %__dotProduct657, %__product661
  %__leftColumn663 = extractvalue [4 x <4 x float>] %__matrix342, 3
  %__leftComp664 = extractelement <4 x float> %__leftColumn663, i32 3
  %__rightComp665 = extractelement <4 x float> %__rightColumn588, i32 3
  %__product666 = fmul float %__leftComp664, %__rightComp665
  %__dotProduct667 = fadd float %__dotProduct662, %__product666
  %__column668 = insertelement <4 x float> %__column648, float %__dotProduct667, i32 3
  %__resultMatrix669 = insertvalue [4 x <4 x float>] %__resultMatrix587, <4 x float> %__column668, 3
  %v670 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %138 = alloca <4 x float>
  %139 = load <4 x float>* %138
  %__component671 = extractelement <4 x float> %v670, i32 0
  %__component672 = extractelement <4 x float> %v670, i32 1
  %__component673 = extractelement <4 x float> %v670, i32 2
  %__component674 = extractelement <4 x float> %v670, i32 3
  %__column675 = extractvalue [4 x <4 x float>] %__resultMatrix669, 0
  %__element676 = extractelement <4 x float> %__column675, i32 0
  %__product677 = fmul float %__element676, %__component671
  %__column678 = extractvalue [4 x <4 x float>] %__resultMatrix669, 1
  %__element679 = extractelement <4 x float> %__column678, i32 0
  %__product680 = fmul float %__element679, %__component672
  %__dotProduct681 = fadd float %__product677, %__product680
  %__column682 = extractvalue [4 x <4 x float>] %__resultMatrix669, 2
  %__element683 = extractelement <4 x float> %__column682, i32 0
  %__product684 = fmul float %__element683, %__component673
  %__dotProduct685 = fadd float %__dotProduct681, %__product684
  %__column686 = extractvalue [4 x <4 x float>] %__resultMatrix669, 3
  %__element687 = extractelement <4 x float> %__column686, i32 0
  %__product688 = fmul float %__element687, %__component674
  %__dotProduct689 = fadd float %__dotProduct685, %__product688
  %140 = insertelement <4 x float> %139, float %__dotProduct689, i32 0
  %__column690 = extractvalue [4 x <4 x float>] %__resultMatrix669, 0
  %__element691 = extractelement <4 x float> %__column690, i32 1
  %__product692 = fmul float %__element691, %__component671
  %__column693 = extractvalue [4 x <4 x float>] %__resultMatrix669, 1
  %__element694 = extractelement <4 x float> %__column693, i32 1
  %__product695 = fmul float %__element694, %__component672
  %__dotProduct696 = fadd float %__product692, %__product695
  %__column697 = extractvalue [4 x <4 x float>] %__resultMatrix669, 2
  %__element698 = extractelement <4 x float> %__column697, i32 1
  %__product699 = fmul float %__element698, %__component673
  %__dotProduct700 = fadd float %__dotProduct696, %__product699
  %__column701 = extractvalue [4 x <4 x float>] %__resultMatrix669, 3
  %__element702 = extractelement <4 x float> %__column701, i32 1
  %__product703 = fmul float %__element702, %__component674
  %__dotProduct704 = fadd float %__dotProduct700, %__product703
  %141 = insertelement <4 x float> %140, float %__dotProduct704, i32 1
  %__column705 = extractvalue [4 x <4 x float>] %__resultMatrix669, 0
  %__element706 = extractelement <4 x float> %__column705, i32 2
  %__product707 = fmul float %__element706, %__component671
  %__column708 = extractvalue [4 x <4 x float>] %__resultMatrix669, 1
  %__element709 = extractelement <4 x float> %__column708, i32 2
  %__product710 = fmul float %__element709, %__component672
  %__dotProduct711 = fadd float %__product707, %__product710
  %__column712 = extractvalue [4 x <4 x float>] %__resultMatrix669, 2
  %__element713 = extractelement <4 x float> %__column712, i32 2
  %__product714 = fmul float %__element713, %__component673
  %__dotProduct715 = fadd float %__dotProduct711, %__product714
  %__column716 = extractvalue [4 x <4 x float>] %__resultMatrix669, 3
  %__element717 = extractelement <4 x float> %__column716, i32 2
  %__product718 = fmul float %__element717, %__component674
  %__dotProduct719 = fadd float %__dotProduct715, %__product718
  %142 = insertelement <4 x float> %141, float %__dotProduct719, i32 2
  %__column720 = extractvalue [4 x <4 x float>] %__resultMatrix669, 0
  %__element721 = extractelement <4 x float> %__column720, i32 3
  %__product722 = fmul float %__element721, %__component671
  %__column723 = extractvalue [4 x <4 x float>] %__resultMatrix669, 1
  %__element724 = extractelement <4 x float> %__column723, i32 3
  %__product725 = fmul float %__element724, %__component672
  %__dotProduct726 = fadd float %__product722, %__product725
  %__column727 = extractvalue [4 x <4 x float>] %__resultMatrix669, 2
  %__element728 = extractelement <4 x float> %__column727, i32 3
  %__product729 = fmul float %__element728, %__component673
  %__dotProduct730 = fadd float %__dotProduct726, %__product729
  %__column731 = extractvalue [4 x <4 x float>] %__resultMatrix669, 3
  %__element732 = extractelement <4 x float> %__column731, i32 3
  %__product733 = fmul float %__element732, %__component674
  %__dotProduct734 = fadd float %__dotProduct730, %__product733
  %143 = insertelement <4 x float> %142, float %__dotProduct734, i32 3
  %144 = load <4 x float>* @gl_FragColor
  %gl_FragColor735 = fadd <4 x float> %144, %143
  store <4 x float> %gl_FragColor735, <4 x float>* @gl_FragColor
  br label %ifmerge736

ifmerge736:                                       ; preds = %else341, %then273
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge736
  %145 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %145)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@un34 = external addrspace(2) constant [4 x <4 x float>]
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [4 x <4 x float>] addrspace(2)* @un34, i32 0, i32 1
  %0 = load <4 x float> addrspace(2)* %gla_constGEP, align 16
  %Color = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 -1, i32 1)
  %__matrix = load [3 x <3 x float>] addrspace(2)* @colorTransform, align 16
  %__column = extractvalue [3 x <3 x float>] %__matrix, 0
  %__dot = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column)
  %__column1 = extractvalue [3 x <3 x float>] %__matrix, 1
  %__dot2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column1)
  %__column3 = extractvalue [3 x <3 x float>] %__matrix, 2
  %__dot4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color, <3 x float> %__column3)
  %1 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot, i32 0, float %__dot2, i32 0, float %__dot4, i32 0, float 1.000000e+00, i32 0)
  %gl_FragColor6 = fadd <4 x float> %0, %1
  %__matrix7 = load [4 x <4 x float>] addrspace(2)* @m, align 16
  %__matrix8 = load [4 x <4 x float>] addrspace(2)* @n, align 16
  %__column10 = extractvalue [4 x <4 x float>] %__matrix7, 0
  %__column11 = extractvalue [4 x <4 x float>] %__matrix8, 0
  %2 = fcmp one <4 x float> %__column10, %__column11
  %3 = call i1 @llvm.gla.any.v4i1(<4 x i1> %2)
  %__column12 = extractvalue [4 x <4 x float>] %__matrix7, 1
  %__column13 = extractvalue [4 x <4 x float>] %__matrix8, 1
  %4 = fcmp one <4 x float> %__column12, %__column13
  %5 = call i1 @llvm.gla.any.v4i1(<4 x i1> %4)
  %6 = or i1 %3, %5
  %__column14 = extractvalue [4 x <4 x float>] %__matrix7, 2
  %__column15 = extractvalue [4 x <4 x float>] %__matrix8, 2
  %7 = fcmp one <4 x float> %__column14, %__column15
  %8 = call i1 @llvm.gla.any.v4i1(<4 x i1> %7)
  %9 = or i1 %6, %8
  %__column16 = extractvalue [4 x <4 x float>] %__matrix7, 3
  %__column17 = extractvalue [4 x <4 x float>] %__matrix8, 3
  %10 = fcmp one <4 x float> %__column16, %__column17
  %11 = call i1 @llvm.gla.any.v4i1(<4 x i1> %10)
  %12 = or i1 %9, %11
  %v = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  br i1 %12, label %then, label %else

then:                                             ; preds = %entry
  %gl_FragColor18 = fadd <4 x float> %gl_FragColor6, %v
  %.pre = extractelement <4 x float> %v, i32 0
  %.pre738 = extractelement <4 x float> %v, i32 1
  %.pre740 = extractelement <4 x float> %v, i32 2
  %.pre742 = extractelement <4 x float> %v, i32 3
  br label %ifmerge

else:                                             ; preds = %entry
  %__component = extractelement <4 x float> %v, i32 0
  %__component21 = extractelement <4 x float> %v, i32 1
  %__component22 = extractelement <4 x float> %v, i32 2
  %__component23 = extractelement <4 x float> %v, i32 3
  %__element = extractelement <4 x float> %__column10, i32 0
  %__product = fmul float %__element, %__component
  %__element26 = extractelement <4 x float> %__column12, i32 0
  %__product27 = fmul float %__element26, %__component21
  %__dotProduct = fadd float %__product, %__product27
  %__element29 = extractelement <4 x float> %__column14, i32 0
  %__product30 = fmul float %__element29, %__component22
  %__dotProduct31 = fadd float %__dotProduct, %__product30
  %__element33 = extractelement <4 x float> %__column16, i32 0
  %__product34 = fmul float %__element33, %__component23
  %__dotProduct35 = fadd float %__dotProduct31, %__product34
  %__element37 = extractelement <4 x float> %__column10, i32 1
  %__product38 = fmul float %__element37, %__component
  %__element40 = extractelement <4 x float> %__column12, i32 1
  %__product41 = fmul float %__element40, %__component21
  %__dotProduct42 = fadd float %__product38, %__product41
  %__element44 = extractelement <4 x float> %__column14, i32 1
  %__product45 = fmul float %__element44, %__component22
  %__dotProduct46 = fadd float %__dotProduct42, %__product45
  %__element48 = extractelement <4 x float> %__column16, i32 1
  %__product49 = fmul float %__element48, %__component23
  %__dotProduct50 = fadd float %__dotProduct46, %__product49
  %__element52 = extractelement <4 x float> %__column10, i32 2
  %__product53 = fmul float %__element52, %__component
  %__element55 = extractelement <4 x float> %__column12, i32 2
  %__product56 = fmul float %__element55, %__component21
  %__dotProduct57 = fadd float %__product53, %__product56
  %__element59 = extractelement <4 x float> %__column14, i32 2
  %__product60 = fmul float %__element59, %__component22
  %__dotProduct61 = fadd float %__dotProduct57, %__product60
  %__element63 = extractelement <4 x float> %__column16, i32 2
  %__product64 = fmul float %__element63, %__component23
  %__dotProduct65 = fadd float %__dotProduct61, %__product64
  %__element67 = extractelement <4 x float> %__column10, i32 3
  %__product68 = fmul float %__element67, %__component
  %__element70 = extractelement <4 x float> %__column12, i32 3
  %__product71 = fmul float %__element70, %__component21
  %__dotProduct72 = fadd float %__product68, %__product71
  %__element74 = extractelement <4 x float> %__column14, i32 3
  %__product75 = fmul float %__element74, %__component22
  %__dotProduct76 = fadd float %__dotProduct72, %__product75
  %__element78 = extractelement <4 x float> %__column16, i32 3
  %__product79 = fmul float %__element78, %__component23
  %__dotProduct80 = fadd float %__dotProduct76, %__product79
  %13 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct35, i32 0, float %__dotProduct50, i32 0, float %__dotProduct65, i32 0, float %__dotProduct80, i32 0)
  %gl_FragColor81 = fadd <4 x float> %gl_FragColor6, %13
  %__column85 = fsub <4 x float> %__column10, %__column11
  %__column88 = fsub <4 x float> %__column12, %__column13
  %__column91 = fsub <4 x float> %__column14, %__column15
  %__column94 = fsub <4 x float> %__column16, %__column17
  %__dot96 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %__column85)
  %__dot98 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %__column88)
  %__dot100 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %__column91)
  %__dot102 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v, <4 x float> %__column94)
  %14 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot96, i32 0, float %__dot98, i32 0, float %__dot100, i32 0, float %__dot102, i32 0)
  %gl_FragColor103 = fadd <4 x float> %gl_FragColor81, %14
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %.pre-phi743 = phi float [ %__component23, %else ], [ %.pre742, %then ]
  %.pre-phi741 = phi float [ %__component22, %else ], [ %.pre740, %then ]
  %.pre-phi739 = phi float [ %__component21, %else ], [ %.pre738, %then ]
  %.pre-phi = phi float [ %__component, %else ], [ %.pre, %then ]
  %gl_FragColor737.0 = phi <4 x float> [ %gl_FragColor103, %else ], [ %gl_FragColor18, %then ]
  %u = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %15 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u, <4 x i32> <i32 2, i32 3, i32 0, i32 0>)
  %16 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u, <4 x i32> <i32 3, i32 0, i32 0, i32 1>)
  %17 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u, <4 x i32> <i32 0, i32 0, i32 1, i32 2>)
  %18 = extractelement <4 x float> %u, i32 0
  %19 = fmul float %.pre-phi, %18
  %20 = extractelement <4 x float> %u, i32 1
  %21 = fmul float %.pre-phi, %20
  %22 = extractelement <4 x float> %u, i32 2
  %23 = fmul float %.pre-phi, %22
  %24 = extractelement <4 x float> %u, i32 3
  %25 = fmul float %.pre-phi, %24
  %26 = fmul float %.pre-phi739, %18
  %27 = fmul float %.pre-phi739, %20
  %28 = fmul float %.pre-phi739, %22
  %29 = fmul float %.pre-phi739, %24
  %30 = fmul float %.pre-phi741, %18
  %31 = fmul float %.pre-phi741, %20
  %32 = fmul float %.pre-phi741, %22
  %33 = fmul float %.pre-phi741, %24
  %34 = fmul float %.pre-phi743, %18
  %35 = fmul float %.pre-phi743, %20
  %36 = fmul float %.pre-phi743, %22
  %37 = fmul float %.pre-phi743, %24
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %19, i32 0, float %21, i32 0, float %23, i32 0, float %25, i32 0)
  %39 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %26, i32 0, float %27, i32 0, float %28, i32 0, float %29, i32 0)
  %40 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %30, i32 0, float %31, i32 0, float %32, i32 0, float %33, i32 0)
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %34, i32 0, float %35, i32 0, float %36, i32 0, float %37, i32 0)
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float undef, float undef, float undef>, i32 14, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, i32 12, float undef, i32 undef, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0)
  %45 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float> undef, i32 15, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, <4 x float> %v, i32 0)
  %__column191 = fadd <4 x float> %38, %42
  %__column194 = fadd <4 x float> %39, %43
  %__column197 = fadd <4 x float> %40, %44
  %__column200 = fadd <4 x float> %41, %45
  %__column250 = fadd <4 x float> %__column191, %u
  %__column253 = fadd <4 x float> %__column194, %17
  %__column256 = fadd <4 x float> %__column197, %16
  %__column259 = fadd <4 x float> %__column200, %15
  %__matrix262 = load [4 x <4 x float>] addrspace(2)* @un34, align 16
  %__column266 = extractvalue [4 x <4 x float>] %__matrix262, 0
  %46 = fcmp oeq <4 x float> %__column250, %__column266
  %47 = call i1 @llvm.gla.all.v4i1(<4 x i1> %46)
  %__column268 = extractvalue [4 x <4 x float>] %__matrix262, 1
  %48 = fcmp oeq <4 x float> %__column253, %__column268
  %49 = call i1 @llvm.gla.all.v4i1(<4 x i1> %48)
  %50 = and i1 %47, %49
  %__column270 = extractvalue [4 x <4 x float>] %__matrix262, 2
  %51 = fcmp oeq <4 x float> %__column256, %__column270
  %52 = call i1 @llvm.gla.all.v4i1(<4 x i1> %51)
  %53 = and i1 %50, %52
  %__column272 = extractvalue [4 x <4 x float>] %__matrix262, 3
  %54 = fcmp oeq <4 x float> %__column259, %__column272
  %55 = call i1 @llvm.gla.all.v4i1(<4 x i1> %54)
  %56 = and i1 %53, %55
  br i1 %56, label %then273, label %else341

then273:                                          ; preds = %ifmerge
  %__element281 = extractelement <4 x float> %__column250, i32 0
  %__product282 = fmul float %__element281, %18
  %__element284 = extractelement <4 x float> %__column253, i32 0
  %__product285 = fmul float %__element284, %20
  %__dotProduct286 = fadd float %__product282, %__product285
  %__element288 = extractelement <4 x float> %__column256, i32 0
  %__product289 = fmul float %__element288, %22
  %__dotProduct290 = fadd float %__dotProduct286, %__product289
  %__element292 = extractelement <4 x float> %__column259, i32 0
  %__product293 = fmul float %__element292, %24
  %__dotProduct294 = fadd float %__dotProduct290, %__product293
  %__element296 = extractelement <4 x float> %__column250, i32 1
  %__product297 = fmul float %__element296, %18
  %__element299 = extractelement <4 x float> %__column253, i32 1
  %__product300 = fmul float %__element299, %20
  %__dotProduct301 = fadd float %__product297, %__product300
  %__element303 = extractelement <4 x float> %__column256, i32 1
  %__product304 = fmul float %__element303, %22
  %__dotProduct305 = fadd float %__dotProduct301, %__product304
  %__element307 = extractelement <4 x float> %__column259, i32 1
  %__product308 = fmul float %__element307, %24
  %__dotProduct309 = fadd float %__dotProduct305, %__product308
  %__element311 = extractelement <4 x float> %__column250, i32 2
  %__product312 = fmul float %__element311, %18
  %__element314 = extractelement <4 x float> %__column253, i32 2
  %__product315 = fmul float %__element314, %20
  %__dotProduct316 = fadd float %__product312, %__product315
  %__element318 = extractelement <4 x float> %__column256, i32 2
  %__product319 = fmul float %__element318, %22
  %__dotProduct320 = fadd float %__dotProduct316, %__product319
  %__element322 = extractelement <4 x float> %__column259, i32 2
  %__product323 = fmul float %__element322, %24
  %__dotProduct324 = fadd float %__dotProduct320, %__product323
  %__element326 = extractelement <4 x float> %__column250, i32 3
  %__product327 = fmul float %__element326, %18
  %__element329 = extractelement <4 x float> %__column253, i32 3
  %__product330 = fmul float %__element329, %20
  %__dotProduct331 = fadd float %__product327, %__product330
  %__element333 = extractelement <4 x float> %__column256, i32 3
  %__product334 = fmul float %__element333, %22
  %__dotProduct335 = fadd float %__dotProduct331, %__product334
  %__element337 = extractelement <4 x float> %__column259, i32 3
  %__product338 = fmul float %__element337, %24
  %__dotProduct339 = fadd float %__dotProduct335, %__product338
  %57 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct294, i32 0, float %__dotProduct309, i32 0, float %__dotProduct324, i32 0, float %__dotProduct339, i32 0)
  br label %ifmerge736

else341:                                          ; preds = %ifmerge
  %__matrix343 = load [4 x <4 x float>] addrspace(2)* @um43, align 16
  %__rightColumn344 = extractvalue [4 x <4 x float>] %__matrix343, 0
  %__leftComp = extractelement <4 x float> %__column266, i32 0
  %__rightComp = extractelement <4 x float> %__rightColumn344, i32 0
  %__product346 = fmul float %__leftComp, %__rightComp
  %__leftComp348 = extractelement <4 x float> %__column268, i32 0
  %__rightComp349 = extractelement <4 x float> %__rightColumn344, i32 1
  %__product350 = fmul float %__leftComp348, %__rightComp349
  %__dotProduct351 = fadd float %__product346, %__product350
  %__leftComp353 = extractelement <4 x float> %__column270, i32 0
  %__rightComp354 = extractelement <4 x float> %__rightColumn344, i32 2
  %__product355 = fmul float %__leftComp353, %__rightComp354
  %__dotProduct356 = fadd float %__dotProduct351, %__product355
  %__leftComp358 = extractelement <4 x float> %__column272, i32 0
  %__rightComp359 = extractelement <4 x float> %__rightColumn344, i32 3
  %__product360 = fmul float %__leftComp358, %__rightComp359
  %__dotProduct361 = fadd float %__dotProduct356, %__product360
  %__leftComp364 = extractelement <4 x float> %__column266, i32 1
  %__product366 = fmul float %__leftComp364, %__rightComp
  %__leftComp368 = extractelement <4 x float> %__column268, i32 1
  %__product370 = fmul float %__leftComp368, %__rightComp349
  %__dotProduct371 = fadd float %__product366, %__product370
  %__leftComp373 = extractelement <4 x float> %__column270, i32 1
  %__product375 = fmul float %__leftComp373, %__rightComp354
  %__dotProduct376 = fadd float %__dotProduct371, %__product375
  %__leftComp378 = extractelement <4 x float> %__column272, i32 1
  %__product380 = fmul float %__leftComp378, %__rightComp359
  %__dotProduct381 = fadd float %__dotProduct376, %__product380
  %__leftComp384 = extractelement <4 x float> %__column266, i32 2
  %__product386 = fmul float %__leftComp384, %__rightComp
  %__leftComp388 = extractelement <4 x float> %__column268, i32 2
  %__product390 = fmul float %__leftComp388, %__rightComp349
  %__dotProduct391 = fadd float %__product386, %__product390
  %__leftComp393 = extractelement <4 x float> %__column270, i32 2
  %__product395 = fmul float %__leftComp393, %__rightComp354
  %__dotProduct396 = fadd float %__dotProduct391, %__product395
  %__leftComp398 = extractelement <4 x float> %__column272, i32 2
  %__product400 = fmul float %__leftComp398, %__rightComp359
  %__dotProduct401 = fadd float %__dotProduct396, %__product400
  %__leftComp404 = extractelement <4 x float> %__column266, i32 3
  %__product406 = fmul float %__leftComp404, %__rightComp
  %__leftComp408 = extractelement <4 x float> %__column268, i32 3
  %__product410 = fmul float %__leftComp408, %__rightComp349
  %__dotProduct411 = fadd float %__product406, %__product410
  %__leftComp413 = extractelement <4 x float> %__column270, i32 3
  %__product415 = fmul float %__leftComp413, %__rightComp354
  %__dotProduct416 = fadd float %__dotProduct411, %__product415
  %__leftComp418 = extractelement <4 x float> %__column272, i32 3
  %__product420 = fmul float %__leftComp418, %__rightComp359
  %__dotProduct421 = fadd float %__dotProduct416, %__product420
  %__rightColumn424 = extractvalue [4 x <4 x float>] %__matrix343, 1
  %__rightComp427 = extractelement <4 x float> %__rightColumn424, i32 0
  %__product428 = fmul float %__leftComp, %__rightComp427
  %__rightComp431 = extractelement <4 x float> %__rightColumn424, i32 1
  %__product432 = fmul float %__leftComp348, %__rightComp431
  %__dotProduct433 = fadd float %__product428, %__product432
  %__rightComp436 = extractelement <4 x float> %__rightColumn424, i32 2
  %__product437 = fmul float %__leftComp353, %__rightComp436
  %__dotProduct438 = fadd float %__dotProduct433, %__product437
  %__rightComp441 = extractelement <4 x float> %__rightColumn424, i32 3
  %__product442 = fmul float %__leftComp358, %__rightComp441
  %__dotProduct443 = fadd float %__dotProduct438, %__product442
  %__product448 = fmul float %__leftComp364, %__rightComp427
  %__product452 = fmul float %__leftComp368, %__rightComp431
  %__dotProduct453 = fadd float %__product448, %__product452
  %__product457 = fmul float %__leftComp373, %__rightComp436
  %__dotProduct458 = fadd float %__dotProduct453, %__product457
  %__product462 = fmul float %__leftComp378, %__rightComp441
  %__dotProduct463 = fadd float %__dotProduct458, %__product462
  %__product468 = fmul float %__leftComp384, %__rightComp427
  %__product472 = fmul float %__leftComp388, %__rightComp431
  %__dotProduct473 = fadd float %__product468, %__product472
  %__product477 = fmul float %__leftComp393, %__rightComp436
  %__dotProduct478 = fadd float %__dotProduct473, %__product477
  %__product482 = fmul float %__leftComp398, %__rightComp441
  %__dotProduct483 = fadd float %__dotProduct478, %__product482
  %__product488 = fmul float %__leftComp404, %__rightComp427
  %__product492 = fmul float %__leftComp408, %__rightComp431
  %__dotProduct493 = fadd float %__product488, %__product492
  %__product497 = fmul float %__leftComp413, %__rightComp436
  %__dotProduct498 = fadd float %__dotProduct493, %__product497
  %__product502 = fmul float %__leftComp418, %__rightComp441
  %__dotProduct503 = fadd float %__dotProduct498, %__product502
  %__rightColumn506 = extractvalue [4 x <4 x float>] %__matrix343, 2
  %__rightComp509 = extractelement <4 x float> %__rightColumn506, i32 0
  %__product510 = fmul float %__leftComp, %__rightComp509
  %__rightComp513 = extractelement <4 x float> %__rightColumn506, i32 1
  %__product514 = fmul float %__leftComp348, %__rightComp513
  %__dotProduct515 = fadd float %__product510, %__product514
  %__rightComp518 = extractelement <4 x float> %__rightColumn506, i32 2
  %__product519 = fmul float %__leftComp353, %__rightComp518
  %__dotProduct520 = fadd float %__dotProduct515, %__product519
  %__rightComp523 = extractelement <4 x float> %__rightColumn506, i32 3
  %__product524 = fmul float %__leftComp358, %__rightComp523
  %__dotProduct525 = fadd float %__dotProduct520, %__product524
  %__product530 = fmul float %__leftComp364, %__rightComp509
  %__product534 = fmul float %__leftComp368, %__rightComp513
  %__dotProduct535 = fadd float %__product530, %__product534
  %__product539 = fmul float %__leftComp373, %__rightComp518
  %__dotProduct540 = fadd float %__dotProduct535, %__product539
  %__product544 = fmul float %__leftComp378, %__rightComp523
  %__dotProduct545 = fadd float %__dotProduct540, %__product544
  %__product550 = fmul float %__leftComp384, %__rightComp509
  %__product554 = fmul float %__leftComp388, %__rightComp513
  %__dotProduct555 = fadd float %__product550, %__product554
  %__product559 = fmul float %__leftComp393, %__rightComp518
  %__dotProduct560 = fadd float %__dotProduct555, %__product559
  %__product564 = fmul float %__leftComp398, %__rightComp523
  %__dotProduct565 = fadd float %__dotProduct560, %__product564
  %__product570 = fmul float %__leftComp404, %__rightComp509
  %__product574 = fmul float %__leftComp408, %__rightComp513
  %__dotProduct575 = fadd float %__product570, %__product574
  %__product579 = fmul float %__leftComp413, %__rightComp518
  %__dotProduct580 = fadd float %__dotProduct575, %__product579
  %__product584 = fmul float %__leftComp418, %__rightComp523
  %__dotProduct585 = fadd float %__dotProduct580, %__product584
  %__rightColumn588 = extractvalue [4 x <4 x float>] %__matrix343, 3
  %__rightComp591 = extractelement <4 x float> %__rightColumn588, i32 0
  %__product592 = fmul float %__leftComp, %__rightComp591
  %__rightComp595 = extractelement <4 x float> %__rightColumn588, i32 1
  %__product596 = fmul float %__leftComp348, %__rightComp595
  %__dotProduct597 = fadd float %__product592, %__product596
  %__rightComp600 = extractelement <4 x float> %__rightColumn588, i32 2
  %__product601 = fmul float %__leftComp353, %__rightComp600
  %__dotProduct602 = fadd float %__dotProduct597, %__product601
  %__rightComp605 = extractelement <4 x float> %__rightColumn588, i32 3
  %__product606 = fmul float %__leftComp358, %__rightComp605
  %__dotProduct607 = fadd float %__dotProduct602, %__product606
  %__product612 = fmul float %__leftComp364, %__rightComp591
  %__product616 = fmul float %__leftComp368, %__rightComp595
  %__dotProduct617 = fadd float %__product612, %__product616
  %__product621 = fmul float %__leftComp373, %__rightComp600
  %__dotProduct622 = fadd float %__dotProduct617, %__product621
  %__product626 = fmul float %__leftComp378, %__rightComp605
  %__dotProduct627 = fadd float %__dotProduct622, %__product626
  %__product632 = fmul float %__leftComp384, %__rightComp591
  %__product636 = fmul float %__leftComp388, %__rightComp595
  %__dotProduct637 = fadd float %__product632, %__product636
  %__product641 = fmul float %__leftComp393, %__rightComp600
  %__dotProduct642 = fadd float %__dotProduct637, %__product641
  %__product646 = fmul float %__leftComp398, %__rightComp605
  %__dotProduct647 = fadd float %__dotProduct642, %__product646
  %__product652 = fmul float %__leftComp404, %__rightComp591
  %__product656 = fmul float %__leftComp408, %__rightComp595
  %__dotProduct657 = fadd float %__product652, %__product656
  %__product661 = fmul float %__leftComp413, %__rightComp600
  %__dotProduct662 = fadd float %__dotProduct657, %__product661
  %__product666 = fmul float %__leftComp418, %__rightComp605
  %__dotProduct667 = fadd float %__dotProduct662, %__product666
  %__product677 = fmul float %__dotProduct361, %.pre-phi
  %__product680 = fmul float %__dotProduct443, %.pre-phi739
  %__dotProduct681 = fadd float %__product677, %__product680
  %__product684 = fmul float %__dotProduct525, %.pre-phi741
  %__dotProduct685 = fadd float %__dotProduct681, %__product684
  %__product688 = fmul float %__dotProduct607, %.pre-phi743
  %__dotProduct689 = fadd float %__dotProduct685, %__product688
  %__product692 = fmul float %__dotProduct381, %.pre-phi
  %__product695 = fmul float %__dotProduct463, %.pre-phi739
  %__dotProduct696 = fadd float %__product692, %__product695
  %__product699 = fmul float %__dotProduct545, %.pre-phi741
  %__dotProduct700 = fadd float %__dotProduct696, %__product699
  %__product703 = fmul float %__dotProduct627, %.pre-phi743
  %__dotProduct704 = fadd float %__dotProduct700, %__product703
  %__product707 = fmul float %__dotProduct401, %.pre-phi
  %__product710 = fmul float %__dotProduct483, %.pre-phi739
  %__dotProduct711 = fadd float %__product707, %__product710
  %__product714 = fmul float %__dotProduct565, %.pre-phi741
  %__dotProduct715 = fadd float %__dotProduct711, %__product714
  %__product718 = fmul float %__dotProduct647, %.pre-phi743
  %__dotProduct719 = fadd float %__dotProduct715, %__product718
  %__product722 = fmul float %__dotProduct421, %.pre-phi
  %__product725 = fmul float %__dotProduct503, %.pre-phi739
  %__dotProduct726 = fadd float %__product722, %__product725
  %__product729 = fmul float %__dotProduct585, %.pre-phi741
  %__dotProduct730 = fadd float %__dotProduct726, %__product729
  %__product733 = fmul float %__dotProduct667, %.pre-phi743
  %__dotProduct734 = fadd float %__dotProduct730, %__product733
  %58 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct689, i32 0, float %__dotProduct704, i32 0, float %__dotProduct719, i32 0, float %__dotProduct734, i32 0)
  br label %ifmerge736

ifmerge736:                                       ; preds = %else341, %then273
  %.pn = phi <4 x float> [ %57, %then273 ], [ %58, %else341 ]
  %gl_FragColor737.1 = fadd <4 x float> %gl_FragColor737.0, %.pn
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor737.1)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge736
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float>, i32, float, i32, float, i32, float, i32, <4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) nounwind readnone

// LunarGOO(r471) output
#version 130
uniform vec4[4] un34;
uniform vec3[3] colorTransform;
uniform vec4[4] m;
uniform vec4[4] n;
uniform vec4[4] um43;
in vec3 Color;
const float const35_1f = 1.0;
in vec4 v;
in vec4 u;
const float const121_0f = 0.0;

void main()
{
    float _pre_phi743;
    float _pre_phi741;
    float _pre_phi739;
    float _pre_phi;
    vec4 gla_copyout_gl_FragColor737_0;
    vec4 _pn;
    vec4 temp27 = un34[1];
    vec3 __column = colorTransform[0];
    float __dot = dot(Color, __column);
    vec3 __column1 = colorTransform[1];
    float __dot2 = dot(Color, __column1);
    vec3 __column3 = colorTransform[2];
    float __dot4 = dot(Color, __column3);
    vec4 temp34 = vec4(__dot, __dot2, __dot4, const35_1f);
    vec4 gla_copyout_gl_FragColor6 = temp27 + temp34;
    vec4 __column10 = m[0];
    vec4 __column11 = n[0];
    bvec4 temp39 = notEqual(__column10, __column11);
    bool temp40 = any(temp39);
    vec4 __column12 = m[1];
    vec4 __column13 = n[1];
    bvec4 temp43 = notEqual(__column12, __column13);
    bool temp44 = any(temp43);
    bool temp45 = temp40 || temp44;
    vec4 __column14 = m[2];
    vec4 __column15 = n[2];
    bvec4 temp48 = notEqual(__column14, __column15);
    bool temp49 = any(temp48);
    bool temp50 = temp45 || temp49;
    vec4 __column16 = m[3];
    vec4 __column17 = n[3];
    bvec4 temp53 = notEqual(__column16, __column17);
    bool temp54 = any(temp53);
    bool temp55 = temp50 || temp54;
    if (temp55) {
        vec4 gla_copyout_gl_FragColor18 = gla_copyout_gl_FragColor6 + v;
        _pre_phi743 = v.w;
        _pre_phi741 = v.z;
        _pre_phi739 = v.y;
        _pre_phi = v.x;
        gla_copyout_gl_FragColor737_0 = gla_copyout_gl_FragColor18;
    }
    else {
        float __product = __column10.x * v.x;
        float __product27 = __column12.x * v.y;
        float __dotProduct = __product + __product27;
        float __product30 = __column14.x * v.z;
        float __dotProduct31 = __dotProduct + __product30;
        float __product34 = __column16.x * v.w;
        float __dotProduct35 = __dotProduct31 + __product34;
        float __product38 = __column10.y * v.x;
        float __product41 = __column12.y * v.y;
        float __dotProduct42 = __product38 + __product41;
        float __product45 = __column14.y * v.z;
        float __dotProduct46 = __dotProduct42 + __product45;
        float __product49 = __column16.y * v.w;
        float __dotProduct50 = __dotProduct46 + __product49;
        float __product53 = __column10.z * v.x;
        float __product56 = __column12.z * v.y;
        float __dotProduct57 = __product53 + __product56;
        float __product60 = __column14.z * v.z;
        float __dotProduct61 = __dotProduct57 + __product60;
        float __product64 = __column16.z * v.w;
        float __dotProduct65 = __dotProduct61 + __product64;
        float __product68 = __column10.w * v.x;
        float __product71 = __column12.w * v.y;
        float __dotProduct72 = __product68 + __product71;
        float __product75 = __column14.w * v.z;
        float __dotProduct76 = __dotProduct72 + __product75;
        float __product79 = __column16.w * v.w;
        float __dotProduct80 = __dotProduct76 + __product79;
        vec4 temp85 = vec4(__dotProduct35, __dotProduct50, __dotProduct65, __dotProduct80);
        vec4 gla_copyout_gl_FragColor81 = gla_copyout_gl_FragColor6 + temp85;
        vec4 __column85 = __column10 - __column11;
        vec4 __column88 = __column12 - __column13;
        vec4 __column91 = __column14 - __column15;
        vec4 __column94 = __column16 - __column17;
        float __dot96 = dot(v, __column85);
        float __dot98 = dot(v, __column88);
        float __dot100 = dot(v, __column91);
        float __dot102 = dot(v, __column94);
        vec4 temp95 = vec4(__dot96, __dot98, __dot100, __dot102);
        vec4 gla_copyout_gl_FragColor103 = gla_copyout_gl_FragColor81 + temp95;
        _pre_phi743 = v.w;
        _pre_phi741 = v.z;
        _pre_phi739 = v.y;
        _pre_phi = v.x;
        gla_copyout_gl_FragColor737_0 = gla_copyout_gl_FragColor103;
    }
    
    vec4 temp97 = u.zwxx;
    vec4 temp98 = u.wxxy;
    vec4 temp99 = u.xxyz;
    float temp100 = _pre_phi * u.x;
    float temp101 = _pre_phi * u.y;
    float temp102 = _pre_phi * u.z;
    float temp103 = _pre_phi * u.w;
    float temp104 = _pre_phi739 * u.x;
    float temp105 = _pre_phi739 * u.y;
    float temp106 = _pre_phi739 * u.z;
    float temp107 = _pre_phi739 * u.w;
    float temp108 = _pre_phi741 * u.x;
    float temp109 = _pre_phi741 * u.y;
    float temp110 = _pre_phi741 * u.z;
    float temp111 = _pre_phi741 * u.w;
    float temp112 = _pre_phi743 * u.x;
    float temp113 = _pre_phi743 * u.y;
    float temp114 = _pre_phi743 * u.z;
    float temp115 = _pre_phi743 * u.w;
    vec4 temp116 = vec4(temp100, temp101, temp102, temp103);
    vec4 temp117 = vec4(temp104, temp105, temp106, temp107);
    vec4 temp118 = vec4(temp108, temp109, temp110, temp111);
    vec4 temp119 = vec4(temp112, temp113, temp114, temp115);
    vec4 temp120 = vec4(_pre_phi, const121_0f, const121_0f, const121_0f);
    vec4 temp122 = 
    vec4 undef123;
    undef123.x = const121_0f;undef123;
    temp122.yzw = vec3(_pre_phi, const121_0f, const121_0f);
    vec4 temp124 = 
    vec4 undef125;
    undef125.x = const121_0f;
    undef125.y = const121_0f;undef125;
    temp124.zw = vec2(_pre_phi, const121_0f);
    vec4 temp126 = vec4(const121_0f, const121_0f, const121_0f, v.x);
    vec4 __column191 = temp116 + temp120;
    vec4 __column194 = temp117 + temp122;
    vec4 __column197 = temp118 + temp124;
    vec4 __column200 = temp119 + temp126;
    vec4 __column250 = __column191 + u;
    vec4 __column253 = __column194 + temp99;
    vec4 __column256 = __column197 + temp98;
    vec4 __column259 = __column200 + temp97;
    vec4 __column266 = un34[0];
    bvec4 temp136 = equal(__column250, __column266);
    bool temp137 = all(temp136);
    vec4 __column268 = un34[1];
    bvec4 temp139 = equal(__column253, __column268);
    bool temp140 = all(temp139);
    bool temp141 = temp137 && temp140;
    vec4 __column270 = un34[2];
    bvec4 temp143 = equal(__column256, __column270);
    bool temp144 = all(temp143);
    bool temp145 = temp141 && temp144;
    vec4 __column272 = un34[3];
    bvec4 temp147 = equal(__column259, __column272);
    bool temp148 = all(temp147);
    bool temp149 = temp145 && temp148;
    if (temp149) {
        float __product282 = __column250.x * u.x;
        float __product285 = __column253.x * u.y;
        float __dotProduct286 = __product282 + __product285;
        float __product289 = __column256.x * u.z;
        float __dotProduct290 = __dotProduct286 + __product289;
        float __product293 = __column259.x * u.w;
        float __dotProduct294 = __dotProduct290 + __product293;
        float __product297 = __column250.y * u.x;
        float __product300 = __column253.y * u.y;
        float __dotProduct301 = __product297 + __product300;
        float __product304 = __column256.y * u.z;
        float __dotProduct305 = __dotProduct301 + __product304;
        float __product308 = __column259.y * u.w;
        float __dotProduct309 = __dotProduct305 + __product308;
        float __product312 = __column250.z * u.x;
        float __product315 = __column253.z * u.y;
        float __dotProduct316 = __product312 + __product315;
        float __product319 = __column256.z * u.z;
        float __dotProduct320 = __dotProduct316 + __product319;
        float __product323 = __column259.z * u.w;
        float __dotProduct324 = __dotProduct320 + __product323;
        float __product327 = __column250.w * u.x;
        float __product330 = __column253.w * u.y;
        float __dotProduct331 = __product327 + __product330;
        float __product334 = __column256.w * u.z;
        float __dotProduct335 = __dotProduct331 + __product334;
        float __product338 = __column259.w * u.w;
        float __dotProduct339 = __dotProduct335 + __product338;
        vec4 temp178 = vec4(__dotProduct294, __dotProduct309, __dotProduct324, __dotProduct339);
        _pn = temp178;
    }
    else {
        vec4 __rightColumn344 = um43[0];
        float __product346 = __column266.x * __rightColumn344.x;
        float __product350 = __column268.x * __rightColumn344.y;
        float __dotProduct351 = __product346 + __product350;
        float __product355 = __column270.x * __rightColumn344.z;
        float __dotProduct356 = __dotProduct351 + __product355;
        float __product360 = __column272.x * __rightColumn344.w;
        float __dotProduct361 = __dotProduct356 + __product360;
        float __product366 = __column266.y * __rightColumn344.x;
        float __product370 = __column268.y * __rightColumn344.y;
        float __dotProduct371 = __product366 + __product370;
        float __product375 = __column270.y * __rightColumn344.z;
        float __dotProduct376 = __dotProduct371 + __product375;
        float __product380 = __column272.y * __rightColumn344.w;
        float __dotProduct381 = __dotProduct376 + __product380;
        float __product386 = __column266.z * __rightColumn344.x;
        float __product390 = __column268.z * __rightColumn344.y;
        float __dotProduct391 = __product386 + __product390;
        float __product395 = __column270.z * __rightColumn344.z;
        float __dotProduct396 = __dotProduct391 + __product395;
        float __product400 = __column272.z * __rightColumn344.w;
        float __dotProduct401 = __dotProduct396 + __product400;
        float __product406 = __column266.w * __rightColumn344.x;
        float __product410 = __column268.w * __rightColumn344.y;
        float __dotProduct411 = __product406 + __product410;
        float __product415 = __column270.w * __rightColumn344.z;
        float __dotProduct416 = __dotProduct411 + __product415;
        float __product420 = __column272.w * __rightColumn344.w;
        float __dotProduct421 = __dotProduct416 + __product420;
        vec4 __rightColumn424 = um43[1];
        float __product428 = __column266.x * __rightColumn424.x;
        float __product432 = __column268.x * __rightColumn424.y;
        float __dotProduct433 = __product428 + __product432;
        float __product437 = __column270.x * __rightColumn424.z;
        float __dotProduct438 = __dotProduct433 + __product437;
        float __product442 = __column272.x * __rightColumn424.w;
        float __dotProduct443 = __dotProduct438 + __product442;
        float __product448 = __column266.y * __rightColumn424.x;
        float __product452 = __column268.y * __rightColumn424.y;
        float __dotProduct453 = __product448 + __product452;
        float __product457 = __column270.y * __rightColumn424.z;
        float __dotProduct458 = __dotProduct453 + __product457;
        float __product462 = __column272.y * __rightColumn424.w;
        float __dotProduct463 = __dotProduct458 + __product462;
        float __product468 = __column266.z * __rightColumn424.x;
        float __product472 = __column268.z * __rightColumn424.y;
        float __dotProduct473 = __product468 + __product472;
        float __product477 = __column270.z * __rightColumn424.z;
        float __dotProduct478 = __dotProduct473 + __product477;
        float __product482 = __column272.z * __rightColumn424.w;
        float __dotProduct483 = __dotProduct478 + __product482;
        float __product488 = __column266.w * __rightColumn424.x;
        float __product492 = __column268.w * __rightColumn424.y;
        float __dotProduct493 = __product488 + __product492;
        float __product497 = __column270.w * __rightColumn424.z;
        float __dotProduct498 = __dotProduct493 + __product497;
        float __product502 = __column272.w * __rightColumn424.w;
        float __dotProduct503 = __dotProduct498 + __product502;
        vec4 __rightColumn506 = um43[2];
        float __product510 = __column266.x * __rightColumn506.x;
        float __product514 = __column268.x * __rightColumn506.y;
        float __dotProduct515 = __product510 + __product514;
        float __product519 = __column270.x * __rightColumn506.z;
        float __dotProduct520 = __dotProduct515 + __product519;
        float __product524 = __column272.x * __rightColumn506.w;
        float __dotProduct525 = __dotProduct520 + __product524;
        float __product530 = __column266.y * __rightColumn506.x;
        float __product534 = __column268.y * __rightColumn506.y;
        float __dotProduct535 = __product530 + __product534;
        float __product539 = __column270.y * __rightColumn506.z;
        float __dotProduct540 = __dotProduct535 + __product539;
        float __product544 = __column272.y * __rightColumn506.w;
        float __dotProduct545 = __dotProduct540 + __product544;
        float __product550 = __column266.z * __rightColumn506.x;
        float __product554 = __column268.z * __rightColumn506.y;
        float __dotProduct555 = __product550 + __product554;
        float __product559 = __column270.z * __rightColumn506.z;
        float __dotProduct560 = __dotProduct555 + __product559;
        float __product564 = __column272.z * __rightColumn506.w;
        float __dotProduct565 = __dotProduct560 + __product564;
        float __product570 = __column266.w * __rightColumn506.x;
        float __product574 = __column268.w * __rightColumn506.y;
        float __dotProduct575 = __product570 + __product574;
        float __product579 = __column270.w * __rightColumn506.z;
        float __dotProduct580 = __dotProduct575 + __product579;
        float __product584 = __column272.w * __rightColumn506.w;
        float __dotProduct585 = __dotProduct580 + __product584;
        vec4 __rightColumn588 = um43[3];
        float __product592 = __column266.x * __rightColumn588.x;
        float __product596 = __column268.x * __rightColumn588.y;
        float __dotProduct597 = __product592 + __product596;
        float __product601 = __column270.x * __rightColumn588.z;
        float __dotProduct602 = __dotProduct597 + __product601;
        float __product606 = __column272.x * __rightColumn588.w;
        float __dotProduct607 = __dotProduct602 + __product606;
        float __product612 = __column266.y * __rightColumn588.x;
        float __product616 = __column268.y * __rightColumn588.y;
        float __dotProduct617 = __product612 + __product616;
        float __product621 = __column270.y * __rightColumn588.z;
        float __dotProduct622 = __dotProduct617 + __product621;
        float __product626 = __column272.y * __rightColumn588.w;
        float __dotProduct627 = __dotProduct622 + __product626;
        float __product632 = __column266.z * __rightColumn588.x;
        float __product636 = __column268.z * __rightColumn588.y;
        float __dotProduct637 = __product632 + __product636;
        float __product641 = __column270.z * __rightColumn588.z;
        float __dotProduct642 = __dotProduct637 + __product641;
        float __product646 = __column272.z * __rightColumn588.w;
        float __dotProduct647 = __dotProduct642 + __product646;
        float __product652 = __column266.w * __rightColumn588.x;
        float __product656 = __column268.w * __rightColumn588.y;
        float __dotProduct657 = __product652 + __product656;
        float __product661 = __column270.w * __rightColumn588.z;
        float __dotProduct662 = __dotProduct657 + __product661;
        float __product666 = __column272.w * __rightColumn588.w;
        float __dotProduct667 = __dotProduct662 + __product666;
        float __product677 = __dotProduct361 * _pre_phi;
        float __product680 = __dotProduct443 * _pre_phi739;
        float __dotProduct681 = __product677 + __product680;
        float __product684 = __dotProduct525 * _pre_phi741;
        float __dotProduct685 = __dotProduct681 + __product684;
        float __product688 = __dotProduct607 * _pre_phi743;
        float __dotProduct689 = __dotProduct685 + __product688;
        float __product692 = __dotProduct381 * _pre_phi;
        float __product695 = __dotProduct463 * _pre_phi739;
        float __dotProduct696 = __product692 + __product695;
        float __product699 = __dotProduct545 * _pre_phi741;
        float __dotProduct700 = __dotProduct696 + __product699;
        float __product703 = __dotProduct627 * _pre_phi743;
        float __dotProduct704 = __dotProduct700 + __product703;
        float __product707 = __dotProduct401 * _pre_phi;
        float __product710 = __dotProduct483 * _pre_phi739;
        float __dotProduct711 = __product707 + __product710;
        float __product714 = __dotProduct565 * _pre_phi741;
        float __dotProduct715 = __dotProduct711 + __product714;
        float __product718 = __dotProduct647 * _pre_phi743;
        float __dotProduct719 = __dotProduct715 + __product718;
        float __product722 = __dotProduct421 * _pre_phi;
        float __product725 = __dotProduct503 * _pre_phi739;
        float __dotProduct726 = __product722 + __product725;
        float __product729 = __dotProduct585 * _pre_phi741;
        float __dotProduct730 = __dotProduct726 + __product729;
        float __product733 = __dotProduct667 * _pre_phi743;
        float __dotProduct734 = __dotProduct730 + __product733;
        vec4 temp323 = vec4(__dotProduct689, __dotProduct704, __dotProduct719, __dotProduct734);
        _pn = temp323;
    }
    
    vec4 gla_copyout_gl_FragColor737_1 = gla_copyout_gl_FragColor737_0 + _pn;
    gl_FragColor = gla_copyout_gl_FragColor737_1;
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
