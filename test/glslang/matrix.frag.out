
Top IR:
; ModuleID = 'Top'

@FragColor_shadow = internal global <4 x float> zeroinitializer
@"matrix un34" = external addrspace(2) constant [4 x <4 x float>]
@Color_shadow = internal global <3 x float> zeroinitializer
@"matrix colorTransform" = external addrspace(2) constant [3 x <3 x float>]
@"matrix m" = external addrspace(2) constant [4 x <4 x float>]
@"matrix n" = external addrspace(2) constant [4 x <4 x float>]
@v_shadow = internal global <4 x float> zeroinitializer
@u_shadow = internal global <4 x float> zeroinitializer
@"matrix um43" = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %constructed197 = alloca [4 x <4 x float>]
  %constructed152 = alloca [4 x <4 x float>]
  %constructed127 = alloca [4 x <4 x float>]
  %"matrix m34" = alloca [4 x <4 x float>]
  %constructed5 = alloca <4 x float>
  %constructed = alloca <4 x float>
  %0 = load <4 x float> addrspace(2)* getelementptr inbounds ([4 x <4 x float>] addrspace(2)* @"matrix un34", i32 0, i32 1)
  %1 = load <4 x float>* %constructed
  %2 = extractelement <4 x float> %0, i32 0
  %3 = insertelement <4 x float> %1, float %2, i32 0
  %4 = extractelement <4 x float> %0, i32 1
  %5 = insertelement <4 x float> %3, float %4, i32 1
  %6 = extractelement <4 x float> %0, i32 2
  %7 = insertelement <4 x float> %5, float %6, i32 2
  %8 = extractelement <4 x float> %0, i32 3
  %FragColor_shadow = insertelement <4 x float> %7, float %8, i32 3
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  %Color__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 -1, i32 1)
  store <3 x float> %Color__, <3 x float>* @Color_shadow
  %9 = load <3 x float>* @Color_shadow
  %10 = load [3 x <3 x float>] addrspace(2)* @"matrix colorTransform"
  %11 = alloca <3 x float>
  %12 = load <3 x float>* %11
  %__column = extractvalue [3 x <3 x float>] %10, 0
  %__dot = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %9, <3 x float> %__column)
  %13 = insertelement <3 x float> %12, float %__dot, i32 0
  %__column1 = extractvalue [3 x <3 x float>] %10, 1
  %__dot2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %9, <3 x float> %__column1)
  %14 = insertelement <3 x float> %13, float %__dot2, i32 1
  %__column3 = extractvalue [3 x <3 x float>] %10, 2
  %__dot4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %9, <3 x float> %__column3)
  %15 = insertelement <3 x float> %14, float %__dot4, i32 2
  %16 = load <4 x float>* %constructed5
  %17 = extractelement <3 x float> %15, i32 0
  %18 = insertelement <4 x float> %16, float %17, i32 0
  %19 = extractelement <3 x float> %15, i32 1
  %20 = insertelement <4 x float> %18, float %19, i32 1
  %21 = extractelement <3 x float> %15, i32 2
  %22 = insertelement <4 x float> %20, float %21, i32 2
  %23 = insertelement <4 x float> %22, float 1.000000e+00, i32 3
  %24 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow6 = fadd <4 x float> %24, %23
  store <4 x float> %FragColor_shadow6, <4 x float>* @FragColor_shadow
  %25 = load [4 x <4 x float>] addrspace(2)* @"matrix m"
  %26 = load [4 x <4 x float>] addrspace(2)* @"matrix n"
  %element1 = extractvalue [4 x <4 x float>] %25, 0
  %element2 = extractvalue [4 x <4 x float>] %26, 0
  %27 = fcmp one <4 x float> %element1, %element2
  %28 = call i1 @llvm.gla.any.v4i1(<4 x i1> %27)
  %element17 = extractvalue [4 x <4 x float>] %25, 1
  %element28 = extractvalue [4 x <4 x float>] %26, 1
  %29 = fcmp one <4 x float> %element17, %element28
  %30 = call i1 @llvm.gla.any.v4i1(<4 x i1> %29)
  %31 = or i1 %28, %30
  %element19 = extractvalue [4 x <4 x float>] %25, 2
  %element210 = extractvalue [4 x <4 x float>] %26, 2
  %32 = fcmp one <4 x float> %element19, %element210
  %33 = call i1 @llvm.gla.any.v4i1(<4 x i1> %32)
  %34 = or i1 %31, %33
  %element111 = extractvalue [4 x <4 x float>] %25, 3
  %element212 = extractvalue [4 x <4 x float>] %26, 3
  %35 = fcmp one <4 x float> %element111, %element212
  %36 = call i1 @llvm.gla.any.v4i1(<4 x i1> %35)
  %37 = or i1 %34, %36
  br i1 %37, label %then, label %else

then:                                             ; preds = %entry
  %v__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__, <4 x float>* @v_shadow
  %38 = load <4 x float>* @v_shadow
  %39 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow13 = fadd <4 x float> %39, %38
  store <4 x float> %FragColor_shadow13, <4 x float>* @FragColor_shadow
  br label %ifmerge

else:                                             ; preds = %entry
  %40 = load [4 x <4 x float>] addrspace(2)* @"matrix m"
  %v__14 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__14, <4 x float>* @v_shadow
  %41 = load <4 x float>* @v_shadow
  %42 = alloca <4 x float>
  %43 = load <4 x float>* %42
  %__component = extractelement <4 x float> %41, i32 0
  %__component15 = extractelement <4 x float> %41, i32 1
  %__component16 = extractelement <4 x float> %41, i32 2
  %__component17 = extractelement <4 x float> %41, i32 3
  %__column18 = extractvalue [4 x <4 x float>] %40, 0
  %__element = extractelement <4 x float> %__column18, i32 0
  %__product = fmul float %__element, %__component
  %__column19 = extractvalue [4 x <4 x float>] %40, 1
  %__element20 = extractelement <4 x float> %__column19, i32 0
  %__product21 = fmul float %__element20, %__component15
  %__dotProduct = fadd float %__product, %__product21
  %__column22 = extractvalue [4 x <4 x float>] %40, 2
  %__element23 = extractelement <4 x float> %__column22, i32 0
  %__product24 = fmul float %__element23, %__component16
  %__dotProduct25 = fadd float %__dotProduct, %__product24
  %__column26 = extractvalue [4 x <4 x float>] %40, 3
  %__element27 = extractelement <4 x float> %__column26, i32 0
  %__product28 = fmul float %__element27, %__component17
  %__dotProduct29 = fadd float %__dotProduct25, %__product28
  %44 = insertelement <4 x float> %43, float %__dotProduct29, i32 0
  %__column30 = extractvalue [4 x <4 x float>] %40, 0
  %__element31 = extractelement <4 x float> %__column30, i32 1
  %__product32 = fmul float %__element31, %__component
  %__column33 = extractvalue [4 x <4 x float>] %40, 1
  %__element34 = extractelement <4 x float> %__column33, i32 1
  %__product35 = fmul float %__element34, %__component15
  %__dotProduct36 = fadd float %__product32, %__product35
  %__column37 = extractvalue [4 x <4 x float>] %40, 2
  %__element38 = extractelement <4 x float> %__column37, i32 1
  %__product39 = fmul float %__element38, %__component16
  %__dotProduct40 = fadd float %__dotProduct36, %__product39
  %__column41 = extractvalue [4 x <4 x float>] %40, 3
  %__element42 = extractelement <4 x float> %__column41, i32 1
  %__product43 = fmul float %__element42, %__component17
  %__dotProduct44 = fadd float %__dotProduct40, %__product43
  %45 = insertelement <4 x float> %44, float %__dotProduct44, i32 1
  %__column45 = extractvalue [4 x <4 x float>] %40, 0
  %__element46 = extractelement <4 x float> %__column45, i32 2
  %__product47 = fmul float %__element46, %__component
  %__column48 = extractvalue [4 x <4 x float>] %40, 1
  %__element49 = extractelement <4 x float> %__column48, i32 2
  %__product50 = fmul float %__element49, %__component15
  %__dotProduct51 = fadd float %__product47, %__product50
  %__column52 = extractvalue [4 x <4 x float>] %40, 2
  %__element53 = extractelement <4 x float> %__column52, i32 2
  %__product54 = fmul float %__element53, %__component16
  %__dotProduct55 = fadd float %__dotProduct51, %__product54
  %__column56 = extractvalue [4 x <4 x float>] %40, 3
  %__element57 = extractelement <4 x float> %__column56, i32 2
  %__product58 = fmul float %__element57, %__component17
  %__dotProduct59 = fadd float %__dotProduct55, %__product58
  %46 = insertelement <4 x float> %45, float %__dotProduct59, i32 2
  %__column60 = extractvalue [4 x <4 x float>] %40, 0
  %__element61 = extractelement <4 x float> %__column60, i32 3
  %__product62 = fmul float %__element61, %__component
  %__column63 = extractvalue [4 x <4 x float>] %40, 1
  %__element64 = extractelement <4 x float> %__column63, i32 3
  %__product65 = fmul float %__element64, %__component15
  %__dotProduct66 = fadd float %__product62, %__product65
  %__column67 = extractvalue [4 x <4 x float>] %40, 2
  %__element68 = extractelement <4 x float> %__column67, i32 3
  %__product69 = fmul float %__element68, %__component16
  %__dotProduct70 = fadd float %__dotProduct66, %__product69
  %__column71 = extractvalue [4 x <4 x float>] %40, 3
  %__element72 = extractelement <4 x float> %__column71, i32 3
  %__product73 = fmul float %__element72, %__component17
  %__dotProduct74 = fadd float %__dotProduct70, %__product73
  %47 = insertelement <4 x float> %46, float %__dotProduct74, i32 3
  %48 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow75 = fadd <4 x float> %48, %47
  store <4 x float> %FragColor_shadow75, <4 x float>* @FragColor_shadow
  %v__76 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__76, <4 x float>* @v_shadow
  %49 = load <4 x float>* @v_shadow
  %50 = load [4 x <4 x float>] addrspace(2)* @"matrix m"
  %51 = load [4 x <4 x float>] addrspace(2)* @"matrix n"
  %52 = alloca [4 x <4 x float>]
  %53 = load [4 x <4 x float>]* %52
  %__leftColumn = extractvalue [4 x <4 x float>] %50, 0
  %__rightColumn = extractvalue [4 x <4 x float>] %51, 0
  %__column77 = fsub <4 x float> %__leftColumn, %__rightColumn
  %54 = insertvalue [4 x <4 x float>] %53, <4 x float> %__column77, 0
  %__leftColumn78 = extractvalue [4 x <4 x float>] %50, 1
  %__rightColumn79 = extractvalue [4 x <4 x float>] %51, 1
  %__column80 = fsub <4 x float> %__leftColumn78, %__rightColumn79
  %55 = insertvalue [4 x <4 x float>] %54, <4 x float> %__column80, 1
  %__leftColumn81 = extractvalue [4 x <4 x float>] %50, 2
  %__rightColumn82 = extractvalue [4 x <4 x float>] %51, 2
  %__column83 = fsub <4 x float> %__leftColumn81, %__rightColumn82
  %56 = insertvalue [4 x <4 x float>] %55, <4 x float> %__column83, 2
  %__leftColumn84 = extractvalue [4 x <4 x float>] %50, 3
  %__rightColumn85 = extractvalue [4 x <4 x float>] %51, 3
  %__column86 = fsub <4 x float> %__leftColumn84, %__rightColumn85
  %57 = insertvalue [4 x <4 x float>] %56, <4 x float> %__column86, 3
  %58 = alloca <4 x float>
  %59 = load <4 x float>* %58
  %__column87 = extractvalue [4 x <4 x float>] %57, 0
  %__dot88 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %49, <4 x float> %__column87)
  %60 = insertelement <4 x float> %59, float %__dot88, i32 0
  %__column89 = extractvalue [4 x <4 x float>] %57, 1
  %__dot90 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %49, <4 x float> %__column89)
  %61 = insertelement <4 x float> %60, float %__dot90, i32 1
  %__column91 = extractvalue [4 x <4 x float>] %57, 2
  %__dot92 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %49, <4 x float> %__column91)
  %62 = insertelement <4 x float> %61, float %__dot92, i32 2
  %__column93 = extractvalue [4 x <4 x float>] %57, 3
  %__dot94 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %49, <4 x float> %__column93)
  %63 = insertelement <4 x float> %62, float %__dot94, i32 3
  %64 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow95 = fadd <4 x float> %64, %63
  store <4 x float> %FragColor_shadow95, <4 x float>* @FragColor_shadow
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %v__96 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__96, <4 x float>* @v_shadow
  %65 = load <4 x float>* @v_shadow
  %66 = extractelement <4 x float> %65, i32 0
  %u__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__, <4 x float>* @u_shadow
  %67 = load <4 x float>* @u_shadow
  %68 = extractelement <4 x float> %67, i32 0
  %69 = fmul float %66, %68
  %v__97 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__97, <4 x float>* @v_shadow
  %70 = load <4 x float>* @v_shadow
  %71 = extractelement <4 x float> %70, i32 0
  %u__98 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__98, <4 x float>* @u_shadow
  %72 = load <4 x float>* @u_shadow
  %73 = extractelement <4 x float> %72, i32 1
  %74 = fmul float %71, %73
  %v__99 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__99, <4 x float>* @v_shadow
  %75 = load <4 x float>* @v_shadow
  %76 = extractelement <4 x float> %75, i32 0
  %u__100 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__100, <4 x float>* @u_shadow
  %77 = load <4 x float>* @u_shadow
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fmul float %76, %78
  %v__101 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__101, <4 x float>* @v_shadow
  %80 = load <4 x float>* @v_shadow
  %81 = extractelement <4 x float> %80, i32 0
  %u__102 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__102, <4 x float>* @u_shadow
  %82 = load <4 x float>* @u_shadow
  %83 = extractelement <4 x float> %82, i32 3
  %84 = fmul float %81, %83
  %v__103 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__103, <4 x float>* @v_shadow
  %85 = load <4 x float>* @v_shadow
  %86 = extractelement <4 x float> %85, i32 1
  %u__104 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__104, <4 x float>* @u_shadow
  %87 = load <4 x float>* @u_shadow
  %88 = extractelement <4 x float> %87, i32 0
  %89 = fmul float %86, %88
  %v__105 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__105, <4 x float>* @v_shadow
  %90 = load <4 x float>* @v_shadow
  %91 = extractelement <4 x float> %90, i32 1
  %u__106 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__106, <4 x float>* @u_shadow
  %92 = load <4 x float>* @u_shadow
  %93 = extractelement <4 x float> %92, i32 1
  %94 = fmul float %91, %93
  %v__107 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__107, <4 x float>* @v_shadow
  %95 = load <4 x float>* @v_shadow
  %96 = extractelement <4 x float> %95, i32 1
  %u__108 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__108, <4 x float>* @u_shadow
  %97 = load <4 x float>* @u_shadow
  %98 = extractelement <4 x float> %97, i32 2
  %99 = fmul float %96, %98
  %v__109 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__109, <4 x float>* @v_shadow
  %100 = load <4 x float>* @v_shadow
  %101 = extractelement <4 x float> %100, i32 1
  %u__110 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__110, <4 x float>* @u_shadow
  %102 = load <4 x float>* @u_shadow
  %103 = extractelement <4 x float> %102, i32 3
  %104 = fmul float %101, %103
  %v__111 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__111, <4 x float>* @v_shadow
  %105 = load <4 x float>* @v_shadow
  %106 = extractelement <4 x float> %105, i32 2
  %u__112 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__112, <4 x float>* @u_shadow
  %107 = load <4 x float>* @u_shadow
  %108 = extractelement <4 x float> %107, i32 0
  %109 = fmul float %106, %108
  %v__113 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__113, <4 x float>* @v_shadow
  %110 = load <4 x float>* @v_shadow
  %111 = extractelement <4 x float> %110, i32 2
  %u__114 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__114, <4 x float>* @u_shadow
  %112 = load <4 x float>* @u_shadow
  %113 = extractelement <4 x float> %112, i32 1
  %114 = fmul float %111, %113
  %v__115 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__115, <4 x float>* @v_shadow
  %115 = load <4 x float>* @v_shadow
  %116 = extractelement <4 x float> %115, i32 2
  %u__116 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__116, <4 x float>* @u_shadow
  %117 = load <4 x float>* @u_shadow
  %118 = extractelement <4 x float> %117, i32 2
  %119 = fmul float %116, %118
  %v__117 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__117, <4 x float>* @v_shadow
  %120 = load <4 x float>* @v_shadow
  %121 = extractelement <4 x float> %120, i32 2
  %u__118 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__118, <4 x float>* @u_shadow
  %122 = load <4 x float>* @u_shadow
  %123 = extractelement <4 x float> %122, i32 3
  %124 = fmul float %121, %123
  %v__119 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__119, <4 x float>* @v_shadow
  %125 = load <4 x float>* @v_shadow
  %126 = extractelement <4 x float> %125, i32 3
  %u__120 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__120, <4 x float>* @u_shadow
  %127 = load <4 x float>* @u_shadow
  %128 = extractelement <4 x float> %127, i32 0
  %129 = fmul float %126, %128
  %v__121 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__121, <4 x float>* @v_shadow
  %130 = load <4 x float>* @v_shadow
  %131 = extractelement <4 x float> %130, i32 3
  %u__122 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__122, <4 x float>* @u_shadow
  %132 = load <4 x float>* @u_shadow
  %133 = extractelement <4 x float> %132, i32 1
  %134 = fmul float %131, %133
  %v__123 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__123, <4 x float>* @v_shadow
  %135 = load <4 x float>* @v_shadow
  %136 = extractelement <4 x float> %135, i32 3
  %u__124 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__124, <4 x float>* @u_shadow
  %137 = load <4 x float>* @u_shadow
  %138 = extractelement <4 x float> %137, i32 2
  %139 = fmul float %136, %138
  %v__125 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__125, <4 x float>* @v_shadow
  %140 = load <4 x float>* @v_shadow
  %141 = extractelement <4 x float> %140, i32 3
  %u__126 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__126, <4 x float>* @u_shadow
  %142 = load <4 x float>* @u_shadow
  %143 = extractelement <4 x float> %142, i32 3
  %144 = fmul float %141, %143
  %145 = load [4 x <4 x float>]* %constructed127
  %__column128 = extractvalue [4 x <4 x float>] %145, 0
  %__column129 = insertelement <4 x float> %__column128, float %69, i32 0
  %__column130 = insertelement <4 x float> %__column129, float %74, i32 1
  %__column131 = insertelement <4 x float> %__column130, float %79, i32 2
  %__column132 = insertelement <4 x float> %__column131, float %84, i32 3
  %__matrix = insertvalue [4 x <4 x float>] %145, <4 x float> %__column132, 0
  %__column133 = extractvalue [4 x <4 x float>] %145, 1
  %__column134 = insertelement <4 x float> %__column133, float %89, i32 0
  %__column135 = insertelement <4 x float> %__column134, float %94, i32 1
  %__column136 = insertelement <4 x float> %__column135, float %99, i32 2
  %__column137 = insertelement <4 x float> %__column136, float %104, i32 3
  %__matrix138 = insertvalue [4 x <4 x float>] %__matrix, <4 x float> %__column137, 1
  %__column139 = extractvalue [4 x <4 x float>] %145, 2
  %__column140 = insertelement <4 x float> %__column139, float %109, i32 0
  %__column141 = insertelement <4 x float> %__column140, float %114, i32 1
  %__column142 = insertelement <4 x float> %__column141, float %119, i32 2
  %__column143 = insertelement <4 x float> %__column142, float %124, i32 3
  %__matrix144 = insertvalue [4 x <4 x float>] %__matrix138, <4 x float> %__column143, 2
  %__column145 = extractvalue [4 x <4 x float>] %145, 3
  %__column146 = insertelement <4 x float> %__column145, float %129, i32 0
  %__column147 = insertelement <4 x float> %__column146, float %134, i32 1
  %__column148 = insertelement <4 x float> %__column147, float %139, i32 2
  %__column149 = insertelement <4 x float> %__column148, float %144, i32 3
  %__matrix150 = insertvalue [4 x <4 x float>] %__matrix144, <4 x float> %__column149, 3
  store [4 x <4 x float>] %__matrix150, [4 x <4 x float>]* %"matrix m34"
  %v__151 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__151, <4 x float>* @v_shadow
  %146 = load <4 x float>* @v_shadow
  %147 = extractelement <4 x float> %146, i32 0
  %148 = load [4 x <4 x float>]* %constructed152
  %__column153 = extractvalue [4 x <4 x float>] %148, 0
  %__column154 = insertelement <4 x float> %__column153, float %147, i32 0
  %__column155 = insertelement <4 x float> %__column154, float 0.000000e+00, i32 1
  %__column156 = insertelement <4 x float> %__column155, float 0.000000e+00, i32 2
  %__column157 = insertelement <4 x float> %__column156, float 0.000000e+00, i32 3
  %__matrix158 = insertvalue [4 x <4 x float>] %148, <4 x float> %__column157, 0
  %__column159 = extractvalue [4 x <4 x float>] %148, 1
  %__column160 = insertelement <4 x float> %__column159, float 0.000000e+00, i32 0
  %__column161 = insertelement <4 x float> %__column160, float %147, i32 1
  %__column162 = insertelement <4 x float> %__column161, float 0.000000e+00, i32 2
  %__column163 = insertelement <4 x float> %__column162, float 0.000000e+00, i32 3
  %__matrix164 = insertvalue [4 x <4 x float>] %__matrix158, <4 x float> %__column163, 1
  %__column165 = extractvalue [4 x <4 x float>] %148, 2
  %__column166 = insertelement <4 x float> %__column165, float 0.000000e+00, i32 0
  %__column167 = insertelement <4 x float> %__column166, float 0.000000e+00, i32 1
  %__column168 = insertelement <4 x float> %__column167, float %147, i32 2
  %__column169 = insertelement <4 x float> %__column168, float 0.000000e+00, i32 3
  %__matrix170 = insertvalue [4 x <4 x float>] %__matrix164, <4 x float> %__column169, 2
  %__column171 = extractvalue [4 x <4 x float>] %148, 3
  %__column172 = insertelement <4 x float> %__column171, float 0.000000e+00, i32 0
  %__column173 = insertelement <4 x float> %__column172, float 0.000000e+00, i32 1
  %__column174 = insertelement <4 x float> %__column173, float 0.000000e+00, i32 2
  %__column175 = insertelement <4 x float> %__column174, float %147, i32 3
  %__matrix176 = insertvalue [4 x <4 x float>] %__matrix170, <4 x float> %__column175, 3
  %149 = load [4 x <4 x float>]* %"matrix m34"
  %150 = alloca [4 x <4 x float>]
  %151 = load [4 x <4 x float>]* %150
  %__leftColumn177 = extractvalue [4 x <4 x float>] %149, 0
  %__rightColumn178 = extractvalue [4 x <4 x float>] %__matrix176, 0
  %__column179 = fadd <4 x float> %__leftColumn177, %__rightColumn178
  %152 = insertvalue [4 x <4 x float>] %151, <4 x float> %__column179, 0
  %__leftColumn180 = extractvalue [4 x <4 x float>] %149, 1
  %__rightColumn181 = extractvalue [4 x <4 x float>] %__matrix176, 1
  %__column182 = fadd <4 x float> %__leftColumn180, %__rightColumn181
  %153 = insertvalue [4 x <4 x float>] %152, <4 x float> %__column182, 1
  %__leftColumn183 = extractvalue [4 x <4 x float>] %149, 2
  %__rightColumn184 = extractvalue [4 x <4 x float>] %__matrix176, 2
  %__column185 = fadd <4 x float> %__leftColumn183, %__rightColumn184
  %154 = insertvalue [4 x <4 x float>] %153, <4 x float> %__column185, 2
  %__leftColumn186 = extractvalue [4 x <4 x float>] %149, 3
  %__rightColumn187 = extractvalue [4 x <4 x float>] %__matrix176, 3
  %__column188 = fadd <4 x float> %__leftColumn186, %__rightColumn187
  %"matrix m34189" = insertvalue [4 x <4 x float>] %154, <4 x float> %__column188, 3
  store [4 x <4 x float>] %"matrix m34189", [4 x <4 x float>]* %"matrix m34"
  %u__190 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__190, <4 x float>* @u_shadow
  %155 = load <4 x float>* @u_shadow
  %u__191 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__191, <4 x float>* @u_shadow
  %156 = load <4 x float>* @u_shadow
  %157 = extractelement <4 x float> %156, i32 0
  %u__192 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__192, <4 x float>* @u_shadow
  %158 = load <4 x float>* @u_shadow
  %u__193 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__193, <4 x float>* @u_shadow
  %159 = load <4 x float>* @u_shadow
  %160 = extractelement <4 x float> %159, i32 0
  %u__194 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__194, <4 x float>* @u_shadow
  %161 = load <4 x float>* @u_shadow
  %u__195 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__195, <4 x float>* @u_shadow
  %162 = load <4 x float>* @u_shadow
  %163 = extractelement <4 x float> %162, i32 0
  %u__196 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__196, <4 x float>* @u_shadow
  %164 = load <4 x float>* @u_shadow
  %165 = extractelement <4 x float> %164, i32 0
  %166 = load [4 x <4 x float>]* %constructed197
  %__element198 = extractelement <4 x float> %155, i32 0
  %__element199 = extractelement <4 x float> %155, i32 1
  %__element200 = extractelement <4 x float> %155, i32 2
  %__element201 = extractelement <4 x float> %155, i32 3
  %__element202 = extractelement <4 x float> %158, i32 0
  %__element203 = extractelement <4 x float> %158, i32 1
  %__element204 = extractelement <4 x float> %158, i32 2
  %__element205 = extractelement <4 x float> %158, i32 3
  %__element206 = extractelement <4 x float> %161, i32 0
  %__element207 = extractelement <4 x float> %161, i32 1
  %__element208 = extractelement <4 x float> %161, i32 2
  %__element209 = extractelement <4 x float> %161, i32 3
  %__column210 = extractvalue [4 x <4 x float>] %166, 0
  %__column211 = insertelement <4 x float> %__column210, float %__element198, i32 0
  %__column212 = insertelement <4 x float> %__column211, float %__element199, i32 1
  %__column213 = insertelement <4 x float> %__column212, float %__element200, i32 2
  %__column214 = insertelement <4 x float> %__column213, float %__element201, i32 3
  %__matrix215 = insertvalue [4 x <4 x float>] %166, <4 x float> %__column214, 0
  %__column216 = extractvalue [4 x <4 x float>] %166, 1
  %__column217 = insertelement <4 x float> %__column216, float %157, i32 0
  %__column218 = insertelement <4 x float> %__column217, float %__element202, i32 1
  %__column219 = insertelement <4 x float> %__column218, float %__element203, i32 2
  %__column220 = insertelement <4 x float> %__column219, float %__element204, i32 3
  %__matrix221 = insertvalue [4 x <4 x float>] %__matrix215, <4 x float> %__column220, 1
  %__column222 = extractvalue [4 x <4 x float>] %166, 2
  %__column223 = insertelement <4 x float> %__column222, float %__element205, i32 0
  %__column224 = insertelement <4 x float> %__column223, float %160, i32 1
  %__column225 = insertelement <4 x float> %__column224, float %__element206, i32 2
  %__column226 = insertelement <4 x float> %__column225, float %__element207, i32 3
  %__matrix227 = insertvalue [4 x <4 x float>] %__matrix221, <4 x float> %__column226, 2
  %__column228 = extractvalue [4 x <4 x float>] %166, 3
  %__column229 = insertelement <4 x float> %__column228, float %__element208, i32 0
  %__column230 = insertelement <4 x float> %__column229, float %__element209, i32 1
  %__column231 = insertelement <4 x float> %__column230, float %163, i32 2
  %__column232 = insertelement <4 x float> %__column231, float %165, i32 3
  %__matrix233 = insertvalue [4 x <4 x float>] %__matrix227, <4 x float> %__column232, 3
  %167 = load [4 x <4 x float>]* %"matrix m34"
  %168 = alloca [4 x <4 x float>]
  %169 = load [4 x <4 x float>]* %168
  %__leftColumn234 = extractvalue [4 x <4 x float>] %167, 0
  %__rightColumn235 = extractvalue [4 x <4 x float>] %__matrix233, 0
  %__column236 = fadd <4 x float> %__leftColumn234, %__rightColumn235
  %170 = insertvalue [4 x <4 x float>] %169, <4 x float> %__column236, 0
  %__leftColumn237 = extractvalue [4 x <4 x float>] %167, 1
  %__rightColumn238 = extractvalue [4 x <4 x float>] %__matrix233, 1
  %__column239 = fadd <4 x float> %__leftColumn237, %__rightColumn238
  %171 = insertvalue [4 x <4 x float>] %170, <4 x float> %__column239, 1
  %__leftColumn240 = extractvalue [4 x <4 x float>] %167, 2
  %__rightColumn241 = extractvalue [4 x <4 x float>] %__matrix233, 2
  %__column242 = fadd <4 x float> %__leftColumn240, %__rightColumn241
  %172 = insertvalue [4 x <4 x float>] %171, <4 x float> %__column242, 2
  %__leftColumn243 = extractvalue [4 x <4 x float>] %167, 3
  %__rightColumn244 = extractvalue [4 x <4 x float>] %__matrix233, 3
  %__column245 = fadd <4 x float> %__leftColumn243, %__rightColumn244
  %"matrix m34246" = insertvalue [4 x <4 x float>] %172, <4 x float> %__column245, 3
  store [4 x <4 x float>] %"matrix m34246", [4 x <4 x float>]* %"matrix m34"
  %173 = load [4 x <4 x float>]* %"matrix m34"
  %174 = load [4 x <4 x float>] addrspace(2)* @"matrix un34"
  %element1247 = extractvalue [4 x <4 x float>] %173, 0
  %element2248 = extractvalue [4 x <4 x float>] %174, 0
  %175 = fcmp oeq <4 x float> %element1247, %element2248
  %176 = call i1 @llvm.gla.all.v4i1(<4 x i1> %175)
  %element1249 = extractvalue [4 x <4 x float>] %173, 1
  %element2250 = extractvalue [4 x <4 x float>] %174, 1
  %177 = fcmp oeq <4 x float> %element1249, %element2250
  %178 = call i1 @llvm.gla.all.v4i1(<4 x i1> %177)
  %179 = and i1 %176, %178
  %element1251 = extractvalue [4 x <4 x float>] %173, 2
  %element2252 = extractvalue [4 x <4 x float>] %174, 2
  %180 = fcmp oeq <4 x float> %element1251, %element2252
  %181 = call i1 @llvm.gla.all.v4i1(<4 x i1> %180)
  %182 = and i1 %179, %181
  %element1253 = extractvalue [4 x <4 x float>] %173, 3
  %element2254 = extractvalue [4 x <4 x float>] %174, 3
  %183 = fcmp oeq <4 x float> %element1253, %element2254
  %184 = call i1 @llvm.gla.all.v4i1(<4 x i1> %183)
  %185 = and i1 %182, %184
  br i1 %185, label %then255, label %else322

then255:                                          ; preds = %ifmerge
  %186 = load [4 x <4 x float>]* %"matrix m34"
  %u__256 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  store <4 x float> %u__256, <4 x float>* @u_shadow
  %187 = load <4 x float>* @u_shadow
  %188 = alloca <4 x float>
  %189 = load <4 x float>* %188
  %__component257 = extractelement <4 x float> %187, i32 0
  %__component258 = extractelement <4 x float> %187, i32 1
  %__component259 = extractelement <4 x float> %187, i32 2
  %__component260 = extractelement <4 x float> %187, i32 3
  %__column261 = extractvalue [4 x <4 x float>] %186, 0
  %__element262 = extractelement <4 x float> %__column261, i32 0
  %__product263 = fmul float %__element262, %__component257
  %__column264 = extractvalue [4 x <4 x float>] %186, 1
  %__element265 = extractelement <4 x float> %__column264, i32 0
  %__product266 = fmul float %__element265, %__component258
  %__dotProduct267 = fadd float %__product263, %__product266
  %__column268 = extractvalue [4 x <4 x float>] %186, 2
  %__element269 = extractelement <4 x float> %__column268, i32 0
  %__product270 = fmul float %__element269, %__component259
  %__dotProduct271 = fadd float %__dotProduct267, %__product270
  %__column272 = extractvalue [4 x <4 x float>] %186, 3
  %__element273 = extractelement <4 x float> %__column272, i32 0
  %__product274 = fmul float %__element273, %__component260
  %__dotProduct275 = fadd float %__dotProduct271, %__product274
  %190 = insertelement <4 x float> %189, float %__dotProduct275, i32 0
  %__column276 = extractvalue [4 x <4 x float>] %186, 0
  %__element277 = extractelement <4 x float> %__column276, i32 1
  %__product278 = fmul float %__element277, %__component257
  %__column279 = extractvalue [4 x <4 x float>] %186, 1
  %__element280 = extractelement <4 x float> %__column279, i32 1
  %__product281 = fmul float %__element280, %__component258
  %__dotProduct282 = fadd float %__product278, %__product281
  %__column283 = extractvalue [4 x <4 x float>] %186, 2
  %__element284 = extractelement <4 x float> %__column283, i32 1
  %__product285 = fmul float %__element284, %__component259
  %__dotProduct286 = fadd float %__dotProduct282, %__product285
  %__column287 = extractvalue [4 x <4 x float>] %186, 3
  %__element288 = extractelement <4 x float> %__column287, i32 1
  %__product289 = fmul float %__element288, %__component260
  %__dotProduct290 = fadd float %__dotProduct286, %__product289
  %191 = insertelement <4 x float> %190, float %__dotProduct290, i32 1
  %__column291 = extractvalue [4 x <4 x float>] %186, 0
  %__element292 = extractelement <4 x float> %__column291, i32 2
  %__product293 = fmul float %__element292, %__component257
  %__column294 = extractvalue [4 x <4 x float>] %186, 1
  %__element295 = extractelement <4 x float> %__column294, i32 2
  %__product296 = fmul float %__element295, %__component258
  %__dotProduct297 = fadd float %__product293, %__product296
  %__column298 = extractvalue [4 x <4 x float>] %186, 2
  %__element299 = extractelement <4 x float> %__column298, i32 2
  %__product300 = fmul float %__element299, %__component259
  %__dotProduct301 = fadd float %__dotProduct297, %__product300
  %__column302 = extractvalue [4 x <4 x float>] %186, 3
  %__element303 = extractelement <4 x float> %__column302, i32 2
  %__product304 = fmul float %__element303, %__component260
  %__dotProduct305 = fadd float %__dotProduct301, %__product304
  %192 = insertelement <4 x float> %191, float %__dotProduct305, i32 2
  %__column306 = extractvalue [4 x <4 x float>] %186, 0
  %__element307 = extractelement <4 x float> %__column306, i32 3
  %__product308 = fmul float %__element307, %__component257
  %__column309 = extractvalue [4 x <4 x float>] %186, 1
  %__element310 = extractelement <4 x float> %__column309, i32 3
  %__product311 = fmul float %__element310, %__component258
  %__dotProduct312 = fadd float %__product308, %__product311
  %__column313 = extractvalue [4 x <4 x float>] %186, 2
  %__element314 = extractelement <4 x float> %__column313, i32 3
  %__product315 = fmul float %__element314, %__component259
  %__dotProduct316 = fadd float %__dotProduct312, %__product315
  %__column317 = extractvalue [4 x <4 x float>] %186, 3
  %__element318 = extractelement <4 x float> %__column317, i32 3
  %__product319 = fmul float %__element318, %__component260
  %__dotProduct320 = fadd float %__dotProduct316, %__product319
  %193 = insertelement <4 x float> %192, float %__dotProduct320, i32 3
  %194 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow321 = fadd <4 x float> %194, %193
  store <4 x float> %FragColor_shadow321, <4 x float>* @FragColor_shadow
  br label %ifmerge715

else322:                                          ; preds = %ifmerge
  %195 = load [4 x <4 x float>] addrspace(2)* @"matrix un34"
  %196 = load [4 x <4 x float>] addrspace(2)* @"matrix um43"
  %197 = alloca [4 x <4 x float>]
  %__resultMatrix = load [4 x <4 x float>]* %197
  %198 = alloca <4 x float>
  %__tempColumn = load <4 x float>* %198
  %__rightColumn323 = extractvalue [4 x <4 x float>] %196, 0
  %__leftColumn324 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp = extractelement <4 x float> %__leftColumn324, i32 0
  %__rightComp = extractelement <4 x float> %__rightColumn323, i32 0
  %__product325 = fmul float %__leftComp, %__rightComp
  %__leftColumn326 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp327 = extractelement <4 x float> %__leftColumn326, i32 0
  %__rightComp328 = extractelement <4 x float> %__rightColumn323, i32 1
  %__product329 = fmul float %__leftComp327, %__rightComp328
  %__dotProduct330 = fadd float %__product325, %__product329
  %__leftColumn331 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp332 = extractelement <4 x float> %__leftColumn331, i32 0
  %__rightComp333 = extractelement <4 x float> %__rightColumn323, i32 2
  %__product334 = fmul float %__leftComp332, %__rightComp333
  %__dotProduct335 = fadd float %__dotProduct330, %__product334
  %__leftColumn336 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp337 = extractelement <4 x float> %__leftColumn336, i32 0
  %__rightComp338 = extractelement <4 x float> %__rightColumn323, i32 3
  %__product339 = fmul float %__leftComp337, %__rightComp338
  %__dotProduct340 = fadd float %__dotProduct335, %__product339
  %__column341 = insertelement <4 x float> %__tempColumn, float %__dotProduct340, i32 0
  %__leftColumn342 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp343 = extractelement <4 x float> %__leftColumn342, i32 1
  %__rightComp344 = extractelement <4 x float> %__rightColumn323, i32 0
  %__product345 = fmul float %__leftComp343, %__rightComp344
  %__leftColumn346 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp347 = extractelement <4 x float> %__leftColumn346, i32 1
  %__rightComp348 = extractelement <4 x float> %__rightColumn323, i32 1
  %__product349 = fmul float %__leftComp347, %__rightComp348
  %__dotProduct350 = fadd float %__product345, %__product349
  %__leftColumn351 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp352 = extractelement <4 x float> %__leftColumn351, i32 1
  %__rightComp353 = extractelement <4 x float> %__rightColumn323, i32 2
  %__product354 = fmul float %__leftComp352, %__rightComp353
  %__dotProduct355 = fadd float %__dotProduct350, %__product354
  %__leftColumn356 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp357 = extractelement <4 x float> %__leftColumn356, i32 1
  %__rightComp358 = extractelement <4 x float> %__rightColumn323, i32 3
  %__product359 = fmul float %__leftComp357, %__rightComp358
  %__dotProduct360 = fadd float %__dotProduct355, %__product359
  %__column361 = insertelement <4 x float> %__column341, float %__dotProduct360, i32 1
  %__leftColumn362 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp363 = extractelement <4 x float> %__leftColumn362, i32 2
  %__rightComp364 = extractelement <4 x float> %__rightColumn323, i32 0
  %__product365 = fmul float %__leftComp363, %__rightComp364
  %__leftColumn366 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp367 = extractelement <4 x float> %__leftColumn366, i32 2
  %__rightComp368 = extractelement <4 x float> %__rightColumn323, i32 1
  %__product369 = fmul float %__leftComp367, %__rightComp368
  %__dotProduct370 = fadd float %__product365, %__product369
  %__leftColumn371 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp372 = extractelement <4 x float> %__leftColumn371, i32 2
  %__rightComp373 = extractelement <4 x float> %__rightColumn323, i32 2
  %__product374 = fmul float %__leftComp372, %__rightComp373
  %__dotProduct375 = fadd float %__dotProduct370, %__product374
  %__leftColumn376 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp377 = extractelement <4 x float> %__leftColumn376, i32 2
  %__rightComp378 = extractelement <4 x float> %__rightColumn323, i32 3
  %__product379 = fmul float %__leftComp377, %__rightComp378
  %__dotProduct380 = fadd float %__dotProduct375, %__product379
  %__column381 = insertelement <4 x float> %__column361, float %__dotProduct380, i32 2
  %__leftColumn382 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp383 = extractelement <4 x float> %__leftColumn382, i32 3
  %__rightComp384 = extractelement <4 x float> %__rightColumn323, i32 0
  %__product385 = fmul float %__leftComp383, %__rightComp384
  %__leftColumn386 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp387 = extractelement <4 x float> %__leftColumn386, i32 3
  %__rightComp388 = extractelement <4 x float> %__rightColumn323, i32 1
  %__product389 = fmul float %__leftComp387, %__rightComp388
  %__dotProduct390 = fadd float %__product385, %__product389
  %__leftColumn391 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp392 = extractelement <4 x float> %__leftColumn391, i32 3
  %__rightComp393 = extractelement <4 x float> %__rightColumn323, i32 2
  %__product394 = fmul float %__leftComp392, %__rightComp393
  %__dotProduct395 = fadd float %__dotProduct390, %__product394
  %__leftColumn396 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp397 = extractelement <4 x float> %__leftColumn396, i32 3
  %__rightComp398 = extractelement <4 x float> %__rightColumn323, i32 3
  %__product399 = fmul float %__leftComp397, %__rightComp398
  %__dotProduct400 = fadd float %__dotProduct395, %__product399
  %__column401 = insertelement <4 x float> %__column381, float %__dotProduct400, i32 3
  %__resultMatrix402 = insertvalue [4 x <4 x float>] %__resultMatrix, <4 x float> %__column401, 0
  %__rightColumn403 = extractvalue [4 x <4 x float>] %196, 1
  %__leftColumn404 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp405 = extractelement <4 x float> %__leftColumn404, i32 0
  %__rightComp406 = extractelement <4 x float> %__rightColumn403, i32 0
  %__product407 = fmul float %__leftComp405, %__rightComp406
  %__leftColumn408 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp409 = extractelement <4 x float> %__leftColumn408, i32 0
  %__rightComp410 = extractelement <4 x float> %__rightColumn403, i32 1
  %__product411 = fmul float %__leftComp409, %__rightComp410
  %__dotProduct412 = fadd float %__product407, %__product411
  %__leftColumn413 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp414 = extractelement <4 x float> %__leftColumn413, i32 0
  %__rightComp415 = extractelement <4 x float> %__rightColumn403, i32 2
  %__product416 = fmul float %__leftComp414, %__rightComp415
  %__dotProduct417 = fadd float %__dotProduct412, %__product416
  %__leftColumn418 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp419 = extractelement <4 x float> %__leftColumn418, i32 0
  %__rightComp420 = extractelement <4 x float> %__rightColumn403, i32 3
  %__product421 = fmul float %__leftComp419, %__rightComp420
  %__dotProduct422 = fadd float %__dotProduct417, %__product421
  %__column423 = insertelement <4 x float> %__column401, float %__dotProduct422, i32 0
  %__leftColumn424 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp425 = extractelement <4 x float> %__leftColumn424, i32 1
  %__rightComp426 = extractelement <4 x float> %__rightColumn403, i32 0
  %__product427 = fmul float %__leftComp425, %__rightComp426
  %__leftColumn428 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp429 = extractelement <4 x float> %__leftColumn428, i32 1
  %__rightComp430 = extractelement <4 x float> %__rightColumn403, i32 1
  %__product431 = fmul float %__leftComp429, %__rightComp430
  %__dotProduct432 = fadd float %__product427, %__product431
  %__leftColumn433 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp434 = extractelement <4 x float> %__leftColumn433, i32 1
  %__rightComp435 = extractelement <4 x float> %__rightColumn403, i32 2
  %__product436 = fmul float %__leftComp434, %__rightComp435
  %__dotProduct437 = fadd float %__dotProduct432, %__product436
  %__leftColumn438 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp439 = extractelement <4 x float> %__leftColumn438, i32 1
  %__rightComp440 = extractelement <4 x float> %__rightColumn403, i32 3
  %__product441 = fmul float %__leftComp439, %__rightComp440
  %__dotProduct442 = fadd float %__dotProduct437, %__product441
  %__column443 = insertelement <4 x float> %__column423, float %__dotProduct442, i32 1
  %__leftColumn444 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp445 = extractelement <4 x float> %__leftColumn444, i32 2
  %__rightComp446 = extractelement <4 x float> %__rightColumn403, i32 0
  %__product447 = fmul float %__leftComp445, %__rightComp446
  %__leftColumn448 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp449 = extractelement <4 x float> %__leftColumn448, i32 2
  %__rightComp450 = extractelement <4 x float> %__rightColumn403, i32 1
  %__product451 = fmul float %__leftComp449, %__rightComp450
  %__dotProduct452 = fadd float %__product447, %__product451
  %__leftColumn453 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp454 = extractelement <4 x float> %__leftColumn453, i32 2
  %__rightComp455 = extractelement <4 x float> %__rightColumn403, i32 2
  %__product456 = fmul float %__leftComp454, %__rightComp455
  %__dotProduct457 = fadd float %__dotProduct452, %__product456
  %__leftColumn458 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp459 = extractelement <4 x float> %__leftColumn458, i32 2
  %__rightComp460 = extractelement <4 x float> %__rightColumn403, i32 3
  %__product461 = fmul float %__leftComp459, %__rightComp460
  %__dotProduct462 = fadd float %__dotProduct457, %__product461
  %__column463 = insertelement <4 x float> %__column443, float %__dotProduct462, i32 2
  %__leftColumn464 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp465 = extractelement <4 x float> %__leftColumn464, i32 3
  %__rightComp466 = extractelement <4 x float> %__rightColumn403, i32 0
  %__product467 = fmul float %__leftComp465, %__rightComp466
  %__leftColumn468 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp469 = extractelement <4 x float> %__leftColumn468, i32 3
  %__rightComp470 = extractelement <4 x float> %__rightColumn403, i32 1
  %__product471 = fmul float %__leftComp469, %__rightComp470
  %__dotProduct472 = fadd float %__product467, %__product471
  %__leftColumn473 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp474 = extractelement <4 x float> %__leftColumn473, i32 3
  %__rightComp475 = extractelement <4 x float> %__rightColumn403, i32 2
  %__product476 = fmul float %__leftComp474, %__rightComp475
  %__dotProduct477 = fadd float %__dotProduct472, %__product476
  %__leftColumn478 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp479 = extractelement <4 x float> %__leftColumn478, i32 3
  %__rightComp480 = extractelement <4 x float> %__rightColumn403, i32 3
  %__product481 = fmul float %__leftComp479, %__rightComp480
  %__dotProduct482 = fadd float %__dotProduct477, %__product481
  %__column483 = insertelement <4 x float> %__column463, float %__dotProduct482, i32 3
  %__resultMatrix484 = insertvalue [4 x <4 x float>] %__resultMatrix402, <4 x float> %__column483, 1
  %__rightColumn485 = extractvalue [4 x <4 x float>] %196, 2
  %__leftColumn486 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp487 = extractelement <4 x float> %__leftColumn486, i32 0
  %__rightComp488 = extractelement <4 x float> %__rightColumn485, i32 0
  %__product489 = fmul float %__leftComp487, %__rightComp488
  %__leftColumn490 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp491 = extractelement <4 x float> %__leftColumn490, i32 0
  %__rightComp492 = extractelement <4 x float> %__rightColumn485, i32 1
  %__product493 = fmul float %__leftComp491, %__rightComp492
  %__dotProduct494 = fadd float %__product489, %__product493
  %__leftColumn495 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp496 = extractelement <4 x float> %__leftColumn495, i32 0
  %__rightComp497 = extractelement <4 x float> %__rightColumn485, i32 2
  %__product498 = fmul float %__leftComp496, %__rightComp497
  %__dotProduct499 = fadd float %__dotProduct494, %__product498
  %__leftColumn500 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp501 = extractelement <4 x float> %__leftColumn500, i32 0
  %__rightComp502 = extractelement <4 x float> %__rightColumn485, i32 3
  %__product503 = fmul float %__leftComp501, %__rightComp502
  %__dotProduct504 = fadd float %__dotProduct499, %__product503
  %__column505 = insertelement <4 x float> %__column483, float %__dotProduct504, i32 0
  %__leftColumn506 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp507 = extractelement <4 x float> %__leftColumn506, i32 1
  %__rightComp508 = extractelement <4 x float> %__rightColumn485, i32 0
  %__product509 = fmul float %__leftComp507, %__rightComp508
  %__leftColumn510 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp511 = extractelement <4 x float> %__leftColumn510, i32 1
  %__rightComp512 = extractelement <4 x float> %__rightColumn485, i32 1
  %__product513 = fmul float %__leftComp511, %__rightComp512
  %__dotProduct514 = fadd float %__product509, %__product513
  %__leftColumn515 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp516 = extractelement <4 x float> %__leftColumn515, i32 1
  %__rightComp517 = extractelement <4 x float> %__rightColumn485, i32 2
  %__product518 = fmul float %__leftComp516, %__rightComp517
  %__dotProduct519 = fadd float %__dotProduct514, %__product518
  %__leftColumn520 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp521 = extractelement <4 x float> %__leftColumn520, i32 1
  %__rightComp522 = extractelement <4 x float> %__rightColumn485, i32 3
  %__product523 = fmul float %__leftComp521, %__rightComp522
  %__dotProduct524 = fadd float %__dotProduct519, %__product523
  %__column525 = insertelement <4 x float> %__column505, float %__dotProduct524, i32 1
  %__leftColumn526 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp527 = extractelement <4 x float> %__leftColumn526, i32 2
  %__rightComp528 = extractelement <4 x float> %__rightColumn485, i32 0
  %__product529 = fmul float %__leftComp527, %__rightComp528
  %__leftColumn530 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp531 = extractelement <4 x float> %__leftColumn530, i32 2
  %__rightComp532 = extractelement <4 x float> %__rightColumn485, i32 1
  %__product533 = fmul float %__leftComp531, %__rightComp532
  %__dotProduct534 = fadd float %__product529, %__product533
  %__leftColumn535 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp536 = extractelement <4 x float> %__leftColumn535, i32 2
  %__rightComp537 = extractelement <4 x float> %__rightColumn485, i32 2
  %__product538 = fmul float %__leftComp536, %__rightComp537
  %__dotProduct539 = fadd float %__dotProduct534, %__product538
  %__leftColumn540 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp541 = extractelement <4 x float> %__leftColumn540, i32 2
  %__rightComp542 = extractelement <4 x float> %__rightColumn485, i32 3
  %__product543 = fmul float %__leftComp541, %__rightComp542
  %__dotProduct544 = fadd float %__dotProduct539, %__product543
  %__column545 = insertelement <4 x float> %__column525, float %__dotProduct544, i32 2
  %__leftColumn546 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp547 = extractelement <4 x float> %__leftColumn546, i32 3
  %__rightComp548 = extractelement <4 x float> %__rightColumn485, i32 0
  %__product549 = fmul float %__leftComp547, %__rightComp548
  %__leftColumn550 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp551 = extractelement <4 x float> %__leftColumn550, i32 3
  %__rightComp552 = extractelement <4 x float> %__rightColumn485, i32 1
  %__product553 = fmul float %__leftComp551, %__rightComp552
  %__dotProduct554 = fadd float %__product549, %__product553
  %__leftColumn555 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp556 = extractelement <4 x float> %__leftColumn555, i32 3
  %__rightComp557 = extractelement <4 x float> %__rightColumn485, i32 2
  %__product558 = fmul float %__leftComp556, %__rightComp557
  %__dotProduct559 = fadd float %__dotProduct554, %__product558
  %__leftColumn560 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp561 = extractelement <4 x float> %__leftColumn560, i32 3
  %__rightComp562 = extractelement <4 x float> %__rightColumn485, i32 3
  %__product563 = fmul float %__leftComp561, %__rightComp562
  %__dotProduct564 = fadd float %__dotProduct559, %__product563
  %__column565 = insertelement <4 x float> %__column545, float %__dotProduct564, i32 3
  %__resultMatrix566 = insertvalue [4 x <4 x float>] %__resultMatrix484, <4 x float> %__column565, 2
  %__rightColumn567 = extractvalue [4 x <4 x float>] %196, 3
  %__leftColumn568 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp569 = extractelement <4 x float> %__leftColumn568, i32 0
  %__rightComp570 = extractelement <4 x float> %__rightColumn567, i32 0
  %__product571 = fmul float %__leftComp569, %__rightComp570
  %__leftColumn572 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp573 = extractelement <4 x float> %__leftColumn572, i32 0
  %__rightComp574 = extractelement <4 x float> %__rightColumn567, i32 1
  %__product575 = fmul float %__leftComp573, %__rightComp574
  %__dotProduct576 = fadd float %__product571, %__product575
  %__leftColumn577 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp578 = extractelement <4 x float> %__leftColumn577, i32 0
  %__rightComp579 = extractelement <4 x float> %__rightColumn567, i32 2
  %__product580 = fmul float %__leftComp578, %__rightComp579
  %__dotProduct581 = fadd float %__dotProduct576, %__product580
  %__leftColumn582 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp583 = extractelement <4 x float> %__leftColumn582, i32 0
  %__rightComp584 = extractelement <4 x float> %__rightColumn567, i32 3
  %__product585 = fmul float %__leftComp583, %__rightComp584
  %__dotProduct586 = fadd float %__dotProduct581, %__product585
  %__column587 = insertelement <4 x float> %__column565, float %__dotProduct586, i32 0
  %__leftColumn588 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp589 = extractelement <4 x float> %__leftColumn588, i32 1
  %__rightComp590 = extractelement <4 x float> %__rightColumn567, i32 0
  %__product591 = fmul float %__leftComp589, %__rightComp590
  %__leftColumn592 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp593 = extractelement <4 x float> %__leftColumn592, i32 1
  %__rightComp594 = extractelement <4 x float> %__rightColumn567, i32 1
  %__product595 = fmul float %__leftComp593, %__rightComp594
  %__dotProduct596 = fadd float %__product591, %__product595
  %__leftColumn597 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp598 = extractelement <4 x float> %__leftColumn597, i32 1
  %__rightComp599 = extractelement <4 x float> %__rightColumn567, i32 2
  %__product600 = fmul float %__leftComp598, %__rightComp599
  %__dotProduct601 = fadd float %__dotProduct596, %__product600
  %__leftColumn602 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp603 = extractelement <4 x float> %__leftColumn602, i32 1
  %__rightComp604 = extractelement <4 x float> %__rightColumn567, i32 3
  %__product605 = fmul float %__leftComp603, %__rightComp604
  %__dotProduct606 = fadd float %__dotProduct601, %__product605
  %__column607 = insertelement <4 x float> %__column587, float %__dotProduct606, i32 1
  %__leftColumn608 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp609 = extractelement <4 x float> %__leftColumn608, i32 2
  %__rightComp610 = extractelement <4 x float> %__rightColumn567, i32 0
  %__product611 = fmul float %__leftComp609, %__rightComp610
  %__leftColumn612 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp613 = extractelement <4 x float> %__leftColumn612, i32 2
  %__rightComp614 = extractelement <4 x float> %__rightColumn567, i32 1
  %__product615 = fmul float %__leftComp613, %__rightComp614
  %__dotProduct616 = fadd float %__product611, %__product615
  %__leftColumn617 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp618 = extractelement <4 x float> %__leftColumn617, i32 2
  %__rightComp619 = extractelement <4 x float> %__rightColumn567, i32 2
  %__product620 = fmul float %__leftComp618, %__rightComp619
  %__dotProduct621 = fadd float %__dotProduct616, %__product620
  %__leftColumn622 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp623 = extractelement <4 x float> %__leftColumn622, i32 2
  %__rightComp624 = extractelement <4 x float> %__rightColumn567, i32 3
  %__product625 = fmul float %__leftComp623, %__rightComp624
  %__dotProduct626 = fadd float %__dotProduct621, %__product625
  %__column627 = insertelement <4 x float> %__column607, float %__dotProduct626, i32 2
  %__leftColumn628 = extractvalue [4 x <4 x float>] %195, 0
  %__leftComp629 = extractelement <4 x float> %__leftColumn628, i32 3
  %__rightComp630 = extractelement <4 x float> %__rightColumn567, i32 0
  %__product631 = fmul float %__leftComp629, %__rightComp630
  %__leftColumn632 = extractvalue [4 x <4 x float>] %195, 1
  %__leftComp633 = extractelement <4 x float> %__leftColumn632, i32 3
  %__rightComp634 = extractelement <4 x float> %__rightColumn567, i32 1
  %__product635 = fmul float %__leftComp633, %__rightComp634
  %__dotProduct636 = fadd float %__product631, %__product635
  %__leftColumn637 = extractvalue [4 x <4 x float>] %195, 2
  %__leftComp638 = extractelement <4 x float> %__leftColumn637, i32 3
  %__rightComp639 = extractelement <4 x float> %__rightColumn567, i32 2
  %__product640 = fmul float %__leftComp638, %__rightComp639
  %__dotProduct641 = fadd float %__dotProduct636, %__product640
  %__leftColumn642 = extractvalue [4 x <4 x float>] %195, 3
  %__leftComp643 = extractelement <4 x float> %__leftColumn642, i32 3
  %__rightComp644 = extractelement <4 x float> %__rightColumn567, i32 3
  %__product645 = fmul float %__leftComp643, %__rightComp644
  %__dotProduct646 = fadd float %__dotProduct641, %__product645
  %__column647 = insertelement <4 x float> %__column627, float %__dotProduct646, i32 3
  %__resultMatrix648 = insertvalue [4 x <4 x float>] %__resultMatrix566, <4 x float> %__column647, 3
  %v__649 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  store <4 x float> %v__649, <4 x float>* @v_shadow
  %199 = load <4 x float>* @v_shadow
  %200 = alloca <4 x float>
  %201 = load <4 x float>* %200
  %__component650 = extractelement <4 x float> %199, i32 0
  %__component651 = extractelement <4 x float> %199, i32 1
  %__component652 = extractelement <4 x float> %199, i32 2
  %__component653 = extractelement <4 x float> %199, i32 3
  %__column654 = extractvalue [4 x <4 x float>] %__resultMatrix648, 0
  %__element655 = extractelement <4 x float> %__column654, i32 0
  %__product656 = fmul float %__element655, %__component650
  %__column657 = extractvalue [4 x <4 x float>] %__resultMatrix648, 1
  %__element658 = extractelement <4 x float> %__column657, i32 0
  %__product659 = fmul float %__element658, %__component651
  %__dotProduct660 = fadd float %__product656, %__product659
  %__column661 = extractvalue [4 x <4 x float>] %__resultMatrix648, 2
  %__element662 = extractelement <4 x float> %__column661, i32 0
  %__product663 = fmul float %__element662, %__component652
  %__dotProduct664 = fadd float %__dotProduct660, %__product663
  %__column665 = extractvalue [4 x <4 x float>] %__resultMatrix648, 3
  %__element666 = extractelement <4 x float> %__column665, i32 0
  %__product667 = fmul float %__element666, %__component653
  %__dotProduct668 = fadd float %__dotProduct664, %__product667
  %202 = insertelement <4 x float> %201, float %__dotProduct668, i32 0
  %__column669 = extractvalue [4 x <4 x float>] %__resultMatrix648, 0
  %__element670 = extractelement <4 x float> %__column669, i32 1
  %__product671 = fmul float %__element670, %__component650
  %__column672 = extractvalue [4 x <4 x float>] %__resultMatrix648, 1
  %__element673 = extractelement <4 x float> %__column672, i32 1
  %__product674 = fmul float %__element673, %__component651
  %__dotProduct675 = fadd float %__product671, %__product674
  %__column676 = extractvalue [4 x <4 x float>] %__resultMatrix648, 2
  %__element677 = extractelement <4 x float> %__column676, i32 1
  %__product678 = fmul float %__element677, %__component652
  %__dotProduct679 = fadd float %__dotProduct675, %__product678
  %__column680 = extractvalue [4 x <4 x float>] %__resultMatrix648, 3
  %__element681 = extractelement <4 x float> %__column680, i32 1
  %__product682 = fmul float %__element681, %__component653
  %__dotProduct683 = fadd float %__dotProduct679, %__product682
  %203 = insertelement <4 x float> %202, float %__dotProduct683, i32 1
  %__column684 = extractvalue [4 x <4 x float>] %__resultMatrix648, 0
  %__element685 = extractelement <4 x float> %__column684, i32 2
  %__product686 = fmul float %__element685, %__component650
  %__column687 = extractvalue [4 x <4 x float>] %__resultMatrix648, 1
  %__element688 = extractelement <4 x float> %__column687, i32 2
  %__product689 = fmul float %__element688, %__component651
  %__dotProduct690 = fadd float %__product686, %__product689
  %__column691 = extractvalue [4 x <4 x float>] %__resultMatrix648, 2
  %__element692 = extractelement <4 x float> %__column691, i32 2
  %__product693 = fmul float %__element692, %__component652
  %__dotProduct694 = fadd float %__dotProduct690, %__product693
  %__column695 = extractvalue [4 x <4 x float>] %__resultMatrix648, 3
  %__element696 = extractelement <4 x float> %__column695, i32 2
  %__product697 = fmul float %__element696, %__component653
  %__dotProduct698 = fadd float %__dotProduct694, %__product697
  %204 = insertelement <4 x float> %203, float %__dotProduct698, i32 2
  %__column699 = extractvalue [4 x <4 x float>] %__resultMatrix648, 0
  %__element700 = extractelement <4 x float> %__column699, i32 3
  %__product701 = fmul float %__element700, %__component650
  %__column702 = extractvalue [4 x <4 x float>] %__resultMatrix648, 1
  %__element703 = extractelement <4 x float> %__column702, i32 3
  %__product704 = fmul float %__element703, %__component651
  %__dotProduct705 = fadd float %__product701, %__product704
  %__column706 = extractvalue [4 x <4 x float>] %__resultMatrix648, 2
  %__element707 = extractelement <4 x float> %__column706, i32 3
  %__product708 = fmul float %__element707, %__component652
  %__dotProduct709 = fadd float %__dotProduct705, %__product708
  %__column710 = extractvalue [4 x <4 x float>] %__resultMatrix648, 3
  %__element711 = extractelement <4 x float> %__column710, i32 3
  %__product712 = fmul float %__element711, %__component653
  %__dotProduct713 = fadd float %__dotProduct709, %__product712
  %205 = insertelement <4 x float> %204, float %__dotProduct713, i32 3
  %206 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow714 = fadd <4 x float> %206, %205
  store <4 x float> %FragColor_shadow714, <4 x float>* @FragColor_shadow
  br label %ifmerge715

ifmerge715:                                       ; preds = %else322, %then255
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge715
  %207 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %207)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@"matrix un34" = external addrspace(2) constant [4 x <4 x float>]
@"matrix colorTransform" = external addrspace(2) constant [3 x <3 x float>]
@"matrix m" = external addrspace(2) constant [4 x <4 x float>]
@"matrix n" = external addrspace(2) constant [4 x <4 x float>]
@"matrix um43" = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [4 x <4 x float>] addrspace(2)* @"matrix un34", i32 0, i32 1
  %0 = load <4 x float> addrspace(2)* %gla_constGEP, align 16
  %Color__ = call <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32 0, i32 -1, i32 1)
  %1 = load [3 x <3 x float>] addrspace(2)* @"matrix colorTransform", align 16
  %__column = extractvalue [3 x <3 x float>] %1, 0
  %__dot = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color__, <3 x float> %__column)
  %__column1 = extractvalue [3 x <3 x float>] %1, 1
  %__dot2 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color__, <3 x float> %__column1)
  %__column3 = extractvalue [3 x <3 x float>] %1, 2
  %__dot4 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %Color__, <3 x float> %__column3)
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot, i32 0, float %__dot2, i32 0, float %__dot4, i32 0, float 1.000000e+00, i32 0)
  %FragColor_shadow6 = fadd <4 x float> %0, %2
  %3 = load [4 x <4 x float>] addrspace(2)* @"matrix m", align 16
  %4 = load [4 x <4 x float>] addrspace(2)* @"matrix n", align 16
  %element1 = extractvalue [4 x <4 x float>] %3, 0
  %element2 = extractvalue [4 x <4 x float>] %4, 0
  %5 = fcmp one <4 x float> %element1, %element2
  %6 = call i1 @llvm.gla.any.v4i1(<4 x i1> %5)
  %element17 = extractvalue [4 x <4 x float>] %3, 1
  %element28 = extractvalue [4 x <4 x float>] %4, 1
  %7 = fcmp one <4 x float> %element17, %element28
  %8 = call i1 @llvm.gla.any.v4i1(<4 x i1> %7)
  %9 = or i1 %6, %8
  %element19 = extractvalue [4 x <4 x float>] %3, 2
  %element210 = extractvalue [4 x <4 x float>] %4, 2
  %10 = fcmp one <4 x float> %element19, %element210
  %11 = call i1 @llvm.gla.any.v4i1(<4 x i1> %10)
  %12 = or i1 %9, %11
  %element111 = extractvalue [4 x <4 x float>] %3, 3
  %element212 = extractvalue [4 x <4 x float>] %4, 3
  %13 = fcmp one <4 x float> %element111, %element212
  %14 = call i1 @llvm.gla.any.v4i1(<4 x i1> %13)
  %15 = or i1 %12, %14
  %v__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  br i1 %15, label %then, label %else

then:                                             ; preds = %entry
  %FragColor_shadow13 = fadd <4 x float> %FragColor_shadow6, %v__
  %.pre = extractelement <4 x float> %v__, i32 0
  %.pre717 = extractelement <4 x float> %v__, i32 1
  %.pre719 = extractelement <4 x float> %v__, i32 2
  %.pre721 = extractelement <4 x float> %v__, i32 3
  br label %ifmerge

else:                                             ; preds = %entry
  %__component = extractelement <4 x float> %v__, i32 0
  %__component15 = extractelement <4 x float> %v__, i32 1
  %__component16 = extractelement <4 x float> %v__, i32 2
  %__component17 = extractelement <4 x float> %v__, i32 3
  %__element = extractelement <4 x float> %element1, i32 0
  %__product = fmul float %__element, %__component
  %__element20 = extractelement <4 x float> %element17, i32 0
  %__product21 = fmul float %__element20, %__component15
  %__dotProduct = fadd float %__product, %__product21
  %__element23 = extractelement <4 x float> %element19, i32 0
  %__product24 = fmul float %__element23, %__component16
  %__dotProduct25 = fadd float %__product24, %__dotProduct
  %__element27 = extractelement <4 x float> %element111, i32 0
  %__product28 = fmul float %__element27, %__component17
  %__dotProduct29 = fadd float %__product28, %__dotProduct25
  %__element31 = extractelement <4 x float> %element1, i32 1
  %__product32 = fmul float %__element31, %__component
  %__element34 = extractelement <4 x float> %element17, i32 1
  %__product35 = fmul float %__element34, %__component15
  %__dotProduct36 = fadd float %__product32, %__product35
  %__element38 = extractelement <4 x float> %element19, i32 1
  %__product39 = fmul float %__element38, %__component16
  %__dotProduct40 = fadd float %__product39, %__dotProduct36
  %__element42 = extractelement <4 x float> %element111, i32 1
  %__product43 = fmul float %__element42, %__component17
  %__dotProduct44 = fadd float %__product43, %__dotProduct40
  %__element46 = extractelement <4 x float> %element1, i32 2
  %__product47 = fmul float %__element46, %__component
  %__element49 = extractelement <4 x float> %element17, i32 2
  %__product50 = fmul float %__element49, %__component15
  %__dotProduct51 = fadd float %__product47, %__product50
  %__element53 = extractelement <4 x float> %element19, i32 2
  %__product54 = fmul float %__element53, %__component16
  %__dotProduct55 = fadd float %__product54, %__dotProduct51
  %__element57 = extractelement <4 x float> %element111, i32 2
  %__product58 = fmul float %__element57, %__component17
  %__dotProduct59 = fadd float %__product58, %__dotProduct55
  %__element61 = extractelement <4 x float> %element1, i32 3
  %__product62 = fmul float %__element61, %__component
  %__element64 = extractelement <4 x float> %element17, i32 3
  %__product65 = fmul float %__element64, %__component15
  %__dotProduct66 = fadd float %__product62, %__product65
  %__element68 = extractelement <4 x float> %element19, i32 3
  %__product69 = fmul float %__element68, %__component16
  %__dotProduct70 = fadd float %__product69, %__dotProduct66
  %__element72 = extractelement <4 x float> %element111, i32 3
  %__product73 = fmul float %__element72, %__component17
  %__dotProduct74 = fadd float %__product73, %__dotProduct70
  %16 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct29, i32 0, float %__dotProduct44, i32 0, float %__dotProduct59, i32 0, float %__dotProduct74, i32 0)
  %FragColor_shadow75 = fadd <4 x float> %FragColor_shadow6, %16
  %__column77 = fsub <4 x float> %element1, %element2
  %__column80 = fsub <4 x float> %element17, %element28
  %__column83 = fsub <4 x float> %element19, %element210
  %__column86 = fsub <4 x float> %element111, %element212
  %__dot88 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v__, <4 x float> %__column77)
  %__dot90 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v__, <4 x float> %__column80)
  %__dot92 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v__, <4 x float> %__column83)
  %__dot94 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %v__, <4 x float> %__column86)
  %17 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dot88, i32 0, float %__dot90, i32 0, float %__dot92, i32 0, float %__dot94, i32 0)
  %FragColor_shadow95 = fadd <4 x float> %FragColor_shadow75, %17
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %.pre-phi722 = phi float [ %__component17, %else ], [ %.pre721, %then ]
  %.pre-phi720 = phi float [ %__component16, %else ], [ %.pre719, %then ]
  %.pre-phi718 = phi float [ %__component15, %else ], [ %.pre717, %then ]
  %.pre-phi = phi float [ %__component, %else ], [ %.pre, %then ]
  %FragColor_shadow716.0 = phi <4 x float> [ %FragColor_shadow95, %else ], [ %FragColor_shadow13, %then ]
  %u__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 2, i32 -1, i32 1)
  %18 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u__, <4 x i32> <i32 2, i32 3, i32 0, i32 0>)
  %19 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u__, <4 x i32> <i32 3, i32 0, i32 0, i32 1>)
  %20 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float> %u__, <4 x i32> <i32 0, i32 0, i32 1, i32 2>)
  %21 = extractelement <4 x float> %u__, i32 0
  %22 = fmul float %.pre-phi, %21
  %23 = extractelement <4 x float> %u__, i32 1
  %24 = fmul float %.pre-phi, %23
  %25 = extractelement <4 x float> %u__, i32 2
  %26 = fmul float %.pre-phi, %25
  %27 = extractelement <4 x float> %u__, i32 3
  %28 = fmul float %.pre-phi, %27
  %29 = fmul float %.pre-phi718, %21
  %30 = fmul float %.pre-phi718, %23
  %31 = fmul float %.pre-phi718, %25
  %32 = fmul float %.pre-phi718, %27
  %33 = fmul float %.pre-phi720, %21
  %34 = fmul float %.pre-phi720, %23
  %35 = fmul float %.pre-phi720, %25
  %36 = fmul float %.pre-phi720, %27
  %37 = fmul float %.pre-phi722, %21
  %38 = fmul float %.pre-phi722, %23
  %39 = fmul float %.pre-phi722, %25
  %40 = fmul float %.pre-phi722, %27
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %22, i32 0, float %24, i32 0, float %26, i32 0, float %28, i32 0)
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %29, i32 0, float %30, i32 0, float %31, i32 0, float %32, i32 0)
  %43 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %33, i32 0, float %34, i32 0, float %35, i32 0, float %36, i32 0)
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %37, i32 0, float %38, i32 0, float %39, i32 0, float %40, i32 0)
  %45 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %46 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float undef, float undef, float undef>, i32 14, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0)
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, i32 12, float undef, i32 undef, float undef, i32 undef, float %.pre-phi, i32 0, float 0.000000e+00, i32 0)
  %48 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float> undef, i32 15, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, float 0.000000e+00, i32 0, <4 x float> %v__, i32 0)
  %__column179 = fadd <4 x float> %45, %41
  %__column182 = fadd <4 x float> %46, %42
  %__column185 = fadd <4 x float> %47, %43
  %__column188 = fadd <4 x float> %48, %44
  %__column236 = fadd <4 x float> %u__, %__column179
  %__column239 = fadd <4 x float> %20, %__column182
  %__column242 = fadd <4 x float> %19, %__column185
  %__column245 = fadd <4 x float> %18, %__column188
  %49 = load [4 x <4 x float>] addrspace(2)* @"matrix un34", align 16
  %element2248 = extractvalue [4 x <4 x float>] %49, 0
  %50 = fcmp oeq <4 x float> %__column236, %element2248
  %51 = call i1 @llvm.gla.all.v4i1(<4 x i1> %50)
  %element2250 = extractvalue [4 x <4 x float>] %49, 1
  %52 = fcmp oeq <4 x float> %__column239, %element2250
  %53 = call i1 @llvm.gla.all.v4i1(<4 x i1> %52)
  %54 = and i1 %51, %53
  %element2252 = extractvalue [4 x <4 x float>] %49, 2
  %55 = fcmp oeq <4 x float> %__column242, %element2252
  %56 = call i1 @llvm.gla.all.v4i1(<4 x i1> %55)
  %57 = and i1 %54, %56
  %element2254 = extractvalue [4 x <4 x float>] %49, 3
  %58 = fcmp oeq <4 x float> %__column245, %element2254
  %59 = call i1 @llvm.gla.all.v4i1(<4 x i1> %58)
  %60 = and i1 %57, %59
  br i1 %60, label %then255, label %else322

then255:                                          ; preds = %ifmerge
  %__element262 = extractelement <4 x float> %__column236, i32 0
  %__product263 = fmul float %21, %__element262
  %__element265 = extractelement <4 x float> %__column239, i32 0
  %__product266 = fmul float %23, %__element265
  %__dotProduct267 = fadd float %__product263, %__product266
  %__element269 = extractelement <4 x float> %__column242, i32 0
  %__product270 = fmul float %25, %__element269
  %__dotProduct271 = fadd float %__product270, %__dotProduct267
  %__element273 = extractelement <4 x float> %__column245, i32 0
  %__product274 = fmul float %27, %__element273
  %__dotProduct275 = fadd float %__product274, %__dotProduct271
  %__element277 = extractelement <4 x float> %__column236, i32 1
  %__product278 = fmul float %21, %__element277
  %__element280 = extractelement <4 x float> %__column239, i32 1
  %__product281 = fmul float %23, %__element280
  %__dotProduct282 = fadd float %__product278, %__product281
  %__element284 = extractelement <4 x float> %__column242, i32 1
  %__product285 = fmul float %25, %__element284
  %__dotProduct286 = fadd float %__product285, %__dotProduct282
  %__element288 = extractelement <4 x float> %__column245, i32 1
  %__product289 = fmul float %27, %__element288
  %__dotProduct290 = fadd float %__product289, %__dotProduct286
  %__element292 = extractelement <4 x float> %__column236, i32 2
  %__product293 = fmul float %21, %__element292
  %__element295 = extractelement <4 x float> %__column239, i32 2
  %__product296 = fmul float %23, %__element295
  %__dotProduct297 = fadd float %__product293, %__product296
  %__element299 = extractelement <4 x float> %__column242, i32 2
  %__product300 = fmul float %25, %__element299
  %__dotProduct301 = fadd float %__product300, %__dotProduct297
  %__element303 = extractelement <4 x float> %__column245, i32 2
  %__product304 = fmul float %27, %__element303
  %__dotProduct305 = fadd float %__product304, %__dotProduct301
  %__element307 = extractelement <4 x float> %__column236, i32 3
  %__product308 = fmul float %21, %__element307
  %__element310 = extractelement <4 x float> %__column239, i32 3
  %__product311 = fmul float %23, %__element310
  %__dotProduct312 = fadd float %__product308, %__product311
  %__element314 = extractelement <4 x float> %__column242, i32 3
  %__product315 = fmul float %25, %__element314
  %__dotProduct316 = fadd float %__product315, %__dotProduct312
  %__element318 = extractelement <4 x float> %__column245, i32 3
  %__product319 = fmul float %27, %__element318
  %__dotProduct320 = fadd float %__product319, %__dotProduct316
  %61 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct275, i32 0, float %__dotProduct290, i32 0, float %__dotProduct305, i32 0, float %__dotProduct320, i32 0)
  br label %ifmerge715

else322:                                          ; preds = %ifmerge
  %62 = load [4 x <4 x float>] addrspace(2)* @"matrix um43", align 16
  %__rightColumn323 = extractvalue [4 x <4 x float>] %62, 0
  %__leftComp = extractelement <4 x float> %element2248, i32 0
  %__rightComp = extractelement <4 x float> %__rightColumn323, i32 0
  %__product325 = fmul float %__leftComp, %__rightComp
  %__leftComp327 = extractelement <4 x float> %element2250, i32 0
  %__rightComp328 = extractelement <4 x float> %__rightColumn323, i32 1
  %__product329 = fmul float %__leftComp327, %__rightComp328
  %__dotProduct330 = fadd float %__product325, %__product329
  %__leftComp332 = extractelement <4 x float> %element2252, i32 0
  %__rightComp333 = extractelement <4 x float> %__rightColumn323, i32 2
  %__product334 = fmul float %__leftComp332, %__rightComp333
  %__dotProduct335 = fadd float %__product334, %__dotProduct330
  %__leftComp337 = extractelement <4 x float> %element2254, i32 0
  %__rightComp338 = extractelement <4 x float> %__rightColumn323, i32 3
  %__product339 = fmul float %__leftComp337, %__rightComp338
  %__dotProduct340 = fadd float %__product339, %__dotProduct335
  %__leftComp343 = extractelement <4 x float> %element2248, i32 1
  %__product345 = fmul float %__leftComp343, %__rightComp
  %__leftComp347 = extractelement <4 x float> %element2250, i32 1
  %__product349 = fmul float %__leftComp347, %__rightComp328
  %__dotProduct350 = fadd float %__product345, %__product349
  %__leftComp352 = extractelement <4 x float> %element2252, i32 1
  %__product354 = fmul float %__leftComp352, %__rightComp333
  %__dotProduct355 = fadd float %__product354, %__dotProduct350
  %__leftComp357 = extractelement <4 x float> %element2254, i32 1
  %__product359 = fmul float %__leftComp357, %__rightComp338
  %__dotProduct360 = fadd float %__product359, %__dotProduct355
  %__leftComp363 = extractelement <4 x float> %element2248, i32 2
  %__product365 = fmul float %__leftComp363, %__rightComp
  %__leftComp367 = extractelement <4 x float> %element2250, i32 2
  %__product369 = fmul float %__leftComp367, %__rightComp328
  %__dotProduct370 = fadd float %__product365, %__product369
  %__leftComp372 = extractelement <4 x float> %element2252, i32 2
  %__product374 = fmul float %__leftComp372, %__rightComp333
  %__dotProduct375 = fadd float %__product374, %__dotProduct370
  %__leftComp377 = extractelement <4 x float> %element2254, i32 2
  %__product379 = fmul float %__leftComp377, %__rightComp338
  %__dotProduct380 = fadd float %__product379, %__dotProduct375
  %__leftComp383 = extractelement <4 x float> %element2248, i32 3
  %__product385 = fmul float %__leftComp383, %__rightComp
  %__leftComp387 = extractelement <4 x float> %element2250, i32 3
  %__product389 = fmul float %__leftComp387, %__rightComp328
  %__dotProduct390 = fadd float %__product385, %__product389
  %__leftComp392 = extractelement <4 x float> %element2252, i32 3
  %__product394 = fmul float %__leftComp392, %__rightComp333
  %__dotProduct395 = fadd float %__product394, %__dotProduct390
  %__leftComp397 = extractelement <4 x float> %element2254, i32 3
  %__product399 = fmul float %__leftComp397, %__rightComp338
  %__dotProduct400 = fadd float %__product399, %__dotProduct395
  %__rightColumn403 = extractvalue [4 x <4 x float>] %62, 1
  %__rightComp406 = extractelement <4 x float> %__rightColumn403, i32 0
  %__product407 = fmul float %__leftComp, %__rightComp406
  %__rightComp410 = extractelement <4 x float> %__rightColumn403, i32 1
  %__product411 = fmul float %__leftComp327, %__rightComp410
  %__dotProduct412 = fadd float %__product407, %__product411
  %__rightComp415 = extractelement <4 x float> %__rightColumn403, i32 2
  %__product416 = fmul float %__leftComp332, %__rightComp415
  %__dotProduct417 = fadd float %__product416, %__dotProduct412
  %__rightComp420 = extractelement <4 x float> %__rightColumn403, i32 3
  %__product421 = fmul float %__leftComp337, %__rightComp420
  %__dotProduct422 = fadd float %__product421, %__dotProduct417
  %__product427 = fmul float %__leftComp343, %__rightComp406
  %__product431 = fmul float %__leftComp347, %__rightComp410
  %__dotProduct432 = fadd float %__product427, %__product431
  %__product436 = fmul float %__leftComp352, %__rightComp415
  %__dotProduct437 = fadd float %__product436, %__dotProduct432
  %__product441 = fmul float %__leftComp357, %__rightComp420
  %__dotProduct442 = fadd float %__product441, %__dotProduct437
  %__product447 = fmul float %__leftComp363, %__rightComp406
  %__product451 = fmul float %__leftComp367, %__rightComp410
  %__dotProduct452 = fadd float %__product447, %__product451
  %__product456 = fmul float %__leftComp372, %__rightComp415
  %__dotProduct457 = fadd float %__product456, %__dotProduct452
  %__product461 = fmul float %__leftComp377, %__rightComp420
  %__dotProduct462 = fadd float %__product461, %__dotProduct457
  %__product467 = fmul float %__leftComp383, %__rightComp406
  %__product471 = fmul float %__leftComp387, %__rightComp410
  %__dotProduct472 = fadd float %__product467, %__product471
  %__product476 = fmul float %__leftComp392, %__rightComp415
  %__dotProduct477 = fadd float %__product476, %__dotProduct472
  %__product481 = fmul float %__leftComp397, %__rightComp420
  %__dotProduct482 = fadd float %__product481, %__dotProduct477
  %__rightColumn485 = extractvalue [4 x <4 x float>] %62, 2
  %__rightComp488 = extractelement <4 x float> %__rightColumn485, i32 0
  %__product489 = fmul float %__leftComp, %__rightComp488
  %__rightComp492 = extractelement <4 x float> %__rightColumn485, i32 1
  %__product493 = fmul float %__leftComp327, %__rightComp492
  %__dotProduct494 = fadd float %__product489, %__product493
  %__rightComp497 = extractelement <4 x float> %__rightColumn485, i32 2
  %__product498 = fmul float %__leftComp332, %__rightComp497
  %__dotProduct499 = fadd float %__product498, %__dotProduct494
  %__rightComp502 = extractelement <4 x float> %__rightColumn485, i32 3
  %__product503 = fmul float %__leftComp337, %__rightComp502
  %__dotProduct504 = fadd float %__product503, %__dotProduct499
  %__product509 = fmul float %__leftComp343, %__rightComp488
  %__product513 = fmul float %__leftComp347, %__rightComp492
  %__dotProduct514 = fadd float %__product509, %__product513
  %__product518 = fmul float %__leftComp352, %__rightComp497
  %__dotProduct519 = fadd float %__product518, %__dotProduct514
  %__product523 = fmul float %__leftComp357, %__rightComp502
  %__dotProduct524 = fadd float %__product523, %__dotProduct519
  %__product529 = fmul float %__leftComp363, %__rightComp488
  %__product533 = fmul float %__leftComp367, %__rightComp492
  %__dotProduct534 = fadd float %__product529, %__product533
  %__product538 = fmul float %__leftComp372, %__rightComp497
  %__dotProduct539 = fadd float %__product538, %__dotProduct534
  %__product543 = fmul float %__leftComp377, %__rightComp502
  %__dotProduct544 = fadd float %__product543, %__dotProduct539
  %__product549 = fmul float %__leftComp383, %__rightComp488
  %__product553 = fmul float %__leftComp387, %__rightComp492
  %__dotProduct554 = fadd float %__product549, %__product553
  %__product558 = fmul float %__leftComp392, %__rightComp497
  %__dotProduct559 = fadd float %__product558, %__dotProduct554
  %__product563 = fmul float %__leftComp397, %__rightComp502
  %__dotProduct564 = fadd float %__product563, %__dotProduct559
  %__rightColumn567 = extractvalue [4 x <4 x float>] %62, 3
  %__rightComp570 = extractelement <4 x float> %__rightColumn567, i32 0
  %__product571 = fmul float %__leftComp, %__rightComp570
  %__rightComp574 = extractelement <4 x float> %__rightColumn567, i32 1
  %__product575 = fmul float %__leftComp327, %__rightComp574
  %__dotProduct576 = fadd float %__product571, %__product575
  %__rightComp579 = extractelement <4 x float> %__rightColumn567, i32 2
  %__product580 = fmul float %__leftComp332, %__rightComp579
  %__dotProduct581 = fadd float %__product580, %__dotProduct576
  %__rightComp584 = extractelement <4 x float> %__rightColumn567, i32 3
  %__product585 = fmul float %__leftComp337, %__rightComp584
  %__dotProduct586 = fadd float %__product585, %__dotProduct581
  %__product591 = fmul float %__leftComp343, %__rightComp570
  %__product595 = fmul float %__leftComp347, %__rightComp574
  %__dotProduct596 = fadd float %__product591, %__product595
  %__product600 = fmul float %__leftComp352, %__rightComp579
  %__dotProduct601 = fadd float %__product600, %__dotProduct596
  %__product605 = fmul float %__leftComp357, %__rightComp584
  %__dotProduct606 = fadd float %__product605, %__dotProduct601
  %__product611 = fmul float %__leftComp363, %__rightComp570
  %__product615 = fmul float %__leftComp367, %__rightComp574
  %__dotProduct616 = fadd float %__product611, %__product615
  %__product620 = fmul float %__leftComp372, %__rightComp579
  %__dotProduct621 = fadd float %__product620, %__dotProduct616
  %__product625 = fmul float %__leftComp377, %__rightComp584
  %__dotProduct626 = fadd float %__product625, %__dotProduct621
  %__product631 = fmul float %__leftComp383, %__rightComp570
  %__product635 = fmul float %__leftComp387, %__rightComp574
  %__dotProduct636 = fadd float %__product631, %__product635
  %__product640 = fmul float %__leftComp392, %__rightComp579
  %__dotProduct641 = fadd float %__product640, %__dotProduct636
  %__product645 = fmul float %__leftComp397, %__rightComp584
  %__dotProduct646 = fadd float %__product645, %__dotProduct641
  %__product656 = fmul float %.pre-phi, %__dotProduct340
  %__product659 = fmul float %.pre-phi718, %__dotProduct422
  %__dotProduct660 = fadd float %__product656, %__product659
  %__product663 = fmul float %.pre-phi720, %__dotProduct504
  %__dotProduct664 = fadd float %__product663, %__dotProduct660
  %__product667 = fmul float %.pre-phi722, %__dotProduct586
  %__dotProduct668 = fadd float %__product667, %__dotProduct664
  %__product671 = fmul float %.pre-phi, %__dotProduct360
  %__product674 = fmul float %.pre-phi718, %__dotProduct442
  %__dotProduct675 = fadd float %__product671, %__product674
  %__product678 = fmul float %.pre-phi720, %__dotProduct524
  %__dotProduct679 = fadd float %__product678, %__dotProduct675
  %__product682 = fmul float %.pre-phi722, %__dotProduct606
  %__dotProduct683 = fadd float %__product682, %__dotProduct679
  %__product686 = fmul float %.pre-phi, %__dotProduct380
  %__product689 = fmul float %.pre-phi718, %__dotProduct462
  %__dotProduct690 = fadd float %__product686, %__product689
  %__product693 = fmul float %.pre-phi720, %__dotProduct544
  %__dotProduct694 = fadd float %__product693, %__dotProduct690
  %__product697 = fmul float %.pre-phi722, %__dotProduct626
  %__dotProduct698 = fadd float %__product697, %__dotProduct694
  %__product701 = fmul float %.pre-phi, %__dotProduct400
  %__product704 = fmul float %.pre-phi718, %__dotProduct482
  %__dotProduct705 = fadd float %__product701, %__product704
  %__product708 = fmul float %.pre-phi720, %__dotProduct564
  %__dotProduct709 = fadd float %__product708, %__dotProduct705
  %__product712 = fmul float %.pre-phi722, %__dotProduct646
  %__dotProduct713 = fadd float %__product712, %__dotProduct709
  %63 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %__dotProduct668, i32 0, float %__dotProduct683, i32 0, float %__dotProduct698, i32 0, float %__dotProduct713, i32 0)
  br label %ifmerge715

ifmerge715:                                       ; preds = %else322, %then255
  %.pn = phi <4 x float> [ %61, %then255 ], [ %63, %else322 ]
  %FragColor_shadow716.1 = fadd <4 x float> %FragColor_shadow716.0, %.pn
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %FragColor_shadow716.1)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge715
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <3 x float> @llvm.gla.fReadInterpolant.v3f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) nounwind readnone

declare i1 @llvm.gla.any.v4i1(<4 x i1>) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) nounwind readnone

declare i1 @llvm.gla.all.v4i1(<4 x i1>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.v4f32(<4 x float>, i32, float, i32, float, i32, float, i32, <4 x float>, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v4f32.v4i32(<4 x float>, <4 x i32>) nounwind readnone
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform mat4 un34;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
uniform mat4 um43;
in vec3 Color;
const float const35_1f = 1.0;
in vec4 v;
in vec4 u;
const float const121_0f = 0.0;
const vec4 const123 = vec4(0.0, 0.0, 0.0, 0.0);
const vec4 const125 = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
    float _pre_phi722;
    float _pre_phi720;
    float _pre_phi718;
    float _pre_phi;
    vec4 FragColor_shadow716_0;
    vec4 _pn;
    vec4 temp27 = un34[1];
    vec3 __column = colorTransform[0];
    float __dot = dot(Color, __column);
    vec3 __column1 = colorTransform[1];
    float __dot2 = dot(Color, __column1);
    vec3 __column3 = colorTransform[2];
    float __dot4 = dot(Color, __column3);
    vec4 temp34 = vec4(__dot, __dot2, __dot4, const35_1f);
    vec4 FragColor_shadow6 = temp27 + temp34;
    vec4 element1 = m[0];
    vec4 element2 = n[0];
    bvec4 temp39 = notEqual(element1, element2);
    bool temp40 = any(temp39);
    vec4 element17 = m[1];
    vec4 element28 = n[1];
    bvec4 temp43 = notEqual(element17, element28);
    bool temp44 = any(temp43);
    bool temp45 = temp40 || temp44;
    vec4 element19 = m[2];
    vec4 element210 = n[2];
    bvec4 temp48 = notEqual(element19, element210);
    bool temp49 = any(temp48);
    bool temp50 = temp45 || temp49;
    vec4 element111 = m[3];
    vec4 element212 = n[3];
    bvec4 temp53 = notEqual(element111, element212);
    bool temp54 = any(temp53);
    bool temp55 = temp50 || temp54;
    if (temp55) {
        vec4 FragColor_shadow13 = FragColor_shadow6 + v;
        _pre_phi722 = v.w;
        _pre_phi720 = v.z;
        _pre_phi718 = v.y;
        _pre_phi = v.x;
        FragColor_shadow716_0 = FragColor_shadow13;
    }
    else {
        float __product = element1.x * v.x;
        float __product21 = element17.x * v.y;
        float __dotProduct = __product + __product21;
        float __product24 = element19.x * v.z;
        float __dotProduct25 = __product24 + __dotProduct;
        float __product28 = element111.x * v.w;
        float __dotProduct29 = __product28 + __dotProduct25;
        float __product32 = element1.y * v.x;
        float __product35 = element17.y * v.y;
        float __dotProduct36 = __product32 + __product35;
        float __product39 = element19.y * v.z;
        float __dotProduct40 = __product39 + __dotProduct36;
        float __product43 = element111.y * v.w;
        float __dotProduct44 = __product43 + __dotProduct40;
        float __product47 = element1.z * v.x;
        float __product50 = element17.z * v.y;
        float __dotProduct51 = __product47 + __product50;
        float __product54 = element19.z * v.z;
        float __dotProduct55 = __product54 + __dotProduct51;
        float __product58 = element111.z * v.w;
        float __dotProduct59 = __product58 + __dotProduct55;
        float __product62 = element1.w * v.x;
        float __product65 = element17.w * v.y;
        float __dotProduct66 = __product62 + __product65;
        float __product69 = element19.w * v.z;
        float __dotProduct70 = __product69 + __dotProduct66;
        float __product73 = element111.w * v.w;
        float __dotProduct74 = __product73 + __dotProduct70;
        vec4 temp85 = vec4(__dotProduct29, __dotProduct44, __dotProduct59, __dotProduct74);
        vec4 FragColor_shadow75 = FragColor_shadow6 + temp85;
        vec4 __column77 = element1 - element2;
        vec4 __column80 = element17 - element28;
        vec4 __column83 = element19 - element210;
        vec4 __column86 = element111 - element212;
        float __dot88 = dot(v, __column77);
        float __dot90 = dot(v, __column80);
        float __dot92 = dot(v, __column83);
        float __dot94 = dot(v, __column86);
        vec4 temp95 = vec4(__dot88, __dot90, __dot92, __dot94);
        vec4 FragColor_shadow95 = FragColor_shadow75 + temp95;
        _pre_phi722 = v.w;
        _pre_phi720 = v.z;
        _pre_phi718 = v.y;
        _pre_phi = v.x;
        FragColor_shadow716_0 = FragColor_shadow95;
    }
    
    vec4 temp97 = u.zwxx;
    vec4 temp98 = u.wxxy;
    vec4 temp99 = u.xxyz;
    float temp100 = _pre_phi * u.x;
    float temp101 = _pre_phi * u.y;
    float temp102 = _pre_phi * u.z;
    float temp103 = _pre_phi * u.w;
    float temp104 = _pre_phi718 * u.x;
    float temp105 = _pre_phi718 * u.y;
    float temp106 = _pre_phi718 * u.z;
    float temp107 = _pre_phi718 * u.w;
    float temp108 = _pre_phi720 * u.x;
    float temp109 = _pre_phi720 * u.y;
    float temp110 = _pre_phi720 * u.z;
    float temp111 = _pre_phi720 * u.w;
    float temp112 = _pre_phi722 * u.x;
    float temp113 = _pre_phi722 * u.y;
    float temp114 = _pre_phi722 * u.z;
    float temp115 = _pre_phi722 * u.w;
    vec4 temp116 = vec4(temp100, temp101, temp102, temp103);
    vec4 temp117 = vec4(temp104, temp105, temp106, temp107);
    vec4 temp118 = vec4(temp108, temp109, temp110, temp111);
    vec4 temp119 = vec4(temp112, temp113, temp114, temp115);
    vec4 temp120 = vec4(_pre_phi, const121_0f, const121_0f, const121_0f);
    vec4 temp122 = const123;
    temp122.yzw = vec3(_pre_phi, const121_0f, const121_0f);
    vec4 temp124 = const125;
    temp124.zw = vec2(_pre_phi, const121_0f);
    vec4 temp126 = vec4(const121_0f, const121_0f, const121_0f, v.x);
    vec4 __column179 = temp120 + temp116;
    vec4 __column182 = temp122 + temp117;
    vec4 __column185 = temp124 + temp118;
    vec4 __column188 = temp126 + temp119;
    vec4 __column236 = u + __column179;
    vec4 __column239 = temp99 + __column182;
    vec4 __column242 = temp98 + __column185;
    vec4 __column245 = temp97 + __column188;
    vec4 element2248 = un34[0];
    bvec4 temp136 = equal(__column236, element2248);
    bool temp137 = all(temp136);
    vec4 element2250 = un34[1];
    bvec4 temp139 = equal(__column239, element2250);
    bool temp140 = all(temp139);
    bool temp141 = temp137 && temp140;
    vec4 element2252 = un34[2];
    bvec4 temp143 = equal(__column242, element2252);
    bool temp144 = all(temp143);
    bool temp145 = temp141 && temp144;
    vec4 element2254 = un34[3];
    bvec4 temp147 = equal(__column245, element2254);
    bool temp148 = all(temp147);
    bool temp149 = temp145 && temp148;
    if (temp149) {
        float __product263 = u.x * __column236.x;
        float __product266 = u.y * __column239.x;
        float __dotProduct267 = __product263 + __product266;
        float __product270 = u.z * __column242.x;
        float __dotProduct271 = __product270 + __dotProduct267;
        float __product274 = u.w * __column245.x;
        float __dotProduct275 = __product274 + __dotProduct271;
        float __product278 = u.x * __column236.y;
        float __product281 = u.y * __column239.y;
        float __dotProduct282 = __product278 + __product281;
        float __product285 = u.z * __column242.y;
        float __dotProduct286 = __product285 + __dotProduct282;
        float __product289 = u.w * __column245.y;
        float __dotProduct290 = __product289 + __dotProduct286;
        float __product293 = u.x * __column236.z;
        float __product296 = u.y * __column239.z;
        float __dotProduct297 = __product293 + __product296;
        float __product300 = u.z * __column242.z;
        float __dotProduct301 = __product300 + __dotProduct297;
        float __product304 = u.w * __column245.z;
        float __dotProduct305 = __product304 + __dotProduct301;
        float __product308 = u.x * __column236.w;
        float __product311 = u.y * __column239.w;
        float __dotProduct312 = __product308 + __product311;
        float __product315 = u.z * __column242.w;
        float __dotProduct316 = __product315 + __dotProduct312;
        float __product319 = u.w * __column245.w;
        float __dotProduct320 = __product319 + __dotProduct316;
        vec4 temp178 = vec4(__dotProduct275, __dotProduct290, __dotProduct305, __dotProduct320);
        _pn = temp178;
    }
    else {
        vec4 __rightColumn323 = um43[0];
        float __product325 = element2248.x * __rightColumn323.x;
        float __product329 = element2250.x * __rightColumn323.y;
        float __dotProduct330 = __product325 + __product329;
        float __product334 = element2252.x * __rightColumn323.z;
        float __dotProduct335 = __product334 + __dotProduct330;
        float __product339 = element2254.x * __rightColumn323.w;
        float __dotProduct340 = __product339 + __dotProduct335;
        float __product345 = element2248.y * __rightColumn323.x;
        float __product349 = element2250.y * __rightColumn323.y;
        float __dotProduct350 = __product345 + __product349;
        float __product354 = element2252.y * __rightColumn323.z;
        float __dotProduct355 = __product354 + __dotProduct350;
        float __product359 = element2254.y * __rightColumn323.w;
        float __dotProduct360 = __product359 + __dotProduct355;
        float __product365 = element2248.z * __rightColumn323.x;
        float __product369 = element2250.z * __rightColumn323.y;
        float __dotProduct370 = __product365 + __product369;
        float __product374 = element2252.z * __rightColumn323.z;
        float __dotProduct375 = __product374 + __dotProduct370;
        float __product379 = element2254.z * __rightColumn323.w;
        float __dotProduct380 = __product379 + __dotProduct375;
        float __product385 = element2248.w * __rightColumn323.x;
        float __product389 = element2250.w * __rightColumn323.y;
        float __dotProduct390 = __product385 + __product389;
        float __product394 = element2252.w * __rightColumn323.z;
        float __dotProduct395 = __product394 + __dotProduct390;
        float __product399 = element2254.w * __rightColumn323.w;
        float __dotProduct400 = __product399 + __dotProduct395;
        vec4 __rightColumn403 = um43[1];
        float __product407 = element2248.x * __rightColumn403.x;
        float __product411 = element2250.x * __rightColumn403.y;
        float __dotProduct412 = __product407 + __product411;
        float __product416 = element2252.x * __rightColumn403.z;
        float __dotProduct417 = __product416 + __dotProduct412;
        float __product421 = element2254.x * __rightColumn403.w;
        float __dotProduct422 = __product421 + __dotProduct417;
        float __product427 = element2248.y * __rightColumn403.x;
        float __product431 = element2250.y * __rightColumn403.y;
        float __dotProduct432 = __product427 + __product431;
        float __product436 = element2252.y * __rightColumn403.z;
        float __dotProduct437 = __product436 + __dotProduct432;
        float __product441 = element2254.y * __rightColumn403.w;
        float __dotProduct442 = __product441 + __dotProduct437;
        float __product447 = element2248.z * __rightColumn403.x;
        float __product451 = element2250.z * __rightColumn403.y;
        float __dotProduct452 = __product447 + __product451;
        float __product456 = element2252.z * __rightColumn403.z;
        float __dotProduct457 = __product456 + __dotProduct452;
        float __product461 = element2254.z * __rightColumn403.w;
        float __dotProduct462 = __product461 + __dotProduct457;
        float __product467 = element2248.w * __rightColumn403.x;
        float __product471 = element2250.w * __rightColumn403.y;
        float __dotProduct472 = __product467 + __product471;
        float __product476 = element2252.w * __rightColumn403.z;
        float __dotProduct477 = __product476 + __dotProduct472;
        float __product481 = element2254.w * __rightColumn403.w;
        float __dotProduct482 = __product481 + __dotProduct477;
        vec4 __rightColumn485 = um43[2];
        float __product489 = element2248.x * __rightColumn485.x;
        float __product493 = element2250.x * __rightColumn485.y;
        float __dotProduct494 = __product489 + __product493;
        float __product498 = element2252.x * __rightColumn485.z;
        float __dotProduct499 = __product498 + __dotProduct494;
        float __product503 = element2254.x * __rightColumn485.w;
        float __dotProduct504 = __product503 + __dotProduct499;
        float __product509 = element2248.y * __rightColumn485.x;
        float __product513 = element2250.y * __rightColumn485.y;
        float __dotProduct514 = __product509 + __product513;
        float __product518 = element2252.y * __rightColumn485.z;
        float __dotProduct519 = __product518 + __dotProduct514;
        float __product523 = element2254.y * __rightColumn485.w;
        float __dotProduct524 = __product523 + __dotProduct519;
        float __product529 = element2248.z * __rightColumn485.x;
        float __product533 = element2250.z * __rightColumn485.y;
        float __dotProduct534 = __product529 + __product533;
        float __product538 = element2252.z * __rightColumn485.z;
        float __dotProduct539 = __product538 + __dotProduct534;
        float __product543 = element2254.z * __rightColumn485.w;
        float __dotProduct544 = __product543 + __dotProduct539;
        float __product549 = element2248.w * __rightColumn485.x;
        float __product553 = element2250.w * __rightColumn485.y;
        float __dotProduct554 = __product549 + __product553;
        float __product558 = element2252.w * __rightColumn485.z;
        float __dotProduct559 = __product558 + __dotProduct554;
        float __product563 = element2254.w * __rightColumn485.w;
        float __dotProduct564 = __product563 + __dotProduct559;
        vec4 __rightColumn567 = um43[3];
        float __product571 = element2248.x * __rightColumn567.x;
        float __product575 = element2250.x * __rightColumn567.y;
        float __dotProduct576 = __product571 + __product575;
        float __product580 = element2252.x * __rightColumn567.z;
        float __dotProduct581 = __product580 + __dotProduct576;
        float __product585 = element2254.x * __rightColumn567.w;
        float __dotProduct586 = __product585 + __dotProduct581;
        float __product591 = element2248.y * __rightColumn567.x;
        float __product595 = element2250.y * __rightColumn567.y;
        float __dotProduct596 = __product591 + __product595;
        float __product600 = element2252.y * __rightColumn567.z;
        float __dotProduct601 = __product600 + __dotProduct596;
        float __product605 = element2254.y * __rightColumn567.w;
        float __dotProduct606 = __product605 + __dotProduct601;
        float __product611 = element2248.z * __rightColumn567.x;
        float __product615 = element2250.z * __rightColumn567.y;
        float __dotProduct616 = __product611 + __product615;
        float __product620 = element2252.z * __rightColumn567.z;
        float __dotProduct621 = __product620 + __dotProduct616;
        float __product625 = element2254.z * __rightColumn567.w;
        float __dotProduct626 = __product625 + __dotProduct621;
        float __product631 = element2248.w * __rightColumn567.x;
        float __product635 = element2250.w * __rightColumn567.y;
        float __dotProduct636 = __product631 + __product635;
        float __product640 = element2252.w * __rightColumn567.z;
        float __dotProduct641 = __product640 + __dotProduct636;
        float __product645 = element2254.w * __rightColumn567.w;
        float __dotProduct646 = __product645 + __dotProduct641;
        float __product656 = _pre_phi * __dotProduct340;
        float __product659 = _pre_phi718 * __dotProduct422;
        float __dotProduct660 = __product656 + __product659;
        float __product663 = _pre_phi720 * __dotProduct504;
        float __dotProduct664 = __product663 + __dotProduct660;
        float __product667 = _pre_phi722 * __dotProduct586;
        float __dotProduct668 = __product667 + __dotProduct664;
        float __product671 = _pre_phi * __dotProduct360;
        float __product674 = _pre_phi718 * __dotProduct442;
        float __dotProduct675 = __product671 + __product674;
        float __product678 = _pre_phi720 * __dotProduct524;
        float __dotProduct679 = __product678 + __dotProduct675;
        float __product682 = _pre_phi722 * __dotProduct606;
        float __dotProduct683 = __product682 + __dotProduct679;
        float __product686 = _pre_phi * __dotProduct380;
        float __product689 = _pre_phi718 * __dotProduct462;
        float __dotProduct690 = __product686 + __product689;
        float __product693 = _pre_phi720 * __dotProduct544;
        float __dotProduct694 = __product693 + __dotProduct690;
        float __product697 = _pre_phi722 * __dotProduct626;
        float __dotProduct698 = __product697 + __dotProduct694;
        float __product701 = _pre_phi * __dotProduct400;
        float __product704 = _pre_phi718 * __dotProduct482;
        float __dotProduct705 = __product701 + __product704;
        float __product708 = _pre_phi720 * __dotProduct564;
        float __dotProduct709 = __product708 + __dotProduct705;
        float __product712 = _pre_phi722 * __dotProduct646;
        float __dotProduct713 = __product712 + __dotProduct709;
        vec4 temp323 = vec4(__dotProduct668, __dotProduct683, __dotProduct698, __dotProduct713);
        _pn = temp323;
    }
    
    vec4 FragColor_shadow716_1 = FragColor_shadow716_0 + _pn;
    gl_FragColor = FragColor_shadow716_1;
    
}
WARNING: 0:337: Two consecutive underscores are reserved for future use.
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
uniform mat4 un34;
uniform mat3 colorTransform;
uniform mat4 m;
uniform mat4 n;
uniform mat4 um43;
in vec3 Color;
const float const35_1f = 1.0;
in vec4 v;
in vec4 v;
in vec4 u;
const float const121_0f = 0.0;
const vec4 const123 = vec4(0.0, 0.0, 0.0, 0.0);
const vec4 const125 = vec4(0.0, 0.0, 0.0, 0.0);
in vec4 v;

void main()
{
    vec4 FragColor_shadow716_0_0;
    float _pre_phi_0;
    float _pre_phi718_0;
    float _pre_phi720_0;
    float _pre_phi722_0;
    vec4 _pn_0;
    vec4 temp271 = un34[1];
    vec3 __column2 = colorTransform[0];
    float __dot3 = dot(Color, __column2);
    vec3 __column14 = colorTransform[1];
    float __dot26 = dot(Color, __column14);
    vec3 __column37 = colorTransform[2];
    float __dot49 = dot(Color, __column37);
    vec4 temp34 = vec4(__dot3, __dot26, __dot49, const35_1f);
    vec4 FragColor_shadow611 = temp271 + temp34;
    vec4 element112 = m[0];
    vec4 element213 = n[0];
    bvec4 temp3914 = notEqual(element112, element213);
    bool temp4015 = any(temp3914);
    vec4 element1716 = m[1];
    vec4 element2817 = n[1];
    bvec4 temp4318 = notEqual(element1716, element2817);
    bool temp4419 = any(temp4318);
    bool temp4520 = temp4015 || temp4419;
    vec4 element1921 = m[2];
    vec4 element21022 = n[2];
    bvec4 temp4823 = notEqual(element1921, element21022);
    bool temp4924 = any(temp4823);
    bool temp5025 = temp4520 || temp4924;
    vec4 element11126 = m[3];
    vec4 element21227 = n[3];
    bvec4 temp5328 = notEqual(element11126, element21227);
    bool temp5429 = any(temp5328);
    bool temp5530 = temp5025 || temp5429;
    if (temp5530) {
        vec4 FragColor_shadow1331 = FragColor_shadow611 + v;
        FragColor_shadow716_0_0 = FragColor_shadow1331;
        _pre_phi_0 = v.x;
        _pre_phi718_0 = v.y;
        _pre_phi720_0 = v.z;
        _pre_phi722_0 = v.w;
    }
    else {
        float __product42 = element112.x * v.x;
        float __product2144 = element1716.x * v.y;
        float __dotProduct45 = __product42 + __product2144;
        float __product2447 = element1921.x * v.z;
        float __dotProduct2548 = __product2447 + __dotProduct45;
        float __product2850 = element11126.x * v.w;
        float __dotProduct2951 = __product2850 + __dotProduct2548;
        float __product3253 = element112.y * v.x;
        float __product3555 = element1716.y * v.y;
        float __dotProduct3656 = __product3253 + __product3555;
        float __product3958 = element1921.y * v.z;
        float __dotProduct4059 = __product3958 + __dotProduct3656;
        float __product4361 = element11126.y * v.w;
        float __dotProduct4462 = __product4361 + __dotProduct4059;
        float __product4764 = element112.z * v.x;
        float __product5066 = element1716.z * v.y;
        float __dotProduct5167 = __product4764 + __product5066;
        float __product5469 = element1921.z * v.z;
        float __dotProduct5570 = __product5469 + __dotProduct5167;
        float __product5872 = element11126.z * v.w;
        float __dotProduct5973 = __product5872 + __dotProduct5570;
        float __product6275 = element112.w * v.x;
        float __product6577 = element1716.w * v.y;
        float __dotProduct6678 = __product6275 + __product6577;
        float __product6980 = element1921.w * v.z;
        float __dotProduct7081 = __product6980 + __dotProduct6678;
        float __product7383 = element11126.w * v.w;
        float __dotProduct7484 = __product7383 + __dotProduct7081;
        vec4 temp85 = vec4(__dotProduct2951, __dotProduct4462, __dotProduct5973, __dotProduct7484);
        vec4 FragColor_shadow7587 = FragColor_shadow611 + temp85;
        vec4 __column7788 = element112 - element213;
        vec4 __column8089 = element1716 - element2817;
        vec4 __column8390 = element1921 - element21022;
        vec4 __column8691 = element11126 - element21227;
        float __dot8893 = dot(v, __column7788);
        float __dot9095 = dot(v, __column8089);
        float __dot9297 = dot(v, __column8390);
        float __dot9499 = dot(v, __column8691);
        vec4 temp95 = vec4(__dot8893, __dot9095, __dot9297, __dot9499);
        vec4 FragColor_shadow95102 = temp95 + FragColor_shadow7587;
        FragColor_shadow716_0_0 = FragColor_shadow95102;
        _pre_phi_0 = v.x;
        _pre_phi718_0 = v.y;
        _pre_phi720_0 = v.z;
        _pre_phi722_0 = v.w;
    }
    
    vec4 temp97 = u.xxyz;
    vec4 temp98 = u.wxxy;
    vec4 temp99 = u.zwxx;
    float temp100118 = _pre_phi_0 * u.x;
    float temp101120 = _pre_phi_0 * u.y;
    float temp102122 = _pre_phi_0 * u.z;
    float temp103124 = _pre_phi_0 * u.w;
    float temp104126 = _pre_phi718_0 * u.x;
    float temp105128 = _pre_phi718_0 * u.y;
    float temp106130 = _pre_phi718_0 * u.z;
    float temp107132 = _pre_phi718_0 * u.w;
    float temp108134 = _pre_phi720_0 * u.x;
    float temp109136 = _pre_phi720_0 * u.y;
    float temp110138 = _pre_phi720_0 * u.z;
    float temp111140 = _pre_phi720_0 * u.w;
    float temp112142 = _pre_phi722_0 * u.x;
    float temp113144 = _pre_phi722_0 * u.y;
    float temp114146 = _pre_phi722_0 * u.z;
    float temp115148 = _pre_phi722_0 * u.w;
    vec4 temp116 = vec4(temp100118, temp101120, temp102122, temp103124);
    vec4 temp117 = vec4(temp104126, temp105128, temp106130, temp107132);
    vec4 temp118 = vec4(temp108134, temp109136, temp110138, temp111140);
    vec4 temp119 = vec4(temp112142, temp113144, temp114146, temp115148);
    vec4 temp120 = vec4(_pre_phi_0, const121_0f, const121_0f, const121_0f);
    vec4 temp122 = const123;
    temp122.yzw = vec3(_pre_phi_0, const121_0f, const121_0f);
    vec4 temp124 = const125;
    temp124.zw = vec2(_pre_phi_0, const121_0f);
    vec4 temp126 = vec4(const121_0f, const121_0f, const121_0f, v.x);
    vec4 __column179166 = temp120 + temp116;
    vec4 __column182167 = temp122 + temp117;
    vec4 __column185168 = temp124 + temp118;
    vec4 __column188169 = temp126 + temp119;
    vec4 __column236171 = u + __column179166;
    vec4 __column239172 = temp97 + __column182167;
    vec4 __column242173 = temp98 + __column185168;
    vec4 __column245174 = temp99 + __column188169;
    vec4 element2248175 = un34[0];
    bvec4 temp136176 = equal(__column236171, element2248175);
    bool temp137177 = all(temp136176);
    bvec4 temp139179 = equal(__column239172, temp271);
    bool temp140180 = all(temp139179);
    bool temp141181 = temp137177 && temp140180;
    vec4 element2252182 = un34[2];
    bvec4 temp143183 = equal(__column242173, element2252182);
    bool temp144184 = all(temp143183);
    bool temp145185 = temp141181 && temp144184;
    vec4 element2254186 = un34[3];
    bvec4 temp147187 = equal(__column245174, element2254186);
    bool temp148188 = all(temp147187);
    bool temp149189 = temp145185 && temp148188;
    if (temp149189) {
        float __product263192 = u.x * __column236171.x;
        float __product266194 = u.y * __column239172.x;
        float __dotProduct267195 = __product263192 + __product266194;
        float __product270197 = u.z * __column242173.x;
        float __dotProduct271198 = __product270197 + __dotProduct267195;
        float __product274200 = u.w * __column245174.x;
        float __dotProduct275201 = __product274200 + __dotProduct271198;
        float __product278203 = u.x * __column236171.y;
        float __product281205 = u.y * __column239172.y;
        float __dotProduct282206 = __product278203 + __product281205;
        float __product285208 = u.z * __column242173.y;
        float __dotProduct286209 = __product285208 + __dotProduct282206;
        float __product289211 = u.w * __column245174.y;
        float __dotProduct290212 = __product289211 + __dotProduct286209;
        float __product293214 = u.x * __column236171.z;
        float __product296216 = u.y * __column239172.z;
        float __dotProduct297217 = __product293214 + __product296216;
        float __product300219 = u.z * __column242173.z;
        float __dotProduct301220 = __product300219 + __dotProduct297217;
        float __product304222 = u.w * __column245174.z;
        float __dotProduct305223 = __product304222 + __dotProduct301220;
        float __product308225 = u.x * __column236171.w;
        float __product311227 = u.y * __column239172.w;
        float __dotProduct312228 = __product308225 + __product311227;
        float __product315230 = u.z * __column242173.w;
        float __dotProduct316231 = __product315230 + __dotProduct312228;
        float __product319233 = u.w * __column245174.w;
        float __dotProduct320234 = __product319233 + __dotProduct316231;
        vec4 temp177 = vec4(__dotProduct275201, __dotProduct290212, __dotProduct305223, __dotProduct320234);
        _pn_0 = temp177;
    }
    else {
        vec4 __rightColumn323239 = um43[0];
        float __product325240 = element2248175.x * __rightColumn323239.x;
        float __product329241 = temp271.x * __rightColumn323239.y;
        float __dotProduct330242 = __product325240 + __product329241;
        float __product334243 = element2252182.x * __rightColumn323239.z;
        float __dotProduct335244 = __product334243 + __dotProduct330242;
        float __product339245 = element2254186.x * __rightColumn323239.w;
        float __dotProduct340246 = __product339245 + __dotProduct335244;
        float __product345247 = element2248175.y * __rightColumn323239.x;
        float __product349248 = temp271.y * __rightColumn323239.y;
        float __dotProduct350249 = __product345247 + __product349248;
        float __product354250 = element2252182.y * __rightColumn323239.z;
        float __dotProduct355251 = __product354250 + __dotProduct350249;
        float __product359252 = element2254186.y * __rightColumn323239.w;
        float __dotProduct360253 = __product359252 + __dotProduct355251;
        float __product365254 = element2248175.z * __rightColumn323239.x;
        float __product369255 = temp271.z * __rightColumn323239.y;
        float __dotProduct370256 = __product365254 + __product369255;
        float __product374257 = element2252182.z * __rightColumn323239.z;
        float __dotProduct375258 = __product374257 + __dotProduct370256;
        float __product379259 = element2254186.z * __rightColumn323239.w;
        float __dotProduct380260 = __product379259 + __dotProduct375258;
        float __product385261 = element2248175.w * __rightColumn323239.x;
        float __product389262 = temp271.w * __rightColumn323239.y;
        float __dotProduct390263 = __product385261 + __product389262;
        float __product394264 = element2252182.w * __rightColumn323239.z;
        float __dotProduct395265 = __product394264 + __dotProduct390263;
        float __product399266 = element2254186.w * __rightColumn323239.w;
        float __dotProduct400267 = __product399266 + __dotProduct395265;
        vec4 __rightColumn403268 = um43[1];
        float __product407269 = element2248175.x * __rightColumn403268.x;
        float __product411270 = temp271.x * __rightColumn403268.y;
        float __dotProduct412271 = __product407269 + __product411270;
        float __product416272 = element2252182.x * __rightColumn403268.z;
        float __dotProduct417273 = __product416272 + __dotProduct412271;
        float __product421274 = element2254186.x * __rightColumn403268.w;
        float __dotProduct422275 = __product421274 + __dotProduct417273;
        float __product427276 = element2248175.y * __rightColumn403268.x;
        float __product431277 = temp271.y * __rightColumn403268.y;
        float __dotProduct432278 = __product427276 + __product431277;
        float __product436279 = element2252182.y * __rightColumn403268.z;
        float __dotProduct437280 = __product436279 + __dotProduct432278;
        float __product441281 = element2254186.y * __rightColumn403268.w;
        float __dotProduct442282 = __product441281 + __dotProduct437280;
        float __product447283 = element2248175.z * __rightColumn403268.x;
        float __product451284 = temp271.z * __rightColumn403268.y;
        float __dotProduct452285 = __product447283 + __product451284;
        float __product456286 = element2252182.z * __rightColumn403268.z;
        float __dotProduct457287 = __product456286 + __dotProduct452285;
        float __product461288 = element2254186.z * __rightColumn403268.w;
        float __dotProduct462289 = __product461288 + __dotProduct457287;
        float __product467290 = element2248175.w * __rightColumn403268.x;
        float __product471291 = temp271.w * __rightColumn403268.y;
        float __dotProduct472292 = __product467290 + __product471291;
        float __product476293 = element2252182.w * __rightColumn403268.z;
        float __dotProduct477294 = __product476293 + __dotProduct472292;
        float __product481295 = element2254186.w * __rightColumn403268.w;
        float __dotProduct482296 = __product481295 + __dotProduct477294;
        vec4 __rightColumn485297 = um43[2];
        float __product489298 = element2248175.x * __rightColumn485297.x;
        float __product493299 = temp271.x * __rightColumn485297.y;
        float __dotProduct494300 = __product489298 + __product493299;
        float __product498301 = element2252182.x * __rightColumn485297.z;
        float __dotProduct499302 = __product498301 + __dotProduct494300;
        float __product503303 = element2254186.x * __rightColumn485297.w;
        float __dotProduct504304 = __product503303 + __dotProduct499302;
        float __product509305 = element2248175.y * __rightColumn485297.x;
        float __product513306 = temp271.y * __rightColumn485297.y;
        float __dotProduct514307 = __product509305 + __product513306;
        float __product518308 = element2252182.y * __rightColumn485297.z;
        float __dotProduct519309 = __product518308 + __dotProduct514307;
        float __product523310 = element2254186.y * __rightColumn485297.w;
        float __dotProduct524311 = __product523310 + __dotProduct519309;
        float __product529312 = element2248175.z * __rightColumn485297.x;
        float __product533313 = temp271.z * __rightColumn485297.y;
        float __dotProduct534314 = __product529312 + __product533313;
        float __product538315 = element2252182.z * __rightColumn485297.z;
        float __dotProduct539316 = __product538315 + __dotProduct534314;
        float __product543317 = element2254186.z * __rightColumn485297.w;
        float __dotProduct544318 = __product543317 + __dotProduct539316;
        float __product549319 = element2248175.w * __rightColumn485297.x;
        float __product553320 = temp271.w * __rightColumn485297.y;
        float __dotProduct554321 = __product549319 + __product553320;
        float __product558322 = element2252182.w * __rightColumn485297.z;
        float __dotProduct559323 = __product558322 + __dotProduct554321;
        float __product563324 = element2254186.w * __rightColumn485297.w;
        float __dotProduct564325 = __product563324 + __dotProduct559323;
        vec4 __rightColumn567326 = um43[3];
        float __product571327 = element2248175.x * __rightColumn567326.x;
        float __product575328 = temp271.x * __rightColumn567326.y;
        float __dotProduct576329 = __product571327 + __product575328;
        float __product580330 = element2252182.x * __rightColumn567326.z;
        float __dotProduct581331 = __product580330 + __dotProduct576329;
        float __product585332 = element2254186.x * __rightColumn567326.w;
        float __dotProduct586333 = __product585332 + __dotProduct581331;
        float __product591334 = element2248175.y * __rightColumn567326.x;
        float __product595335 = temp271.y * __rightColumn567326.y;
        float __dotProduct596336 = __product591334 + __product595335;
        float __product600337 = element2252182.y * __rightColumn567326.z;
        float __dotProduct601338 = __product600337 + __dotProduct596336;
        float __product605339 = element2254186.y * __rightColumn567326.w;
        float __dotProduct606340 = __product605339 + __dotProduct601338;
        float __product611341 = element2248175.z * __rightColumn567326.x;
        float __product615342 = temp271.z * __rightColumn567326.y;
        float __dotProduct616343 = __product611341 + __product615342;
        float __product620344 = element2252182.z * __rightColumn567326.z;
        float __dotProduct621345 = __product620344 + __dotProduct616343;
        float __product625346 = element2254186.z * __rightColumn567326.w;
        float __dotProduct626347 = __product625346 + __dotProduct621345;
        float __product631348 = element2248175.w * __rightColumn567326.x;
        float __product635349 = temp271.w * __rightColumn567326.y;
        float __dotProduct636350 = __product631348 + __product635349;
        float __product640351 = element2252182.w * __rightColumn567326.z;
        float __dotProduct641352 = __product640351 + __dotProduct636350;
        float __product645353 = element2254186.w * __rightColumn567326.w;
        float __dotProduct646354 = __product645353 + __dotProduct641352;
        float __product656355 = _pre_phi_0 * __dotProduct340246;
        float __product659356 = _pre_phi718_0 * __dotProduct422275;
        float __dotProduct660357 = __product656355 + __product659356;
        float __product663358 = _pre_phi720_0 * __dotProduct504304;
        float __dotProduct664359 = __product663358 + __dotProduct660357;
        float __product667360 = _pre_phi722_0 * __dotProduct586333;
        float __dotProduct668361 = __product667360 + __dotProduct664359;
        float __product671362 = _pre_phi_0 * __dotProduct360253;
        float __product674363 = _pre_phi718_0 * __dotProduct442282;
        float __dotProduct675364 = __product671362 + __product674363;
        float __product678365 = _pre_phi720_0 * __dotProduct524311;
        float __dotProduct679366 = __product678365 + __dotProduct675364;
        float __product682367 = _pre_phi722_0 * __dotProduct606340;
        float __dotProduct683368 = __product682367 + __dotProduct679366;
        float __product686369 = _pre_phi_0 * __dotProduct380260;
        float __product689370 = _pre_phi718_0 * __dotProduct462289;
        float __dotProduct690371 = __product686369 + __product689370;
        float __product693372 = _pre_phi720_0 * __dotProduct544318;
        float __dotProduct694373 = __product693372 + __dotProduct690371;
        float __product697374 = _pre_phi722_0 * __dotProduct626347;
        float __dotProduct698375 = __product697374 + __dotProduct694373;
        float __product701376 = _pre_phi_0 * __dotProduct400267;
        float __product704377 = _pre_phi718_0 * __dotProduct482296;
        float __dotProduct705378 = __product701376 + __product704377;
        float __product708379 = _pre_phi720_0 * __dotProduct564325;
        float __dotProduct709380 = __product708379 + __dotProduct705378;
        float __product712381 = _pre_phi722_0 * __dotProduct646354;
        float __dotProduct713382 = __product712381 + __dotProduct709380;
        vec4 temp322 = vec4(__dotProduct668361, __dotProduct683368, __dotProduct698375, __dotProduct713382);
        _pn_0 = temp322;
    }
    
    vec4 FragColor_shadow716_1387 = FragColor_shadow716_0_0 + _pn_0;
    gl_FragColor = FragColor_shadow716_1387;
    
}
