
Top IR:
; ModuleID = 'Top'

@BaseColor_shadow = internal global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@FragColor_shadow = internal global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float
@d13 = external addrspace(2) constant float
@d19 = external addrspace(2) constant float
@d20 = external addrspace(2) constant float
@d21 = external addrspace(2) constant float
@d22 = external addrspace(2) constant float
@d23 = external addrspace(2) constant float
@d24 = external addrspace(2) constant float
@d25 = external addrspace(2) constant float
@d26 = external addrspace(2) constant float
@d27 = external addrspace(2) constant float
@d28 = external addrspace(2) constant float
@d29 = external addrspace(2) constant float
@d30 = external addrspace(2) constant float
@d31 = external addrspace(2) constant float
@d32 = external addrspace(2) constant float
@d33 = external addrspace(2) constant float
@d34 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %i121 = alloca i32
  %i108 = alloca i32
  %i95 = alloca i32
  %i79 = alloca i32
  %i70 = alloca i32
  %i = alloca i32
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor, <4 x float>* @BaseColor_shadow
  %color1 = load <4 x float>* @BaseColor_shadow
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %post-loop-break11, %entry
  br i1 false, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fcmp olt float %1, 0x3FD51EB860000000
  br i1 %2, label %then2, label %ifmerge5

then2:                                            ; preds = %ifmerge
  %3 = load <4 x float>* %color
  %color3 = fadd <4 x float> %3, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color3, <4 x float>* %color
  br label %loop-merge

post-loop-break4:                                 ; No predecessors!
  br label %ifmerge5

ifmerge5:                                         ; preds = %ifmerge, %post-loop-break4
  %4 = load <4 x float>* %color
  %5 = extractelement <4 x float> %4, i32 0
  %6 = fcmp olt float %5, 0x3FE51EB860000000
  br i1 %6, label %then6, label %ifmerge9

then6:                                            ; preds = %ifmerge5
  %7 = load <4 x float>* %color
  %color7 = fadd <4 x float> %7, <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>
  store <4 x float> %color7, <4 x float>* %color
  br label %loop-merge

post-loop-break8:                                 ; No predecessors!
  br label %ifmerge9

ifmerge9:                                         ; preds = %ifmerge5, %post-loop-break8
  %8 = load <4 x float>* %color
  %color10 = fadd <4 x float> %8, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color10, <4 x float>* %color
  br label %loop-merge

post-loop-break11:                                ; No predecessors!
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %ifmerge9, %then6, %then2, %then
  br label %loop-header12

loop-header12:                                    ; preds = %post-loop-continue17, %ifmerge15, %loop-merge
  %9 = load <4 x float>* %color
  %10 = extractelement <4 x float> %9, i32 0
  %11 = load float addrspace(2)* @d, !gla.uniform !3
  %12 = fcmp olt float %10, %11
  %13 = xor i1 %12, true
  br i1 %13, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  br label %loop-merge18

post-loop-break14:                                ; No predecessors!
  br label %ifmerge15

ifmerge15:                                        ; preds = %loop-header12, %post-loop-break14
  %14 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %15 = load <4 x float>* %color
  %color16 = fadd <4 x float> %15, %14
  store <4 x float> %color16, <4 x float>* %color
  br label %loop-header12

post-loop-continue17:                             ; No predecessors!
  br label %loop-header12

loop-merge18:                                     ; preds = %then13
  br label %loop-header19

loop-header19:                                    ; preds = %post-loop-continue28, %ifmerge26, %then24, %loop-merge18
  %16 = load <4 x float>* %color
  %17 = extractelement <4 x float> %16, i32 2
  %18 = load float addrspace(2)* @d, !gla.uniform !3
  %19 = fcmp olt float %17, %18
  %20 = xor i1 %19, true
  br i1 %20, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header19
  br label %loop-merge29

post-loop-break21:                                ; No predecessors!
  br label %ifmerge22

ifmerge22:                                        ; preds = %loop-header19, %post-loop-break21
  %21 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %22 = load <4 x float>* %color
  %color23 = fadd <4 x float> %22, %21
  store <4 x float> %color23, <4 x float>* %color
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(2)* @d, !gla.uniform !3
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then24, label %ifmerge26

then24:                                           ; preds = %ifmerge22
  br label %loop-header19

post-loop-continue25:                             ; No predecessors!
  br label %ifmerge26

ifmerge26:                                        ; preds = %ifmerge22, %post-loop-continue25
  %27 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %28 = load <4 x float>* %color
  %color27 = fadd <4 x float> %28, %27
  store <4 x float> %color27, <4 x float>* %color
  br label %loop-header19

post-loop-continue28:                             ; No predecessors!
  br label %loop-header19

loop-merge29:                                     ; preds = %then20
  br label %loop-header30

loop-header30:                                    ; preds = %post-loop-continue35, %ifmerge33, %loop-merge29
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 0
  %31 = fcmp olt float %30, 4.200000e+01
  %32 = xor i1 %31, true
  br i1 %32, label %then31, label %ifmerge33

then31:                                           ; preds = %loop-header30
  br label %loop-merge36

post-loop-break32:                                ; No predecessors!
  br label %ifmerge33

ifmerge33:                                        ; preds = %loop-header30, %post-loop-break32
  %33 = load <4 x float>* %color
  %color34 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color34, <4 x float>* %color
  br label %loop-header30

post-loop-continue35:                             ; No predecessors!
  br label %loop-header30

loop-merge36:                                     ; preds = %then31
  br label %loop-header37

loop-header37:                                    ; preds = %post-loop-continue42, %ifmerge40, %loop-merge36
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 3
  %36 = load float addrspace(2)* @d2, !gla.uniform !7
  %37 = fcmp olt float %35, %36
  %38 = load <4 x float>* %color
  %39 = extractelement <4 x float> %38, i32 1
  %40 = load float addrspace(2)* @d3, !gla.uniform !8
  %41 = fcmp olt float %39, %40
  %42 = and i1 %37, %41
  %43 = xor i1 %42, true
  br i1 %43, label %then38, label %ifmerge40

then38:                                           ; preds = %loop-header37
  br label %loop-merge43

post-loop-break39:                                ; No predecessors!
  br label %ifmerge40

ifmerge40:                                        ; preds = %loop-header37, %post-loop-break39
  %44 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %45 = load <4 x float>* %color
  %color41 = fadd <4 x float> %45, %44
  store <4 x float> %color41, <4 x float>* %color
  br label %loop-header37

post-loop-continue42:                             ; No predecessors!
  br label %loop-header37

loop-merge43:                                     ; preds = %then38
  br label %loop-header44

loop-header44:                                    ; preds = %post-loop-continue53, %ifmerge51, %loop-merge43
  %46 = load <4 x float>* %color
  %47 = extractelement <4 x float> %46, i32 2
  %48 = load float addrspace(2)* @d3, !gla.uniform !8
  %49 = fcmp olt float %47, %48
  %50 = xor i1 %49, true
  br i1 %50, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge54

post-loop-break46:                                ; No predecessors!
  br label %ifmerge47

ifmerge47:                                        ; preds = %loop-header44, %post-loop-break46
  %51 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %52 = load <4 x float>* %color
  %color48 = fadd <4 x float> %52, %51
  store <4 x float> %color48, <4 x float>* %color
  %53 = load <4 x float>* %color
  %54 = extractelement <4 x float> %53, i32 1
  %55 = load float addrspace(2)* @d4, !gla.uniform !11
  %56 = fcmp olt float %54, %55
  br i1 %56, label %then49, label %ifmerge51

then49:                                           ; preds = %ifmerge47
  br label %loop-merge54

post-loop-break50:                                ; No predecessors!
  br label %ifmerge51

ifmerge51:                                        ; preds = %ifmerge47, %post-loop-break50
  %57 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %58 = load <4 x float>* %color
  %color52 = fadd <4 x float> %58, %57
  store <4 x float> %color52, <4 x float>* %color
  br label %loop-header44

post-loop-continue53:                             ; No predecessors!
  br label %loop-header44

loop-merge54:                                     ; preds = %then49, %then45
  store i32 0, i32* %i
  br label %loop-header55

loop-header55:                                    ; preds = %post-loop-continue61, %ifmerge58, %loop-merge54
  %59 = load i32* %i
  %60 = load i32 addrspace(2)* @Count, !gla.uniform !12
  %61 = icmp slt i32 %59, %60
  %62 = xor i1 %61, true
  br i1 %62, label %then56, label %ifmerge58

then56:                                           ; preds = %loop-header55
  br label %loop-merge62

post-loop-break57:                                ; No predecessors!
  br label %ifmerge58

ifmerge58:                                        ; preds = %loop-header55, %post-loop-break57
  %63 = load <4 x float> addrspace(2)* @bigColor2, !gla.uniform !13
  %64 = load <4 x float>* %color
  %color59 = fadd <4 x float> %64, %63
  store <4 x float> %color59, <4 x float>* %color
  %65 = load i32* %i
  %i60 = add i32 %65, 1
  store i32 %i60, i32* %i
  br label %loop-header55

post-loop-continue61:                             ; No predecessors!
  br label %loop-header55

loop-merge62:                                     ; preds = %then56
  br label %loop-header63

loop-header63:                                    ; preds = %post-loop-continue68, %ifmerge67, %loop-merge62
  %66 = load <4 x float> addrspace(2)* @bigColor3, !gla.uniform !14
  %67 = load <4 x float>* %color
  %color64 = fadd <4 x float> %67, %66
  store <4 x float> %color64, <4 x float>* %color
  %68 = load <4 x float>* %color
  %69 = extractelement <4 x float> %68, i32 0
  %70 = load float addrspace(2)* @d2, !gla.uniform !7
  %71 = fcmp olt float %69, %70
  %72 = xor i1 %71, true
  br i1 %72, label %then65, label %ifmerge67

then65:                                           ; preds = %loop-header63
  br label %loop-merge69

post-loop-break66:                                ; No predecessors!
  br label %ifmerge67

ifmerge67:                                        ; preds = %loop-header63, %post-loop-break66
  br label %loop-header63

post-loop-continue68:                             ; No predecessors!
  br label %loop-header63

loop-merge69:                                     ; preds = %then65
  store i32 0, i32* %i70
  br label %loop-header71

loop-header71:                                    ; preds = %post-loop-continue77, %ifmerge74, %loop-merge69
  %73 = load i32* %i70
  %74 = icmp slt i32 %73, 42
  %75 = xor i1 %74, true
  br i1 %75, label %then72, label %ifmerge74

then72:                                           ; preds = %loop-header71
  br label %loop-merge78

post-loop-break73:                                ; No predecessors!
  br label %ifmerge74

ifmerge74:                                        ; preds = %loop-header71, %post-loop-break73
  %76 = load float addrspace(2)* @d3, !gla.uniform !8
  %77 = load <4 x float>* %color
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %76
  %80 = load <4 x float>* %color
  %color75 = insertelement <4 x float> %80, float %79, i32 2
  store <4 x float> %color75, <4 x float>* %color
  %81 = load i32* %i70
  %i7076 = add i32 %81, 1
  store i32 %i7076, i32* %i70
  br label %loop-header71

post-loop-continue77:                             ; No predecessors!
  br label %loop-header71

loop-merge78:                                     ; preds = %then72
  store i32 0, i32* %i79
  br label %loop-header80

loop-header80:                                    ; preds = %post-loop-continue93, %ifmerge91, %loop-merge78
  %82 = load i32* %i79
  %83 = icmp slt i32 %82, 100
  %84 = xor i1 %83, true
  br i1 %84, label %then81, label %ifmerge83

then81:                                           ; preds = %loop-header80
  br label %loop-merge94

post-loop-break82:                                ; No predecessors!
  br label %ifmerge83

ifmerge83:                                        ; preds = %loop-header80, %post-loop-break82
  %85 = load <4 x float>* %color
  %86 = extractelement <4 x float> %85, i32 2
  %87 = fcmp olt float %86, 2.000000e+01
  br i1 %87, label %then84, label %else

then84:                                           ; preds = %ifmerge83
  %88 = load <4 x float>* %color
  %89 = extractelement <4 x float> %88, i32 0
  %90 = fadd float %89, 1.000000e+00
  %91 = load <4 x float>* %color
  %color85 = insertelement <4 x float> %91, float %90, i32 0
  store <4 x float> %color85, <4 x float>* %color
  br label %ifmerge87

else:                                             ; preds = %ifmerge83
  %92 = load <4 x float>* %color
  %93 = extractelement <4 x float> %92, i32 1
  %94 = fadd float %93, 1.000000e+00
  %95 = load <4 x float>* %color
  %color86 = insertelement <4 x float> %95, float %94, i32 1
  store <4 x float> %color86, <4 x float>* %color
  br label %ifmerge87

ifmerge87:                                        ; preds = %else, %then84
  %96 = load <4 x float>* %color
  %97 = extractelement <4 x float> %96, i32 3
  %98 = fcmp olt float %97, 2.000000e+01
  br i1 %98, label %then88, label %ifmerge91

then88:                                           ; preds = %ifmerge87
  %99 = load <4 x float>* %color
  %100 = extractelement <4 x float> %99, i32 2
  %101 = load <4 x float>* %color
  %102 = extractelement <4 x float> %101, i32 1
  %103 = fcmp ogt float %100, %102
  br i1 %103, label %then89, label %ifmerge90

then89:                                           ; preds = %then88
  br label %ifmerge90

ifmerge90:                                        ; preds = %then88, %then89
  br label %ifmerge91

ifmerge91:                                        ; preds = %ifmerge87, %ifmerge90
  %104 = load i32* %i79
  %i7992 = add i32 %104, 1
  store i32 %i7992, i32* %i79
  br label %loop-header80

post-loop-continue93:                             ; No predecessors!
  br label %loop-header80

loop-merge94:                                     ; preds = %then81
  store i32 0, i32* %i95
  br label %loop-header96

loop-header96:                                    ; preds = %post-loop-continue106, %ifmerge104, %loop-merge94
  %105 = load i32* %i95
  %106 = icmp slt i32 %105, 120
  %107 = xor i1 %106, true
  br i1 %107, label %then97, label %ifmerge99

then97:                                           ; preds = %loop-header96
  br label %loop-merge107

post-loop-break98:                                ; No predecessors!
  br label %ifmerge99

ifmerge99:                                        ; preds = %loop-header96, %post-loop-break98
  %108 = load <4 x float>* %color
  %109 = extractelement <4 x float> %108, i32 2
  %110 = fcmp olt float %109, 2.000000e+01
  br i1 %110, label %then100, label %else102

then100:                                          ; preds = %ifmerge99
  %111 = load <4 x float>* %color
  %112 = extractelement <4 x float> %111, i32 0
  %113 = fadd float %112, 1.000000e+00
  %114 = load <4 x float>* %color
  %color101 = insertelement <4 x float> %114, float %113, i32 0
  store <4 x float> %color101, <4 x float>* %color
  br label %ifmerge104

else102:                                          ; preds = %ifmerge99
  %115 = load <4 x float>* %color
  %116 = extractelement <4 x float> %115, i32 1
  %117 = fadd float %116, 1.000000e+00
  %118 = load <4 x float>* %color
  %color103 = insertelement <4 x float> %118, float %117, i32 1
  store <4 x float> %color103, <4 x float>* %color
  br label %ifmerge104

ifmerge104:                                       ; preds = %else102, %then100
  %119 = load i32* %i95
  %i95105 = add i32 %119, 1
  store i32 %i95105, i32* %i95
  br label %loop-header96

post-loop-continue106:                            ; No predecessors!
  br label %loop-header96

loop-merge107:                                    ; preds = %then97
  store i32 0, i32* %i108
  br label %loop-header109

loop-header109:                                   ; preds = %post-loop-continue119, %ifmerge116, %then114, %loop-merge107
  %120 = load i32* %i108
  %121 = icmp slt i32 %120, 42
  %122 = xor i1 %121, true
  br i1 %122, label %then110, label %ifmerge112

then110:                                          ; preds = %loop-header109
  br label %loop-merge120

post-loop-break111:                               ; No predecessors!
  br label %ifmerge112

ifmerge112:                                       ; preds = %loop-header109, %post-loop-break111
  %123 = load float addrspace(2)* @d3, !gla.uniform !8
  %124 = load <4 x float>* %color
  %125 = extractelement <4 x float> %124, i32 2
  %126 = fadd float %125, %123
  %127 = load <4 x float>* %color
  %color113 = insertelement <4 x float> %127, float %126, i32 2
  store <4 x float> %color113, <4 x float>* %color
  %128 = load <4 x float>* %color
  %129 = extractelement <4 x float> %128, i32 0
  %130 = load float addrspace(2)* @d4, !gla.uniform !11
  %131 = fcmp olt float %129, %130
  br i1 %131, label %then114, label %ifmerge116

then114:                                          ; preds = %ifmerge112
  br label %loop-header109

post-loop-continue115:                            ; No predecessors!
  br label %ifmerge116

ifmerge116:                                       ; preds = %ifmerge112, %post-loop-continue115
  %132 = load <4 x float>* %color
  %133 = extractelement <4 x float> %132, i32 3
  %134 = fadd float %133, 1.000000e+00
  %135 = load <4 x float>* %color
  %color117 = insertelement <4 x float> %135, float %134, i32 3
  store <4 x float> %color117, <4 x float>* %color
  %136 = load i32* %i108
  %i108118 = add i32 %136, 1
  store i32 %i108118, i32* %i108
  br label %loop-header109

post-loop-continue119:                            ; No predecessors!
  br label %loop-header109

loop-merge120:                                    ; preds = %then110
  store i32 0, i32* %i121
  br label %loop-header122

loop-header122:                                   ; preds = %post-loop-continue132, %ifmerge129, %loop-merge120
  %137 = load i32* %i121
  %138 = icmp slt i32 %137, 42
  %139 = xor i1 %138, true
  br i1 %139, label %then123, label %ifmerge125

then123:                                          ; preds = %loop-header122
  br label %loop-merge133

post-loop-break124:                               ; No predecessors!
  br label %ifmerge125

ifmerge125:                                       ; preds = %loop-header122, %post-loop-break124
  %140 = load float addrspace(2)* @d3, !gla.uniform !8
  %141 = load <4 x float>* %color
  %142 = extractelement <4 x float> %141, i32 2
  %143 = fadd float %142, %140
  %144 = load <4 x float>* %color
  %color126 = insertelement <4 x float> %144, float %143, i32 2
  store <4 x float> %color126, <4 x float>* %color
  %145 = load <4 x float>* %color
  %146 = extractelement <4 x float> %145, i32 0
  %147 = load float addrspace(2)* @d4, !gla.uniform !11
  %148 = fcmp olt float %146, %147
  br i1 %148, label %then127, label %ifmerge129

then127:                                          ; preds = %ifmerge125
  br label %loop-merge133

post-loop-break128:                               ; No predecessors!
  br label %ifmerge129

ifmerge129:                                       ; preds = %ifmerge125, %post-loop-break128
  %149 = load <4 x float>* %color
  %150 = extractelement <4 x float> %149, i32 3
  %151 = fadd float %150, 1.000000e+00
  %152 = load <4 x float>* %color
  %color130 = insertelement <4 x float> %152, float %151, i32 3
  store <4 x float> %color130, <4 x float>* %color
  %153 = load i32* %i121
  %i121131 = add i32 %153, 1
  store i32 %i121131, i32* %i121
  br label %loop-header122

post-loop-continue132:                            ; No predecessors!
  br label %loop-header122

loop-merge133:                                    ; preds = %then127, %then123
  br label %loop-header134

loop-header134:                                   ; preds = %post-loop-continue147, %ifmerge146, %then136, %loop-merge133
  %154 = load <4 x float> addrspace(2)* @bigColor4, !gla.uniform !15
  %155 = load <4 x float>* %color
  %color135 = fadd <4 x float> %155, %154
  store <4 x float> %color135, <4 x float>* %color
  %156 = load <4 x float>* %color
  %157 = extractelement <4 x float> %156, i32 0
  %158 = load float addrspace(2)* @d4, !gla.uniform !11
  %159 = fcmp olt float %157, %158
  br i1 %159, label %then136, label %ifmerge138

then136:                                          ; preds = %loop-header134
  br label %loop-header134

post-loop-continue137:                            ; No predecessors!
  br label %ifmerge138

ifmerge138:                                       ; preds = %loop-header134, %post-loop-continue137
  %160 = load <4 x float>* %color
  %161 = extractelement <4 x float> %160, i32 1
  %162 = load float addrspace(2)* @d4, !gla.uniform !11
  %163 = fcmp olt float %161, %162
  br i1 %163, label %then139, label %else141

then139:                                          ; preds = %ifmerge138
  %164 = load float addrspace(2)* @d4, !gla.uniform !11
  %165 = load <4 x float>* %color
  %166 = extractelement <4 x float> %165, i32 1
  %167 = fadd float %166, %164
  %168 = load <4 x float>* %color
  %color140 = insertelement <4 x float> %168, float %167, i32 1
  store <4 x float> %color140, <4 x float>* %color
  br label %ifmerge143

else141:                                          ; preds = %ifmerge138
  %169 = load float addrspace(2)* @d4, !gla.uniform !11
  %170 = load <4 x float>* %color
  %171 = extractelement <4 x float> %170, i32 0
  %172 = fadd float %171, %169
  %173 = load <4 x float>* %color
  %color142 = insertelement <4 x float> %173, float %172, i32 0
  store <4 x float> %color142, <4 x float>* %color
  br label %ifmerge143

ifmerge143:                                       ; preds = %else141, %then139
  %174 = load <4 x float>* %color
  %175 = extractelement <4 x float> %174, i32 2
  %176 = load float addrspace(2)* @d4, !gla.uniform !11
  %177 = fcmp olt float %175, %176
  %178 = xor i1 %177, true
  br i1 %178, label %then144, label %ifmerge146

then144:                                          ; preds = %ifmerge143
  br label %loop-merge148

post-loop-break145:                               ; No predecessors!
  br label %ifmerge146

ifmerge146:                                       ; preds = %ifmerge143, %post-loop-break145
  br label %loop-header134

post-loop-continue147:                            ; No predecessors!
  br label %loop-header134

loop-merge148:                                    ; preds = %then144
  br label %loop-header149

loop-header149:                                   ; preds = %post-loop-continue157, %ifmerge156, %loop-merge148
  %179 = load <4 x float> addrspace(2)* @bigColor5, !gla.uniform !16
  %180 = load <4 x float>* %color
  %color150 = fadd <4 x float> %180, %179
  store <4 x float> %color150, <4 x float>* %color
  %181 = load <4 x float>* %color
  %182 = extractelement <4 x float> %181, i32 1
  %183 = load float addrspace(2)* @d5, !gla.uniform !17
  %184 = fcmp olt float %182, %183
  br i1 %184, label %then151, label %ifmerge153

then151:                                          ; preds = %loop-header149
  %185 = load float addrspace(2)* @d5, !gla.uniform !17
  %186 = load <4 x float>* %color
  %187 = extractelement <4 x float> %186, i32 1
  %188 = fadd float %187, %185
  %189 = load <4 x float>* %color
  %color152 = insertelement <4 x float> %189, float %188, i32 1
  store <4 x float> %color152, <4 x float>* %color
  br label %ifmerge153

ifmerge153:                                       ; preds = %loop-header149, %then151
  %190 = load <4 x float>* %color
  %191 = extractelement <4 x float> %190, i32 0
  %192 = load float addrspace(2)* @d5, !gla.uniform !17
  %193 = fcmp olt float %191, %192
  %194 = xor i1 %193, true
  br i1 %194, label %then154, label %ifmerge156

then154:                                          ; preds = %ifmerge153
  br label %loop-merge158

post-loop-break155:                               ; No predecessors!
  br label %ifmerge156

ifmerge156:                                       ; preds = %ifmerge153, %post-loop-break155
  br label %loop-header149

post-loop-continue157:                            ; No predecessors!
  br label %loop-header149

loop-merge158:                                    ; preds = %then154
  %195 = load <4 x float>* %color
  %196 = extractelement <4 x float> %195, i32 0
  %197 = load float addrspace(2)* @d6, !gla.uniform !18
  %198 = fcmp olt float %196, %197
  br i1 %198, label %then159, label %else167

then159:                                          ; preds = %loop-merge158
  br label %loop-header160

loop-header160:                                   ; preds = %post-loop-continue165, %ifmerge163, %then159
  %199 = load <4 x float>* %color
  %200 = extractelement <4 x float> %199, i32 1
  %201 = load float addrspace(2)* @d6, !gla.uniform !18
  %202 = fcmp olt float %200, %201
  %203 = xor i1 %202, true
  br i1 %203, label %then161, label %ifmerge163

then161:                                          ; preds = %loop-header160
  br label %loop-merge166

post-loop-break162:                               ; No predecessors!
  br label %ifmerge163

ifmerge163:                                       ; preds = %loop-header160, %post-loop-break162
  %204 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %205 = load <4 x float>* %color
  %color164 = fadd <4 x float> %205, %204
  store <4 x float> %color164, <4 x float>* %color
  br label %loop-header160

post-loop-continue165:                            ; No predecessors!
  br label %loop-header160

loop-merge166:                                    ; preds = %then161
  br label %ifmerge175

else167:                                          ; preds = %loop-merge158
  br label %loop-header168

loop-header168:                                   ; preds = %post-loop-continue173, %ifmerge171, %else167
  %206 = load <4 x float>* %color
  %207 = extractelement <4 x float> %206, i32 2
  %208 = load float addrspace(2)* @d6, !gla.uniform !18
  %209 = fcmp olt float %207, %208
  %210 = xor i1 %209, true
  br i1 %210, label %then169, label %ifmerge171

then169:                                          ; preds = %loop-header168
  br label %loop-merge174

post-loop-break170:                               ; No predecessors!
  br label %ifmerge171

ifmerge171:                                       ; preds = %loop-header168, %post-loop-break170
  %211 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %212 = extractelement <4 x float> %211, i32 2
  %213 = load <4 x float>* %color
  %214 = extractelement <4 x float> %213, i32 2
  %215 = fadd float %214, %212
  %216 = load <4 x float>* %color
  %color172 = insertelement <4 x float> %216, float %215, i32 2
  store <4 x float> %color172, <4 x float>* %color
  br label %loop-header168

post-loop-continue173:                            ; No predecessors!
  br label %loop-header168

loop-merge174:                                    ; preds = %then169
  br label %ifmerge175

ifmerge175:                                       ; preds = %loop-merge174, %loop-merge166
  %217 = load <4 x float>* %color
  %218 = extractelement <4 x float> %217, i32 0
  %219 = load float addrspace(2)* @d6, !gla.uniform !18
  %220 = fcmp olt float %218, %219
  br i1 %220, label %then176, label %else187

then176:                                          ; preds = %ifmerge175
  br label %loop-header177

loop-header177:                                   ; preds = %post-loop-continue185, %ifmerge184, %then176
  %221 = load <4 x float>* %color
  %222 = extractelement <4 x float> %221, i32 1
  %223 = load float addrspace(2)* @d6, !gla.uniform !18
  %224 = fcmp olt float %222, %223
  %225 = xor i1 %224, true
  br i1 %225, label %then178, label %ifmerge180

then178:                                          ; preds = %loop-header177
  br label %loop-merge186

post-loop-break179:                               ; No predecessors!
  br label %ifmerge180

ifmerge180:                                       ; preds = %loop-header177, %post-loop-break179
  %226 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %227 = load <4 x float>* %color
  %color181 = fadd <4 x float> %227, %226
  store <4 x float> %color181, <4 x float>* %color
  %228 = load float addrspace(2)* @d7, !gla.uniform !20
  %229 = fcmp olt float %228, 1.000000e+00
  br i1 %229, label %then182, label %ifmerge184

then182:                                          ; preds = %ifmerge180
  br label %loop-merge186

post-loop-break183:                               ; No predecessors!
  br label %ifmerge184

ifmerge184:                                       ; preds = %ifmerge180, %post-loop-break183
  br label %loop-header177

post-loop-continue185:                            ; No predecessors!
  br label %loop-header177

loop-merge186:                                    ; preds = %then182, %then178
  br label %ifmerge195

else187:                                          ; preds = %ifmerge175
  br label %loop-header188

loop-header188:                                   ; preds = %post-loop-continue193, %ifmerge191, %else187
  %230 = load <4 x float>* %color
  %231 = extractelement <4 x float> %230, i32 2
  %232 = load float addrspace(2)* @d6, !gla.uniform !18
  %233 = fcmp olt float %231, %232
  %234 = xor i1 %233, true
  br i1 %234, label %then189, label %ifmerge191

then189:                                          ; preds = %loop-header188
  br label %loop-merge194

post-loop-break190:                               ; No predecessors!
  br label %ifmerge191

ifmerge191:                                       ; preds = %loop-header188, %post-loop-break190
  %235 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %236 = extractelement <4 x float> %235, i32 2
  %237 = load <4 x float>* %color
  %238 = extractelement <4 x float> %237, i32 2
  %239 = fadd float %238, %236
  %240 = load <4 x float>* %color
  %color192 = insertelement <4 x float> %240, float %239, i32 2
  store <4 x float> %color192, <4 x float>* %color
  br label %loop-header188

post-loop-continue193:                            ; No predecessors!
  br label %loop-header188

loop-merge194:                                    ; preds = %then189
  br label %ifmerge195

ifmerge195:                                       ; preds = %loop-merge194, %loop-merge186
  br label %loop-header196

loop-header196:                                   ; preds = %post-loop-continue210, %ifmerge209, %ifmerge195
  %241 = load float addrspace(2)* @d7, !gla.uniform !20
  %242 = fcmp olt float %241, 0.000000e+00
  br i1 %242, label %then197, label %ifmerge199

then197:                                          ; preds = %loop-header196
  br label %loop-merge211

post-loop-break198:                               ; No predecessors!
  br label %ifmerge199

ifmerge199:                                       ; preds = %loop-header196, %post-loop-break198
  %243 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %244 = load <4 x float>* %color
  %color200 = fadd <4 x float> %244, %243
  store <4 x float> %color200, <4 x float>* %color
  %245 = load float addrspace(2)* @d7, !gla.uniform !20
  %246 = fcmp olt float %245, 1.000000e+00
  br i1 %246, label %then201, label %ifmerge204

then201:                                          ; preds = %ifmerge199
  %247 = load <4 x float>* %color
  %248 = extractelement <4 x float> %247, i32 2
  %249 = fadd float %248, 1.000000e+00
  %250 = load <4 x float>* %color
  %color202 = insertelement <4 x float> %250, float %249, i32 2
  store <4 x float> %color202, <4 x float>* %color
  br label %loop-merge211

post-loop-break203:                               ; No predecessors!
  br label %ifmerge204

ifmerge204:                                       ; preds = %ifmerge199, %post-loop-break203
  %BaseColor205 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor205, <4 x float>* @BaseColor_shadow
  %251 = load <4 x float>* @BaseColor_shadow
  %252 = load <4 x float>* %color
  %color206 = fadd <4 x float> %252, %251
  store <4 x float> %color206, <4 x float>* %color
  br i1 false, label %then207, label %ifmerge209

then207:                                          ; preds = %ifmerge204
  br label %loop-merge211

post-loop-break208:                               ; No predecessors!
  br label %ifmerge209

ifmerge209:                                       ; preds = %ifmerge204, %post-loop-break208
  br label %loop-header196

post-loop-continue210:                            ; No predecessors!
  br label %loop-header196

loop-merge211:                                    ; preds = %then207, %then201, %then197
  br label %loop-header212

loop-header212:                                   ; preds = %post-loop-continue231, %ifmerge230, %loop-merge211
  %253 = load float addrspace(2)* @d8, !gla.uniform !22
  %254 = fcmp olt float %253, 0.000000e+00
  br i1 %254, label %then213, label %ifmerge215

then213:                                          ; preds = %loop-header212
  br label %loop-merge232

post-loop-break214:                               ; No predecessors!
  br label %ifmerge215

ifmerge215:                                       ; preds = %loop-header212, %post-loop-break214
  %255 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %256 = load <4 x float>* %color
  %color216 = fadd <4 x float> %256, %255
  store <4 x float> %color216, <4 x float>* %color
  %257 = load float addrspace(2)* @d8, !gla.uniform !22
  %258 = fcmp olt float %257, 1.000000e+00
  br i1 %258, label %then217, label %ifmerge225

then217:                                          ; preds = %ifmerge215
  %259 = load <4 x float>* %color
  %260 = extractelement <4 x float> %259, i32 2
  %261 = fadd float %260, 1.000000e+00
  %262 = load <4 x float>* %color
  %color218 = insertelement <4 x float> %262, float %261, i32 2
  store <4 x float> %color218, <4 x float>* %color
  %263 = load float addrspace(2)* @d8, !gla.uniform !22
  %264 = fcmp olt float %263, 2.000000e+00
  br i1 %264, label %then219, label %else221

then219:                                          ; preds = %then217
  %265 = load <4 x float>* %color
  %266 = extractelement <4 x float> %265, i32 1
  %267 = fadd float %266, 1.000000e+00
  %268 = load <4 x float>* %color
  %color220 = insertelement <4 x float> %268, float %267, i32 1
  store <4 x float> %color220, <4 x float>* %color
  br label %ifmerge223

else221:                                          ; preds = %then217
  %269 = load <4 x float>* %color
  %270 = extractelement <4 x float> %269, i32 0
  %271 = fadd float %270, 1.000000e+00
  %272 = load <4 x float>* %color
  %color222 = insertelement <4 x float> %272, float %271, i32 0
  store <4 x float> %color222, <4 x float>* %color
  br label %ifmerge223

ifmerge223:                                       ; preds = %else221, %then219
  br label %loop-merge232

post-loop-break224:                               ; No predecessors!
  br label %ifmerge225

ifmerge225:                                       ; preds = %ifmerge215, %post-loop-break224
  %BaseColor226 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  store <4 x float> %BaseColor226, <4 x float>* @BaseColor_shadow
  %273 = load <4 x float>* @BaseColor_shadow
  %274 = load <4 x float>* %color
  %color227 = fadd <4 x float> %274, %273
  store <4 x float> %color227, <4 x float>* %color
  %275 = load <4 x float>* %color
  %276 = extractelement <4 x float> %275, i32 2
  %277 = load float addrspace(2)* @d8, !gla.uniform !22
  %278 = fcmp olt float %276, %277
  %279 = xor i1 %278, true
  br i1 %279, label %then228, label %ifmerge230

then228:                                          ; preds = %ifmerge225
  br label %loop-merge232

post-loop-break229:                               ; No predecessors!
  br label %ifmerge230

ifmerge230:                                       ; preds = %ifmerge225, %post-loop-break229
  br label %loop-header212

post-loop-continue231:                            ; No predecessors!
  br label %loop-header212

loop-merge232:                                    ; preds = %then228, %ifmerge223, %then213
  br label %loop-header233

loop-header233:                                   ; preds = %post-loop-continue246, %ifmerge245, %loop-merge232
  %280 = load <4 x float>* %color
  %281 = extractelement <4 x float> %280, i32 3
  %282 = load float addrspace(2)* @d9, !gla.uniform !23
  %283 = fcmp olt float %281, %282
  %284 = xor i1 %283, true
  br i1 %284, label %then234, label %ifmerge236

then234:                                          ; preds = %loop-header233
  br label %loop-merge247

post-loop-break235:                               ; No predecessors!
  br label %ifmerge236

ifmerge236:                                       ; preds = %loop-header233, %post-loop-break235
  %285 = load float addrspace(2)* @d9, !gla.uniform !23
  %286 = load float addrspace(2)* @d8, !gla.uniform !22
  %287 = fcmp ogt float %285, %286
  br i1 %287, label %then237, label %ifmerge245

then237:                                          ; preds = %ifmerge236
  %288 = load <4 x float>* %color
  %289 = extractelement <4 x float> %288, i32 0
  %290 = load float addrspace(2)* @d7, !gla.uniform !20
  %291 = fcmp ole float %289, %290
  br i1 %291, label %then238, label %ifmerge244

then238:                                          ; preds = %then237
  %292 = load <4 x float>* %color
  %293 = extractelement <4 x float> %292, i32 2
  %294 = fcmp oeq float %293, 5.000000e+00
  br i1 %294, label %then239, label %else241

then239:                                          ; preds = %then238
  %295 = load <4 x float>* %color
  %296 = extractelement <4 x float> %295, i32 3
  %297 = fadd float %296, 1.000000e+00
  %298 = load <4 x float>* %color
  %color240 = insertelement <4 x float> %298, float %297, i32 3
  store <4 x float> %color240, <4 x float>* %color
  br label %ifmerge243

else241:                                          ; preds = %then238
  br label %loop-merge247

post-loop-break242:                               ; No predecessors!
  br label %ifmerge243

ifmerge243:                                       ; preds = %post-loop-break242, %then239
  br label %ifmerge244

ifmerge244:                                       ; preds = %then237, %ifmerge243
  br label %ifmerge245

ifmerge245:                                       ; preds = %ifmerge236, %ifmerge244
  br label %loop-header233

post-loop-continue246:                            ; No predecessors!
  br label %loop-header233

loop-merge247:                                    ; preds = %else241, %then234
  br label %loop-header248

loop-header248:                                   ; preds = %post-loop-continue264, %post-loop-break263, %ifmerge259, %loop-merge247
  %299 = load <4 x float>* %color
  %300 = extractelement <4 x float> %299, i32 2
  %301 = load float addrspace(2)* @d10, !gla.uniform !24
  %302 = fcmp olt float %300, %301
  %303 = xor i1 %302, true
  br i1 %303, label %then249, label %ifmerge251

then249:                                          ; preds = %loop-header248
  br label %loop-merge265

post-loop-break250:                               ; No predecessors!
  br label %ifmerge251

ifmerge251:                                       ; preds = %loop-header248, %post-loop-break250
  %304 = load <4 x float>* %color
  %305 = extractelement <4 x float> %304, i32 1
  %306 = fadd float %305, 1.000000e+00
  %307 = load <4 x float>* %color
  %color252 = insertelement <4 x float> %307, float %306, i32 1
  store <4 x float> %color252, <4 x float>* %color
  %308 = load <4 x float>* %color
  %309 = extractelement <4 x float> %308, i32 1
  %310 = load float addrspace(2)* @d11, !gla.uniform !25
  %311 = fcmp olt float %309, %310
  br i1 %311, label %then253, label %ifmerge261

then253:                                          ; preds = %ifmerge251
  %312 = load <4 x float>* %color
  %313 = extractelement <4 x float> %312, i32 2
  %314 = fadd float %313, 1.000000e+00
  %315 = load <4 x float>* %color
  %color254 = insertelement <4 x float> %315, float %314, i32 2
  store <4 x float> %color254, <4 x float>* %color
  %316 = load <4 x float>* %color
  %317 = extractelement <4 x float> %316, i32 3
  %318 = load float addrspace(2)* @d12, !gla.uniform !26
  %319 = fcmp olt float %317, %318
  br i1 %319, label %then255, label %else257

then255:                                          ; preds = %then253
  %320 = load <4 x float>* %color
  %321 = extractelement <4 x float> %320, i32 3
  %322 = fadd float %321, 1.000000e+00
  %323 = load <4 x float>* %color
  %color256 = insertelement <4 x float> %323, float %322, i32 3
  store <4 x float> %color256, <4 x float>* %color
  br label %ifmerge259

else257:                                          ; preds = %then253
  %324 = load <4 x float>* %color
  %325 = extractelement <4 x float> %324, i32 0
  %326 = fadd float %325, 1.000000e+00
  %327 = load <4 x float>* %color
  %color258 = insertelement <4 x float> %327, float %326, i32 0
  store <4 x float> %color258, <4 x float>* %color
  br label %ifmerge259

ifmerge259:                                       ; preds = %else257, %then255
  br label %loop-header248

post-loop-continue260:                            ; No predecessors!
  br label %ifmerge261

ifmerge261:                                       ; preds = %ifmerge251, %post-loop-continue260
  %328 = load <4 x float>* %color
  %color262 = fadd <4 x float> %328, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color262, <4 x float>* %color
  br label %loop-merge265

post-loop-break263:                               ; No predecessors!
  br label %loop-header248

post-loop-continue264:                            ; No predecessors!
  br label %loop-header248

loop-merge265:                                    ; preds = %ifmerge261, %then249
  br label %loop-header266

loop-header266:                                   ; preds = %post-loop-continue277, %ifmerge275, %then272, %loop-merge265
  %329 = load <4 x float>* %color
  %330 = extractelement <4 x float> %329, i32 0
  %331 = fcmp olt float %330, 1.000000e+01
  %332 = xor i1 %331, true
  br i1 %332, label %then267, label %ifmerge269

then267:                                          ; preds = %loop-header266
  br label %loop-merge278

post-loop-break268:                               ; No predecessors!
  br label %ifmerge269

ifmerge269:                                       ; preds = %loop-header266, %post-loop-break268
  %333 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %334 = load <4 x float>* %color
  %color270 = fadd <4 x float> %334, %333
  store <4 x float> %color270, <4 x float>* %color
  %335 = load <4 x float>* %color
  %336 = extractelement <4 x float> %335, i32 2
  %337 = load float addrspace(2)* @d8, !gla.uniform !22
  %338 = fcmp olt float %336, %337
  br i1 %338, label %then271, label %ifmerge275

then271:                                          ; preds = %ifmerge269
  %339 = load <4 x float>* %color
  %340 = extractelement <4 x float> %339, i32 3
  %341 = load float addrspace(2)* @d6, !gla.uniform !18
  %342 = fcmp olt float %340, %341
  br i1 %342, label %then272, label %ifmerge274

then272:                                          ; preds = %then271
  br label %loop-header266

post-loop-continue273:                            ; No predecessors!
  br label %ifmerge274

ifmerge274:                                       ; preds = %then271, %post-loop-continue273
  br label %ifmerge275

ifmerge275:                                       ; preds = %ifmerge269, %ifmerge274
  %343 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %344 = extractelement <4 x float> %343, i32 0
  %345 = load <4 x float>* %color
  %346 = extractelement <4 x float> %345, i32 1
  %347 = fadd float %346, %344
  %348 = load <4 x float>* %color
  %color276 = insertelement <4 x float> %348, float %347, i32 1
  store <4 x float> %color276, <4 x float>* %color
  br label %loop-header266

post-loop-continue277:                            ; No predecessors!
  br label %loop-header266

loop-merge278:                                    ; preds = %then267
  %349 = load <4 x float>* %color
  %color279 = fadd <4 x float> %349, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color279, <4 x float>* %color
  %FragColor_shadow = load <4 x float>* %color
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %loop-header280

loop-header280:                                   ; preds = %post-loop-continue288, %ifmerge287, %loop-merge278
  %350 = load <4 x float>* %color
  %351 = extractelement <4 x float> %350, i32 0
  %352 = load float addrspace(2)* @d14, !gla.uniform !28
  %353 = fcmp olt float %351, %352
  %354 = xor i1 %353, true
  br i1 %354, label %then281, label %ifmerge283

then281:                                          ; preds = %loop-header280
  br label %loop-merge289

post-loop-break282:                               ; No predecessors!
  br label %ifmerge283

ifmerge283:                                       ; preds = %loop-header280, %post-loop-break282
  %355 = load <4 x float>* %color
  %356 = extractelement <4 x float> %355, i32 1
  %357 = load float addrspace(2)* @d15, !gla.uniform !29
  %358 = fcmp olt float %356, %357
  br i1 %358, label %then284, label %else285

then284:                                          ; preds = %ifmerge283
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge287

else285:                                          ; preds = %ifmerge283
  %359 = load <4 x float>* %color
  %color286 = fadd <4 x float> %359, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color286, <4 x float>* %color
  br label %ifmerge287

ifmerge287:                                       ; preds = %else285, %post-return
  br label %loop-header280

post-loop-continue288:                            ; No predecessors!
  br label %loop-header280

loop-merge289:                                    ; preds = %then281
  %360 = load <4 x float>* %color
  %color290 = fadd <4 x float> %360, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color290, <4 x float>* %color
  br label %loop-header291

loop-header291:                                   ; preds = %post-loop-continue296, %ifmerge294, %loop-merge289
  %361 = load <4 x float>* %color
  %362 = extractelement <4 x float> %361, i32 3
  %363 = load float addrspace(2)* @d16, !gla.uniform !30
  %364 = fcmp olt float %362, %363
  %365 = xor i1 %364, true
  br i1 %365, label %then292, label %ifmerge294

then292:                                          ; preds = %loop-header291
  br label %loop-merge297

post-loop-break293:                               ; No predecessors!
  br label %ifmerge294

ifmerge294:                                       ; preds = %loop-header291, %post-loop-break293
  %366 = load <4 x float>* %color
  %367 = extractelement <4 x float> %366, i32 3
  %368 = fadd float %367, 1.000000e+00
  %369 = load <4 x float>* %color
  %color295 = insertelement <4 x float> %369, float %368, i32 3
  store <4 x float> %color295, <4 x float>* %color
  br label %loop-header291

post-loop-continue296:                            ; No predecessors!
  br label %loop-header291

loop-merge297:                                    ; preds = %then292
  br label %loop-header298

loop-header298:                                   ; preds = %post-loop-continue306, %ifmerge305, %loop-merge297
  %370 = load <4 x float>* %color
  %371 = extractelement <4 x float> %370, i32 3
  %372 = load float addrspace(2)* @d2, !gla.uniform !7
  %373 = fcmp olt float %371, %372
  %374 = load <4 x float>* %color
  %375 = extractelement <4 x float> %374, i32 1
  %376 = load float addrspace(2)* @d3, !gla.uniform !8
  %377 = fcmp olt float %375, %376
  %378 = and i1 %373, %377
  %379 = xor i1 %378, true
  br i1 %379, label %then299, label %ifmerge301

then299:                                          ; preds = %loop-header298
  br label %loop-merge307

post-loop-break300:                               ; No predecessors!
  br label %ifmerge301

ifmerge301:                                       ; preds = %loop-header298, %post-loop-break300
  %380 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %381 = load <4 x float>* %color
  %color302 = fadd <4 x float> %381, %380
  store <4 x float> %color302, <4 x float>* %color
  %382 = load <4 x float>* %color
  %383 = extractelement <4 x float> %382, i32 2
  %384 = load float addrspace(2)* @d3, !gla.uniform !8
  %385 = fcmp olt float %383, %384
  br i1 %385, label %then303, label %ifmerge305

then303:                                          ; preds = %ifmerge301
  br label %stage-epilogue

post-return304:                                   ; No predecessors!
  br label %ifmerge305

ifmerge305:                                       ; preds = %ifmerge301, %post-return304
  br label %loop-header298

post-loop-continue306:                            ; No predecessors!
  br label %loop-header298

loop-merge307:                                    ; preds = %then299
  br label %loop-header308

loop-header308:                                   ; preds = %post-loop-continue316, %ifmerge315, %loop-merge307
  %386 = load <4 x float>* %color
  %387 = extractelement <4 x float> %386, i32 1
  %388 = load float addrspace(2)* @d18, !gla.uniform !31
  %389 = fcmp olt float %387, %388
  br i1 %389, label %then309, label %ifmerge311

then309:                                          ; preds = %loop-header308
  br label %stage-epilogue

post-return310:                                   ; No predecessors!
  br label %ifmerge311

ifmerge311:                                       ; preds = %loop-header308, %post-return310
  %390 = load <4 x float>* %color
  %color312 = fadd <4 x float> %390, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color312, <4 x float>* %color
  %391 = load <4 x float>* %color
  %392 = extractelement <4 x float> %391, i32 0
  %393 = load float addrspace(2)* @d17, !gla.uniform !32
  %394 = fcmp olt float %392, %393
  %395 = xor i1 %394, true
  br i1 %395, label %then313, label %ifmerge315

then313:                                          ; preds = %ifmerge311
  br label %loop-merge317

post-loop-break314:                               ; No predecessors!
  br label %ifmerge315

ifmerge315:                                       ; preds = %ifmerge311, %post-loop-break314
  br label %loop-header308

post-loop-continue316:                            ; No predecessors!
  br label %loop-header308

loop-merge317:                                    ; preds = %then313
  br label %loop-header318

loop-header318:                                   ; preds = %post-loop-continue326, %ifmerge325, %loop-merge317
  %396 = load <4 x float>* %color
  %397 = extractelement <4 x float> %396, i32 1
  %398 = load float addrspace(2)* @d16, !gla.uniform !30
  %399 = fcmp olt float %397, %398
  %400 = xor i1 %399, true
  br i1 %400, label %then319, label %ifmerge321

then319:                                          ; preds = %loop-header318
  br label %loop-merge327

post-loop-break320:                               ; No predecessors!
  br label %ifmerge321

ifmerge321:                                       ; preds = %loop-header318, %post-loop-break320
  %401 = load <4 x float>* %color
  %402 = extractelement <4 x float> %401, i32 3
  %403 = load float addrspace(2)* @d16, !gla.uniform !30
  %404 = fcmp olt float %402, %403
  br i1 %404, label %then322, label %else323

then322:                                          ; preds = %ifmerge321
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge325

else323:                                          ; preds = %ifmerge321
  %405 = load <4 x float>* %color
  %color324 = fadd <4 x float> %405, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color324, <4 x float>* %color
  br label %ifmerge325

ifmerge325:                                       ; preds = %else323, %post-discard
  br label %loop-header318

post-loop-continue326:                            ; No predecessors!
  br label %loop-header318

loop-merge327:                                    ; preds = %then319
  %406 = load <4 x float>* %color
  %color328 = fadd <4 x float> %406, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color328, <4 x float>* %color
  %FragColor_shadow329 = load <4 x float>* %color
  store <4 x float> %FragColor_shadow329, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge327, %then309, %then303, %then284
  %407 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %407), !gla.output !50
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then322
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1024, i32 -1, i32 1), !gla.input !1
  %0 = extractelement <4 x float> %BaseColor, i32 0
  %1 = fcmp olt float %0, 0x3FD51EB860000000
  %2 = fcmp olt float %0, 0x3FE51EB860000000
  %select340.v = select i1 %2, <4 x float> <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  %select343.v = select i1 %1, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>, <4 x float> %select340.v
  %select343 = fadd <4 x float> %BaseColor, %select343.v
  %.pre = load float addrspace(2)* @d, align 4, !gla.uniform !3
  %3 = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !5
  br label %loop-header12

loop-header12:                                    ; preds = %ifmerge15, %entry
  %color.1 = phi <4 x float> [ %select343, %entry ], [ %color16, %ifmerge15 ]
  %4 = extractelement <4 x float> %color.1, i32 0
  %5 = fcmp uge float %4, %.pre
  br i1 %5, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  %6 = load <4 x float> addrspace(2)* @bigColor1_1, align 16, !gla.uniform !6
  br label %loop-header19

ifmerge15:                                        ; preds = %loop-header12
  %color16 = fadd <4 x float> %color.1, %3
  br label %loop-header12

loop-header19:                                    ; preds = %ifmerge22, %then13
  %color.2 = phi <4 x float> [ %color.1, %then13 ], [ %select339, %ifmerge22 ]
  %7 = extractelement <4 x float> %color.2, i32 2
  %8 = fcmp uge float %7, %.pre
  br i1 %8, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header19
  br label %loop-header30

ifmerge22:                                        ; preds = %loop-header19
  %color23 = fadd <4 x float> %color.2, %6
  %9 = extractelement <4 x float> %color23, i32 3
  %10 = fcmp olt float %9, %.pre
  %color27 = fadd <4 x float> %6, %color23
  %select339 = select i1 %10, <4 x float> %color23, <4 x float> %color27
  br label %loop-header19

loop-header30:                                    ; preds = %ifmerge33, %then20
  %color.3 = phi <4 x float> [ %color.2, %then20 ], [ %color34, %ifmerge33 ]
  %11 = extractelement <4 x float> %color.3, i32 0
  %12 = fcmp uge float %11, 4.200000e+01
  br i1 %12, label %then31, label %ifmerge33

then31:                                           ; preds = %loop-header30
  %.pre345 = load float addrspace(2)* @d2, align 4, !gla.uniform !7
  %.pre346 = load float addrspace(2)* @d3, align 4, !gla.uniform !8
  %13 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header37

ifmerge33:                                        ; preds = %loop-header30
  %color34 = fadd <4 x float> %color.3, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header30

loop-header37:                                    ; preds = %ifmerge40, %then31
  %color.4 = phi <4 x float> [ %color.3, %then31 ], [ %color41, %ifmerge40 ]
  %14 = extractelement <4 x float> %color.4, i32 3
  %15 = extractelement <4 x float> %color.4, i32 1
  %notlhs = fcmp uge float %14, %.pre345
  %notrhs = fcmp uge float %15, %.pre346
  %16 = or i1 %notrhs, %notlhs
  br i1 %16, label %then38, label %ifmerge40

then38:                                           ; preds = %loop-header37
  %17 = load <4 x float> addrspace(2)* @bigColor1_3, align 16, !gla.uniform !10
  %18 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header44

ifmerge40:                                        ; preds = %loop-header37
  %color41 = fadd <4 x float> %color.4, %13
  br label %loop-header37

loop-header44:                                    ; preds = %ifmerge51, %then38
  %color.5 = phi <4 x float> [ %color.4, %then38 ], [ %color52, %ifmerge51 ]
  %19 = extractelement <4 x float> %color.5, i32 2
  %20 = fcmp uge float %19, %.pre346
  br i1 %20, label %then45, label %ifmerge47

then45:                                           ; preds = %loop-header44
  br label %loop-merge54

ifmerge47:                                        ; preds = %loop-header44
  %color48 = fadd <4 x float> %color.5, %17
  %21 = extractelement <4 x float> %color48, i32 1
  %22 = fcmp olt float %21, %18
  br i1 %22, label %then49, label %ifmerge51

then49:                                           ; preds = %ifmerge47
  br label %loop-merge54

ifmerge51:                                        ; preds = %ifmerge47
  %color52 = fadd <4 x float> %17, %color48
  br label %loop-header44

loop-merge54:                                     ; preds = %then49, %then45
  %color.6 = phi <4 x float> [ %color.5, %then45 ], [ %color48, %then49 ]
  %.pre347 = load i32 addrspace(2)* @Count, align 4, !gla.uniform !12
  %23 = load <4 x float> addrspace(2)* @bigColor2, align 16, !gla.uniform !13
  br label %loop-header55

loop-header55:                                    ; preds = %ifmerge58, %loop-merge54
  %color.7 = phi <4 x float> [ %color.6, %loop-merge54 ], [ %color59, %ifmerge58 ]
  %i.0 = phi i32 [ 0, %loop-merge54 ], [ %i60, %ifmerge58 ]
  %24 = icmp slt i32 %i.0, %.pre347
  br i1 %24, label %ifmerge58, label %then56

then56:                                           ; preds = %loop-header55
  %.pre348 = load <4 x float> addrspace(2)* @bigColor3, align 16, !gla.uniform !14
  br label %loop-header63

ifmerge58:                                        ; preds = %loop-header55
  %color59 = fadd <4 x float> %color.7, %23
  %i60 = add i32 %i.0, 1
  br label %loop-header55

loop-header63:                                    ; preds = %loop-header63, %then56
  %color.8 = phi <4 x float> [ %color.7, %then56 ], [ %color64, %loop-header63 ]
  %color64 = fadd <4 x float> %color.8, %.pre348
  %25 = extractelement <4 x float> %color64, i32 0
  %26 = fcmp uge float %25, %.pre345
  br i1 %26, label %then65, label %loop-header63

then65:                                           ; preds = %loop-header63
  %27 = extractelement <4 x float> %color64, i32 2
  %28 = fadd float %27, %.pre346
  %29 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color64, i32 4, float undef, i32 undef, float undef, i32 undef, float %28, i32 0, float undef, i32 undef)
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fadd float %30, %.pre346
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %29, i32 4, float undef, i32 undef, float undef, i32 undef, float %31, i32 0, float undef, i32 undef)
  %33 = extractelement <4 x float> %32, i32 2
  %34 = fadd float %33, %.pre346
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %32, i32 4, float undef, i32 undef, float undef, i32 undef, float %34, i32 0, float undef, i32 undef)
  %36 = extractelement <4 x float> %35, i32 2
  %37 = fadd float %36, %.pre346
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %35, i32 4, float undef, i32 undef, float undef, i32 undef, float %37, i32 0, float undef, i32 undef)
  %39 = extractelement <4 x float> %38, i32 2
  %40 = fadd float %39, %.pre346
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %38, i32 4, float undef, i32 undef, float undef, i32 undef, float %40, i32 0, float undef, i32 undef)
  %42 = extractelement <4 x float> %41, i32 2
  %43 = fadd float %42, %.pre346
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %41, i32 4, float undef, i32 undef, float undef, i32 undef, float %43, i32 0, float undef, i32 undef)
  %45 = extractelement <4 x float> %44, i32 2
  %46 = fadd float %45, %.pre346
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %44, i32 4, float undef, i32 undef, float undef, i32 undef, float %46, i32 0, float undef, i32 undef)
  %48 = extractelement <4 x float> %47, i32 2
  %49 = fadd float %48, %.pre346
  %50 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %47, i32 4, float undef, i32 undef, float undef, i32 undef, float %49, i32 0, float undef, i32 undef)
  %51 = extractelement <4 x float> %50, i32 2
  %52 = fadd float %51, %.pre346
  %53 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %50, i32 4, float undef, i32 undef, float undef, i32 undef, float %52, i32 0, float undef, i32 undef)
  %54 = extractelement <4 x float> %53, i32 2
  %55 = fadd float %54, %.pre346
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %53, i32 4, float undef, i32 undef, float undef, i32 undef, float %55, i32 0, float undef, i32 undef)
  %57 = extractelement <4 x float> %56, i32 2
  %58 = fadd float %57, %.pre346
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %56, i32 4, float undef, i32 undef, float undef, i32 undef, float %58, i32 0, float undef, i32 undef)
  %60 = extractelement <4 x float> %59, i32 2
  %61 = fadd float %60, %.pre346
  %62 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %59, i32 4, float undef, i32 undef, float undef, i32 undef, float %61, i32 0, float undef, i32 undef)
  %63 = extractelement <4 x float> %62, i32 2
  %64 = fadd float %63, %.pre346
  %65 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %62, i32 4, float undef, i32 undef, float undef, i32 undef, float %64, i32 0, float undef, i32 undef)
  %66 = extractelement <4 x float> %65, i32 2
  %67 = fadd float %66, %.pre346
  %68 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %65, i32 4, float undef, i32 undef, float undef, i32 undef, float %67, i32 0, float undef, i32 undef)
  %69 = extractelement <4 x float> %68, i32 2
  %70 = fadd float %69, %.pre346
  %71 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %68, i32 4, float undef, i32 undef, float undef, i32 undef, float %70, i32 0, float undef, i32 undef)
  %72 = extractelement <4 x float> %71, i32 2
  %73 = fadd float %72, %.pre346
  %74 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %71, i32 4, float undef, i32 undef, float undef, i32 undef, float %73, i32 0, float undef, i32 undef)
  %75 = extractelement <4 x float> %74, i32 2
  %76 = fadd float %75, %.pre346
  %77 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %74, i32 4, float undef, i32 undef, float undef, i32 undef, float %76, i32 0, float undef, i32 undef)
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %.pre346
  %80 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %77, i32 4, float undef, i32 undef, float undef, i32 undef, float %79, i32 0, float undef, i32 undef)
  %81 = extractelement <4 x float> %80, i32 2
  %82 = fadd float %81, %.pre346
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %80, i32 4, float undef, i32 undef, float undef, i32 undef, float %82, i32 0, float undef, i32 undef)
  %84 = extractelement <4 x float> %83, i32 2
  %85 = fadd float %84, %.pre346
  %86 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %83, i32 4, float undef, i32 undef, float undef, i32 undef, float %85, i32 0, float undef, i32 undef)
  %87 = extractelement <4 x float> %86, i32 2
  %88 = fadd float %87, %.pre346
  %89 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %86, i32 4, float undef, i32 undef, float undef, i32 undef, float %88, i32 0, float undef, i32 undef)
  %90 = extractelement <4 x float> %89, i32 2
  %91 = fadd float %90, %.pre346
  %92 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %89, i32 4, float undef, i32 undef, float undef, i32 undef, float %91, i32 0, float undef, i32 undef)
  %93 = extractelement <4 x float> %92, i32 2
  %94 = fadd float %93, %.pre346
  %95 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %92, i32 4, float undef, i32 undef, float undef, i32 undef, float %94, i32 0, float undef, i32 undef)
  %96 = extractelement <4 x float> %95, i32 2
  %97 = fadd float %96, %.pre346
  %98 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %95, i32 4, float undef, i32 undef, float undef, i32 undef, float %97, i32 0, float undef, i32 undef)
  %99 = extractelement <4 x float> %98, i32 2
  %100 = fadd float %99, %.pre346
  %101 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %98, i32 4, float undef, i32 undef, float undef, i32 undef, float %100, i32 0, float undef, i32 undef)
  %102 = extractelement <4 x float> %101, i32 2
  %103 = fadd float %102, %.pre346
  %104 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %101, i32 4, float undef, i32 undef, float undef, i32 undef, float %103, i32 0, float undef, i32 undef)
  %105 = extractelement <4 x float> %104, i32 2
  %106 = fadd float %105, %.pre346
  %107 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %104, i32 4, float undef, i32 undef, float undef, i32 undef, float %106, i32 0, float undef, i32 undef)
  %108 = extractelement <4 x float> %107, i32 2
  %109 = fadd float %108, %.pre346
  %110 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %107, i32 4, float undef, i32 undef, float undef, i32 undef, float %109, i32 0, float undef, i32 undef)
  %111 = extractelement <4 x float> %110, i32 2
  %112 = fadd float %111, %.pre346
  %113 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %110, i32 4, float undef, i32 undef, float undef, i32 undef, float %112, i32 0, float undef, i32 undef)
  %114 = extractelement <4 x float> %113, i32 2
  %115 = fadd float %114, %.pre346
  %116 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %113, i32 4, float undef, i32 undef, float undef, i32 undef, float %115, i32 0, float undef, i32 undef)
  %117 = extractelement <4 x float> %116, i32 2
  %118 = fadd float %117, %.pre346
  %119 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %116, i32 4, float undef, i32 undef, float undef, i32 undef, float %118, i32 0, float undef, i32 undef)
  %120 = extractelement <4 x float> %119, i32 2
  %121 = fadd float %120, %.pre346
  %122 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %119, i32 4, float undef, i32 undef, float undef, i32 undef, float %121, i32 0, float undef, i32 undef)
  %123 = extractelement <4 x float> %122, i32 2
  %124 = fadd float %123, %.pre346
  %125 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %122, i32 4, float undef, i32 undef, float undef, i32 undef, float %124, i32 0, float undef, i32 undef)
  %126 = extractelement <4 x float> %125, i32 2
  %127 = fadd float %126, %.pre346
  %128 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %125, i32 4, float undef, i32 undef, float undef, i32 undef, float %127, i32 0, float undef, i32 undef)
  %129 = extractelement <4 x float> %128, i32 2
  %130 = fadd float %129, %.pre346
  %131 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %128, i32 4, float undef, i32 undef, float undef, i32 undef, float %130, i32 0, float undef, i32 undef)
  %132 = extractelement <4 x float> %131, i32 2
  %133 = fadd float %132, %.pre346
  %134 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %131, i32 4, float undef, i32 undef, float undef, i32 undef, float %133, i32 0, float undef, i32 undef)
  %135 = extractelement <4 x float> %134, i32 2
  %136 = fadd float %135, %.pre346
  %137 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %134, i32 4, float undef, i32 undef, float undef, i32 undef, float %136, i32 0, float undef, i32 undef)
  %138 = extractelement <4 x float> %137, i32 2
  %139 = fadd float %138, %.pre346
  %140 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %137, i32 4, float undef, i32 undef, float undef, i32 undef, float %139, i32 0, float undef, i32 undef)
  %141 = extractelement <4 x float> %140, i32 2
  %142 = fadd float %141, %.pre346
  %143 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %140, i32 4, float undef, i32 undef, float undef, i32 undef, float %142, i32 0, float undef, i32 undef)
  %144 = extractelement <4 x float> %143, i32 2
  %145 = fadd float %144, %.pre346
  %146 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %143, i32 4, float undef, i32 undef, float undef, i32 undef, float %145, i32 0, float undef, i32 undef)
  %147 = extractelement <4 x float> %146, i32 2
  %148 = fadd float %147, %.pre346
  %149 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %146, i32 4, float undef, i32 undef, float undef, i32 undef, float %148, i32 0, float undef, i32 undef)
  %150 = extractelement <4 x float> %149, i32 2
  %151 = fadd float %150, %.pre346
  %152 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %149, i32 4, float undef, i32 undef, float undef, i32 undef, float %151, i32 0, float undef, i32 undef)
  br label %loop-header80

loop-header80:                                    ; preds = %ifmerge83, %then65
  %color.10 = phi <4 x float> [ %152, %then65 ], [ %select337, %ifmerge83 ]
  %i79.0 = phi i32 [ 0, %then65 ], [ %i7992, %ifmerge83 ]
  %exitcond392 = icmp eq i32 %i79.0, 100
  br i1 %exitcond392, label %then81, label %ifmerge83

then81:                                           ; preds = %loop-header80
  br label %loop-header96

ifmerge83:                                        ; preds = %loop-header80
  %153 = extractelement <4 x float> %color.10, i32 2
  %154 = fcmp olt float %153, 2.000000e+01
  %155 = extractelement <4 x float> %color.10, i32 0
  %156 = fadd float %155, 1.000000e+00
  %157 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 1, float %156, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %158 = extractelement <4 x float> %color.10, i32 1
  %159 = fadd float %158, 1.000000e+00
  %160 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 2, float undef, i32 undef, float %159, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select337 = select i1 %154, <4 x float> %157, <4 x float> %160
  %i7992 = add i32 %i79.0, 1
  br label %loop-header80

loop-header96:                                    ; preds = %ifmerge99, %then81
  %color.12 = phi <4 x float> [ %color.10, %then81 ], [ %select338, %ifmerge99 ]
  %i95.0 = phi i32 [ 0, %then81 ], [ %i95105, %ifmerge99 ]
  %exitcond = icmp eq i32 %i95.0, 120
  br i1 %exitcond, label %then97, label %ifmerge99

then97:                                           ; preds = %loop-header96
  br label %loop-header109

ifmerge99:                                        ; preds = %loop-header96
  %161 = extractelement <4 x float> %color.12, i32 2
  %162 = fcmp olt float %161, 2.000000e+01
  %163 = extractelement <4 x float> %color.12, i32 0
  %164 = fadd float %163, 1.000000e+00
  %165 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 1, float %164, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %166 = extractelement <4 x float> %color.12, i32 1
  %167 = fadd float %166, 1.000000e+00
  %168 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 2, float undef, i32 undef, float %167, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select338 = select i1 %162, <4 x float> %165, <4 x float> %168
  %i95105 = add i32 %i95.0, 1
  br label %loop-header96

loop-header109:                                   ; preds = %ifmerge112, %then97
  %color.14 = phi <4 x float> [ %color.12, %then97 ], [ %select335, %ifmerge112 ]
  %i108.0 = phi i32 [ 0, %then97 ], [ %select336, %ifmerge112 ]
  %169 = icmp sgt i32 %i108.0, 41
  br i1 %169, label %then110, label %ifmerge112

then110:                                          ; preds = %loop-header109
  br label %loop-header122

ifmerge112:                                       ; preds = %loop-header109
  %170 = extractelement <4 x float> %color.14, i32 2
  %171 = fadd float %170, %.pre346
  %172 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 4, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float undef, i32 undef)
  %173 = extractelement <4 x float> %color.14, i32 0
  %174 = fcmp olt float %173, %18
  %175 = extractelement <4 x float> %color.14, i32 3
  %176 = fadd float %175, 1.000000e+00
  %177 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 12, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float %176, i32 0)
  %select335 = select i1 %174, <4 x float> %172, <4 x float> %177
  %178 = zext i1 %174 to i32
  %i108118 = xor i32 %178, 1
  %select336 = add i32 %i108.0, %i108118
  br label %loop-header109

loop-header122:                                   ; preds = %ifmerge129, %then110
  %color.15 = phi <4 x float> [ %color.14, %then110 ], [ %187, %ifmerge129 ]
  %i121.0 = phi i32 [ 0, %then110 ], [ %i121131, %ifmerge129 ]
  %179 = icmp sgt i32 %i121.0, 41
  br i1 %179, label %then123, label %ifmerge125

then123:                                          ; preds = %loop-header122
  br label %loop-merge133

ifmerge125:                                       ; preds = %loop-header122
  %180 = extractelement <4 x float> %color.15, i32 2
  %181 = fadd float %180, %.pre346
  %182 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.15, i32 4, float undef, i32 undef, float undef, i32 undef, float %181, i32 0, float undef, i32 undef)
  %183 = extractelement <4 x float> %color.15, i32 0
  %184 = fcmp olt float %183, %18
  br i1 %184, label %then127, label %ifmerge129

then127:                                          ; preds = %ifmerge125
  br label %loop-merge133

ifmerge129:                                       ; preds = %ifmerge125
  %185 = extractelement <4 x float> %color.15, i32 3
  %186 = fadd float %185, 1.000000e+00
  %187 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %182, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %186, i32 0)
  %i121131 = add i32 %i121.0, 1
  br label %loop-header122

loop-merge133:                                    ; preds = %then127, %then123
  %color.16 = phi <4 x float> [ %color.15, %then123 ], [ %182, %then127 ]
  %.pre349 = load <4 x float> addrspace(2)* @bigColor4, align 16, !gla.uniform !15
  br label %loop-header134

loop-header134:                                   ; preds = %loop-header134.backedge, %loop-merge133
  %color.17 = phi <4 x float> [ %color.16, %loop-merge133 ], [ %color.17.be, %loop-header134.backedge ]
  %color135 = fadd <4 x float> %color.17, %.pre349
  %188 = extractelement <4 x float> %color135, i32 0
  %189 = fcmp olt float %188, %18
  br i1 %189, label %then136, label %ifmerge138

then136:                                          ; preds = %loop-header134
  br label %loop-header134.backedge

loop-header134.backedge:                          ; preds = %then136, %ifmerge146
  %color.17.be = phi <4 x float> [ %color135, %then136 ], [ %select341, %ifmerge146 ]
  br label %loop-header134

ifmerge138:                                       ; preds = %loop-header134
  %190 = extractelement <4 x float> %color135, i32 1
  %191 = fcmp olt float %190, %18
  %192 = fadd float %18, %190
  %193 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color135, i32 2, float undef, i32 undef, float %192, i32 0, float undef, i32 undef, float undef, i32 undef)
  %194 = fadd float %18, %188
  %195 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color135, i32 1, float %194, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select341 = select i1 %191, <4 x float> %193, <4 x float> %195
  %196 = extractelement <4 x float> %select341, i32 2
  %197 = fcmp uge float %196, %18
  br i1 %197, label %then144, label %ifmerge146

then144:                                          ; preds = %ifmerge138
  %.pre351 = load <4 x float> addrspace(2)* @bigColor5, align 16, !gla.uniform !16
  %.pre352 = load float addrspace(2)* @d5, align 4, !gla.uniform !17
  br label %loop-header149

ifmerge146:                                       ; preds = %ifmerge138
  br label %loop-header134.backedge

loop-header149:                                   ; preds = %loop-header149, %then144
  %color.19 = phi <4 x float> [ %select341, %then144 ], [ %select334, %loop-header149 ]
  %color150 = fadd <4 x float> %color.19, %.pre351
  %198 = extractelement <4 x float> %color150, i32 1
  %199 = fcmp olt float %198, %.pre352
  %200 = fadd float %.pre352, %198
  %201 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color150, i32 2, float undef, i32 undef, float %200, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select334 = select i1 %199, <4 x float> %201, <4 x float> %color150
  %202 = extractelement <4 x float> %select334, i32 0
  %203 = fcmp uge float %202, %.pre352
  br i1 %203, label %then154, label %loop-header149

then154:                                          ; preds = %loop-header149
  %204 = load float addrspace(2)* @d6, align 4, !gla.uniform !18
  %205 = fcmp olt float %202, %204
  br i1 %205, label %then159, label %else167

then159:                                          ; preds = %then154
  %206 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  br label %loop-header160

loop-header160:                                   ; preds = %ifmerge163, %then159
  %color.21 = phi <4 x float> [ %select334, %then159 ], [ %color164, %ifmerge163 ]
  %207 = extractelement <4 x float> %color.21, i32 1
  %208 = fcmp uge float %207, %204
  br i1 %208, label %then161, label %ifmerge163

then161:                                          ; preds = %loop-header160
  br label %ifmerge175

ifmerge163:                                       ; preds = %loop-header160
  %color164 = fadd <4 x float> %color.21, %206
  br label %loop-header160

else167:                                          ; preds = %then154
  %209 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  %210 = extractelement <4 x float> %209, i32 2
  br label %loop-header168

loop-header168:                                   ; preds = %ifmerge171, %else167
  %color.22 = phi <4 x float> [ %select334, %else167 ], [ %214, %ifmerge171 ]
  %211 = extractelement <4 x float> %color.22, i32 2
  %212 = fcmp uge float %211, %204
  br i1 %212, label %then169, label %ifmerge171

then169:                                          ; preds = %loop-header168
  br label %ifmerge175

ifmerge171:                                       ; preds = %loop-header168
  %213 = fadd float %211, %210
  %214 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.22, i32 4, float undef, i32 undef, float undef, i32 undef, float %213, i32 0, float undef, i32 undef)
  br label %loop-header168

ifmerge175:                                       ; preds = %then169, %then161
  %215 = phi <4 x float> [ %206, %then161 ], [ %209, %then169 ]
  %color.23 = phi <4 x float> [ %color.21, %then161 ], [ %color.22, %then169 ]
  %216 = extractelement <4 x float> %color.23, i32 0
  %217 = fcmp olt float %216, %204
  br i1 %217, label %then176, label %else187

then176:                                          ; preds = %ifmerge175
  %218 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %219 = fcmp olt float %218, 1.000000e+00
  br label %loop-header177

loop-header177:                                   ; preds = %ifmerge180, %then176
  %color.24 = phi <4 x float> [ %color.23, %then176 ], [ %color181, %ifmerge180 ]
  %220 = extractelement <4 x float> %color.24, i32 1
  %221 = fcmp uge float %220, %204
  br i1 %221, label %then178, label %ifmerge180

then178:                                          ; preds = %loop-header177
  br label %loop-merge186

ifmerge180:                                       ; preds = %loop-header177
  %color181 = fadd <4 x float> %color.24, %215
  br i1 %219, label %then182, label %loop-header177

then182:                                          ; preds = %ifmerge180
  br label %loop-merge186

loop-merge186:                                    ; preds = %then182, %then178
  %color.25 = phi <4 x float> [ %color.24, %then178 ], [ %color181, %then182 ]
  br label %ifmerge195

else187:                                          ; preds = %ifmerge175
  %222 = extractelement <4 x float> %215, i32 2
  br label %loop-header188

loop-header188:                                   ; preds = %ifmerge191, %else187
  %color.26 = phi <4 x float> [ %color.23, %else187 ], [ %226, %ifmerge191 ]
  %223 = extractelement <4 x float> %color.26, i32 2
  %224 = fcmp uge float %223, %204
  br i1 %224, label %then189, label %ifmerge191

then189:                                          ; preds = %loop-header188
  br label %ifmerge195

ifmerge191:                                       ; preds = %loop-header188
  %225 = fadd float %223, %222
  %226 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.26, i32 4, float undef, i32 undef, float undef, i32 undef, float %225, i32 0, float undef, i32 undef)
  br label %loop-header188

ifmerge195:                                       ; preds = %then189, %loop-merge186
  %color.27 = phi <4 x float> [ %color.25, %loop-merge186 ], [ %color.26, %then189 ]
  %.pre353 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %227 = fcmp olt float %.pre353, 0.000000e+00
  %228 = load <4 x float> addrspace(2)* @bigColor7, align 16, !gla.uniform !21
  %229 = fcmp olt float %.pre353, 1.000000e+00
  br label %loop-header196

loop-header196:                                   ; preds = %ifmerge204, %ifmerge195
  %color.28 = phi <4 x float> [ %color.27, %ifmerge195 ], [ %color206, %ifmerge204 ]
  br i1 %227, label %then197, label %ifmerge199

then197:                                          ; preds = %loop-header196
  br label %loop-merge211

ifmerge199:                                       ; preds = %loop-header196
  %color200 = fadd <4 x float> %color.28, %228
  br i1 %229, label %then201, label %ifmerge204

then201:                                          ; preds = %ifmerge199
  %230 = extractelement <4 x float> %color200, i32 2
  %231 = fadd float %230, 1.000000e+00
  %232 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color200, i32 4, float undef, i32 undef, float undef, i32 undef, float %231, i32 0, float undef, i32 undef)
  br label %loop-merge211

ifmerge204:                                       ; preds = %ifmerge199
  %color206 = fadd <4 x float> %BaseColor, %color200
  br label %loop-header196

loop-merge211:                                    ; preds = %then201, %then197
  %color.29 = phi <4 x float> [ %color.28, %then197 ], [ %232, %then201 ]
  %.pre354 = load float addrspace(2)* @d8, align 4, !gla.uniform !22
  %233 = fcmp olt float %.pre354, 0.000000e+00
  %234 = fcmp olt float %.pre354, 1.000000e+00
  br label %loop-header212

loop-header212:                                   ; preds = %ifmerge225, %loop-merge211
  %color.30 = phi <4 x float> [ %color.29, %loop-merge211 ], [ %color227, %ifmerge225 ]
  br i1 %233, label %then213, label %ifmerge215

then213:                                          ; preds = %loop-header212
  br label %loop-merge232

ifmerge215:                                       ; preds = %loop-header212
  %color216 = fadd <4 x float> %color.30, %228
  br i1 %234, label %then217, label %ifmerge225

then217:                                          ; preds = %ifmerge215
  %235 = extractelement <4 x float> %color216, i32 2
  %236 = fadd float %235, 1.000000e+00
  %237 = fcmp olt float %.pre354, 2.000000e+00
  %238 = extractelement <4 x float> %color216, i32 1
  %239 = fadd float %238, 1.000000e+00
  %240 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color216, i32 6, float undef, i32 undef, float %239, i32 0, float %236, i32 0, float undef, i32 undef)
  %241 = extractelement <4 x float> %color216, i32 0
  %242 = fadd float %241, 1.000000e+00
  %243 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color216, i32 5, float %242, i32 0, float undef, i32 undef, float %236, i32 0, float undef, i32 undef)
  %select = select i1 %237, <4 x float> %240, <4 x float> %243
  br label %loop-merge232

ifmerge225:                                       ; preds = %ifmerge215
  %color227 = fadd <4 x float> %BaseColor, %color216
  %244 = extractelement <4 x float> %color227, i32 2
  %245 = fcmp uge float %244, %.pre354
  br i1 %245, label %then228, label %loop-header212

then228:                                          ; preds = %ifmerge225
  br label %loop-merge232

loop-merge232:                                    ; preds = %then228, %then217, %then213
  %color.32 = phi <4 x float> [ %color.30, %then213 ], [ %select, %then217 ], [ %color227, %then228 ]
  %.pre355 = load float addrspace(2)* @d9, align 4, !gla.uniform !23
  %246 = fcmp ogt float %.pre355, %.pre354
  br label %loop-header233

loop-header233:                                   ; preds = %ifmerge245, %loop-merge232
  %color.33 = phi <4 x float> [ %color.32, %loop-merge232 ], [ %color.35, %ifmerge245 ]
  %247 = extractelement <4 x float> %color.33, i32 3
  %248 = fcmp uge float %247, %.pre355
  br i1 %248, label %then234, label %ifmerge236

then234:                                          ; preds = %loop-header233
  br label %loop-merge247

ifmerge236:                                       ; preds = %loop-header233
  br i1 %246, label %then237, label %ifmerge245

then237:                                          ; preds = %ifmerge236
  %249 = extractelement <4 x float> %color.33, i32 0
  %250 = fcmp ugt float %249, %.pre353
  br i1 %250, label %ifmerge244, label %then238

then238:                                          ; preds = %then237
  %251 = extractelement <4 x float> %color.33, i32 2
  %252 = fcmp oeq float %251, 5.000000e+00
  br i1 %252, label %then239, label %else241

then239:                                          ; preds = %then238
  %253 = fadd float %247, 1.000000e+00
  %254 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.33, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %253, i32 0)
  br label %ifmerge244

else241:                                          ; preds = %then238
  br label %loop-merge247

ifmerge244:                                       ; preds = %then237, %then239
  %color.34 = phi <4 x float> [ %254, %then239 ], [ %color.33, %then237 ]
  br label %ifmerge245

ifmerge245:                                       ; preds = %ifmerge236, %ifmerge244
  %color.35 = phi <4 x float> [ %color.34, %ifmerge244 ], [ %color.33, %ifmerge236 ]
  br label %loop-header233

loop-merge247:                                    ; preds = %else241, %then234
  %.pre356 = load float addrspace(2)* @d10, align 4, !gla.uniform !24
  %255 = load float addrspace(2)* @d11, align 4, !gla.uniform !25
  %256 = load float addrspace(2)* @d12, align 4, !gla.uniform !26
  br label %loop-header248

loop-header248:                                   ; preds = %then253, %loop-merge247
  %color.36 = phi <4 x float> [ %color.33, %loop-merge247 ], [ %select333, %then253 ]
  %257 = extractelement <4 x float> %color.36, i32 2
  %258 = fcmp uge float %257, %.pre356
  br i1 %258, label %then249, label %ifmerge251

then249:                                          ; preds = %loop-header248
  br label %loop-merge265

ifmerge251:                                       ; preds = %loop-header248
  %259 = extractelement <4 x float> %color.36, i32 1
  %260 = fadd float %259, 1.000000e+00
  %261 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.36, i32 2, float undef, i32 undef, float %260, i32 0, float undef, i32 undef, float undef, i32 undef)
  %262 = fcmp olt float %260, %255
  br i1 %262, label %then253, label %ifmerge261

then253:                                          ; preds = %ifmerge251
  %263 = fadd float %257, 1.000000e+00
  %264 = extractelement <4 x float> %color.36, i32 3
  %265 = fcmp olt float %264, %256
  %266 = fadd float %264, 1.000000e+00
  %267 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %261, i32 12, float undef, i32 undef, float undef, i32 undef, float %263, i32 0, float %266, i32 0)
  %268 = extractelement <4 x float> %color.36, i32 0
  %269 = fadd float %268, 1.000000e+00
  %270 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %261, i32 5, float %269, i32 0, float undef, i32 undef, float %263, i32 0, float undef, i32 undef)
  %select333 = select i1 %265, <4 x float> %267, <4 x float> %270
  br label %loop-header248

ifmerge261:                                       ; preds = %ifmerge251
  %color262 = fadd <4 x float> %261, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-merge265

loop-merge265:                                    ; preds = %ifmerge261, %then249
  %color.38 = phi <4 x float> [ %color.36, %then249 ], [ %color262, %ifmerge261 ]
  %271 = load <4 x float> addrspace(2)* @bigColor8, align 16, !gla.uniform !27
  %272 = extractelement <4 x float> %271, i32 0
  br label %loop-header266

loop-header266:                                   ; preds = %ifmerge269, %loop-merge265
  %color.39 = phi <4 x float> [ %color.38, %loop-merge265 ], [ %select344, %ifmerge269 ]
  %273 = extractelement <4 x float> %color.39, i32 0
  %274 = fcmp uge float %273, 1.000000e+01
  br i1 %274, label %then267, label %ifmerge269

then267:                                          ; preds = %loop-header266
  %color279 = fadd <4 x float> %color.39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre357 = load float addrspace(2)* @d14, align 4, !gla.uniform !28
  %275 = load float addrspace(2)* @d15, align 4, !gla.uniform !29
  br label %loop-header280

ifmerge269:                                       ; preds = %loop-header266
  %color270 = fadd <4 x float> %color.39, %271
  %276 = extractelement <4 x float> %color270, i32 2
  %277 = fcmp olt float %276, %.pre354
  %278 = extractelement <4 x float> %color270, i32 3
  %279 = fcmp olt float %278, %204
  %280 = extractelement <4 x float> %color270, i32 1
  %281 = fadd float %280, %272
  %282 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color270, i32 2, float undef, i32 undef, float %281, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select342 = select i1 %279, <4 x float> %color270, <4 x float> %282
  %select344 = select i1 %277, <4 x float> %select342, <4 x float> %282
  br label %loop-header266

loop-header280:                                   ; preds = %else285, %then267
  %color.40 = phi <4 x float> [ %color279, %then267 ], [ %color286, %else285 ]
  %283 = extractelement <4 x float> %color.40, i32 0
  %284 = fcmp uge float %283, %.pre357
  br i1 %284, label %then281, label %ifmerge283

then281:                                          ; preds = %loop-header280
  %color290 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre358 = load float addrspace(2)* @d16, align 4, !gla.uniform !30
  br label %loop-header291

ifmerge283:                                       ; preds = %loop-header280
  %285 = extractelement <4 x float> %color.40, i32 1
  %286 = fcmp olt float %285, %275
  br i1 %286, label %then284, label %else285

then284:                                          ; preds = %ifmerge283
  br label %stage-epilogue

else285:                                          ; preds = %ifmerge283
  %color286 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header280

loop-header291:                                   ; preds = %ifmerge294, %then281
  %color.41 = phi <4 x float> [ %color290, %then281 ], [ %290, %ifmerge294 ]
  %287 = extractelement <4 x float> %color.41, i32 3
  %288 = fcmp uge float %287, %.pre358
  br i1 %288, label %then292, label %ifmerge294

then292:                                          ; preds = %loop-header291
  br label %loop-header298

ifmerge294:                                       ; preds = %loop-header291
  %289 = fadd float %287, 1.000000e+00
  %290 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.41, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %289, i32 0)
  br label %loop-header291

loop-header298:                                   ; preds = %ifmerge301, %then292
  %color.42 = phi <4 x float> [ %color.41, %then292 ], [ %color302, %ifmerge301 ]
  %291 = extractelement <4 x float> %color.42, i32 3
  %292 = extractelement <4 x float> %color.42, i32 1
  %notlhs331 = fcmp uge float %291, %.pre345
  %notrhs332 = fcmp uge float %292, %.pre346
  %293 = or i1 %notrhs332, %notlhs331
  br i1 %293, label %then299, label %ifmerge301

then299:                                          ; preds = %loop-header298
  %.pre359 = load float addrspace(2)* @d18, align 4, !gla.uniform !31
  %294 = load float addrspace(2)* @d17, align 4, !gla.uniform !32
  br label %loop-header308

ifmerge301:                                       ; preds = %loop-header298
  %color302 = fadd <4 x float> %color.42, %13
  %295 = extractelement <4 x float> %color302, i32 2
  %296 = fcmp olt float %295, %.pre346
  br i1 %296, label %then303, label %loop-header298

then303:                                          ; preds = %ifmerge301
  br label %stage-epilogue

loop-header308:                                   ; preds = %ifmerge311, %then299
  %color.43 = phi <4 x float> [ %color.42, %then299 ], [ %color312, %ifmerge311 ]
  %297 = extractelement <4 x float> %color.43, i32 1
  %298 = fcmp olt float %297, %.pre359
  br i1 %298, label %then309, label %ifmerge311

then309:                                          ; preds = %loop-header308
  br label %stage-epilogue

ifmerge311:                                       ; preds = %loop-header308
  %color312 = fadd <4 x float> %color.43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %299 = extractelement <4 x float> %color312, i32 0
  %300 = fcmp uge float %299, %294
  br i1 %300, label %then313, label %loop-header308

then313:                                          ; preds = %ifmerge311
  br label %loop-header318

loop-header318:                                   ; preds = %else323, %then313
  %color.44 = phi <4 x float> [ %color312, %then313 ], [ %color324, %else323 ]
  %301 = extractelement <4 x float> %color.44, i32 1
  %302 = fcmp uge float %301, %.pre358
  br i1 %302, label %then319, label %ifmerge321

then319:                                          ; preds = %loop-header318
  %color328 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %stage-epilogue

ifmerge321:                                       ; preds = %loop-header318
  %303 = extractelement <4 x float> %color.44, i32 3
  %304 = fcmp olt float %303, %.pre358
  br i1 %304, label %then322, label %else323

then322:                                          ; preds = %ifmerge321
  call void @llvm.gla.discard()
  br label %stage-exit

else323:                                          ; preds = %ifmerge321
  %color324 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header318

stage-epilogue:                                   ; preds = %then319, %then309, %then303, %then284
  %FragColor_shadow330.0 = phi <4 x float> [ %color279, %then309 ], [ %color328, %then319 ], [ %color279, %then303 ], [ %color279, %then284 ]
  call void @llvm.gla.fWriteData.v4f32(i32 1025, i32 -1, <4 x float> %FragColor_shadow330.0), !gla.output !50
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then322
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}

inductive variable:  %i.0 = phi i32 [ 0, %loop-merge54 ], [ %i60, %ifmerge58 ]
  trip count:      4294967295
  increment:         %i60 = add i32 %i.0, 1
  exit condition:    %24 = icmp slt i32 %i.0, %.pre347

inductive variable:  %i79.0 = phi i32 [ 0, %then65 ], [ %i7992, %ifmerge83 ]
  trip count:      100
  increment:         %i7992 = add i32 %i79.0, 1
  exit condition:    %exitcond392 = icmp eq i32 %i79.0, 100

inductive variable:  %i95.0 = phi i32 [ 0, %then81 ], [ %i95105, %ifmerge99 ]
  trip count:      120
  increment:         %i95105 = add i32 %i95.0, 1
  exit condition:    %exitcond = icmp eq i32 %i95.0, 120
#### BEGIN COMPILER 0 INFO LOG ####
WARNING: 0:14: varying deprecated in version 130; may be removed in future release
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 130
// LunarGOO output (r722)
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float const67 = 0.33;
const float const69 = 0.66;
const vec4 const71 = vec4(0.66);
const vec4 const72 = vec4(0.33);
const float const80 = 42.0;
const vec4 const82 = vec4(1.0);
vec4 color48;
const int const90i_0 = 0;
vec4 color64;
const float const179 = 20.0;
const float const181 = 1.0;
const int const193i_41 = 41;
const int const202i_1 = 1;
vec4 temp206;
vec4 select341;
vec4 select334;
float temp225;
vec4 color181;
const float const237 = 0.0;
vec4 color200;
vec4 color216;
const float const248 = 2.0;
vec4 color227;
const float const259 = 5.0;
vec4 temp263;
const float const273 = 10.0;
vec4 color312;

void main()
{
    vec4 colord1;
    vec4 colord2;
    vec4 colord3;
    vec4 colord4;
    vec4 colord5;
    vec4 colord6;
    vec4 colord7;
    int id0;
    vec4 colord8;
    vec4 colord10;
    int temp31;
    vec4 colord12;
    int temp33;
    vec4 colord14;
    int temp35;
    vec4 colord15;
    int temp37;
    vec4 colord16;
    vec4 colord17;
    vec4 colord17dbe;
    vec4 colord19;
    vec4 colord21;
    vec4 colord22;
    vec4 temp44;
    vec4 colord23;
    vec4 colord24;
    vec4 colord25;
    vec4 colord26;
    vec4 colord27;
    vec4 colord28;
    vec4 colord29;
    vec4 colord30;
    vec4 colord32;
    vec4 colord33;
    vec4 colord34;
    vec4 colord35;
    vec4 colord36;
    vec4 colord38;
    vec4 colord39;
    vec4 colord40;
    vec4 colord41;
    vec4 colord42;
    vec4 colord43;
    vec4 colord44;
    vec4 FragColor_shadow330d0;
    bool temp66 = BaseColor.x < const67;
    bool temp68 = BaseColor.x < const69;
    vec4 select340dv = temp68 ? const71 : const72;
    vec4 select343dv = temp66 ? const72 : select340dv;
    vec4 select343 = BaseColor + select343dv;
    colord1 = select343;
    while (! (colord1.x >= d)){
        vec4 color16 = colord1 + bigColor;
        colord1 = color16;
    }
    
    colord2 = colord1;
    while (! (colord2.z >= d)){
        vec4 color23 = colord2 + bigColor1_1;
        bool temp77 = color23.w < d;
        vec4 color27 = bigColor1_1 + color23;
        vec4 select339 = temp77 ? color23 : color27;
        colord2 = select339;
    }
    
    colord3 = colord2;
    while (! (colord3.x >= const80)){
        vec4 color34 = colord3 + const82;
        colord3 = color34;
    }
    
    colord4 = colord3;
    while (true) {
        bool notlhs = colord4.w >= d2;
        bool notrhs = colord4.y >= d3;
        bool temp85 = notrhs || notlhs;
        if (temp85) {
            break;
        }
        
        vec4 color41 = colord4 + bigColor1_2;
        colord4 = color41;
    }
    
    colord5 = colord4;
    while (! (colord5.z >= d3)){
        color48 = colord5 + bigColor1_3;
        bool temp88 = color48.y < d4;
        if (temp88) {
            colord6 = color48;
            break;
        }
        
        vec4 color52 = bigColor1_3 + color48;
        colord5 = color52;
    }
    
    colord6 = colord5;
    colord7 = colord6;
    id0 = const90i_0;
    for (id0 = 0; id0 < 4294967295; ++id0) {
        vec4 color59 = colord7 + bigColor2;
        colord7 = color59;
    }
    
    colord8 = colord7;
    while (true) {
        color64 = colord8 + bigColor3;
        bool temp93 = color64.x >= d2;
        if (temp93) {
            break;
        }
        
        colord8 = color64;
    }
    
    float temp94 = color64.z + d3;
    vec4 temp95 = color64;
    temp95.z = temp94;
    float temp96 = temp95.z + d3;
    vec4 temp97 = temp95;
    temp97.z = temp96;
    float temp98 = temp97.z + d3;
    vec4 temp99 = temp97;
    temp99.z = temp98;
    float temp100 = temp99.z + d3;
    vec4 temp101 = temp99;
    temp101.z = temp100;
    float temp102 = temp101.z + d3;
    vec4 temp103 = temp101;
    temp103.z = temp102;
    float temp104 = temp103.z + d3;
    vec4 temp105 = temp103;
    temp105.z = temp104;
    float temp106 = temp105.z + d3;
    vec4 temp107 = temp105;
    temp107.z = temp106;
    float temp108 = temp107.z + d3;
    vec4 temp109 = temp107;
    temp109.z = temp108;
    float temp110 = temp109.z + d3;
    vec4 temp111 = temp109;
    temp111.z = temp110;
    float temp112 = temp111.z + d3;
    vec4 temp113 = temp111;
    temp113.z = temp112;
    float temp114 = temp113.z + d3;
    vec4 temp115 = temp113;
    temp115.z = temp114;
    float temp116 = temp115.z + d3;
    vec4 temp117 = temp115;
    temp117.z = temp116;
    float temp118 = temp117.z + d3;
    vec4 temp119 = temp117;
    temp119.z = temp118;
    float temp120 = temp119.z + d3;
    vec4 temp121 = temp119;
    temp121.z = temp120;
    float temp122 = temp121.z + d3;
    vec4 temp123 = temp121;
    temp123.z = temp122;
    float temp124 = temp123.z + d3;
    vec4 temp125 = temp123;
    temp125.z = temp124;
    float temp126 = temp125.z + d3;
    vec4 temp127 = temp125;
    temp127.z = temp126;
    float temp128 = temp127.z + d3;
    vec4 temp129 = temp127;
    temp129.z = temp128;
    float temp130 = temp129.z + d3;
    vec4 temp131 = temp129;
    temp131.z = temp130;
    float temp132 = temp131.z + d3;
    vec4 temp133 = temp131;
    temp133.z = temp132;
    float temp134 = temp133.z + d3;
    vec4 temp135 = temp133;
    temp135.z = temp134;
    float temp136 = temp135.z + d3;
    vec4 temp137 = temp135;
    temp137.z = temp136;
    float temp138 = temp137.z + d3;
    vec4 temp139 = temp137;
    temp139.z = temp138;
    float temp140 = temp139.z + d3;
    vec4 temp141 = temp139;
    temp141.z = temp140;
    float temp142 = temp141.z + d3;
    vec4 temp143 = temp141;
    temp143.z = temp142;
    float temp144 = temp143.z + d3;
    vec4 temp145 = temp143;
    temp145.z = temp144;
    float temp146 = temp145.z + d3;
    vec4 temp147 = temp145;
    temp147.z = temp146;
    float temp148 = temp147.z + d3;
    vec4 temp149 = temp147;
    temp149.z = temp148;
    float temp150 = temp149.z + d3;
    vec4 temp151 = temp149;
    temp151.z = temp150;
    float temp152 = temp151.z + d3;
    vec4 temp153 = temp151;
    temp153.z = temp152;
    float temp154 = temp153.z + d3;
    vec4 temp155 = temp153;
    temp155.z = temp154;
    float temp156 = temp155.z + d3;
    vec4 temp157 = temp155;
    temp157.z = temp156;
    float temp158 = temp157.z + d3;
    vec4 temp159 = temp157;
    temp159.z = temp158;
    float temp160 = temp159.z + d3;
    vec4 temp161 = temp159;
    temp161.z = temp160;
    float temp162 = temp161.z + d3;
    vec4 temp163 = temp161;
    temp163.z = temp162;
    float temp164 = temp163.z + d3;
    vec4 temp165 = temp163;
    temp165.z = temp164;
    float temp166 = temp165.z + d3;
    vec4 temp167 = temp165;
    temp167.z = temp166;
    float temp168 = temp167.z + d3;
    vec4 temp169 = temp167;
    temp169.z = temp168;
    float temp170 = temp169.z + d3;
    vec4 temp171 = temp169;
    temp171.z = temp170;
    float temp172 = temp171.z + d3;
    vec4 temp173 = temp171;
    temp173.z = temp172;
    float temp174 = temp173.z + d3;
    vec4 temp175 = temp173;
    temp175.z = temp174;
    float temp176 = temp175.z + d3;
    vec4 temp177 = temp175;
    temp177.z = temp176;
    colord10 = temp177;
    temp31 = const90i_0;
    for (temp31 = 0; temp31 < 100; ++temp31) {
        bool temp178 = colord10.z < const179;
        float temp180 = colord10.x + const181;
        vec4 temp182 = colord10;
        temp182.x = temp180;
        float temp183 = colord10.y + const181;
        vec4 temp184 = colord10;
        temp184.y = temp183;
        vec4 select337 = temp178 ? temp182 : temp184;
        colord10 = select337;
    }
    
    colord12 = colord10;
    temp33 = const90i_0;
    for (temp33 = 0; temp33 < 120; ++temp33) {
        bool temp186 = colord12.z < const179;
        float temp187 = colord12.x + const181;
        vec4 temp188 = colord12;
        temp188.x = temp187;
        float temp189 = colord12.y + const181;
        vec4 temp190 = colord12;
        temp190.y = temp189;
        vec4 select338 = temp186 ? temp188 : temp190;
        colord12 = select338;
    }
    
    colord14 = colord12;
    temp35 = const90i_0;
    while (true) {
        bool temp192 = temp35 > const193i_41;
        if (temp192) {
            break;
        }
        
        float temp194 = colord14.z + d3;
        vec4 temp195 = colord14;
        temp195.z = temp194;
        bool temp196 = colord14.x < d4;
        float temp197 = colord14.w + const181;
        vec4 temp198 = colord14;
        temp198.zw = vec2(temp194, temp197);
        vec4 select335 = temp196 ? temp195 : temp198;
        int temp200 = int(temp196);
        int temp201 = temp200 ^ const202i_1;
        int select336 = temp35 + temp201;
        colord14 = select335;
        temp35 = select336;
    }
    
    colord15 = colord14;
    temp37 = const90i_0;
    while (true) {
        bool temp204 = temp37 > const193i_41;
        if (temp204) {
            colord16 = colord15;
            break;
        }
        
        float temp205 = colord15.z + d3;
        temp206 = colord15;
        temp206.z = temp205;
        bool temp207 = colord15.x < d4;
        if (temp207) {
            colord16 = temp206;
            break;
        }
        
        float temp208 = colord15.w + const181;
        vec4 temp209 = temp206;
        temp209.w = temp208;
        int temp210 = temp37 + const202i_1;
        colord15 = temp209;
        temp37 = temp210;
    }
    
    colord17 = colord16;
    while (true) {
        vec4 color135 = colord17 + bigColor4;
        bool temp212 = color135.x < d4;
        if (temp212) {
            colord17dbe = color135;
        }
        else {
            bool temp213 = color135.y < d4;
            float temp214 = d4 + color135.y;
            vec4 temp215 = color135;
            temp215.y = temp214;
            float temp216 = d4 + color135.x;
            vec4 temp217 = color135;
            temp217.x = temp216;
            select341 = temp213 ? temp215 : temp217;
            bool temp219 = select341.z >= d4;
            if (temp219) {
                break;
            }
            
            colord17dbe = select341;
        }
        
        colord17 = colord17dbe;
    }
    
    colord19 = select341;
    while (true) {
        vec4 color150 = colord19 + bigColor5;
        bool temp221 = color150.y < d5;
        float temp222 = d5 + color150.y;
        vec4 temp223 = color150;
        temp223.y = temp222;
        select334 = temp221 ? temp223 : color150;
        bool temp226 = select334.x >= d5;
        if (temp226) {
            break;
        }
        
        colord19 = select334;
    }
    
    bool temp227 = select334.x < d6;
    if (temp227) {
        colord21 = select334;
        while (! (colord21.y >= d6)){
            vec4 color164 = colord21 + bigColor6;
            colord21 = color164;
        }
        
        temp44 = bigColor6;
        colord23 = colord21;
    }
    else {
        colord22 = select334;
        while (! (colord22.z >= d6)){
            float temp229 = colord22.z + bigColor6.z;
            vec4 temp230 = colord22;
            temp230.z = temp229;
            colord22 = temp230;
        }
        
        temp44 = bigColor6;
        colord23 = colord22;
    }
    
    bool temp231 = colord23.x < d6;
    if (temp231) {
        bool temp232 = d7 < const181;
        colord24 = colord23;
        while (! (colord24.y >= d6)){
            color181 = colord24 + temp44;
            if (temp232) {
                colord25 = color181;
                break;
            }
            
            colord24 = color181;
        }
        
        colord25 = colord24;
        colord27 = colord25;
    }
    else {
        colord26 = colord23;
        while (! (colord26.z >= d6)){
            float temp234 = colord26.z + temp44.z;
            vec4 temp235 = colord26;
            temp235.z = temp234;
            colord26 = temp235;
        }
        
        colord27 = colord26;
    }
    
    bool temp236 = d7 < const237;
    bool temp238 = d7 < const181;
    colord28 = colord27;
    while (true) {
        if (temp236) {
            colord29 = colord28;
            break;
        }
        
        color200 = colord28 + bigColor7;
        if (temp238) {
            float temp240 = color200.z + const181;
            vec4 temp241 = color200;
            temp241.z = temp240;
            colord29 = temp241;
            break;
        }
        
        vec4 color206 = BaseColor + color200;
        colord28 = color206;
    }
    
    bool temp243 = d8 < const237;
    bool temp244 = d8 < const181;
    colord30 = colord29;
    while (true) {
        if (temp243) {
            colord32 = colord30;
            break;
        }
        
        color216 = colord30 + bigColor7;
        if (temp244) {
            float temp246 = color216.z + const181;
            bool temp247 = d8 < const248;
            float temp249 = color216.y + const181;
            vec4 temp250 = color216;
            temp250.yz = vec2(temp249, temp246);
            float temp251 = color216.x + const181;
            vec4 temp252 = color216;
            temp252.xz = vec2(temp251, temp246);
            vec4 select = temp247 ? temp250 : temp252;
            colord32 = select;
            break;
        }
        
        color227 = BaseColor + color216;
        bool temp255 = color227.z >= d8;
        if (temp255) {
            colord32 = color227;
            break;
        }
        
        colord30 = color227;
    }
    
    bool temp256 = d9 > d8;
    colord33 = colord32;
    while (! (colord33.w >= d9)){
        colord35 = colord33;
        if (temp256) {
            bool temp257 = colord33.x > d7;
            colord34 = colord33;
            if (! temp257) {
                bool temp258 = colord33.z == const259;
                if (! temp258) {
                    break;
                }
                
                float temp260 = colord33.w + const181;
                vec4 temp261 = colord33;
                temp261.w = temp260;
                colord34 = temp261;
            }
            
            colord35 = colord34;
        }
        
        colord33 = colord35;
    }
    
    colord36 = colord33;
    while (! (colord36.z >= d10)){
        float temp262 = colord36.y + const181;
        temp263 = colord36;
        temp263.y = temp262;
        bool temp264 = temp262 < d11;
        if (! temp264) {
            vec4 color262 = temp263 + const82;
            colord38 = color262;
            break;
        }
        
        float temp266 = colord36.z + const181;
        bool temp267 = colord36.w < d12;
        float temp268 = colord36.w + const181;
        vec4 temp269 = temp263;
        temp269.zw = vec2(temp266, temp268);
        float temp270 = colord36.x + const181;
        vec4 temp271 = temp263;
        temp271.xz = vec2(temp270, temp266);
        vec4 select333 = temp267 ? temp269 : temp271;
        colord36 = select333;
    }
    
    colord38 = colord36;
    colord39 = colord38;
    while (! (colord39.x >= const273)){
        vec4 color270 = colord39 + bigColor8;
        bool temp275 = color270.z < d8;
        bool temp276 = color270.w < d6;
        float temp277 = color270.y + bigColor8.x;
        vec4 temp278 = color270;
        temp278.y = temp277;
        vec4 select342 = temp276 ? color270 : temp278;
        vec4 select344 = temp275 ? select342 : temp278;
        colord39 = select344;
    }
    
    vec4 color279 = colord39 + const82;
    colord40 = color279;
    while (! (colord40.x >= d14)){
        bool temp282 = colord40.y < d15;
        if (temp282) {
            FragColor_shadow330d0 = color279;
            gl_FragColor = FragColor_shadow330d0;
            return;
        }
        
        vec4 color286 = colord40 + const82;
        colord40 = color286;
    }
    
    vec4 color290 = colord40 + const82;
    colord41 = color290;
    while (! (colord41.w >= d16)){
        float temp285 = colord41.w + const181;
        vec4 temp286 = colord41;
        temp286.w = temp285;
        colord41 = temp286;
    }
    
    colord42 = colord41;
    while (true) {
        bool notlhs331 = colord42.w >= d2;
        bool notrhs332 = colord42.y >= d3;
        bool temp289 = notrhs332 || notlhs331;
        if (temp289) {
            colord43 = colord42;
            while (! (colord43.y < d18)){
                color312 = colord43 + const82;
                bool temp291 = color312.x >= d17;
                if (temp291) {
                    colord44 = color312;
                    while (! (colord44.y >= d16)){
                        bool temp292 = colord44.w < d16;
                        if (temp292) {
                            discard;
                        }
                        
                        vec4 color324 = colord44 + const82;
                        colord44 = color324;
                    }
                    
                    vec4 color328 = colord44 + const82;
                    FragColor_shadow330d0 = color328;
                    gl_FragColor = FragColor_shadow330d0;
                    return;
                }
                
                colord43 = color312;
            }
            
            FragColor_shadow330d0 = color279;
            gl_FragColor = FragColor_shadow330d0;
            return;
        }
        
        vec4 color302 = colord42 + bigColor1_2;
        bool temp296 = color302.z < d3;
        if (temp296) {
            FragColor_shadow330d0 = color279;
            gl_FragColor = FragColor_shadow330d0;
            
        }
        
        colord42 = color302;
    }
    
}

#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 130
// LunarGOO output (r722)
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform int Count;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float const62 = 0.33;
const float const64 = 0.66;
const vec4 const66 = vec4(0.66);
const vec4 const67 = vec4(0.33);
const float const75 = 42.0;
const vec4 const77 = vec4(1.0);
vec4 color64;
const int const130i_0 = 0;
const float const132 = 20.0;
const float const134 = 1.0;
const int const146i_41 = 41;
const int const155i_1 = 1;
vec4 temp159;
vec4 select680;
vec4 select676;
float temp178;
const float const190 = 0.0;
vec4 color200;
vec4 color216;
const float const201 = 2.0;
vec4 color227;
const float const212 = 5.0;
const float const225 = 10.0;
vec4 color312;

void main()
{
    vec4 colord1d0;
    vec4 colord2d0;
    vec4 colord3d0;
    vec4 colord4d0;
    vec4 colord5d0;
    vec4 colord8d0;
    int temp31d0;
    vec4 colord10d0;
    int temp33d0;
    vec4 colord12d0;
    int temp35d0;
    vec4 colord14d0;
    int temp37d0;
    vec4 colord15d0;
    vec4 colord16d0;
    vec4 colord17d0;
    vec4 colord17dbed0;
    vec4 colord19d0;
    vec4 colord21d0;
    vec4 colord22d0;
    vec4 temp44d0;
    vec4 colord23d0;
    vec4 colord24d0;
    vec4 colord26d0;
    vec4 colord27d0;
    vec4 colord28d0;
    vec4 colord29d0;
    vec4 colord30d0;
    vec4 colord32d0;
    vec4 colord33d0;
    vec4 colord34d0;
    vec4 colord35d0;
    vec4 colord36d0;
    vec4 colord39d0;
    vec4 colord40d0;
    vec4 colord41d0;
    vec4 colord42d0;
    vec4 colord43d0;
    vec4 colord44d0;
    vec4 FragColor_shadow674d0;
    bool temp661 = BaseColor.x < const62;
    bool temp683 = BaseColor.x < const64;
    vec4 temp65 = temp683 ? const66 : const67;
    vec4 ternary5d0 = temp661 ? const67 : temp65;
    vec4 select34312 = BaseColor + ternary5d0;
    colord1d0 = select34312;
    while (colord1d0.x < d){
        vec4 color1616 = colord1d0 + bigColor;
        colord1d0 = color1616;
    }
    
    colord2d0 = colord1d0;
    while (colord2d0.z < d){
        vec4 color2323 = colord2d0 + bigColor1_1;
        bool temp7724 = color2323.w < d;
        vec4 color2725 = bigColor1_1 + color2323;
        vec4 select682 = temp7724 ? color2323 : color2725;
        colord2d0 = select682;
    }
    
    colord3d0 = colord2d0;
    while (colord3d0.x < const75){
        vec4 color3441 = colord3d0 + const77;
        colord3d0 = color3441;
    }
    
    colord4d0 = colord3d0;
    while (true) {
        bool notlhs50 = colord4d0.w >= d2;
        bool notrhs51 = colord4d0.y >= d3;
        bool temp8552 = notrhs51 || notlhs50;
        if (temp8552) {
            break;
        }
        
        vec4 color4156 = colord4d0 + bigColor1_2;
        colord4d0 = color4156;
    }
    
    colord5d0 = colord4d0;
    while (colord5d0.z < d3){
        vec4 color48 = colord5d0 + bigColor1_3;
        bool temp8865 = color48.y < d4;
        if (temp8865) {
            break;
        }
        
        vec4 color5270 = bigColor1_3 + color48;
        colord5d0 = color5270;
    }
    
    colord8d0 = colord5d0;
    while (true) {
        color64 = colord8d0 + bigColor3;
        bool temp9390 = color64.x < d2;
        if (! temp9390) {
            break;
        }
        
        colord8d0 = color64;
    }
    
    float temp9497 = color64.z + d3;
    float temp96100 = d3 + temp9497;
    float temp98103 = d3 + temp96100;
    float temp100106 = d3 + temp98103;
    float temp102109 = d3 + temp100106;
    float temp104112 = d3 + temp102109;
    float temp106115 = d3 + temp104112;
    float temp108118 = d3 + temp106115;
    float temp110121 = d3 + temp108118;
    float temp112124 = d3 + temp110121;
    float temp114127 = d3 + temp112124;
    float temp116130 = d3 + temp114127;
    float temp118133 = d3 + temp116130;
    float temp120136 = d3 + temp118133;
    float temp122139 = d3 + temp120136;
    float temp124142 = d3 + temp122139;
    float temp126145 = d3 + temp124142;
    float temp128148 = d3 + temp126145;
    float temp130151 = d3 + temp128148;
    float temp132154 = d3 + temp130151;
    float temp134157 = d3 + temp132154;
    float temp136160 = d3 + temp134157;
    float temp138163 = d3 + temp136160;
    float temp140166 = d3 + temp138163;
    float temp142169 = d3 + temp140166;
    float temp144172 = d3 + temp142169;
    float temp146175 = d3 + temp144172;
    float temp148178 = d3 + temp146175;
    float temp150181 = d3 + temp148178;
    float temp152184 = d3 + temp150181;
    float temp154187 = d3 + temp152184;
    float temp156190 = d3 + temp154187;
    float temp158193 = d3 + temp156190;
    float temp160196 = d3 + temp158193;
    float temp162199 = d3 + temp160196;
    float temp164202 = d3 + temp162199;
    float temp166205 = d3 + temp164202;
    float temp168208 = d3 + temp166205;
    float temp170211 = d3 + temp168208;
    float temp172214 = d3 + temp170211;
    float temp174217 = d3 + temp172214;
    float temp176220 = d3 + temp174217;
    vec4 temp129 = color64;
    temp129.z = temp176220;
    temp31d0 = const130i_0;
    colord10d0 = temp129;
    for (temp31d0 = 0; temp31d0 < 100; ++temp31d0) {
        bool temp178228 = colord10d0.z < const132;
        float temp180229 = colord10d0.x + const134;
        vec4 temp135 = colord10d0;
        temp135.x = temp180229;
        float temp183232 = colord10d0.y + const134;
        vec4 temp137 = colord10d0;
        temp137.y = temp183232;
        vec4 select677 = temp178228 ? temp135 : temp137;
        colord10d0 = select677;
    }
    
    temp33d0 = const130i_0;
    colord12d0 = colord10d0;
    for (temp33d0 = 0; temp33d0 < 120; ++temp33d0) {
        bool temp186251 = colord12d0.z < const132;
        float temp187252 = colord12d0.x + const134;
        vec4 temp141 = colord12d0;
        temp141.x = temp187252;
        float temp189255 = colord12d0.y + const134;
        vec4 temp143 = colord12d0;
        temp143.y = temp189255;
        vec4 select679 = temp186251 ? temp141 : temp143;
        colord12d0 = select679;
    }
    
    temp35d0 = const130i_0;
    colord14d0 = colord12d0;
    while (true) {
        bool temp192274 = temp35d0 > const146i_41;
        if (temp192274) {
            break;
        }
        
        float temp194278 = colord14d0.z + d3;
        bool temp196281 = colord14d0.x < d4;
        vec4 temp149 = colord14d0;
        temp149.z = temp194278;
        float temp197282 = colord14d0.w + const134;
        vec4 temp151 = colord14d0;
        temp151.zw = vec2(temp194278, temp197282);
        vec4 select678 = temp196281 ? temp149 : temp151;
        int temp200292 = int(temp196281);
        int temp201293 = temp200292 ^ const155i_1;
        int select336294 = temp201293 + temp35d0;
        temp35d0 = select336294;
        colord14d0 = select678;
    }
    
    temp37d0 = const130i_0;
    colord15d0 = colord14d0;
    while (true) {
        bool temp204304 = temp37d0 > const146i_41;
        if (temp204304) {
            colord16d0 = colord15d0;
            break;
        }
        
        float temp205309 = colord15d0.z + d3;
        temp159 = colord15d0;
        temp159.z = temp205309;
        bool temp207311 = colord15d0.x < d4;
        if (temp207311) {
            colord16d0 = temp159;
            break;
        }
        
        float temp208316 = colord15d0.w + const134;
        vec4 temp162 = temp159;
        temp162.w = temp208316;
        int temp210319 = temp37d0 + const155i_1;
        temp37d0 = temp210319;
        colord15d0 = temp162;
    }
    
    colord17d0 = colord16d0;
    while (true) {
        vec4 color135329 = colord17d0 + bigColor4;
        bool temp212330 = color135329.x < d4;
        if (temp212330) {
            colord17dbed0 = color135329;
        }
        else {
            bool temp213334 = color135329.y < d4;
            float temp214335 = d4 + color135329.y;
            vec4 temp168 = color135329;
            temp168.y = temp214335;
            float temp216338 = d4 + color135329.x;
            vec4 temp170 = color135329;
            temp170.x = temp216338;
            select680 = temp213334 ? temp168 : temp170;
            bool temp219347 = select680.z < d4;
            if (! temp219347) {
                break;
            }
            
            colord17dbed0 = select680;
        }
        
        colord17d0 = colord17dbed0;
    }
    
    colord19d0 = select680;
    while (true) {
        vec4 color150361 = colord19d0 + bigColor5;
        bool temp221362 = color150361.y < d5;
        float temp222363 = d5 + color150361.y;
        vec4 temp176 = color150361;
        temp176.y = temp222363;
        select676 = temp221362 ? temp176 : color150361;
        bool temp226372 = select676.x < d5;
        if (! temp226372) {
            break;
        }
        
        colord19d0 = select676;
    }
    
    bool temp227379 = select676.x < d6;
    if (temp227379) {
        colord21d0 = select676;
        while (colord21d0.y < d6){
            vec4 color164386 = colord21d0 + bigColor6;
            colord21d0 = color164386;
        }
        
        temp44d0 = bigColor6;
        colord23d0 = colord21d0;
    }
    else {
        colord22d0 = select676;
        while (colord22d0.z < d6){
            float temp229398 = colord22d0.z + bigColor6.z;
            vec4 temp183 = colord22d0;
            temp183.z = temp229398;
            colord22d0 = temp183;
        }
        
        temp44d0 = bigColor6;
        colord23d0 = colord22d0;
    }
    
    bool temp231407 = colord23d0.x < d6;
    if (temp231407) {
        bool temp232409 = d7 < const134;
        colord24d0 = colord23d0;
        while (colord24d0.y < d6){
            if (temp232409) {
                break;
            }
            
            vec4 color181 = temp44d0 + colord24d0;
            colord24d0 = color181;
        }
        
        colord27d0 = colord24d0;
    }
    else {
        colord26d0 = colord23d0;
        while (colord26d0.z < d6){
            float temp234430 = temp44d0.z + colord26d0.z;
            vec4 temp188 = colord26d0;
            temp188.z = temp234430;
            colord26d0 = temp188;
        }
        
        colord27d0 = colord26d0;
    }
    
    bool temp236438 = d7 < const190;
    bool temp238439 = d7 < const134;
    colord28d0 = colord27d0;
    while (true) {
        if (temp236438) {
            colord29d0 = colord28d0;
            break;
        }
        
        color200 = colord28d0 + bigColor7;
        if (temp238439) {
            float temp240450 = color200.z + const134;
            vec4 temp194 = color200;
            temp194.z = temp240450;
            colord29d0 = temp194;
            break;
        }
        
        vec4 color206457 = BaseColor + color200;
        colord28d0 = color206457;
    }
    
    bool temp243461 = d8 < const190;
    bool temp244462 = d8 < const134;
    colord30d0 = colord29d0;
    while (true) {
        if (temp243461) {
            colord32d0 = colord30d0;
            break;
        }
        
        color216 = colord30d0 + bigColor7;
        if (temp244462) {
            float temp246473 = color216.z + const134;
            bool temp247474 = d8 < const201;
            float temp249475 = color216.y + const134;
            vec4 temp203 = color216;
            temp203.yz = vec2(temp249475, temp246473);
            float temp251479 = color216.x + const134;
            vec4 temp205 = color216;
            temp205.xz = vec2(temp251479, temp246473);
            vec4 select = temp247474 ? temp203 : temp205;
            colord32d0 = select;
            break;
        }
        
        color227 = BaseColor + color216;
        bool temp255494 = color227.z < d8;
        if (! temp255494) {
            colord32d0 = color227;
            break;
        }
        
        colord30d0 = color227;
    }
    
    bool temp256502 = d9 > d8;
    colord33d0 = colord32d0;
    while (colord33d0.w < d9){
        colord35d0 = colord33d0;
        if (temp256502) {
            bool temp210 = colord33d0.x <= d7;
            colord34d0 = colord33d0;
            if (temp210) {
                bool temp211 = colord33d0.z != const212;
                if (temp211) {
                    break;
                }
                
                float temp260517 = colord33d0.w + const134;
                vec4 temp214 = colord33d0;
                temp214.w = temp260517;
                colord34d0 = temp214;
            }
            
            colord35d0 = colord34d0;
        }
        
        colord33d0 = colord35d0;
    }
    
    colord36d0 = colord33d0;
    while (colord36d0.z < d10){
        float temp262532 = colord36d0.y + const134;
        vec4 temp216 = colord36d0;
        temp216.y = temp262532;
        bool temp217 = temp262532 >= d11;
        if (temp217) {
            break;
        }
        
        float temp266540 = colord36d0.z + const134;
        bool temp267541 = colord36d0.w < d12;
        float temp268542 = colord36d0.w + const134;
        vec4 temp221 = temp216;
        temp221.zw = vec2(temp266540, temp268542);
        float temp270546 = colord36d0.x + const134;
        vec4 temp223 = temp216;
        temp223.xz = vec2(temp270546, temp266540);
        vec4 select681 = temp267541 ? temp221 : temp223;
        colord36d0 = select681;
    }
    
    colord39d0 = colord36d0;
    while (colord39d0.x < const225){
        vec4 color270566 = colord39d0 + bigColor8;
        bool temp275567 = color270566.z < d8;
        bool temp276568 = color270566.w < d6;
        float temp277569 = bigColor8.x + color270566.y;
        vec4 temp230 = color270566;
        temp230.y = temp277569;
        vec4 color270566dtemp278571 = temp276568 ? color270566 : temp230;
        vec4 ternary579d0 = temp275567 ? color270566dtemp278571 : temp230;
        colord39d0 = ternary579d0;
    }
    
    vec4 color279589 = colord39d0 + const77;
    colord40d0 = color279589;
    while (colord40d0.x < d14){
        bool temp282595 = colord40d0.y < d15;
        if (temp282595) {
            FragColor_shadow674d0 = color279589;
            gl_FragColor = FragColor_shadow674d0;
            return;
        }
        
        vec4 color286599 = colord40d0 + const77;
        colord40d0 = color286599;
    }
    
    vec4 color290603 = colord40d0 + const77;
    colord41d0 = color290603;
    while (colord41d0.w < d16){
        float temp285609 = colord41d0.w + const134;
        vec4 temp238 = colord41d0;
        temp238.w = temp285609;
        colord41d0 = temp238;
    }
    
    colord42d0 = colord41d0;
    while (true) {
        bool notlhs331620 = colord42d0.w >= d2;
        bool notrhs332621 = colord42d0.y >= d3;
        bool temp289622 = notrhs332621 || notlhs331620;
        vec4 color302655 = colord42d0 + bigColor1_2;
        colord42d0 = color302655;
    }
    
    colord43d0 = colord42d0;
    while (! (colord43d0.y < d18)){
        color312 = colord43d0 + const77;
        bool temp291629 = color312.x < d17;
        if (! temp291629) {
            colord44d0 = color312;
            while (colord44d0.y < d16){
                bool temp292636 = colord44d0.w < d16;
                if (temp292636) {
                    discard;
                }
                
                vec4 color324639 = colord44d0 + const77;
                colord44d0 = color324639;
            }
            
            vec4 color328643 = colord44d0 + const77;
            FragColor_shadow674d0 = color328643;
            gl_FragColor = FragColor_shadow674d0;
            return;
        }
        
        colord43d0 = color312;
    }
    
    FragColor_shadow674d0 = color279589;
    gl_FragColor = FragColor_shadow674d0;
    
}

