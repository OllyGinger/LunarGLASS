
Top IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@gl_FragColor = internal global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %i120 = alloca i32
  %i107 = alloca i32
  %i94 = alloca i32
  %i78 = alloca i32
  %i69 = alloca i32
  %i = alloca i32
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %post-loop-break10, %entry
  br i1 false, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fcmp olt float %1, 0x3FD51EB860000000
  br i1 %2, label %then1, label %ifmerge4

then1:                                            ; preds = %ifmerge
  %3 = load <4 x float>* %color
  %color2 = fadd <4 x float> %3, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color2, <4 x float>* %color
  br label %loop-merge

post-loop-break3:                                 ; No predecessors!
  br label %ifmerge4

ifmerge4:                                         ; preds = %ifmerge, %post-loop-break3
  %4 = load <4 x float>* %color
  %5 = extractelement <4 x float> %4, i32 0
  %6 = fcmp olt float %5, 0x3FE51EB860000000
  br i1 %6, label %then5, label %ifmerge8

then5:                                            ; preds = %ifmerge4
  %7 = load <4 x float>* %color
  %color6 = fadd <4 x float> %7, <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>
  store <4 x float> %color6, <4 x float>* %color
  br label %loop-merge

post-loop-break7:                                 ; No predecessors!
  br label %ifmerge8

ifmerge8:                                         ; preds = %ifmerge4, %post-loop-break7
  %8 = load <4 x float>* %color
  %color9 = fadd <4 x float> %8, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color9, <4 x float>* %color
  br label %loop-merge

post-loop-break10:                                ; No predecessors!
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %ifmerge8, %then5, %then1, %then
  br label %loop-header11

loop-header11:                                    ; preds = %post-loop-continue16, %ifmerge14, %loop-merge
  %9 = load <4 x float>* %color
  %10 = extractelement <4 x float> %9, i32 0
  %11 = load float addrspace(2)* @d
  %12 = fcmp olt float %10, %11
  %13 = xor i1 %12, true
  br i1 %13, label %then12, label %ifmerge14

then12:                                           ; preds = %loop-header11
  br label %loop-merge17

post-loop-break13:                                ; No predecessors!
  br label %ifmerge14

ifmerge14:                                        ; preds = %loop-header11, %post-loop-break13
  %14 = load <4 x float> addrspace(2)* @bigColor
  %15 = load <4 x float>* %color
  %color15 = fadd <4 x float> %15, %14
  store <4 x float> %color15, <4 x float>* %color
  br label %loop-header11

post-loop-continue16:                             ; No predecessors!
  br label %loop-header11

loop-merge17:                                     ; preds = %then12
  br label %loop-header18

loop-header18:                                    ; preds = %post-loop-continue27, %ifmerge25, %then23, %loop-merge17
  %16 = load <4 x float>* %color
  %17 = extractelement <4 x float> %16, i32 2
  %18 = load float addrspace(2)* @d
  %19 = fcmp olt float %17, %18
  %20 = xor i1 %19, true
  br i1 %20, label %then19, label %ifmerge21

then19:                                           ; preds = %loop-header18
  br label %loop-merge28

post-loop-break20:                                ; No predecessors!
  br label %ifmerge21

ifmerge21:                                        ; preds = %loop-header18, %post-loop-break20
  %21 = load <4 x float> addrspace(2)* @bigColor1_1
  %22 = load <4 x float>* %color
  %color22 = fadd <4 x float> %22, %21
  store <4 x float> %color22, <4 x float>* %color
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(2)* @d
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then23, label %ifmerge25

then23:                                           ; preds = %ifmerge21
  br label %loop-header18

post-loop-continue24:                             ; No predecessors!
  br label %ifmerge25

ifmerge25:                                        ; preds = %ifmerge21, %post-loop-continue24
  %27 = load <4 x float> addrspace(2)* @bigColor1_1
  %28 = load <4 x float>* %color
  %color26 = fadd <4 x float> %28, %27
  store <4 x float> %color26, <4 x float>* %color
  br label %loop-header18

post-loop-continue27:                             ; No predecessors!
  br label %loop-header18

loop-merge28:                                     ; preds = %then19
  br label %loop-header29

loop-header29:                                    ; preds = %post-loop-continue34, %ifmerge32, %loop-merge28
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 0
  %31 = fcmp olt float %30, 4.200000e+01
  %32 = xor i1 %31, true
  br i1 %32, label %then30, label %ifmerge32

then30:                                           ; preds = %loop-header29
  br label %loop-merge35

post-loop-break31:                                ; No predecessors!
  br label %ifmerge32

ifmerge32:                                        ; preds = %loop-header29, %post-loop-break31
  %33 = load <4 x float>* %color
  %color33 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color33, <4 x float>* %color
  br label %loop-header29

post-loop-continue34:                             ; No predecessors!
  br label %loop-header29

loop-merge35:                                     ; preds = %then30
  br label %loop-header36

loop-header36:                                    ; preds = %post-loop-continue41, %ifmerge39, %loop-merge35
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 3
  %36 = load float addrspace(2)* @d2
  %37 = fcmp olt float %35, %36
  %38 = load <4 x float>* %color
  %39 = extractelement <4 x float> %38, i32 1
  %40 = load float addrspace(2)* @d3
  %41 = fcmp olt float %39, %40
  %42 = and i1 %37, %41
  %43 = xor i1 %42, true
  br i1 %43, label %then37, label %ifmerge39

then37:                                           ; preds = %loop-header36
  br label %loop-merge42

post-loop-break38:                                ; No predecessors!
  br label %ifmerge39

ifmerge39:                                        ; preds = %loop-header36, %post-loop-break38
  %44 = load <4 x float> addrspace(2)* @bigColor1_2
  %45 = load <4 x float>* %color
  %color40 = fadd <4 x float> %45, %44
  store <4 x float> %color40, <4 x float>* %color
  br label %loop-header36

post-loop-continue41:                             ; No predecessors!
  br label %loop-header36

loop-merge42:                                     ; preds = %then37
  br label %loop-header43

loop-header43:                                    ; preds = %post-loop-continue52, %ifmerge50, %loop-merge42
  %46 = load <4 x float>* %color
  %47 = extractelement <4 x float> %46, i32 2
  %48 = load float addrspace(2)* @d3
  %49 = fcmp olt float %47, %48
  %50 = xor i1 %49, true
  br i1 %50, label %then44, label %ifmerge46

then44:                                           ; preds = %loop-header43
  br label %loop-merge53

post-loop-break45:                                ; No predecessors!
  br label %ifmerge46

ifmerge46:                                        ; preds = %loop-header43, %post-loop-break45
  %51 = load <4 x float> addrspace(2)* @bigColor1_3
  %52 = load <4 x float>* %color
  %color47 = fadd <4 x float> %52, %51
  store <4 x float> %color47, <4 x float>* %color
  %53 = load <4 x float>* %color
  %54 = extractelement <4 x float> %53, i32 1
  %55 = load float addrspace(2)* @d4
  %56 = fcmp olt float %54, %55
  br i1 %56, label %then48, label %ifmerge50

then48:                                           ; preds = %ifmerge46
  br label %loop-merge53

post-loop-break49:                                ; No predecessors!
  br label %ifmerge50

ifmerge50:                                        ; preds = %ifmerge46, %post-loop-break49
  %57 = load <4 x float> addrspace(2)* @bigColor1_3
  %58 = load <4 x float>* %color
  %color51 = fadd <4 x float> %58, %57
  store <4 x float> %color51, <4 x float>* %color
  br label %loop-header43

post-loop-continue52:                             ; No predecessors!
  br label %loop-header43

loop-merge53:                                     ; preds = %then48, %then44
  store i32 0, i32* %i
  br label %loop-header54

loop-header54:                                    ; preds = %post-loop-continue60, %ifmerge57, %loop-merge53
  %59 = load i32* %i
  %60 = load i32 addrspace(2)* @Count
  %61 = icmp slt i32 %59, %60
  %62 = xor i1 %61, true
  br i1 %62, label %then55, label %ifmerge57

then55:                                           ; preds = %loop-header54
  br label %loop-merge61

post-loop-break56:                                ; No predecessors!
  br label %ifmerge57

ifmerge57:                                        ; preds = %loop-header54, %post-loop-break56
  %63 = load <4 x float> addrspace(2)* @bigColor2
  %64 = load <4 x float>* %color
  %color58 = fadd <4 x float> %64, %63
  store <4 x float> %color58, <4 x float>* %color
  %65 = load i32* %i
  %i59 = add i32 %65, 1
  store i32 %i59, i32* %i
  br label %loop-header54

post-loop-continue60:                             ; No predecessors!
  br label %loop-header54

loop-merge61:                                     ; preds = %then55
  br label %loop-header62

loop-header62:                                    ; preds = %post-loop-continue67, %ifmerge66, %loop-merge61
  %66 = load <4 x float> addrspace(2)* @bigColor3
  %67 = load <4 x float>* %color
  %color63 = fadd <4 x float> %67, %66
  store <4 x float> %color63, <4 x float>* %color
  %68 = load <4 x float>* %color
  %69 = extractelement <4 x float> %68, i32 0
  %70 = load float addrspace(2)* @d2
  %71 = fcmp olt float %69, %70
  %72 = xor i1 %71, true
  br i1 %72, label %then64, label %ifmerge66

then64:                                           ; preds = %loop-header62
  br label %loop-merge68

post-loop-break65:                                ; No predecessors!
  br label %ifmerge66

ifmerge66:                                        ; preds = %loop-header62, %post-loop-break65
  br label %loop-header62

post-loop-continue67:                             ; No predecessors!
  br label %loop-header62

loop-merge68:                                     ; preds = %then64
  store i32 0, i32* %i69
  br label %loop-header70

loop-header70:                                    ; preds = %post-loop-continue76, %ifmerge73, %loop-merge68
  %73 = load i32* %i69
  %74 = icmp slt i32 %73, 42
  %75 = xor i1 %74, true
  br i1 %75, label %then71, label %ifmerge73

then71:                                           ; preds = %loop-header70
  br label %loop-merge77

post-loop-break72:                                ; No predecessors!
  br label %ifmerge73

ifmerge73:                                        ; preds = %loop-header70, %post-loop-break72
  %76 = load float addrspace(2)* @d3
  %77 = load <4 x float>* %color
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %76
  %80 = load <4 x float>* %color
  %color74 = insertelement <4 x float> %80, float %79, i32 2
  store <4 x float> %color74, <4 x float>* %color
  %81 = load i32* %i69
  %i6975 = add i32 %81, 1
  store i32 %i6975, i32* %i69
  br label %loop-header70

post-loop-continue76:                             ; No predecessors!
  br label %loop-header70

loop-merge77:                                     ; preds = %then71
  store i32 0, i32* %i78
  br label %loop-header79

loop-header79:                                    ; preds = %post-loop-continue92, %ifmerge90, %loop-merge77
  %82 = load i32* %i78
  %83 = icmp slt i32 %82, 100
  %84 = xor i1 %83, true
  br i1 %84, label %then80, label %ifmerge82

then80:                                           ; preds = %loop-header79
  br label %loop-merge93

post-loop-break81:                                ; No predecessors!
  br label %ifmerge82

ifmerge82:                                        ; preds = %loop-header79, %post-loop-break81
  %85 = load <4 x float>* %color
  %86 = extractelement <4 x float> %85, i32 2
  %87 = fcmp olt float %86, 2.000000e+01
  br i1 %87, label %then83, label %else

then83:                                           ; preds = %ifmerge82
  %88 = load <4 x float>* %color
  %89 = extractelement <4 x float> %88, i32 0
  %90 = fadd float %89, 1.000000e+00
  %91 = load <4 x float>* %color
  %color84 = insertelement <4 x float> %91, float %90, i32 0
  store <4 x float> %color84, <4 x float>* %color
  br label %ifmerge86

else:                                             ; preds = %ifmerge82
  %92 = load <4 x float>* %color
  %93 = extractelement <4 x float> %92, i32 1
  %94 = fadd float %93, 1.000000e+00
  %95 = load <4 x float>* %color
  %color85 = insertelement <4 x float> %95, float %94, i32 1
  store <4 x float> %color85, <4 x float>* %color
  br label %ifmerge86

ifmerge86:                                        ; preds = %else, %then83
  %96 = load <4 x float>* %color
  %97 = extractelement <4 x float> %96, i32 3
  %98 = fcmp olt float %97, 2.000000e+01
  br i1 %98, label %then87, label %ifmerge90

then87:                                           ; preds = %ifmerge86
  %99 = load <4 x float>* %color
  %100 = extractelement <4 x float> %99, i32 2
  %101 = load <4 x float>* %color
  %102 = extractelement <4 x float> %101, i32 1
  %103 = fcmp ogt float %100, %102
  br i1 %103, label %then88, label %ifmerge89

then88:                                           ; preds = %then87
  br label %ifmerge89

ifmerge89:                                        ; preds = %then87, %then88
  br label %ifmerge90

ifmerge90:                                        ; preds = %ifmerge86, %ifmerge89
  %104 = load i32* %i78
  %i7891 = add i32 %104, 1
  store i32 %i7891, i32* %i78
  br label %loop-header79

post-loop-continue92:                             ; No predecessors!
  br label %loop-header79

loop-merge93:                                     ; preds = %then80
  store i32 0, i32* %i94
  br label %loop-header95

loop-header95:                                    ; preds = %post-loop-continue105, %ifmerge103, %loop-merge93
  %105 = load i32* %i94
  %106 = icmp slt i32 %105, 120
  %107 = xor i1 %106, true
  br i1 %107, label %then96, label %ifmerge98

then96:                                           ; preds = %loop-header95
  br label %loop-merge106

post-loop-break97:                                ; No predecessors!
  br label %ifmerge98

ifmerge98:                                        ; preds = %loop-header95, %post-loop-break97
  %108 = load <4 x float>* %color
  %109 = extractelement <4 x float> %108, i32 2
  %110 = fcmp olt float %109, 2.000000e+01
  br i1 %110, label %then99, label %else101

then99:                                           ; preds = %ifmerge98
  %111 = load <4 x float>* %color
  %112 = extractelement <4 x float> %111, i32 0
  %113 = fadd float %112, 1.000000e+00
  %114 = load <4 x float>* %color
  %color100 = insertelement <4 x float> %114, float %113, i32 0
  store <4 x float> %color100, <4 x float>* %color
  br label %ifmerge103

else101:                                          ; preds = %ifmerge98
  %115 = load <4 x float>* %color
  %116 = extractelement <4 x float> %115, i32 1
  %117 = fadd float %116, 1.000000e+00
  %118 = load <4 x float>* %color
  %color102 = insertelement <4 x float> %118, float %117, i32 1
  store <4 x float> %color102, <4 x float>* %color
  br label %ifmerge103

ifmerge103:                                       ; preds = %else101, %then99
  %119 = load i32* %i94
  %i94104 = add i32 %119, 1
  store i32 %i94104, i32* %i94
  br label %loop-header95

post-loop-continue105:                            ; No predecessors!
  br label %loop-header95

loop-merge106:                                    ; preds = %then96
  store i32 0, i32* %i107
  br label %loop-header108

loop-header108:                                   ; preds = %post-loop-continue118, %ifmerge115, %then113, %loop-merge106
  %120 = load i32* %i107
  %121 = icmp slt i32 %120, 42
  %122 = xor i1 %121, true
  br i1 %122, label %then109, label %ifmerge111

then109:                                          ; preds = %loop-header108
  br label %loop-merge119

post-loop-break110:                               ; No predecessors!
  br label %ifmerge111

ifmerge111:                                       ; preds = %loop-header108, %post-loop-break110
  %123 = load float addrspace(2)* @d3
  %124 = load <4 x float>* %color
  %125 = extractelement <4 x float> %124, i32 2
  %126 = fadd float %125, %123
  %127 = load <4 x float>* %color
  %color112 = insertelement <4 x float> %127, float %126, i32 2
  store <4 x float> %color112, <4 x float>* %color
  %128 = load <4 x float>* %color
  %129 = extractelement <4 x float> %128, i32 0
  %130 = load float addrspace(2)* @d4
  %131 = fcmp olt float %129, %130
  br i1 %131, label %then113, label %ifmerge115

then113:                                          ; preds = %ifmerge111
  br label %loop-header108

post-loop-continue114:                            ; No predecessors!
  br label %ifmerge115

ifmerge115:                                       ; preds = %ifmerge111, %post-loop-continue114
  %132 = load <4 x float>* %color
  %133 = extractelement <4 x float> %132, i32 3
  %134 = fadd float %133, 1.000000e+00
  %135 = load <4 x float>* %color
  %color116 = insertelement <4 x float> %135, float %134, i32 3
  store <4 x float> %color116, <4 x float>* %color
  %136 = load i32* %i107
  %i107117 = add i32 %136, 1
  store i32 %i107117, i32* %i107
  br label %loop-header108

post-loop-continue118:                            ; No predecessors!
  br label %loop-header108

loop-merge119:                                    ; preds = %then109
  store i32 0, i32* %i120
  br label %loop-header121

loop-header121:                                   ; preds = %post-loop-continue131, %ifmerge128, %loop-merge119
  %137 = load i32* %i120
  %138 = icmp slt i32 %137, 42
  %139 = xor i1 %138, true
  br i1 %139, label %then122, label %ifmerge124

then122:                                          ; preds = %loop-header121
  br label %loop-merge132

post-loop-break123:                               ; No predecessors!
  br label %ifmerge124

ifmerge124:                                       ; preds = %loop-header121, %post-loop-break123
  %140 = load float addrspace(2)* @d3
  %141 = load <4 x float>* %color
  %142 = extractelement <4 x float> %141, i32 2
  %143 = fadd float %142, %140
  %144 = load <4 x float>* %color
  %color125 = insertelement <4 x float> %144, float %143, i32 2
  store <4 x float> %color125, <4 x float>* %color
  %145 = load <4 x float>* %color
  %146 = extractelement <4 x float> %145, i32 0
  %147 = load float addrspace(2)* @d4
  %148 = fcmp olt float %146, %147
  br i1 %148, label %then126, label %ifmerge128

then126:                                          ; preds = %ifmerge124
  br label %loop-merge132

post-loop-break127:                               ; No predecessors!
  br label %ifmerge128

ifmerge128:                                       ; preds = %ifmerge124, %post-loop-break127
  %149 = load <4 x float>* %color
  %150 = extractelement <4 x float> %149, i32 3
  %151 = fadd float %150, 1.000000e+00
  %152 = load <4 x float>* %color
  %color129 = insertelement <4 x float> %152, float %151, i32 3
  store <4 x float> %color129, <4 x float>* %color
  %153 = load i32* %i120
  %i120130 = add i32 %153, 1
  store i32 %i120130, i32* %i120
  br label %loop-header121

post-loop-continue131:                            ; No predecessors!
  br label %loop-header121

loop-merge132:                                    ; preds = %then126, %then122
  br label %loop-header133

loop-header133:                                   ; preds = %post-loop-continue146, %ifmerge145, %then135, %loop-merge132
  %154 = load <4 x float> addrspace(2)* @bigColor4
  %155 = load <4 x float>* %color
  %color134 = fadd <4 x float> %155, %154
  store <4 x float> %color134, <4 x float>* %color
  %156 = load <4 x float>* %color
  %157 = extractelement <4 x float> %156, i32 0
  %158 = load float addrspace(2)* @d4
  %159 = fcmp olt float %157, %158
  br i1 %159, label %then135, label %ifmerge137

then135:                                          ; preds = %loop-header133
  br label %loop-header133

post-loop-continue136:                            ; No predecessors!
  br label %ifmerge137

ifmerge137:                                       ; preds = %loop-header133, %post-loop-continue136
  %160 = load <4 x float>* %color
  %161 = extractelement <4 x float> %160, i32 1
  %162 = load float addrspace(2)* @d4
  %163 = fcmp olt float %161, %162
  br i1 %163, label %then138, label %else140

then138:                                          ; preds = %ifmerge137
  %164 = load float addrspace(2)* @d4
  %165 = load <4 x float>* %color
  %166 = extractelement <4 x float> %165, i32 1
  %167 = fadd float %166, %164
  %168 = load <4 x float>* %color
  %color139 = insertelement <4 x float> %168, float %167, i32 1
  store <4 x float> %color139, <4 x float>* %color
  br label %ifmerge142

else140:                                          ; preds = %ifmerge137
  %169 = load float addrspace(2)* @d4
  %170 = load <4 x float>* %color
  %171 = extractelement <4 x float> %170, i32 0
  %172 = fadd float %171, %169
  %173 = load <4 x float>* %color
  %color141 = insertelement <4 x float> %173, float %172, i32 0
  store <4 x float> %color141, <4 x float>* %color
  br label %ifmerge142

ifmerge142:                                       ; preds = %else140, %then138
  %174 = load <4 x float>* %color
  %175 = extractelement <4 x float> %174, i32 2
  %176 = load float addrspace(2)* @d4
  %177 = fcmp olt float %175, %176
  %178 = xor i1 %177, true
  br i1 %178, label %then143, label %ifmerge145

then143:                                          ; preds = %ifmerge142
  br label %loop-merge147

post-loop-break144:                               ; No predecessors!
  br label %ifmerge145

ifmerge145:                                       ; preds = %ifmerge142, %post-loop-break144
  br label %loop-header133

post-loop-continue146:                            ; No predecessors!
  br label %loop-header133

loop-merge147:                                    ; preds = %then143
  br label %loop-header148

loop-header148:                                   ; preds = %post-loop-continue156, %ifmerge155, %loop-merge147
  %179 = load <4 x float> addrspace(2)* @bigColor5
  %180 = load <4 x float>* %color
  %color149 = fadd <4 x float> %180, %179
  store <4 x float> %color149, <4 x float>* %color
  %181 = load <4 x float>* %color
  %182 = extractelement <4 x float> %181, i32 1
  %183 = load float addrspace(2)* @d5
  %184 = fcmp olt float %182, %183
  br i1 %184, label %then150, label %ifmerge152

then150:                                          ; preds = %loop-header148
  %185 = load float addrspace(2)* @d5
  %186 = load <4 x float>* %color
  %187 = extractelement <4 x float> %186, i32 1
  %188 = fadd float %187, %185
  %189 = load <4 x float>* %color
  %color151 = insertelement <4 x float> %189, float %188, i32 1
  store <4 x float> %color151, <4 x float>* %color
  br label %ifmerge152

ifmerge152:                                       ; preds = %loop-header148, %then150
  %190 = load <4 x float>* %color
  %191 = extractelement <4 x float> %190, i32 0
  %192 = load float addrspace(2)* @d5
  %193 = fcmp olt float %191, %192
  %194 = xor i1 %193, true
  br i1 %194, label %then153, label %ifmerge155

then153:                                          ; preds = %ifmerge152
  br label %loop-merge157

post-loop-break154:                               ; No predecessors!
  br label %ifmerge155

ifmerge155:                                       ; preds = %ifmerge152, %post-loop-break154
  br label %loop-header148

post-loop-continue156:                            ; No predecessors!
  br label %loop-header148

loop-merge157:                                    ; preds = %then153
  %195 = load <4 x float>* %color
  %196 = extractelement <4 x float> %195, i32 0
  %197 = load float addrspace(2)* @d6
  %198 = fcmp olt float %196, %197
  br i1 %198, label %then158, label %else166

then158:                                          ; preds = %loop-merge157
  br label %loop-header159

loop-header159:                                   ; preds = %post-loop-continue164, %ifmerge162, %then158
  %199 = load <4 x float>* %color
  %200 = extractelement <4 x float> %199, i32 1
  %201 = load float addrspace(2)* @d6
  %202 = fcmp olt float %200, %201
  %203 = xor i1 %202, true
  br i1 %203, label %then160, label %ifmerge162

then160:                                          ; preds = %loop-header159
  br label %loop-merge165

post-loop-break161:                               ; No predecessors!
  br label %ifmerge162

ifmerge162:                                       ; preds = %loop-header159, %post-loop-break161
  %204 = load <4 x float> addrspace(2)* @bigColor6
  %205 = load <4 x float>* %color
  %color163 = fadd <4 x float> %205, %204
  store <4 x float> %color163, <4 x float>* %color
  br label %loop-header159

post-loop-continue164:                            ; No predecessors!
  br label %loop-header159

loop-merge165:                                    ; preds = %then160
  br label %ifmerge174

else166:                                          ; preds = %loop-merge157
  br label %loop-header167

loop-header167:                                   ; preds = %post-loop-continue172, %ifmerge170, %else166
  %206 = load <4 x float>* %color
  %207 = extractelement <4 x float> %206, i32 2
  %208 = load float addrspace(2)* @d6
  %209 = fcmp olt float %207, %208
  %210 = xor i1 %209, true
  br i1 %210, label %then168, label %ifmerge170

then168:                                          ; preds = %loop-header167
  br label %loop-merge173

post-loop-break169:                               ; No predecessors!
  br label %ifmerge170

ifmerge170:                                       ; preds = %loop-header167, %post-loop-break169
  %211 = load <4 x float> addrspace(2)* @bigColor6
  %212 = extractelement <4 x float> %211, i32 2
  %213 = load <4 x float>* %color
  %214 = extractelement <4 x float> %213, i32 2
  %215 = fadd float %214, %212
  %216 = load <4 x float>* %color
  %color171 = insertelement <4 x float> %216, float %215, i32 2
  store <4 x float> %color171, <4 x float>* %color
  br label %loop-header167

post-loop-continue172:                            ; No predecessors!
  br label %loop-header167

loop-merge173:                                    ; preds = %then168
  br label %ifmerge174

ifmerge174:                                       ; preds = %loop-merge173, %loop-merge165
  %217 = load <4 x float>* %color
  %218 = extractelement <4 x float> %217, i32 0
  %219 = load float addrspace(2)* @d6
  %220 = fcmp olt float %218, %219
  br i1 %220, label %then175, label %else186

then175:                                          ; preds = %ifmerge174
  br label %loop-header176

loop-header176:                                   ; preds = %post-loop-continue184, %ifmerge183, %then175
  %221 = load <4 x float>* %color
  %222 = extractelement <4 x float> %221, i32 1
  %223 = load float addrspace(2)* @d6
  %224 = fcmp olt float %222, %223
  %225 = xor i1 %224, true
  br i1 %225, label %then177, label %ifmerge179

then177:                                          ; preds = %loop-header176
  br label %loop-merge185

post-loop-break178:                               ; No predecessors!
  br label %ifmerge179

ifmerge179:                                       ; preds = %loop-header176, %post-loop-break178
  %226 = load <4 x float> addrspace(2)* @bigColor6
  %227 = load <4 x float>* %color
  %color180 = fadd <4 x float> %227, %226
  store <4 x float> %color180, <4 x float>* %color
  %228 = load float addrspace(2)* @d7
  %229 = fcmp olt float %228, 1.000000e+00
  br i1 %229, label %then181, label %ifmerge183

then181:                                          ; preds = %ifmerge179
  br label %loop-merge185

post-loop-break182:                               ; No predecessors!
  br label %ifmerge183

ifmerge183:                                       ; preds = %ifmerge179, %post-loop-break182
  br label %loop-header176

post-loop-continue184:                            ; No predecessors!
  br label %loop-header176

loop-merge185:                                    ; preds = %then181, %then177
  br label %ifmerge194

else186:                                          ; preds = %ifmerge174
  br label %loop-header187

loop-header187:                                   ; preds = %post-loop-continue192, %ifmerge190, %else186
  %230 = load <4 x float>* %color
  %231 = extractelement <4 x float> %230, i32 2
  %232 = load float addrspace(2)* @d6
  %233 = fcmp olt float %231, %232
  %234 = xor i1 %233, true
  br i1 %234, label %then188, label %ifmerge190

then188:                                          ; preds = %loop-header187
  br label %loop-merge193

post-loop-break189:                               ; No predecessors!
  br label %ifmerge190

ifmerge190:                                       ; preds = %loop-header187, %post-loop-break189
  %235 = load <4 x float> addrspace(2)* @bigColor6
  %236 = extractelement <4 x float> %235, i32 2
  %237 = load <4 x float>* %color
  %238 = extractelement <4 x float> %237, i32 2
  %239 = fadd float %238, %236
  %240 = load <4 x float>* %color
  %color191 = insertelement <4 x float> %240, float %239, i32 2
  store <4 x float> %color191, <4 x float>* %color
  br label %loop-header187

post-loop-continue192:                            ; No predecessors!
  br label %loop-header187

loop-merge193:                                    ; preds = %then188
  br label %ifmerge194

ifmerge194:                                       ; preds = %loop-merge193, %loop-merge185
  br label %loop-header195

loop-header195:                                   ; preds = %post-loop-continue209, %ifmerge208, %ifmerge194
  %241 = load float addrspace(2)* @d7
  %242 = fcmp olt float %241, 0.000000e+00
  br i1 %242, label %then196, label %ifmerge198

then196:                                          ; preds = %loop-header195
  br label %loop-merge210

post-loop-break197:                               ; No predecessors!
  br label %ifmerge198

ifmerge198:                                       ; preds = %loop-header195, %post-loop-break197
  %243 = load <4 x float> addrspace(2)* @bigColor7
  %244 = load <4 x float>* %color
  %color199 = fadd <4 x float> %244, %243
  store <4 x float> %color199, <4 x float>* %color
  %245 = load float addrspace(2)* @d7
  %246 = fcmp olt float %245, 1.000000e+00
  br i1 %246, label %then200, label %ifmerge203

then200:                                          ; preds = %ifmerge198
  %247 = load <4 x float>* %color
  %248 = extractelement <4 x float> %247, i32 2
  %249 = fadd float %248, 1.000000e+00
  %250 = load <4 x float>* %color
  %color201 = insertelement <4 x float> %250, float %249, i32 2
  store <4 x float> %color201, <4 x float>* %color
  br label %loop-merge210

post-loop-break202:                               ; No predecessors!
  br label %ifmerge203

ifmerge203:                                       ; preds = %ifmerge198, %post-loop-break202
  %BaseColor204 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %251 = load <4 x float>* %color
  %color205 = fadd <4 x float> %251, %BaseColor204
  store <4 x float> %color205, <4 x float>* %color
  br i1 false, label %then206, label %ifmerge208

then206:                                          ; preds = %ifmerge203
  br label %loop-merge210

post-loop-break207:                               ; No predecessors!
  br label %ifmerge208

ifmerge208:                                       ; preds = %ifmerge203, %post-loop-break207
  br label %loop-header195

post-loop-continue209:                            ; No predecessors!
  br label %loop-header195

loop-merge210:                                    ; preds = %then206, %then200, %then196
  br label %loop-header211

loop-header211:                                   ; preds = %post-loop-continue230, %ifmerge229, %loop-merge210
  %252 = load float addrspace(2)* @d8
  %253 = fcmp olt float %252, 0.000000e+00
  br i1 %253, label %then212, label %ifmerge214

then212:                                          ; preds = %loop-header211
  br label %loop-merge231

post-loop-break213:                               ; No predecessors!
  br label %ifmerge214

ifmerge214:                                       ; preds = %loop-header211, %post-loop-break213
  %254 = load <4 x float> addrspace(2)* @bigColor7
  %255 = load <4 x float>* %color
  %color215 = fadd <4 x float> %255, %254
  store <4 x float> %color215, <4 x float>* %color
  %256 = load float addrspace(2)* @d8
  %257 = fcmp olt float %256, 1.000000e+00
  br i1 %257, label %then216, label %ifmerge224

then216:                                          ; preds = %ifmerge214
  %258 = load <4 x float>* %color
  %259 = extractelement <4 x float> %258, i32 2
  %260 = fadd float %259, 1.000000e+00
  %261 = load <4 x float>* %color
  %color217 = insertelement <4 x float> %261, float %260, i32 2
  store <4 x float> %color217, <4 x float>* %color
  %262 = load float addrspace(2)* @d8
  %263 = fcmp olt float %262, 2.000000e+00
  br i1 %263, label %then218, label %else220

then218:                                          ; preds = %then216
  %264 = load <4 x float>* %color
  %265 = extractelement <4 x float> %264, i32 1
  %266 = fadd float %265, 1.000000e+00
  %267 = load <4 x float>* %color
  %color219 = insertelement <4 x float> %267, float %266, i32 1
  store <4 x float> %color219, <4 x float>* %color
  br label %ifmerge222

else220:                                          ; preds = %then216
  %268 = load <4 x float>* %color
  %269 = extractelement <4 x float> %268, i32 0
  %270 = fadd float %269, 1.000000e+00
  %271 = load <4 x float>* %color
  %color221 = insertelement <4 x float> %271, float %270, i32 0
  store <4 x float> %color221, <4 x float>* %color
  br label %ifmerge222

ifmerge222:                                       ; preds = %else220, %then218
  br label %loop-merge231

post-loop-break223:                               ; No predecessors!
  br label %ifmerge224

ifmerge224:                                       ; preds = %ifmerge214, %post-loop-break223
  %BaseColor225 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %272 = load <4 x float>* %color
  %color226 = fadd <4 x float> %272, %BaseColor225
  store <4 x float> %color226, <4 x float>* %color
  %273 = load <4 x float>* %color
  %274 = extractelement <4 x float> %273, i32 2
  %275 = load float addrspace(2)* @d8
  %276 = fcmp olt float %274, %275
  %277 = xor i1 %276, true
  br i1 %277, label %then227, label %ifmerge229

then227:                                          ; preds = %ifmerge224
  br label %loop-merge231

post-loop-break228:                               ; No predecessors!
  br label %ifmerge229

ifmerge229:                                       ; preds = %ifmerge224, %post-loop-break228
  br label %loop-header211

post-loop-continue230:                            ; No predecessors!
  br label %loop-header211

loop-merge231:                                    ; preds = %then227, %ifmerge222, %then212
  br label %loop-header232

loop-header232:                                   ; preds = %post-loop-continue245, %ifmerge244, %loop-merge231
  %278 = load <4 x float>* %color
  %279 = extractelement <4 x float> %278, i32 3
  %280 = load float addrspace(2)* @d9
  %281 = fcmp olt float %279, %280
  %282 = xor i1 %281, true
  br i1 %282, label %then233, label %ifmerge235

then233:                                          ; preds = %loop-header232
  br label %loop-merge246

post-loop-break234:                               ; No predecessors!
  br label %ifmerge235

ifmerge235:                                       ; preds = %loop-header232, %post-loop-break234
  %283 = load float addrspace(2)* @d9
  %284 = load float addrspace(2)* @d8
  %285 = fcmp ogt float %283, %284
  br i1 %285, label %then236, label %ifmerge244

then236:                                          ; preds = %ifmerge235
  %286 = load <4 x float>* %color
  %287 = extractelement <4 x float> %286, i32 0
  %288 = load float addrspace(2)* @d7
  %289 = fcmp ole float %287, %288
  br i1 %289, label %then237, label %ifmerge243

then237:                                          ; preds = %then236
  %290 = load <4 x float>* %color
  %291 = extractelement <4 x float> %290, i32 2
  %292 = fcmp oeq float %291, 5.000000e+00
  br i1 %292, label %then238, label %else240

then238:                                          ; preds = %then237
  %293 = load <4 x float>* %color
  %294 = extractelement <4 x float> %293, i32 3
  %295 = fadd float %294, 1.000000e+00
  %296 = load <4 x float>* %color
  %color239 = insertelement <4 x float> %296, float %295, i32 3
  store <4 x float> %color239, <4 x float>* %color
  br label %ifmerge242

else240:                                          ; preds = %then237
  br label %loop-merge246

post-loop-break241:                               ; No predecessors!
  br label %ifmerge242

ifmerge242:                                       ; preds = %post-loop-break241, %then238
  br label %ifmerge243

ifmerge243:                                       ; preds = %then236, %ifmerge242
  br label %ifmerge244

ifmerge244:                                       ; preds = %ifmerge235, %ifmerge243
  br label %loop-header232

post-loop-continue245:                            ; No predecessors!
  br label %loop-header232

loop-merge246:                                    ; preds = %else240, %then233
  br label %loop-header247

loop-header247:                                   ; preds = %post-loop-continue263, %post-loop-break262, %ifmerge258, %loop-merge246
  %297 = load <4 x float>* %color
  %298 = extractelement <4 x float> %297, i32 2
  %299 = load float addrspace(2)* @d10
  %300 = fcmp olt float %298, %299
  %301 = xor i1 %300, true
  br i1 %301, label %then248, label %ifmerge250

then248:                                          ; preds = %loop-header247
  br label %loop-merge264

post-loop-break249:                               ; No predecessors!
  br label %ifmerge250

ifmerge250:                                       ; preds = %loop-header247, %post-loop-break249
  %302 = load <4 x float>* %color
  %303 = extractelement <4 x float> %302, i32 1
  %304 = fadd float %303, 1.000000e+00
  %305 = load <4 x float>* %color
  %color251 = insertelement <4 x float> %305, float %304, i32 1
  store <4 x float> %color251, <4 x float>* %color
  %306 = load <4 x float>* %color
  %307 = extractelement <4 x float> %306, i32 1
  %308 = load float addrspace(2)* @d11
  %309 = fcmp olt float %307, %308
  br i1 %309, label %then252, label %ifmerge260

then252:                                          ; preds = %ifmerge250
  %310 = load <4 x float>* %color
  %311 = extractelement <4 x float> %310, i32 2
  %312 = fadd float %311, 1.000000e+00
  %313 = load <4 x float>* %color
  %color253 = insertelement <4 x float> %313, float %312, i32 2
  store <4 x float> %color253, <4 x float>* %color
  %314 = load <4 x float>* %color
  %315 = extractelement <4 x float> %314, i32 3
  %316 = load float addrspace(2)* @d12
  %317 = fcmp olt float %315, %316
  br i1 %317, label %then254, label %else256

then254:                                          ; preds = %then252
  %318 = load <4 x float>* %color
  %319 = extractelement <4 x float> %318, i32 3
  %320 = fadd float %319, 1.000000e+00
  %321 = load <4 x float>* %color
  %color255 = insertelement <4 x float> %321, float %320, i32 3
  store <4 x float> %color255, <4 x float>* %color
  br label %ifmerge258

else256:                                          ; preds = %then252
  %322 = load <4 x float>* %color
  %323 = extractelement <4 x float> %322, i32 0
  %324 = fadd float %323, 1.000000e+00
  %325 = load <4 x float>* %color
  %color257 = insertelement <4 x float> %325, float %324, i32 0
  store <4 x float> %color257, <4 x float>* %color
  br label %ifmerge258

ifmerge258:                                       ; preds = %else256, %then254
  br label %loop-header247

post-loop-continue259:                            ; No predecessors!
  br label %ifmerge260

ifmerge260:                                       ; preds = %ifmerge250, %post-loop-continue259
  %326 = load <4 x float>* %color
  %color261 = fadd <4 x float> %326, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color261, <4 x float>* %color
  br label %loop-merge264

post-loop-break262:                               ; No predecessors!
  br label %loop-header247

post-loop-continue263:                            ; No predecessors!
  br label %loop-header247

loop-merge264:                                    ; preds = %ifmerge260, %then248
  br label %loop-header265

loop-header265:                                   ; preds = %post-loop-continue276, %ifmerge274, %then271, %loop-merge264
  %327 = load <4 x float>* %color
  %328 = extractelement <4 x float> %327, i32 0
  %329 = fcmp olt float %328, 1.000000e+01
  %330 = xor i1 %329, true
  br i1 %330, label %then266, label %ifmerge268

then266:                                          ; preds = %loop-header265
  br label %loop-merge277

post-loop-break267:                               ; No predecessors!
  br label %ifmerge268

ifmerge268:                                       ; preds = %loop-header265, %post-loop-break267
  %331 = load <4 x float> addrspace(2)* @bigColor8
  %332 = load <4 x float>* %color
  %color269 = fadd <4 x float> %332, %331
  store <4 x float> %color269, <4 x float>* %color
  %333 = load <4 x float>* %color
  %334 = extractelement <4 x float> %333, i32 2
  %335 = load float addrspace(2)* @d8
  %336 = fcmp olt float %334, %335
  br i1 %336, label %then270, label %ifmerge274

then270:                                          ; preds = %ifmerge268
  %337 = load <4 x float>* %color
  %338 = extractelement <4 x float> %337, i32 3
  %339 = load float addrspace(2)* @d6
  %340 = fcmp olt float %338, %339
  br i1 %340, label %then271, label %ifmerge273

then271:                                          ; preds = %then270
  br label %loop-header265

post-loop-continue272:                            ; No predecessors!
  br label %ifmerge273

ifmerge273:                                       ; preds = %then270, %post-loop-continue272
  br label %ifmerge274

ifmerge274:                                       ; preds = %ifmerge268, %ifmerge273
  %341 = load <4 x float> addrspace(2)* @bigColor8
  %342 = extractelement <4 x float> %341, i32 0
  %343 = load <4 x float>* %color
  %344 = extractelement <4 x float> %343, i32 1
  %345 = fadd float %344, %342
  %346 = load <4 x float>* %color
  %color275 = insertelement <4 x float> %346, float %345, i32 1
  store <4 x float> %color275, <4 x float>* %color
  br label %loop-header265

post-loop-continue276:                            ; No predecessors!
  br label %loop-header265

loop-merge277:                                    ; preds = %then266
  %347 = load <4 x float>* %color
  %color278 = fadd <4 x float> %347, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color278, <4 x float>* %color
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %loop-header279

loop-header279:                                   ; preds = %post-loop-continue287, %ifmerge286, %loop-merge277
  %348 = load <4 x float>* %color
  %349 = extractelement <4 x float> %348, i32 0
  %350 = load float addrspace(2)* @d14
  %351 = fcmp olt float %349, %350
  %352 = xor i1 %351, true
  br i1 %352, label %then280, label %ifmerge282

then280:                                          ; preds = %loop-header279
  br label %loop-merge288

post-loop-break281:                               ; No predecessors!
  br label %ifmerge282

ifmerge282:                                       ; preds = %loop-header279, %post-loop-break281
  %353 = load <4 x float>* %color
  %354 = extractelement <4 x float> %353, i32 1
  %355 = load float addrspace(2)* @d15
  %356 = fcmp olt float %354, %355
  br i1 %356, label %then283, label %else284

then283:                                          ; preds = %ifmerge282
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  br label %ifmerge286

else284:                                          ; preds = %ifmerge282
  %357 = load <4 x float>* %color
  %color285 = fadd <4 x float> %357, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color285, <4 x float>* %color
  br label %ifmerge286

ifmerge286:                                       ; preds = %else284, %post-return
  br label %loop-header279

post-loop-continue287:                            ; No predecessors!
  br label %loop-header279

loop-merge288:                                    ; preds = %then280
  %358 = load <4 x float>* %color
  %color289 = fadd <4 x float> %358, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color289, <4 x float>* %color
  br label %loop-header290

loop-header290:                                   ; preds = %post-loop-continue295, %ifmerge293, %loop-merge288
  %359 = load <4 x float>* %color
  %360 = extractelement <4 x float> %359, i32 3
  %361 = load float addrspace(2)* @d16
  %362 = fcmp olt float %360, %361
  %363 = xor i1 %362, true
  br i1 %363, label %then291, label %ifmerge293

then291:                                          ; preds = %loop-header290
  br label %loop-merge296

post-loop-break292:                               ; No predecessors!
  br label %ifmerge293

ifmerge293:                                       ; preds = %loop-header290, %post-loop-break292
  %364 = load <4 x float>* %color
  %365 = extractelement <4 x float> %364, i32 3
  %366 = fadd float %365, 1.000000e+00
  %367 = load <4 x float>* %color
  %color294 = insertelement <4 x float> %367, float %366, i32 3
  store <4 x float> %color294, <4 x float>* %color
  br label %loop-header290

post-loop-continue295:                            ; No predecessors!
  br label %loop-header290

loop-merge296:                                    ; preds = %then291
  br label %loop-header297

loop-header297:                                   ; preds = %post-loop-continue305, %ifmerge304, %loop-merge296
  %368 = load <4 x float>* %color
  %369 = extractelement <4 x float> %368, i32 3
  %370 = load float addrspace(2)* @d2
  %371 = fcmp olt float %369, %370
  %372 = load <4 x float>* %color
  %373 = extractelement <4 x float> %372, i32 1
  %374 = load float addrspace(2)* @d3
  %375 = fcmp olt float %373, %374
  %376 = and i1 %371, %375
  %377 = xor i1 %376, true
  br i1 %377, label %then298, label %ifmerge300

then298:                                          ; preds = %loop-header297
  br label %loop-merge306

post-loop-break299:                               ; No predecessors!
  br label %ifmerge300

ifmerge300:                                       ; preds = %loop-header297, %post-loop-break299
  %378 = load <4 x float> addrspace(2)* @bigColor1_2
  %379 = load <4 x float>* %color
  %color301 = fadd <4 x float> %379, %378
  store <4 x float> %color301, <4 x float>* %color
  %380 = load <4 x float>* %color
  %381 = extractelement <4 x float> %380, i32 2
  %382 = load float addrspace(2)* @d3
  %383 = fcmp olt float %381, %382
  br i1 %383, label %then302, label %ifmerge304

then302:                                          ; preds = %ifmerge300
  br label %stage-epilogue

post-return303:                                   ; No predecessors!
  br label %ifmerge304

ifmerge304:                                       ; preds = %ifmerge300, %post-return303
  br label %loop-header297

post-loop-continue305:                            ; No predecessors!
  br label %loop-header297

loop-merge306:                                    ; preds = %then298
  br label %loop-header307

loop-header307:                                   ; preds = %post-loop-continue315, %ifmerge314, %loop-merge306
  %384 = load <4 x float>* %color
  %385 = extractelement <4 x float> %384, i32 1
  %386 = load float addrspace(2)* @d18
  %387 = fcmp olt float %385, %386
  br i1 %387, label %then308, label %ifmerge310

then308:                                          ; preds = %loop-header307
  br label %stage-epilogue

post-return309:                                   ; No predecessors!
  br label %ifmerge310

ifmerge310:                                       ; preds = %loop-header307, %post-return309
  %388 = load <4 x float>* %color
  %color311 = fadd <4 x float> %388, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color311, <4 x float>* %color
  %389 = load <4 x float>* %color
  %390 = extractelement <4 x float> %389, i32 0
  %391 = load float addrspace(2)* @d17
  %392 = fcmp olt float %390, %391
  %393 = xor i1 %392, true
  br i1 %393, label %then312, label %ifmerge314

then312:                                          ; preds = %ifmerge310
  br label %loop-merge316

post-loop-break313:                               ; No predecessors!
  br label %ifmerge314

ifmerge314:                                       ; preds = %ifmerge310, %post-loop-break313
  br label %loop-header307

post-loop-continue315:                            ; No predecessors!
  br label %loop-header307

loop-merge316:                                    ; preds = %then312
  br label %loop-header317

loop-header317:                                   ; preds = %post-loop-continue325, %ifmerge324, %loop-merge316
  %394 = load <4 x float>* %color
  %395 = extractelement <4 x float> %394, i32 1
  %396 = load float addrspace(2)* @d16
  %397 = fcmp olt float %395, %396
  %398 = xor i1 %397, true
  br i1 %398, label %then318, label %ifmerge320

then318:                                          ; preds = %loop-header317
  br label %loop-merge326

post-loop-break319:                               ; No predecessors!
  br label %ifmerge320

ifmerge320:                                       ; preds = %loop-header317, %post-loop-break319
  %399 = load <4 x float>* %color
  %400 = extractelement <4 x float> %399, i32 3
  %401 = load float addrspace(2)* @d16
  %402 = fcmp olt float %400, %401
  br i1 %402, label %then321, label %else322

then321:                                          ; preds = %ifmerge320
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge324

else322:                                          ; preds = %ifmerge320
  %403 = load <4 x float>* %color
  %color323 = fadd <4 x float> %403, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color323, <4 x float>* %color
  br label %ifmerge324

ifmerge324:                                       ; preds = %else322, %post-discard
  br label %loop-header317

post-loop-continue325:                            ; No predecessors!
  br label %loop-header317

loop-merge326:                                    ; preds = %then318
  %404 = load <4 x float>* %color
  %color327 = fadd <4 x float> %404, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color327, <4 x float>* %color
  %gl_FragColor328 = load <4 x float>* %color
  store <4 x float> %gl_FragColor328, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge326, %then308, %then302, %then283
  %405 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %405)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then321
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %0 = extractelement <4 x float> %BaseColor, i32 0
  %1 = fcmp olt float %0, 0x3FD51EB860000000
  %2 = fcmp olt float %0, 0x3FE51EB860000000
  %select337.v = select i1 %2, <4 x float> <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  %select343.v = select i1 %1, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>, <4 x float> %select337.v
  %select343 = fadd <4 x float> %BaseColor, %select343.v
  %.pre = load float addrspace(2)* @d, align 4
  %3 = load <4 x float> addrspace(2)* @bigColor, align 16
  br label %loop-header11

loop-header11:                                    ; preds = %ifmerge14, %entry
  %color.1 = phi <4 x float> [ %select343, %entry ], [ %color15, %ifmerge14 ]
  %4 = extractelement <4 x float> %color.1, i32 0
  %5 = fcmp uge float %4, %.pre
  br i1 %5, label %then12, label %ifmerge14

then12:                                           ; preds = %loop-header11
  %6 = load <4 x float> addrspace(2)* @bigColor1_1, align 16
  br label %loop-header18

ifmerge14:                                        ; preds = %loop-header11
  %color15 = fadd <4 x float> %color.1, %3
  br label %loop-header11

loop-header18:                                    ; preds = %ifmerge21, %then12
  %color.2 = phi <4 x float> [ %color.1, %then12 ], [ %select334, %ifmerge21 ]
  %7 = extractelement <4 x float> %color.2, i32 2
  %8 = fcmp uge float %7, %.pre
  br i1 %8, label %then19, label %ifmerge21

then19:                                           ; preds = %loop-header18
  br label %loop-header29

ifmerge21:                                        ; preds = %loop-header18
  %color22 = fadd <4 x float> %color.2, %6
  %9 = extractelement <4 x float> %color22, i32 3
  %10 = fcmp olt float %9, %.pre
  %color26 = fadd <4 x float> %color22, %6
  %select334 = select i1 %10, <4 x float> %color22, <4 x float> %color26
  br label %loop-header18

loop-header29:                                    ; preds = %ifmerge32, %then19
  %color.3 = phi <4 x float> [ %color.2, %then19 ], [ %color33, %ifmerge32 ]
  %11 = extractelement <4 x float> %color.3, i32 0
  %12 = fcmp uge float %11, 4.200000e+01
  br i1 %12, label %then30, label %ifmerge32

then30:                                           ; preds = %loop-header29
  %.pre344 = load float addrspace(2)* @d2, align 4
  %.pre345 = load float addrspace(2)* @d3, align 4
  %13 = load <4 x float> addrspace(2)* @bigColor1_2, align 16
  br label %loop-header36

ifmerge32:                                        ; preds = %loop-header29
  %color33 = fadd <4 x float> %color.3, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header29

loop-header36:                                    ; preds = %ifmerge39, %then30
  %color.4 = phi <4 x float> [ %color.3, %then30 ], [ %color40, %ifmerge39 ]
  %14 = extractelement <4 x float> %color.4, i32 3
  %15 = extractelement <4 x float> %color.4, i32 1
  %notlhs = fcmp uge float %14, %.pre344
  %notrhs = fcmp uge float %15, %.pre345
  %16 = or i1 %notrhs, %notlhs
  br i1 %16, label %then37, label %ifmerge39

then37:                                           ; preds = %loop-header36
  %17 = load <4 x float> addrspace(2)* @bigColor1_3, align 16
  %18 = load float addrspace(2)* @d4, align 4
  br label %loop-header43

ifmerge39:                                        ; preds = %loop-header36
  %color40 = fadd <4 x float> %color.4, %13
  br label %loop-header36

loop-header43:                                    ; preds = %ifmerge50, %then37
  %color.5 = phi <4 x float> [ %color.4, %then37 ], [ %color51, %ifmerge50 ]
  %19 = extractelement <4 x float> %color.5, i32 2
  %20 = fcmp uge float %19, %.pre345
  br i1 %20, label %then44, label %ifmerge46

then44:                                           ; preds = %loop-header43
  br label %loop-merge53

ifmerge46:                                        ; preds = %loop-header43
  %color47 = fadd <4 x float> %color.5, %17
  %21 = extractelement <4 x float> %color47, i32 1
  %22 = fcmp olt float %21, %18
  br i1 %22, label %then48, label %ifmerge50

then48:                                           ; preds = %ifmerge46
  br label %loop-merge53

ifmerge50:                                        ; preds = %ifmerge46
  %color51 = fadd <4 x float> %color47, %17
  br label %loop-header43

loop-merge53:                                     ; preds = %then48, %then44
  %color.6 = phi <4 x float> [ %color.5, %then44 ], [ %color47, %then48 ]
  %.pre346 = load i32 addrspace(2)* @Count, align 4
  %23 = load <4 x float> addrspace(2)* @bigColor2, align 16
  %24 = icmp sgt i32 %.pre346, 0
  br i1 %24, label %ifmerge57.lr.ph, label %then55

ifmerge57.lr.ph:                                  ; preds = %loop-merge53
  br label %ifmerge57

loop-header54.then55_crit_edge:                   ; preds = %ifmerge57
  br label %then55

then55:                                           ; preds = %loop-header54.then55_crit_edge, %loop-merge53
  %color.7.lcssa = phi <4 x float> [ %color58, %loop-header54.then55_crit_edge ], [ %color.6, %loop-merge53 ]
  %.pre347 = load <4 x float> addrspace(2)* @bigColor3, align 16
  br label %loop-header62

ifmerge57:                                        ; preds = %ifmerge57, %ifmerge57.lr.ph
  %indvar415 = phi i32 [ %indvar.next416, %ifmerge57 ], [ 0, %ifmerge57.lr.ph ]
  %color.7385 = phi <4 x float> [ %color.6, %ifmerge57.lr.ph ], [ %color58, %ifmerge57 ]
  %color58 = fadd <4 x float> %color.7385, %23
  %indvar.next416 = add i32 %indvar415, 1
  %exitcond417 = icmp eq i32 %indvar.next416, %.pre346
  br i1 %exitcond417, label %loop-header54.then55_crit_edge, label %ifmerge57

loop-header62:                                    ; preds = %ifmerge66, %then55
  %color.8 = phi <4 x float> [ %color.7.lcssa, %then55 ], [ %color63, %ifmerge66 ]
  %color63 = fadd <4 x float> %color.8, %.pre347
  %25 = extractelement <4 x float> %color63, i32 0
  %26 = fcmp uge float %25, %.pre344
  br i1 %26, label %then64, label %ifmerge66

then64:                                           ; preds = %loop-header62
  %27 = extractelement <4 x float> %color63, i32 2
  %28 = fadd float %27, %.pre345
  %29 = fadd float %28, %.pre345
  %30 = fadd float %29, %.pre345
  %31 = fadd float %30, %.pre345
  %32 = fadd float %31, %.pre345
  %33 = fadd float %32, %.pre345
  %34 = fadd float %33, %.pre345
  %35 = fadd float %34, %.pre345
  %36 = fadd float %35, %.pre345
  %37 = fadd float %36, %.pre345
  %38 = fadd float %37, %.pre345
  %39 = fadd float %38, %.pre345
  %40 = fadd float %39, %.pre345
  %41 = fadd float %40, %.pre345
  %42 = fadd float %41, %.pre345
  %43 = fadd float %42, %.pre345
  %44 = fadd float %43, %.pre345
  %45 = fadd float %44, %.pre345
  %46 = fadd float %45, %.pre345
  %47 = fadd float %46, %.pre345
  %48 = fadd float %47, %.pre345
  %49 = fadd float %48, %.pre345
  %50 = fadd float %49, %.pre345
  %51 = fadd float %50, %.pre345
  %52 = fadd float %51, %.pre345
  %53 = fadd float %52, %.pre345
  %54 = fadd float %53, %.pre345
  %55 = fadd float %54, %.pre345
  %56 = fadd float %55, %.pre345
  %57 = fadd float %56, %.pre345
  %58 = fadd float %57, %.pre345
  %59 = fadd float %58, %.pre345
  %60 = fadd float %59, %.pre345
  %61 = fadd float %60, %.pre345
  %62 = fadd float %61, %.pre345
  %63 = fadd float %62, %.pre345
  %64 = fadd float %63, %.pre345
  %65 = fadd float %64, %.pre345
  %66 = fadd float %65, %.pre345
  %67 = fadd float %66, %.pre345
  %68 = fadd float %67, %.pre345
  %69 = fadd float %68, %.pre345
  %70 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color63, i32 4, float undef, i32 undef, float undef, i32 undef, float %69, i32 0, float undef, i32 undef)
  br label %loop-header79

ifmerge66:                                        ; preds = %loop-header62
  br label %loop-header62

loop-header79:                                    ; preds = %ifmerge82, %then64
  %indvar412 = phi i32 [ %indvar.next413, %ifmerge82 ], [ 0, %then64 ]
  %color.10 = phi <4 x float> [ %select, %ifmerge82 ], [ %70, %then64 ]
  %exitcond414 = icmp eq i32 %indvar412, 100
  br i1 %exitcond414, label %then80, label %ifmerge82

then80:                                           ; preds = %loop-header79
  br label %loop-header95

ifmerge82:                                        ; preds = %loop-header79
  %71 = extractelement <4 x float> %color.10, i32 2
  %72 = fcmp olt float %71, 2.000000e+01
  %73 = extractelement <4 x float> %color.10, i32 0
  %74 = fadd float %73, 1.000000e+00
  %75 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 1, float %74, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %76 = extractelement <4 x float> %color.10, i32 1
  %77 = fadd float %76, 1.000000e+00
  %78 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 2, float undef, i32 undef, float %77, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select = select i1 %72, <4 x float> %75, <4 x float> %78
  %indvar.next413 = add i32 %indvar412, 1
  br label %loop-header79

loop-header95:                                    ; preds = %ifmerge98, %then80
  %indvar = phi i32 [ %indvar.next, %ifmerge98 ], [ 0, %then80 ]
  %color.12 = phi <4 x float> [ %select339, %ifmerge98 ], [ %color.10, %then80 ]
  %exitcond = icmp eq i32 %indvar, 120
  br i1 %exitcond, label %then96, label %ifmerge98

then96:                                           ; preds = %loop-header95
  br label %loop-header108

ifmerge98:                                        ; preds = %loop-header95
  %79 = extractelement <4 x float> %color.12, i32 2
  %80 = fcmp olt float %79, 2.000000e+01
  %81 = extractelement <4 x float> %color.12, i32 0
  %82 = fadd float %81, 1.000000e+00
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 1, float %82, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %84 = extractelement <4 x float> %color.12, i32 1
  %85 = fadd float %84, 1.000000e+00
  %86 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 2, float undef, i32 undef, float %85, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select339 = select i1 %80, <4 x float> %83, <4 x float> %86
  %indvar.next = add i32 %indvar, 1
  br label %loop-header95

loop-header108:                                   ; preds = %ifmerge111, %then96
  %color.14 = phi <4 x float> [ %color.12, %then96 ], [ %select332, %ifmerge111 ]
  %i107.0 = phi i32 [ 0, %then96 ], [ %select333, %ifmerge111 ]
  %87 = icmp sgt i32 %i107.0, 41
  br i1 %87, label %then109, label %ifmerge111

then109:                                          ; preds = %loop-header108
  br label %loop-header121

ifmerge111:                                       ; preds = %loop-header108
  %88 = extractelement <4 x float> %color.14, i32 2
  %89 = fadd float %88, %.pre345
  %90 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 4, float undef, i32 undef, float undef, i32 undef, float %89, i32 0, float undef, i32 undef)
  %91 = extractelement <4 x float> %color.14, i32 0
  %92 = fcmp olt float %91, %18
  %93 = extractelement <4 x float> %color.14, i32 3
  %94 = fadd float %93, 1.000000e+00
  %95 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 12, float undef, i32 undef, float undef, i32 undef, float %89, i32 0, float %94, i32 0)
  %select332 = select i1 %92, <4 x float> %90, <4 x float> %95
  %96 = zext i1 %92 to i32
  %i107117 = xor i32 %96, 1
  %select333 = add i32 %i107.0, %i107117
  br label %loop-header108

loop-header121:                                   ; preds = %ifmerge128, %then109
  %97 = phi i32 [ %phitmp397, %ifmerge128 ], [ 0, %then109 ]
  %color.15 = phi <4 x float> [ %106, %ifmerge128 ], [ %color.14, %then109 ]
  %98 = icmp sgt i32 %97, 41
  br i1 %98, label %then122, label %ifmerge124

then122:                                          ; preds = %loop-header121
  br label %loop-merge132

ifmerge124:                                       ; preds = %loop-header121
  %99 = extractelement <4 x float> %color.15, i32 2
  %100 = fadd float %99, %.pre345
  %101 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.15, i32 4, float undef, i32 undef, float undef, i32 undef, float %100, i32 0, float undef, i32 undef)
  %102 = extractelement <4 x float> %color.15, i32 0
  %103 = fcmp olt float %102, %18
  br i1 %103, label %then126, label %ifmerge128

then126:                                          ; preds = %ifmerge124
  br label %loop-merge132

ifmerge128:                                       ; preds = %ifmerge124
  %104 = extractelement <4 x float> %color.15, i32 3
  %105 = fadd float %104, 1.000000e+00
  %106 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %101, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %105, i32 0)
  %phitmp397 = add i32 %97, 1
  br label %loop-header121

loop-merge132:                                    ; preds = %then126, %then122
  %color.16 = phi <4 x float> [ %color.15, %then122 ], [ %101, %then126 ]
  %.pre348 = load <4 x float> addrspace(2)* @bigColor4, align 16
  br label %loop-header133

loop-header133:                                   ; preds = %loop-header133.backedge, %loop-merge132
  %color.17 = phi <4 x float> [ %color.16, %loop-merge132 ], [ %color.17.be, %loop-header133.backedge ]
  %color134 = fadd <4 x float> %color.17, %.pre348
  %107 = extractelement <4 x float> %color134, i32 0
  %108 = fcmp olt float %107, %18
  br i1 %108, label %then135, label %ifmerge137

then135:                                          ; preds = %loop-header133
  br label %loop-header133.backedge

loop-header133.backedge:                          ; preds = %then135, %ifmerge145
  %color.17.be = phi <4 x float> [ %color134, %then135 ], [ %select336, %ifmerge145 ]
  br label %loop-header133

ifmerge137:                                       ; preds = %loop-header133
  %109 = extractelement <4 x float> %color134, i32 1
  %110 = fcmp olt float %109, %18
  %111 = fadd float %109, %18
  %112 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color134, i32 2, float undef, i32 undef, float %111, i32 0, float undef, i32 undef, float undef, i32 undef)
  %113 = fadd float %107, %18
  %114 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color134, i32 1, float %113, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select336 = select i1 %110, <4 x float> %112, <4 x float> %114
  %115 = extractelement <4 x float> %select336, i32 2
  %116 = fcmp uge float %115, %18
  br i1 %116, label %then143, label %ifmerge145

then143:                                          ; preds = %ifmerge137
  %.pre350 = load <4 x float> addrspace(2)* @bigColor5, align 16
  %.pre351 = load float addrspace(2)* @d5, align 4
  br label %loop-header148

ifmerge145:                                       ; preds = %ifmerge137
  br label %loop-header133.backedge

loop-header148:                                   ; preds = %ifmerge155, %then143
  %color.19 = phi <4 x float> [ %select336, %then143 ], [ %select341, %ifmerge155 ]
  %color149 = fadd <4 x float> %color.19, %.pre350
  %117 = extractelement <4 x float> %color149, i32 1
  %118 = fcmp olt float %117, %.pre351
  %119 = fadd float %117, %.pre351
  %120 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color149, i32 2, float undef, i32 undef, float %119, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select341 = select i1 %118, <4 x float> %120, <4 x float> %color149
  %121 = extractelement <4 x float> %select341, i32 0
  %122 = fcmp uge float %121, %.pre351
  br i1 %122, label %then153, label %ifmerge155

then153:                                          ; preds = %loop-header148
  %123 = load float addrspace(2)* @d6, align 4
  %124 = fcmp olt float %121, %123
  br i1 %124, label %then158, label %else166

ifmerge155:                                       ; preds = %loop-header148
  br label %loop-header148

then158:                                          ; preds = %then153
  %125 = load <4 x float> addrspace(2)* @bigColor6, align 16
  br label %loop-header159

loop-header159:                                   ; preds = %ifmerge162, %then158
  %color.21 = phi <4 x float> [ %select341, %then158 ], [ %color163, %ifmerge162 ]
  %126 = extractelement <4 x float> %color.21, i32 1
  %127 = fcmp uge float %126, %123
  br i1 %127, label %then160, label %ifmerge162

then160:                                          ; preds = %loop-header159
  br label %ifmerge174

ifmerge162:                                       ; preds = %loop-header159
  %color163 = fadd <4 x float> %color.21, %125
  br label %loop-header159

else166:                                          ; preds = %then153
  %128 = load <4 x float> addrspace(2)* @bigColor6, align 16
  %129 = extractelement <4 x float> %128, i32 2
  br label %loop-header167

loop-header167:                                   ; preds = %ifmerge170, %else166
  %color.22 = phi <4 x float> [ %select341, %else166 ], [ %133, %ifmerge170 ]
  %130 = extractelement <4 x float> %color.22, i32 2
  %131 = fcmp uge float %130, %123
  br i1 %131, label %then168, label %ifmerge170

then168:                                          ; preds = %loop-header167
  br label %ifmerge174

ifmerge170:                                       ; preds = %loop-header167
  %132 = fadd float %130, %129
  %133 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.22, i32 4, float undef, i32 undef, float undef, i32 undef, float %132, i32 0, float undef, i32 undef)
  br label %loop-header167

ifmerge174:                                       ; preds = %then168, %then160
  %134 = phi <4 x float> [ %125, %then160 ], [ %128, %then168 ]
  %color.23 = phi <4 x float> [ %color.21, %then160 ], [ %color.22, %then168 ]
  %135 = extractelement <4 x float> %color.23, i32 0
  %136 = fcmp olt float %135, %123
  br i1 %136, label %then175, label %else186

then175:                                          ; preds = %ifmerge174
  %137 = load float addrspace(2)* @d7, align 4
  %138 = fcmp olt float %137, 1.000000e+00
  br label %loop-header176

loop-header176:                                   ; preds = %ifmerge183, %then175
  %color.24 = phi <4 x float> [ %color.23, %then175 ], [ %color180, %ifmerge183 ]
  %139 = extractelement <4 x float> %color.24, i32 1
  %140 = fcmp uge float %139, %123
  br i1 %140, label %then177, label %ifmerge179

then177:                                          ; preds = %loop-header176
  br label %loop-merge185

ifmerge179:                                       ; preds = %loop-header176
  %color180 = fadd <4 x float> %color.24, %134
  br i1 %138, label %then181, label %ifmerge183

then181:                                          ; preds = %ifmerge179
  br label %loop-merge185

ifmerge183:                                       ; preds = %ifmerge179
  br label %loop-header176

loop-merge185:                                    ; preds = %then181, %then177
  %color.25 = phi <4 x float> [ %color.24, %then177 ], [ %color180, %then181 ]
  br label %ifmerge194

else186:                                          ; preds = %ifmerge174
  %141 = extractelement <4 x float> %134, i32 2
  br label %loop-header187

loop-header187:                                   ; preds = %ifmerge190, %else186
  %color.26 = phi <4 x float> [ %color.23, %else186 ], [ %145, %ifmerge190 ]
  %142 = extractelement <4 x float> %color.26, i32 2
  %143 = fcmp uge float %142, %123
  br i1 %143, label %then188, label %ifmerge190

then188:                                          ; preds = %loop-header187
  br label %ifmerge194

ifmerge190:                                       ; preds = %loop-header187
  %144 = fadd float %142, %141
  %145 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.26, i32 4, float undef, i32 undef, float undef, i32 undef, float %144, i32 0, float undef, i32 undef)
  br label %loop-header187

ifmerge194:                                       ; preds = %then188, %loop-merge185
  %color.27 = phi <4 x float> [ %color.25, %loop-merge185 ], [ %color.26, %then188 ]
  %.pre352 = load float addrspace(2)* @d7, align 4
  %.pre360 = fcmp olt float %.pre352, 0.000000e+00
  %146 = load <4 x float> addrspace(2)* @bigColor7, align 16
  %147 = fcmp olt float %.pre352, 1.000000e+00
  br label %loop-header195

loop-header195:                                   ; preds = %ifmerge203, %ifmerge194
  %.pre-phi = phi i1 [ false, %ifmerge203 ], [ %.pre360, %ifmerge194 ]
  %color.28 = phi <4 x float> [ %color205, %ifmerge203 ], [ %color.27, %ifmerge194 ]
  br i1 %.pre-phi, label %then196, label %ifmerge198

then196:                                          ; preds = %loop-header195
  br label %loop-merge210

ifmerge198:                                       ; preds = %loop-header195
  %color199 = fadd <4 x float> %color.28, %146
  br i1 %147, label %then200, label %ifmerge203

then200:                                          ; preds = %ifmerge198
  %148 = extractelement <4 x float> %color199, i32 2
  %149 = fadd float %148, 1.000000e+00
  %150 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color199, i32 4, float undef, i32 undef, float undef, i32 undef, float %149, i32 0, float undef, i32 undef)
  br label %loop-merge210

ifmerge203:                                       ; preds = %ifmerge198
  %color205 = fadd <4 x float> %color199, %BaseColor
  br label %loop-header195

loop-merge210:                                    ; preds = %then200, %then196
  %color.29 = phi <4 x float> [ %color.28, %then196 ], [ %150, %then200 ]
  %.pre353 = load float addrspace(2)* @d8, align 4
  %.pre361 = fcmp olt float %.pre353, 0.000000e+00
  %151 = fcmp olt float %.pre353, 1.000000e+00
  br label %loop-header211

loop-header211:                                   ; preds = %ifmerge229, %loop-merge210
  %.pre-phi362 = phi i1 [ false, %ifmerge229 ], [ %.pre361, %loop-merge210 ]
  %color.30 = phi <4 x float> [ %color226, %ifmerge229 ], [ %color.29, %loop-merge210 ]
  br i1 %.pre-phi362, label %then212, label %ifmerge214

then212:                                          ; preds = %loop-header211
  br label %loop-merge231

ifmerge214:                                       ; preds = %loop-header211
  %color215 = fadd <4 x float> %color.30, %146
  br i1 %151, label %then216, label %ifmerge224

then216:                                          ; preds = %ifmerge214
  %152 = extractelement <4 x float> %color215, i32 2
  %153 = fadd float %152, 1.000000e+00
  %154 = fcmp olt float %.pre353, 2.000000e+00
  %155 = extractelement <4 x float> %color215, i32 1
  %156 = fadd float %155, 1.000000e+00
  %157 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color215, i32 6, float undef, i32 undef, float %156, i32 0, float %153, i32 0, float undef, i32 undef)
  %158 = extractelement <4 x float> %color215, i32 0
  %159 = fadd float %158, 1.000000e+00
  %160 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color215, i32 5, float %159, i32 0, float undef, i32 undef, float %153, i32 0, float undef, i32 undef)
  %select342 = select i1 %154, <4 x float> %157, <4 x float> %160
  br label %loop-merge231

ifmerge224:                                       ; preds = %ifmerge214
  %color226 = fadd <4 x float> %color215, %BaseColor
  %161 = extractelement <4 x float> %color226, i32 2
  %162 = fcmp uge float %161, %.pre353
  br i1 %162, label %then227, label %ifmerge229

then227:                                          ; preds = %ifmerge224
  br label %loop-merge231

ifmerge229:                                       ; preds = %ifmerge224
  br label %loop-header211

loop-merge231:                                    ; preds = %then227, %then216, %then212
  %color.32 = phi <4 x float> [ %color.30, %then212 ], [ %select342, %then216 ], [ %color226, %then227 ]
  %.pre354 = load float addrspace(2)* @d9, align 4
  %163 = fcmp ogt float %.pre354, %.pre353
  br label %loop-header232

loop-header232:                                   ; preds = %ifmerge244, %loop-merge231
  %color.33 = phi <4 x float> [ %color.32, %loop-merge231 ], [ %color.35, %ifmerge244 ]
  %164 = extractelement <4 x float> %color.33, i32 3
  %165 = fcmp uge float %164, %.pre354
  br i1 %165, label %then233, label %ifmerge235

then233:                                          ; preds = %loop-header232
  br label %loop-merge246

ifmerge235:                                       ; preds = %loop-header232
  br i1 %163, label %then236, label %ifmerge244

then236:                                          ; preds = %ifmerge235
  %166 = extractelement <4 x float> %color.33, i32 0
  %167 = fcmp ugt float %166, %.pre352
  br i1 %167, label %ifmerge243, label %then237

then237:                                          ; preds = %then236
  %168 = extractelement <4 x float> %color.33, i32 2
  %169 = fcmp oeq float %168, 5.000000e+00
  br i1 %169, label %then238, label %else240

then238:                                          ; preds = %then237
  %170 = fadd float %164, 1.000000e+00
  %171 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.33, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %170, i32 0)
  br label %ifmerge243

else240:                                          ; preds = %then237
  br label %loop-merge246

ifmerge243:                                       ; preds = %then236, %then238
  %color.34 = phi <4 x float> [ %171, %then238 ], [ %color.33, %then236 ]
  br label %ifmerge244

ifmerge244:                                       ; preds = %ifmerge235, %ifmerge243
  %color.35 = phi <4 x float> [ %color.34, %ifmerge243 ], [ %color.33, %ifmerge235 ]
  br label %loop-header232

loop-merge246:                                    ; preds = %else240, %then233
  %.pre355 = load float addrspace(2)* @d10, align 4
  %172 = load float addrspace(2)* @d11, align 4
  %173 = load float addrspace(2)* @d12, align 4
  br label %loop-header247

loop-header247:                                   ; preds = %then252, %loop-merge246
  %color.36 = phi <4 x float> [ %color.33, %loop-merge246 ], [ %select335, %then252 ]
  %174 = extractelement <4 x float> %color.36, i32 2
  %175 = fcmp uge float %174, %.pre355
  br i1 %175, label %then248, label %ifmerge250

then248:                                          ; preds = %loop-header247
  br label %loop-merge264

ifmerge250:                                       ; preds = %loop-header247
  %176 = extractelement <4 x float> %color.36, i32 1
  %177 = fadd float %176, 1.000000e+00
  %178 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.36, i32 2, float undef, i32 undef, float %177, i32 0, float undef, i32 undef, float undef, i32 undef)
  %179 = fcmp olt float %177, %172
  br i1 %179, label %then252, label %ifmerge260

then252:                                          ; preds = %ifmerge250
  %180 = fadd float %174, 1.000000e+00
  %181 = extractelement <4 x float> %color.36, i32 3
  %182 = fcmp olt float %181, %173
  %183 = fadd float %181, 1.000000e+00
  %184 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %178, i32 12, float undef, i32 undef, float undef, i32 undef, float %180, i32 0, float %183, i32 0)
  %185 = extractelement <4 x float> %color.36, i32 0
  %186 = fadd float %185, 1.000000e+00
  %187 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %178, i32 5, float %186, i32 0, float undef, i32 undef, float %180, i32 0, float undef, i32 undef)
  %select335 = select i1 %182, <4 x float> %184, <4 x float> %187
  br label %loop-header247

ifmerge260:                                       ; preds = %ifmerge250
  %color261 = fadd <4 x float> %178, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-merge264

loop-merge264:                                    ; preds = %ifmerge260, %then248
  %color.38 = phi <4 x float> [ %color.36, %then248 ], [ %color261, %ifmerge260 ]
  %188 = load <4 x float> addrspace(2)* @bigColor8, align 16
  %189 = extractelement <4 x float> %188, i32 0
  br label %loop-header265

loop-header265:                                   ; preds = %ifmerge268, %loop-merge264
  %color.39 = phi <4 x float> [ %color.38, %loop-merge264 ], [ %select340, %ifmerge268 ]
  %190 = extractelement <4 x float> %color.39, i32 0
  %191 = fcmp uge float %190, 1.000000e+01
  br i1 %191, label %then266, label %ifmerge268

then266:                                          ; preds = %loop-header265
  %color278 = fadd <4 x float> %color.39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre356 = load float addrspace(2)* @d14, align 4
  %192 = load float addrspace(2)* @d15, align 4
  br label %loop-header279

ifmerge268:                                       ; preds = %loop-header265
  %color269 = fadd <4 x float> %color.39, %188
  %193 = extractelement <4 x float> %color269, i32 2
  %194 = fcmp olt float %193, %.pre353
  %195 = extractelement <4 x float> %color269, i32 3
  %196 = fcmp olt float %195, %123
  %197 = extractelement <4 x float> %color269, i32 1
  %198 = fadd float %197, %189
  %199 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color269, i32 2, float undef, i32 undef, float %198, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select338 = select i1 %196, <4 x float> %color269, <4 x float> %199
  %select340 = select i1 %194, <4 x float> %select338, <4 x float> %199
  br label %loop-header265

loop-header279:                                   ; preds = %else284, %then266
  %color.40 = phi <4 x float> [ %color278, %then266 ], [ %color285, %else284 ]
  %200 = extractelement <4 x float> %color.40, i32 0
  %201 = fcmp uge float %200, %.pre356
  br i1 %201, label %then280, label %ifmerge282

then280:                                          ; preds = %loop-header279
  %color289 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre357 = load float addrspace(2)* @d16, align 4
  br label %loop-header290

ifmerge282:                                       ; preds = %loop-header279
  %202 = extractelement <4 x float> %color.40, i32 1
  %203 = fcmp olt float %202, %192
  br i1 %203, label %then283, label %else284

then283:                                          ; preds = %ifmerge282
  br label %stage-epilogue

else284:                                          ; preds = %ifmerge282
  %color285 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header279

loop-header290:                                   ; preds = %ifmerge293, %then280
  %color.41 = phi <4 x float> [ %color289, %then280 ], [ %207, %ifmerge293 ]
  %204 = extractelement <4 x float> %color.41, i32 3
  %205 = fcmp uge float %204, %.pre357
  br i1 %205, label %then291, label %ifmerge293

then291:                                          ; preds = %loop-header290
  br label %loop-header297

ifmerge293:                                       ; preds = %loop-header290
  %206 = fadd float %204, 1.000000e+00
  %207 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.41, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %206, i32 0)
  br label %loop-header290

loop-header297:                                   ; preds = %ifmerge304, %then291
  %color.42 = phi <4 x float> [ %color.41, %then291 ], [ %color301, %ifmerge304 ]
  %208 = extractelement <4 x float> %color.42, i32 3
  %209 = extractelement <4 x float> %color.42, i32 1
  %notlhs330 = fcmp uge float %208, %.pre344
  %notrhs331 = fcmp uge float %209, %.pre345
  %210 = or i1 %notrhs331, %notlhs330
  br i1 %210, label %then298, label %ifmerge300

then298:                                          ; preds = %loop-header297
  %.pre358 = load float addrspace(2)* @d18, align 4
  %211 = load float addrspace(2)* @d17, align 4
  br label %loop-header307

ifmerge300:                                       ; preds = %loop-header297
  %color301 = fadd <4 x float> %color.42, %13
  %212 = extractelement <4 x float> %color301, i32 2
  %213 = fcmp olt float %212, %.pre345
  br i1 %213, label %then302, label %ifmerge304

then302:                                          ; preds = %ifmerge300
  br label %stage-epilogue

ifmerge304:                                       ; preds = %ifmerge300
  br label %loop-header297

loop-header307:                                   ; preds = %ifmerge314, %then298
  %color.43 = phi <4 x float> [ %color.42, %then298 ], [ %color311, %ifmerge314 ]
  %214 = extractelement <4 x float> %color.43, i32 1
  %215 = fcmp olt float %214, %.pre358
  br i1 %215, label %then308, label %ifmerge310

then308:                                          ; preds = %loop-header307
  br label %stage-epilogue

ifmerge310:                                       ; preds = %loop-header307
  %color311 = fadd <4 x float> %color.43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %216 = extractelement <4 x float> %color311, i32 0
  %217 = fcmp uge float %216, %211
  br i1 %217, label %then312, label %ifmerge314

then312:                                          ; preds = %ifmerge310
  br label %loop-header317

ifmerge314:                                       ; preds = %ifmerge310
  br label %loop-header307

loop-header317:                                   ; preds = %else322, %then312
  %color.44 = phi <4 x float> [ %color311, %then312 ], [ %color323, %else322 ]
  %218 = extractelement <4 x float> %color.44, i32 1
  %219 = fcmp uge float %218, %.pre357
  br i1 %219, label %then318, label %ifmerge320

then318:                                          ; preds = %loop-header317
  %color327 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %stage-epilogue

ifmerge320:                                       ; preds = %loop-header317
  %220 = extractelement <4 x float> %color.44, i32 3
  %221 = fcmp olt float %220, %.pre357
  br i1 %221, label %then321, label %else322

then321:                                          ; preds = %ifmerge320
  call void @llvm.gla.discard()
  br label %stage-exit

else322:                                          ; preds = %ifmerge320
  %color323 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header317

stage-epilogue:                                   ; preds = %then318, %then308, %then302, %then283
  %gl_FragColor329.0 = phi <4 x float> [ %color278, %then308 ], [ %color327, %then318 ], [ %color278, %then302 ], [ %color278, %then283 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor329.0)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then321
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

inductive variable:  %indvar415 = phi i32 [ %indvar.next416, %ifmerge57 ], [ 0, %ifmerge57.lr.ph ]
  trip count:        %.pre346 = load i32 addrspace(2)* @Count, align 4
  increment:         %indvar.next416 = add i32 %indvar415, 1
  exit condition:    %exitcond417 = icmp eq i32 %indvar.next416, %.pre346

inductive variable:  %indvar412 = phi i32 [ %indvar.next413, %ifmerge82 ], [ 0, %then64 ]
  trip count:      i32 100
  increment:         %indvar.next413 = add i32 %indvar412, 1
  exit condition:    %exitcond414 = icmp eq i32 %indvar412, 100

inductive variable:  %indvar = phi i32 [ %indvar.next, %ifmerge98 ], [ 0, %then80 ]
  trip count:      i32 120
  increment:         %indvar.next = add i32 %indvar, 1
  exit condition:    %exitcond = icmp eq i32 %indvar, 120

***Unsupported functionality: Opcode in Bottom IR: 31

***Unsupported functionality: Opcode in Bottom IR: 31

// LunarGOO(r471) output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
in vec4 BaseColor;
const float const70_0f = 0.33;
const float const72_1f = 0.66;
const vec4 const74 = vec4(0.66);
const vec4 const75 = vec4(0.33);
const float const83_42f = 42.0;
const vec4 const85 = vec4(1.0);
vec4 color47;
const int const94_0 = 0;
vec4 color58;
vec4 color63;
const float const142_20f = 20.0;
const float const144_1f = 1.0;
const int const156_41 = 41;
vec4 temp168;
const int const173_1 = 1;
vec4 select336;
vec4 select341;
float temp188;
vec4 color180;
const float const200_0f = 0.0;
vec4 color199;
const bool const206_false = false;
vec4 color215;
const float const212_2f = 2.0;
vec4 color226;
const float const223_5f = 5.0;
vec4 temp227;
const float const237_10f = 10.0;
vec4 color311;

void main()
{
    vec4 color_1;
    vec4 color_2;
    vec4 color_3;
    vec4 color_4;
    vec4 color_5;
    vec4 color_6;
    vec4 color_7_lcssa;
    int indvar415;
    vec4 color_7385;
    vec4 color_8;
    int indvar412;
    vec4 color_10;
    int indvar;
    vec4 color_12;
    vec4 color_14;
    int temp36;
    int temp37;
    vec4 color_15;
    vec4 color_16;
    vec4 color_17;
    vec4 color_17_be;
    vec4 color_19;
    vec4 color_21;
    vec4 color_22;
    vec4 temp45;
    vec4 color_23;
    vec4 color_24;
    vec4 color_25;
    vec4 color_26;
    vec4 color_27;
    bool _pre_phi;
    vec4 color_28;
    vec4 color_29;
    bool _pre_phi362;
    vec4 color_30;
    vec4 color_32;
    vec4 color_33;
    vec4 color_34;
    vec4 color_35;
    vec4 color_36;
    vec4 color_38;
    vec4 color_39;
    vec4 color_40;
    vec4 color_41;
    vec4 color_42;
    vec4 color_43;
    vec4 color_44;
    vec4 gla_copyout_gl_FragColor329_0;
    bool temp69 = BaseColor.x < const70_0f;
    bool temp71 = BaseColor.x < const72_1f;
    vec4 select337_v = temp71 ? const74 : const75;
    vec4 select343_v = temp69 ? const75 : select337_v;
    vec4 select343 = BaseColor + select343_v;
    color_1 = select343;
    while (! (color_1.x >= d)){
        vec4 color15 = color_1 + bigColor;
        color_1 = color15;
    }
    
    color_2 = color_1;
    while (! (color_2.z >= d)){
        vec4 color22 = color_2 + bigColor1_1;
        bool temp80 = color22.w < d;
        vec4 color26 = color22 + bigColor1_1;
        vec4 select334 = temp80 ? color22 : color26;
        color_2 = select334;
    }
    
    color_3 = color_2;
    while (! (color_3.x >= const83_42f)){
        vec4 color33 = color_3 + const85;
        color_3 = color33;
    }
    
    color_4 = color_3;
    while (true) {
        bool notlhs = color_4.w >= d2;
        bool notrhs = color_4.y >= d3;
        bool temp88 = notrhs || notlhs;
        if (temp88) {
            break;
        }
        
        vec4 color40 = color_4 + bigColor1_2;
        color_4 = color40;
    }
    
    color_5 = color_4;
    while (! (color_5.z >= d3)){
        color47 = color_5 + bigColor1_3;
        bool temp91 = color47.y < d4;
        if (temp91) {
            color_6 = color47;
            break;
        }
        
        vec4 color51 = color47 + bigColor1_3;
        color_5 = color51;
    }
    
    color_6 = color_5;
    bool temp93 = Count > const94_0;
    color_7_lcssa = color_6;
    if (temp93) {
        indvar415 = const94_0;
        color_7385 = color_6;
        for (indvar415 = 0; indvar415 < Count; ++indvar415) {
            color58 = color_7385 + bigColor2;
            color_7385 = color58;
        }
        
        color_7_lcssa = color58;
    }
    
    color_8 = color_7_lcssa;
    while (true) {
        color63 = color_8 + bigColor3;
        bool temp97 = color63.x >= d2;
        if (temp97) {
            break;
        }
        
        color_8 = color63;
    }
    
    float temp98 = color63.z + d3;
    float temp99 = temp98 + d3;
    float temp100 = temp99 + d3;
    float temp101 = temp100 + d3;
    float temp102 = temp101 + d3;
    float temp103 = temp102 + d3;
    float temp104 = temp103 + d3;
    float temp105 = temp104 + d3;
    float temp106 = temp105 + d3;
    float temp107 = temp106 + d3;
    float temp108 = temp107 + d3;
    float temp109 = temp108 + d3;
    float temp110 = temp109 + d3;
    float temp111 = temp110 + d3;
    float temp112 = temp111 + d3;
    float temp113 = temp112 + d3;
    float temp114 = temp113 + d3;
    float temp115 = temp114 + d3;
    float temp116 = temp115 + d3;
    float temp117 = temp116 + d3;
    float temp118 = temp117 + d3;
    float temp119 = temp118 + d3;
    float temp120 = temp119 + d3;
    float temp121 = temp120 + d3;
    float temp122 = temp121 + d3;
    float temp123 = temp122 + d3;
    float temp124 = temp123 + d3;
    float temp125 = temp124 + d3;
    float temp126 = temp125 + d3;
    float temp127 = temp126 + d3;
    float temp128 = temp127 + d3;
    float temp129 = temp128 + d3;
    float temp130 = temp129 + d3;
    float temp131 = temp130 + d3;
    float temp132 = temp131 + d3;
    float temp133 = temp132 + d3;
    float temp134 = temp133 + d3;
    float temp135 = temp134 + d3;
    float temp136 = temp135 + d3;
    float temp137 = temp136 + d3;
    float temp138 = temp137 + d3;
    float temp139 = temp138 + d3;
    vec4 temp140 = color63;
    temp140.z = temp139;
    indvar412 = const94_0;
    color_10 = temp140;
    for (indvar412 = 0; indvar412 < 100; ++indvar412) {
        bool temp141 = color_10.z < const142_20f;
        float temp143 = color_10.x + const144_1f;
        vec4 temp145 = color_10;
        temp145.x = temp143;
        float temp146 = color_10.y + const144_1f;
        vec4 temp147 = color_10;
        temp147.y = temp146;
        vec4 select = temp141 ? temp145 : temp147;
        color_10 = select;
    }
    
    indvar = const94_0;
    color_12 = color_10;
    for (indvar = 0; indvar < 120; ++indvar) {
        bool temp149 = color_12.z < const142_20f;
        float temp150 = color_12.x + const144_1f;
        vec4 temp151 = color_12;
        temp151.x = temp150;
        float temp152 = color_12.y + const144_1f;
        vec4 temp153 = color_12;
        temp153.y = temp152;
        vec4 select339 = temp149 ? temp151 : temp153;
        color_12 = select339;
    }
    
    color_14 = color_12;
    temp36 = const94_0;
    while (true) {
        bool temp155 = temp36 > const156_41;
        if (temp155) {
            break;
        }
        
        float temp157 = color_14.z + d3;
        vec4 temp158 = color_14;
        temp158.z = temp157;
        bool temp159 = color_14.x < d4;
        float temp160 = color_14.w + const144_1f;
        vec4 temp161 = color_14;
        temp161.zw = vec2(temp157, temp160);
        vec4 select332 = temp159 ? temp158 : temp161;
        int temp163 = ~(int temp164);
        int select333 = temp36 + temp163;
        color_14 = select332;
        temp36 = select333;
    }
    
    temp37 = const94_0;
    color_15 = color_14;
    while (true) {
        bool temp166 = temp37 > const156_41;
        if (temp166) {
            color_16 = color_15;
            break;
        }
        
        float temp167 = color_15.z + d3;
        temp168 = color_15;
        temp168.z = temp167;
        bool temp169 = color_15.x < d4;
        if (temp169) {
            color_16 = temp168;
            break;
        }
        
        float temp170 = color_15.w + const144_1f;
        vec4 temp171 = temp168;
        temp171.w = temp170;
        int phitmp397 = temp37 + const173_1;
        temp37 = phitmp397;
        color_15 = temp171;
    }
    
    color_17 = color_16;
    while (true) {
        vec4 color134 = color_17 + bigColor4;
        bool temp175 = color134.x < d4;
        if (temp175) {
            color_17_be = color134;
        }
        else {
            bool temp176 = color134.y < d4;
            float temp177 = color134.y + d4;
            vec4 temp178 = color134;
            temp178.y = temp177;
            float temp179 = color134.x + d4;
            vec4 temp180 = color134;
            temp180.x = temp179;
            select336 = temp176 ? temp178 : temp180;
            bool temp182 = select336.z >= d4;
            if (temp182) {
                break;
            }
            
            color_17_be = select336;
        }
        
        color_17 = color_17_be;
    }
    
    color_19 = select336;
    while (true) {
        vec4 color149 = color_19 + bigColor5;
        bool temp184 = color149.y < d5;
        float temp185 = color149.y + d5;
        vec4 temp186 = color149;
        temp186.y = temp185;
        select341 = temp184 ? temp186 : color149;
        bool temp189 = select341.x >= d5;
        if (temp189) {
            break;
        }
        
        color_19 = select341;
    }
    
    bool temp190 = select341.x < d6;
    if (temp190) {
        color_21 = select341;
        while (! (color_21.y >= d6)){
            vec4 color163 = color_21 + bigColor6;
            color_21 = color163;
        }
        
        temp45 = bigColor6;
        color_23 = color_21;
    }
    else {
        color_22 = select341;
        while (! (color_22.z >= d6)){
            float temp192 = color_22.z + bigColor6.z;
            vec4 temp193 = color_22;
            temp193.z = temp192;
            color_22 = temp193;
        }
        
        temp45 = bigColor6;
        color_23 = color_22;
    }
    
    bool temp194 = color_23.x < d6;
    if (temp194) {
        bool temp195 = d7 < const144_1f;
        color_24 = color_23;
        while (! (color_24.y >= d6)){
            color180 = color_24 + temp45;
            if (temp195) {
                color_25 = color180;
                break;
            }
            
            color_24 = color180;
        }
        
        color_25 = color_24;
        color_27 = color_25;
    }
    else {
        color_26 = color_23;
        while (! (color_26.z >= d6)){
            float temp197 = color_26.z + temp45.z;
            vec4 temp198 = color_26;
            temp198.z = temp197;
            color_26 = temp198;
        }
        
        color_27 = color_26;
    }
    
    bool _pre360 = d7 < const200_0f;
    bool temp201 = d7 < const144_1f;
    _pre_phi = _pre360;
    color_28 = color_27;
    while (true) {
        if (_pre_phi) {
            color_29 = color_28;
            break;
        }
        
        color199 = color_28 + bigColor7;
        if (temp201) {
            float temp203 = color199.z + const144_1f;
            vec4 temp204 = color199;
            temp204.z = temp203;
            color_29 = temp204;
            break;
        }
        
        vec4 color205 = color199 + BaseColor;
        _pre_phi = const206_false;
        color_28 = color205;
    }
    
    bool _pre361 = d8 < const200_0f;
    bool temp208 = d8 < const144_1f;
    _pre_phi362 = _pre361;
    color_30 = color_29;
    while (true) {
        if (_pre_phi362) {
            color_32 = color_30;
            break;
        }
        
        color215 = color_30 + bigColor7;
        if (temp208) {
            float temp210 = color215.z + const144_1f;
            bool temp211 = d8 < const212_2f;
            float temp213 = color215.y + const144_1f;
            vec4 temp214 = color215;
            temp214.yz = vec2(temp213, temp210);
            float temp215 = color215.x + const144_1f;
            vec4 temp216 = color215;
            temp216.xz = vec2(temp215, temp210);
            vec4 select342 = temp211 ? temp214 : temp216;
            color_32 = select342;
            break;
        }
        
        color226 = color215 + BaseColor;
        bool temp219 = color226.z >= d8;
        if (temp219) {
            color_32 = color226;
            break;
        }
        
        _pre_phi362 = const206_false;
        color_30 = color226;
    }
    
    bool temp220 = d9 > d8;
    color_33 = color_32;
    while (! (color_33.w >= d9)){
        color_35 = color_33;
        if (temp220) {
            bool temp221 = color_33.x > d7;
            color_34 = color_33;
            if (! temp221) {
                bool temp222 = color_33.z == const223_5f;
                if (! temp222) {
                    break;
                }
                
                float temp224 = color_33.w + const144_1f;
                vec4 temp225 = color_33;
                temp225.w = temp224;
                color_34 = temp225;
            }
            
            color_35 = color_34;
        }
        
        color_33 = color_35;
    }
    
    color_36 = color_33;
    while (! (color_36.z >= d10)){
        float temp226 = color_36.y + const144_1f;
        temp227 = color_36;
        temp227.y = temp226;
        bool temp228 = temp226 < d11;
        if (! temp228) {
            vec4 color261 = temp227 + const85;
            color_38 = color261;
            break;
        }
        
        float temp230 = color_36.z + const144_1f;
        bool temp231 = color_36.w < d12;
        float temp232 = color_36.w + const144_1f;
        vec4 temp233 = temp227;
        temp233.zw = vec2(temp230, temp232);
        float temp234 = color_36.x + const144_1f;
        vec4 temp235 = temp227;
        temp235.xz = vec2(temp234, temp230);
        vec4 select335 = temp231 ? temp233 : temp235;
        color_36 = select335;
    }
    
    color_38 = color_36;
    color_39 = color_38;
    while (! (color_39.x >= const237_10f)){
        vec4 color269 = color_39 + bigColor8;
        bool temp239 = color269.z < d8;
        bool temp240 = color269.w < d6;
        float temp241 = color269.y + bigColor8.x;
        vec4 temp242 = color269;
        temp242.y = temp241;
        vec4 select338 = temp240 ? color269 : temp242;
        vec4 select340 = temp239 ? select338 : temp242;
        color_39 = select340;
    }
    
    vec4 color278 = color_39 + const85;
    color_40 = color278;
    while (! (color_40.x >= d14)){
        bool temp246 = color_40.y < d15;
        if (temp246) {
            gla_copyout_gl_FragColor329_0 = color278;
            gl_FragColor = gla_copyout_gl_FragColor329_0;
            return;
        }
        
        vec4 color285 = color_40 + const85;
        color_40 = color285;
    }
    
    vec4 color289 = color_40 + const85;
    color_41 = color289;
    while (! (color_41.w >= d16)){
        float temp249 = color_41.w + const144_1f;
        vec4 temp250 = color_41;
        temp250.w = temp249;
        color_41 = temp250;
    }
    
    color_42 = color_41;
    while (true) {
        bool notlhs330 = color_42.w >= d2;
        bool notrhs331 = color_42.y >= d3;
        bool temp253 = notrhs331 || notlhs330;
        if (temp253) {
            color_43 = color_42;
            while (! (color_43.y < d18)){
                color311 = color_43 + const85;
                bool temp255 = color311.x >= d17;
                if (temp255) {
                    color_44 = color311;
                    while (! (color_44.y >= d16)){
                        bool temp256 = color_44.w < d16;
                        if (temp256) {
                            discard;
                        }
                        
                        vec4 color323 = color_44 + const85;
                        color_44 = color323;
                    }
                    
                    vec4 color327 = color_44 + const85;
                    gla_copyout_gl_FragColor329_0 = color327;
                    gl_FragColor = gla_copyout_gl_FragColor329_0;
                    return;
                }
                
                color_43 = color311;
            }
            
            gla_copyout_gl_FragColor329_0 = color278;
            gl_FragColor = gla_copyout_gl_FragColor329_0;
            return;
        }
        
        vec4 color301 = color_42 + bigColor1_2;
        bool temp260 = color301.z < d3;
        if (temp260) {
            gla_copyout_gl_FragColor329_0 = color278;
            gl_FragColor = gla_copyout_gl_FragColor329_0;
            return;
        }
        
        color_42 = color301;
    }
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
