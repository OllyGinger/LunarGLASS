
***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang loops

Top IR:
; ModuleID = 'Top'

@d6 = external addrspace(2) constant float
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %i5 = alloca i32
  %i4 = alloca i32
  %i3 = alloca i32
  %i2 = alloca i32
  %i1 = alloca i32
  %i = alloca i32
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor, <4 x float>* %color
  store i32 0, i32* %i
  store i32 0, i32* %i1
  store i32 0, i32* %i2
  store i32 0, i32* %i3
  store i32 0, i32* %i4
  store i32 0, i32* %i5
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = load float addrspace(2)* @d6
  %3 = fcmp olt float %1, %2
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  br label %ifmerge

else:                                             ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %4 = load <4 x float>* %color
  %5 = extractelement <4 x float> %4, i32 0
  %6 = load float addrspace(2)* @d6
  %7 = fcmp olt float %5, %6
  br i1 %7, label %then6, label %else7

then6:                                            ; preds = %ifmerge
  br label %ifmerge8

else7:                                            ; preds = %ifmerge
  br label %ifmerge8

ifmerge8:                                         ; preds = %else7, %then6
  %8 = load <4 x float>* %color
  %color9 = fadd <4 x float> %8, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color9, <4 x float>* %color
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %9 = load <4 x float>* %color
  %color10 = fadd <4 x float> %9, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color10, <4 x float>* %color
  %10 = load <4 x float>* %color
  %color11 = fadd <4 x float> %10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color11, <4 x float>* %color
  %gl_FragColor12 = load <4 x float>* %color
  store <4 x float> %gl_FragColor12, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge8
  %11 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %11)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %color9 = fadd <4 x float> %BaseColor, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %color10 = fadd <4 x float> %color9, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %color11 = fadd <4 x float> %color10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %color11)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

// LunarGOO(r471) output
#version 130
in vec4 BaseColor;
const vec4 const22 = vec4(1.0);

void main()
{
    vec4 color9 = BaseColor + const22;
    vec4 color10 = color9 + const22;
    vec4 color11 = color10 + const22;
    gl_FragColor = color11;
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
