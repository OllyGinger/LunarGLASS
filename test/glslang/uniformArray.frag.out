
Top IR:
; ModuleID = 'Top'

@color = external addrspace(2) constant [6 x <4 x float>]
@inColor = external addrspace(2) constant <3 x float>
@alpha = external addrspace(2) constant [16 x float]
@FragColor_shadow = internal global <4 x float> zeroinitializer
@texSampler2D = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %texColor = alloca <4 x float>
  %0 = load <4 x float> addrspace(2)* getelementptr inbounds ([6 x <4 x float>] addrspace(2)* @color, i32 0, i32 1), !gla.uniform !1
  %1 = load <4 x float> addrspace(2)* getelementptr inbounds ([6 x <4 x float>] addrspace(2)* @color, i32 0, i32 1), !gla.uniform !1
  %texColor1 = fadd <4 x float> %0, %1
  store <4 x float> %texColor1, <4 x float>* %texColor
  %2 = load <3 x float> addrspace(2)* @inColor, !gla.uniform !3
  %3 = load <4 x float>* %texColor
  %4 = extractelement <4 x float> %3, i32 0
  %5 = insertelement <3 x float> undef, float %4, i32 0
  %6 = extractelement <4 x float> %3, i32 1
  %7 = insertelement <3 x float> %5, float %6, i32 1
  %8 = extractelement <4 x float> %3, i32 2
  %9 = insertelement <3 x float> %7, float %8, i32 2
  %10 = fadd <3 x float> %9, %2
  %11 = load <4 x float>* %texColor
  %12 = extractelement <3 x float> %10, i32 0
  %13 = insertelement <4 x float> %11, float %12, i32 0
  %14 = extractelement <3 x float> %10, i32 1
  %15 = insertelement <4 x float> %13, float %14, i32 1
  %16 = extractelement <3 x float> %10, i32 2
  %texColor2 = insertelement <4 x float> %15, float %16, i32 2
  store <4 x float> %texColor2, <4 x float>* %texColor
  %17 = load float addrspace(2)* getelementptr inbounds ([16 x float] addrspace(2)* @alpha, i32 0, i32 12), !gla.uniform !4
  %18 = load <4 x float>* %texColor
  %19 = extractelement <4 x float> %18, i32 3
  %20 = fadd float %19, %17
  %21 = load <4 x float>* %texColor
  %texColor3 = insertelement <4 x float> %21, float %20, i32 3
  store <4 x float> %texColor3, <4 x float>* %texColor
  %FragColor_shadow = load <4 x float>* %texColor
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %22 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %22), !gla.output !8
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4, !5}
!gla.outputs = !{!8}
!gla.noStaticUse = !{!5}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"color", i32 12, [6 x <4 x float>]* @color_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"inColor", i32 12, <3 x float>* @inColor_typeProxy, metadata !2}
!4 = metadata !{metadata !"alpha", i32 12, [16 x float]* @alpha_typeProxy, metadata !2}
!5 = metadata !{metadata !"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, metadata !6}
!6 = metadata !{i32 5, i32 0, i32 1024, metadata !7}
!7 = metadata !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!8 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}


Bottom IR:
; ModuleID = 'Top'

@color = external addrspace(2) constant [6 x <4 x float>]
@inColor = external addrspace(2) constant <3 x float>
@alpha = external addrspace(2) constant [16 x float]

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [6 x <4 x float>] addrspace(2)* @color, i32 0, i32 1
  %0 = load <4 x float> addrspace(2)* %gla_constGEP, align 16, !gla.uniform !1
  %texColor1 = fadd <4 x float> %0, %0
  %1 = call <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32.v3i32(<4 x float> %texColor1, <3 x i32> <i32 0, i32 1, i32 2>)
  %2 = load <3 x float> addrspace(2)* @inColor, align 16, !gla.uniform !3
  %3 = fadd <3 x float> %2, %1
  %4 = extractelement <4 x float> %texColor1, i32 3
  %gla_constGEP5 = getelementptr [16 x float] addrspace(2)* @alpha, i32 0, i32 12
  %5 = load float addrspace(2)* %gla_constGEP5, align 4, !gla.uniform !4
  %6 = fadd float %4, %5
  %7 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float> undef, i32 15, <3 x float> %3, i32 0, <3 x float> %3, i32 1, <3 x float> %3, i32 2, float %6, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %7), !gla.output !8
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.v3f32.v3f32.v3f32.f32(<4 x float>, i32, <3 x float>, i32, <3 x float>, i32, <3 x float>, i32, float, i32) nounwind readnone

declare <3 x float> @llvm.gla.fSwizzle.v3f32.v4f32.v3i32(<4 x float>, <3 x i32>) nounwind readnone

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4, !5}
!gla.outputs = !{!8}
!gla.noStaticUse = !{!5}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"color", i32 12, [6 x <4 x float>]* @color_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null}
!3 = metadata !{metadata !"inColor", i32 12, <3 x float>* @inColor_typeProxy, metadata !2}
!4 = metadata !{metadata !"alpha", i32 12, [16 x float]* @alpha_typeProxy, metadata !2}
!5 = metadata !{metadata !"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, metadata !6}
!6 = metadata !{i32 5, i32 0, i32 1024, metadata !7}
!7 = metadata !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!8 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !9}
!9 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 130
// LunarGOO output (r722)
uniform vec4 color[6];
uniform vec3 inColor;
uniform float alpha[16];
uniform sampler2D texSampler2D;

void main()
{
    vec4 texColor1 = color[1] + color[1];
    vec3 temp22 = vec3(texColor1);
    vec3 temp23 = inColor + temp22;
    float temp24 = texColor1.w + alpha[12];
    vec4 temp25 = vec4(temp23.x, temp23.y, temp23.z, temp24);
    gl_FragColor = temp25;
    
}

#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 130
// LunarGOO output (r722)
uniform vec4 color[6];
uniform vec3 inColor;
uniform float alpha[16];
uniform sampler2D texSampler2D;

void main()
{
    vec4 texColor11 = color[1] + color[1];
    vec3 temp22 = vec3(texColor11);
    vec3 temp233 = inColor + temp22;
    float temp244 = texColor11.w + alpha[12];
    vec4 temp25 = vec4(temp233.x, temp233.y, temp233.z, temp244);
    gl_FragColor = temp25;
    
}

