
Top IR:
; ModuleID = 'Top'

@BaseColor_shadow = internal global <4 x float> zeroinitializer
@FragColor_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed = alloca <4 x float>
  %param = alloca <4 x float>
  %color = alloca <4 x float>
  %BaseColor__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %BaseColor__, <4 x float>* @BaseColor_shadow
  %param1 = load <4 x float>* @BaseColor_shadow
  store <4 x float> %param1, <4 x float>* %param
  %0 = call float @"foo(vf4;"(<4 x float>* %param)
  %1 = load <4 x float>* %constructed
  %2 = insertelement <4 x float> undef, float %0, i32 0
  %3 = insertelement <4 x float> %2, float %0, i32 1
  %4 = insertelement <4 x float> %3, float %0, i32 2
  %color2 = insertelement <4 x float> %4, float %0, i32 3
  store <4 x float> %color2, <4 x float>* %color
  %FragColor_shadow = load <4 x float>* %color
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %5 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %5)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

define internal fastcc float @"foo(vf4;"(<4 x float>*) alwaysinline {
entry:
  %1 = load <4 x float>* %0
  %2 = extractelement <4 x float> %1, i32 0
  %3 = load <4 x float>* %0
  %4 = extractelement <4 x float> %3, i32 1
  %5 = fadd float %2, %4
  ret float %5

post-return:                                      ; No predecessors!
  unreachable
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  %BaseColor__ = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %0 = extractelement <4 x float> %BaseColor__, i32 0
  %1 = extractelement <4 x float> %BaseColor__, i32 1
  %2 = fadd float %0, %1
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %2, <4 x i32> zeroinitializer)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %3)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
in vec4 BaseColor;

void main()
{
    float temp21 = BaseColor.x + BaseColor.y;
    vec4 temp22 = vec4(temp21);
    gl_FragColor = temp22;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
in vec4 BaseColor;

void main()
{
    float temp212 = BaseColor.x + BaseColor.y;
    vec4 temp22 = vec4(temp212);
    gl_FragColor = temp22;
    
}
