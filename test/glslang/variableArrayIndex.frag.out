
Top IR:
; ModuleID = 'Top'

%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct1 = type { i32, float }

@Count = external addrspace(2) constant i32
@foo3 = external addrspace(2) constant %lunarStruct3
@foo2 = external addrspace(2) constant [5 x %lunarStruct2]
@foo = external addrspace(2) constant %lunarStruct1
@FragColor_shadow = internal global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32
@coord_shadow = internal global <2 x float> zeroinitializer

define fastcc void @main() {
entry:
  %scale = alloca float
  %iLocal = alloca i32
  %iLocal1 = load i32 addrspace(2)* @Count, !gla.uniform !0
  store i32 %iLocal1, i32* %iLocal
  %0 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 1, i32 0), !gla.uniform !2
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct1 addrspace(2)* @foo, i32 0, i32 0), !gla.uniform !11
  %3 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 %2, i32 0
  %4 = load i32 addrspace(2)* %3, !gla.uniform !2
  %5 = add i32 %4, 2
  %6 = load i32* %iLocal
  %iLocal2 = add i32 %6, 1
  store i32 %iLocal2, i32* %iLocal
  %7 = add i32 %5, %iLocal2
  %8 = getelementptr [5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 %7, i32 2, i32 1
  %scale3 = load float addrspace(2)* %8, !gla.uniform !10
  store float %scale3, float* %scale
  br label %ifmerge

else:                                             ; preds = %entry
  %scale4 = load float addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1), !gla.uniform !2
  store float %scale4, float* %scale
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %9 = load float* %scale
  %10 = load i32 addrspace(1)* @sampler, !gla.uniform !12
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1025, i32 -1, i32 1), !gla.input !17
  store <2 x float> %coord, <2 x float>* @coord_shadow
  %11 = load <2 x float>* @coord_shadow
  %12 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %10, i32 0, <2 x float> %11)
  %13 = insertelement <4 x float> undef, float %9, i32 0
  %14 = insertelement <4 x float> %13, float %9, i32 1
  %15 = insertelement <4 x float> %14, float %9, i32 2
  %16 = insertelement <4 x float> %15, float %9, i32 3
  %FragColor_shadow = fmul <4 x float> %16, %12
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %17 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %17), !gla.output !15
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.uniforms = !{!0, !2, !10, !11, !12}
!gla.outputs = !{!15}
!gla.inputs = !{!17}

!0 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 0, null}
!2 = metadata !{metadata !"foo3", i32 12, %lunarStruct3* @foo3_typeProxy, metadata !3, metadata !4}
!3 = metadata !{i32 4, i32 0, i32 0, null}
!4 = metadata !{metadata !"lunarStruct3", metadata !5, metadata !"s2_1", metadata !6, metadata !"i", metadata !7, metadata !"f", metadata !7, metadata !"s1_1", metadata !9}
!5 = metadata !{i32 4, i32 0, i32 63, null}
!6 = metadata !{metadata !"lunarStruct2", metadata !5, metadata !"i", metadata !7, metadata !"f", metadata !7, metadata !"s1_1", metadata !9}
!7 = metadata !{metadata !"", metadata !8}
!8 = metadata !{i32 0, i32 0, i32 63, null}
!9 = metadata !{metadata !"lunarStruct1", metadata !5, metadata !"i", metadata !7, metadata !"f", metadata !7}
!10 = metadata !{metadata !"foo2", i32 12, [5 x %lunarStruct2]* @foo2_typeProxy, metadata !3, metadata !6}
!11 = metadata !{metadata !"foo", i32 12, %lunarStruct1* @foo_typeProxy, metadata !3, metadata !9}
!12 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 0, metadata !14}
!14 = metadata !{i32 0, i32 addrspace(1)* @sampler, i32 1, i1 false, i1 false, i32 0}
!15 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1024, null}
!17 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_shadow_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1025, null}


Bottom IR:
; ModuleID = 'Top'

%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct1 = type { i32, float }

@Count = external addrspace(2) constant i32
@foo3 = external addrspace(2) constant %lunarStruct3
@foo2 = external addrspace(2) constant [5 x %lunarStruct2]
@foo = external addrspace(2) constant %lunarStruct1
@sampler = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 1, i32 0
  %0 = load i32 addrspace(2)* %gla_constGEP, align 4, !gla.uniform !2
  %1 = icmp sgt i32 %0, 0
  %iLocal1 = load i32 addrspace(2)* @Count, align 4, !gla.uniform !0
  %gla_constGEP6 = getelementptr %lunarStruct1 addrspace(2)* @foo, i32 0, i32 0
  %2 = load i32 addrspace(2)* %gla_constGEP6, align 4, !gla.uniform !11
  %3 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 %2, i32 0
  %4 = load i32 addrspace(2)* %3, align 4, !gla.uniform !2
  %iLocal2 = add i32 %iLocal1, 3
  %5 = add i32 %iLocal2, %4
  %6 = getelementptr [5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 %5, i32 2, i32 1
  %gla_constGEP7 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1
  %select = select i1 %1, float addrspace(2)* %6, float addrspace(2)* %gla_constGEP7
  %scale.0 = load float addrspace(2)* %select, align 4
  %7 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %scale.0, <4 x i32> zeroinitializer)
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1025, i32 -1, i32 1), !gla.input !17
  %8 = load i32 addrspace(1)* @sampler, align 4, !gla.uniform !12
  %9 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %8, i32 0, <2 x float> %coord)
  %FragColor_shadow = fmul <4 x float> %9, %7
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %FragColor_shadow), !gla.output !15
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

!gla.uniforms = !{!0, !2, !10, !11, !12}
!gla.outputs = !{!15}
!gla.inputs = !{!17}

!0 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 0, null}
!2 = metadata !{metadata !"foo3", i32 12, %lunarStruct3* @foo3_typeProxy, metadata !3, metadata !4}
!3 = metadata !{i32 4, i32 0, i32 0, null}
!4 = metadata !{metadata !"lunarStruct3", metadata !5, metadata !"s2_1", metadata !6, metadata !"i", metadata !7, metadata !"f", metadata !7, metadata !"s1_1", metadata !9}
!5 = metadata !{i32 4, i32 0, i32 63, null}
!6 = metadata !{metadata !"lunarStruct2", metadata !5, metadata !"i", metadata !7, metadata !"f", metadata !7, metadata !"s1_1", metadata !9}
!7 = metadata !{metadata !"", metadata !8}
!8 = metadata !{i32 0, i32 0, i32 63, null}
!9 = metadata !{metadata !"lunarStruct1", metadata !5, metadata !"i", metadata !7, metadata !"f", metadata !7}
!10 = metadata !{metadata !"foo2", i32 12, [5 x %lunarStruct2]* @foo2_typeProxy, metadata !3, metadata !6}
!11 = metadata !{metadata !"foo", i32 12, %lunarStruct1* @foo_typeProxy, metadata !3, metadata !9}
!12 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !13}
!13 = metadata !{i32 5, i32 0, i32 0, metadata !14}
!14 = metadata !{i32 0, i32 addrspace(1)* @sampler, i32 1, i1 false, i1 false, i32 0}
!15 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1024, null}
!17 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_shadow_typeProxy, metadata !18}
!18 = metadata !{i32 0, i32 0, i32 1025, null}
#### BEGIN COMPILER 0 INFO LOG ####
WARNING: 0:3: varying deprecated in version 130; may be removed in future release
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 130
struct lunarStruct1 {
    int i;
    float f;
};

struct lunarStruct2 {
    int i;
    float f;
    lunarStruct1 s1_1;
};

struct lunarStruct3 {
    lunarStruct2 s2_1[3];
    int i;
    float f;
    lunarStruct1 s1_1;
};

uniform int Count;
uniform lunarStruct3 foo3;
uniform lunarStruct2 foo2[5];
uniform lunarStruct1 foo;
uniform sampler2D sampler;
const int const23i_0 = 0;
const int const27i_3 = 3;
in vec2 coord;

void main()
{
    int temp21 = foo3.s2_1[1].i;
    bool temp22 = temp21 > const23i_0;
    int temp24 = foo.i;
    int temp25 = foo3.s2_1[temp24].i;
    int iLocal2 = Count + const27i_3;
    int temp28 = iLocal2 + temp25;
    float select = temp22 ? float uniform30 : float gla_constGEP7;
    vec4 temp32 = vec4(select);
    vec4 temp33 = texture(sampler, coord);
    vec4 FragColor_shadow = temp33 * temp32;
    gl_FragColor = FragColor_shadow;
    
}
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
ERROR: Not all shaders have valid object code.
#### END LINKER INFO LOG ####
