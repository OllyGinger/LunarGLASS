
Top IR:
; ModuleID = 'Top'

%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct1 = type { i32, float }

@Count = external addrspace(2) constant i32
@foo3 = external addrspace(2) constant %lunarStruct3
@foo2 = external addrspace(2) constant [5 x %lunarStruct2]
@foo = external addrspace(2) constant %lunarStruct1
@FragColor_shadow = internal global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32
@coord_shadow = internal global <2 x float> zeroinitializer

define fastcc void @main() {
entry:
  %constructed9 = alloca <4 x float>
  %constructed7 = alloca [3 x <2 x float>]
  %constructed6 = alloca <2 x float>
  %constructed = alloca [3 x <2 x float>]
  %scale = alloca float
  %iLocal = alloca i32
  %iLocal1 = load i32 addrspace(2)* @Count, !gla.uniform !0
  store i32 %iLocal1, i32* %iLocal
  %0 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 1, i32 0), !gla.uniform !2
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct1 addrspace(2)* @foo, i32 0, i32 0), !gla.uniform !9
  %3 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 %2, i32 0
  %4 = load i32 addrspace(2)* %3, !gla.uniform !2
  %5 = add i32 %4, 2
  %6 = load i32* %iLocal
  %iLocal2 = add i32 %6, 1
  store i32 %iLocal2, i32* %iLocal
  %7 = add i32 %5, %iLocal2
  %8 = getelementptr [5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 %7, i32 2, i32 1
  %scale3 = load float addrspace(2)* %8, !gla.uniform !8
  store float %scale3, float* %scale
  br label %ifmerge

else:                                             ; preds = %entry
  %scale4 = load float addrspace(2)* getelementptr inbounds (%lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1), !gla.uniform !2
  store float %scale4, float* %scale
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %9 = load float* %scale
  %10 = load i32 addrspace(1)* @sampler, !gla.uniform !10
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1025, i32 -1, i32 1), !gla.input !15
  store <2 x float> %coord, <2 x float>* @coord_shadow
  %11 = load <2 x float>* @coord_shadow
  %12 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %10, i32 0, <2 x float> %11)
  %13 = insertelement <4 x float> undef, float %9, i32 0
  %14 = insertelement <4 x float> %13, float %9, i32 1
  %15 = insertelement <4 x float> %14, float %9, i32 2
  %16 = insertelement <4 x float> %15, float %9, i32 3
  %FragColor_shadow = fmul <4 x float> %16, %12
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  %coord5 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1025, i32 -1, i32 1), !gla.input !15
  store <2 x float> %coord5, <2 x float>* @coord_shadow
  %17 = load <2 x float>* @coord_shadow
  %18 = load float* %scale
  %19 = load <2 x float>* %constructed6
  %20 = insertelement <2 x float> undef, float %18, i32 0
  %21 = insertelement <2 x float> %20, float %18, i32 1
  %22 = getelementptr [3 x <2 x float>]* %constructed7, i32 0, i32 0
  store <2 x float> %17, <2 x float>* %22
  %23 = getelementptr [3 x <2 x float>]* %constructed7, i32 0, i32 1
  store <2 x float> %21, <2 x float>* %23
  %24 = getelementptr [3 x <2 x float>]* %constructed7, i32 0, i32 2
  store <2 x float> <float 1.000000e+00, float 2.000000e+00>, <2 x float>* %24
  %constructed8 = load [3 x <2 x float>]* %constructed7
  store [3 x <2 x float>] %constructed8, [3 x <2 x float>]* %constructed
  %25 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct1 addrspace(2)* @foo, i32 0, i32 0), !gla.uniform !9
  %26 = getelementptr [3 x <2 x float>]* %constructed, i32 0, i32 %25
  %27 = load <2 x float>* %26
  %28 = load i32 addrspace(2)* getelementptr inbounds (%lunarStruct1 addrspace(2)* @foo, i32 0, i32 0), !gla.uniform !9
  %29 = getelementptr [3 x <2 x float>]* %constructed, i32 0, i32 %28
  %30 = load <2 x float>* %29
  %31 = load <4 x float>* %constructed9
  %32 = extractelement <2 x float> %27, i32 0
  %33 = insertelement <4 x float> %31, float %32, i32 0
  %34 = extractelement <2 x float> %27, i32 1
  %35 = insertelement <4 x float> %33, float %34, i32 1
  %36 = extractelement <2 x float> %30, i32 0
  %37 = insertelement <4 x float> %35, float %36, i32 2
  %38 = extractelement <2 x float> %30, i32 1
  %39 = insertelement <4 x float> %37, float %38, i32 3
  %40 = load <4 x float>* @FragColor_shadow
  %FragColor_shadow10 = fadd <4 x float> %40, %39
  store <4 x float> %FragColor_shadow10, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  %41 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %41), !gla.output !13
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.uniforms = !{!0, !2, !8, !9, !10}
!gla.outputs = !{!13}
!gla.inputs = !{!15}

!0 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"foo3", i32 12, %lunarStruct3* @foo3_typeProxy, metadata !3, metadata !4}
!3 = metadata !{i32 4, i32 0, i32 1024, null}
!4 = metadata !{metadata !"lunarStruct3", metadata !3, metadata !"s2_1", metadata !5, metadata !"i", metadata !6, metadata !"f", metadata !6, metadata !"s1_1", metadata !7}
!5 = metadata !{metadata !"lunarStruct2", metadata !3, metadata !"i", metadata !6, metadata !"f", metadata !6, metadata !"s1_1", metadata !7}
!6 = metadata !{metadata !"", metadata !1}
!7 = metadata !{metadata !"lunarStruct1", metadata !3, metadata !"i", metadata !6, metadata !"f", metadata !6}
!8 = metadata !{metadata !"foo2", i32 12, [5 x %lunarStruct2]* @foo2_typeProxy, metadata !3, metadata !5}
!9 = metadata !{metadata !"foo", i32 12, %lunarStruct1* @foo_typeProxy, metadata !3, metadata !7}
!10 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !11}
!11 = metadata !{i32 5, i32 0, i32 1024, metadata !12}
!12 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!13 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!15 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}


Bottom IR:
; ModuleID = 'Top'

%lunarStruct3 = type { [3 x %lunarStruct2], i32, float, %lunarStruct1 }
%lunarStruct2 = type { i32, float, %lunarStruct1 }
%lunarStruct1 = type { i32, float }

@Count = external addrspace(2) constant i32
@foo3 = external addrspace(2) constant %lunarStruct3
@foo2 = external addrspace(2) constant [5 x %lunarStruct2]
@foo = external addrspace(2) constant %lunarStruct1
@sampler = external addrspace(1) constant i32
@gla_globalAgg = internal global [3 x <2 x float>] undef

define fastcc void @main() {
entry:
  %constructed = alloca [3 x <2 x float>], align 8
  %gla_constGEP = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 1, i32 0
  %0 = load i32 addrspace(2)* %gla_constGEP, align 4, !gla.uniform !2
  %1 = icmp sgt i32 %0, 0
  %iLocal1 = load i32 addrspace(2)* @Count, align 4, !gla.uniform !0
  %gla_constGEP16 = getelementptr %lunarStruct1 addrspace(2)* @foo, i32 0, i32 0
  %2 = load i32 addrspace(2)* %gla_constGEP16, align 4, !gla.uniform !9
  %3 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 %2, i32 0
  %4 = load i32 addrspace(2)* %3, align 4, !gla.uniform !2
  %iLocal2 = add i32 %iLocal1, 3
  %5 = add i32 %iLocal2, %4
  %6 = getelementptr [5 x %lunarStruct2] addrspace(2)* @foo2, i32 0, i32 %5, i32 2, i32 1
  %gla_constGEP17 = getelementptr %lunarStruct3 addrspace(2)* @foo3, i32 0, i32 0, i32 0, i32 2, i32 1
  %select = select i1 %1, float addrspace(2)* %6, float addrspace(2)* %gla_constGEP17
  %scale.0 = load float addrspace(2)* %select, align 4
  %7 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %scale.0, <4 x i32> zeroinitializer)
  %8 = call <2 x float> @llvm.gla.fSwizzle.v2f32.f32.v2i32(float %scale.0, <2 x i32> zeroinitializer)
  %9 = load i32 addrspace(1)* @sampler, align 4, !gla.uniform !10
  %coord5 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 1025, i32 -1, i32 1), !gla.input !15
  %aggregate = load [3 x <2 x float>]* @gla_globalAgg
  %insert = insertvalue [3 x <2 x float>] %aggregate, <2 x float> %coord5, 0
  %insert13 = insertvalue [3 x <2 x float>] %insert, <2 x float> %8, 1
  %insert15 = insertvalue [3 x <2 x float>] %insert13, <2 x float> <float 1.000000e+00, float 2.000000e+00>, 2
  store [3 x <2 x float>] %insert15, [3 x <2 x float>]* %constructed, align 8
  %10 = getelementptr [3 x <2 x float>]* %constructed, i32 0, i32 %2
  %11 = load <2 x float>* %10, align 8
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v2f32.v4i32(<2 x float> %11, <4 x i32> <i32 0, i32 1, i32 0, i32 1>)
  %13 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %9, i32 0, <2 x float> %coord5)
  %FragColor_shadow = fmul <4 x float> %7, %13
  %FragColor_shadow10 = fadd <4 x float> %FragColor_shadow, %12
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %FragColor_shadow10), !gla.output !13
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <2 x float> @llvm.gla.fSwizzle.v2f32.f32.v2i32(float, <2 x i32>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.v2f32.v4i32(<2 x float>, <4 x i32>) nounwind readnone

!gla.uniforms = !{!0, !2, !8, !9, !10}
!gla.outputs = !{!13}
!gla.inputs = !{!15}

!0 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"foo3", i32 12, %lunarStruct3* @foo3_typeProxy, metadata !3, metadata !4}
!3 = metadata !{i32 4, i32 0, i32 1024, null}
!4 = metadata !{metadata !"lunarStruct3", metadata !3, metadata !"s2_1", metadata !5, metadata !"i", metadata !6, metadata !"f", metadata !6, metadata !"s1_1", metadata !7}
!5 = metadata !{metadata !"lunarStruct2", metadata !3, metadata !"i", metadata !6, metadata !"f", metadata !6, metadata !"s1_1", metadata !7}
!6 = metadata !{metadata !"", metadata !1}
!7 = metadata !{metadata !"lunarStruct1", metadata !3, metadata !"i", metadata !6, metadata !"f", metadata !6}
!8 = metadata !{metadata !"foo2", i32 12, [5 x %lunarStruct2]* @foo2_typeProxy, metadata !3, metadata !5}
!9 = metadata !{metadata !"foo", i32 12, %lunarStruct1* @foo_typeProxy, metadata !3, metadata !7}
!10 = metadata !{metadata !"sampler", i32 12, i32* @sampler_typeProxy, metadata !11}
!11 = metadata !{i32 5, i32 0, i32 1024, metadata !12}
!12 = metadata !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!13 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !14}
!14 = metadata !{i32 0, i32 0, i32 1024, null, i32 0}
!15 = metadata !{metadata !"coord", i32 1, <2 x float>* @coord_shadow_typeProxy, metadata !16}
!16 = metadata !{i32 0, i32 0, i32 1025, null, i32 1}

***Unsupported functionality: missing metadata on load
#### BEGIN COMPILER 0 INFO LOG ####
WARNING: 0:3: varying deprecated in version 130; may be removed in future release
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 130
// LunarGOO output (r722)
struct lunarStruct1 {
    int i;
    float f;
};

struct lunarStruct2 {
    int i;
    float f;
    lunarStruct1 s1_1;
};

struct lunarStruct3 {
    lunarStruct2 s2_1[3];
    int i;
    float f;
    lunarStruct1 s1_1;
};

uniform int Count;
uniform lunarStruct3 foo3;
uniform lunarStruct2 foo2[5];
uniform lunarStruct1 foo;
uniform sampler2D sampler;
in vec2 coord;
vec2 gla_globalAgg[3];
const int const24i_0 = 0;
const int const28i_3 = 3;
const vec2 const35 = vec2(1.0, 2.0);

void main()
{
    vec2[3] constructed;
    int temp22 = int(foo3.s2_1[1].i);
    bool temp23 = temp22 > const24i_0;
    int temp25 = int(foo.i);
    int temp26 = int(foo3.s2_1[temp25].i);
    int iLocal2 = Count + const28i_3;
    int temp29 = iLocal2 + temp26;
    float select = temp23 ? float uniform31 : float gla_constGEP17;
    vec4 temp33 = vec4(select);
    vec2 temp34 = vec2(select);
    gla_globalAgg[0] = coord;
    gla_globalAgg[1] = temp34;
    gla_globalAgg[2] = const35;
    constructed = gla_globalAgg;
    vec2 temp36 = constructed[temp25];
    vec4 temp37 = temp36.xyxy;
    vec4 temp38 = texture(sampler, coord);
    vec4 FragColor_shadow = temp33 * temp38;
    vec4 FragColor_shadow10 = FragColor_shadow + temp37;
    gl_FragColor = FragColor_shadow10;
    
}

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
ERROR: Not all shaders have valid object code.
#### END LINKER INFO LOG ####
