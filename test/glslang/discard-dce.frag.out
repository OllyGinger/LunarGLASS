
Top IR:
; ModuleID = 'Top'

@tex_coord_shadow = internal global <2 x float> zeroinitializer
@gl_FragColor = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %radius = alloca float
  %y = alloca float
  %x = alloca float
  %color = alloca <4 x float>
  %black = alloca <4 x float>
  %white = alloca <4 x float>
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %white
  store <4 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>, <4 x float>* %black
  %color1 = load <4 x float>* %white
  store <4 x float> %color1, <4 x float>* %color
  %tex_coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  store <2 x float> %tex_coord, <2 x float>* @tex_coord_shadow
  %0 = load <2 x float>* @tex_coord_shadow
  %1 = extractelement <2 x float> %0, i32 0
  %2 = fmul float %1, 2.000000e+00
  %x2 = fsub float %2, 1.000000e+00
  store float %x2, float* %x
  %tex_coord3 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  store <2 x float> %tex_coord3, <2 x float>* @tex_coord_shadow
  %3 = load <2 x float>* @tex_coord_shadow
  %4 = extractelement <2 x float> %3, i32 1
  %5 = fmul float %4, 2.000000e+00
  %y4 = fsub float %5, 1.000000e+00
  store float %y4, float* %y
  %6 = load float* %x
  %7 = load float* %x
  %8 = fmul float %6, %7
  %9 = load float* %y
  %10 = load float* %y
  %11 = fmul float %9, %10
  %12 = fadd float %8, %11
  %radius5 = call float @llvm.gla.fSqrt.f32.f32(float %12)
  store float %radius5, float* %radius
  %13 = load float* %radius
  %14 = fcmp ogt float %13, 1.000000e+00
  br i1 %14, label %then, label %ifmerge11

then:                                             ; preds = %entry
  %15 = load float* %radius
  %16 = fcmp ogt float %15, 0x3FF19999A0000000
  br i1 %16, label %then6, label %ifmerge

then6:                                            ; preds = %then
  %17 = load <4 x float>* %color
  %color7 = fadd <4 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color7, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %then, %then6
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %18 = load float* %radius
  %19 = fcmp ogt float %18, 0x3FF3333340000000
  br i1 %19, label %then8, label %ifmerge10

then8:                                            ; preds = %ifmerge
  %20 = load <4 x float>* %color
  %color9 = fadd <4 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color9, <4 x float>* %color
  br label %ifmerge10

ifmerge10:                                        ; preds = %ifmerge, %then8
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  br label %ifmerge11

ifmerge11:                                        ; preds = %entry, %post-discard
  %21 = load float* %radius
  %22 = fcmp oge float %21, 7.500000e-01
  br i1 %22, label %then12, label %ifmerge14

then12:                                           ; preds = %ifmerge11
  %23 = load float* %radius
  %24 = call float @llvm.gla.fPow.f32.f32.f32(float %23, float 1.600000e+01)
  %25 = fdiv float %24, 2.000000e+00
  %26 = call float @llvm.gla.fAbs.f32.f32(float %25)
  %27 = load <4 x float>* %color
  %28 = insertelement <4 x float> undef, float %26, i32 0
  %29 = insertelement <4 x float> %28, float %26, i32 1
  %30 = insertelement <4 x float> %29, float %26, i32 2
  %31 = insertelement <4 x float> %30, float %26, i32 3
  %color13 = fsub <4 x float> %27, %31
  store <4 x float> %color13, <4 x float>* %color
  br label %ifmerge14

ifmerge14:                                        ; preds = %ifmerge11, %then12
  %gl_FragColor15 = load <4 x float>* %color
  store <4 x float> %gl_FragColor15, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge14
  %32 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %32)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %ifmerge10
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare float @llvm.gla.fPow.f32.f32.f32(float, float) nounwind readnone

declare float @llvm.gla.fAbs.f32.f32(float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

define fastcc void @main() {
entry:
  %tex_coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %0 = extractelement <2 x float> %tex_coord, i32 0
  %1 = fmul float %0, 2.000000e+00
  %x2 = fadd float %1, -1.000000e+00
  %2 = extractelement <2 x float> %tex_coord, i32 1
  %3 = fmul float %2, 2.000000e+00
  %y4 = fadd float %3, -1.000000e+00
  %4 = fmul float %x2, %x2
  %5 = fmul float %y4, %y4
  %6 = fadd float %4, %5
  %radius5 = call float @llvm.gla.fSqrt.f32.f32(float %6)
  %7 = fcmp ogt float %radius5, 1.000000e+00
  br i1 %7, label %then, label %ifmerge11

then:                                             ; preds = %entry
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge11:                                        ; preds = %entry
  %8 = fcmp ult float %radius5, 7.500000e-01
  %9 = call float @llvm.gla.fPow.f32.f32.f32(float %radius5, float 1.600000e+01)
  %10 = fdiv float %9, 2.000000e+00
  %11 = call float @llvm.gla.fAbs.f32.f32(float %10)
  %12 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %11, <4 x i32> zeroinitializer)
  %color13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %12
  %select = select i1 %8, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %color13
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %select)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge11
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare float @llvm.gla.fSqrt.f32.f32(float) nounwind readnone

declare void @llvm.gla.discard() nounwind

declare float @llvm.gla.fPow.f32.f32.f32(float, float) nounwind readnone

declare float @llvm.gla.fAbs.f32.f32(float) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

// LunarGOO(r471) output
#version 130
in vec2 tex_coord;
const float const22_2f = 2.0;
const float const24__1f = -1.0;
const float const32_1f = 1.0;
const float const34_1f = 0.75;
const float const36_16f = 16.0;
const vec4 const41 = vec4(1.0);

void main()
{
    float temp21 = tex_coord.x * const22_2f;
    float temp23 = temp21 + const24__1f;
    float temp25 = tex_coord.y * const22_2f;
    float temp26 = temp25 + const24__1f;
    float temp27 = temp23 * temp23;
    float temp28 = temp26 * temp26;
    float temp29 = temp27 + temp28;
    float radius5 = sqrt(temp29);
    bool temp31 = radius5 > const32_1f;
    if (temp31) {
        discard;
    }
    
    bool temp33 = radius5 < const34_1f;
    float temp35 = pow(radius5, const36_16f);
    float temp37 = temp35 / const22_2f;
    float temp38 = abs(temp37);
    vec4 temp39 = vec4(temp38);
    vec4 color13 = const41 - temp39;
    vec4 select = temp33 ? const41 : color13;
    gl_FragColor = select;
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
