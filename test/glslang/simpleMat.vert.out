
Top IR:
; ModuleID = 'Top'

@Position_shadow = internal global <4 x float> zeroinitializer
@"matrix mvp" = external addrspace(2) constant [4 x <4 x float>]
@v_shadow = internal global <4 x float> zeroinitializer
@f_shadow = internal global float 0.000000e+00
@"matrix am3_shadow" = internal global [3 x <3 x float>] zeroinitializer

define fastcc void @main() {
entry:
  %0 = load [4 x <4 x float>] addrspace(2)* @"matrix mvp", !uniform !3
  %v__ = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1024, i32 -1), !input !5, !precision !9
  store <4 x float> %v__, <4 x float>* @v_shadow
  %1 = load <4 x float>* @v_shadow
  %2 = alloca <4 x float>
  %3 = load <4 x float>* %2
  %component = extractelement <4 x float> %1, i32 0, !precision !9
  %component1 = extractelement <4 x float> %1, i32 1, !precision !9
  %component2 = extractelement <4 x float> %1, i32 2, !precision !9
  %component3 = extractelement <4 x float> %1, i32 3, !precision !9
  %column = extractvalue [4 x <4 x float>] %0, 0, !precision !9
  %element = extractelement <4 x float> %column, i32 0, !precision !9
  %product = fmul float %element, %component, !precision !9
  %column4 = extractvalue [4 x <4 x float>] %0, 1, !precision !9
  %element5 = extractelement <4 x float> %column4, i32 0, !precision !9
  %product6 = fmul float %element5, %component1, !precision !9
  %dotProduct = fadd float %product, %product6, !precision !9
  %column7 = extractvalue [4 x <4 x float>] %0, 2, !precision !9
  %element8 = extractelement <4 x float> %column7, i32 0, !precision !9
  %product9 = fmul float %element8, %component2, !precision !9
  %dotProduct10 = fadd float %dotProduct, %product9, !precision !9
  %column11 = extractvalue [4 x <4 x float>] %0, 3, !precision !9
  %element12 = extractelement <4 x float> %column11, i32 0, !precision !9
  %product13 = fmul float %element12, %component3, !precision !9
  %dotProduct14 = fadd float %dotProduct10, %product13, !precision !9
  %4 = insertelement <4 x float> %3, float %dotProduct14, i32 0, !precision !9
  %column15 = extractvalue [4 x <4 x float>] %0, 0, !precision !9
  %element16 = extractelement <4 x float> %column15, i32 1, !precision !9
  %product17 = fmul float %element16, %component, !precision !9
  %column18 = extractvalue [4 x <4 x float>] %0, 1, !precision !9
  %element19 = extractelement <4 x float> %column18, i32 1, !precision !9
  %product20 = fmul float %element19, %component1, !precision !9
  %dotProduct21 = fadd float %product17, %product20, !precision !9
  %column22 = extractvalue [4 x <4 x float>] %0, 2, !precision !9
  %element23 = extractelement <4 x float> %column22, i32 1, !precision !9
  %product24 = fmul float %element23, %component2, !precision !9
  %dotProduct25 = fadd float %dotProduct21, %product24, !precision !9
  %column26 = extractvalue [4 x <4 x float>] %0, 3, !precision !9
  %element27 = extractelement <4 x float> %column26, i32 1, !precision !9
  %product28 = fmul float %element27, %component3, !precision !9
  %dotProduct29 = fadd float %dotProduct25, %product28, !precision !9
  %5 = insertelement <4 x float> %4, float %dotProduct29, i32 1, !precision !9
  %column30 = extractvalue [4 x <4 x float>] %0, 0, !precision !9
  %element31 = extractelement <4 x float> %column30, i32 2, !precision !9
  %product32 = fmul float %element31, %component, !precision !9
  %column33 = extractvalue [4 x <4 x float>] %0, 1, !precision !9
  %element34 = extractelement <4 x float> %column33, i32 2, !precision !9
  %product35 = fmul float %element34, %component1, !precision !9
  %dotProduct36 = fadd float %product32, %product35, !precision !9
  %column37 = extractvalue [4 x <4 x float>] %0, 2, !precision !9
  %element38 = extractelement <4 x float> %column37, i32 2, !precision !9
  %product39 = fmul float %element38, %component2, !precision !9
  %dotProduct40 = fadd float %dotProduct36, %product39, !precision !9
  %column41 = extractvalue [4 x <4 x float>] %0, 3, !precision !9
  %element42 = extractelement <4 x float> %column41, i32 2, !precision !9
  %product43 = fmul float %element42, %component3, !precision !9
  %dotProduct44 = fadd float %dotProduct40, %product43, !precision !9
  %6 = insertelement <4 x float> %5, float %dotProduct44, i32 2, !precision !9
  %column45 = extractvalue [4 x <4 x float>] %0, 0, !precision !9
  %element46 = extractelement <4 x float> %column45, i32 3, !precision !9
  %product47 = fmul float %element46, %component, !precision !9
  %column48 = extractvalue [4 x <4 x float>] %0, 1, !precision !9
  %element49 = extractelement <4 x float> %column48, i32 3, !precision !9
  %product50 = fmul float %element49, %component1, !precision !9
  %dotProduct51 = fadd float %product47, %product50, !precision !9
  %column52 = extractvalue [4 x <4 x float>] %0, 2, !precision !9
  %element53 = extractelement <4 x float> %column52, i32 3, !precision !9
  %product54 = fmul float %element53, %component2, !precision !9
  %dotProduct55 = fadd float %dotProduct51, %product54, !precision !9
  %column56 = extractvalue [4 x <4 x float>] %0, 3, !precision !9
  %element57 = extractelement <4 x float> %column56, i32 3, !precision !9
  %product58 = fmul float %element57, %component3, !precision !9
  %dotProduct59 = fadd float %dotProduct55, %product58, !precision !9
  %Position_shadow = insertelement <4 x float> %6, float %dotProduct59, i32 3, !precision !9
  store <4 x float> %Position_shadow, <4 x float>* @Position_shadow
  %"matrix3x3 am3[0]" = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1025, i32 -1), !input !7, !precision !9
  store <3 x float> %"matrix3x3 am3[0]", <3 x float>* getelementptr inbounds ([3 x <3 x float>]* @"matrix am3_shadow", i32 0, i32 0)
  %"matrix3x3 am3[1]" = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1026, i32 -1), !input !7, !precision !9
  store <3 x float> %"matrix3x3 am3[1]", <3 x float>* getelementptr inbounds ([3 x <3 x float>]* @"matrix am3_shadow", i32 0, i32 1)
  %"matrix3x3 am3[2]" = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1027, i32 -1), !input !7, !precision !9
  store <3 x float> %"matrix3x3 am3[2]", <3 x float>* getelementptr inbounds ([3 x <3 x float>]* @"matrix am3_shadow", i32 0, i32 2)
  %7 = load <3 x float>* getelementptr inbounds ([3 x <3 x float>]* @"matrix am3_shadow", i32 0, i32 2)
  %f_shadow = extractelement <3 x float> %7, i32 1, !precision !9
  store float %f_shadow, float* @f_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %8 = load <4 x float>* @Position_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %8), !output !0
  %9 = load float* @f_shadow
  call void @llvm.gla.fWriteData.f32(i32 1, i32 -1, float %9), !output !2
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare void @llvm.gla.fWriteData.f32(i32, i32, float) nounwind

!outputs = !{!0, !2}
!defaultUniforms = !{!3}
!inputs = !{!5, !7}

!0 = metadata !{metadata !"gl_Position", i32 8, <4 x float>* @Position_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 3, i32 0}
!2 = metadata !{metadata !"f", i32 1, float* @f_shadow_typeProxy, metadata !1}
!3 = metadata !{metadata !"mvp", i32 12, [4 x <4 x float>] addrspace(2)* @"matrix mvp", metadata !4}
!4 = metadata !{i32 3, i32 3, i32 0}
!5 = metadata !{metadata !"v", i32 7, <4 x float>* @v_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 3, i32 1024}
!7 = metadata !{metadata !"am3", i32 7, [3 x <3 x float>]* @"matrix am3_shadow_typeProxy", metadata !8}
!8 = metadata !{i32 3, i32 3, i32 1025}
!9 = metadata !{i32 3}


Bottom IR:
; ModuleID = 'Top'

@"matrix mvp" = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %0 = load [4 x <4 x float>] addrspace(2)* @"matrix mvp", align 16, !uniform !3
  %v__ = call <4 x float> @llvm.gla.fReadData.v4f32(i32 1024, i32 -1), !input !5, !precision !9
  %component = extractelement <4 x float> %v__, i32 0, !precision !9
  %component1 = extractelement <4 x float> %v__, i32 1, !precision !9
  %component2 = extractelement <4 x float> %v__, i32 2, !precision !9
  %component3 = extractelement <4 x float> %v__, i32 3, !precision !9
  %"matrix3x3 am3[2]" = call <3 x float> @llvm.gla.fReadData.v3f32(i32 1027, i32 -1), !input !7, !precision !9
  %column4 = extractvalue [4 x <4 x float>] %0, 1, !precision !9
  %column = extractvalue [4 x <4 x float>] %0, 0, !precision !9
  %column7 = extractvalue [4 x <4 x float>] %0, 2, !precision !9
  %element5 = extractelement <4 x float> %column4, i32 0, !precision !9
  %element = extractelement <4 x float> %column, i32 0, !precision !9
  %element19 = extractelement <4 x float> %column4, i32 1, !precision !9
  %element16 = extractelement <4 x float> %column, i32 1, !precision !9
  %column11 = extractvalue [4 x <4 x float>] %0, 3, !precision !9
  %element8 = extractelement <4 x float> %column7, i32 0, !precision !9
  %product6 = fmul float %element5, %component1, !precision !9
  %product = fmul float %element, %component, !precision !9
  %element34 = extractelement <4 x float> %column4, i32 2, !precision !9
  %element31 = extractelement <4 x float> %column, i32 2, !precision !9
  %element23 = extractelement <4 x float> %column7, i32 1, !precision !9
  %product20 = fmul float %element19, %component1, !precision !9
  %product17 = fmul float %element16, %component, !precision !9
  %element12 = extractelement <4 x float> %column11, i32 0, !precision !9
  %product9 = fmul float %element8, %component2, !precision !9
  %dotProduct = fadd float %product, %product6, !precision !9
  %element49 = extractelement <4 x float> %column4, i32 3, !precision !9
  %element46 = extractelement <4 x float> %column, i32 3, !precision !9
  %element38 = extractelement <4 x float> %column7, i32 2, !precision !9
  %product35 = fmul float %element34, %component1, !precision !9
  %product32 = fmul float %element31, %component, !precision !9
  %element27 = extractelement <4 x float> %column11, i32 1, !precision !9
  %product24 = fmul float %element23, %component2, !precision !9
  %dotProduct21 = fadd float %product17, %product20, !precision !9
  %product13 = fmul float %element12, %component3, !precision !9
  %dotProduct10 = fadd float %product9, %dotProduct, !precision !9
  %element53 = extractelement <4 x float> %column7, i32 3, !precision !9
  %product50 = fmul float %element49, %component1, !precision !9
  %product47 = fmul float %element46, %component, !precision !9
  %element42 = extractelement <4 x float> %column11, i32 2, !precision !9
  %product39 = fmul float %element38, %component2, !precision !9
  %dotProduct36 = fadd float %product32, %product35, !precision !9
  %product28 = fmul float %element27, %component3, !precision !9
  %dotProduct25 = fadd float %product24, %dotProduct21, !precision !9
  %dotProduct14 = fadd float %product13, %dotProduct10, !precision !9
  %element57 = extractelement <4 x float> %column11, i32 3, !precision !9
  %product54 = fmul float %element53, %component2, !precision !9
  %dotProduct51 = fadd float %product47, %product50, !precision !9
  %product43 = fmul float %element42, %component3, !precision !9
  %dotProduct40 = fadd float %product39, %dotProduct36, !precision !9
  %dotProduct29 = fadd float %product28, %dotProduct25, !precision !9
  %product58 = fmul float %element57, %component3, !precision !9
  %dotProduct55 = fadd float %product54, %dotProduct51, !precision !9
  %dotProduct44 = fadd float %product43, %dotProduct40, !precision !9
  %dotProduct59 = fadd float %product58, %dotProduct55, !precision !9
  %f_shadow = extractelement <3 x float> %"matrix3x3 am3[2]", i32 1, !precision !9
  %1 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> undef, i32 15, float %dotProduct14, i32 0, float %dotProduct29, i32 0, float %dotProduct44, i32 0, float %dotProduct59, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %1), !output !0
  call void @llvm.gla.fWriteData.f32(i32 1, i32 -1, float %f_shadow), !output !2
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadData.v4f32(i32, i32) nounwind readonly

declare <3 x float> @llvm.gla.fReadData.v3f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare void @llvm.gla.fWriteData.f32(i32, i32, float) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

!outputs = !{!0, !2}
!defaultUniforms = !{!3}
!inputs = !{!5, !7}

!0 = metadata !{metadata !"gl_Position", i32 8, <4 x float>* @Position_shadow_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 3, i32 0}
!2 = metadata !{metadata !"f", i32 1, float* @f_shadow_typeProxy, metadata !1}
!3 = metadata !{metadata !"mvp", i32 12, [4 x <4 x float>] addrspace(2)* @"matrix mvp", metadata !4}
!4 = metadata !{i32 3, i32 3, i32 0}
!5 = metadata !{metadata !"v", i32 7, <4 x float>* @v_shadow_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 3, i32 1024}
!7 = metadata !{metadata !"am3", i32 7, [3 x <3 x float>]* @"matrix am3_shadow_typeProxy", metadata !8}
!8 = metadata !{i32 3, i32 3, i32 1025}
!9 = metadata !{i32 3}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 100
uniform mat4 mvp;
varying float f;
attribute highp vec4 v;
attribute highp mat3 am3;

void main()
{
    highp vec4 column4 = mvp[1];
    highp vec4 column = mvp[0];
    highp vec4 column7 = mvp[2];
    highp vec4 column11 = mvp[3];
    highp float product6 = column4.x * v.y;
    highp float product = column.x * v.x;
    highp float product20 = column4.y * v.y;
    highp float product17 = column.y * v.x;
    highp float product9 = column7.x * v.z;
    highp float dotProduct = product + product6;
    highp float product35 = column4.z * v.y;
    highp float product32 = column.z * v.x;
    highp float product24 = column7.y * v.z;
    highp float dotProduct21 = product17 + product20;
    highp float product13 = column11.x * v.w;
    highp float dotProduct10 = product9 + dotProduct;
    highp float product50 = column4.w * v.y;
    highp float product47 = column.w * v.x;
    highp float product39 = column7.z * v.z;
    highp float dotProduct36 = product32 + product35;
    highp float product28 = column11.y * v.w;
    highp float dotProduct25 = product24 + dotProduct21;
    highp float dotProduct14 = product13 + dotProduct10;
    highp float product54 = column7.w * v.z;
    highp float dotProduct51 = product47 + product50;
    highp float product43 = column11.z * v.w;
    highp float dotProduct40 = product39 + dotProduct36;
    highp float dotProduct29 = product28 + dotProduct25;
    highp float product58 = column11.w * v.w;
    highp float dotProduct55 = product54 + dotProduct51;
    highp float dotProduct44 = product43 + dotProduct40;
    highp float dotProduct59 = product58 + dotProduct55;
    vec4 temp53 = vec4(dotProduct14, dotProduct29, dotProduct44, dotProduct59);
    gl_Position = temp53;
    f = am3[2].y;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r722) output
#version 100
uniform mat4 mvp;
varying float f;
attribute highp vec4 v;
attribute highp mat3 am3;

void main()
{
    vec4 column41 = mvp[1];
    vec4 column2 = mvp[0];
    vec4 column73 = mvp[2];
    vec4 column114 = mvp[3];
    highp float product7 = column2.x * v.x;
    highp float product65 = column41.x * v.y;
    highp float dotProduct14 = product7 + product65;
    highp float product913 = column73.x * v.z;
    highp float product1711 = column2.y * v.x;
    highp float product209 = column41.y * v.y;
    highp float dotProduct1024 = product913 + dotProduct14;
    highp float product1323 = column114.x * v.w;
    highp float dotProduct2121 = product1711 + product209;
    highp float product2420 = column73.y * v.z;
    highp float product3218 = column2.z * v.x;
    highp float product3516 = column41.z * v.y;
    highp float dotProduct143536 = product1323 + dotProduct1024;
    highp float dotProduct2534 = product2420 + dotProduct2121;
    highp float product2833 = column114.y * v.w;
    highp float dotProduct3631 = product3218 + product3516;
    highp float product3930 = column73.z * v.z;
    highp float product4728 = column2.w * v.x;
    highp float product5026 = column41.w * v.y;
    highp float dotProduct2943 = product2833 + dotProduct2534;
    highp float dotProduct4042 = product3930 + dotProduct3631;
    highp float product4341 = column114.z * v.w;
    highp float dotProduct5139 = product4728 + product5026;
    highp float product5438 = column73.w * v.z;
    highp float dotProduct4447 = product4341 + dotProduct4042;
    highp float dotProduct5546 = product5438 + dotProduct5139;
    highp float product5845 = column114.w * v.w;
    highp float dotProduct5948 = product5845 + dotProduct5546;
    vec4 temp53 = vec4(dotProduct143536, dotProduct2943, dotProduct4447, dotProduct5948);
    gl_Position = temp53;
    f = am3[2].y;
    
}
