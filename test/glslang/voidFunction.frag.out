
Top IR:
; ModuleID = 'Top'

@bar = internal global float 0.000000e+00
@bigColor = external addrspace(2) constant <4 x float>
@FragColor_shadow = internal global <4 x float> zeroinitializer
@BaseColor_shadow = internal global <4 x float> zeroinitializer
@d = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %outColor = alloca <4 x float>
  store float 2.000000e+00, float* @bar
  %outColor1 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !0
  store <4 x float> %outColor1, <4 x float>* %outColor
  call void @"foo("()
  call void @"foo2("()
  %0 = load float* @bar
  %1 = load <4 x float>* %outColor
  %2 = extractelement <4 x float> %1, i32 0
  %3 = fadd float %2, %0
  %4 = load <4 x float>* %outColor
  %outColor2 = insertelement <4 x float> %4, float %3, i32 0
  store <4 x float> %outColor2, <4 x float>* %outColor
  %FragColor_shadow = load <4 x float>* %outColor
  store <4 x float> %FragColor_shadow, <4 x float>* @FragColor_shadow
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  unreachable

stage-epilogue:                                   ; preds = %entry
  %5 = load <4 x float>* @FragColor_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %5), !gla.output !3
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

define internal fastcc void @"foo("() alwaysinline {
entry:
  %0 = load float* @bar
  %bar = fadd float %0, 1.000000e+00
  store float %bar, float* @bar
  ret void

post-return:                                      ; No predecessors!
  unreachable
}

define internal fastcc void @"foo2("() alwaysinline {
entry:
  %0 = load float* @bar
  %bar = fadd float %0, 1.000000e+00
  store float %bar, float* @bar
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

!gla.uniforms = !{!0, !2}
!gla.outputs = !{!3}
!gla.inputs = !{!4}

!0 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !1}
!3 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !1}
!4 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1025, null}


Bottom IR:
; ModuleID = 'Top'

@bigColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %outColor1 = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !0
  %0 = extractelement <4 x float> %outColor1, i32 0
  %1 = fadd float %0, 4.000000e+00
  %2 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %outColor1, i32 1, float %1, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  call void @llvm.gla.fWriteData.v4f32(i32 1024, i32 -1, <4 x float> %2), !gla.output !3
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone

!gla.uniforms = !{!0, !2}
!gla.outputs = !{!3}
!gla.inputs = !{!4}

!0 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !1}
!1 = metadata !{i32 0, i32 0, i32 1024, null}
!2 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !1}
!3 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @FragColor_shadow_typeProxy, metadata !1}
!4 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_shadow_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 0, i32 1025, null}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 120
// LunarGOO output (r722)
uniform vec4 bigColor;
uniform float d;
const float const22 = 4.0;

void main()
{
    float temp21 = bigColor.x + const22;
    vec4 temp23 = bigColor;
    temp23.x = temp21;
    gl_FragColor = temp23;
    
}

#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####
#version 120
// LunarGOO output (r722)
uniform vec4 bigColor;
uniform float d;
const float const22 = 4.0;

void main()
{
    float temp211 = bigColor.x + const22;
    vec4 temp23 = bigColor;
    temp23.x = temp211;
    gl_FragColor = temp23;
    
}

