
***Unsupported functionality: glslang selection

***Unsupported functionality: glslang selection

***Unsupported functionality: glslang loops

***Unsupported functionality: glslang selection

Top IR:
; ModuleID = 'Top'

%s1 = type { i32, float }
%s2 = type { i32, float, %s1, <4 x float> }
%s3 = type { %s2, i32, float, %s1 }

@foo3 = external addrspace(2) constant %s3
@gl_FragColor = internal global <4 x float> zeroinitializer
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %a = alloca [16 x float]
  %localFArray = alloca [16 x float]
  %i = alloca i32
  %localArray = alloca [16 x float]
  %x = alloca i32
  %locals2 = alloca %s2
  %locals21 = load %s2 addrspace(2)* getelementptr inbounds (%s3 addrspace(2)* @foo3, i32 0, i32 0)
  store %s2 %locals21, %s2* %locals2
  store i32 5, i32* %x
  %0 = load i32* %x
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %1 = extractelement <2 x float> %coord, i32 0
  %2 = getelementptr [16 x float]* %localArray, i32 0, i32 %0
  store float %1, float* %2
  store i32 0, i32* %i
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %3 = getelementptr %s2* %locals2, i32 0, i32 3
  store <4 x float> %color, <4 x float>* %3
  %coord2 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %4 = extractelement <2 x float> %coord2, i32 1
  %5 = getelementptr %s2* %locals2, i32 0, i32 3
  %6 = load <4 x float>* %5
  %7 = insertelement <4 x float> %6, float %4, i32 2
  store <4 x float> %7, <4 x float>* %5
  %8 = getelementptr %s2* %locals2, i32 0, i32 3
  %9 = load <4 x float>* %8
  %10 = getelementptr [16 x float]* %localFArray, i32 0, i32 4
  %11 = load float* %10
  %12 = getelementptr %s2* %locals2, i32 0, i32 2, i32 1
  %13 = load float* %12
  %14 = fadd float %11, %13
  %15 = load i32* %x
  %16 = getelementptr [16 x float]* %localArray, i32 0, i32 %15
  %17 = load float* %16
  %18 = fadd float %14, %17
  %19 = load i32* %x
  %20 = getelementptr [16 x float]* %a, i32 0, i32 %19
  %21 = load float* %20
  %22 = fadd float %18, %21
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = insertelement <4 x float> %23, float %22, i32 1
  %25 = insertelement <4 x float> %24, float %22, i32 2
  %26 = insertelement <4 x float> %25, float %22, i32 3
  %27 = fmul <4 x float> %9, %26
  %28 = load i32 addrspace(1)* @"sampler2D sampler"
  %coord3 = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %29 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %28, i32 0, <2 x float> %coord3)
  %gl_FragColor = fmul <4 x float> %27, %29
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  %30 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %30)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

%s1 = type { i32, float }
%s2 = type { i32, float, %s1, <4 x float> }
%s3 = type { %s2, i32, float, %s1 }

@foo3 = external addrspace(2) constant %s3
@"sampler2D sampler" = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr %s3 addrspace(2)* @foo3, i32 0, i32 0, i32 2, i32 1
  %0 = load float addrspace(2)* %gla_constGEP, align 4
  %coord = call <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32 0, i32 -1, i32 1)
  %1 = extractelement <2 x float> %coord, i32 0
  %2 = fadd float %0, %1
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %2, <4 x i32> zeroinitializer)
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 1, i32 -1, i32 1)
  %4 = load i32 addrspace(1)* @"sampler2D sampler", align 4
  %5 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.v2f32.f32(<4 x float> %color, i32 4, float undef, i32 undef, float undef, i32 undef, <2 x float> %coord, i32 1, float undef, i32 undef)
  %6 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %4, i32 0, <2 x float> %coord)
  %7 = fmul <4 x float> %5, %3
  %gl_FragColor = fmul <4 x float> %7, %6
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %gl_FragColor)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <2 x float> @llvm.gla.fReadInterpolant.v2f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.v2f32.f32(<4 x float>, i32, float, i32, float, i32, <2 x float>, i32, float, i32) nounwind readnone

declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) nounwind readnone

// LunarGOO(r471) output
#version 130
struct s1 {
    int member0;
    float member1;
};

struct s2 {
    int member0;
    float member1;
    s1 member2;
    vec4 member3;
};

struct s3 {
    s2 member0;
    int member1;
    float member2;
    s1 member3;
};

uniform s3 foo3;
uniform sampler2D sampler;
in vec2 coord;
in vec4 color;

void main()
{
    float temp21 = foo3.member0.member2.member1;
    float temp22 = temp21 + coord.x;
    vec4 temp23 = vec4(temp22);
    vec4 temp24 = color;
    temp24.z = coord.y;
    vec4 temp25 = texture2D(sampler, coord);
    vec4 temp26 = temp24 * temp23;
    vec4 gla_copyout_gl_FragColor = temp26 * temp25;
    gl_FragColor = gla_copyout_gl_FragColor;
    
}
#### BEGIN COMPILER 0 INFO LOG ####

#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####

#### END LINKER INFO LOG ####
