
Top IR:
; ModuleID = 'Top'

@colorOut_shadow = internal global [6 x <4 x float>] zeroinitializer
@color_shadow = internal global <4 x float> zeroinitializer
@Position_shadow = internal global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %i = alloca i32
  store i32 1, i32* %i
  br label %loop-header

loop-header:                                      ; preds = %post-loop-continue, %ifmerge, %entry
  %0 = load i32* %i
  %1 = icmp slt i32 %0, 5
  %2 = xor i1 %1, true
  br i1 %2, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %loop-header, %post-loop-break
  %3 = load i32* %i
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  store <4 x float> %color, <4 x float>* @color_shadow
  %4 = load <4 x float>* @color_shadow
  %5 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 %3
  store <4 x float> %4, <4 x float>* %5
  %6 = load i32* %i
  %i1 = add i32 %6, 1
  store i32 %i1, i32* %i
  br label %loop-header

post-loop-continue:                               ; No predecessors!
  br label %loop-header

loop-merge:                                       ; preds = %then
  %Position_shadow = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @colorOut_shadow, i32 0, i32 2)
  store <4 x float> %Position_shadow, <4 x float>* @Position_shadow
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge
  %7 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @colorOut_shadow, i32 0, i32 0)
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %7)
  %8 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @colorOut_shadow, i32 0, i32 1)
  call void @llvm.gla.fWriteData.v4f32(i32 1, i32 -1, <4 x float> %8)
  %9 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @colorOut_shadow, i32 0, i32 2)
  call void @llvm.gla.fWriteData.v4f32(i32 2, i32 -1, <4 x float> %9)
  %10 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @colorOut_shadow, i32 0, i32 3)
  call void @llvm.gla.fWriteData.v4f32(i32 3, i32 -1, <4 x float> %10)
  %11 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @colorOut_shadow, i32 0, i32 4)
  call void @llvm.gla.fWriteData.v4f32(i32 4, i32 -1, <4 x float> %11)
  %12 = load <4 x float>* getelementptr inbounds ([6 x <4 x float>]* @colorOut_shadow, i32 0, i32 5)
  call void @llvm.gla.fWriteData.v4f32(i32 5, i32 -1, <4 x float> %12)
  %13 = load <4 x float>* @Position_shadow
  call void @llvm.gla.fWriteData.v4f32(i32 6, i32 -1, <4 x float> %13)
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind


Bottom IR:
; ModuleID = 'Top'

@colorOut_shadow = internal unnamed_addr global [6 x <4 x float>] zeroinitializer

define fastcc void @main() {
entry:
  %color = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 -1, i32 1)
  %gla_constGEP = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 1
  store <4 x float> %color, <4 x float>* %gla_constGEP, align 16
  %gla_constGEP8 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 2
  store <4 x float> %color, <4 x float>* %gla_constGEP8, align 16
  %gla_constGEP9 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 3
  store <4 x float> %color, <4 x float>* %gla_constGEP9, align 16
  %gla_constGEP10 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 4
  store <4 x float> %color, <4 x float>* %gla_constGEP10, align 16
  %gla_constGEP11 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 0
  %0 = load <4 x float>* %gla_constGEP11, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 0, i32 -1, <4 x float> %0)
  %gla_constGEP12 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 1
  %1 = load <4 x float>* %gla_constGEP12, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 1, i32 -1, <4 x float> %1)
  %gla_constGEP13 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 2
  %2 = load <4 x float>* %gla_constGEP13, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 2, i32 -1, <4 x float> %2)
  %gla_constGEP14 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 3
  %3 = load <4 x float>* %gla_constGEP14, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 3, i32 -1, <4 x float> %3)
  %gla_constGEP15 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 4
  %4 = load <4 x float>* %gla_constGEP15, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 4, i32 -1, <4 x float> %4)
  %gla_constGEP16 = getelementptr [6 x <4 x float>]* @colorOut_shadow, i32 0, i32 5
  %5 = load <4 x float>* %gla_constGEP16, align 16
  call void @llvm.gla.fWriteData.v4f32(i32 5, i32 -1, <4 x float> %5)
  call void @llvm.gla.fWriteData.v4f32(i32 6, i32 -1, <4 x float> %color)
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32, i32) nounwind readnone

declare void @llvm.gla.fWriteData.v4f32(i32, i32, <4 x float>) nounwind
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r471) output
#version 130
vec4[6] colorOut_shadow;
out vec4 colorOut[6];
in vec4 color;

void main()
{
    colorOut_shadow[1] = color;
    colorOut_shadow[2] = color;
    colorOut_shadow[3] = color;
    colorOut_shadow[4] = color;
    vec4 temp21 = colorOut_shadow[0];
    colorOut[0] = temp21;
    vec4 temp22 = colorOut_shadow[1];
    colorOut[1] = temp22;
    vec4 temp23 = colorOut_shadow[2];
    colorOut[2] = temp23;
    vec4 temp24 = colorOut_shadow[3];
    colorOut[3] = temp24;
    vec4 temp25 = colorOut_shadow[4];
    colorOut[4] = temp25;
    vec4 temp26 = colorOut_shadow[5];
    colorOut[5] = temp26;
    gl_Position = color;
    
}
#### BEGIN COMPILER 0 INFO LOG ####
#### END COMPILER 0 INFO LOG ####
#### BEGIN LINKER INFO LOG ####
#### END LINKER INFO LOG ####

// LunarGOO(r471) output
#version 130
vec4[6] colorOut_shadow;
vec4[6] colorOut_shadow1;
out vec4 colorOut[6];
in vec4 color;

void main()
{
    colorOut_shadow[1] = color;
    colorOut_shadow[2] = color;
    colorOut_shadow[3] = color;
    colorOut_shadow[4] = color;
    vec4 temp214 = colorOut_shadow[0];
    colorOut_shadow1[0] = temp214;
    colorOut_shadow1[1] = color;
    colorOut_shadow1[2] = color;
    colorOut_shadow1[3] = color;
    colorOut_shadow1[4] = color;
    vec4 temp269 = colorOut_shadow[5];
    colorOut_shadow1[5] = temp269;
    colorOut[0] = temp214;
    vec4 temp23 = colorOut_shadow1[1];
    colorOut[1] = temp23;
    vec4 temp24 = colorOut_shadow1[2];
    colorOut[2] = temp24;
    vec4 temp25 = colorOut_shadow1[3];
    colorOut[3] = temp25;
    vec4 temp26 = colorOut_shadow1[4];
    colorOut[4] = temp26;
    vec4 temp27 = colorOut_shadow1[5];
    colorOut[5] = temp27;
    gl_Position = color;
    
}
